// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: econ_gcmessages.proto

#include "econ_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgApplyAutograph::CMsgApplyAutograph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.autograph_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_item_id_)*/uint64_t{0u}} {}
struct CMsgApplyAutographDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgApplyAutographDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgApplyAutographDefaultTypeInternal() {}
  union {
    CMsgApplyAutograph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgApplyAutographDefaultTypeInternal _CMsgApplyAutograph_default_instance_;
PROTOBUF_CONSTEXPR CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.new_class_)*/0u
  , /*decltype(_impl_.new_slot_)*/0u
  , /*decltype(_impl_.style_index_)*/255u} {}
struct CMsgAdjustItemEquippedStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAdjustItemEquippedStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAdjustItemEquippedStateDefaultTypeInternal() {}
  union {
    CMsgAdjustItemEquippedState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAdjustItemEquippedStateDefaultTypeInternal _CMsgAdjustItemEquippedState_default_instance_;
PROTOBUF_CONSTEXPR CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.event_type_)*/0u
  , /*decltype(_impl_.adjustment_)*/0u} {}
struct CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal() {}
  union {
    CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal _CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_default_instance_;
PROTOBUF_CONSTEXPR CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strange_count_adjustments_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.turbo_mode_)*/false} {}
struct CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal() {}
  union {
    CMsgEconPlayerStrangeCountAdjustment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal _CMsgEconPlayerStrangeCountAdjustment_default_instance_;
PROTOBUF_CONSTEXPR CMsgCraftingResponse::CMsgCraftingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgCraftingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCraftingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCraftingResponseDefaultTypeInternal() {}
  union {
    CMsgCraftingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCraftingResponseDefaultTypeInternal _CMsgCraftingResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.currency_)*/0u} {}
struct CMsgGCRequestStoreSalesDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCRequestStoreSalesDataDefaultTypeInternal _CMsgGCRequestStoreSalesData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.price_)*/0u} {}
struct CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesDataResponse_Price _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal _CMsgGCRequestStoreSalesDataResponse_Price_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sale_price_)*/{}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.expiration_time_)*/0u} {}
struct CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal _CMsgGCRequestStoreSalesDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.expiration_time_)*/0u} {}
struct CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesDataUpToDateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal _CMsgGCRequestStoreSalesDataUpToDateResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToGCPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCPingRequestDefaultTypeInternal() {}
  union {
    CMsgGCToGCPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCPingRequestDefaultTypeInternal _CMsgGCToGCPingRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToGCPingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCPingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCPingResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCPingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCPingResponseDefaultTypeInternal _CMsgGCToGCPingResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgGCToGCGetUserSessionServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGetUserSessionServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserSessionServerDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserSessionServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGetUserSessionServerDefaultTypeInternal _CMsgGCToGCGetUserSessionServer_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.is_online_)*/false} {}
struct CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserSessionServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal _CMsgGCToGCGetUserSessionServerResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.max_spectators_)*/0u} {}
struct CMsgGCToGCGetUserServerMembersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGetUserServerMembersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserServerMembersDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserServerMembers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGetUserServerMembersDefaultTypeInternal _CMsgGCToGCGetUserServerMembers_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.member_account_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserServerMembersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal _CMsgGCToGCGetUserServerMembersResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountids_)*/{}
  , /*decltype(_impl_._accountids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgLookupMultipleAccountNamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLookupMultipleAccountNamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLookupMultipleAccountNamesDefaultTypeInternal() {}
  union {
    CMsgLookupMultipleAccountNames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLookupMultipleAccountNamesDefaultTypeInternal _CMsgLookupMultipleAccountNames_default_instance_;
PROTOBUF_CONSTEXPR CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal() {}
  union {
    CMsgLookupMultipleAccountNamesResponse_Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal _CMsgLookupMultipleAccountNamesResponse_Account_default_instance_;
PROTOBUF_CONSTEXPR CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal() {}
  union {
    CMsgLookupMultipleAccountNamesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal _CMsgLookupMultipleAccountNamesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgRequestCrateItems::CMsgRequestCrateItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.crate_item_def_)*/0u} {}
struct CMsgRequestCrateItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRequestCrateItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRequestCrateItemsDefaultTypeInternal() {}
  union {
    CMsgRequestCrateItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRequestCrateItemsDefaultTypeInternal _CMsgRequestCrateItems_default_instance_;
PROTOBUF_CONSTEXPR CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_defs_)*/{}
  , /*decltype(_impl_.peek_item_defs_)*/{}
  , /*decltype(_impl_.response_)*/0u} {}
struct CMsgRequestCrateItemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRequestCrateItemsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRequestCrateItemsResponseDefaultTypeInternal() {}
  union {
    CMsgRequestCrateItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRequestCrateItemsResponseDefaultTypeInternal _CMsgRequestCrateItemsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgRequestCrateEscalationLevel::CMsgRequestCrateEscalationLevel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.crate_item_def_)*/0u} {}
struct CMsgRequestCrateEscalationLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRequestCrateEscalationLevelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRequestCrateEscalationLevelDefaultTypeInternal() {}
  union {
    CMsgRequestCrateEscalationLevel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRequestCrateEscalationLevelDefaultTypeInternal _CMsgRequestCrateEscalationLevel_default_instance_;
PROTOBUF_CONSTEXPR CMsgRequestCrateEscalationLevelResponse::CMsgRequestCrateEscalationLevelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0u
  , /*decltype(_impl_.escalation_level0_)*/0u
  , /*decltype(_impl_.escalation_level1_)*/0u
  , /*decltype(_impl_.escalation_level2_)*/0u
  , /*decltype(_impl_.escalation_level3_)*/0u} {}
struct CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal() {}
  union {
    CMsgRequestCrateEscalationLevelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal _CMsgRequestCrateEscalationLevelResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.drop_rate_bonus_)*/0
  , /*decltype(_impl_.booster_type_)*/0u
  , /*decltype(_impl_.exclusive_item_def_)*/0u
  , /*decltype(_impl_.allow_equal_rate_)*/false} {}
struct CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal() {}
  union {
    CMsgGCToGCCanUseDropRateBonus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal _CMsgGCToGCCanUseDropRateBonus_default_instance_;
PROTOBUF_CONSTEXPR CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.drop_rate_bonus_)*/0
  , /*decltype(_impl_.booster_type_)*/0u
  , /*decltype(_impl_.seconds_duration_)*/0u
  , /*decltype(_impl_.end_time_stamp_)*/0u} {}
struct CMsgSQLAddDropRateBonusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSQLAddDropRateBonusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSQLAddDropRateBonusDefaultTypeInternal() {}
  union {
    CMsgSQLAddDropRateBonus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSQLAddDropRateBonusDefaultTypeInternal _CMsgSQLAddDropRateBonus_default_instance_;
PROTOBUF_CONSTEXPR CMsgSQLUpgradeBattleBooster::CMsgSQLUpgradeBattleBooster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.bonus_to_add_)*/0
  , /*decltype(_impl_.booster_type_)*/0u} {}
struct CMsgSQLUpgradeBattleBoosterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSQLUpgradeBattleBoosterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSQLUpgradeBattleBoosterDefaultTypeInternal() {}
  union {
    CMsgSQLUpgradeBattleBooster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSQLUpgradeBattleBoosterDefaultTypeInternal _CMsgSQLUpgradeBattleBooster_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.reload_)*/false} {}
struct CMsgGCToGCRefreshSOCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCRefreshSOCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCRefreshSOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCRefreshSOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCRefreshSOCacheDefaultTypeInternal _CMsgGCToGCRefreshSOCache_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCAddSubscriptionTime::CMsgGCToGCAddSubscriptionTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matching_subscription_def_indexes_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.additional_seconds_)*/0u} {}
struct CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal() {}
  union {
    CMsgGCToGCAddSubscriptionTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal _CMsgGCToGCAddSubscriptionTime_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_uint32_)*/0u
  , /*decltype(_impl_.value_float_)*/0} {}
struct CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_account_id_)*/0u
  , /*decltype(_impl_.audit_action_)*/0u
  , /*decltype(_impl_.audit_data_)*/uint64_t{0u}} {}
struct CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItems_Item::CMsgGCToGCGrantAccountRolledItems_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.loot_lists_)*/{}
  , /*decltype(_impl_.dynamic_attributes_)*/{}
  , /*decltype(_impl_.additional_audit_entries_)*/{}
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.ignore_limit_)*/false
  , /*decltype(_impl_.origin_)*/0u
  , /*decltype(_impl_.inventory_token_)*/0u} {}
struct CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_Item_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItems::CMsgGCToGCGrantAccountRolledItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.audit_action_)*/0u
  , /*decltype(_impl_.audit_data_)*/uint64_t{0u}} {}
struct CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCBetaDeleteItems::CMsgGCToGCBetaDeleteItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_.item_defs_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgGCToGCBetaDeleteItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCBetaDeleteItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCBetaDeleteItemsDefaultTypeInternal() {}
  union {
    CMsgGCToGCBetaDeleteItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCBetaDeleteItemsDefaultTypeInternal _CMsgGCToGCBetaDeleteItems_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_def_index_)*/0u
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantSelfMadeItemToAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal _CMsgGCToGCGrantSelfMadeItemToAccount_default_instance_;
PROTOBUF_CONSTEXPR CMsgUseItem::CMsgUseItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gift__potential_targets_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.target_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.initiator_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.duel__class_lock_)*/0u
  , /*decltype(_impl_.itempack__ack_immediately_)*/false} {}
struct CMsgUseItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgUseItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgUseItemDefaultTypeInternal() {}
  union {
    CMsgUseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgUseItemDefaultTypeInternal _CMsgUseItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerUseItem::CMsgServerUseItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.use_item_msg_)*/nullptr
  , /*decltype(_impl_.initiator_account_id_)*/0u} {}
struct CMsgServerUseItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerUseItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerUseItemDefaultTypeInternal() {}
  union {
    CMsgServerUseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerUseItemDefaultTypeInternal _CMsgServerUseItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgUseMultipleItems::CMsgUseMultipleItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgUseMultipleItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgUseMultipleItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgUseMultipleItemsDefaultTypeInternal() {}
  union {
    CMsgUseMultipleItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgUseMultipleItemsDefaultTypeInternal _CMsgUseMultipleItems_default_instance_;
PROTOBUF_CONSTEXPR CGCStoreRechargeRedirect_LineItem::CGCStoreRechargeRedirect_LineItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_def_id_)*/0u
  , /*decltype(_impl_.quantity_)*/0u} {}
struct CGCStoreRechargeRedirect_LineItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCStoreRechargeRedirect_LineItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCStoreRechargeRedirect_LineItemDefaultTypeInternal() {}
  union {
    CGCStoreRechargeRedirect_LineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCStoreRechargeRedirect_LineItemDefaultTypeInternal _CGCStoreRechargeRedirect_LineItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCEconSQLWorkItemEmbeddedRollbackData::CMsgGCEconSQLWorkItemEmbeddedRollbackData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deleted_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.old_audit_action_)*/0u
  , /*decltype(_impl_.new_audit_action_)*/0u
  , /*decltype(_impl_.expected_audit_action_)*/0u} {}
struct CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal() {}
  union {
    CMsgGCEconSQLWorkItemEmbeddedRollbackData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal _CMsgGCEconSQLWorkItemEmbeddedRollbackData_default_instance_;
PROTOBUF_CONSTEXPR CMsgCraftStatue::CMsgCraftStatue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sequencename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.heroid_)*/0u
  , /*decltype(_impl_.cycle_)*/0
  , /*decltype(_impl_.toolid_)*/uint64_t{0u}
  , /*decltype(_impl_.pedestal_itemdef_)*/0u} {}
struct CMsgCraftStatueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCraftStatueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCraftStatueDefaultTypeInternal() {}
  union {
    CMsgCraftStatue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCraftStatueDefaultTypeInternal _CMsgCraftStatue_default_instance_;
PROTOBUF_CONSTEXPR CMsgRedeemCode::CMsgRedeemCode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgRedeemCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRedeemCodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRedeemCodeDefaultTypeInternal() {}
  union {
    CMsgRedeemCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRedeemCodeDefaultTypeInternal _CMsgRedeemCode_default_instance_;
PROTOBUF_CONSTEXPR CMsgRedeemCodeResponse::CMsgRedeemCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0u} {}
struct CMsgRedeemCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRedeemCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRedeemCodeResponseDefaultTypeInternal() {}
  union {
    CMsgRedeemCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRedeemCodeResponseDefaultTypeInternal _CMsgRedeemCodeResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDevNewItemRequest::CMsgDevNewItemRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attr_def_name_)*/{}
  , /*decltype(_impl_.attr_value_)*/{}
  , /*decltype(_impl_.item_def_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loot_list_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_quality_)*/0u} {}
struct CMsgDevNewItemRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDevNewItemRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDevNewItemRequestDefaultTypeInternal() {}
  union {
    CMsgDevNewItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDevNewItemRequestDefaultTypeInternal _CMsgDevNewItemRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgDevNewItemRequestResponse::CMsgDevNewItemRequestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgDevNewItemRequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDevNewItemRequestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDevNewItemRequestResponseDefaultTypeInternal() {}
  union {
    CMsgDevNewItemRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDevNewItemRequestResponseDefaultTypeInternal _CMsgDevNewItemRequestResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDevUnlockAllItemStyles::CMsgDevUnlockAllItemStyles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}} {}
struct CMsgDevUnlockAllItemStylesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDevUnlockAllItemStylesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDevUnlockAllItemStylesDefaultTypeInternal() {}
  union {
    CMsgDevUnlockAllItemStyles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDevUnlockAllItemStylesDefaultTypeInternal _CMsgDevUnlockAllItemStyles_default_instance_;
PROTOBUF_CONSTEXPR CMsgDevUnlockAllItemStylesResponse::CMsgDevUnlockAllItemStylesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal() {}
  union {
    CMsgDevUnlockAllItemStylesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal _CMsgDevUnlockAllItemStylesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetAccountSubscriptionItem::CMsgGCGetAccountSubscriptionItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgGCGetAccountSubscriptionItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetAccountSubscriptionItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetAccountSubscriptionItemDefaultTypeInternal() {}
  union {
    CMsgGCGetAccountSubscriptionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetAccountSubscriptionItemDefaultTypeInternal _CMsgGCGetAccountSubscriptionItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetAccountSubscriptionItemResponse::CMsgGCGetAccountSubscriptionItemResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.def_index_)*/0u} {}
struct CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetAccountSubscriptionItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal _CMsgGCGetAccountSubscriptionItemResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCAddGiftItem::CMsgGCAddGiftItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgGCAddGiftItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCAddGiftItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCAddGiftItemDefaultTypeInternal() {}
  union {
    CMsgGCAddGiftItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCAddGiftItemDefaultTypeInternal _CMsgGCAddGiftItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gift_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.give_to_account_id_)*/0u} {}
struct CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal() {}
  union {
    CMsgClientToGCWrapAndDeliverGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal _CMsgClientToGCWrapAndDeliverGift_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCWrapAndDeliverGiftResponse::CMsgClientToGCWrapAndDeliverGiftResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_.gifting_charge_uses_)*/0u
  , /*decltype(_impl_.gifting_charge_max_)*/0
  , /*decltype(_impl_.gifting_uses_)*/0u
  , /*decltype(_impl_.gifting_max_)*/0
  , /*decltype(_impl_.gifting_window_hours_)*/0u
  , /*decltype(_impl_.trade_restriction_)*/0} {}
struct CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCWrapAndDeliverGiftResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal _CMsgClientToGCWrapAndDeliverGiftResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnwrapGift::CMsgClientToGCUnwrapGift(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}} {}
struct CMsgClientToGCUnwrapGiftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnwrapGiftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnwrapGiftDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnwrapGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnwrapGiftDefaultTypeInternal _CMsgClientToGCUnwrapGift_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetGiftPermissions::CMsgClientToGCGetGiftPermissions(
    ::_pbi::ConstantInitialized) {}
struct CMsgClientToGCGetGiftPermissionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetGiftPermissionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetGiftPermissionsDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetGiftPermissions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetGiftPermissionsDefaultTypeInternal _CMsgClientToGCGetGiftPermissions_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.permission_)*/0} {}
struct CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetGiftPermissionsResponse_FriendPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal _CMsgClientToGCGetGiftPermissionsResponse_FriendPermission_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetGiftPermissionsResponse::CMsgClientToGCGetGiftPermissionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.friend_permissions_)*/{}
  , /*decltype(_impl_.is_unlimited_)*/false
  , /*decltype(_impl_.has_two_factor_)*/false
  , /*decltype(_impl_.sender_permission_)*/0
  , /*decltype(_impl_.friendship_age_requirement_)*/0u
  , /*decltype(_impl_.friendship_age_requirement_two_factor_)*/0u} {}
struct CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetGiftPermissionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal _CMsgClientToGCGetGiftPermissionsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnpackBundle::CMsgClientToGCUnpackBundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}} {}
struct CMsgClientToGCUnpackBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnpackBundleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnpackBundleDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnpackBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnpackBundleDefaultTypeInternal _CMsgClientToGCUnpackBundle_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnpackBundleResponse::CMsgClientToGCUnpackBundleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unpacked_item_ids_)*/{}
  , /*decltype(_impl_.unpacked_item_def_indexes_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCUnpackBundleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnpackBundleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnpackBundleResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnpackBundleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnpackBundleResponseDefaultTypeInternal _CMsgClientToGCUnpackBundleResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCPackBundle::CMsgClientToGCPackBundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_.bundle_item_def_index_)*/0u} {}
struct CMsgClientToGCPackBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCPackBundleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCPackBundleDefaultTypeInternal() {}
  union {
    CMsgClientToGCPackBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCPackBundleDefaultTypeInternal _CMsgClientToGCPackBundle_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCPackBundleResponse::CMsgClientToGCPackBundleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCPackBundleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCPackBundleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCPackBundleResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCPackBundleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCPackBundleResponseDefaultTypeInternal _CMsgClientToGCPackBundleResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientStoreTransactionCompleted::CMsgGCToClientStoreTransactionCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_.txn_id_)*/uint64_t{0u}} {}
struct CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal() {}
  union {
    CMsgGCToClientStoreTransactionCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal _CMsgGCToClientStoreTransactionCompleted_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgClientToGCEquipItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCEquipItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCEquipItemsDefaultTypeInternal() {}
  union {
    CMsgClientToGCEquipItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCEquipItemsDefaultTypeInternal _CMsgClientToGCEquipItems_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCEquipItemsResponse::CMsgClientToGCEquipItemsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.so_cache_version_id_)*/uint64_t{0u}} {}
struct CMsgClientToGCEquipItemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCEquipItemsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCEquipItemsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCEquipItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCEquipItemsResponseDefaultTypeInternal _CMsgClientToGCEquipItemsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.style_index_)*/255u} {}
struct CMsgClientToGCSetItemStyleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCSetItemStyleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCSetItemStyleDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetItemStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCSetItemStyleDefaultTypeInternal _CMsgClientToGCSetItemStyle_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCSetItemStyleResponse::CMsgClientToGCSetItemStyleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCSetItemStyleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCSetItemStyleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCSetItemStyleResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetItemStyleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCSetItemStyleResponseDefaultTypeInternal _CMsgClientToGCSetItemStyleResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnlockItemStyle::CMsgClientToGCUnlockItemStyle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.consumable_item_ids_)*/{}
  , /*decltype(_impl_.item_to_unlock_)*/uint64_t{0u}
  , /*decltype(_impl_.style_index_)*/255u} {}
struct CMsgClientToGCUnlockItemStyleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnlockItemStyleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockItemStyleDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockItemStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnlockItemStyleDefaultTypeInternal _CMsgClientToGCUnlockItemStyle_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnlockItemStyleResponse::CMsgClientToGCUnlockItemStyleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_.style_index_)*/255u
  , /*decltype(_impl_.style_prereq_)*/255u} {}
struct CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockItemStyleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal _CMsgClientToGCUnlockItemStyleResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCSetItemInventoryCategory::CMsgClientToGCSetItemInventoryCategory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_.set_to_value_)*/0u
  , /*decltype(_impl_.remove_categories_)*/0u
  , /*decltype(_impl_.add_categories_)*/0u} {}
struct CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetItemInventoryCategory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal _CMsgClientToGCSetItemInventoryCategory_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnlockCrate::CMsgClientToGCUnlockCrate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.crate_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.key_item_id_)*/uint64_t{0u}} {}
struct CMsgClientToGCUnlockCrateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnlockCrateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockCrateDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockCrate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnlockCrateDefaultTypeInternal _CMsgClientToGCUnlockCrate_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnlockCrateResponse_Item::CMsgClientToGCUnlockCrateResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.def_index_)*/0u} {}
struct CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockCrateResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal _CMsgClientToGCUnlockCrateResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCUnlockCrateResponse::CMsgClientToGCUnlockCrateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.granted_items_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgClientToGCUnlockCrateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCUnlockCrateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockCrateResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockCrateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCUnlockCrateResponseDefaultTypeInternal _CMsgClientToGCUnlockCrateResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRemoveItemAttribute::CMsgClientToGCRemoveItemAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}} {}
struct CMsgClientToGCRemoveItemAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRemoveItemAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRemoveItemAttributeDefaultTypeInternal() {}
  union {
    CMsgClientToGCRemoveItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRemoveItemAttributeDefaultTypeInternal _CMsgClientToGCRemoveItemAttribute_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRemoveItemAttributeResponse::CMsgClientToGCRemoveItemAttributeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRemoveItemAttributeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal _CMsgClientToGCRemoveItemAttributeResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCNameItem::CMsgClientToGCNameItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.tool_item_id_)*/uint64_t{0u}} {}
struct CMsgClientToGCNameItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCNameItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCNameItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCNameItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCNameItemDefaultTypeInternal _CMsgClientToGCNameItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCNameItemResponse::CMsgClientToGCNameItemResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCNameItemResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCNameItemResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCNameItemResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCNameItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCNameItemResponseDefaultTypeInternal _CMsgClientToGCNameItemResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCSetItemPosition::CMsgGCSetItemPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.new_position_)*/0u} {}
struct CMsgGCSetItemPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCSetItemPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCSetItemPositionDefaultTypeInternal() {}
  union {
    CMsgGCSetItemPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCSetItemPositionDefaultTypeInternal _CMsgGCSetItemPosition_default_instance_;
PROTOBUF_CONSTEXPR CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lootlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.item_quality_)*/0u
  , /*decltype(_impl_.item_flags_)*/0u
  , /*decltype(_impl_.item_count_)*/0u
  , /*decltype(_impl_.items_fulfilled_)*/0u
  , /*decltype(_impl_.item_rarity_)*/0u
  , /*decltype(_impl_.fulfilled_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.associated_item_def_)*/0u} {}
struct CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal() {}
  union {
    CAttribute_ItemDynamicRecipeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal _CAttribute_ItemDynamicRecipeComponent_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket::CProtoItemSocket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.required_hero_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.required_item_slot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attr_def_index_)*/0u
  , /*decltype(_impl_.required_type_)*/0u
  , /*decltype(_impl_.gem_def_index_)*/0u
  , /*decltype(_impl_.not_tradable_)*/false} {}
struct CProtoItemSocketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocketDefaultTypeInternal() {}
  union {
    CProtoItemSocket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocketDefaultTypeInternal _CProtoItemSocket_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_Empty::CProtoItemSocket_Empty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr} {}
struct CProtoItemSocket_EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_EmptyDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_EmptyDefaultTypeInternal _CProtoItemSocket_Empty_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_Effect::CProtoItemSocket_Effect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.effect_)*/0u} {}
struct CProtoItemSocket_EffectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_EffectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_EffectDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Effect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_EffectDefaultTypeInternal _CProtoItemSocket_Effect_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_Color::CProtoItemSocket_Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.red_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.blue_)*/0u} {}
struct CProtoItemSocket_ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_ColorDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_ColorDefaultTypeInternal _CProtoItemSocket_Color_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_Strange::CProtoItemSocket_Strange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.strange_type_)*/0u
  , /*decltype(_impl_.strange_value_)*/0u} {}
struct CProtoItemSocket_StrangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_StrangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_StrangeDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Strange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_StrangeDefaultTypeInternal _CProtoItemSocket_Strange_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.strange_type_)*/0u
  , /*decltype(_impl_.strange_value_)*/0u
  , /*decltype(_impl_.ability_effect_)*/0u} {}
struct CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal _CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.games_viewed_)*/0u
  , /*decltype(_impl_.corporation_id_)*/0u
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CProtoItemSocket_SpectatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_SpectatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_SpectatorDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Spectator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_SpectatorDefaultTypeInternal _CProtoItemSocket_Spectator_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.asset_modifier_)*/0u} {}
struct CProtoItemSocket_AssetModifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_AssetModifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_AssetModifierDefaultTypeInternal() {}
  union {
    CProtoItemSocket_AssetModifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_AssetModifierDefaultTypeInternal _CProtoItemSocket_AssetModifier_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.asset_modifier_)*/0u
  , /*decltype(_impl_.anim_modifier_)*/0u
  , /*decltype(_impl_.ability_effect_)*/0u} {}
struct CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal() {}
  union {
    CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal _CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.autograph_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_.autograph_id_)*/0u
  , /*decltype(_impl_.autograph_score_)*/0u} {}
struct CProtoItemSocket_AutographDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_AutographDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_AutographDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Autograph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_AutographDefaultTypeInternal _CProtoItemSocket_Autograph_default_instance_;
PROTOBUF_CONSTEXPR CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.socket_)*/nullptr} {}
struct CProtoItemSocket_StaticVisualsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtoItemSocket_StaticVisualsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtoItemSocket_StaticVisualsDefaultTypeInternal() {}
  union {
    CProtoItemSocket_StaticVisuals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtoItemSocket_StaticVisualsDefaultTypeInternal _CProtoItemSocket_StaticVisuals_default_instance_;
PROTOBUF_CONSTEXPR CAttribute_String::CAttribute_String(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CAttribute_StringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CAttribute_StringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CAttribute_StringDefaultTypeInternal() {}
  union {
    CAttribute_String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CAttribute_StringDefaultTypeInternal _CAttribute_String_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetItemDailyRevenue_Request::CWorkshop_GetItemDailyRevenue_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.date_start_)*/0u
  , /*decltype(_impl_.date_end_)*/0u} {}
struct CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_GetItemDailyRevenue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal _CWorkshop_GetItemDailyRevenue_Request_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.revenue_usd_)*/int64_t{0}
  , /*decltype(_impl_.date_)*/0u
  , /*decltype(_impl_.units_)*/0} {}
struct CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal() {}
  union {
    CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal _CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetItemDailyRevenue_Response::CWorkshop_GetItemDailyRevenue_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.country_revenue_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_GetItemDailyRevenue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal _CWorkshop_GetItemDailyRevenue_Response_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetPackageDailyRevenue_Request::CWorkshop_GetPackageDailyRevenue_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packageid_)*/0u
  , /*decltype(_impl_.date_start_)*/0u
  , /*decltype(_impl_.date_end_)*/0u} {}
struct CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_GetPackageDailyRevenue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal _CWorkshop_GetPackageDailyRevenue_Request_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.revenue_usd_)*/int64_t{0}
  , /*decltype(_impl_.date_)*/0u
  , /*decltype(_impl_.units_)*/0} {}
struct CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal() {}
  union {
    CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal _CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetPackageDailyRevenue_Response::CWorkshop_GetPackageDailyRevenue_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.country_revenue_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_GetPackageDailyRevenue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal _CWorkshop_GetPackageDailyRevenue_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgSQLGCToGCGrantBackpackSlots::CMsgSQLGCToGCGrantBackpackSlots(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.add_slots_)*/0u} {}
struct CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal() {}
  union {
    CMsgSQLGCToGCGrantBackpackSlots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal _CMsgSQLGCToGCGrantBackpackSlots_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCLookupAccountName::CMsgClientToGCLookupAccountName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgClientToGCLookupAccountNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCLookupAccountNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCLookupAccountNameDefaultTypeInternal() {}
  union {
    CMsgClientToGCLookupAccountName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCLookupAccountNameDefaultTypeInternal _CMsgClientToGCLookupAccountName_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCLookupAccountNameResponse::CMsgClientToGCLookupAccountNameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCLookupAccountNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal _CMsgClientToGCLookupAccountNameResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipe_Item::CMsgClientToGCCreateStaticRecipe_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.slot_id_)*/0u} {}
struct CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipe_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal _CMsgClientToGCCreateStaticRecipe_Item_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipe::CMsgClientToGCCreateStaticRecipe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.recipe_def_index_)*/0u} {}
struct CMsgClientToGCCreateStaticRecipeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCCreateStaticRecipeDefaultTypeInternal _CMsgClientToGCCreateStaticRecipe_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CMsgClientToGCCreateStaticRecipeResponse_OutputItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.def_index_)*/0u
  , /*decltype(_impl_.slot_id_)*/0u} {}
struct CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse_OutputItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_OutputItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponse_InputError::CMsgClientToGCCreateStaticRecipeResponse_InputError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_id_)*/0u
  , /*decltype(_impl_.error_)*/0} {}
struct CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse_InputError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_InputError_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_.slot_id_)*/0u} {}
struct CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponse::CMsgClientToGCCreateStaticRecipeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_items_)*/{}
  , /*decltype(_impl_.input_errors_)*/{}
  , /*decltype(_impl_.additional_outputs_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgProcessTransactionOrder_Item::CMsgProcessTransactionOrder_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.category_desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_def_index_)*/0u
  , /*decltype(_impl_.item_price_)*/0u
  , /*decltype(_impl_.quantity_)*/0u
  , /*decltype(_impl_.store_purchase_type_)*/0u
  , /*decltype(_impl_.source_reference_id_)*/uint64_t{0u}
  , /*decltype(_impl_.parent_stack_index_)*/0
  , /*decltype(_impl_.default_price_)*/false
  , /*decltype(_impl_.is_user_facing_)*/false} {}
struct CMsgProcessTransactionOrder_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgProcessTransactionOrder_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgProcessTransactionOrder_ItemDefaultTypeInternal() {}
  union {
    CMsgProcessTransactionOrder_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgProcessTransactionOrder_ItemDefaultTypeInternal _CMsgProcessTransactionOrder_Item_default_instance_;
PROTOBUF_CONSTEXPR CMsgProcessTransactionOrder::CMsgProcessTransactionOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.txn_id_)*/uint64_t{0u}
  , /*decltype(_impl_.steam_txn_id_)*/uint64_t{0u}
  , /*decltype(_impl_.partner_txn_id_)*/uint64_t{0u}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.watermark_)*/uint64_t{0u}
  , /*decltype(_impl_.time_stamp_)*/0u
  , /*decltype(_impl_.purchase_report_status_)*/0
  , /*decltype(_impl_.currency_)*/0u} {}
struct CMsgProcessTransactionOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgProcessTransactionOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgProcessTransactionOrderDefaultTypeInternal() {}
  union {
    CMsgProcessTransactionOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgProcessTransactionOrderDefaultTypeInternal _CMsgProcessTransactionOrder_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessCDKeyTransaction::CMsgGCToGCStoreProcessCDKeyTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.reason_code_)*/0u
  , /*decltype(_impl_.partner_)*/0u} {}
struct CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessCDKeyTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal _CMsgGCToGCStoreProcessCDKeyTransaction_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessCDKeyTransactionResponse::CMsgGCToGCStoreProcessCDKeyTransactionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessCDKeyTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal _CMsgGCToGCStoreProcessCDKeyTransactionResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessSettlement::CMsgGCToGCStoreProcessSettlement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_)*/nullptr} {}
struct CMsgGCToGCStoreProcessSettlementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessSettlementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessSettlementDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessSettlement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCStoreProcessSettlementDefaultTypeInternal _CMsgGCToGCStoreProcessSettlement_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessSettlementResponse::CMsgGCToGCStoreProcessSettlementResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessSettlementResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal _CMsgGCToGCStoreProcessSettlementResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.con_command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_initiator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.report_output_)*/false
  , /*decltype(_impl_.sending_gc_)*/-1} {}
struct CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal() {}
  union {
    CMsgGCToGCBroadcastConsoleCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal _CMsgGCToGCBroadcastConsoleCommand_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCConsoleOutput_OutputLine::CMsgGCToGCConsoleOutput_OutputLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spew_level_)*/0u} {}
struct CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal() {}
  union {
    CMsgGCToGCConsoleOutput_OutputLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal _CMsgGCToGCConsoleOutput_OutputLine_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCConsoleOutput::CMsgGCToGCConsoleOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msgs_)*/{}
  , /*decltype(_impl_.initiator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_last_for_source_job_)*/false
  , /*decltype(_impl_.sending_gc_)*/-1} {}
struct CMsgGCToGCConsoleOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCConsoleOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCConsoleOutputDefaultTypeInternal() {}
  union {
    CMsgGCToGCConsoleOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCConsoleOutputDefaultTypeInternal _CMsgGCToGCConsoleOutput_default_instance_;
PROTOBUF_CONSTEXPR CMsgItemAges_MaxItemIDTimestamp::CMsgItemAges_MaxItemIDTimestamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/0u} {}
struct CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal() {}
  union {
    CMsgItemAges_MaxItemIDTimestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal _CMsgItemAges_MaxItemIDTimestamp_default_instance_;
PROTOBUF_CONSTEXPR CMsgItemAges::CMsgItemAges(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_item_id_timestamps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgItemAgesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgItemAgesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgItemAgesDefaultTypeInternal() {}
  union {
    CMsgItemAges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgItemAgesDefaultTypeInternal _CMsgItemAges_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCInternalTestMsg::CMsgGCToGCInternalTestMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/uint64_t{0u}
  , /*decltype(_impl_.context_)*/0u
  , /*decltype(_impl_.message_id_)*/0u
  , /*decltype(_impl_.job_id_source_)*/uint64_t{0u}
  , /*decltype(_impl_.job_id_target_)*/uint64_t{0u}
  , /*decltype(_impl_.sending_gc_)*/-1} {}
struct CMsgGCToGCInternalTestMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCInternalTestMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCInternalTestMsgDefaultTypeInternal() {}
  union {
    CMsgGCToGCInternalTestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCInternalTestMsgDefaultTypeInternal _CMsgGCToGCInternalTestMsg_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCClientServerVersionsUpdated::CMsgGCToGCClientServerVersionsUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_min_allowed_version_)*/0u
  , /*decltype(_impl_.client_active_version_)*/0u
  , /*decltype(_impl_.server_active_version_)*/0u
  , /*decltype(_impl_.server_deployed_version_)*/0u
  , /*decltype(_impl_.what_changed_)*/0u} {}
struct CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToGCClientServerVersionsUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal _CMsgGCToGCClientServerVersionsUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCBroadcastMessageFromSub::CMsgGCToGCBroadcastMessageFromSub(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_list_)*/{}
  , /*decltype(_impl_._account_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.steam_id_list_)*/{}
  , /*decltype(_impl_.serialized_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_id_)*/0u} {}
struct CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal() {}
  union {
    CMsgGCToGCBroadcastMessageFromSub _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal _CMsgGCToGCBroadcastMessageFromSub_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientCurrencyPricePoints_Currency::CMsgGCToClientCurrencyPricePoints_Currency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currency_price_)*/{}
  , /*decltype(_impl_._currency_price_cached_byte_size_)*/{0}
  , /*decltype(_impl_.currency_id_)*/0u} {}
struct CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal() {}
  union {
    CMsgGCToClientCurrencyPricePoints_Currency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal _CMsgGCToClientCurrencyPricePoints_Currency_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientCurrencyPricePoints::CMsgGCToClientCurrencyPricePoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_key_)*/{}
  , /*decltype(_impl_._price_key_cached_byte_size_)*/{0}
  , /*decltype(_impl_.currencies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToClientCurrencyPricePointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientCurrencyPricePointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientCurrencyPricePointsDefaultTypeInternal() {}
  union {
    CMsgGCToClientCurrencyPricePoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientCurrencyPricePointsDefaultTypeInternal _CMsgGCToClientCurrencyPricePoints_default_instance_;
PROTOBUF_CONSTEXPR CMsgBannedWordList::CMsgBannedWordList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.banned_words_)*/{}
  , /*decltype(_impl_.version_)*/0u} {}
struct CMsgBannedWordListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBannedWordListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBannedWordListDefaultTypeInternal() {}
  union {
    CMsgBannedWordList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBannedWordListDefaultTypeInternal _CMsgBannedWordList_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCFlushSteamInventoryCache_Key::CMsgGCToGCFlushSteamInventoryCache_Key(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.contextid_)*/uint64_t{0u}} {}
struct CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal() {}
  union {
    CMsgGCToGCFlushSteamInventoryCache_Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal _CMsgGCToGCFlushSteamInventoryCache_Key_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCFlushSteamInventoryCache::CMsgGCToGCFlushSteamInventoryCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCFlushSteamInventoryCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal _CMsgGCToGCFlushSteamInventoryCache_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCUpdateSubscriptionItems::CMsgGCToGCUpdateSubscriptionItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.always_notify_)*/false} {}
struct CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateSubscriptionItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal _CMsgGCToGCUpdateSubscriptionItems_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCSelfPing::CMsgGCToGCSelfPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sample_id_)*/0u} {}
struct CMsgGCToGCSelfPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCSelfPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCSelfPingDefaultTypeInternal() {}
  union {
    CMsgGCToGCSelfPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCSelfPingDefaultTypeInternal _CMsgGCToGCSelfPing_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGetInfuxIntervalStats::CMsgGCToGCGetInfuxIntervalStats(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetInfuxIntervalStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal _CMsgGCToGCGetInfuxIntervalStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCGetInfuxIntervalStatsResponse::CMsgGCToGCGetInfuxIntervalStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_ids_)*/{}
  , /*decltype(_impl_.stat_total_)*/{}
  , /*decltype(_impl_._stat_total_cached_byte_size_)*/{0}
  , /*decltype(_impl_.stat_samples_)*/{}
  , /*decltype(_impl_._stat_samples_cached_byte_size_)*/{0}
  , /*decltype(_impl_.stat_max_)*/{}
  , /*decltype(_impl_._stat_max_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sample_duration_ms_)*/0u} {}
struct CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetInfuxIntervalStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal _CMsgGCToGCGetInfuxIntervalStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCPurchaseSucceeded::CMsgGCToGCPurchaseSucceeded(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToGCPurchaseSucceededDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCPurchaseSucceededDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCPurchaseSucceededDefaultTypeInternal() {}
  union {
    CMsgGCToGCPurchaseSucceeded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCPurchaseSucceededDefaultTypeInternal _CMsgGCToGCPurchaseSucceeded_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetLimitedItemPurchaseQuantity::CMsgClientToGCGetLimitedItemPurchaseQuantity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_def_)*/0u} {}
struct CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetLimitedItemPurchaseQuantity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal _CMsgClientToGCGetLimitedItemPurchaseQuantity_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.quantity_purchased_)*/0u} {}
struct CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetLimitedItemPurchaseQuantityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal _CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCUpdateWelcomeMsg::CMsgGCToGCUpdateWelcomeMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_msg_)*/nullptr
  , /*decltype(_impl_.server_)*/false
  , /*decltype(_impl_.broadcast_)*/false} {}
struct CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateWelcomeMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal _CMsgGCToGCUpdateWelcomeMsg_default_instance_;
static ::_pb::Metadata file_level_metadata_econ_5fgcmessages_2eproto[129];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_econ_5fgcmessages_2eproto[13];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_econ_5fgcmessages_2eproto = nullptr;

const uint32_t TableStruct_econ_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, _impl_.autograph_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, _impl_.item_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _impl_.new_class_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _impl_.new_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _impl_.style_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _impl_.adjustment_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, _impl_.strange_count_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, _impl_.turbo_mode_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgCraftingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCraftingResponse, _impl_.item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, _impl_.currency_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, _impl_.price_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, _impl_.sale_price_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, _impl_.expiration_time_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, _impl_.expiration_time_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServer, _impl_.account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, _impl_.is_online_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, _impl_.max_spectators_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembersResponse, _impl_.member_account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNames, _impl_.accountids_),
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, _impl_.persona_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse, _impl_.accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItems, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItems, _impl_.crate_item_def_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, _impl_.item_defs_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, _impl_.peek_item_defs_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevel, _impl_.crate_item_def_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _impl_.escalation_level0_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _impl_.escalation_level1_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _impl_.escalation_level2_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _impl_.escalation_level3_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _impl_.drop_rate_bonus_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _impl_.booster_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _impl_.exclusive_item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _impl_.allow_equal_rate_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_.drop_rate_bonus_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_.booster_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_.seconds_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _impl_.end_time_stamp_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _impl_.bonus_to_add_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _impl_.booster_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, _impl_.reload_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, _impl_.matching_subscription_def_indexes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, _impl_.additional_seconds_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _impl_.value_uint32_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _impl_.value_float_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _impl_.value_string_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _impl_.owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _impl_.audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _impl_.audit_data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_.loot_lists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_.ignore_limit_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_.dynamic_attributes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_.additional_audit_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _impl_.inventory_token_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _impl_.audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _impl_.audit_data_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, _impl_.item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, _impl_.item_defs_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, _impl_.item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, _impl_.accountid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _impl_.target_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _impl_.gift__potential_targets_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _impl_.duel__class_lock_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _impl_.initiator_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _impl_.itempack__ack_immediately_),
  0,
  1,
  ~0u,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, _impl_.initiator_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, _impl_.use_item_msg_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgUseMultipleItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgUseMultipleItems, _impl_.item_ids_),
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, _impl_.item_def_id_),
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, _impl_.quantity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_.deleted_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_.old_audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_.new_audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_.expected_audit_action_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _impl_.heroid_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _impl_.sequencename_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _impl_.cycle_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _impl_.pedestal_itemdef_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _impl_.toolid_),
  2,
  0,
  3,
  1,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCode, _impl_.code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, _impl_.item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _impl_.item_def_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _impl_.loot_list_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _impl_.attr_def_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _impl_.attr_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _impl_.item_quality_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequestResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequestResponse, _impl_.success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStyles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStyles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStyles, _impl_.item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStylesResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStylesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStylesResponse, _impl_.success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItem, _impl_.account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItemResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItemResponse, _impl_.def_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, _impl_.item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _impl_.give_to_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _impl_.gift_message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.gifting_charge_uses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.gifting_charge_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.gifting_uses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.gifting_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.gifting_window_hours_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.trade_restriction_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnwrapGift, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnwrapGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnwrapGift, _impl_.item_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _impl_.permission_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _impl_.is_unlimited_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _impl_.has_two_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _impl_.sender_permission_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _impl_.friendship_age_requirement_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _impl_.friendship_age_requirement_two_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _impl_.friend_permissions_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundle, _impl_.item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, _impl_.unpacked_item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, _impl_.unpacked_item_def_indexes_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundle, _impl_.item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundle, _impl_.bundle_item_def_index_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundleResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundleResponse, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPackBundleResponse, _impl_.response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, _impl_.txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, _impl_.item_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItems, _impl_.equips_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItemsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItemsResponse, _impl_.so_cache_version_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _impl_.style_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyleResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyleResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, _impl_.item_to_unlock_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, _impl_.style_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, _impl_.consumable_item_ids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _impl_.style_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _impl_.style_prereq_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _impl_.item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _impl_.set_to_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _impl_.remove_categories_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _impl_.add_categories_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, _impl_.crate_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, _impl_.key_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, _impl_.def_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, _impl_.granted_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttribute, _impl_.item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, _impl_.item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, _impl_.subject_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, _impl_.tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, _impl_.name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, _impl_.item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, _impl_.new_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.item_quality_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.item_flags_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.attributes_string_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.item_count_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.items_fulfilled_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.item_rarity_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.lootlist_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.fulfilled_item_id_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _impl_.associated_item_def_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_.attr_def_index_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_.required_type_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_.required_hero_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_.gem_def_index_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_.not_tradable_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _impl_.required_item_slot_),
  2,
  3,
  4,
  0,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Empty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Empty, _impl_.socket_),
  0,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, _impl_.effect_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _impl_.blue_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, _impl_.strange_type_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, _impl_.strange_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _impl_.strange_type_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _impl_.strange_value_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _impl_.ability_effect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _impl_.games_viewed_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _impl_.corporation_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _impl_.team_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, _impl_.asset_modifier_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _impl_.asset_modifier_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _impl_.anim_modifier_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _impl_.ability_effect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _impl_.autograph_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _impl_.autograph_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _impl_.autograph_score_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_StaticVisuals, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_StaticVisuals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_StaticVisuals, _impl_.socket_),
  0,
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _impl_.value_),
  0,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _impl_.date_start_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _impl_.date_end_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _impl_.revenue_usd_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _impl_.units_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response, _impl_.country_revenue_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, _impl_.packageid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, _impl_.date_start_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, _impl_.date_end_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _impl_.revenue_usd_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _impl_.units_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response, _impl_.country_revenue_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, _impl_.add_slots_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountName, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountName, _impl_.account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, _impl_.account_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, _impl_.slot_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, _impl_.recipe_def_index_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _impl_.def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _impl_.slot_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, _impl_.slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, _impl_.error_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _impl_.slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _impl_.value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _impl_.output_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _impl_.input_errors_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _impl_.additional_outputs_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.item_price_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.category_desc_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.store_purchase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.source_reference_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.parent_stack_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.default_price_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _impl_.is_user_facing_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.steam_txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.partner_txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.watermark_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.purchase_report_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _impl_.items_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, _impl_.order_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, _impl_.reason_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, _impl_.partner_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransactionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransactionResponse, _impl_.success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlement, _impl_.order_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlementResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlementResponse, _impl_.success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _impl_.con_command_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _impl_.report_output_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _impl_.sending_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _impl_.output_initiator_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, _impl_.spew_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _impl_.initiator_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _impl_.sending_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _impl_.msgs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _impl_.is_last_for_source_job_),
  0,
  2,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, _impl_.max_item_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges, _impl_.max_item_id_timestamps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_.sending_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_.message_body_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_.job_id_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _impl_.job_id_target_),
  6,
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _impl_.client_min_allowed_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _impl_.client_active_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _impl_.server_active_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _impl_.server_deployed_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _impl_.what_changed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _impl_.serialized_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _impl_.account_id_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _impl_.steam_id_list_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, _impl_.currency_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, _impl_.currency_price_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints, _impl_.price_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints, _impl_.currencies_),
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, _impl_.banned_words_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, _impl_.contextid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, _impl_.always_notify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSelfPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSelfPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSelfPing, _impl_.sample_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _impl_.stat_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _impl_.stat_total_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _impl_.stat_samples_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _impl_.stat_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _impl_.sample_duration_ms_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPurchaseSucceeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantity, _impl_.item_def_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _impl_.quantity_purchased_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, _impl_.new_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, _impl_.broadcast_),
  1,
  0,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgApplyAutograph)},
  { 10, 20, -1, sizeof(::CMsgAdjustItemEquippedState)},
  { 24, 33, -1, sizeof(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment)},
  { 36, 45, -1, sizeof(::CMsgEconPlayerStrangeCountAdjustment)},
  { 48, -1, -1, sizeof(::CMsgCraftingResponse)},
  { 55, 63, -1, sizeof(::CMsgGCRequestStoreSalesData)},
  { 65, 73, -1, sizeof(::CMsgGCRequestStoreSalesDataResponse_Price)},
  { 75, 84, -1, sizeof(::CMsgGCRequestStoreSalesDataResponse)},
  { 87, 95, -1, sizeof(::CMsgGCRequestStoreSalesDataUpToDateResponse)},
  { 97, -1, -1, sizeof(::CMsgGCToGCPingRequest)},
  { 103, -1, -1, sizeof(::CMsgGCToGCPingResponse)},
  { 109, 116, -1, sizeof(::CMsgGCToGCGetUserSessionServer)},
  { 117, 125, -1, sizeof(::CMsgGCToGCGetUserSessionServerResponse)},
  { 127, 135, -1, sizeof(::CMsgGCToGCGetUserServerMembers)},
  { 137, -1, -1, sizeof(::CMsgGCToGCGetUserServerMembersResponse)},
  { 144, -1, -1, sizeof(::CMsgLookupMultipleAccountNames)},
  { 151, 159, -1, sizeof(::CMsgLookupMultipleAccountNamesResponse_Account)},
  { 161, -1, -1, sizeof(::CMsgLookupMultipleAccountNamesResponse)},
  { 168, 175, -1, sizeof(::CMsgRequestCrateItems)},
  { 176, 185, -1, sizeof(::CMsgRequestCrateItemsResponse)},
  { 188, 195, -1, sizeof(::CMsgRequestCrateEscalationLevel)},
  { 196, 207, -1, sizeof(::CMsgRequestCrateEscalationLevelResponse)},
  { 212, 223, -1, sizeof(::CMsgGCToGCCanUseDropRateBonus)},
  { 228, 241, -1, sizeof(::CMsgSQLAddDropRateBonus)},
  { 248, 258, -1, sizeof(::CMsgSQLUpgradeBattleBooster)},
  { 262, 270, -1, sizeof(::CMsgGCToGCRefreshSOCache)},
  { 272, 281, -1, sizeof(::CMsgGCToGCAddSubscriptionTime)},
  { 284, 294, -1, sizeof(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute)},
  { 298, 307, -1, sizeof(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry)},
  { 310, 323, -1, sizeof(::CMsgGCToGCGrantAccountRolledItems_Item)},
  { 330, 340, -1, sizeof(::CMsgGCToGCGrantAccountRolledItems)},
  { 344, 353, -1, sizeof(::CMsgGCToGCBetaDeleteItems)},
  { 356, 364, -1, sizeof(::CMsgGCToGCGrantSelfMadeItemToAccount)},
  { 366, 378, -1, sizeof(::CMsgUseItem)},
  { 384, 392, -1, sizeof(::CMsgServerUseItem)},
  { 394, -1, -1, sizeof(::CMsgUseMultipleItems)},
  { 401, 409, -1, sizeof(::CGCStoreRechargeRedirect_LineItem)},
  { 411, 422, -1, sizeof(::CMsgGCEconSQLWorkItemEmbeddedRollbackData)},
  { 427, 439, -1, sizeof(::CMsgCraftStatue)},
  { 445, 452, -1, sizeof(::CMsgRedeemCode)},
  { 453, 461, -1, sizeof(::CMsgRedeemCodeResponse)},
  { 463, 474, -1, sizeof(::CMsgDevNewItemRequest)},
  { 479, 486, -1, sizeof(::CMsgDevNewItemRequestResponse)},
  { 487, 494, -1, sizeof(::CMsgDevUnlockAllItemStyles)},
  { 495, 502, -1, sizeof(::CMsgDevUnlockAllItemStylesResponse)},
  { 503, 510, -1, sizeof(::CMsgGCGetAccountSubscriptionItem)},
  { 511, 518, -1, sizeof(::CMsgGCGetAccountSubscriptionItemResponse)},
  { 519, 527, -1, sizeof(::CMsgGCAddGiftItem)},
  { 529, 538, -1, sizeof(::CMsgClientToGCWrapAndDeliverGift)},
  { 541, 554, -1, sizeof(::CMsgClientToGCWrapAndDeliverGiftResponse)},
  { 561, 568, -1, sizeof(::CMsgClientToGCUnwrapGift)},
  { 569, -1, -1, sizeof(::CMsgClientToGCGetGiftPermissions)},
  { 575, 583, -1, sizeof(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission)},
  { 585, 597, -1, sizeof(::CMsgClientToGCGetGiftPermissionsResponse)},
  { 603, 610, -1, sizeof(::CMsgClientToGCUnpackBundle)},
  { 611, 620, -1, sizeof(::CMsgClientToGCUnpackBundleResponse)},
  { 623, 631, -1, sizeof(::CMsgClientToGCPackBundle)},
  { 633, 641, -1, sizeof(::CMsgClientToGCPackBundleResponse)},
  { 643, 651, -1, sizeof(::CMsgGCToClientStoreTransactionCompleted)},
  { 653, -1, -1, sizeof(::CMsgClientToGCEquipItems)},
  { 660, 667, -1, sizeof(::CMsgClientToGCEquipItemsResponse)},
  { 668, 676, -1, sizeof(::CMsgClientToGCSetItemStyle)},
  { 678, 685, -1, sizeof(::CMsgClientToGCSetItemStyleResponse)},
  { 686, 695, -1, sizeof(::CMsgClientToGCUnlockItemStyle)},
  { 698, 708, -1, sizeof(::CMsgClientToGCUnlockItemStyleResponse)},
  { 712, 722, -1, sizeof(::CMsgClientToGCSetItemInventoryCategory)},
  { 726, 734, -1, sizeof(::CMsgClientToGCUnlockCrate)},
  { 736, 744, -1, sizeof(::CMsgClientToGCUnlockCrateResponse_Item)},
  { 746, 754, -1, sizeof(::CMsgClientToGCUnlockCrateResponse)},
  { 756, 763, -1, sizeof(::CMsgClientToGCRemoveItemAttribute)},
  { 764, 772, -1, sizeof(::CMsgClientToGCRemoveItemAttributeResponse)},
  { 774, 783, -1, sizeof(::CMsgClientToGCNameItem)},
  { 786, 794, -1, sizeof(::CMsgClientToGCNameItemResponse)},
  { 796, 804, -1, sizeof(::CMsgGCSetItemPosition)},
  { 806, 822, -1, sizeof(::CAttribute_ItemDynamicRecipeComponent)},
  { 832, 845, -1, sizeof(::CProtoItemSocket)},
  { 852, 859, -1, sizeof(::CProtoItemSocket_Empty)},
  { 860, 868, -1, sizeof(::CProtoItemSocket_Effect)},
  { 870, 880, -1, sizeof(::CProtoItemSocket_Color)},
  { 884, 893, -1, sizeof(::CProtoItemSocket_Strange)},
  { 896, 906, -1, sizeof(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)},
  { 910, 921, -1, sizeof(::CProtoItemSocket_Spectator)},
  { 926, 934, -1, sizeof(::CProtoItemSocket_AssetModifier)},
  { 936, 946, -1, sizeof(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)},
  { 950, 960, -1, sizeof(::CProtoItemSocket_Autograph)},
  { 964, 971, -1, sizeof(::CProtoItemSocket_StaticVisuals)},
  { 972, 979, -1, sizeof(::CAttribute_String)},
  { 980, 990, -1, sizeof(::CWorkshop_GetItemDailyRevenue_Request)},
  { 994, 1004, -1, sizeof(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue)},
  { 1008, -1, -1, sizeof(::CWorkshop_GetItemDailyRevenue_Response)},
  { 1015, 1024, -1, sizeof(::CWorkshop_GetPackageDailyRevenue_Request)},
  { 1027, 1037, -1, sizeof(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue)},
  { 1041, -1, -1, sizeof(::CWorkshop_GetPackageDailyRevenue_Response)},
  { 1048, 1056, -1, sizeof(::CMsgSQLGCToGCGrantBackpackSlots)},
  { 1058, 1065, -1, sizeof(::CMsgClientToGCLookupAccountName)},
  { 1066, 1074, -1, sizeof(::CMsgClientToGCLookupAccountNameResponse)},
  { 1076, 1084, -1, sizeof(::CMsgClientToGCCreateStaticRecipe_Item)},
  { 1086, 1094, -1, sizeof(::CMsgClientToGCCreateStaticRecipe)},
  { 1096, 1105, -1, sizeof(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem)},
  { 1108, 1116, -1, sizeof(::CMsgClientToGCCreateStaticRecipeResponse_InputError)},
  { 1118, 1126, -1, sizeof(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput)},
  { 1128, 1138, -1, sizeof(::CMsgClientToGCCreateStaticRecipeResponse)},
  { 1142, 1157, -1, sizeof(::CMsgProcessTransactionOrder_Item)},
  { 1166, 1181, -1, sizeof(::CMsgProcessTransactionOrder)},
  { 1190, 1199, -1, sizeof(::CMsgGCToGCStoreProcessCDKeyTransaction)},
  { 1202, 1209, -1, sizeof(::CMsgGCToGCStoreProcessCDKeyTransactionResponse)},
  { 1210, 1217, -1, sizeof(::CMsgGCToGCStoreProcessSettlement)},
  { 1218, 1225, -1, sizeof(::CMsgGCToGCStoreProcessSettlementResponse)},
  { 1226, 1236, -1, sizeof(::CMsgGCToGCBroadcastConsoleCommand)},
  { 1240, 1248, -1, sizeof(::CMsgGCToGCConsoleOutput_OutputLine)},
  { 1250, 1260, -1, sizeof(::CMsgGCToGCConsoleOutput)},
  { 1264, 1272, -1, sizeof(::CMsgItemAges_MaxItemIDTimestamp)},
  { 1274, -1, -1, sizeof(::CMsgItemAges)},
  { 1281, 1294, -1, sizeof(::CMsgGCToGCInternalTestMsg)},
  { 1301, 1312, -1, sizeof(::CMsgGCToGCClientServerVersionsUpdated)},
  { 1317, 1327, -1, sizeof(::CMsgGCToGCBroadcastMessageFromSub)},
  { 1331, 1339, -1, sizeof(::CMsgGCToClientCurrencyPricePoints_Currency)},
  { 1341, -1, -1, sizeof(::CMsgGCToClientCurrencyPricePoints)},
  { 1349, 1357, -1, sizeof(::CMsgBannedWordList)},
  { 1359, 1367, -1, sizeof(::CMsgGCToGCFlushSteamInventoryCache_Key)},
  { 1369, -1, -1, sizeof(::CMsgGCToGCFlushSteamInventoryCache)},
  { 1376, 1384, -1, sizeof(::CMsgGCToGCUpdateSubscriptionItems)},
  { 1386, 1393, -1, sizeof(::CMsgGCToGCSelfPing)},
  { 1394, -1, -1, sizeof(::CMsgGCToGCGetInfuxIntervalStats)},
  { 1400, 1411, -1, sizeof(::CMsgGCToGCGetInfuxIntervalStatsResponse)},
  { 1416, -1, -1, sizeof(::CMsgGCToGCPurchaseSucceeded)},
  { 1422, 1429, -1, sizeof(::CMsgClientToGCGetLimitedItemPurchaseQuantity)},
  { 1430, 1438, -1, sizeof(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)},
  { 1440, 1449, -1, sizeof(::CMsgGCToGCUpdateWelcomeMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgApplyAutograph_default_instance_._instance,
  &::_CMsgAdjustItemEquippedState_default_instance_._instance,
  &::_CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_default_instance_._instance,
  &::_CMsgEconPlayerStrangeCountAdjustment_default_instance_._instance,
  &::_CMsgCraftingResponse_default_instance_._instance,
  &::_CMsgGCRequestStoreSalesData_default_instance_._instance,
  &::_CMsgGCRequestStoreSalesDataResponse_Price_default_instance_._instance,
  &::_CMsgGCRequestStoreSalesDataResponse_default_instance_._instance,
  &::_CMsgGCRequestStoreSalesDataUpToDateResponse_default_instance_._instance,
  &::_CMsgGCToGCPingRequest_default_instance_._instance,
  &::_CMsgGCToGCPingResponse_default_instance_._instance,
  &::_CMsgGCToGCGetUserSessionServer_default_instance_._instance,
  &::_CMsgGCToGCGetUserSessionServerResponse_default_instance_._instance,
  &::_CMsgGCToGCGetUserServerMembers_default_instance_._instance,
  &::_CMsgGCToGCGetUserServerMembersResponse_default_instance_._instance,
  &::_CMsgLookupMultipleAccountNames_default_instance_._instance,
  &::_CMsgLookupMultipleAccountNamesResponse_Account_default_instance_._instance,
  &::_CMsgLookupMultipleAccountNamesResponse_default_instance_._instance,
  &::_CMsgRequestCrateItems_default_instance_._instance,
  &::_CMsgRequestCrateItemsResponse_default_instance_._instance,
  &::_CMsgRequestCrateEscalationLevel_default_instance_._instance,
  &::_CMsgRequestCrateEscalationLevelResponse_default_instance_._instance,
  &::_CMsgGCToGCCanUseDropRateBonus_default_instance_._instance,
  &::_CMsgSQLAddDropRateBonus_default_instance_._instance,
  &::_CMsgSQLUpgradeBattleBooster_default_instance_._instance,
  &::_CMsgGCToGCRefreshSOCache_default_instance_._instance,
  &::_CMsgGCToGCAddSubscriptionTime_default_instance_._instance,
  &::_CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute_default_instance_._instance,
  &::_CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry_default_instance_._instance,
  &::_CMsgGCToGCGrantAccountRolledItems_Item_default_instance_._instance,
  &::_CMsgGCToGCGrantAccountRolledItems_default_instance_._instance,
  &::_CMsgGCToGCBetaDeleteItems_default_instance_._instance,
  &::_CMsgGCToGCGrantSelfMadeItemToAccount_default_instance_._instance,
  &::_CMsgUseItem_default_instance_._instance,
  &::_CMsgServerUseItem_default_instance_._instance,
  &::_CMsgUseMultipleItems_default_instance_._instance,
  &::_CGCStoreRechargeRedirect_LineItem_default_instance_._instance,
  &::_CMsgGCEconSQLWorkItemEmbeddedRollbackData_default_instance_._instance,
  &::_CMsgCraftStatue_default_instance_._instance,
  &::_CMsgRedeemCode_default_instance_._instance,
  &::_CMsgRedeemCodeResponse_default_instance_._instance,
  &::_CMsgDevNewItemRequest_default_instance_._instance,
  &::_CMsgDevNewItemRequestResponse_default_instance_._instance,
  &::_CMsgDevUnlockAllItemStyles_default_instance_._instance,
  &::_CMsgDevUnlockAllItemStylesResponse_default_instance_._instance,
  &::_CMsgGCGetAccountSubscriptionItem_default_instance_._instance,
  &::_CMsgGCGetAccountSubscriptionItemResponse_default_instance_._instance,
  &::_CMsgGCAddGiftItem_default_instance_._instance,
  &::_CMsgClientToGCWrapAndDeliverGift_default_instance_._instance,
  &::_CMsgClientToGCWrapAndDeliverGiftResponse_default_instance_._instance,
  &::_CMsgClientToGCUnwrapGift_default_instance_._instance,
  &::_CMsgClientToGCGetGiftPermissions_default_instance_._instance,
  &::_CMsgClientToGCGetGiftPermissionsResponse_FriendPermission_default_instance_._instance,
  &::_CMsgClientToGCGetGiftPermissionsResponse_default_instance_._instance,
  &::_CMsgClientToGCUnpackBundle_default_instance_._instance,
  &::_CMsgClientToGCUnpackBundleResponse_default_instance_._instance,
  &::_CMsgClientToGCPackBundle_default_instance_._instance,
  &::_CMsgClientToGCPackBundleResponse_default_instance_._instance,
  &::_CMsgGCToClientStoreTransactionCompleted_default_instance_._instance,
  &::_CMsgClientToGCEquipItems_default_instance_._instance,
  &::_CMsgClientToGCEquipItemsResponse_default_instance_._instance,
  &::_CMsgClientToGCSetItemStyle_default_instance_._instance,
  &::_CMsgClientToGCSetItemStyleResponse_default_instance_._instance,
  &::_CMsgClientToGCUnlockItemStyle_default_instance_._instance,
  &::_CMsgClientToGCUnlockItemStyleResponse_default_instance_._instance,
  &::_CMsgClientToGCSetItemInventoryCategory_default_instance_._instance,
  &::_CMsgClientToGCUnlockCrate_default_instance_._instance,
  &::_CMsgClientToGCUnlockCrateResponse_Item_default_instance_._instance,
  &::_CMsgClientToGCUnlockCrateResponse_default_instance_._instance,
  &::_CMsgClientToGCRemoveItemAttribute_default_instance_._instance,
  &::_CMsgClientToGCRemoveItemAttributeResponse_default_instance_._instance,
  &::_CMsgClientToGCNameItem_default_instance_._instance,
  &::_CMsgClientToGCNameItemResponse_default_instance_._instance,
  &::_CMsgGCSetItemPosition_default_instance_._instance,
  &::_CAttribute_ItemDynamicRecipeComponent_default_instance_._instance,
  &::_CProtoItemSocket_default_instance_._instance,
  &::_CProtoItemSocket_Empty_default_instance_._instance,
  &::_CProtoItemSocket_Effect_default_instance_._instance,
  &::_CProtoItemSocket_Color_default_instance_._instance,
  &::_CProtoItemSocket_Strange_default_instance_._instance,
  &::_CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY_default_instance_._instance,
  &::_CProtoItemSocket_Spectator_default_instance_._instance,
  &::_CProtoItemSocket_AssetModifier_default_instance_._instance,
  &::_CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_default_instance_._instance,
  &::_CProtoItemSocket_Autograph_default_instance_._instance,
  &::_CProtoItemSocket_StaticVisuals_default_instance_._instance,
  &::_CAttribute_String_default_instance_._instance,
  &::_CWorkshop_GetItemDailyRevenue_Request_default_instance_._instance,
  &::_CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue_default_instance_._instance,
  &::_CWorkshop_GetItemDailyRevenue_Response_default_instance_._instance,
  &::_CWorkshop_GetPackageDailyRevenue_Request_default_instance_._instance,
  &::_CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue_default_instance_._instance,
  &::_CWorkshop_GetPackageDailyRevenue_Response_default_instance_._instance,
  &::_CMsgSQLGCToGCGrantBackpackSlots_default_instance_._instance,
  &::_CMsgClientToGCLookupAccountName_default_instance_._instance,
  &::_CMsgClientToGCLookupAccountNameResponse_default_instance_._instance,
  &::_CMsgClientToGCCreateStaticRecipe_Item_default_instance_._instance,
  &::_CMsgClientToGCCreateStaticRecipe_default_instance_._instance,
  &::_CMsgClientToGCCreateStaticRecipeResponse_OutputItem_default_instance_._instance,
  &::_CMsgClientToGCCreateStaticRecipeResponse_InputError_default_instance_._instance,
  &::_CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput_default_instance_._instance,
  &::_CMsgClientToGCCreateStaticRecipeResponse_default_instance_._instance,
  &::_CMsgProcessTransactionOrder_Item_default_instance_._instance,
  &::_CMsgProcessTransactionOrder_default_instance_._instance,
  &::_CMsgGCToGCStoreProcessCDKeyTransaction_default_instance_._instance,
  &::_CMsgGCToGCStoreProcessCDKeyTransactionResponse_default_instance_._instance,
  &::_CMsgGCToGCStoreProcessSettlement_default_instance_._instance,
  &::_CMsgGCToGCStoreProcessSettlementResponse_default_instance_._instance,
  &::_CMsgGCToGCBroadcastConsoleCommand_default_instance_._instance,
  &::_CMsgGCToGCConsoleOutput_OutputLine_default_instance_._instance,
  &::_CMsgGCToGCConsoleOutput_default_instance_._instance,
  &::_CMsgItemAges_MaxItemIDTimestamp_default_instance_._instance,
  &::_CMsgItemAges_default_instance_._instance,
  &::_CMsgGCToGCInternalTestMsg_default_instance_._instance,
  &::_CMsgGCToGCClientServerVersionsUpdated_default_instance_._instance,
  &::_CMsgGCToGCBroadcastMessageFromSub_default_instance_._instance,
  &::_CMsgGCToClientCurrencyPricePoints_Currency_default_instance_._instance,
  &::_CMsgGCToClientCurrencyPricePoints_default_instance_._instance,
  &::_CMsgBannedWordList_default_instance_._instance,
  &::_CMsgGCToGCFlushSteamInventoryCache_Key_default_instance_._instance,
  &::_CMsgGCToGCFlushSteamInventoryCache_default_instance_._instance,
  &::_CMsgGCToGCUpdateSubscriptionItems_default_instance_._instance,
  &::_CMsgGCToGCSelfPing_default_instance_._instance,
  &::_CMsgGCToGCGetInfuxIntervalStats_default_instance_._instance,
  &::_CMsgGCToGCGetInfuxIntervalStatsResponse_default_instance_._instance,
  &::_CMsgGCToGCPurchaseSucceeded_default_instance_._instance,
  &::_CMsgClientToGCGetLimitedItemPurchaseQuantity_default_instance_._instance,
  &::_CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_default_instance_._instance,
  &::_CMsgGCToGCUpdateWelcomeMsg_default_instance_._instance,
};

const char descriptor_table_protodef_econ_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025econ_gcmessages.proto\032\023steammessages.p"
  "roto\032\027econ_shared_enums.proto\032\026gcsdk_gcm"
  "essages.proto\"E\n\022CMsgApplyAutograph\022\031\n\021a"
  "utograph_item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002"
  " \001(\004\"m\n\033CMsgAdjustItemEquippedState\022\017\n\007i"
  "tem_id\030\001 \001(\004\022\021\n\tnew_class\030\002 \001(\r\022\020\n\010new_s"
  "lot\030\003 \001(\r\022\030\n\013style_index\030\004 \001(\r:\003255\"\204\002\n$"
  "CMsgEconPlayerStrangeCountAdjustment\022\022\n\n"
  "account_id\030\001 \001(\r\022`\n\031strange_count_adjust"
  "ments\030\002 \003(\0132=.CMsgEconPlayerStrangeCount"
  "Adjustment.CStrangeCountAdjustment\022\022\n\ntu"
  "rbo_mode\030\003 \001(\010\032R\n\027CStrangeCountAdjustmen"
  "t\022\022\n\nevent_type\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\022\022"
  "\n\nadjustment\030\003 \001(\r\"(\n\024CMsgCraftingRespon"
  "se\022\020\n\010item_ids\030\001 \003(\004\"@\n\033CMsgGCRequestSto"
  "reSalesData\022\017\n\007version\030\001 \001(\r\022\020\n\010currency"
  "\030\002 \001(\r\"\271\001\n#CMsgGCRequestStoreSalesDataRe"
  "sponse\022>\n\nsale_price\030\001 \003(\0132*.CMsgGCReque"
  "stStoreSalesDataResponse.Price\022\017\n\007versio"
  "n\030\002 \001(\r\022\027\n\017expiration_time\030\003 \001(\r\032(\n\005Pric"
  "e\022\020\n\010item_def\030\001 \001(\r\022\r\n\005price\030\002 \001(\r\"W\n+CM"
  "sgGCRequestStoreSalesDataUpToDateRespons"
  "e\022\017\n\007version\030\001 \001(\r\022\027\n\017expiration_time\030\002 "
  "\001(\r\"\027\n\025CMsgGCToGCPingRequest\"\030\n\026CMsgGCTo"
  "GCPingResponse\"4\n\036CMsgGCToGCGetUserSessi"
  "onServer\022\022\n\naccount_id\030\001 \001(\r\"T\n&CMsgGCTo"
  "GCGetUserSessionServerResponse\022\027\n\017server"
  "_steam_id\030\001 \001(\006\022\021\n\tis_online\030\002 \001(\010\"L\n\036CM"
  "sgGCToGCGetUserServerMembers\022\022\n\naccount_"
  "id\030\001 \001(\r\022\026\n\016max_spectators\030\002 \001(\r\"C\n&CMsg"
  "GCToGCGetUserServerMembersResponse\022\031\n\021me"
  "mber_account_id\030\001 \003(\r\"8\n\036CMsgLookupMulti"
  "pleAccountNames\022\026\n\naccountids\030\001 \003(\rB\002\020\001\""
  "\232\001\n&CMsgLookupMultipleAccountNamesRespon"
  "se\022A\n\010accounts\030\001 \003(\0132/.CMsgLookupMultipl"
  "eAccountNamesResponse.Account\032-\n\007Account"
  "\022\021\n\taccountid\030\001 \001(\r\022\017\n\007persona\030\002 \001(\t\"/\n\025"
  "CMsgRequestCrateItems\022\026\n\016crate_item_def\030"
  "\001 \001(\r\"\206\001\n\035CMsgRequestCrateItemsResponse\022"
  "\020\n\010response\030\001 \001(\r\022\021\n\titem_defs\030\002 \003(\r\022\026\n\016"
  "peek_item_defs\030\003 \003(\r\"(\n\007EResult\022\017\n\013k_Suc"
  "ceeded\020\000\022\014\n\010k_Failed\020\001\"9\n\037CMsgRequestCra"
  "teEscalationLevel\022\026\n\016crate_item_def\030\001 \001("
  "\r\"\321\001\n\'CMsgRequestCrateEscalationLevelRes"
  "ponse\022\020\n\010response\030\001 \001(\r\022\031\n\021escalation_le"
  "vel0\030\002 \001(\r\022\031\n\021escalation_level1\030\003 \001(\r\022\031\n"
  "\021escalation_level2\030\004 \001(\r\022\031\n\021escalation_l"
  "evel3\030\005 \001(\r\"(\n\007EResult\022\017\n\013k_Succeeded\020\000\022"
  "\014\n\010k_Failed\020\001\"\230\001\n\035CMsgGCToGCCanUseDropRa"
  "teBonus\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017drop_rate"
  "_bonus\030\002 \001(\002\022\024\n\014booster_type\030\003 \001(\r\022\032\n\022ex"
  "clusive_item_def\030\004 \001(\r\022\030\n\020allow_equal_ra"
  "te\030\005 \001(\010\"\261\001\n\027CMsgSQLAddDropRateBonus\022\022\n\n"
  "account_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\022\020\n\010ite"
  "m_def\030\003 \001(\r\022\027\n\017drop_rate_bonus\030\004 \001(\002\022\024\n\014"
  "booster_type\030\005 \001(\r\022\030\n\020seconds_duration\030\006"
  " \001(\r\022\026\n\016end_time_stamp\030\007 \001(\r\"o\n\033CMsgSQLU"
  "pgradeBattleBooster\022\022\n\naccount_id\030\001 \001(\r\022"
  "\020\n\010item_def\030\002 \001(\r\022\024\n\014bonus_to_add\030\003 \001(\002\022"
  "\024\n\014booster_type\030\004 \001(\r\">\n\030CMsgGCToGCRefre"
  "shSOCache\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006reload\030"
  "\002 \001(\010\"z\n\035CMsgGCToGCAddSubscriptionTime\022\022"
  "\n\naccount_id\030\001 \001(\r\022)\n!matching_subscript"
  "ion_def_indexes\030\002 \003(\r\022\032\n\022additional_seco"
  "nds\030\003 \001(\r\"\374\004\n!CMsgGCToGCGrantAccountRoll"
  "edItems\022\022\n\naccount_id\030\001 \001(\r\0226\n\005items\030\002 \003"
  "(\0132\'.CMsgGCToGCGrantAccountRolledItems.I"
  "tem\022\024\n\014audit_action\030\003 \001(\r\022\022\n\naudit_data\030"
  "\004 \001(\004\032\340\003\n\004Item\022\020\n\010item_def\030\001 \001(\r\022\022\n\nloot"
  "_lists\030\002 \003(\t\022\024\n\014ignore_limit\030\003 \001(\010\022\016\n\006or"
  "igin\030\004 \001(\r\022T\n\022dynamic_attributes\030\005 \003(\01328"
  ".CMsgGCToGCGrantAccountRolledItems.Item."
  "DynamicAttribute\022^\n\030additional_audit_ent"
  "ries\030\006 \003(\0132<.CMsgGCToGCGrantAccountRolle"
  "dItems.Item.AdditionalAuditEntry\022\027\n\017inve"
  "ntory_token\030\007 \001(\r\032a\n\020DynamicAttribute\022\014\n"
  "\004name\030\001 \001(\t\022\024\n\014value_uint32\030\002 \001(\r\022\023\n\013val"
  "ue_float\030\003 \001(\002\022\024\n\014value_string\030\004 \001(\t\032Z\n\024"
  "AdditionalAuditEntry\022\030\n\020owner_account_id"
  "\030\001 \001(\r\022\024\n\014audit_action\030\002 \001(\r\022\022\n\naudit_da"
  "ta\030\003 \001(\004\"T\n\031CMsgGCToGCBetaDeleteItems\022\022\n"
  "\naccount_id\030\001 \001(\r\022\020\n\010item_ids\030\002 \003(\004\022\021\n\ti"
  "tem_defs\030\003 \003(\r\"Q\n$CMsgGCToGCGrantSelfMad"
  "eItemToAccount\022\026\n\016item_def_index\030\001 \001(\r\022\021"
  "\n\taccountid\030\002 \001(\r\"\261\001\n\013CMsgUseItem\022\017\n\007ite"
  "m_id\030\001 \001(\004\022\027\n\017target_steam_id\030\002 \001(\006\022\037\n\027g"
  "ift__potential_targets\030\003 \003(\r\022\030\n\020duel__cl"
  "ass_lock\030\004 \001(\r\022\032\n\022initiator_steam_id\030\005 \001"
  "(\004\022!\n\031itempack__ack_immediately\030\006 \001(\010\"U\n"
  "\021CMsgServerUseItem\022\034\n\024initiator_account_"
  "id\030\001 \001(\r\022\"\n\014use_item_msg\030\002 \001(\0132\014.CMsgUse"
  "Item\"(\n\024CMsgUseMultipleItems\022\020\n\010item_ids"
  "\030\001 \003(\004\"J\n!CGCStoreRechargeRedirect_LineI"
  "tem\022\023\n\013item_def_id\030\001 \001(\r\022\020\n\010quantity\030\002 \001"
  "(\r\"\253\001\n)CMsgGCEconSQLWorkItemEmbeddedRoll"
  "backData\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017deleted_"
  "item_id\030\002 \001(\004\022\030\n\020old_audit_action\030\003 \001(\r\022"
  "\030\n\020new_audit_action\030\004 \001(\r\022\035\n\025expected_au"
  "dit_action\030\005 \001(\r\"\205\001\n\017CMsgCraftStatue\022\016\n\006"
  "heroid\030\001 \001(\r\022\024\n\014sequencename\030\002 \001(\t\022\r\n\005cy"
  "cle\030\003 \001(\002\022\023\n\013description\030\004 \001(\t\022\030\n\020pedest"
  "al_itemdef\030\005 \001(\r\022\016\n\006toolid\030\006 \001(\004\"\036\n\016CMsg"
  "RedeemCode\022\014\n\004code\030\001 \001(\t\"\255\001\n\026CMsgRedeemC"
  "odeResponse\022\020\n\010response\030\001 \001(\r\022\017\n\007item_id"
  "\030\002 \001(\004\"p\n\013EResultCode\022\017\n\013k_Succeeded\020\000\022\031"
  "\n\025k_Failed_CodeNotFound\020\001\022\034\n\030k_Failed_Co"
  "deAlreadyUsed\020\002\022\027\n\023k_Failed_OtherError\020\003"
  "\"\207\001\n\025CMsgDevNewItemRequest\022\025\n\ritem_def_n"
  "ame\030\003 \001(\t\022\026\n\016loot_list_name\030\004 \001(\t\022\025\n\ratt"
  "r_def_name\030\005 \003(\t\022\022\n\nattr_value\030\006 \003(\t\022\024\n\014"
  "item_quality\030\007 \001(\r\"0\n\035CMsgDevNewItemRequ"
  "estResponse\022\017\n\007success\030\001 \001(\010\"-\n\032CMsgDevU"
  "nlockAllItemStyles\022\017\n\007item_id\030\001 \001(\004\"5\n\"C"
  "MsgDevUnlockAllItemStylesResponse\022\017\n\007suc"
  "cess\030\001 \001(\010\"6\n CMsgGCGetAccountSubscripti"
  "onItem\022\022\n\naccount_id\030\001 \001(\r\"=\n(CMsgGCGetA"
  "ccountSubscriptionItemResponse\022\021\n\tdef_in"
  "dex\030\001 \001(\r\"8\n\021CMsgGCAddGiftItem\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\"e\n CMsgClien"
  "tToGCWrapAndDeliverGift\022\017\n\007item_id\030\001 \001(\004"
  "\022\032\n\022give_to_account_id\030\002 \001(\r\022\024\n\014gift_mes"
  "sage\030\003 \001(\t\"\304\002\n(CMsgClientToGCWrapAndDeli"
  "verGiftResponse\0225\n\010response\030\001 \001(\0162\017.EGCM"
  "sgResponse:\022k_EGCMsgResponseOK\022\033\n\023giftin"
  "g_charge_uses\030\002 \001(\r\022\032\n\022gifting_charge_ma"
  "x\030\003 \001(\005\022\024\n\014gifting_uses\030\004 \001(\r\022\023\n\013gifting"
  "_max\030\005 \001(\005\022\034\n\024gifting_window_hours\030\006 \001(\r"
  "\022_\n\021trade_restriction\030\007 \001(\0162\034.EGCMsgInit"
  "iateTradeResponse:&k_EGCMsgInitiateTrade"
  "Response_Accepted\"+\n\030CMsgClientToGCUnwra"
  "pGift\022\017\n\007item_id\030\001 \001(\004\"\"\n CMsgClientToGC"
  "GetGiftPermissions\"\347\003\n(CMsgClientToGCGet"
  "GiftPermissionsResponse\022\024\n\014is_unlimited\030"
  "\001 \001(\010\022\026\n\016has_two_factor\030\003 \001(\010\022_\n\021sender_"
  "permission\030\006 \001(\0162\034.EGCMsgInitiateTradeRe"
  "sponse:&k_EGCMsgInitiateTradeResponse_Ac"
  "cepted\022\"\n\032friendship_age_requirement\030\007 \001"
  "(\r\022-\n%friendship_age_requirement_two_fac"
  "tor\030\010 \001(\r\022V\n\022friend_permissions\030\t \003(\0132:."
  "CMsgClientToGCGetGiftPermissionsResponse"
  ".FriendPermission\032\200\001\n\020FriendPermission\022\022"
  "\n\naccount_id\030\001 \001(\r\022X\n\npermission\030\002 \001(\0162\034"
  ".EGCMsgInitiateTradeResponse:&k_EGCMsgIn"
  "itiateTradeResponse_Accepted\"-\n\032CMsgClie"
  "ntToGCUnpackBundle\022\017\n\007item_id\030\001 \001(\004\"\375\003\n\""
  "CMsgClientToGCUnpackBundleResponse\022\031\n\021un"
  "packed_item_ids\030\001 \003(\004\022]\n\010response\030\002 \001(\0162"
  "1.CMsgClientToGCUnpackBundleResponse.EUn"
  "packBundle:\030k_UnpackBundle_Succeeded\022!\n\031"
  "unpacked_item_def_indexes\030\003 \003(\r\"\271\002\n\rEUnp"
  "ackBundle\022\034\n\030k_UnpackBundle_Succeeded\020\000\022"
  ")\n%k_UnpackBundle_Failed_ItemIsNotBundle"
  "\020\001\0225\n1k_UnpackBundle_Failed_UnableToCrea"
  "teContainedItem\020\002\022&\n\"k_UnpackBundle_Fail"
  "ed_SOCacheError\020\003\022\'\n#k_UnpackBundle_Fail"
  "ed_ItemIsInvalid\020\004\022)\n%k_UnpackBundle_Fai"
  "led_BadItemQuantity\020\005\022,\n(k_UnpackBundle_"
  "Failed_UnableToDeleteItem\020\006\"K\n\030CMsgClien"
  "tToGCPackBundle\022\020\n\010item_ids\030\001 \003(\004\022\035\n\025bun"
  "dle_item_def_index\030\002 \001(\r\"\362\005\n CMsgClientT"
  "oGCPackBundleResponse\022\017\n\007item_id\030\001 \001(\004\022W"
  "\n\010response\030\002 \001(\0162-.CMsgClientToGCPackBun"
  "dleResponse.EPackBundle:\026k_PackBundle_Su"
  "cceeded\"\343\004\n\013EPackBundle\022\032\n\026k_PackBundle_"
  "Succeeded\020\000\022%\n!k_PackBundle_Failed_Inter"
  "nalError\020\001\022\'\n#k_PackBundle_Failed_ItemIs"
  "NotBundle\020\002\022$\n k_PackBundle_Failed_SOCac"
  "heError\020\003\022%\n!k_PackBundle_Failed_ItemIsI"
  "nvalid\020\004\022\'\n#k_PackBundle_Failed_BadItemQ"
  "uantity\020\005\022*\n&k_PackBundle_Failed_UnableT"
  "oDeleteItem\020\006\022,\n(k_PackBundle_Failed_Bun"
  "dleCannotBePacked\020\007\022)\n%k_PackBundle_Fail"
  "ed_ItemIsUntradeable\020\010\022&\n\"k_PackBundle_F"
  "ailed_ItemIsEquipped\020\t\022#\n\037k_PackBundle_F"
  "ailed_ItemHasGems\020\n\022(\n$k_PackBundle_Fail"
  "ed_ItemMixedQuality\020\013\022*\n&k_PackBundle_Fa"
  "iled_ItemInvalidQuality\020\014\022(\n$k_PackBundl"
  "e_Failed_ItemIsNonEconomy\020\r\022 \n\034k_PackBun"
  "dle_Failed_Disabled\020\016\"K\n\'CMsgGCToClientS"
  "toreTransactionCompleted\022\016\n\006txn_id\030\001 \001(\004"
  "\022\020\n\010item_ids\030\002 \003(\004\"H\n\030CMsgClientToGCEqui"
  "pItems\022,\n\006equips\030\001 \003(\0132\034.CMsgAdjustItemE"
  "quippedState\"\?\n CMsgClientToGCEquipItems"
  "Response\022\033\n\023so_cache_version_id\030\001 \001(\006\"G\n"
  "\032CMsgClientToGCSetItemStyle\022\017\n\007item_id\030\001"
  " \001(\004\022\030\n\013style_index\030\002 \001(\r:\003255\"\336\001\n\"CMsgC"
  "lientToGCSetItemStyleResponse\022U\n\010respons"
  "e\030\001 \001(\0162-.CMsgClientToGCSetItemStyleResp"
  "onse.ESetStyle:\024k_SetStyle_Succeeded\"a\n\t"
  "ESetStyle\022\030\n\024k_SetStyle_Succeeded\020\000\022\025\n\021k"
  "_SetStyle_Failed\020\001\022#\n\037k_SetStyle_Failed_"
  "StyleIsLocked\020\002\"n\n\035CMsgClientToGCUnlockI"
  "temStyle\022\026\n\016item_to_unlock\030\001 \001(\004\022\030\n\013styl"
  "e_index\030\002 \001(\r:\003255\022\033\n\023consumable_item_id"
  "s\030\003 \003(\004\"\254\005\n%CMsgClientToGCUnlockItemStyl"
  "eResponse\022^\n\010response\030\001 \001(\01623.CMsgClient"
  "ToGCUnlockItemStyleResponse.EUnlockStyle"
  ":\027k_UnlockStyle_Succeeded\022\017\n\007item_id\030\002 \001"
  "(\004\022\030\n\013style_index\030\003 \001(\r:\003255\022\031\n\014style_pr"
  "ereq\030\004 \001(\r:\003255\"\334\003\n\014EUnlockStyle\022\033\n\027k_Un"
  "lockStyle_Succeeded\020\000\022\037\n\033k_UnlockStyle_F"
  "ailed_PreReq\020\001\022#\n\037k_UnlockStyle_Failed_C"
  "antAfford\020\002\022#\n\037k_UnlockStyle_Failed_Cant"
  "Commit\020\003\022&\n\"k_UnlockStyle_Failed_CantLoc"
  "kCache\020\004\022)\n%k_UnlockStyle_Failed_CantAff"
  "ordAttrib\020\005\022&\n\"k_UnlockStyle_Failed_Cant"
  "AffordGem\020\006\022*\n&k_UnlockStyle_Failed_NoCo"
  "mpendiumLevel\020\007\022(\n$k_UnlockStyle_Failed_"
  "AlreadyUnlocked\020\010\022#\n\037k_UnlockStyle_Faile"
  "d_OtherError\020\t\022&\n\"k_UnlockStyle_Failed_I"
  "temIsInvalid\020\n\022&\n\"k_UnlockStyle_Failed_T"
  "oolIsInvalid\020\013\"\203\001\n&CMsgClientToGCSetItem"
  "InventoryCategory\022\020\n\010item_ids\030\001 \003(\004\022\024\n\014s"
  "et_to_value\030\002 \001(\r\022\031\n\021remove_categories\030\003"
  " \001(\r\022\026\n\016add_categories\030\004 \001(\r\"G\n\031CMsgClie"
  "ntToGCUnlockCrate\022\025\n\rcrate_item_id\030\001 \001(\004"
  "\022\023\n\013key_item_id\030\002 \001(\004\"\304\001\n!CMsgClientToGC"
  "UnlockCrateResponse\0223\n\006result\030\001 \001(\0162\017.EG"
  "CMsgResponse:\022k_EGCMsgResponseOK\022>\n\rgran"
  "ted_items\030\002 \003(\0132\'.CMsgClientToGCUnlockCr"
  "ateResponse.Item\032*\n\004Item\022\017\n\007item_id\030\001 \001("
  "\004\022\021\n\tdef_index\030\002 \001(\r\"4\n!CMsgClientToGCRe"
  "moveItemAttribute\022\017\n\007item_id\030\001 \001(\004\"\262\003\n)C"
  "MsgClientToGCRemoveItemAttributeResponse"
  "\022r\n\010response\030\001 \001(\0162\?.CMsgClientToGCRemov"
  "eItemAttributeResponse.ERemoveItemAttrib"
  "ute:\037k_RemoveItemAttribute_Succeeded\022\017\n\007"
  "item_id\030\002 \001(\004\"\377\001\n\024ERemoveItemAttribute\022#"
  "\n\037k_RemoveItemAttribute_Succeeded\020\000\022 \n\034k"
  "_RemoveItemAttribute_Failed\020\001\022.\n*k_Remov"
  "eItemAttribute_Failed_ItemIsInvalid\020\002\0229\n"
  "5k_RemoveItemAttribute_Failed_AttributeC"
  "annotBeRemoved\020\003\0225\n1k_RemoveItemAttribut"
  "e_Failed_AttributeDoesntExist\020\004\"U\n\026CMsgC"
  "lientToGCNameItem\022\027\n\017subject_item_id\030\001 \001"
  "(\004\022\024\n\014tool_item_id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\"\262"
  "\002\n\036CMsgClientToGCNameItemResponse\022Q\n\010res"
  "ponse\030\001 \001(\0162).CMsgClientToGCNameItemResp"
  "onse.ENameItem:\024k_NameItem_Succeeded\022\017\n\007"
  "item_id\030\002 \001(\004\"\253\001\n\tENameItem\022\030\n\024k_NameIte"
  "m_Succeeded\020\000\022\025\n\021k_NameItem_Failed\020\001\022#\n\037"
  "k_NameItem_Failed_ToolIsInvalid\020\002\022#\n\037k_N"
  "ameItem_Failed_ItemIsInvalid\020\003\022#\n\037k_Name"
  "Item_Failed_NameIsInvalid\020\004\">\n\025CMsgGCSet"
  "ItemPosition\022\017\n\007item_id\030\001 \001(\004\022\024\n\014new_pos"
  "ition\030\002 \001(\r\"\212\002\n%CAttribute_ItemDynamicRe"
  "cipeComponent\022\020\n\010item_def\030\001 \001(\r\022\024\n\014item_"
  "quality\030\002 \001(\r\022\022\n\nitem_flags\030\003 \001(\r\022\031\n\021att"
  "ributes_string\030\004 \001(\t\022\022\n\nitem_count\030\005 \001(\r"
  "\022\027\n\017items_fulfilled\030\006 \001(\r\022\023\n\013item_rarity"
  "\030\007 \001(\r\022\020\n\010lootlist\030\010 \001(\t\022\031\n\021fulfilled_it"
  "em_id\030\t \001(\004\022\033\n\023associated_item_def\030\n \001(\r"
  "\"\262\001\n\020CProtoItemSocket\022\017\n\007item_id\030\001 \001(\004\022\026"
  "\n\016attr_def_index\030\002 \001(\r\022\025\n\rrequired_type\030"
  "\003 \001(\r\022\025\n\rrequired_hero\030\004 \001(\t\022\025\n\rgem_def_"
  "index\030\005 \001(\r\022\024\n\014not_tradable\030\006 \001(\010\022\032\n\022req"
  "uired_item_slot\030\007 \001(\t\";\n\026CProtoItemSocke"
  "t_Empty\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSock"
  "et\"L\n\027CProtoItemSocket_Effect\022!\n\006socket\030"
  "\001 \001(\0132\021.CProtoItemSocket\022\016\n\006effect\030\002 \001(\r"
  "\"e\n\026CProtoItemSocket_Color\022!\n\006socket\030\001 \001"
  "(\0132\021.CProtoItemSocket\022\013\n\003red\030\002 \001(\r\022\r\n\005gr"
  "een\030\003 \001(\r\022\014\n\004blue\030\004 \001(\r\"j\n\030CProtoItemSoc"
  "ket_Strange\022!\n\006socket\030\001 \001(\0132\021.CProtoItem"
  "Socket\022\024\n\014strange_type\030\002 \001(\r\022\025\n\rstrange_"
  "value\030\003 \001(\r\"\237\001\n5CProtoItemSocket_Strange"
  "_DESERIALIZE_FROM_STRING_ONLY\022!\n\006socket\030"
  "\001 \001(\0132\021.CProtoItemSocket\022\024\n\014strange_type"
  "\030\002 \001(\r\022\025\n\rstrange_value\030\003 \001(\r\022\026\n\016ability"
  "_effect\030\004 \001(\r\"\221\001\n\032CProtoItemSocket_Spect"
  "ator\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\022"
  "\024\n\014games_viewed\030\002 \001(\r\022\026\n\016corporation_id\030"
  "\003 \001(\r\022\021\n\tleague_id\030\004 \001(\r\022\017\n\007team_id\030\005 \001("
  "\r\"[\n\036CProtoItemSocket_AssetModifier\022!\n\006s"
  "ocket\030\001 \001(\0132\021.CProtoItemSocket\022\026\n\016asset_"
  "modifier\030\002 \001(\r\"\247\001\n;CProtoItemSocket_Asse"
  "tModifier_DESERIALIZE_FROM_STRING_ONLY\022!"
  "\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\022\026\n\016ass"
  "et_modifier\030\002 \001(\r\022\025\n\ranim_modifier\030\003 \001(\r"
  "\022\026\n\016ability_effect\030\004 \001(\r\"\201\001\n\032CProtoItemS"
  "ocket_Autograph\022!\n\006socket\030\001 \001(\0132\021.CProto"
  "ItemSocket\022\021\n\tautograph\030\002 \001(\t\022\024\n\014autogra"
  "ph_id\030\003 \001(\r\022\027\n\017autograph_score\030\004 \001(\r\"C\n\036"
  "CProtoItemSocket_StaticVisuals\022!\n\006socket"
  "\030\001 \001(\0132\021.CProtoItemSocket\"\"\n\021CAttribute_"
  "String\022\r\n\005value\030\001 \001(\t\"m\n%CWorkshop_GetIt"
  "emDailyRevenue_Request\022\r\n\005appid\030\001 \001(\r\022\017\n"
  "\007item_id\030\002 \001(\r\022\022\n\ndate_start\030\003 \001(\r\022\020\n\010da"
  "te_end\030\004 \001(\r\"\335\001\n&CWorkshop_GetItemDailyR"
  "evenue_Response\022T\n\017country_revenue\030\001 \003(\013"
  "2;.CWorkshop_GetItemDailyRevenue_Respons"
  "e.CountryDailyRevenue\032]\n\023CountryDailyRev"
  "enue\022\024\n\014country_code\030\001 \001(\t\022\014\n\004date\030\002 \001(\r"
  "\022\023\n\013revenue_usd\030\003 \001(\003\022\r\n\005units\030\004 \001(\005\"c\n("
  "CWorkshop_GetPackageDailyRevenue_Request"
  "\022\021\n\tpackageid\030\001 \001(\r\022\022\n\ndate_start\030\002 \001(\r\022"
  "\020\n\010date_end\030\003 \001(\r\"\343\001\n)CWorkshop_GetPacka"
  "geDailyRevenue_Response\022W\n\017country_reven"
  "ue\030\001 \003(\0132>.CWorkshop_GetPackageDailyReve"
  "nue_Response.CountryDailyRevenue\032]\n\023Coun"
  "tryDailyRevenue\022\024\n\014country_code\030\001 \001(\t\022\014\n"
  "\004date\030\002 \001(\r\022\023\n\013revenue_usd\030\003 \001(\003\022\r\n\005unit"
  "s\030\004 \001(\005\"H\n\037CMsgSQLGCToGCGrantBackpackSlo"
  "ts\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tadd_slots\030\002 \001("
  "\r\"5\n\037CMsgClientToGCLookupAccountName\022\022\n\n"
  "account_id\030\001 \001(\r\"S\n\'CMsgClientToGCLookup"
  "AccountNameResponse\022\022\n\naccount_id\030\001 \001(\r\022"
  "\024\n\014account_name\030\002 \001(\t\"\235\001\n CMsgClientToGC"
  "CreateStaticRecipe\0225\n\005items\030\001 \003(\0132&.CMsg"
  "ClientToGCCreateStaticRecipe.Item\022\030\n\020rec"
  "ipe_def_index\030\002 \001(\r\032(\n\004Item\022\017\n\007item_id\030\001"
  " \001(\004\022\017\n\007slot_id\030\002 \001(\r\"\230\006\n(CMsgClientToGC"
  "CreateStaticRecipeResponse\022X\n\010response\030\001"
  " \001(\01623.CMsgClientToGCCreateStaticRecipeR"
  "esponse.EResponse:\021eResponse_Success\022J\n\014"
  "output_items\030\002 \003(\01324.CMsgClientToGCCreat"
  "eStaticRecipeResponse.OutputItem\022J\n\014inpu"
  "t_errors\030\003 \003(\01324.CMsgClientToGCCreateSta"
  "ticRecipeResponse.InputError\022V\n\022addition"
  "al_outputs\030\004 \003(\0132:.CMsgClientToGCCreateS"
  "taticRecipeResponse.AdditionalOutput\032A\n\n"
  "OutputItem\022\021\n\tdef_index\030\001 \001(\r\022\017\n\007item_id"
  "\030\002 \001(\004\022\017\n\007slot_id\030\003 \001(\r\032t\n\nInputError\022\017\n"
  "\007slot_id\030\001 \001(\r\022U\n\005error\030\002 \001(\01623.CMsgClie"
  "ntToGCCreateStaticRecipeResponse.ERespon"
  "se:\021eResponse_Success\0322\n\020AdditionalOutpu"
  "t\022\017\n\007slot_id\030\001 \001(\r\022\r\n\005value\030\002 \001(\004\"\264\001\n\tER"
  "esponse\022\025\n\021eResponse_Success\020\000\022\036\n\032eRespo"
  "nse_OfferingDisabled\020\001\022\032\n\026eResponse_Inva"
  "lidItems\020\002\022\033\n\027eResponse_InternalError\020\003\022"
  "\033\n\027eResponse_MissingLeague\020\004\022\032\n\026eRespons"
  "e_MissingEvent\020\005\"\333\003\n\033CMsgProcessTransact"
  "ionOrder\022\016\n\006txn_id\030\001 \001(\004\022\024\n\014steam_txn_id"
  "\030\002 \001(\004\022\026\n\016partner_txn_id\030\003 \001(\004\022\020\n\010steam_"
  "id\030\004 \001(\006\022\022\n\ntime_stamp\030\005 \001(\r\022\021\n\twatermar"
  "k\030\006 \001(\004\022\036\n\026purchase_report_status\030\007 \001(\005\022"
  "\020\n\010currency\030\010 \001(\r\0220\n\005items\030\t \003(\0132!.CMsgP"
  "rocessTransactionOrder.Item\032\340\001\n\004Item\022\026\n\016"
  "item_def_index\030\001 \001(\r\022\022\n\nitem_price\030\002 \001(\r"
  "\022\020\n\010quantity\030\003 \001(\r\022\025\n\rcategory_desc\030\004 \001("
  "\t\022\033\n\023store_purchase_type\030\005 \001(\r\022\033\n\023source"
  "_reference_id\030\006 \001(\004\022\032\n\022parent_stack_inde"
  "x\030\007 \001(\005\022\025\n\rdefault_price\030\010 \001(\010\022\026\n\016is_use"
  "r_facing\030\t \001(\010\"{\n&CMsgGCToGCStoreProcess"
  "CDKeyTransaction\022+\n\005order\030\001 \001(\0132\034.CMsgPr"
  "ocessTransactionOrder\022\023\n\013reason_code\030\002 \001"
  "(\r\022\017\n\007partner\030\003 \001(\r\"A\n.CMsgGCToGCStorePr"
  "ocessCDKeyTransactionResponse\022\017\n\007success"
  "\030\001 \001(\010\"O\n CMsgGCToGCStoreProcessSettleme"
  "nt\022+\n\005order\030\001 \001(\0132\034.CMsgProcessTransacti"
  "onOrder\";\n(CMsgGCToGCStoreProcessSettlem"
  "entResponse\022\017\n\007success\030\001 \001(\010\"\201\001\n!CMsgGCT"
  "oGCBroadcastConsoleCommand\022\023\n\013con_comman"
  "d\030\001 \001(\t\022\025\n\rreport_output\030\002 \001(\010\022\026\n\nsendin"
  "g_gc\030\003 \001(\005:\002-1\022\030\n\020output_initiator\030\004 \001(\t"
  "\"\307\001\n\027CMsgGCToGCConsoleOutput\022\021\n\tinitiato"
  "r\030\001 \001(\t\022\026\n\nsending_gc\030\002 \001(\005:\002-1\0221\n\004msgs\030"
  "\003 \003(\0132#.CMsgGCToGCConsoleOutput.OutputLi"
  "ne\022\036\n\026is_last_for_source_job\030\004 \001(\010\032.\n\nOu"
  "tputLine\022\014\n\004text\030\001 \001(\t\022\022\n\nspew_level\030\002 \001"
  "(\r\"\216\001\n\014CMsgItemAges\022@\n\026max_item_id_times"
  "tamps\030\001 \003(\0132 .CMsgItemAges.MaxItemIDTime"
  "stamp\032<\n\022MaxItemIDTimestamp\022\021\n\ttimestamp"
  "\030\001 \001(\r\022\023\n\013max_item_id\030\002 \001(\004\"\257\001\n\031CMsgGCTo"
  "GCInternalTestMsg\022\026\n\nsending_gc\030\001 \001(\005:\002-"
  "1\022\021\n\tsender_id\030\002 \001(\006\022\017\n\007context\030\003 \001(\r\022\022\n"
  "\nmessage_id\030\004 \001(\r\022\024\n\014message_body\030\005 \001(\014\022"
  "\025\n\rjob_id_source\030\006 \001(\006\022\025\n\rjob_id_target\030"
  "\007 \001(\006\"\300\001\n%CMsgGCToGCClientServerVersions"
  "Updated\022\"\n\032client_min_allowed_version\030\001 "
  "\001(\r\022\035\n\025client_active_version\030\002 \001(\r\022\035\n\025se"
  "rver_active_version\030\003 \001(\r\022\037\n\027server_depl"
  "oyed_version\030\004 \001(\r\022\024\n\014what_changed\030\005 \001(\r"
  "\"\203\001\n!CMsgGCToGCBroadcastMessageFromSub\022\016"
  "\n\006msg_id\030\001 \001(\r\022\026\n\016serialized_msg\030\002 \001(\014\022\033"
  "\n\017account_id_list\030\003 \003(\rB\002\020\001\022\031\n\rsteam_id_"
  "list\030\004 \003(\006B\002\020\001\"\270\001\n!CMsgGCToClientCurrenc"
  "yPricePoints\022\025\n\tprice_key\030\001 \003(\004B\002\020\001\022\?\n\nc"
  "urrencies\030\002 \003(\0132+.CMsgGCToClientCurrency"
  "PricePoints.Currency\032;\n\010Currency\022\023\n\013curr"
  "ency_id\030\001 \001(\r\022\032\n\016currency_price\030\002 \003(\004B\002\020"
  "\001\";\n\022CMsgBannedWordList\022\017\n\007version\030\001 \001(\r"
  "\022\024\n\014banned_words\030\002 \003(\t\"\206\001\n\"CMsgGCToGCFlu"
  "shSteamInventoryCache\0225\n\004keys\030\001 \003(\0132\'.CM"
  "sgGCToGCFlushSteamInventoryCache.Key\032)\n\003"
  "Key\022\017\n\007steamid\030\001 \001(\004\022\021\n\tcontextid\030\002 \001(\004\""
  "N\n!CMsgGCToGCUpdateSubscriptionItems\022\022\n\n"
  "account_id\030\001 \001(\r\022\025\n\ralways_notify\030\002 \001(\010\""
  "\'\n\022CMsgGCToGCSelfPing\022\021\n\tsample_id\030\001 \001(\r"
  "\"!\n\037CMsgGCToGCGetInfuxIntervalStats\"\243\001\n\'"
  "CMsgGCToGCGetInfuxIntervalStatsResponse\022"
  "\024\n\010stat_ids\030\001 \003(\007B\002\020\001\022\026\n\nstat_total\030\002 \003("
  "\004B\002\020\001\022\030\n\014stat_samples\030\003 \003(\rB\002\020\001\022\024\n\010stat_"
  "max\030\004 \003(\rB\002\020\001\022\032\n\022sample_duration_ms\030\005 \001("
  "\r\"\035\n\033CMsgGCToGCPurchaseSucceeded\"@\n,CMsg"
  "ClientToGCGetLimitedItemPurchaseQuantity"
  "\022\020\n\010item_def\030\001 \001(\r\"\313\002\n4CMsgClientToGCGet"
  "LimitedItemPurchaseQuantityResponse\022a\n\006r"
  "esult\030\001 \001(\0162\?.CMsgClientToGCGetLimitedIt"
  "emPurchaseQuantityResponse.EResponse:\020k_"
  "eInternalError\022\032\n\022quantity_purchased\030\002 \001"
  "(\r\"\223\001\n\tEResponse\022\024\n\020k_eInternalError\020\000\022\016"
  "\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDis"
  "abled\020\003\022\016\n\nk_eTimeout\020\004\022\025\n\021k_eInvalidIte"
  "mDef\020\005\022\030\n\024k_eItemDefNotLimited\020\006\"a\n\032CMsg"
  "GCToGCUpdateWelcomeMsg\022\016\n\006server\030\001 \001(\010\022 "
  "\n\007new_msg\030\002 \001(\0132\017.CExtraMsgBlock\022\021\n\tbroa"
  "dcast\030\003 \001(\010*\331$\n\nEGCItemMsg\022\021\n\014k_EMsgGCBa"
  "se\020\350\007\022\034\n\027k_EMsgGCSetItemPosition\020\351\007\022\037\n\032k"
  "_EMsgClientToGCPackBundle\020\352\007\022\'\n\"k_EMsgCl"
  "ientToGCPackBundleResponse\020\353\007\022\023\n\016k_EMsgG"
  "CDelete\020\354\007\022$\n\037k_EMsgGCVerifyCacheSubscri"
  "ption\020\355\007\022\035\n\030k_EMsgClientToGCNameItem\020\356\007\022"
  "\026\n\021k_EMsgGCPaintItem\020\361\007\022\036\n\031k_EMsgGCPaint"
  "ItemResponse\020\362\007\022\031\n\024k_EMsgGCNameBaseItem\020"
  "\373\007\022!\n\034k_EMsgGCNameBaseItemResponse\020\374\007\022\033\n"
  "\026k_EMsgGCUseItemRequest\020\201\010\022\034\n\027k_EMsgGCUs"
  "eItemResponse\020\202\010\022\030\n\023k_EMsgGCGiftedItems\020"
  "\203\010\022\036\n\031k_EMsgGCUnwrapGiftRequest\020\215\010\022\037\n\032k_"
  "EMsgGCUnwrapGiftResponse\020\216\010\022\026\n\021k_EMsgGCS"
  "ortItems\020\221\010\022!\n\034k_EMsgGCBackpackSortFinis"
  "hed\020\242\010\022$\n\037k_EMsgGCAdjustItemEquippedStat"
  "e\020\243\010\022\035\n\030k_EMsgGCItemAcknowledged\020\246\010\022%\n k"
  "_EMsgClientToGCNameItemResponse\020\254\010\022\035\n\030k_"
  "EMsgGCApplyStrangePart\020\261\010\022 \n\033k_EMsgGCApp"
  "lyPennantUpgrade\020\264\010\022\035\n\030k_EMsgGCSetItemPo"
  "sitions\020\265\010\022\034\n\027k_EMsgGCApplyEggEssence\020\266\010"
  "\022#\n\036k_EMsgGCNameEggEssenceResponse\020\267\010\022\030\n"
  "\023k_EMsgGCExtractGems\020\276\010\022\026\n\021k_EMsgGCAddSo"
  "cket\020\277\010\022\034\n\027k_EMsgGCAddItemToSocket\020\300\010\022$\n"
  "\037k_EMsgGCAddItemToSocketResponse\020\301\010\022\036\n\031k"
  "_EMsgGCAddSocketResponse\020\302\010\022!\n\034k_EMsgGCR"
  "esetStrangeGemCount\020\303\010\022\036\n\031k_EMsgGCReques"
  "tCrateItems\020\304\010\022&\n!k_EMsgGCRequestCrateIt"
  "emsResponse\020\305\010\022 \n\033k_EMsgGCExtractGemsRes"
  "ponse\020\306\010\022)\n$k_EMsgGCResetStrangeGemCount"
  "Response\020\307\010\022!\n\034k_EMsgGCServerUseItemRequ"
  "est\020\317\010\022\030\n\023k_EMsgGCAddGiftItem\020\320\010\022/\n*k_EM"
  "sgClientToGCRemoveItemGifterAttributes\020\325"
  "\010\022#\n\036k_EMsgClientToGCRemoveItemName\020\326\010\022*"
  "\n%k_EMsgClientToGCRemoveItemDescription\020"
  "\327\010\0220\n+k_EMsgClientToGCRemoveItemAttribut"
  "eResponse\020\330\010\022\037\n\032k_EMsgGCDev_NewItemReque"
  "st\020\321\017\022\'\n\"k_EMsgGCDev_NewItemRequestRespo"
  "nse\020\322\017\022+\n&k_EMsgGCDev_UnlockAllItemStyle"
  "sRequest\020\323\017\022,\n\'k_EMsgGCDev_UnlockAllItem"
  "StylesResponse\020\324\017\022\"\n\035k_EMsgGCStorePurcha"
  "seFinalize\020\310\023\022*\n%k_EMsgGCStorePurchaseFi"
  "nalizeResponse\020\311\023\022 \n\033k_EMsgGCStorePurcha"
  "seCancel\020\312\023\022(\n#k_EMsgGCStorePurchaseCanc"
  "elResponse\020\313\023\022\036\n\031k_EMsgGCStorePurchaseIn"
  "it\020\316\023\022&\n!k_EMsgGCStorePurchaseInitRespon"
  "se\020\317\023\022&\n!k_EMsgGCToGCBannedWordListUpdat"
  "ed\020\323\023\022\036\n\031k_EMsgGCToGCDirtySDOCache\020\324\023\022\"\n"
  "\035k_EMsgGCToGCUpdateSQLKeyValue\020\326\023\022(\n#k_E"
  "MsgGCToGCBroadcastConsoleCommand\020\331\023\022!\n\034k"
  "_EMsgGCServerVersionUpdated\020\332\023\022\033\n\026k_EMsg"
  "GCApplyAutograph\020\333\023\022%\n k_EMsgGCToGCWebAP"
  "IAccountChanged\020\334\023\022!\n\034k_EMsgGCClientVers"
  "ionUpdated\020\340\023\022!\n\034k_EMsgGCToGCUpdateWelco"
  "meMsg\020\341\023\022.\n)k_EMsgGCToGCPlayerStrangeCou"
  "ntAdjustments\020\347\023\022\"\n\035k_EMsgGCRequestStore"
  "SalesData\020\350\023\022*\n%k_EMsgGCRequestStoreSale"
  "sDataResponse\020\351\023\0222\n-k_EMsgGCRequestStore"
  "SalesDataUpToDateResponse\020\352\023\022\034\n\027k_EMsgGC"
  "ToGCPingRequest\020\353\023\022\035\n\030k_EMsgGCToGCPingRe"
  "sponse\020\354\023\022%\n k_EMsgGCToGCGetUserSessionS"
  "erver\020\355\023\022-\n(k_EMsgGCToGCGetUserSessionSe"
  "rverResponse\020\356\023\022%\n k_EMsgGCToGCGetUserSe"
  "rverMembers\020\357\023\022-\n(k_EMsgGCToGCGetUserSer"
  "verMembersResponse\020\360\023\022$\n\037k_EMsgGCToGCCan"
  "UseDropRateBonus\020\363\023\022\036\n\031k_EMsgSQLAddDropR"
  "ateBonus\020\364\023\022\037\n\032k_EMsgGCToGCRefreshSOCach"
  "e\020\365\023\022(\n#k_EMsgGCToGCGrantAccountRolledIt"
  "ems\020\372\023\022+\n&k_EMsgGCToGCGrantSelfMadeItemT"
  "oAccount\020\373\023\022\030\n\023k_EMsgGCStatueCraft\020\201\024\022\027\n"
  "\022k_EMsgGCRedeemCode\020\202\024\022\037\n\032k_EMsgGCRedeem"
  "CodeResponse\020\203\024\022(\n#k_EMsgGCToGCItemConsu"
  "mptionRollback\020\204\024\022\'\n\"k_EMsgClientToGCWra"
  "pAndDeliverGift\020\205\024\022/\n*k_EMsgClientToGCWr"
  "apAndDeliverGiftResponse\020\206\024\022)\n$k_EMsgCli"
  "entToGCUnpackBundleResponse\020\207\024\022.\n)k_EMsg"
  "GCToClientStoreTransactionCompleted\020\210\024\022\037"
  "\n\032k_EMsgClientToGCEquipItems\020\211\024\022\'\n\"k_EMs"
  "gClientToGCEquipItemsResponse\020\212\024\022$\n\037k_EM"
  "sgClientToGCUnlockItemStyle\020\213\024\022,\n\'k_EMsg"
  "ClientToGCUnlockItemStyleResponse\020\214\024\022-\n("
  "k_EMsgClientToGCSetItemInventoryCategory"
  "\020\215\024\022 \n\033k_EMsgClientToGCUnlockCrate\020\216\024\022(\n"
  "#k_EMsgClientToGCUnlockCrateResponse\020\217\024\022"
  "!\n\034k_EMsgClientToGCUnpackBundle\020\220\024\022!\n\034k_"
  "EMsgClientToGCSetItemStyle\020\221\024\022)\n$k_EMsgC"
  "lientToGCSetItemStyleResponse\020\222\024\022&\n!k_EM"
  "sgSQLGCToGCGrantBackpackSlots\020\224\024\022&\n!k_EM"
  "sgClientToGCLookupAccountName\020\225\024\022.\n)k_EM"
  "sgClientToGCLookupAccountNameResponse\020\226\024"
  "\022\'\n\"k_EMsgClientToGCCreateStaticRecipe\020\230"
  "\024\022/\n*k_EMsgClientToGCCreateStaticRecipeR"
  "esponse\020\231\024\022-\n(k_EMsgGCToGCStoreProcessCD"
  "KeyTransaction\020\232\024\0225\n0k_EMsgGCToGCStorePr"
  "ocessCDKeyTransactionResponse\020\233\024\022\'\n\"k_EM"
  "sgGCToGCStoreProcessSettlement\020\234\024\022/\n*k_E"
  "MsgGCToGCStoreProcessSettlementResponse\020"
  "\235\024\022\036\n\031k_EMsgGCToGCConsoleOutput\020\236\024\022\035\n\030k_"
  "EMsgGCToClientItemAges\020\237\024\022 \n\033k_EMsgGCToG"
  "CInternalTestMsg\020\240\024\022,\n\'k_EMsgGCToGCClien"
  "tServerVersionsUpdated\020\241\024\022$\n\037k_EMsgGCUse"
  "MultipleItemsRequest\020\242\024\022\'\n\"k_EMsgGCGetAc"
  "countSubscriptionItem\020\243\024\022/\n*k_EMsgGCGetA"
  "ccountSubscriptionItemResponse\020\244\024\022(\n#k_E"
  "MsgGCToGCBroadcastMessageFromSub\020\246\024\022(\n#k"
  "_EMsgGCToClientCurrencyPricePoints\020\247\024\022$\n"
  "\037k_EMsgGCToGCAddSubscriptionTime\020\250\024\022)\n$k"
  "_EMsgGCToGCFlushSteamInventoryCache\020\251\024\022("
  "\n#k_EMsgGCRequestCrateEscalationLevel\020\252\024"
  "\0220\n+k_EMsgGCRequestCrateEscalationLevelR"
  "esponse\020\253\024\022(\n#k_EMsgGCToGCUpdateSubscrip"
  "tionItems\020\254\024\022\031\n\024k_EMsgGCToGCSelfPing\020\255\024\022"
  "&\n!k_EMsgGCToGCGetInfuxIntervalStats\020\256\024\022"
  ".\n)k_EMsgGCToGCGetInfuxIntervalStatsResp"
  "onse\020\257\024\022\"\n\035k_EMsgGCToGCPurchaseSucceeded"
  "\020\260\024\0223\n.k_EMsgClientToGCGetLimitedItemPur"
  "chaseQuantity\020\261\024\022;\n6k_EMsgClientToGCGetL"
  "imitedItemPurchaseQuantityResponse\020\262\024\022 \n"
  "\033k_EMsgGCToGCBetaDeleteItems\020\263\024*\271\n\n\033EGCM"
  "sgInitiateTradeResponse\022*\n&k_EGCMsgIniti"
  "ateTradeResponse_Accepted\020\000\022*\n&k_EGCMsgI"
  "nitiateTradeResponse_Declined\020\001\0226\n2k_EGC"
  "MsgInitiateTradeResponse_VAC_Banned_Init"
  "iator\020\002\0223\n/k_EGCMsgInitiateTradeResponse"
  "_VAC_Banned_Target\020\003\0228\n4k_EGCMsgInitiate"
  "TradeResponse_Target_Already_Trading\020\004\022*"
  "\n&k_EGCMsgInitiateTradeResponse_Disabled"
  "\020\005\022-\n)k_EGCMsgInitiateTradeResponse_NotL"
  "oggedIn\020\006\022(\n$k_EGCMsgInitiateTradeRespon"
  "se_Cancel\020\007\022)\n%k_EGCMsgInitiateTradeResp"
  "onse_TooSoon\020\010\0220\n,k_EGCMsgInitiateTradeR"
  "esponse_TooSoonPenalty\020\t\0228\n4k_EGCMsgInit"
  "iateTradeResponse_Trade_Banned_Initiator"
  "\020\n\0225\n1k_EGCMsgInitiateTradeResponse_Trad"
  "e_Banned_Target\020\013\022C\n\?k_EGCMsgInitiateTra"
  "deResponse_Free_Account_Initiator_DEPREC"
  "ATED\020\014\022:\n6k_EGCMsgInitiateTradeResponse_"
  "Shared_Account_Initiator\020\r\0225\n1k_EGCMsgIn"
  "itiateTradeResponse_Service_Unavailable\020"
  "\016\0220\n,k_EGCMsgInitiateTradeResponse_Targe"
  "t_Blocked\020\017\0223\n/k_EGCMsgInitiateTradeResp"
  "onse_NeedVerifiedEmail\020\020\0220\n,k_EGCMsgInit"
  "iateTradeResponse_NeedSteamGuard\020\021\0224\n0k_"
  "EGCMsgInitiateTradeResponse_SteamGuardDu"
  "ration\020\022\0221\n-k_EGCMsgInitiateTradeRespons"
  "e_TheyCannotTrade\020\023\0227\n3k_EGCMsgInitiateT"
  "radeResponse_Recent_Password_Reset\020\024\0222\n."
  "k_EGCMsgInitiateTradeResponse_Using_New_"
  "Device\020\025\0225\n1k_EGCMsgInitiateTradeRespons"
  "e_Sent_Invalid_Cookie\020\026\0221\n-k_EGCMsgIniti"
  "ateTradeResponse_TooRecentFriend\020\027\0227\n3k_"
  "EGCMsgInitiateTradeResponse_WalledFundsN"
  "otTrusted\020\030"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_econ_5fgcmessages_2eproto_deps[3] = {
  &::descriptor_table_econ_5fshared_5fenums_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_econ_5fgcmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_econ_5fgcmessages_2eproto = {
    false, false, 22331, descriptor_table_protodef_econ_5fgcmessages_2eproto,
    "econ_gcmessages.proto",
    &descriptor_table_econ_5fgcmessages_2eproto_once, descriptor_table_econ_5fgcmessages_2eproto_deps, 3, 129,
    schemas, file_default_instances, TableStruct_econ_5fgcmessages_2eproto::offsets,
    file_level_metadata_econ_5fgcmessages_2eproto, file_level_enum_descriptors_econ_5fgcmessages_2eproto,
    file_level_service_descriptors_econ_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_econ_5fgcmessages_2eproto_getter() {
  return &descriptor_table_econ_5fgcmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_econ_5fgcmessages_2eproto(&descriptor_table_econ_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgRequestCrateItemsResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[0];
}
bool CMsgRequestCrateItemsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::k_Succeeded;
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::k_Failed;
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::EResult_MIN;
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::EResult_MAX;
constexpr int CMsgRequestCrateItemsResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgRequestCrateEscalationLevelResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[1];
}
bool CMsgRequestCrateEscalationLevelResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::k_Succeeded;
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::k_Failed;
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::EResult_MIN;
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::EResult_MAX;
constexpr int CMsgRequestCrateEscalationLevelResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgRedeemCodeResponse_EResultCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[2];
}
bool CMsgRedeemCodeResponse_EResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Succeeded;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Failed_CodeNotFound;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Failed_CodeAlreadyUsed;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Failed_OtherError;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::EResultCode_MIN;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::EResultCode_MAX;
constexpr int CMsgRedeemCodeResponse::EResultCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCUnpackBundleResponse_EUnpackBundle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[3];
}
bool CMsgClientToGCUnpackBundleResponse_EUnpackBundle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Succeeded;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_ItemIsNotBundle;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_UnableToCreateContainedItem;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_SOCacheError;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_ItemIsInvalid;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_BadItemQuantity;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_UnableToDeleteItem;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::EUnpackBundle_MIN;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::EUnpackBundle_MAX;
constexpr int CMsgClientToGCUnpackBundleResponse::EUnpackBundle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCPackBundleResponse_EPackBundle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[4];
}
bool CMsgClientToGCPackBundleResponse_EPackBundle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Succeeded;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_InternalError;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemIsNotBundle;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_SOCacheError;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemIsInvalid;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_BadItemQuantity;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_UnableToDeleteItem;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_BundleCannotBePacked;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemIsUntradeable;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemIsEquipped;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemHasGems;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemMixedQuality;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemInvalidQuality;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_ItemIsNonEconomy;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::k_PackBundle_Failed_Disabled;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::EPackBundle_MIN;
constexpr CMsgClientToGCPackBundleResponse_EPackBundle CMsgClientToGCPackBundleResponse::EPackBundle_MAX;
constexpr int CMsgClientToGCPackBundleResponse::EPackBundle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSetItemStyleResponse_ESetStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[5];
}
bool CMsgClientToGCSetItemStyleResponse_ESetStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::k_SetStyle_Succeeded;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::k_SetStyle_Failed;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::k_SetStyle_Failed_StyleIsLocked;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::ESetStyle_MIN;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::ESetStyle_MAX;
constexpr int CMsgClientToGCSetItemStyleResponse::ESetStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[6];
}
bool CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Succeeded;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_PreReq;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantAfford;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantCommit;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantLockCache;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantAffordAttrib;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantAffordGem;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_NoCompendiumLevel;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_AlreadyUnlocked;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_OtherError;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_ItemIsInvalid;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_ToolIsInvalid;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::EUnlockStyle_MIN;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::EUnlockStyle_MAX;
constexpr int CMsgClientToGCUnlockItemStyleResponse::EUnlockStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[7];
}
bool CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Succeeded;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed_ItemIsInvalid;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed_AttributeCannotBeRemoved;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed_AttributeDoesntExist;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::ERemoveItemAttribute_MIN;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::ERemoveItemAttribute_MAX;
constexpr int CMsgClientToGCRemoveItemAttributeResponse::ERemoveItemAttribute_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCNameItemResponse_ENameItem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[8];
}
bool CMsgClientToGCNameItemResponse_ENameItem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Succeeded;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed_ToolIsInvalid;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed_ItemIsInvalid;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed_NameIsInvalid;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::ENameItem_MIN;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::ENameItem_MAX;
constexpr int CMsgClientToGCNameItemResponse::ENameItem_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCCreateStaticRecipeResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[9];
}
bool CMsgClientToGCCreateStaticRecipeResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_Success;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_OfferingDisabled;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_InvalidItems;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_InternalError;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_MissingLeague;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_MissingEvent;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::EResponse_MIN;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::EResponse_MAX;
constexpr int CMsgClientToGCCreateStaticRecipeResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[10];
}
bool CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eInternalError;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eSuccess;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eTooBusy;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eDisabled;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eTimeout;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eInvalidItemDef;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eItemDefNotLimited;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::EResponse_MIN;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::EResponse_MAX;
constexpr int CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCItemMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[11];
}
bool EGCItemMsg_IsValid(int value) {
  switch (value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1009:
    case 1010:
    case 1019:
    case 1020:
    case 1025:
    case 1026:
    case 1027:
    case 1037:
    case 1038:
    case 1041:
    case 1058:
    case 1059:
    case 1062:
    case 1068:
    case 1073:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1103:
    case 1104:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2510:
    case 2511:
    case 2515:
    case 2516:
    case 2518:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2528:
    case 2529:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
    case 2544:
    case 2547:
    case 2548:
    case 2549:
    case 2554:
    case 2555:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2580:
    case 2581:
    case 2582:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCMsgInitiateTradeResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[12];
}
bool EGCMsgInitiateTradeResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgApplyAutograph::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyAutograph>()._impl_._has_bits_);
  static void set_has_autograph_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyAutograph::CMsgApplyAutograph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyAutograph)
}
CMsgApplyAutograph::CMsgApplyAutograph(const CMsgApplyAutograph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgApplyAutograph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.autograph_item_id_){}
    , decltype(_impl_.item_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.autograph_item_id_, &from._impl_.autograph_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_item_id_) -
    reinterpret_cast<char*>(&_impl_.autograph_item_id_)) + sizeof(_impl_.item_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyAutograph)
}

inline void CMsgApplyAutograph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.autograph_item_id_){uint64_t{0u}}
    , decltype(_impl_.item_item_id_){uint64_t{0u}}
  };
}

CMsgApplyAutograph::~CMsgApplyAutograph() {
  // @@protoc_insertion_point(destructor:CMsgApplyAutograph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgApplyAutograph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyAutograph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgApplyAutograph::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyAutograph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.autograph_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_item_id_) -
        reinterpret_cast<char*>(&_impl_.autograph_item_id_)) + sizeof(_impl_.item_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyAutograph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 autograph_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_autograph_item_id(&has_bits);
          _impl_.autograph_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          _impl_.item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgApplyAutograph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyAutograph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 autograph_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_autograph_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyAutograph)
  return target;
}

size_t CMsgApplyAutograph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyAutograph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 autograph_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_autograph_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyAutograph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgApplyAutograph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyAutograph::GetClassData() const { return &_class_data_; }


void CMsgApplyAutograph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgApplyAutograph*>(&to_msg);
  auto& from = static_cast<const CMsgApplyAutograph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyAutograph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.autograph_item_id_ = from._impl_.autograph_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_item_id_ = from._impl_.item_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyAutograph::CopyFrom(const CMsgApplyAutograph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyAutograph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyAutograph::IsInitialized() const {
  return true;
}

void CMsgApplyAutograph::InternalSwap(CMsgApplyAutograph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyAutograph, _impl_.item_item_id_)
      + sizeof(CMsgApplyAutograph::_impl_.item_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyAutograph, _impl_.autograph_item_id_)>(
          reinterpret_cast<char*>(&_impl_.autograph_item_id_),
          reinterpret_cast<char*>(&other->_impl_.autograph_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyAutograph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[0]);
}

// ===================================================================

class CMsgAdjustItemEquippedState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAdjustItemEquippedState>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAdjustItemEquippedState)
}
CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(const CMsgAdjustItemEquippedState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAdjustItemEquippedState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.new_class_){}
    , decltype(_impl_.new_slot_){}
    , decltype(_impl_.style_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_index_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgAdjustItemEquippedState)
}

inline void CMsgAdjustItemEquippedState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.new_class_){0u}
    , decltype(_impl_.new_slot_){0u}
    , decltype(_impl_.style_index_){255u}
  };
}

CMsgAdjustItemEquippedState::~CMsgAdjustItemEquippedState() {
  // @@protoc_insertion_point(destructor:CMsgAdjustItemEquippedState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAdjustItemEquippedState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAdjustItemEquippedState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAdjustItemEquippedState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAdjustItemEquippedState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_slot_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.new_slot_));
    _impl_.style_index_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAdjustItemEquippedState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_class(&has_bits);
          _impl_.new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_slot(&has_bits);
          _impl_.new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_index = 4 [default = 255];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_style_index(&has_bits);
          _impl_.style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAdjustItemEquippedState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAdjustItemEquippedState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 new_class = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_slot(), target);
  }

  // optional uint32 style_index = 4 [default = 255];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAdjustItemEquippedState)
  return target;
}

size_t CMsgAdjustItemEquippedState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAdjustItemEquippedState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 new_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_class());
    }

    // optional uint32 new_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_slot());
    }

    // optional uint32 style_index = 4 [default = 255];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAdjustItemEquippedState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAdjustItemEquippedState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAdjustItemEquippedState::GetClassData() const { return &_class_data_; }


void CMsgAdjustItemEquippedState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAdjustItemEquippedState*>(&to_msg);
  auto& from = static_cast<const CMsgAdjustItemEquippedState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAdjustItemEquippedState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.new_class_ = from._impl_.new_class_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.new_slot_ = from._impl_.new_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.style_index_ = from._impl_.style_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAdjustItemEquippedState::CopyFrom(const CMsgAdjustItemEquippedState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAdjustItemEquippedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdjustItemEquippedState::IsInitialized() const {
  return true;
}

void CMsgAdjustItemEquippedState::InternalSwap(CMsgAdjustItemEquippedState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, _impl_.new_slot_)
      + sizeof(CMsgAdjustItemEquippedState::_impl_.new_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
  swap(_impl_.style_index_, other->_impl_.style_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAdjustItemEquippedState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[1]);
}

// ===================================================================

class CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
}
CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.adjustment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.adjustment_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.adjustment_));
  // @@protoc_insertion_point(copy_constructor:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
}

inline void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.event_type_){0u}
    , decltype(_impl_.adjustment_){0u}
  };
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment() {
  // @@protoc_insertion_point(destructor:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.adjustment_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.adjustment_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 adjustment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_adjustment(&has_bits);
          _impl_.adjustment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_type(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 adjustment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_adjustment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  return target;
}

size_t CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 event_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_type());
    }

    // optional uint32 adjustment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_adjustment());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::GetClassData() const { return &_class_data_; }


void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment*>(&to_msg);
  auto& from = static_cast<const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.adjustment_ = from._impl_.adjustment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::IsInitialized() const {
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::InternalSwap(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _impl_.adjustment_)
      + sizeof(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_impl_.adjustment_)
      - PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[2]);
}

// ===================================================================

class CMsgEconPlayerStrangeCountAdjustment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgEconPlayerStrangeCountAdjustment>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_turbo_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgEconPlayerStrangeCountAdjustment)
}
CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgEconPlayerStrangeCountAdjustment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strange_count_adjustments_){from._impl_.strange_count_adjustments_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.turbo_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.turbo_mode_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.turbo_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgEconPlayerStrangeCountAdjustment)
}

inline void CMsgEconPlayerStrangeCountAdjustment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strange_count_adjustments_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.turbo_mode_){false}
  };
}

CMsgEconPlayerStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment() {
  // @@protoc_insertion_point(destructor:CMsgEconPlayerStrangeCountAdjustment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgEconPlayerStrangeCountAdjustment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strange_count_adjustments_.~RepeatedPtrField();
}

void CMsgEconPlayerStrangeCountAdjustment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgEconPlayerStrangeCountAdjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgEconPlayerStrangeCountAdjustment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strange_count_adjustments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.turbo_mode_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.turbo_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgEconPlayerStrangeCountAdjustment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strange_count_adjustments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool turbo_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_turbo_mode(&has_bits);
          _impl_.turbo_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgEconPlayerStrangeCountAdjustment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEconPlayerStrangeCountAdjustment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_strange_count_adjustments_size()); i < n; i++) {
    const auto& repfield = this->_internal_strange_count_adjustments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool turbo_mode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_turbo_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEconPlayerStrangeCountAdjustment)
  return target;
}

size_t CMsgEconPlayerStrangeCountAdjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgEconPlayerStrangeCountAdjustment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  total_size += 1UL * this->_internal_strange_count_adjustments_size();
  for (const auto& msg : this->_impl_.strange_count_adjustments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool turbo_mode = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgEconPlayerStrangeCountAdjustment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgEconPlayerStrangeCountAdjustment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgEconPlayerStrangeCountAdjustment::GetClassData() const { return &_class_data_; }


void CMsgEconPlayerStrangeCountAdjustment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgEconPlayerStrangeCountAdjustment*>(&to_msg);
  auto& from = static_cast<const CMsgEconPlayerStrangeCountAdjustment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgEconPlayerStrangeCountAdjustment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.strange_count_adjustments_.MergeFrom(from._impl_.strange_count_adjustments_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.turbo_mode_ = from._impl_.turbo_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgEconPlayerStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgEconPlayerStrangeCountAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment::IsInitialized() const {
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment::InternalSwap(CMsgEconPlayerStrangeCountAdjustment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.strange_count_adjustments_.InternalSwap(&other->_impl_.strange_count_adjustments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, _impl_.turbo_mode_)
      + sizeof(CMsgEconPlayerStrangeCountAdjustment::_impl_.turbo_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgEconPlayerStrangeCountAdjustment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[3]);
}

// ===================================================================

class CMsgCraftingResponse::_Internal {
 public:
};

CMsgCraftingResponse::CMsgCraftingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCraftingResponse)
}
CMsgCraftingResponse::CMsgCraftingResponse(const CMsgCraftingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCraftingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCraftingResponse)
}

inline void CMsgCraftingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgCraftingResponse::~CMsgCraftingResponse() {
  // @@protoc_insertion_point(destructor:CMsgCraftingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCraftingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgCraftingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCraftingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCraftingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCraftingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCraftingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCraftingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCraftingResponse)
  return target;
}

size_t CMsgCraftingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCraftingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCraftingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCraftingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCraftingResponse::GetClassData() const { return &_class_data_; }


void CMsgCraftingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCraftingResponse*>(&to_msg);
  auto& from = static_cast<const CMsgCraftingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCraftingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCraftingResponse::CopyFrom(const CMsgCraftingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCraftingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftingResponse::IsInitialized() const {
  return true;
}

void CMsgCraftingResponse::InternalSwap(CMsgCraftingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCraftingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[4]);
}

// ===================================================================

class CMsgGCRequestStoreSalesData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesData>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesData)
}
CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(const CMsgGCRequestStoreSalesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCRequestStoreSalesData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.currency_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currency_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesData)
}

inline void CMsgGCRequestStoreSalesData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.currency_){0u}
  };
}

CMsgGCRequestStoreSalesData::~CMsgGCRequestStoreSalesData() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCRequestStoreSalesData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCRequestStoreSalesData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currency_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.currency_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_currency(&has_bits);
          _impl_.currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCRequestStoreSalesData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 currency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesData)
  return target;
}

size_t CMsgGCRequestStoreSalesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 currency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currency());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRequestStoreSalesData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCRequestStoreSalesData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRequestStoreSalesData::GetClassData() const { return &_class_data_; }


void CMsgGCRequestStoreSalesData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCRequestStoreSalesData*>(&to_msg);
  auto& from = static_cast<const CMsgGCRequestStoreSalesData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.currency_ = from._impl_.currency_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCRequestStoreSalesData::CopyFrom(const CMsgGCRequestStoreSalesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesData::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesData::InternalSwap(CMsgGCRequestStoreSalesData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesData, _impl_.currency_)
      + sizeof(CMsgGCRequestStoreSalesData::_impl_.currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesData, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[5]);
}

// ===================================================================

class CMsgGCRequestStoreSalesDataResponse_Price::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesDataResponse_Price>()._impl_._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesDataResponse.Price)
}
CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(const CMsgGCRequestStoreSalesDataResponse_Price& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCRequestStoreSalesDataResponse_Price* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.price_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_, &from._impl_.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesDataResponse.Price)
}

inline void CMsgGCRequestStoreSalesDataResponse_Price::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.price_){0u}
  };
}

CMsgGCRequestStoreSalesDataResponse_Price::~CMsgGCRequestStoreSalesDataResponse_Price() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesDataResponse.Price)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCRequestStoreSalesDataResponse_Price::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCRequestStoreSalesDataResponse_Price::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesDataResponse_Price::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesDataResponse.Price)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.price_) -
        reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.price_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesDataResponse_Price::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_price(&has_bits);
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCRequestStoreSalesDataResponse_Price::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesDataResponse.Price)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesDataResponse.Price)
  return target;
}

size_t CMsgGCRequestStoreSalesDataResponse_Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesDataResponse.Price)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional uint32 price = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_price());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRequestStoreSalesDataResponse_Price::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCRequestStoreSalesDataResponse_Price::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRequestStoreSalesDataResponse_Price::GetClassData() const { return &_class_data_; }


void CMsgGCRequestStoreSalesDataResponse_Price::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCRequestStoreSalesDataResponse_Price*>(&to_msg);
  auto& from = static_cast<const CMsgGCRequestStoreSalesDataResponse_Price&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesDataResponse.Price)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.price_ = from._impl_.price_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCRequestStoreSalesDataResponse_Price::CopyFrom(const CMsgGCRequestStoreSalesDataResponse_Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesDataResponse.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse_Price::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesDataResponse_Price::InternalSwap(CMsgGCRequestStoreSalesDataResponse_Price* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, _impl_.price_)
      + sizeof(CMsgGCRequestStoreSalesDataResponse_Price::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, _impl_.item_def_)>(
          reinterpret_cast<char*>(&_impl_.item_def_),
          reinterpret_cast<char*>(&other->_impl_.item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesDataResponse_Price::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[6]);
}

// ===================================================================

class CMsgGCRequestStoreSalesDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesDataResponse>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesDataResponse)
}
CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(const CMsgGCRequestStoreSalesDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCRequestStoreSalesDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sale_price_){from._impl_.sale_price_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.expiration_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expiration_time_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.expiration_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesDataResponse)
}

inline void CMsgGCRequestStoreSalesDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sale_price_){arena}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.expiration_time_){0u}
  };
}

CMsgGCRequestStoreSalesDataResponse::~CMsgGCRequestStoreSalesDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCRequestStoreSalesDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sale_price_.~RepeatedPtrField();
}

void CMsgGCRequestStoreSalesDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sale_price_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expiration_time_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.expiration_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sale_price(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_expiration_time(&has_bits);
          _impl_.expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCRequestStoreSalesDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sale_price_size()); i < n; i++) {
    const auto& repfield = this->_internal_sale_price(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // optional uint32 expiration_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesDataResponse)
  return target;
}

size_t CMsgGCRequestStoreSalesDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  total_size += 1UL * this->_internal_sale_price_size();
  for (const auto& msg : this->_impl_.sale_price_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 expiration_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiration_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRequestStoreSalesDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCRequestStoreSalesDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRequestStoreSalesDataResponse::GetClassData() const { return &_class_data_; }


void CMsgGCRequestStoreSalesDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCRequestStoreSalesDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCRequestStoreSalesDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sale_price_.MergeFrom(from._impl_.sale_price_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.expiration_time_ = from._impl_.expiration_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCRequestStoreSalesDataResponse::CopyFrom(const CMsgGCRequestStoreSalesDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesDataResponse::InternalSwap(CMsgGCRequestStoreSalesDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sale_price_.InternalSwap(&other->_impl_.sale_price_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, _impl_.expiration_time_)
      + sizeof(CMsgGCRequestStoreSalesDataResponse::_impl_.expiration_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[7]);
}

// ===================================================================

class CMsgGCRequestStoreSalesDataUpToDateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesDataUpToDateResponse>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesDataUpToDateResponse)
}
CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(const CMsgGCRequestStoreSalesDataUpToDateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCRequestStoreSalesDataUpToDateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.expiration_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expiration_time_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.expiration_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesDataUpToDateResponse)
}

inline void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.expiration_time_){0u}
  };
}

CMsgGCRequestStoreSalesDataUpToDateResponse::~CMsgGCRequestStoreSalesDataUpToDateResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesDataUpToDateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expiration_time_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.expiration_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesDataUpToDateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expiration_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_expiration_time(&has_bits);
          _impl_.expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCRequestStoreSalesDataUpToDateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 expiration_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesDataUpToDateResponse)
  return target;
}

size_t CMsgGCRequestStoreSalesDataUpToDateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 expiration_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiration_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRequestStoreSalesDataUpToDateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCRequestStoreSalesDataUpToDateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRequestStoreSalesDataUpToDateResponse::GetClassData() const { return &_class_data_; }


void CMsgGCRequestStoreSalesDataUpToDateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCRequestStoreSalesDataUpToDateResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCRequestStoreSalesDataUpToDateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.expiration_time_ = from._impl_.expiration_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::CopyFrom(const CMsgGCRequestStoreSalesDataUpToDateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataUpToDateResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::InternalSwap(CMsgGCRequestStoreSalesDataUpToDateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, _impl_.expiration_time_)
      + sizeof(CMsgGCRequestStoreSalesDataUpToDateResponse::_impl_.expiration_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesDataUpToDateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[8]);
}

// ===================================================================

class CMsgGCToGCPingRequest::_Internal {
 public:
};

CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPingRequest)
}
CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(const CMsgGCToGCPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToGCPingRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPingRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCPingRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[9]);
}

// ===================================================================

class CMsgGCToGCPingResponse::_Internal {
 public:
};

CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPingResponse)
}
CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(const CMsgGCToGCPingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToGCPingResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPingResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCPingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCPingResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[10]);
}

// ===================================================================

class CMsgGCToGCGetUserSessionServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetUserSessionServer>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserSessionServer)
}
CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(const CMsgGCToGCGetUserSessionServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGetUserSessionServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserSessionServer)
}

inline void CMsgGCToGCGetUserSessionServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgGCToGCGetUserSessionServer::~CMsgGCToGCGetUserSessionServer() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserSessionServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGetUserSessionServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCGetUserSessionServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGetUserSessionServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserSessionServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserSessionServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGetUserSessionServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserSessionServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserSessionServer)
  return target;
}

size_t CMsgGCToGCGetUserSessionServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserSessionServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGetUserSessionServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGetUserSessionServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGetUserSessionServer::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGetUserSessionServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGetUserSessionServer*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGetUserSessionServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserSessionServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGetUserSessionServer::CopyFrom(const CMsgGCToGCGetUserSessionServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserSessionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServer::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserSessionServer::InternalSwap(CMsgGCToGCGetUserSessionServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserSessionServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[11]);
}

// ===================================================================

class CMsgGCToGCGetUserSessionServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetUserSessionServerResponse>()._impl_._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserSessionServerResponse)
}
CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(const CMsgGCToGCGetUserSessionServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGetUserSessionServerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.is_online_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_steam_id_, &from._impl_.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_online_) -
    reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.is_online_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserSessionServerResponse)
}

inline void CMsgGCToGCGetUserSessionServerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.is_online_){false}
  };
}

CMsgGCToGCGetUserSessionServerResponse::~CMsgGCToGCGetUserSessionServerResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserSessionServerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGetUserSessionServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCGetUserSessionServerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGetUserSessionServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserSessionServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_online_) -
        reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.is_online_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserSessionServerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_online(&has_bits);
          _impl_.is_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGetUserSessionServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserSessionServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional bool is_online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserSessionServerResponse)
  return target;
}

size_t CMsgGCToGCGetUserSessionServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserSessionServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_online = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGetUserSessionServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGetUserSessionServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGetUserSessionServerResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGetUserSessionServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGetUserSessionServerResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGetUserSessionServerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserSessionServerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_online_ = from._impl_.is_online_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGetUserSessionServerResponse::CopyFrom(const CMsgGCToGCGetUserSessionServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserSessionServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServerResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserSessionServerResponse::InternalSwap(CMsgGCToGCGetUserSessionServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, _impl_.is_online_)
      + sizeof(CMsgGCToGCGetUserSessionServerResponse::_impl_.is_online_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, _impl_.server_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.server_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserSessionServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[12]);
}

// ===================================================================

class CMsgGCToGCGetUserServerMembers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetUserServerMembers>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserServerMembers)
}
CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(const CMsgGCToGCGetUserServerMembers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGetUserServerMembers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.max_spectators_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_spectators_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.max_spectators_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserServerMembers)
}

inline void CMsgGCToGCGetUserServerMembers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.max_spectators_){0u}
  };
}

CMsgGCToGCGetUserServerMembers::~CMsgGCToGCGetUserServerMembers() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserServerMembers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGetUserServerMembers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCGetUserServerMembers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGetUserServerMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserServerMembers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_spectators_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.max_spectators_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserServerMembers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_spectators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_spectators(&has_bits);
          _impl_.max_spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGetUserServerMembers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserServerMembers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 max_spectators = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_spectators(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserServerMembers)
  return target;
}

size_t CMsgGCToGCGetUserServerMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserServerMembers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 max_spectators = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_spectators());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGetUserServerMembers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGetUserServerMembers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGetUserServerMembers::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGetUserServerMembers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGetUserServerMembers*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGetUserServerMembers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserServerMembers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_spectators_ = from._impl_.max_spectators_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGetUserServerMembers::CopyFrom(const CMsgGCToGCGetUserServerMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserServerMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembers::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserServerMembers::InternalSwap(CMsgGCToGCGetUserServerMembers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, _impl_.max_spectators_)
      + sizeof(CMsgGCToGCGetUserServerMembers::_impl_.max_spectators_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserServerMembers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[13]);
}

// ===================================================================

class CMsgGCToGCGetUserServerMembersResponse::_Internal {
 public:
};

CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserServerMembersResponse)
}
CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(const CMsgGCToGCGetUserServerMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGetUserServerMembersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.member_account_id_){from._impl_.member_account_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserServerMembersResponse)
}

inline void CMsgGCToGCGetUserServerMembersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.member_account_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToGCGetUserServerMembersResponse::~CMsgGCToGCGetUserServerMembersResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserServerMembersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGetUserServerMembersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_account_id_.~RepeatedField();
}

void CMsgGCToGCGetUserServerMembersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGetUserServerMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserServerMembersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_account_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserServerMembersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 member_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_account_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_account_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGetUserServerMembersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserServerMembersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 member_account_id = 1;
  for (int i = 0, n = this->_internal_member_account_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_member_account_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserServerMembersResponse)
  return target;
}

size_t CMsgGCToGCGetUserServerMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserServerMembersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_account_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.member_account_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_member_account_id_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGetUserServerMembersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGetUserServerMembersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGetUserServerMembersResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGetUserServerMembersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGetUserServerMembersResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGetUserServerMembersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserServerMembersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_account_id_.MergeFrom(from._impl_.member_account_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGetUserServerMembersResponse::CopyFrom(const CMsgGCToGCGetUserServerMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserServerMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembersResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserServerMembersResponse::InternalSwap(CMsgGCToGCGetUserServerMembersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.member_account_id_.InternalSwap(&other->_impl_.member_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserServerMembersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[14]);
}

// ===================================================================

class CMsgLookupMultipleAccountNames::_Internal {
 public:
};

CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLookupMultipleAccountNames)
}
CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(const CMsgLookupMultipleAccountNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLookupMultipleAccountNames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountids_){from._impl_.accountids_}
    , /*decltype(_impl_._accountids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLookupMultipleAccountNames)
}

inline void CMsgLookupMultipleAccountNames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountids_){arena}
    , /*decltype(_impl_._accountids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgLookupMultipleAccountNames::~CMsgLookupMultipleAccountNames() {
  // @@protoc_insertion_point(destructor:CMsgLookupMultipleAccountNames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLookupMultipleAccountNames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accountids_.~RepeatedField();
}

void CMsgLookupMultipleAccountNames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLookupMultipleAccountNames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLookupMultipleAccountNames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLookupMultipleAccountNames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 accountids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_accountids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_accountids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLookupMultipleAccountNames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLookupMultipleAccountNames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 accountids = 1 [packed = true];
  {
    int byte_size = _impl_._accountids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_accountids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLookupMultipleAccountNames)
  return target;
}

size_t CMsgLookupMultipleAccountNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLookupMultipleAccountNames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 accountids = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.accountids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._accountids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLookupMultipleAccountNames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLookupMultipleAccountNames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLookupMultipleAccountNames::GetClassData() const { return &_class_data_; }


void CMsgLookupMultipleAccountNames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLookupMultipleAccountNames*>(&to_msg);
  auto& from = static_cast<const CMsgLookupMultipleAccountNames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLookupMultipleAccountNames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accountids_.MergeFrom(from._impl_.accountids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLookupMultipleAccountNames::CopyFrom(const CMsgLookupMultipleAccountNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLookupMultipleAccountNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNames::IsInitialized() const {
  return true;
}

void CMsgLookupMultipleAccountNames::InternalSwap(CMsgLookupMultipleAccountNames* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accountids_.InternalSwap(&other->_impl_.accountids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLookupMultipleAccountNames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[15]);
}

// ===================================================================

class CMsgLookupMultipleAccountNamesResponse_Account::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLookupMultipleAccountNamesResponse_Account>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLookupMultipleAccountNamesResponse.Account)
}
CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(const CMsgLookupMultipleAccountNamesResponse_Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLookupMultipleAccountNamesResponse_Account* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_){}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona()) {
    _this->_impl_.persona_.Set(from._internal_persona(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgLookupMultipleAccountNamesResponse.Account)
}

inline void CMsgLookupMultipleAccountNamesResponse_Account::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_){}
    , decltype(_impl_.accountid_){0u}
  };
  _impl_.persona_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgLookupMultipleAccountNamesResponse_Account::~CMsgLookupMultipleAccountNamesResponse_Account() {
  // @@protoc_insertion_point(destructor:CMsgLookupMultipleAccountNamesResponse.Account)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLookupMultipleAccountNamesResponse_Account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_.Destroy();
}

void CMsgLookupMultipleAccountNamesResponse_Account::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLookupMultipleAccountNamesResponse_Account::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLookupMultipleAccountNamesResponse.Account)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.persona_.ClearNonDefaultToEmpty();
  }
  _impl_.accountid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLookupMultipleAccountNamesResponse_Account::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgLookupMultipleAccountNamesResponse.Account.persona");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLookupMultipleAccountNamesResponse_Account::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLookupMultipleAccountNamesResponse.Account)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona().data(), static_cast<int>(this->_internal_persona().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLookupMultipleAccountNamesResponse.Account.persona");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLookupMultipleAccountNamesResponse.Account)
  return target;
}

size_t CMsgLookupMultipleAccountNamesResponse_Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLookupMultipleAccountNamesResponse.Account)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string persona = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLookupMultipleAccountNamesResponse_Account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLookupMultipleAccountNamesResponse_Account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLookupMultipleAccountNamesResponse_Account::GetClassData() const { return &_class_data_; }


void CMsgLookupMultipleAccountNamesResponse_Account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLookupMultipleAccountNamesResponse_Account*>(&to_msg);
  auto& from = static_cast<const CMsgLookupMultipleAccountNamesResponse_Account&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLookupMultipleAccountNamesResponse.Account)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona(from._internal_persona());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLookupMultipleAccountNamesResponse_Account::CopyFrom(const CMsgLookupMultipleAccountNamesResponse_Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLookupMultipleAccountNamesResponse.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse_Account::IsInitialized() const {
  return true;
}

void CMsgLookupMultipleAccountNamesResponse_Account::InternalSwap(CMsgLookupMultipleAccountNamesResponse_Account* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_, lhs_arena,
      &other->_impl_.persona_, rhs_arena
  );
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLookupMultipleAccountNamesResponse_Account::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[16]);
}

// ===================================================================

class CMsgLookupMultipleAccountNamesResponse::_Internal {
 public:
};

CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLookupMultipleAccountNamesResponse)
}
CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(const CMsgLookupMultipleAccountNamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLookupMultipleAccountNamesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLookupMultipleAccountNamesResponse)
}

inline void CMsgLookupMultipleAccountNamesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgLookupMultipleAccountNamesResponse::~CMsgLookupMultipleAccountNamesResponse() {
  // @@protoc_insertion_point(destructor:CMsgLookupMultipleAccountNamesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLookupMultipleAccountNamesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accounts_.~RepeatedPtrField();
}

void CMsgLookupMultipleAccountNamesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLookupMultipleAccountNamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLookupMultipleAccountNamesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLookupMultipleAccountNamesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLookupMultipleAccountNamesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLookupMultipleAccountNamesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLookupMultipleAccountNamesResponse)
  return target;
}

size_t CMsgLookupMultipleAccountNamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLookupMultipleAccountNamesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->_impl_.accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLookupMultipleAccountNamesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLookupMultipleAccountNamesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLookupMultipleAccountNamesResponse::GetClassData() const { return &_class_data_; }


void CMsgLookupMultipleAccountNamesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLookupMultipleAccountNamesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgLookupMultipleAccountNamesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLookupMultipleAccountNamesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLookupMultipleAccountNamesResponse::CopyFrom(const CMsgLookupMultipleAccountNamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLookupMultipleAccountNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse::IsInitialized() const {
  return true;
}

void CMsgLookupMultipleAccountNamesResponse::InternalSwap(CMsgLookupMultipleAccountNamesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLookupMultipleAccountNamesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[17]);
}

// ===================================================================

class CMsgRequestCrateItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateItems>()._impl_._has_bits_);
  static void set_has_crate_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestCrateItems::CMsgRequestCrateItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateItems)
}
CMsgRequestCrateItems::CMsgRequestCrateItems(const CMsgRequestCrateItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRequestCrateItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crate_item_def_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.crate_item_def_ = from._impl_.crate_item_def_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateItems)
}

inline void CMsgRequestCrateItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crate_item_def_){0u}
  };
}

CMsgRequestCrateItems::~CMsgRequestCrateItems() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRequestCrateItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRequestCrateItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRequestCrateItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crate_item_def_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 crate_item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_crate_item_def(&has_bits);
          _impl_.crate_item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRequestCrateItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 crate_item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_crate_item_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateItems)
  return target;
}

size_t CMsgRequestCrateItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 crate_item_def = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crate_item_def());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRequestCrateItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRequestCrateItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRequestCrateItems::GetClassData() const { return &_class_data_; }


void CMsgRequestCrateItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRequestCrateItems*>(&to_msg);
  auto& from = static_cast<const CMsgRequestCrateItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crate_item_def()) {
    _this->_internal_set_crate_item_def(from._internal_crate_item_def());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRequestCrateItems::CopyFrom(const CMsgRequestCrateItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateItems::IsInitialized() const {
  return true;
}

void CMsgRequestCrateItems::InternalSwap(CMsgRequestCrateItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.crate_item_def_, other->_impl_.crate_item_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[18]);
}

// ===================================================================

class CMsgRequestCrateItemsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateItemsResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateItemsResponse)
}
CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse(const CMsgRequestCrateItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRequestCrateItemsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_defs_){from._impl_.item_defs_}
    , decltype(_impl_.peek_item_defs_){from._impl_.peek_item_defs_}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateItemsResponse)
}

inline void CMsgRequestCrateItemsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_defs_){arena}
    , decltype(_impl_.peek_item_defs_){arena}
    , decltype(_impl_.response_){0u}
  };
}

CMsgRequestCrateItemsResponse::~CMsgRequestCrateItemsResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateItemsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRequestCrateItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_defs_.~RepeatedField();
  _impl_.peek_item_defs_.~RepeatedField();
}

void CMsgRequestCrateItemsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRequestCrateItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_defs_.Clear();
  _impl_.peek_item_defs_.Clear();
  _impl_.response_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateItemsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          _impl_.response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 item_defs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 peek_item_defs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_peek_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_peek_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRequestCrateItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // repeated uint32 item_defs = 2;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_defs(i), target);
  }

  // repeated uint32 peek_item_defs = 3;
  for (int i = 0, n = this->_internal_peek_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_peek_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateItemsResponse)
  return target;
}

size_t CMsgRequestCrateItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.item_defs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // repeated uint32 peek_item_defs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.peek_item_defs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_peek_item_defs_size());
    total_size += data_size;
  }

  // optional uint32 response = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRequestCrateItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRequestCrateItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRequestCrateItemsResponse::GetClassData() const { return &_class_data_; }


void CMsgRequestCrateItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRequestCrateItemsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgRequestCrateItemsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateItemsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_defs_.MergeFrom(from._impl_.item_defs_);
  _this->_impl_.peek_item_defs_.MergeFrom(from._impl_.peek_item_defs_);
  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRequestCrateItemsResponse::CopyFrom(const CMsgRequestCrateItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateItemsResponse::IsInitialized() const {
  return true;
}

void CMsgRequestCrateItemsResponse::InternalSwap(CMsgRequestCrateItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_defs_.InternalSwap(&other->_impl_.item_defs_);
  _impl_.peek_item_defs_.InternalSwap(&other->_impl_.peek_item_defs_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateItemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[19]);
}

// ===================================================================

class CMsgRequestCrateEscalationLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateEscalationLevel>()._impl_._has_bits_);
  static void set_has_crate_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestCrateEscalationLevel::CMsgRequestCrateEscalationLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateEscalationLevel)
}
CMsgRequestCrateEscalationLevel::CMsgRequestCrateEscalationLevel(const CMsgRequestCrateEscalationLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRequestCrateEscalationLevel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crate_item_def_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.crate_item_def_ = from._impl_.crate_item_def_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateEscalationLevel)
}

inline void CMsgRequestCrateEscalationLevel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crate_item_def_){0u}
  };
}

CMsgRequestCrateEscalationLevel::~CMsgRequestCrateEscalationLevel() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateEscalationLevel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRequestCrateEscalationLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRequestCrateEscalationLevel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRequestCrateEscalationLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateEscalationLevel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crate_item_def_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateEscalationLevel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 crate_item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_crate_item_def(&has_bits);
          _impl_.crate_item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRequestCrateEscalationLevel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateEscalationLevel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 crate_item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_crate_item_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateEscalationLevel)
  return target;
}

size_t CMsgRequestCrateEscalationLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateEscalationLevel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 crate_item_def = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crate_item_def());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRequestCrateEscalationLevel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRequestCrateEscalationLevel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRequestCrateEscalationLevel::GetClassData() const { return &_class_data_; }


void CMsgRequestCrateEscalationLevel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRequestCrateEscalationLevel*>(&to_msg);
  auto& from = static_cast<const CMsgRequestCrateEscalationLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateEscalationLevel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crate_item_def()) {
    _this->_internal_set_crate_item_def(from._internal_crate_item_def());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRequestCrateEscalationLevel::CopyFrom(const CMsgRequestCrateEscalationLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateEscalationLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateEscalationLevel::IsInitialized() const {
  return true;
}

void CMsgRequestCrateEscalationLevel::InternalSwap(CMsgRequestCrateEscalationLevel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.crate_item_def_, other->_impl_.crate_item_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateEscalationLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[20]);
}

// ===================================================================

class CMsgRequestCrateEscalationLevelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateEscalationLevelResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_escalation_level0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_escalation_level1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_escalation_level2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_escalation_level3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgRequestCrateEscalationLevelResponse::CMsgRequestCrateEscalationLevelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateEscalationLevelResponse)
}
CMsgRequestCrateEscalationLevelResponse::CMsgRequestCrateEscalationLevelResponse(const CMsgRequestCrateEscalationLevelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRequestCrateEscalationLevelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}
    , decltype(_impl_.escalation_level0_){}
    , decltype(_impl_.escalation_level1_){}
    , decltype(_impl_.escalation_level2_){}
    , decltype(_impl_.escalation_level3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.response_, &from._impl_.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.escalation_level3_) -
    reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.escalation_level3_));
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateEscalationLevelResponse)
}

inline void CMsgRequestCrateEscalationLevelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0u}
    , decltype(_impl_.escalation_level0_){0u}
    , decltype(_impl_.escalation_level1_){0u}
    , decltype(_impl_.escalation_level2_){0u}
    , decltype(_impl_.escalation_level3_){0u}
  };
}

CMsgRequestCrateEscalationLevelResponse::~CMsgRequestCrateEscalationLevelResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateEscalationLevelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRequestCrateEscalationLevelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRequestCrateEscalationLevelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRequestCrateEscalationLevelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateEscalationLevelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.escalation_level3_) -
        reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.escalation_level3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateEscalationLevelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          _impl_.response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 escalation_level0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_escalation_level0(&has_bits);
          _impl_.escalation_level0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 escalation_level1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_escalation_level1(&has_bits);
          _impl_.escalation_level1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 escalation_level2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_escalation_level2(&has_bits);
          _impl_.escalation_level2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 escalation_level3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_escalation_level3(&has_bits);
          _impl_.escalation_level3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRequestCrateEscalationLevelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateEscalationLevelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // optional uint32 escalation_level0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_escalation_level0(), target);
  }

  // optional uint32 escalation_level1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_escalation_level1(), target);
  }

  // optional uint32 escalation_level2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_escalation_level2(), target);
  }

  // optional uint32 escalation_level3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_escalation_level3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateEscalationLevelResponse)
  return target;
}

size_t CMsgRequestCrateEscalationLevelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateEscalationLevelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response());
    }

    // optional uint32 escalation_level0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_escalation_level0());
    }

    // optional uint32 escalation_level1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_escalation_level1());
    }

    // optional uint32 escalation_level2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_escalation_level2());
    }

    // optional uint32 escalation_level3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_escalation_level3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRequestCrateEscalationLevelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRequestCrateEscalationLevelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRequestCrateEscalationLevelResponse::GetClassData() const { return &_class_data_; }


void CMsgRequestCrateEscalationLevelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRequestCrateEscalationLevelResponse*>(&to_msg);
  auto& from = static_cast<const CMsgRequestCrateEscalationLevelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateEscalationLevelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.escalation_level0_ = from._impl_.escalation_level0_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.escalation_level1_ = from._impl_.escalation_level1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.escalation_level2_ = from._impl_.escalation_level2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.escalation_level3_ = from._impl_.escalation_level3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRequestCrateEscalationLevelResponse::CopyFrom(const CMsgRequestCrateEscalationLevelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateEscalationLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateEscalationLevelResponse::IsInitialized() const {
  return true;
}

void CMsgRequestCrateEscalationLevelResponse::InternalSwap(CMsgRequestCrateEscalationLevelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRequestCrateEscalationLevelResponse, _impl_.escalation_level3_)
      + sizeof(CMsgRequestCrateEscalationLevelResponse::_impl_.escalation_level3_)
      - PROTOBUF_FIELD_OFFSET(CMsgRequestCrateEscalationLevelResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateEscalationLevelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[21]);
}

// ===================================================================

class CMsgGCToGCCanUseDropRateBonus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCCanUseDropRateBonus>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_drop_rate_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_booster_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exclusive_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allow_equal_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCCanUseDropRateBonus)
}
CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus(const CMsgGCToGCCanUseDropRateBonus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCCanUseDropRateBonus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.drop_rate_bonus_){}
    , decltype(_impl_.booster_type_){}
    , decltype(_impl_.exclusive_item_def_){}
    , decltype(_impl_.allow_equal_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allow_equal_rate_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.allow_equal_rate_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCCanUseDropRateBonus)
}

inline void CMsgGCToGCCanUseDropRateBonus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.drop_rate_bonus_){0}
    , decltype(_impl_.booster_type_){0u}
    , decltype(_impl_.exclusive_item_def_){0u}
    , decltype(_impl_.allow_equal_rate_){false}
  };
}

CMsgGCToGCCanUseDropRateBonus::~CMsgGCToGCCanUseDropRateBonus() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCCanUseDropRateBonus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCCanUseDropRateBonus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCCanUseDropRateBonus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCCanUseDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCCanUseDropRateBonus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.allow_equal_rate_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.allow_equal_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCCanUseDropRateBonus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float drop_rate_bonus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_drop_rate_bonus(&has_bits);
          _impl_.drop_rate_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 booster_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_booster_type(&has_bits);
          _impl_.booster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 exclusive_item_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_exclusive_item_def(&has_bits);
          _impl_.exclusive_item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_equal_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_allow_equal_rate(&has_bits);
          _impl_.allow_equal_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCCanUseDropRateBonus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCCanUseDropRateBonus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional float drop_rate_bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_drop_rate_bonus(), target);
  }

  // optional uint32 booster_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_booster_type(), target);
  }

  // optional uint32 exclusive_item_def = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_exclusive_item_def(), target);
  }

  // optional bool allow_equal_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_equal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCCanUseDropRateBonus)
  return target;
}

size_t CMsgGCToGCCanUseDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCCanUseDropRateBonus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional float drop_rate_bonus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 booster_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_booster_type());
    }

    // optional uint32 exclusive_item_def = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exclusive_item_def());
    }

    // optional bool allow_equal_rate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCCanUseDropRateBonus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCCanUseDropRateBonus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCCanUseDropRateBonus::GetClassData() const { return &_class_data_; }


void CMsgGCToGCCanUseDropRateBonus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCCanUseDropRateBonus*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCCanUseDropRateBonus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCCanUseDropRateBonus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.drop_rate_bonus_ = from._impl_.drop_rate_bonus_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.booster_type_ = from._impl_.booster_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.exclusive_item_def_ = from._impl_.exclusive_item_def_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.allow_equal_rate_ = from._impl_.allow_equal_rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCCanUseDropRateBonus::CopyFrom(const CMsgGCToGCCanUseDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCCanUseDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCanUseDropRateBonus::IsInitialized() const {
  return true;
}

void CMsgGCToGCCanUseDropRateBonus::InternalSwap(CMsgGCToGCCanUseDropRateBonus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, _impl_.allow_equal_rate_)
      + sizeof(CMsgGCToGCCanUseDropRateBonus::_impl_.allow_equal_rate_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCCanUseDropRateBonus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[22]);
}

// ===================================================================

class CMsgSQLAddDropRateBonus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSQLAddDropRateBonus>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drop_rate_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_booster_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seconds_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSQLAddDropRateBonus)
}
CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus(const CMsgSQLAddDropRateBonus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSQLAddDropRateBonus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.drop_rate_bonus_){}
    , decltype(_impl_.booster_type_){}
    , decltype(_impl_.seconds_duration_){}
    , decltype(_impl_.end_time_stamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_stamp_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.end_time_stamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSQLAddDropRateBonus)
}

inline void CMsgSQLAddDropRateBonus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.drop_rate_bonus_){0}
    , decltype(_impl_.booster_type_){0u}
    , decltype(_impl_.seconds_duration_){0u}
    , decltype(_impl_.end_time_stamp_){0u}
  };
}

CMsgSQLAddDropRateBonus::~CMsgSQLAddDropRateBonus() {
  // @@protoc_insertion_point(destructor:CMsgSQLAddDropRateBonus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSQLAddDropRateBonus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSQLAddDropRateBonus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSQLAddDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSQLAddDropRateBonus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_stamp_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.end_time_stamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSQLAddDropRateBonus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_def = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float drop_rate_bonus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_drop_rate_bonus(&has_bits);
          _impl_.drop_rate_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 booster_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_booster_type(&has_bits);
          _impl_.booster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_seconds_duration(&has_bits);
          _impl_.seconds_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_time_stamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_end_time_stamp(&has_bits);
          _impl_.end_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSQLAddDropRateBonus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSQLAddDropRateBonus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_def(), target);
  }

  // optional float drop_rate_bonus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_drop_rate_bonus(), target);
  }

  // optional uint32 booster_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_booster_type(), target);
  }

  // optional uint32 seconds_duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_seconds_duration(), target);
  }

  // optional uint32 end_time_stamp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_end_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSQLAddDropRateBonus)
  return target;
}

size_t CMsgSQLAddDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSQLAddDropRateBonus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 item_def = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional float drop_rate_bonus = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 booster_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_booster_type());
    }

    // optional uint32 seconds_duration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_duration());
    }

    // optional uint32 end_time_stamp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_time_stamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSQLAddDropRateBonus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSQLAddDropRateBonus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSQLAddDropRateBonus::GetClassData() const { return &_class_data_; }


void CMsgSQLAddDropRateBonus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSQLAddDropRateBonus*>(&to_msg);
  auto& from = static_cast<const CMsgSQLAddDropRateBonus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSQLAddDropRateBonus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.drop_rate_bonus_ = from._impl_.drop_rate_bonus_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.booster_type_ = from._impl_.booster_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seconds_duration_ = from._impl_.seconds_duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.end_time_stamp_ = from._impl_.end_time_stamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSQLAddDropRateBonus::CopyFrom(const CMsgSQLAddDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSQLAddDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSQLAddDropRateBonus::IsInitialized() const {
  return true;
}

void CMsgSQLAddDropRateBonus::InternalSwap(CMsgSQLAddDropRateBonus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSQLAddDropRateBonus, _impl_.end_time_stamp_)
      + sizeof(CMsgSQLAddDropRateBonus::_impl_.end_time_stamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSQLAddDropRateBonus, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSQLAddDropRateBonus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[23]);
}

// ===================================================================

class CMsgSQLUpgradeBattleBooster::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSQLUpgradeBattleBooster>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_booster_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSQLUpgradeBattleBooster::CMsgSQLUpgradeBattleBooster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSQLUpgradeBattleBooster)
}
CMsgSQLUpgradeBattleBooster::CMsgSQLUpgradeBattleBooster(const CMsgSQLUpgradeBattleBooster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSQLUpgradeBattleBooster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.bonus_to_add_){}
    , decltype(_impl_.booster_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.booster_type_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.booster_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSQLUpgradeBattleBooster)
}

inline void CMsgSQLUpgradeBattleBooster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.bonus_to_add_){0}
    , decltype(_impl_.booster_type_){0u}
  };
}

CMsgSQLUpgradeBattleBooster::~CMsgSQLUpgradeBattleBooster() {
  // @@protoc_insertion_point(destructor:CMsgSQLUpgradeBattleBooster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSQLUpgradeBattleBooster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSQLUpgradeBattleBooster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSQLUpgradeBattleBooster::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSQLUpgradeBattleBooster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.booster_type_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.booster_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSQLUpgradeBattleBooster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float bonus_to_add = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_bonus_to_add(&has_bits);
          _impl_.bonus_to_add_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 booster_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_booster_type(&has_bits);
          _impl_.booster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSQLUpgradeBattleBooster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSQLUpgradeBattleBooster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 item_def = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def(), target);
  }

  // optional float bonus_to_add = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_bonus_to_add(), target);
  }

  // optional uint32 booster_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_booster_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSQLUpgradeBattleBooster)
  return target;
}

size_t CMsgSQLUpgradeBattleBooster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSQLUpgradeBattleBooster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 item_def = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional float bonus_to_add = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 booster_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_booster_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSQLUpgradeBattleBooster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSQLUpgradeBattleBooster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSQLUpgradeBattleBooster::GetClassData() const { return &_class_data_; }


void CMsgSQLUpgradeBattleBooster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSQLUpgradeBattleBooster*>(&to_msg);
  auto& from = static_cast<const CMsgSQLUpgradeBattleBooster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSQLUpgradeBattleBooster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bonus_to_add_ = from._impl_.bonus_to_add_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.booster_type_ = from._impl_.booster_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSQLUpgradeBattleBooster::CopyFrom(const CMsgSQLUpgradeBattleBooster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSQLUpgradeBattleBooster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSQLUpgradeBattleBooster::IsInitialized() const {
  return true;
}

void CMsgSQLUpgradeBattleBooster::InternalSwap(CMsgSQLUpgradeBattleBooster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSQLUpgradeBattleBooster, _impl_.booster_type_)
      + sizeof(CMsgSQLUpgradeBattleBooster::_impl_.booster_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSQLUpgradeBattleBooster, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSQLUpgradeBattleBooster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[24]);
}

// ===================================================================

class CMsgGCToGCRefreshSOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCRefreshSOCache>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCRefreshSOCache)
}
CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache(const CMsgGCToGCRefreshSOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCRefreshSOCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.reload_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reload_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.reload_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCRefreshSOCache)
}

inline void CMsgGCToGCRefreshSOCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.reload_){false}
  };
}

CMsgGCToGCRefreshSOCache::~CMsgGCToGCRefreshSOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCRefreshSOCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCRefreshSOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCRefreshSOCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCRefreshSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCRefreshSOCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reload_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.reload_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCRefreshSOCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reload(&has_bits);
          _impl_.reload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCRefreshSOCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCRefreshSOCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool reload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_reload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCRefreshSOCache)
  return target;
}

size_t CMsgGCToGCRefreshSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCRefreshSOCache)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool reload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCRefreshSOCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCRefreshSOCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCRefreshSOCache::GetClassData() const { return &_class_data_; }


void CMsgGCToGCRefreshSOCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCRefreshSOCache*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCRefreshSOCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCRefreshSOCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reload_ = from._impl_.reload_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCRefreshSOCache::CopyFrom(const CMsgGCToGCRefreshSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCRefreshSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCRefreshSOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCRefreshSOCache::InternalSwap(CMsgGCToGCRefreshSOCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, _impl_.reload_)
      + sizeof(CMsgGCToGCRefreshSOCache::_impl_.reload_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCRefreshSOCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[25]);
}

// ===================================================================

class CMsgGCToGCAddSubscriptionTime::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCAddSubscriptionTime>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_additional_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCAddSubscriptionTime::CMsgGCToGCAddSubscriptionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCAddSubscriptionTime)
}
CMsgGCToGCAddSubscriptionTime::CMsgGCToGCAddSubscriptionTime(const CMsgGCToGCAddSubscriptionTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCAddSubscriptionTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matching_subscription_def_indexes_){from._impl_.matching_subscription_def_indexes_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.additional_seconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.additional_seconds_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.additional_seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCAddSubscriptionTime)
}

inline void CMsgGCToGCAddSubscriptionTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matching_subscription_def_indexes_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.additional_seconds_){0u}
  };
}

CMsgGCToGCAddSubscriptionTime::~CMsgGCToGCAddSubscriptionTime() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCAddSubscriptionTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCAddSubscriptionTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matching_subscription_def_indexes_.~RepeatedField();
}

void CMsgGCToGCAddSubscriptionTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCAddSubscriptionTime::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCAddSubscriptionTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matching_subscription_def_indexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.additional_seconds_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.additional_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCAddSubscriptionTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 matching_subscription_def_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matching_subscription_def_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_matching_subscription_def_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 additional_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_additional_seconds(&has_bits);
          _impl_.additional_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCAddSubscriptionTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCAddSubscriptionTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 matching_subscription_def_indexes = 2;
  for (int i = 0, n = this->_internal_matching_subscription_def_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matching_subscription_def_indexes(i), target);
  }

  // optional uint32 additional_seconds = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_additional_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCAddSubscriptionTime)
  return target;
}

size_t CMsgGCToGCAddSubscriptionTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCAddSubscriptionTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 matching_subscription_def_indexes = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.matching_subscription_def_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_matching_subscription_def_indexes_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 additional_seconds = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_additional_seconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCAddSubscriptionTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCAddSubscriptionTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCAddSubscriptionTime::GetClassData() const { return &_class_data_; }


void CMsgGCToGCAddSubscriptionTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCAddSubscriptionTime*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCAddSubscriptionTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCAddSubscriptionTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matching_subscription_def_indexes_.MergeFrom(from._impl_.matching_subscription_def_indexes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.additional_seconds_ = from._impl_.additional_seconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCAddSubscriptionTime::CopyFrom(const CMsgGCToGCAddSubscriptionTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCAddSubscriptionTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCAddSubscriptionTime::IsInitialized() const {
  return true;
}

void CMsgGCToGCAddSubscriptionTime::InternalSwap(CMsgGCToGCAddSubscriptionTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.matching_subscription_def_indexes_.InternalSwap(&other->_impl_.matching_subscription_def_indexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCAddSubscriptionTime, _impl_.additional_seconds_)
      + sizeof(CMsgGCToGCAddSubscriptionTime::_impl_.additional_seconds_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCAddSubscriptionTime, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCAddSubscriptionTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[26]);
}

// ===================================================================

class CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
}
CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute(const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_string_){}
    , decltype(_impl_.value_uint32_){}
    , decltype(_impl_.value_float_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_string()) {
    _this->_impl_.value_string_.Set(from._internal_value_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_uint32_, &from._impl_.value_uint32_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_float_) -
    reinterpret_cast<char*>(&_impl_.value_uint32_)) + sizeof(_impl_.value_float_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
}

inline void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_string_){}
    , decltype(_impl_.value_uint32_){0u}
    , decltype(_impl_.value_float_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::~CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_string_.Destroy();
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.value_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_float_) -
        reinterpret_cast<char*>(&_impl_.value_uint32_)) + sizeof(_impl_.value_float_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value_uint32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value_uint32(&has_bits);
          _impl_.value_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float value_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_value_float(&has_bits);
          _impl_.value_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.value_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 value_uint32 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value_uint32(), target);
  }

  // optional float value_float = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_value_float(), target);
  }

  // optional string value_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_string().data(), static_cast<int>(this->_internal_value_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.value_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value_string = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_string());
    }

    // optional uint32 value_uint32 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value_uint32());
    }

    // optional float value_float = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value_string(from._internal_value_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_uint32_ = from._impl_.value_uint32_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_float_ = from._impl_.value_float_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CopyFrom(const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::InternalSwap(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_string_, lhs_arena,
      &other->_impl_.value_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _impl_.value_float_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_impl_.value_float_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _impl_.value_uint32_)>(
          reinterpret_cast<char*>(&_impl_.value_uint32_),
          reinterpret_cast<char*>(&other->_impl_.value_uint32_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[27]);
}

// ===================================================================

class CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry>()._impl_._has_bits_);
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
}
CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry(const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_account_id_){}
    , decltype(_impl_.audit_action_){}
    , decltype(_impl_.audit_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.owner_account_id_, &from._impl_.owner_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.audit_data_) -
    reinterpret_cast<char*>(&_impl_.owner_account_id_)) + sizeof(_impl_.audit_data_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
}

inline void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_account_id_){0u}
    , decltype(_impl_.audit_action_){0u}
    , decltype(_impl_.audit_data_){uint64_t{0u}}
  };
}

CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::~CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.owner_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.audit_data_) -
        reinterpret_cast<char*>(&_impl_.owner_account_id_)) + sizeof(_impl_.audit_data_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_account_id(&has_bits);
          _impl_.owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audit_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_audit_action(&has_bits);
          _impl_.audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 audit_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_audit_data(&has_bits);
          _impl_.audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_account_id(), target);
  }

  // optional uint32 audit_action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_audit_action(), target);
  }

  // optional uint64 audit_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_audit_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 owner_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_account_id());
    }

    // optional uint32 audit_action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_audit_action());
    }

    // optional uint64 audit_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_audit_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.owner_account_id_ = from._impl_.owner_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.audit_action_ = from._impl_.audit_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.audit_data_ = from._impl_.audit_data_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CopyFrom(const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::InternalSwap(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _impl_.audit_data_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_impl_.audit_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _impl_.owner_account_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_account_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[28]);
}

// ===================================================================

class CMsgGCToGCGrantAccountRolledItems_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems_Item>()._impl_._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inventory_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCToGCGrantAccountRolledItems_Item::CMsgGCToGCGrantAccountRolledItems_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems.Item)
}
CMsgGCToGCGrantAccountRolledItems_Item::CMsgGCToGCGrantAccountRolledItems_Item(const CMsgGCToGCGrantAccountRolledItems_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGrantAccountRolledItems_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loot_lists_){from._impl_.loot_lists_}
    , decltype(_impl_.dynamic_attributes_){from._impl_.dynamic_attributes_}
    , decltype(_impl_.additional_audit_entries_){from._impl_.additional_audit_entries_}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.ignore_limit_){}
    , decltype(_impl_.origin_){}
    , decltype(_impl_.inventory_token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_, &from._impl_.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inventory_token_) -
    reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.inventory_token_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems.Item)
}

inline void CMsgGCToGCGrantAccountRolledItems_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loot_lists_){arena}
    , decltype(_impl_.dynamic_attributes_){arena}
    , decltype(_impl_.additional_audit_entries_){arena}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.ignore_limit_){false}
    , decltype(_impl_.origin_){0u}
    , decltype(_impl_.inventory_token_){0u}
  };
}

CMsgGCToGCGrantAccountRolledItems_Item::~CMsgGCToGCGrantAccountRolledItems_Item() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGrantAccountRolledItems_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loot_lists_.~RepeatedPtrField();
  _impl_.dynamic_attributes_.~RepeatedPtrField();
  _impl_.additional_audit_entries_.~RepeatedPtrField();
}

void CMsgGCToGCGrantAccountRolledItems_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loot_lists_.Clear();
  _impl_.dynamic_attributes_.Clear();
  _impl_.additional_audit_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inventory_token_) -
        reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.inventory_token_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string loot_lists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loot_lists();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgGCToGCGrantAccountRolledItems.Item.loot_lists");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ignore_limit(&has_bits);
          _impl_.ignore_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_origin(&has_bits);
          _impl_.origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dynamic_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_audit_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inventory_token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_inventory_token(&has_bits);
          _impl_.inventory_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGrantAccountRolledItems_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // repeated string loot_lists = 2;
  for (int i = 0, n = this->_internal_loot_lists_size(); i < n; i++) {
    const auto& s = this->_internal_loot_lists(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCGrantAccountRolledItems.Item.loot_lists");
    target = stream->WriteString(2, s, target);
  }

  // optional bool ignore_limit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ignore_limit(), target);
  }

  // optional uint32 origin = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_origin(), target);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dynamic_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_dynamic_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_audit_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_audit_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 inventory_token = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_inventory_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems.Item)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string loot_lists = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.loot_lists_.size());
  for (int i = 0, n = _impl_.loot_lists_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.loot_lists_.Get(i));
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
  total_size += 1UL * this->_internal_dynamic_attributes_size();
  for (const auto& msg : this->_impl_.dynamic_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
  total_size += 1UL * this->_internal_additional_audit_entries_size();
  for (const auto& msg : this->_impl_.additional_audit_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional bool ignore_limit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 origin = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

    // optional uint32 inventory_token = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory_token());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGrantAccountRolledItems_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGrantAccountRolledItems_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGrantAccountRolledItems_Item::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGrantAccountRolledItems_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGrantAccountRolledItems_Item*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGrantAccountRolledItems_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.loot_lists_.MergeFrom(from._impl_.loot_lists_);
  _this->_impl_.dynamic_attributes_.MergeFrom(from._impl_.dynamic_attributes_);
  _this->_impl_.additional_audit_entries_.MergeFrom(from._impl_.additional_audit_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ignore_limit_ = from._impl_.ignore_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.origin_ = from._impl_.origin_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.inventory_token_ = from._impl_.inventory_token_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGrantAccountRolledItems_Item::CopyFrom(const CMsgGCToGCGrantAccountRolledItems_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems_Item::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems_Item::InternalSwap(CMsgGCToGCGrantAccountRolledItems_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.loot_lists_.InternalSwap(&other->_impl_.loot_lists_);
  _impl_.dynamic_attributes_.InternalSwap(&other->_impl_.dynamic_attributes_);
  _impl_.additional_audit_entries_.InternalSwap(&other->_impl_.additional_audit_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item, _impl_.inventory_token_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems_Item::_impl_.inventory_token_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item, _impl_.item_def_)>(
          reinterpret_cast<char*>(&_impl_.item_def_),
          reinterpret_cast<char*>(&other->_impl_.item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[29]);
}

// ===================================================================

class CMsgGCToGCGrantAccountRolledItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCGrantAccountRolledItems::CMsgGCToGCGrantAccountRolledItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems)
}
CMsgGCToGCGrantAccountRolledItems::CMsgGCToGCGrantAccountRolledItems(const CMsgGCToGCGrantAccountRolledItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGrantAccountRolledItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.audit_action_){}
    , decltype(_impl_.audit_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.audit_data_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.audit_data_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems)
}

inline void CMsgGCToGCGrantAccountRolledItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.audit_action_){0u}
    , decltype(_impl_.audit_data_){uint64_t{0u}}
  };
}

CMsgGCToGCGrantAccountRolledItems::~CMsgGCToGCGrantAccountRolledItems() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGrantAccountRolledItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void CMsgGCToGCGrantAccountRolledItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.audit_data_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.audit_data_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCGrantAccountRolledItems.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audit_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_audit_action(&has_bits);
          _impl_.audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 audit_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_audit_data(&has_bits);
          _impl_.audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGrantAccountRolledItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 audit_action = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_audit_action(), target);
  }

  // optional uint64 audit_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_audit_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 audit_action = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_audit_action());
    }

    // optional uint64 audit_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_audit_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGrantAccountRolledItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGrantAccountRolledItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGrantAccountRolledItems::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGrantAccountRolledItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGrantAccountRolledItems*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGrantAccountRolledItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.audit_action_ = from._impl_.audit_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.audit_data_ = from._impl_.audit_data_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGrantAccountRolledItems::CopyFrom(const CMsgGCToGCGrantAccountRolledItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems::InternalSwap(CMsgGCToGCGrantAccountRolledItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems, _impl_.audit_data_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems::_impl_.audit_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[30]);
}

// ===================================================================

class CMsgGCToGCBetaDeleteItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBetaDeleteItems>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBetaDeleteItems::CMsgGCToGCBetaDeleteItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBetaDeleteItems)
}
CMsgGCToGCBetaDeleteItems::CMsgGCToGCBetaDeleteItems(const CMsgGCToGCBetaDeleteItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCBetaDeleteItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , decltype(_impl_.item_defs_){from._impl_.item_defs_}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBetaDeleteItems)
}

inline void CMsgGCToGCBetaDeleteItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){arena}
    , decltype(_impl_.item_defs_){arena}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgGCToGCBetaDeleteItems::~CMsgGCToGCBetaDeleteItems() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBetaDeleteItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCBetaDeleteItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
  _impl_.item_defs_.~RepeatedField();
}

void CMsgGCToGCBetaDeleteItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCBetaDeleteItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBetaDeleteItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  _impl_.item_defs_.Clear();
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBetaDeleteItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 item_defs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCBetaDeleteItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBetaDeleteItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBetaDeleteItems)
  return target;
}

size_t CMsgGCToGCBetaDeleteItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBetaDeleteItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // repeated uint32 item_defs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.item_defs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCBetaDeleteItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCBetaDeleteItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCBetaDeleteItems::GetClassData() const { return &_class_data_; }


void CMsgGCToGCBetaDeleteItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCBetaDeleteItems*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCBetaDeleteItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBetaDeleteItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  _this->_impl_.item_defs_.MergeFrom(from._impl_.item_defs_);
  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCBetaDeleteItems::CopyFrom(const CMsgGCToGCBetaDeleteItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBetaDeleteItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBetaDeleteItems::IsInitialized() const {
  return true;
}

void CMsgGCToGCBetaDeleteItems::InternalSwap(CMsgGCToGCBetaDeleteItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  _impl_.item_defs_.InternalSwap(&other->_impl_.item_defs_);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBetaDeleteItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[31]);
}

// ===================================================================

class CMsgGCToGCGrantSelfMadeItemToAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantSelfMadeItemToAccount>()._impl_._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantSelfMadeItemToAccount)
}
CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount(const CMsgGCToGCGrantSelfMadeItemToAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGrantSelfMadeItemToAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_index_){}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_index_, &from._impl_.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accountid_) -
    reinterpret_cast<char*>(&_impl_.item_def_index_)) + sizeof(_impl_.accountid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantSelfMadeItemToAccount)
}

inline void CMsgGCToGCGrantSelfMadeItemToAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_index_){0u}
    , decltype(_impl_.accountid_){0u}
  };
}

CMsgGCToGCGrantSelfMadeItemToAccount::~CMsgGCToGCGrantSelfMadeItemToAccount() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantSelfMadeItemToAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGrantSelfMadeItemToAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accountid_) -
        reinterpret_cast<char*>(&_impl_.item_def_index_)) + sizeof(_impl_.accountid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantSelfMadeItemToAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def_index(&has_bits);
          _impl_.item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGrantSelfMadeItemToAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_index(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantSelfMadeItemToAccount)
  return target;
}

size_t CMsgGCToGCGrantSelfMadeItemToAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGrantSelfMadeItemToAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGrantSelfMadeItemToAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGrantSelfMadeItemToAccount::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGrantSelfMadeItemToAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGrantSelfMadeItemToAccount*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGrantSelfMadeItemToAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_index_ = from._impl_.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::CopyFrom(const CMsgGCToGCGrantSelfMadeItemToAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantSelfMadeItemToAccount::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantSelfMadeItemToAccount::InternalSwap(CMsgGCToGCGrantSelfMadeItemToAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, _impl_.accountid_)
      + sizeof(CMsgGCToGCGrantSelfMadeItemToAccount::_impl_.accountid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, _impl_.item_def_index_)>(
          reinterpret_cast<char*>(&_impl_.item_def_index_),
          reinterpret_cast<char*>(&other->_impl_.item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantSelfMadeItemToAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[32]);
}

// ===================================================================

class CMsgUseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUseItem>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duel__class_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initiator_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itempack__ack_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgUseItem::CMsgUseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgUseItem)
}
CMsgUseItem::CMsgUseItem(const CMsgUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgUseItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gift__potential_targets_){from._impl_.gift__potential_targets_}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.target_steam_id_){}
    , decltype(_impl_.initiator_steam_id_){}
    , decltype(_impl_.duel__class_lock_){}
    , decltype(_impl_.itempack__ack_immediately_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itempack__ack_immediately_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.itempack__ack_immediately_));
  // @@protoc_insertion_point(copy_constructor:CMsgUseItem)
}

inline void CMsgUseItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gift__potential_targets_){arena}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.target_steam_id_){uint64_t{0u}}
    , decltype(_impl_.initiator_steam_id_){uint64_t{0u}}
    , decltype(_impl_.duel__class_lock_){0u}
    , decltype(_impl_.itempack__ack_immediately_){false}
  };
}

CMsgUseItem::~CMsgUseItem() {
  // @@protoc_insertion_point(destructor:CMsgUseItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgUseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gift__potential_targets_.~RepeatedField();
}

void CMsgUseItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUseItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gift__potential_targets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.itempack__ack_immediately_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.itempack__ack_immediately_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUseItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 target_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_target_steam_id(&has_bits);
          _impl_.target_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 gift__potential_targets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gift__potential_targets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gift__potential_targets(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duel__class_lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_duel__class_lock(&has_bits);
          _impl_.duel__class_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 initiator_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_initiator_steam_id(&has_bits);
          _impl_.initiator_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool itempack__ack_immediately = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_itempack__ack_immediately(&has_bits);
          _impl_.itempack__ack_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgUseItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUseItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional fixed64 target_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_target_steam_id(), target);
  }

  // repeated uint32 gift__potential_targets = 3;
  for (int i = 0, n = this->_internal_gift__potential_targets_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gift__potential_targets(i), target);
  }

  // optional uint32 duel__class_lock = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duel__class_lock(), target);
  }

  // optional uint64 initiator_steam_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_initiator_steam_id(), target);
  }

  // optional bool itempack__ack_immediately = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_itempack__ack_immediately(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUseItem)
  return target;
}

size_t CMsgUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUseItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 gift__potential_targets = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.gift__potential_targets_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_gift__potential_targets_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional fixed64 target_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 initiator_steam_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_initiator_steam_id());
    }

    // optional uint32 duel__class_lock = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duel__class_lock());
    }

    // optional bool itempack__ack_immediately = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgUseItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgUseItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgUseItem::GetClassData() const { return &_class_data_; }


void CMsgUseItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgUseItem*>(&to_msg);
  auto& from = static_cast<const CMsgUseItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgUseItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gift__potential_targets_.MergeFrom(from._impl_.gift__potential_targets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_steam_id_ = from._impl_.target_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.initiator_steam_id_ = from._impl_.initiator_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duel__class_lock_ = from._impl_.duel__class_lock_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.itempack__ack_immediately_ = from._impl_.itempack__ack_immediately_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgUseItem::CopyFrom(const CMsgUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUseItem::IsInitialized() const {
  return true;
}

void CMsgUseItem::InternalSwap(CMsgUseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gift__potential_targets_.InternalSwap(&other->_impl_.gift__potential_targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgUseItem, _impl_.itempack__ack_immediately_)
      + sizeof(CMsgUseItem::_impl_.itempack__ack_immediately_)
      - PROTOBUF_FIELD_OFFSET(CMsgUseItem, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUseItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[33]);
}

// ===================================================================

class CMsgServerUseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerUseItem>()._impl_._has_bits_);
  static void set_has_initiator_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgUseItem& use_item_msg(const CMsgServerUseItem* msg);
  static void set_has_use_item_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgUseItem&
CMsgServerUseItem::_Internal::use_item_msg(const CMsgServerUseItem* msg) {
  return *msg->_impl_.use_item_msg_;
}
CMsgServerUseItem::CMsgServerUseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerUseItem)
}
CMsgServerUseItem::CMsgServerUseItem(const CMsgServerUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerUseItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.use_item_msg_){nullptr}
    , decltype(_impl_.initiator_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_use_item_msg()) {
    _this->_impl_.use_item_msg_ = new ::CMsgUseItem(*from._impl_.use_item_msg_);
  }
  _this->_impl_.initiator_account_id_ = from._impl_.initiator_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerUseItem)
}

inline void CMsgServerUseItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.use_item_msg_){nullptr}
    , decltype(_impl_.initiator_account_id_){0u}
  };
}

CMsgServerUseItem::~CMsgServerUseItem() {
  // @@protoc_insertion_point(destructor:CMsgServerUseItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerUseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.use_item_msg_;
}

void CMsgServerUseItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerUseItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.use_item_msg_ != nullptr);
    _impl_.use_item_msg_->Clear();
  }
  _impl_.initiator_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerUseItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 initiator_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_initiator_account_id(&has_bits);
          _impl_.initiator_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgUseItem use_item_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_item_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerUseItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerUseItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 initiator_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_initiator_account_id(), target);
  }

  // optional .CMsgUseItem use_item_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::use_item_msg(this),
        _Internal::use_item_msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerUseItem)
  return target;
}

size_t CMsgServerUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerUseItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgUseItem use_item_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.use_item_msg_);
    }

    // optional uint32 initiator_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_initiator_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerUseItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerUseItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerUseItem::GetClassData() const { return &_class_data_; }


void CMsgServerUseItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerUseItem*>(&to_msg);
  auto& from = static_cast<const CMsgServerUseItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerUseItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_use_item_msg()->::CMsgUseItem::MergeFrom(
          from._internal_use_item_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.initiator_account_id_ = from._impl_.initiator_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerUseItem::CopyFrom(const CMsgServerUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerUseItem::IsInitialized() const {
  return true;
}

void CMsgServerUseItem::InternalSwap(CMsgServerUseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerUseItem, _impl_.initiator_account_id_)
      + sizeof(CMsgServerUseItem::_impl_.initiator_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerUseItem, _impl_.use_item_msg_)>(
          reinterpret_cast<char*>(&_impl_.use_item_msg_),
          reinterpret_cast<char*>(&other->_impl_.use_item_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerUseItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[34]);
}

// ===================================================================

class CMsgUseMultipleItems::_Internal {
 public:
};

CMsgUseMultipleItems::CMsgUseMultipleItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgUseMultipleItems)
}
CMsgUseMultipleItems::CMsgUseMultipleItems(const CMsgUseMultipleItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgUseMultipleItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgUseMultipleItems)
}

inline void CMsgUseMultipleItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgUseMultipleItems::~CMsgUseMultipleItems() {
  // @@protoc_insertion_point(destructor:CMsgUseMultipleItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgUseMultipleItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgUseMultipleItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgUseMultipleItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUseMultipleItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUseMultipleItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgUseMultipleItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUseMultipleItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUseMultipleItems)
  return target;
}

size_t CMsgUseMultipleItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUseMultipleItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgUseMultipleItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgUseMultipleItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgUseMultipleItems::GetClassData() const { return &_class_data_; }


void CMsgUseMultipleItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgUseMultipleItems*>(&to_msg);
  auto& from = static_cast<const CMsgUseMultipleItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgUseMultipleItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgUseMultipleItems::CopyFrom(const CMsgUseMultipleItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUseMultipleItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUseMultipleItems::IsInitialized() const {
  return true;
}

void CMsgUseMultipleItems::InternalSwap(CMsgUseMultipleItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUseMultipleItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[35]);
}

// ===================================================================

class CGCStoreRechargeRedirect_LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCStoreRechargeRedirect_LineItem>()._impl_._has_bits_);
  static void set_has_item_def_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCStoreRechargeRedirect_LineItem::CGCStoreRechargeRedirect_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCStoreRechargeRedirect_LineItem)
}
CGCStoreRechargeRedirect_LineItem::CGCStoreRechargeRedirect_LineItem(const CGCStoreRechargeRedirect_LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCStoreRechargeRedirect_LineItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_id_){}
    , decltype(_impl_.quantity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_id_, &from._impl_.item_def_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.item_def_id_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:CGCStoreRechargeRedirect_LineItem)
}

inline void CGCStoreRechargeRedirect_LineItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_id_){0u}
    , decltype(_impl_.quantity_){0u}
  };
}

CGCStoreRechargeRedirect_LineItem::~CGCStoreRechargeRedirect_LineItem() {
  // @@protoc_insertion_point(destructor:CGCStoreRechargeRedirect_LineItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCStoreRechargeRedirect_LineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCStoreRechargeRedirect_LineItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCStoreRechargeRedirect_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCStoreRechargeRedirect_LineItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_def_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quantity_) -
        reinterpret_cast<char*>(&_impl_.item_def_id_)) + sizeof(_impl_.quantity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCStoreRechargeRedirect_LineItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def_id(&has_bits);
          _impl_.item_def_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCStoreRechargeRedirect_LineItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCStoreRechargeRedirect_LineItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCStoreRechargeRedirect_LineItem)
  return target;
}

size_t CGCStoreRechargeRedirect_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCStoreRechargeRedirect_LineItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCStoreRechargeRedirect_LineItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCStoreRechargeRedirect_LineItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCStoreRechargeRedirect_LineItem::GetClassData() const { return &_class_data_; }


void CGCStoreRechargeRedirect_LineItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCStoreRechargeRedirect_LineItem*>(&to_msg);
  auto& from = static_cast<const CGCStoreRechargeRedirect_LineItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCStoreRechargeRedirect_LineItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_id_ = from._impl_.item_def_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCStoreRechargeRedirect_LineItem::CopyFrom(const CGCStoreRechargeRedirect_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCStoreRechargeRedirect_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStoreRechargeRedirect_LineItem::IsInitialized() const {
  return true;
}

void CGCStoreRechargeRedirect_LineItem::InternalSwap(CGCStoreRechargeRedirect_LineItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCStoreRechargeRedirect_LineItem, _impl_.quantity_)
      + sizeof(CGCStoreRechargeRedirect_LineItem::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(CGCStoreRechargeRedirect_LineItem, _impl_.item_def_id_)>(
          reinterpret_cast<char*>(&_impl_.item_def_id_),
          reinterpret_cast<char*>(&other->_impl_.item_def_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCStoreRechargeRedirect_LineItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[36]);
}

// ===================================================================

class CMsgGCEconSQLWorkItemEmbeddedRollbackData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCEconSQLWorkItemEmbeddedRollbackData>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deleted_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expected_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCEconSQLWorkItemEmbeddedRollbackData::CMsgGCEconSQLWorkItemEmbeddedRollbackData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
}
CMsgGCEconSQLWorkItemEmbeddedRollbackData::CMsgGCEconSQLWorkItemEmbeddedRollbackData(const CMsgGCEconSQLWorkItemEmbeddedRollbackData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCEconSQLWorkItemEmbeddedRollbackData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deleted_item_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.old_audit_action_){}
    , decltype(_impl_.new_audit_action_){}
    , decltype(_impl_.expected_audit_action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.deleted_item_id_, &from._impl_.deleted_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expected_audit_action_) -
    reinterpret_cast<char*>(&_impl_.deleted_item_id_)) + sizeof(_impl_.expected_audit_action_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
}

inline void CMsgGCEconSQLWorkItemEmbeddedRollbackData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deleted_item_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.old_audit_action_){0u}
    , decltype(_impl_.new_audit_action_){0u}
    , decltype(_impl_.expected_audit_action_){0u}
  };
}

CMsgGCEconSQLWorkItemEmbeddedRollbackData::~CMsgGCEconSQLWorkItemEmbeddedRollbackData() {
  // @@protoc_insertion_point(destructor:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCEconSQLWorkItemEmbeddedRollbackData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.deleted_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expected_audit_action_) -
        reinterpret_cast<char*>(&_impl_.deleted_item_id_)) + sizeof(_impl_.expected_audit_action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCEconSQLWorkItemEmbeddedRollbackData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 deleted_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deleted_item_id(&has_bits);
          _impl_.deleted_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 old_audit_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_old_audit_action(&has_bits);
          _impl_.old_audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_audit_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_new_audit_action(&has_bits);
          _impl_.new_audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expected_audit_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_expected_audit_action(&has_bits);
          _impl_.expected_audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCEconSQLWorkItemEmbeddedRollbackData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 deleted_item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_deleted_item_id(), target);
  }

  // optional uint32 old_audit_action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_old_audit_action(), target);
  }

  // optional uint32 new_audit_action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_new_audit_action(), target);
  }

  // optional uint32 expected_audit_action = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expected_audit_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  return target;
}

size_t CMsgGCEconSQLWorkItemEmbeddedRollbackData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 deleted_item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_deleted_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 old_audit_action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_audit_action());
    }

    // optional uint32 new_audit_action = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_audit_action());
    }

    // optional uint32 expected_audit_action = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expected_audit_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCEconSQLWorkItemEmbeddedRollbackData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCEconSQLWorkItemEmbeddedRollbackData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCEconSQLWorkItemEmbeddedRollbackData::GetClassData() const { return &_class_data_; }


void CMsgGCEconSQLWorkItemEmbeddedRollbackData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCEconSQLWorkItemEmbeddedRollbackData*>(&to_msg);
  auto& from = static_cast<const CMsgGCEconSQLWorkItemEmbeddedRollbackData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.deleted_item_id_ = from._impl_.deleted_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.old_audit_action_ = from._impl_.old_audit_action_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.new_audit_action_ = from._impl_.new_audit_action_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.expected_audit_action_ = from._impl_.expected_audit_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::CopyFrom(const CMsgGCEconSQLWorkItemEmbeddedRollbackData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCEconSQLWorkItemEmbeddedRollbackData::IsInitialized() const {
  return true;
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::InternalSwap(CMsgGCEconSQLWorkItemEmbeddedRollbackData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_.expected_audit_action_)
      + sizeof(CMsgGCEconSQLWorkItemEmbeddedRollbackData::_impl_.expected_audit_action_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCEconSQLWorkItemEmbeddedRollbackData, _impl_.deleted_item_id_)>(
          reinterpret_cast<char*>(&_impl_.deleted_item_id_),
          reinterpret_cast<char*>(&other->_impl_.deleted_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCEconSQLWorkItemEmbeddedRollbackData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[37]);
}

// ===================================================================

class CMsgCraftStatue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCraftStatue>()._impl_._has_bits_);
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequencename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pedestal_itemdef(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_toolid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgCraftStatue::CMsgCraftStatue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCraftStatue)
}
CMsgCraftStatue::CMsgCraftStatue(const CMsgCraftStatue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCraftStatue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequencename_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.heroid_){}
    , decltype(_impl_.cycle_){}
    , decltype(_impl_.toolid_){}
    , decltype(_impl_.pedestal_itemdef_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sequencename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequencename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sequencename()) {
    _this->_impl_.sequencename_.Set(from._internal_sequencename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.heroid_, &from._impl_.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pedestal_itemdef_) -
    reinterpret_cast<char*>(&_impl_.heroid_)) + sizeof(_impl_.pedestal_itemdef_));
  // @@protoc_insertion_point(copy_constructor:CMsgCraftStatue)
}

inline void CMsgCraftStatue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequencename_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.heroid_){0u}
    , decltype(_impl_.cycle_){0}
    , decltype(_impl_.toolid_){uint64_t{0u}}
    , decltype(_impl_.pedestal_itemdef_){0u}
  };
  _impl_.sequencename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequencename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgCraftStatue::~CMsgCraftStatue() {
  // @@protoc_insertion_point(destructor:CMsgCraftStatue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCraftStatue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sequencename_.Destroy();
  _impl_.description_.Destroy();
}

void CMsgCraftStatue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCraftStatue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCraftStatue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sequencename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.heroid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pedestal_itemdef_) -
        reinterpret_cast<char*>(&_impl_.heroid_)) + sizeof(_impl_.pedestal_itemdef_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCraftStatue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_heroid(&has_bits);
          _impl_.heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sequencename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sequencename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgCraftStatue.sequencename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float cycle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_cycle(&has_bits);
          _impl_.cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgCraftStatue.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pedestal_itemdef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pedestal_itemdef(&has_bits);
          _impl_.pedestal_itemdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 toolid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_toolid(&has_bits);
          _impl_.toolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCraftStatue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCraftStatue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 heroid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_heroid(), target);
  }

  // optional string sequencename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sequencename().data(), static_cast<int>(this->_internal_sequencename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCraftStatue.sequencename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequencename(), target);
  }

  // optional float cycle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_cycle(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCraftStatue.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional uint32 pedestal_itemdef = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pedestal_itemdef(), target);
  }

  // optional uint64 toolid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_toolid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCraftStatue)
  return target;
}

size_t CMsgCraftStatue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCraftStatue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string sequencename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sequencename());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 heroid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heroid());
    }

    // optional float cycle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint64 toolid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_toolid());
    }

    // optional uint32 pedestal_itemdef = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pedestal_itemdef());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCraftStatue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCraftStatue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCraftStatue::GetClassData() const { return &_class_data_; }


void CMsgCraftStatue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCraftStatue*>(&to_msg);
  auto& from = static_cast<const CMsgCraftStatue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCraftStatue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sequencename(from._internal_sequencename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.heroid_ = from._impl_.heroid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cycle_ = from._impl_.cycle_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.toolid_ = from._impl_.toolid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pedestal_itemdef_ = from._impl_.pedestal_itemdef_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCraftStatue::CopyFrom(const CMsgCraftStatue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCraftStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftStatue::IsInitialized() const {
  return true;
}

void CMsgCraftStatue::InternalSwap(CMsgCraftStatue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequencename_, lhs_arena,
      &other->_impl_.sequencename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCraftStatue, _impl_.pedestal_itemdef_)
      + sizeof(CMsgCraftStatue::_impl_.pedestal_itemdef_)
      - PROTOBUF_FIELD_OFFSET(CMsgCraftStatue, _impl_.heroid_)>(
          reinterpret_cast<char*>(&_impl_.heroid_),
          reinterpret_cast<char*>(&other->_impl_.heroid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCraftStatue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[38]);
}

// ===================================================================

class CMsgRedeemCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRedeemCode>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRedeemCode::CMsgRedeemCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRedeemCode)
}
CMsgRedeemCode::CMsgRedeemCode(const CMsgRedeemCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRedeemCode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgRedeemCode)
}

inline void CMsgRedeemCode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgRedeemCode::~CMsgRedeemCode() {
  // @@protoc_insertion_point(destructor:CMsgRedeemCode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRedeemCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void CMsgRedeemCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRedeemCode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRedeemCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.code_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRedeemCode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgRedeemCode.code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRedeemCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRedeemCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRedeemCode.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRedeemCode)
  return target;
}

size_t CMsgRedeemCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRedeemCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string code = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRedeemCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRedeemCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRedeemCode::GetClassData() const { return &_class_data_; }


void CMsgRedeemCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRedeemCode*>(&to_msg);
  auto& from = static_cast<const CMsgRedeemCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRedeemCode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_code()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRedeemCode::CopyFrom(const CMsgRedeemCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRedeemCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRedeemCode::IsInitialized() const {
  return true;
}

void CMsgRedeemCode::InternalSwap(CMsgRedeemCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRedeemCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[39]);
}

// ===================================================================

class CMsgRedeemCodeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRedeemCodeResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRedeemCodeResponse::CMsgRedeemCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRedeemCodeResponse)
}
CMsgRedeemCodeResponse::CMsgRedeemCodeResponse(const CMsgRedeemCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRedeemCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:CMsgRedeemCodeResponse)
}

inline void CMsgRedeemCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0u}
  };
}

CMsgRedeemCodeResponse::~CMsgRedeemCodeResponse() {
  // @@protoc_insertion_point(destructor:CMsgRedeemCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRedeemCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRedeemCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRedeemCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRedeemCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRedeemCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          _impl_.response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRedeemCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRedeemCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRedeemCodeResponse)
  return target;
}

size_t CMsgRedeemCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRedeemCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRedeemCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRedeemCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRedeemCodeResponse::GetClassData() const { return &_class_data_; }


void CMsgRedeemCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRedeemCodeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgRedeemCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRedeemCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRedeemCodeResponse::CopyFrom(const CMsgRedeemCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRedeemCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRedeemCodeResponse::IsInitialized() const {
  return true;
}

void CMsgRedeemCodeResponse::InternalSwap(CMsgRedeemCodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRedeemCodeResponse, _impl_.response_)
      + sizeof(CMsgRedeemCodeResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgRedeemCodeResponse, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRedeemCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[40]);
}

// ===================================================================

class CMsgDevNewItemRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevNewItemRequest>()._impl_._has_bits_);
  static void set_has_item_def_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_loot_list_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDevNewItemRequest::CMsgDevNewItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDevNewItemRequest)
}
CMsgDevNewItemRequest::CMsgDevNewItemRequest(const CMsgDevNewItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDevNewItemRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attr_def_name_){from._impl_.attr_def_name_}
    , decltype(_impl_.attr_value_){from._impl_.attr_value_}
    , decltype(_impl_.item_def_name_){}
    , decltype(_impl_.loot_list_name_){}
    , decltype(_impl_.item_quality_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.item_def_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_def_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_def_name()) {
    _this->_impl_.item_def_name_.Set(from._internal_item_def_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.loot_list_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loot_list_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_loot_list_name()) {
    _this->_impl_.loot_list_name_.Set(from._internal_loot_list_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.item_quality_ = from._impl_.item_quality_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevNewItemRequest)
}

inline void CMsgDevNewItemRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attr_def_name_){arena}
    , decltype(_impl_.attr_value_){arena}
    , decltype(_impl_.item_def_name_){}
    , decltype(_impl_.loot_list_name_){}
    , decltype(_impl_.item_quality_){0u}
  };
  _impl_.item_def_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_def_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.loot_list_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loot_list_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDevNewItemRequest::~CMsgDevNewItemRequest() {
  // @@protoc_insertion_point(destructor:CMsgDevNewItemRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDevNewItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attr_def_name_.~RepeatedPtrField();
  _impl_.attr_value_.~RepeatedPtrField();
  _impl_.item_def_name_.Destroy();
  _impl_.loot_list_name_.Destroy();
}

void CMsgDevNewItemRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDevNewItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevNewItemRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attr_def_name_.Clear();
  _impl_.attr_value_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.item_def_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.loot_list_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.item_quality_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevNewItemRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string item_def_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_item_def_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDevNewItemRequest.item_def_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string loot_list_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_loot_list_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDevNewItemRequest.loot_list_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string attr_def_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attr_def_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgDevNewItemRequest.attr_def_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string attr_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attr_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgDevNewItemRequest.attr_value");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_item_quality(&has_bits);
          _impl_.item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDevNewItemRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevNewItemRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string item_def_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_def_name().data(), static_cast<int>(this->_internal_item_def_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.item_def_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_def_name(), target);
  }

  // optional string loot_list_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loot_list_name().data(), static_cast<int>(this->_internal_loot_list_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.loot_list_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_loot_list_name(), target);
  }

  // repeated string attr_def_name = 5;
  for (int i = 0, n = this->_internal_attr_def_name_size(); i < n; i++) {
    const auto& s = this->_internal_attr_def_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.attr_def_name");
    target = stream->WriteString(5, s, target);
  }

  // repeated string attr_value = 6;
  for (int i = 0, n = this->_internal_attr_value_size(); i < n; i++) {
    const auto& s = this->_internal_attr_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.attr_value");
    target = stream->WriteString(6, s, target);
  }

  // optional uint32 item_quality = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_item_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevNewItemRequest)
  return target;
}

size_t CMsgDevNewItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevNewItemRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attr_def_name = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attr_def_name_.size());
  for (int i = 0, n = _impl_.attr_def_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attr_def_name_.Get(i));
  }

  // repeated string attr_value = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attr_value_.size());
  for (int i = 0, n = _impl_.attr_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attr_value_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_def_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_def_name());
    }

    // optional string loot_list_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loot_list_name());
    }

    // optional uint32 item_quality = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_quality());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDevNewItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDevNewItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDevNewItemRequest::GetClassData() const { return &_class_data_; }


void CMsgDevNewItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDevNewItemRequest*>(&to_msg);
  auto& from = static_cast<const CMsgDevNewItemRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevNewItemRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attr_def_name_.MergeFrom(from._impl_.attr_def_name_);
  _this->_impl_.attr_value_.MergeFrom(from._impl_.attr_value_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_item_def_name(from._internal_item_def_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_loot_list_name(from._internal_loot_list_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_quality_ = from._impl_.item_quality_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDevNewItemRequest::CopyFrom(const CMsgDevNewItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevNewItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequest::IsInitialized() const {
  return true;
}

void CMsgDevNewItemRequest::InternalSwap(CMsgDevNewItemRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attr_def_name_.InternalSwap(&other->_impl_.attr_def_name_);
  _impl_.attr_value_.InternalSwap(&other->_impl_.attr_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_def_name_, lhs_arena,
      &other->_impl_.item_def_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loot_list_name_, lhs_arena,
      &other->_impl_.loot_list_name_, rhs_arena
  );
  swap(_impl_.item_quality_, other->_impl_.item_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevNewItemRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[41]);
}

// ===================================================================

class CMsgDevNewItemRequestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevNewItemRequestResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDevNewItemRequestResponse::CMsgDevNewItemRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDevNewItemRequestResponse)
}
CMsgDevNewItemRequestResponse::CMsgDevNewItemRequestResponse(const CMsgDevNewItemRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDevNewItemRequestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevNewItemRequestResponse)
}

inline void CMsgDevNewItemRequestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgDevNewItemRequestResponse::~CMsgDevNewItemRequestResponse() {
  // @@protoc_insertion_point(destructor:CMsgDevNewItemRequestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDevNewItemRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDevNewItemRequestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDevNewItemRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevNewItemRequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevNewItemRequestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDevNewItemRequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevNewItemRequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevNewItemRequestResponse)
  return target;
}

size_t CMsgDevNewItemRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevNewItemRequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDevNewItemRequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDevNewItemRequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDevNewItemRequestResponse::GetClassData() const { return &_class_data_; }


void CMsgDevNewItemRequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDevNewItemRequestResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDevNewItemRequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevNewItemRequestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDevNewItemRequestResponse::CopyFrom(const CMsgDevNewItemRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevNewItemRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequestResponse::IsInitialized() const {
  return true;
}

void CMsgDevNewItemRequestResponse::InternalSwap(CMsgDevNewItemRequestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevNewItemRequestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[42]);
}

// ===================================================================

class CMsgDevUnlockAllItemStyles::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevUnlockAllItemStyles>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDevUnlockAllItemStyles::CMsgDevUnlockAllItemStyles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDevUnlockAllItemStyles)
}
CMsgDevUnlockAllItemStyles::CMsgDevUnlockAllItemStyles(const CMsgDevUnlockAllItemStyles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDevUnlockAllItemStyles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevUnlockAllItemStyles)
}

inline void CMsgDevUnlockAllItemStyles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
  };
}

CMsgDevUnlockAllItemStyles::~CMsgDevUnlockAllItemStyles() {
  // @@protoc_insertion_point(destructor:CMsgDevUnlockAllItemStyles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDevUnlockAllItemStyles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDevUnlockAllItemStyles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDevUnlockAllItemStyles::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevUnlockAllItemStyles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevUnlockAllItemStyles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDevUnlockAllItemStyles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevUnlockAllItemStyles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevUnlockAllItemStyles)
  return target;
}

size_t CMsgDevUnlockAllItemStyles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevUnlockAllItemStyles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDevUnlockAllItemStyles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDevUnlockAllItemStyles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDevUnlockAllItemStyles::GetClassData() const { return &_class_data_; }


void CMsgDevUnlockAllItemStyles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDevUnlockAllItemStyles*>(&to_msg);
  auto& from = static_cast<const CMsgDevUnlockAllItemStyles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevUnlockAllItemStyles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDevUnlockAllItemStyles::CopyFrom(const CMsgDevUnlockAllItemStyles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevUnlockAllItemStyles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevUnlockAllItemStyles::IsInitialized() const {
  return true;
}

void CMsgDevUnlockAllItemStyles::InternalSwap(CMsgDevUnlockAllItemStyles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevUnlockAllItemStyles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[43]);
}

// ===================================================================

class CMsgDevUnlockAllItemStylesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevUnlockAllItemStylesResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDevUnlockAllItemStylesResponse::CMsgDevUnlockAllItemStylesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDevUnlockAllItemStylesResponse)
}
CMsgDevUnlockAllItemStylesResponse::CMsgDevUnlockAllItemStylesResponse(const CMsgDevUnlockAllItemStylesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDevUnlockAllItemStylesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevUnlockAllItemStylesResponse)
}

inline void CMsgDevUnlockAllItemStylesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgDevUnlockAllItemStylesResponse::~CMsgDevUnlockAllItemStylesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDevUnlockAllItemStylesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDevUnlockAllItemStylesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDevUnlockAllItemStylesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDevUnlockAllItemStylesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevUnlockAllItemStylesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevUnlockAllItemStylesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDevUnlockAllItemStylesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevUnlockAllItemStylesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevUnlockAllItemStylesResponse)
  return target;
}

size_t CMsgDevUnlockAllItemStylesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevUnlockAllItemStylesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDevUnlockAllItemStylesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDevUnlockAllItemStylesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDevUnlockAllItemStylesResponse::GetClassData() const { return &_class_data_; }


void CMsgDevUnlockAllItemStylesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDevUnlockAllItemStylesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDevUnlockAllItemStylesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevUnlockAllItemStylesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDevUnlockAllItemStylesResponse::CopyFrom(const CMsgDevUnlockAllItemStylesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevUnlockAllItemStylesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevUnlockAllItemStylesResponse::IsInitialized() const {
  return true;
}

void CMsgDevUnlockAllItemStylesResponse::InternalSwap(CMsgDevUnlockAllItemStylesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevUnlockAllItemStylesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[44]);
}

// ===================================================================

class CMsgGCGetAccountSubscriptionItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetAccountSubscriptionItem>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetAccountSubscriptionItem::CMsgGCGetAccountSubscriptionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetAccountSubscriptionItem)
}
CMsgGCGetAccountSubscriptionItem::CMsgGCGetAccountSubscriptionItem(const CMsgGCGetAccountSubscriptionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetAccountSubscriptionItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetAccountSubscriptionItem)
}

inline void CMsgGCGetAccountSubscriptionItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgGCGetAccountSubscriptionItem::~CMsgGCGetAccountSubscriptionItem() {
  // @@protoc_insertion_point(destructor:CMsgGCGetAccountSubscriptionItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetAccountSubscriptionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetAccountSubscriptionItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetAccountSubscriptionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetAccountSubscriptionItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetAccountSubscriptionItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetAccountSubscriptionItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetAccountSubscriptionItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetAccountSubscriptionItem)
  return target;
}

size_t CMsgGCGetAccountSubscriptionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetAccountSubscriptionItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetAccountSubscriptionItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetAccountSubscriptionItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetAccountSubscriptionItem::GetClassData() const { return &_class_data_; }


void CMsgGCGetAccountSubscriptionItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetAccountSubscriptionItem*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetAccountSubscriptionItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetAccountSubscriptionItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetAccountSubscriptionItem::CopyFrom(const CMsgGCGetAccountSubscriptionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetAccountSubscriptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAccountSubscriptionItem::IsInitialized() const {
  return true;
}

void CMsgGCGetAccountSubscriptionItem::InternalSwap(CMsgGCGetAccountSubscriptionItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetAccountSubscriptionItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[45]);
}

// ===================================================================

class CMsgGCGetAccountSubscriptionItemResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetAccountSubscriptionItemResponse>()._impl_._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetAccountSubscriptionItemResponse::CMsgGCGetAccountSubscriptionItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetAccountSubscriptionItemResponse)
}
CMsgGCGetAccountSubscriptionItemResponse::CMsgGCGetAccountSubscriptionItemResponse(const CMsgGCGetAccountSubscriptionItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetAccountSubscriptionItemResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.def_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.def_index_ = from._impl_.def_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetAccountSubscriptionItemResponse)
}

inline void CMsgGCGetAccountSubscriptionItemResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.def_index_){0u}
  };
}

CMsgGCGetAccountSubscriptionItemResponse::~CMsgGCGetAccountSubscriptionItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetAccountSubscriptionItemResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetAccountSubscriptionItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetAccountSubscriptionItemResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetAccountSubscriptionItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetAccountSubscriptionItemResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.def_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetAccountSubscriptionItemResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetAccountSubscriptionItemResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetAccountSubscriptionItemResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetAccountSubscriptionItemResponse)
  return target;
}

size_t CMsgGCGetAccountSubscriptionItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetAccountSubscriptionItemResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 def_index = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetAccountSubscriptionItemResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetAccountSubscriptionItemResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetAccountSubscriptionItemResponse::GetClassData() const { return &_class_data_; }


void CMsgGCGetAccountSubscriptionItemResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetAccountSubscriptionItemResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetAccountSubscriptionItemResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetAccountSubscriptionItemResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_def_index()) {
    _this->_internal_set_def_index(from._internal_def_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetAccountSubscriptionItemResponse::CopyFrom(const CMsgGCGetAccountSubscriptionItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetAccountSubscriptionItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAccountSubscriptionItemResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetAccountSubscriptionItemResponse::InternalSwap(CMsgGCGetAccountSubscriptionItemResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.def_index_, other->_impl_.def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetAccountSubscriptionItemResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[46]);
}

// ===================================================================

class CMsgGCAddGiftItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCAddGiftItem>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCAddGiftItem::CMsgGCAddGiftItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCAddGiftItem)
}
CMsgGCAddGiftItem::CMsgGCAddGiftItem(const CMsgGCAddGiftItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCAddGiftItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_id_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCAddGiftItem)
}

inline void CMsgGCAddGiftItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgGCAddGiftItem::~CMsgGCAddGiftItem() {
  // @@protoc_insertion_point(destructor:CMsgGCAddGiftItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCAddGiftItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCAddGiftItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCAddGiftItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCAddGiftItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.account_id_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCAddGiftItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCAddGiftItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCAddGiftItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCAddGiftItem)
  return target;
}

size_t CMsgGCAddGiftItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCAddGiftItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCAddGiftItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCAddGiftItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCAddGiftItem::GetClassData() const { return &_class_data_; }


void CMsgGCAddGiftItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCAddGiftItem*>(&to_msg);
  auto& from = static_cast<const CMsgGCAddGiftItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCAddGiftItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCAddGiftItem::CopyFrom(const CMsgGCAddGiftItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCAddGiftItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCAddGiftItem::IsInitialized() const {
  return true;
}

void CMsgGCAddGiftItem::InternalSwap(CMsgGCAddGiftItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCAddGiftItem, _impl_.account_id_)
      + sizeof(CMsgGCAddGiftItem::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCAddGiftItem, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCAddGiftItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[47]);
}

// ===================================================================

class CMsgClientToGCWrapAndDeliverGift::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCWrapAndDeliverGift>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_give_to_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gift_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCWrapAndDeliverGift)
}
CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(const CMsgClientToGCWrapAndDeliverGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCWrapAndDeliverGift* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gift_message_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.give_to_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gift_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gift_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gift_message()) {
    _this->_impl_.gift_message_.Set(from._internal_gift_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.give_to_account_id_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.give_to_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCWrapAndDeliverGift)
}

inline void CMsgClientToGCWrapAndDeliverGift::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gift_message_){}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.give_to_account_id_){0u}
  };
  _impl_.gift_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gift_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCWrapAndDeliverGift::~CMsgClientToGCWrapAndDeliverGift() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCWrapAndDeliverGift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCWrapAndDeliverGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gift_message_.Destroy();
}

void CMsgClientToGCWrapAndDeliverGift::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCWrapAndDeliverGift::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCWrapAndDeliverGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.gift_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.give_to_account_id_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.give_to_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCWrapAndDeliverGift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 give_to_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_give_to_account_id(&has_bits);
          _impl_.give_to_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gift_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gift_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCWrapAndDeliverGift.gift_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCWrapAndDeliverGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCWrapAndDeliverGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 give_to_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_give_to_account_id(), target);
  }

  // optional string gift_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gift_message().data(), static_cast<int>(this->_internal_gift_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCWrapAndDeliverGift.gift_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gift_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCWrapAndDeliverGift)
  return target;
}

size_t CMsgClientToGCWrapAndDeliverGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCWrapAndDeliverGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string gift_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gift_message());
    }

    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 give_to_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_give_to_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCWrapAndDeliverGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCWrapAndDeliverGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCWrapAndDeliverGift::GetClassData() const { return &_class_data_; }


void CMsgClientToGCWrapAndDeliverGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCWrapAndDeliverGift*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCWrapAndDeliverGift&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCWrapAndDeliverGift)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_gift_message(from._internal_gift_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.give_to_account_id_ = from._impl_.give_to_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCWrapAndDeliverGift::CopyFrom(const CMsgClientToGCWrapAndDeliverGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCWrapAndDeliverGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCWrapAndDeliverGift::IsInitialized() const {
  return true;
}

void CMsgClientToGCWrapAndDeliverGift::InternalSwap(CMsgClientToGCWrapAndDeliverGift* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gift_message_, lhs_arena,
      &other->_impl_.gift_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGift, _impl_.give_to_account_id_)
      + sizeof(CMsgClientToGCWrapAndDeliverGift::_impl_.give_to_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGift, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCWrapAndDeliverGift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[48]);
}

// ===================================================================

class CMsgClientToGCWrapAndDeliverGiftResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCWrapAndDeliverGiftResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gifting_charge_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gifting_charge_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gifting_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gifting_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gifting_window_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trade_restriction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientToGCWrapAndDeliverGiftResponse::CMsgClientToGCWrapAndDeliverGiftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCWrapAndDeliverGiftResponse)
}
CMsgClientToGCWrapAndDeliverGiftResponse::CMsgClientToGCWrapAndDeliverGiftResponse(const CMsgClientToGCWrapAndDeliverGiftResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCWrapAndDeliverGiftResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}
    , decltype(_impl_.gifting_charge_uses_){}
    , decltype(_impl_.gifting_charge_max_){}
    , decltype(_impl_.gifting_uses_){}
    , decltype(_impl_.gifting_max_){}
    , decltype(_impl_.gifting_window_hours_){}
    , decltype(_impl_.trade_restriction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.response_, &from._impl_.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trade_restriction_) -
    reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.trade_restriction_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCWrapAndDeliverGiftResponse)
}

inline void CMsgClientToGCWrapAndDeliverGiftResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
    , decltype(_impl_.gifting_charge_uses_){0u}
    , decltype(_impl_.gifting_charge_max_){0}
    , decltype(_impl_.gifting_uses_){0u}
    , decltype(_impl_.gifting_max_){0}
    , decltype(_impl_.gifting_window_hours_){0u}
    , decltype(_impl_.trade_restriction_){0}
  };
}

CMsgClientToGCWrapAndDeliverGiftResponse::~CMsgClientToGCWrapAndDeliverGiftResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCWrapAndDeliverGiftResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCWrapAndDeliverGiftResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCWrapAndDeliverGiftResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCWrapAndDeliverGiftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.trade_restriction_) -
        reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.trade_restriction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCWrapAndDeliverGiftResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EGCMsgResponse response = 1 [default = k_EGCMsgResponseOK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgResponse_IsValid(val))) {
            _internal_set_response(static_cast<::EGCMsgResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gifting_charge_uses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gifting_charge_uses(&has_bits);
          _impl_.gifting_charge_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gifting_charge_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gifting_charge_max(&has_bits);
          _impl_.gifting_charge_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gifting_uses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gifting_uses(&has_bits);
          _impl_.gifting_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gifting_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gifting_max(&has_bits);
          _impl_.gifting_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gifting_window_hours = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_gifting_window_hours(&has_bits);
          _impl_.gifting_window_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EGCMsgInitiateTradeResponse trade_restriction = 7 [default = k_EGCMsgInitiateTradeResponse_Accepted];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgInitiateTradeResponse_IsValid(val))) {
            _internal_set_trade_restriction(static_cast<::EGCMsgInitiateTradeResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCWrapAndDeliverGiftResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EGCMsgResponse response = 1 [default = k_EGCMsgResponseOK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint32 gifting_charge_uses = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gifting_charge_uses(), target);
  }

  // optional int32 gifting_charge_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gifting_charge_max(), target);
  }

  // optional uint32 gifting_uses = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gifting_uses(), target);
  }

  // optional int32 gifting_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_gifting_max(), target);
  }

  // optional uint32 gifting_window_hours = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gifting_window_hours(), target);
  }

  // optional .EGCMsgInitiateTradeResponse trade_restriction = 7 [default = k_EGCMsgInitiateTradeResponse_Accepted];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_trade_restriction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCWrapAndDeliverGiftResponse)
  return target;
}

size_t CMsgClientToGCWrapAndDeliverGiftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .EGCMsgResponse response = 1 [default = k_EGCMsgResponseOK];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

    // optional uint32 gifting_charge_uses = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gifting_charge_uses());
    }

    // optional int32 gifting_charge_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gifting_charge_max());
    }

    // optional uint32 gifting_uses = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gifting_uses());
    }

    // optional int32 gifting_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gifting_max());
    }

    // optional uint32 gifting_window_hours = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gifting_window_hours());
    }

    // optional .EGCMsgInitiateTradeResponse trade_restriction = 7 [default = k_EGCMsgInitiateTradeResponse_Accepted];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trade_restriction());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCWrapAndDeliverGiftResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCWrapAndDeliverGiftResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCWrapAndDeliverGiftResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCWrapAndDeliverGiftResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCWrapAndDeliverGiftResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCWrapAndDeliverGiftResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gifting_charge_uses_ = from._impl_.gifting_charge_uses_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gifting_charge_max_ = from._impl_.gifting_charge_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gifting_uses_ = from._impl_.gifting_uses_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.gifting_max_ = from._impl_.gifting_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gifting_window_hours_ = from._impl_.gifting_window_hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.trade_restriction_ = from._impl_.trade_restriction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCWrapAndDeliverGiftResponse::CopyFrom(const CMsgClientToGCWrapAndDeliverGiftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCWrapAndDeliverGiftResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCWrapAndDeliverGiftResponse::InternalSwap(CMsgClientToGCWrapAndDeliverGiftResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.trade_restriction_)
      + sizeof(CMsgClientToGCWrapAndDeliverGiftResponse::_impl_.trade_restriction_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGiftResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCWrapAndDeliverGiftResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[49]);
}

// ===================================================================

class CMsgClientToGCUnwrapGift::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnwrapGift>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnwrapGift::CMsgClientToGCUnwrapGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnwrapGift)
}
CMsgClientToGCUnwrapGift::CMsgClientToGCUnwrapGift(const CMsgClientToGCUnwrapGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnwrapGift* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnwrapGift)
}

inline void CMsgClientToGCUnwrapGift::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
  };
}

CMsgClientToGCUnwrapGift::~CMsgClientToGCUnwrapGift() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnwrapGift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnwrapGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCUnwrapGift::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnwrapGift::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnwrapGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnwrapGift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnwrapGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnwrapGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnwrapGift)
  return target;
}

size_t CMsgClientToGCUnwrapGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnwrapGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnwrapGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnwrapGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnwrapGift::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnwrapGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnwrapGift*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnwrapGift&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnwrapGift)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnwrapGift::CopyFrom(const CMsgClientToGCUnwrapGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnwrapGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnwrapGift::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnwrapGift::InternalSwap(CMsgClientToGCUnwrapGift* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnwrapGift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[50]);
}

// ===================================================================

class CMsgClientToGCGetGiftPermissions::_Internal {
 public:
};

CMsgClientToGCGetGiftPermissions::CMsgClientToGCGetGiftPermissions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetGiftPermissions)
}
CMsgClientToGCGetGiftPermissions::CMsgClientToGCGetGiftPermissions(const CMsgClientToGCGetGiftPermissions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgClientToGCGetGiftPermissions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetGiftPermissions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetGiftPermissions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetGiftPermissions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetGiftPermissions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[51]);
}

// ===================================================================

class CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
}
CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission(const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetGiftPermissionsResponse_FriendPermission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.permission_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.permission_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.permission_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
}

inline void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.permission_){0}
  };
}

CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::~CMsgClientToGCGetGiftPermissionsResponse_FriendPermission() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.permission_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.permission_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EGCMsgInitiateTradeResponse permission = 2 [default = k_EGCMsgInitiateTradeResponse_Accepted];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgInitiateTradeResponse_IsValid(val))) {
            _internal_set_permission(static_cast<::EGCMsgInitiateTradeResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EGCMsgInitiateTradeResponse permission = 2 [default = k_EGCMsgInitiateTradeResponse_Accepted];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  return target;
}

size_t CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EGCMsgInitiateTradeResponse permission = 2 [default = k_EGCMsgInitiateTradeResponse_Accepted];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_permission());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.permission_ = from._impl_.permission_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CopyFrom(const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::InternalSwap(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _impl_.permission_)
      + sizeof(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_impl_.permission_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[52]);
}

// ===================================================================

class CMsgClientToGCGetGiftPermissionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetGiftPermissionsResponse>()._impl_._has_bits_);
  static void set_has_is_unlimited(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_two_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_friendship_age_requirement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_friendship_age_requirement_two_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientToGCGetGiftPermissionsResponse::CMsgClientToGCGetGiftPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetGiftPermissionsResponse)
}
CMsgClientToGCGetGiftPermissionsResponse::CMsgClientToGCGetGiftPermissionsResponse(const CMsgClientToGCGetGiftPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetGiftPermissionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_permissions_){from._impl_.friend_permissions_}
    , decltype(_impl_.is_unlimited_){}
    , decltype(_impl_.has_two_factor_){}
    , decltype(_impl_.sender_permission_){}
    , decltype(_impl_.friendship_age_requirement_){}
    , decltype(_impl_.friendship_age_requirement_two_factor_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_unlimited_, &from._impl_.is_unlimited_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.friendship_age_requirement_two_factor_) -
    reinterpret_cast<char*>(&_impl_.is_unlimited_)) + sizeof(_impl_.friendship_age_requirement_two_factor_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetGiftPermissionsResponse)
}

inline void CMsgClientToGCGetGiftPermissionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_permissions_){arena}
    , decltype(_impl_.is_unlimited_){false}
    , decltype(_impl_.has_two_factor_){false}
    , decltype(_impl_.sender_permission_){0}
    , decltype(_impl_.friendship_age_requirement_){0u}
    , decltype(_impl_.friendship_age_requirement_two_factor_){0u}
  };
}

CMsgClientToGCGetGiftPermissionsResponse::~CMsgClientToGCGetGiftPermissionsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetGiftPermissionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetGiftPermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friend_permissions_.~RepeatedPtrField();
}

void CMsgClientToGCGetGiftPermissionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetGiftPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetGiftPermissionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_permissions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.is_unlimited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.friendship_age_requirement_two_factor_) -
        reinterpret_cast<char*>(&_impl_.is_unlimited_)) + sizeof(_impl_.friendship_age_requirement_two_factor_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetGiftPermissionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_unlimited = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_unlimited(&has_bits);
          _impl_.is_unlimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_two_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_has_two_factor(&has_bits);
          _impl_.has_two_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EGCMsgInitiateTradeResponse sender_permission = 6 [default = k_EGCMsgInitiateTradeResponse_Accepted];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgInitiateTradeResponse_IsValid(val))) {
            _internal_set_sender_permission(static_cast<::EGCMsgInitiateTradeResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friendship_age_requirement = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_friendship_age_requirement(&has_bits);
          _impl_.friendship_age_requirement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friendship_age_requirement_two_factor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_friendship_age_requirement_two_factor(&has_bits);
          _impl_.friendship_age_requirement_two_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friend_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetGiftPermissionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetGiftPermissionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_unlimited = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_unlimited(), target);
  }

  // optional bool has_two_factor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_two_factor(), target);
  }

  // optional .EGCMsgInitiateTradeResponse sender_permission = 6 [default = k_EGCMsgInitiateTradeResponse_Accepted];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sender_permission(), target);
  }

  // optional uint32 friendship_age_requirement = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_friendship_age_requirement(), target);
  }

  // optional uint32 friendship_age_requirement_two_factor = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_friendship_age_requirement_two_factor(), target);
  }

  // repeated .CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friend_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_friend_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetGiftPermissionsResponse)
  return target;
}

size_t CMsgClientToGCGetGiftPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetGiftPermissionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
  total_size += 1UL * this->_internal_friend_permissions_size();
  for (const auto& msg : this->_impl_.friend_permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool is_unlimited = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_two_factor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .EGCMsgInitiateTradeResponse sender_permission = 6 [default = k_EGCMsgInitiateTradeResponse_Accepted];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sender_permission());
    }

    // optional uint32 friendship_age_requirement = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_friendship_age_requirement());
    }

    // optional uint32 friendship_age_requirement_two_factor = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_friendship_age_requirement_two_factor());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetGiftPermissionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetGiftPermissionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetGiftPermissionsResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetGiftPermissionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetGiftPermissionsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetGiftPermissionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetGiftPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friend_permissions_.MergeFrom(from._impl_.friend_permissions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.is_unlimited_ = from._impl_.is_unlimited_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.has_two_factor_ = from._impl_.has_two_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sender_permission_ = from._impl_.sender_permission_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.friendship_age_requirement_ = from._impl_.friendship_age_requirement_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.friendship_age_requirement_two_factor_ = from._impl_.friendship_age_requirement_two_factor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetGiftPermissionsResponse::CopyFrom(const CMsgClientToGCGetGiftPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetGiftPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetGiftPermissionsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetGiftPermissionsResponse::InternalSwap(CMsgClientToGCGetGiftPermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.friend_permissions_.InternalSwap(&other->_impl_.friend_permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse, _impl_.friendship_age_requirement_two_factor_)
      + sizeof(CMsgClientToGCGetGiftPermissionsResponse::_impl_.friendship_age_requirement_two_factor_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse, _impl_.is_unlimited_)>(
          reinterpret_cast<char*>(&_impl_.is_unlimited_),
          reinterpret_cast<char*>(&other->_impl_.is_unlimited_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetGiftPermissionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[53]);
}

// ===================================================================

class CMsgClientToGCUnpackBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnpackBundle>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnpackBundle::CMsgClientToGCUnpackBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnpackBundle)
}
CMsgClientToGCUnpackBundle::CMsgClientToGCUnpackBundle(const CMsgClientToGCUnpackBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnpackBundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnpackBundle)
}

inline void CMsgClientToGCUnpackBundle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
  };
}

CMsgClientToGCUnpackBundle::~CMsgClientToGCUnpackBundle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnpackBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnpackBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCUnpackBundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnpackBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnpackBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnpackBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnpackBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnpackBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnpackBundle)
  return target;
}

size_t CMsgClientToGCUnpackBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnpackBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnpackBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnpackBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnpackBundle::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnpackBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnpackBundle*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnpackBundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnpackBundle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnpackBundle::CopyFrom(const CMsgClientToGCUnpackBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnpackBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnpackBundle::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnpackBundle::InternalSwap(CMsgClientToGCUnpackBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnpackBundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[54]);
}

// ===================================================================

class CMsgClientToGCUnpackBundleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnpackBundleResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnpackBundleResponse::CMsgClientToGCUnpackBundleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnpackBundleResponse)
}
CMsgClientToGCUnpackBundleResponse::CMsgClientToGCUnpackBundleResponse(const CMsgClientToGCUnpackBundleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnpackBundleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unpacked_item_ids_){from._impl_.unpacked_item_ids_}
    , decltype(_impl_.unpacked_item_def_indexes_){from._impl_.unpacked_item_def_indexes_}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnpackBundleResponse)
}

inline void CMsgClientToGCUnpackBundleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unpacked_item_ids_){arena}
    , decltype(_impl_.unpacked_item_def_indexes_){arena}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCUnpackBundleResponse::~CMsgClientToGCUnpackBundleResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnpackBundleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnpackBundleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unpacked_item_ids_.~RepeatedField();
  _impl_.unpacked_item_def_indexes_.~RepeatedField();
}

void CMsgClientToGCUnpackBundleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnpackBundleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnpackBundleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unpacked_item_ids_.Clear();
  _impl_.unpacked_item_def_indexes_.Clear();
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnpackBundleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 unpacked_item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unpacked_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unpacked_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2 [default = k_UnpackBundle_Succeeded];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCUnpackBundleResponse_EUnpackBundle_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCUnpackBundleResponse_EUnpackBundle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 unpacked_item_def_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unpacked_item_def_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unpacked_item_def_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnpackBundleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnpackBundleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 unpacked_item_ids = 1;
  for (int i = 0, n = this->_internal_unpacked_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unpacked_item_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2 [default = k_UnpackBundle_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  // repeated uint32 unpacked_item_def_indexes = 3;
  for (int i = 0, n = this->_internal_unpacked_item_def_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unpacked_item_def_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnpackBundleResponse)
  return target;
}

size_t CMsgClientToGCUnpackBundleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnpackBundleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 unpacked_item_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.unpacked_item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_item_ids_size());
    total_size += data_size;
  }

  // repeated uint32 unpacked_item_def_indexes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.unpacked_item_def_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_item_def_indexes_size());
    total_size += data_size;
  }

  // optional .CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2 [default = k_UnpackBundle_Succeeded];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnpackBundleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnpackBundleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnpackBundleResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnpackBundleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnpackBundleResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnpackBundleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnpackBundleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unpacked_item_ids_.MergeFrom(from._impl_.unpacked_item_ids_);
  _this->_impl_.unpacked_item_def_indexes_.MergeFrom(from._impl_.unpacked_item_def_indexes_);
  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnpackBundleResponse::CopyFrom(const CMsgClientToGCUnpackBundleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnpackBundleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnpackBundleResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnpackBundleResponse::InternalSwap(CMsgClientToGCUnpackBundleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.unpacked_item_ids_.InternalSwap(&other->_impl_.unpacked_item_ids_);
  _impl_.unpacked_item_def_indexes_.InternalSwap(&other->_impl_.unpacked_item_def_indexes_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnpackBundleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[55]);
}

// ===================================================================

class CMsgClientToGCPackBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPackBundle>()._impl_._has_bits_);
  static void set_has_bundle_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCPackBundle::CMsgClientToGCPackBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPackBundle)
}
CMsgClientToGCPackBundle::CMsgClientToGCPackBundle(const CMsgClientToGCPackBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCPackBundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , decltype(_impl_.bundle_item_def_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bundle_item_def_index_ = from._impl_.bundle_item_def_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPackBundle)
}

inline void CMsgClientToGCPackBundle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){arena}
    , decltype(_impl_.bundle_item_def_index_){0u}
  };
}

CMsgClientToGCPackBundle::~CMsgClientToGCPackBundle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPackBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCPackBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgClientToGCPackBundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCPackBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPackBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  _impl_.bundle_item_def_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPackBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bundle_item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bundle_item_def_index(&has_bits);
          _impl_.bundle_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCPackBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPackBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bundle_item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bundle_item_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPackBundle)
  return target;
}

size_t CMsgClientToGCPackBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPackBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // optional uint32 bundle_item_def_index = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bundle_item_def_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCPackBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCPackBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCPackBundle::GetClassData() const { return &_class_data_; }


void CMsgClientToGCPackBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCPackBundle*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCPackBundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPackBundle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  if (from._internal_has_bundle_item_def_index()) {
    _this->_internal_set_bundle_item_def_index(from._internal_bundle_item_def_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCPackBundle::CopyFrom(const CMsgClientToGCPackBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPackBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPackBundle::IsInitialized() const {
  return true;
}

void CMsgClientToGCPackBundle::InternalSwap(CMsgClientToGCPackBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  swap(_impl_.bundle_item_def_index_, other->_impl_.bundle_item_def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPackBundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[56]);
}

// ===================================================================

class CMsgClientToGCPackBundleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPackBundleResponse>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPackBundleResponse::CMsgClientToGCPackBundleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPackBundleResponse)
}
CMsgClientToGCPackBundleResponse::CMsgClientToGCPackBundleResponse(const CMsgClientToGCPackBundleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCPackBundleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPackBundleResponse)
}

inline void CMsgClientToGCPackBundleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCPackBundleResponse::~CMsgClientToGCPackBundleResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPackBundleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCPackBundleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCPackBundleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCPackBundleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPackBundleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPackBundleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCPackBundleResponse.EPackBundle response = 2 [default = k_PackBundle_Succeeded];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCPackBundleResponse_EPackBundle_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCPackBundleResponse_EPackBundle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCPackBundleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPackBundleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional .CMsgClientToGCPackBundleResponse.EPackBundle response = 2 [default = k_PackBundle_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPackBundleResponse)
  return target;
}

size_t CMsgClientToGCPackBundleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPackBundleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional .CMsgClientToGCPackBundleResponse.EPackBundle response = 2 [default = k_PackBundle_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCPackBundleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCPackBundleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCPackBundleResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCPackBundleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCPackBundleResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCPackBundleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPackBundleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCPackBundleResponse::CopyFrom(const CMsgClientToGCPackBundleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPackBundleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPackBundleResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCPackBundleResponse::InternalSwap(CMsgClientToGCPackBundleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCPackBundleResponse, _impl_.response_)
      + sizeof(CMsgClientToGCPackBundleResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCPackBundleResponse, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPackBundleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[57]);
}

// ===================================================================

class CMsgGCToClientStoreTransactionCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientStoreTransactionCompleted>()._impl_._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientStoreTransactionCompleted::CMsgGCToClientStoreTransactionCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientStoreTransactionCompleted)
}
CMsgGCToClientStoreTransactionCompleted::CMsgGCToClientStoreTransactionCompleted(const CMsgGCToClientStoreTransactionCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientStoreTransactionCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , decltype(_impl_.txn_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.txn_id_ = from._impl_.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientStoreTransactionCompleted)
}

inline void CMsgGCToClientStoreTransactionCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){arena}
    , decltype(_impl_.txn_id_){uint64_t{0u}}
  };
}

CMsgGCToClientStoreTransactionCompleted::~CMsgGCToClientStoreTransactionCompleted() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientStoreTransactionCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientStoreTransactionCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgGCToClientStoreTransactionCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientStoreTransactionCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientStoreTransactionCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  _impl_.txn_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientStoreTransactionCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          _impl_.txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientStoreTransactionCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientStoreTransactionCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientStoreTransactionCompleted)
  return target;
}

size_t CMsgGCToClientStoreTransactionCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientStoreTransactionCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // optional uint64 txn_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientStoreTransactionCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientStoreTransactionCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientStoreTransactionCompleted::GetClassData() const { return &_class_data_; }


void CMsgGCToClientStoreTransactionCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientStoreTransactionCompleted*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientStoreTransactionCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientStoreTransactionCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  if (from._internal_has_txn_id()) {
    _this->_internal_set_txn_id(from._internal_txn_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientStoreTransactionCompleted::CopyFrom(const CMsgGCToClientStoreTransactionCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientStoreTransactionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientStoreTransactionCompleted::IsInitialized() const {
  return true;
}

void CMsgGCToClientStoreTransactionCompleted::InternalSwap(CMsgGCToClientStoreTransactionCompleted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  swap(_impl_.txn_id_, other->_impl_.txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientStoreTransactionCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[58]);
}

// ===================================================================

class CMsgClientToGCEquipItems::_Internal {
 public:
};

CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCEquipItems)
}
CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(const CMsgClientToGCEquipItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCEquipItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){from._impl_.equips_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCEquipItems)
}

inline void CMsgClientToGCEquipItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgClientToGCEquipItems::~CMsgClientToGCEquipItems() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCEquipItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCEquipItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.~RepeatedPtrField();
}

void CMsgClientToGCEquipItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCEquipItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCEquipItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCEquipItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgAdjustItemEquippedState equips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCEquipItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCEquipItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgAdjustItemEquippedState equips = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equips_size()); i < n; i++) {
    const auto& repfield = this->_internal_equips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCEquipItems)
  return target;
}

size_t CMsgClientToGCEquipItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCEquipItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAdjustItemEquippedState equips = 1;
  total_size += 1UL * this->_internal_equips_size();
  for (const auto& msg : this->_impl_.equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCEquipItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCEquipItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCEquipItems::GetClassData() const { return &_class_data_; }


void CMsgClientToGCEquipItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCEquipItems*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCEquipItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCEquipItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCEquipItems::CopyFrom(const CMsgClientToGCEquipItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCEquipItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCEquipItems::IsInitialized() const {
  return true;
}

void CMsgClientToGCEquipItems::InternalSwap(CMsgClientToGCEquipItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCEquipItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[59]);
}

// ===================================================================

class CMsgClientToGCEquipItemsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCEquipItemsResponse>()._impl_._has_bits_);
  static void set_has_so_cache_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCEquipItemsResponse::CMsgClientToGCEquipItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCEquipItemsResponse)
}
CMsgClientToGCEquipItemsResponse::CMsgClientToGCEquipItemsResponse(const CMsgClientToGCEquipItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCEquipItemsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.so_cache_version_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.so_cache_version_id_ = from._impl_.so_cache_version_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCEquipItemsResponse)
}

inline void CMsgClientToGCEquipItemsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.so_cache_version_id_){uint64_t{0u}}
  };
}

CMsgClientToGCEquipItemsResponse::~CMsgClientToGCEquipItemsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCEquipItemsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCEquipItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCEquipItemsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCEquipItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCEquipItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.so_cache_version_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCEquipItemsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 so_cache_version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_so_cache_version_id(&has_bits);
          _impl_.so_cache_version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCEquipItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCEquipItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 so_cache_version_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_so_cache_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCEquipItemsResponse)
  return target;
}

size_t CMsgClientToGCEquipItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCEquipItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 so_cache_version_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCEquipItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCEquipItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCEquipItemsResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCEquipItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCEquipItemsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCEquipItemsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCEquipItemsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_so_cache_version_id()) {
    _this->_internal_set_so_cache_version_id(from._internal_so_cache_version_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCEquipItemsResponse::CopyFrom(const CMsgClientToGCEquipItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCEquipItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCEquipItemsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCEquipItemsResponse::InternalSwap(CMsgClientToGCEquipItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.so_cache_version_id_, other->_impl_.so_cache_version_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCEquipItemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[60]);
}

// ===================================================================

class CMsgClientToGCSetItemStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetItemStyle>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetItemStyle)
}
CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(const CMsgClientToGCSetItemStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCSetItemStyle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.style_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_index_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetItemStyle)
}

inline void CMsgClientToGCSetItemStyle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.style_index_){255u}
  };
}

CMsgClientToGCSetItemStyle::~CMsgClientToGCSetItemStyle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetItemStyle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCSetItemStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCSetItemStyle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCSetItemStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetItemStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.item_id_ = uint64_t{0u};
    _impl_.style_index_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetItemStyle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_index = 2 [default = 255];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_style_index(&has_bits);
          _impl_.style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSetItemStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetItemStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 style_index = 2 [default = 255];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetItemStyle)
  return target;
}

size_t CMsgClientToGCSetItemStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetItemStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 style_index = 2 [default = 255];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSetItemStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCSetItemStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSetItemStyle::GetClassData() const { return &_class_data_; }


void CMsgClientToGCSetItemStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCSetItemStyle*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCSetItemStyle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetItemStyle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.style_index_ = from._impl_.style_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSetItemStyle::CopyFrom(const CMsgClientToGCSetItemStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetItemStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetItemStyle::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetItemStyle::InternalSwap(CMsgClientToGCSetItemStyle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_id_, other->_impl_.item_id_);
  swap(_impl_.style_index_, other->_impl_.style_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetItemStyle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[61]);
}

// ===================================================================

class CMsgClientToGCSetItemStyleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetItemStyleResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCSetItemStyleResponse::CMsgClientToGCSetItemStyleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetItemStyleResponse)
}
CMsgClientToGCSetItemStyleResponse::CMsgClientToGCSetItemStyleResponse(const CMsgClientToGCSetItemStyleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCSetItemStyleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetItemStyleResponse)
}

inline void CMsgClientToGCSetItemStyleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCSetItemStyleResponse::~CMsgClientToGCSetItemStyleResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetItemStyleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCSetItemStyleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCSetItemStyleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCSetItemStyleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetItemStyleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetItemStyleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1 [default = k_SetStyle_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCSetItemStyleResponse_ESetStyle_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCSetItemStyleResponse_ESetStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSetItemStyleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetItemStyleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1 [default = k_SetStyle_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetItemStyleResponse)
  return target;
}

size_t CMsgClientToGCSetItemStyleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetItemStyleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1 [default = k_SetStyle_Succeeded];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSetItemStyleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCSetItemStyleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSetItemStyleResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCSetItemStyleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCSetItemStyleResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCSetItemStyleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetItemStyleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSetItemStyleResponse::CopyFrom(const CMsgClientToGCSetItemStyleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetItemStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetItemStyleResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetItemStyleResponse::InternalSwap(CMsgClientToGCSetItemStyleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetItemStyleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[62]);
}

// ===================================================================

class CMsgClientToGCUnlockItemStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockItemStyle>()._impl_._has_bits_);
  static void set_has_item_to_unlock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCUnlockItemStyle::CMsgClientToGCUnlockItemStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockItemStyle)
}
CMsgClientToGCUnlockItemStyle::CMsgClientToGCUnlockItemStyle(const CMsgClientToGCUnlockItemStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnlockItemStyle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.consumable_item_ids_){from._impl_.consumable_item_ids_}
    , decltype(_impl_.item_to_unlock_){}
    , decltype(_impl_.style_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_to_unlock_, &from._impl_.item_to_unlock_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_index_) -
    reinterpret_cast<char*>(&_impl_.item_to_unlock_)) + sizeof(_impl_.style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockItemStyle)
}

inline void CMsgClientToGCUnlockItemStyle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.consumable_item_ids_){arena}
    , decltype(_impl_.item_to_unlock_){uint64_t{0u}}
    , decltype(_impl_.style_index_){255u}
  };
}

CMsgClientToGCUnlockItemStyle::~CMsgClientToGCUnlockItemStyle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockItemStyle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnlockItemStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumable_item_ids_.~RepeatedField();
}

void CMsgClientToGCUnlockItemStyle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnlockItemStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockItemStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumable_item_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.item_to_unlock_ = uint64_t{0u};
    _impl_.style_index_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockItemStyle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_to_unlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_to_unlock(&has_bits);
          _impl_.item_to_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_index = 2 [default = 255];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_style_index(&has_bits);
          _impl_.style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 consumable_item_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_consumable_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_consumable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnlockItemStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockItemStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_to_unlock = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_to_unlock(), target);
  }

  // optional uint32 style_index = 2 [default = 255];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style_index(), target);
  }

  // repeated uint64 consumable_item_ids = 3;
  for (int i = 0, n = this->_internal_consumable_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_consumable_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockItemStyle)
  return target;
}

size_t CMsgClientToGCUnlockItemStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockItemStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 consumable_item_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.consumable_item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_consumable_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_to_unlock = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_to_unlock());
    }

    // optional uint32 style_index = 2 [default = 255];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnlockItemStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnlockItemStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnlockItemStyle::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnlockItemStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnlockItemStyle*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnlockItemStyle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockItemStyle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumable_item_ids_.MergeFrom(from._impl_.consumable_item_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_to_unlock_ = from._impl_.item_to_unlock_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.style_index_ = from._impl_.style_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnlockItemStyle::CopyFrom(const CMsgClientToGCUnlockItemStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockItemStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockItemStyle::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockItemStyle::InternalSwap(CMsgClientToGCUnlockItemStyle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.consumable_item_ids_.InternalSwap(&other->_impl_.consumable_item_ids_);
  swap(_impl_.item_to_unlock_, other->_impl_.item_to_unlock_);
  swap(_impl_.style_index_, other->_impl_.style_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockItemStyle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[63]);
}

// ===================================================================

class CMsgClientToGCUnlockItemStyleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockItemStyleResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style_prereq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCUnlockItemStyleResponse::CMsgClientToGCUnlockItemStyleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockItemStyleResponse)
}
CMsgClientToGCUnlockItemStyleResponse::CMsgClientToGCUnlockItemStyleResponse(const CMsgClientToGCUnlockItemStyleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnlockItemStyleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.response_){}
    , decltype(_impl_.style_index_){}
    , decltype(_impl_.style_prereq_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_prereq_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.style_prereq_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockItemStyleResponse)
}

inline void CMsgClientToGCUnlockItemStyleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0}
    , decltype(_impl_.style_index_){255u}
    , decltype(_impl_.style_prereq_){255u}
  };
}

CMsgClientToGCUnlockItemStyleResponse::~CMsgClientToGCUnlockItemStyleResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockItemStyleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnlockItemStyleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCUnlockItemStyleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnlockItemStyleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockItemStyleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
    _impl_.style_index_ = 255u;
    _impl_.style_prereq_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockItemStyleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1 [default = k_UnlockStyle_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_index = 3 [default = 255];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_style_index(&has_bits);
          _impl_.style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_prereq = 4 [default = 255];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_style_prereq(&has_bits);
          _impl_.style_prereq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnlockItemStyleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockItemStyleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1 [default = k_UnlockStyle_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 style_index = 3 [default = 255];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_style_index(), target);
  }

  // optional uint32 style_prereq = 4 [default = 255];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style_prereq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockItemStyleResponse)
  return target;
}

size_t CMsgClientToGCUnlockItemStyleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockItemStyleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional .CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1 [default = k_UnlockStyle_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

    // optional uint32 style_index = 3 [default = 255];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style_index());
    }

    // optional uint32 style_prereq = 4 [default = 255];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style_prereq());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnlockItemStyleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnlockItemStyleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnlockItemStyleResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnlockItemStyleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnlockItemStyleResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnlockItemStyleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockItemStyleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.style_index_ = from._impl_.style_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.style_prereq_ = from._impl_.style_prereq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnlockItemStyleResponse::CopyFrom(const CMsgClientToGCUnlockItemStyleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockItemStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockItemStyleResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockItemStyleResponse::InternalSwap(CMsgClientToGCUnlockItemStyleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockItemStyleResponse, _impl_.response_)
      + sizeof(CMsgClientToGCUnlockItemStyleResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockItemStyleResponse, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
  swap(_impl_.style_index_, other->_impl_.style_index_);
  swap(_impl_.style_prereq_, other->_impl_.style_prereq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockItemStyleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[64]);
}

// ===================================================================

class CMsgClientToGCSetItemInventoryCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetItemInventoryCategory>()._impl_._has_bits_);
  static void set_has_set_to_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remove_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_add_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCSetItemInventoryCategory::CMsgClientToGCSetItemInventoryCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetItemInventoryCategory)
}
CMsgClientToGCSetItemInventoryCategory::CMsgClientToGCSetItemInventoryCategory(const CMsgClientToGCSetItemInventoryCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCSetItemInventoryCategory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , decltype(_impl_.set_to_value_){}
    , decltype(_impl_.remove_categories_){}
    , decltype(_impl_.add_categories_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.set_to_value_, &from._impl_.set_to_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.add_categories_) -
    reinterpret_cast<char*>(&_impl_.set_to_value_)) + sizeof(_impl_.add_categories_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetItemInventoryCategory)
}

inline void CMsgClientToGCSetItemInventoryCategory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){arena}
    , decltype(_impl_.set_to_value_){0u}
    , decltype(_impl_.remove_categories_){0u}
    , decltype(_impl_.add_categories_){0u}
  };
}

CMsgClientToGCSetItemInventoryCategory::~CMsgClientToGCSetItemInventoryCategory() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetItemInventoryCategory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCSetItemInventoryCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgClientToGCSetItemInventoryCategory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCSetItemInventoryCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetItemInventoryCategory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.set_to_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.add_categories_) -
        reinterpret_cast<char*>(&_impl_.set_to_value_)) + sizeof(_impl_.add_categories_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetItemInventoryCategory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 set_to_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_set_to_value(&has_bits);
          _impl_.set_to_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remove_categories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_remove_categories(&has_bits);
          _impl_.remove_categories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 add_categories = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_add_categories(&has_bits);
          _impl_.add_categories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSetItemInventoryCategory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetItemInventoryCategory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 set_to_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_set_to_value(), target);
  }

  // optional uint32 remove_categories = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remove_categories(), target);
  }

  // optional uint32 add_categories = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_add_categories(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetItemInventoryCategory)
  return target;
}

size_t CMsgClientToGCSetItemInventoryCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetItemInventoryCategory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 set_to_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_set_to_value());
    }

    // optional uint32 remove_categories = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remove_categories());
    }

    // optional uint32 add_categories = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_add_categories());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSetItemInventoryCategory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCSetItemInventoryCategory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSetItemInventoryCategory::GetClassData() const { return &_class_data_; }


void CMsgClientToGCSetItemInventoryCategory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCSetItemInventoryCategory*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCSetItemInventoryCategory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetItemInventoryCategory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.set_to_value_ = from._impl_.set_to_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remove_categories_ = from._impl_.remove_categories_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.add_categories_ = from._impl_.add_categories_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSetItemInventoryCategory::CopyFrom(const CMsgClientToGCSetItemInventoryCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetItemInventoryCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetItemInventoryCategory::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetItemInventoryCategory::InternalSwap(CMsgClientToGCSetItemInventoryCategory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemInventoryCategory, _impl_.add_categories_)
      + sizeof(CMsgClientToGCSetItemInventoryCategory::_impl_.add_categories_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemInventoryCategory, _impl_.set_to_value_)>(
          reinterpret_cast<char*>(&_impl_.set_to_value_),
          reinterpret_cast<char*>(&other->_impl_.set_to_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetItemInventoryCategory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[65]);
}

// ===================================================================

class CMsgClientToGCUnlockCrate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockCrate>()._impl_._has_bits_);
  static void set_has_crate_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCUnlockCrate::CMsgClientToGCUnlockCrate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockCrate)
}
CMsgClientToGCUnlockCrate::CMsgClientToGCUnlockCrate(const CMsgClientToGCUnlockCrate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnlockCrate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crate_item_id_){}
    , decltype(_impl_.key_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.crate_item_id_, &from._impl_.crate_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.key_item_id_) -
    reinterpret_cast<char*>(&_impl_.crate_item_id_)) + sizeof(_impl_.key_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockCrate)
}

inline void CMsgClientToGCUnlockCrate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crate_item_id_){uint64_t{0u}}
    , decltype(_impl_.key_item_id_){uint64_t{0u}}
  };
}

CMsgClientToGCUnlockCrate::~CMsgClientToGCUnlockCrate() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockCrate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnlockCrate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCUnlockCrate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnlockCrate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockCrate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.crate_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.key_item_id_) -
        reinterpret_cast<char*>(&_impl_.crate_item_id_)) + sizeof(_impl_.key_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockCrate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 crate_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_crate_item_id(&has_bits);
          _impl_.crate_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 key_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_key_item_id(&has_bits);
          _impl_.key_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnlockCrate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockCrate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 crate_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_crate_item_id(), target);
  }

  // optional uint64 key_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockCrate)
  return target;
}

size_t CMsgClientToGCUnlockCrate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockCrate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 crate_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_crate_item_id());
    }

    // optional uint64 key_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_key_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnlockCrate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnlockCrate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnlockCrate::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnlockCrate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnlockCrate*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnlockCrate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockCrate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.crate_item_id_ = from._impl_.crate_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_item_id_ = from._impl_.key_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnlockCrate::CopyFrom(const CMsgClientToGCUnlockCrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockCrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockCrate::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockCrate::InternalSwap(CMsgClientToGCUnlockCrate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrate, _impl_.key_item_id_)
      + sizeof(CMsgClientToGCUnlockCrate::_impl_.key_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrate, _impl_.crate_item_id_)>(
          reinterpret_cast<char*>(&_impl_.crate_item_id_),
          reinterpret_cast<char*>(&other->_impl_.crate_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockCrate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[66]);
}

// ===================================================================

class CMsgClientToGCUnlockCrateResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockCrateResponse_Item>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCUnlockCrateResponse_Item::CMsgClientToGCUnlockCrateResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockCrateResponse.Item)
}
CMsgClientToGCUnlockCrateResponse_Item::CMsgClientToGCUnlockCrateResponse_Item(const CMsgClientToGCUnlockCrateResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnlockCrateResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.def_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.def_index_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.def_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockCrateResponse.Item)
}

inline void CMsgClientToGCUnlockCrateResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.def_index_){0u}
  };
}

CMsgClientToGCUnlockCrateResponse_Item::~CMsgClientToGCUnlockCrateResponse_Item() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockCrateResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnlockCrateResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCUnlockCrateResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnlockCrateResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockCrateResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.def_index_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.def_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockCrateResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnlockCrateResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockCrateResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockCrateResponse.Item)
  return target;
}

size_t CMsgClientToGCUnlockCrateResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockCrateResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnlockCrateResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnlockCrateResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnlockCrateResponse_Item::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnlockCrateResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnlockCrateResponse_Item*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnlockCrateResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockCrateResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.def_index_ = from._impl_.def_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnlockCrateResponse_Item::CopyFrom(const CMsgClientToGCUnlockCrateResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockCrateResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockCrateResponse_Item::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockCrateResponse_Item::InternalSwap(CMsgClientToGCUnlockCrateResponse_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrateResponse_Item, _impl_.def_index_)
      + sizeof(CMsgClientToGCUnlockCrateResponse_Item::_impl_.def_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrateResponse_Item, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockCrateResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[67]);
}

// ===================================================================

class CMsgClientToGCUnlockCrateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockCrateResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnlockCrateResponse::CMsgClientToGCUnlockCrateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockCrateResponse)
}
CMsgClientToGCUnlockCrateResponse::CMsgClientToGCUnlockCrateResponse(const CMsgClientToGCUnlockCrateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCUnlockCrateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granted_items_){from._impl_.granted_items_}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockCrateResponse)
}

inline void CMsgClientToGCUnlockCrateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granted_items_){arena}
    , decltype(_impl_.result_){0}
  };
}

CMsgClientToGCUnlockCrateResponse::~CMsgClientToGCUnlockCrateResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockCrateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCUnlockCrateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.granted_items_.~RepeatedPtrField();
}

void CMsgClientToGCUnlockCrateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCUnlockCrateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockCrateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.granted_items_.Clear();
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockCrateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EGCMsgResponse result = 1 [default = k_EGCMsgResponseOK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgResponse_IsValid(val))) {
            _internal_set_result(static_cast<::EGCMsgResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_granted_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCUnlockCrateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockCrateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EGCMsgResponse result = 1 [default = k_EGCMsgResponseOK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_granted_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_granted_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockCrateResponse)
  return target;
}

size_t CMsgClientToGCUnlockCrateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockCrateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
  total_size += 1UL * this->_internal_granted_items_size();
  for (const auto& msg : this->_impl_.granted_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EGCMsgResponse result = 1 [default = k_EGCMsgResponseOK];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCUnlockCrateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCUnlockCrateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCUnlockCrateResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCUnlockCrateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCUnlockCrateResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCUnlockCrateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockCrateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.granted_items_.MergeFrom(from._impl_.granted_items_);
  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCUnlockCrateResponse::CopyFrom(const CMsgClientToGCUnlockCrateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockCrateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockCrateResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockCrateResponse::InternalSwap(CMsgClientToGCUnlockCrateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.granted_items_.InternalSwap(&other->_impl_.granted_items_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockCrateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[68]);
}

// ===================================================================

class CMsgClientToGCRemoveItemAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRemoveItemAttribute>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRemoveItemAttribute::CMsgClientToGCRemoveItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRemoveItemAttribute)
}
CMsgClientToGCRemoveItemAttribute::CMsgClientToGCRemoveItemAttribute(const CMsgClientToGCRemoveItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRemoveItemAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRemoveItemAttribute)
}

inline void CMsgClientToGCRemoveItemAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
  };
}

CMsgClientToGCRemoveItemAttribute::~CMsgClientToGCRemoveItemAttribute() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRemoveItemAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRemoveItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRemoveItemAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRemoveItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRemoveItemAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRemoveItemAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRemoveItemAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRemoveItemAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRemoveItemAttribute)
  return target;
}

size_t CMsgClientToGCRemoveItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRemoveItemAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRemoveItemAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRemoveItemAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRemoveItemAttribute::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRemoveItemAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRemoveItemAttribute*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRemoveItemAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRemoveItemAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRemoveItemAttribute::CopyFrom(const CMsgClientToGCRemoveItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRemoveItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRemoveItemAttribute::IsInitialized() const {
  return true;
}

void CMsgClientToGCRemoveItemAttribute::InternalSwap(CMsgClientToGCRemoveItemAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRemoveItemAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[69]);
}

// ===================================================================

class CMsgClientToGCRemoveItemAttributeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRemoveItemAttributeResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRemoveItemAttributeResponse::CMsgClientToGCRemoveItemAttributeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRemoveItemAttributeResponse)
}
CMsgClientToGCRemoveItemAttributeResponse::CMsgClientToGCRemoveItemAttributeResponse(const CMsgClientToGCRemoveItemAttributeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRemoveItemAttributeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRemoveItemAttributeResponse)
}

inline void CMsgClientToGCRemoveItemAttributeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCRemoveItemAttributeResponse::~CMsgClientToGCRemoveItemAttributeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRemoveItemAttributeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRemoveItemAttributeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRemoveItemAttributeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRemoveItemAttributeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRemoveItemAttributeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRemoveItemAttributeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1 [default = k_RemoveItemAttribute_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRemoveItemAttributeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRemoveItemAttributeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1 [default = k_RemoveItemAttribute_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRemoveItemAttributeResponse)
  return target;
}

size_t CMsgClientToGCRemoveItemAttributeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRemoveItemAttributeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional .CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1 [default = k_RemoveItemAttribute_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRemoveItemAttributeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRemoveItemAttributeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRemoveItemAttributeResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRemoveItemAttributeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRemoveItemAttributeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRemoveItemAttributeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRemoveItemAttributeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRemoveItemAttributeResponse::CopyFrom(const CMsgClientToGCRemoveItemAttributeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRemoveItemAttributeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRemoveItemAttributeResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRemoveItemAttributeResponse::InternalSwap(CMsgClientToGCRemoveItemAttributeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRemoveItemAttributeResponse, _impl_.response_)
      + sizeof(CMsgClientToGCRemoveItemAttributeResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRemoveItemAttributeResponse, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRemoveItemAttributeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[70]);
}

// ===================================================================

class CMsgClientToGCNameItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCNameItem>()._impl_._has_bits_);
  static void set_has_subject_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCNameItem::CMsgClientToGCNameItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCNameItem)
}
CMsgClientToGCNameItem::CMsgClientToGCNameItem(const CMsgClientToGCNameItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCNameItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.subject_item_id_){}
    , decltype(_impl_.tool_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.subject_item_id_, &from._impl_.subject_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tool_item_id_) -
    reinterpret_cast<char*>(&_impl_.subject_item_id_)) + sizeof(_impl_.tool_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCNameItem)
}

inline void CMsgClientToGCNameItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.subject_item_id_){uint64_t{0u}}
    , decltype(_impl_.tool_item_id_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCNameItem::~CMsgClientToGCNameItem() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCNameItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCNameItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CMsgClientToGCNameItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCNameItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCNameItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.subject_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tool_item_id_) -
        reinterpret_cast<char*>(&_impl_.subject_item_id_)) + sizeof(_impl_.tool_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCNameItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 subject_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_subject_item_id(&has_bits);
          _impl_.subject_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tool_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tool_item_id(&has_bits);
          _impl_.tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCNameItem.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCNameItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCNameItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 subject_item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_subject_item_id(), target);
  }

  // optional uint64 tool_item_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tool_item_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCNameItem.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCNameItem)
  return target;
}

size_t CMsgClientToGCNameItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCNameItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 subject_item_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_subject_item_id());
    }

    // optional uint64 tool_item_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tool_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCNameItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCNameItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCNameItem::GetClassData() const { return &_class_data_; }


void CMsgClientToGCNameItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCNameItem*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCNameItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCNameItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.subject_item_id_ = from._impl_.subject_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tool_item_id_ = from._impl_.tool_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCNameItem::CopyFrom(const CMsgClientToGCNameItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCNameItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCNameItem::IsInitialized() const {
  return true;
}

void CMsgClientToGCNameItem::InternalSwap(CMsgClientToGCNameItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItem, _impl_.tool_item_id_)
      + sizeof(CMsgClientToGCNameItem::_impl_.tool_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItem, _impl_.subject_item_id_)>(
          reinterpret_cast<char*>(&_impl_.subject_item_id_),
          reinterpret_cast<char*>(&other->_impl_.subject_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCNameItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[71]);
}

// ===================================================================

class CMsgClientToGCNameItemResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCNameItemResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCNameItemResponse::CMsgClientToGCNameItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCNameItemResponse)
}
CMsgClientToGCNameItemResponse::CMsgClientToGCNameItemResponse(const CMsgClientToGCNameItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCNameItemResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCNameItemResponse)
}

inline void CMsgClientToGCNameItemResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCNameItemResponse::~CMsgClientToGCNameItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCNameItemResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCNameItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCNameItemResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCNameItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCNameItemResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCNameItemResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCNameItemResponse.ENameItem response = 1 [default = k_NameItem_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCNameItemResponse_ENameItem_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCNameItemResponse_ENameItem>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCNameItemResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCNameItemResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCNameItemResponse.ENameItem response = 1 [default = k_NameItem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCNameItemResponse)
  return target;
}

size_t CMsgClientToGCNameItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCNameItemResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional .CMsgClientToGCNameItemResponse.ENameItem response = 1 [default = k_NameItem_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCNameItemResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCNameItemResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCNameItemResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCNameItemResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCNameItemResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCNameItemResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCNameItemResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCNameItemResponse::CopyFrom(const CMsgClientToGCNameItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCNameItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCNameItemResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCNameItemResponse::InternalSwap(CMsgClientToGCNameItemResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItemResponse, _impl_.response_)
      + sizeof(CMsgClientToGCNameItemResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItemResponse, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCNameItemResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[72]);
}

// ===================================================================

class CMsgGCSetItemPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCSetItemPosition>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCSetItemPosition::CMsgGCSetItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCSetItemPosition)
}
CMsgGCSetItemPosition::CMsgGCSetItemPosition(const CMsgGCSetItemPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCSetItemPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.new_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_position_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.new_position_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCSetItemPosition)
}

inline void CMsgGCSetItemPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.new_position_){0u}
  };
}

CMsgGCSetItemPosition::~CMsgGCSetItemPosition() {
  // @@protoc_insertion_point(destructor:CMsgGCSetItemPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCSetItemPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCSetItemPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCSetItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCSetItemPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_position_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.new_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCSetItemPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_position(&has_bits);
          _impl_.new_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCSetItemPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCSetItemPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 new_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCSetItemPosition)
  return target;
}

size_t CMsgGCSetItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCSetItemPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 new_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_position());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCSetItemPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCSetItemPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCSetItemPosition::GetClassData() const { return &_class_data_; }


void CMsgGCSetItemPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCSetItemPosition*>(&to_msg);
  auto& from = static_cast<const CMsgGCSetItemPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCSetItemPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.new_position_ = from._impl_.new_position_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCSetItemPosition::CopyFrom(const CMsgGCSetItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCSetItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSetItemPosition::IsInitialized() const {
  return true;
}

void CMsgGCSetItemPosition::InternalSwap(CMsgGCSetItemPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCSetItemPosition, _impl_.new_position_)
      + sizeof(CMsgGCSetItemPosition::_impl_.new_position_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCSetItemPosition, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCSetItemPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[73]);
}

// ===================================================================

class CAttribute_ItemDynamicRecipeComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_ItemDynamicRecipeComponent>()._impl_._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attributes_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_items_fulfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lootlist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fulfilled_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_associated_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CAttribute_ItemDynamicRecipeComponent)
}
CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(const CAttribute_ItemDynamicRecipeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CAttribute_ItemDynamicRecipeComponent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_string_){}
    , decltype(_impl_.lootlist_){}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.item_quality_){}
    , decltype(_impl_.item_flags_){}
    , decltype(_impl_.item_count_){}
    , decltype(_impl_.items_fulfilled_){}
    , decltype(_impl_.item_rarity_){}
    , decltype(_impl_.fulfilled_item_id_){}
    , decltype(_impl_.associated_item_def_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attributes_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributes_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attributes_string()) {
    _this->_impl_.attributes_string_.Set(from._internal_attributes_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lootlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lootlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lootlist()) {
    _this->_impl_.lootlist_.Set(from._internal_lootlist(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.item_def_, &from._impl_.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.associated_item_def_) -
    reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.associated_item_def_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_ItemDynamicRecipeComponent)
}

inline void CAttribute_ItemDynamicRecipeComponent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_string_){}
    , decltype(_impl_.lootlist_){}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.item_quality_){0u}
    , decltype(_impl_.item_flags_){0u}
    , decltype(_impl_.item_count_){0u}
    , decltype(_impl_.items_fulfilled_){0u}
    , decltype(_impl_.item_rarity_){0u}
    , decltype(_impl_.fulfilled_item_id_){uint64_t{0u}}
    , decltype(_impl_.associated_item_def_){0u}
  };
  _impl_.attributes_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributes_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lootlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lootlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CAttribute_ItemDynamicRecipeComponent::~CAttribute_ItemDynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:CAttribute_ItemDynamicRecipeComponent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CAttribute_ItemDynamicRecipeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_string_.Destroy();
  _impl_.lootlist_.Destroy();
}

void CAttribute_ItemDynamicRecipeComponent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CAttribute_ItemDynamicRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_ItemDynamicRecipeComponent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.attributes_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lootlist_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_rarity_) -
        reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.item_rarity_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.fulfilled_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.associated_item_def_) -
        reinterpret_cast<char*>(&_impl_.fulfilled_item_id_)) + sizeof(_impl_.associated_item_def_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_ItemDynamicRecipeComponent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_quality(&has_bits);
          _impl_.item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_flags(&has_bits);
          _impl_.item_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string attributes_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attributes_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CAttribute_ItemDynamicRecipeComponent.attributes_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_item_count(&has_bits);
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 items_fulfilled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_items_fulfilled(&has_bits);
          _impl_.items_fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_rarity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_item_rarity(&has_bits);
          _impl_.item_rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lootlist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_lootlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CAttribute_ItemDynamicRecipeComponent.lootlist");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fulfilled_item_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_fulfilled_item_id(&has_bits);
          _impl_.fulfilled_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 associated_item_def = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_associated_item_def(&has_bits);
          _impl_.associated_item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAttribute_ItemDynamicRecipeComponent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_ItemDynamicRecipeComponent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_quality(), target);
  }

  // optional uint32 item_flags = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_flags(), target);
  }

  // optional string attributes_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attributes_string().data(), static_cast<int>(this->_internal_attributes_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.attributes_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attributes_string(), target);
  }

  // optional uint32 item_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_item_count(), target);
  }

  // optional uint32 items_fulfilled = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_items_fulfilled(), target);
  }

  // optional uint32 item_rarity = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_item_rarity(), target);
  }

  // optional string lootlist = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lootlist().data(), static_cast<int>(this->_internal_lootlist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.lootlist");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lootlist(), target);
  }

  // optional uint64 fulfilled_item_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_fulfilled_item_id(), target);
  }

  // optional uint32 associated_item_def = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_associated_item_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_ItemDynamicRecipeComponent)
  return target;
}

size_t CAttribute_ItemDynamicRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_ItemDynamicRecipeComponent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string attributes_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributes_string());
    }

    // optional string lootlist = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lootlist());
    }

    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional uint32 item_quality = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_quality());
    }

    // optional uint32 item_flags = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_flags());
    }

    // optional uint32 item_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
    }

    // optional uint32 items_fulfilled = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_items_fulfilled());
    }

    // optional uint32 item_rarity = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_rarity());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 fulfilled_item_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fulfilled_item_id());
    }

    // optional uint32 associated_item_def = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_associated_item_def());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAttribute_ItemDynamicRecipeComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CAttribute_ItemDynamicRecipeComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAttribute_ItemDynamicRecipeComponent::GetClassData() const { return &_class_data_; }


void CAttribute_ItemDynamicRecipeComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CAttribute_ItemDynamicRecipeComponent*>(&to_msg);
  auto& from = static_cast<const CAttribute_ItemDynamicRecipeComponent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_ItemDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attributes_string(from._internal_attributes_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_lootlist(from._internal_lootlist());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.item_quality_ = from._impl_.item_quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.item_flags_ = from._impl_.item_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.item_count_ = from._impl_.item_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.items_fulfilled_ = from._impl_.items_fulfilled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.item_rarity_ = from._impl_.item_rarity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.fulfilled_item_id_ = from._impl_.fulfilled_item_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.associated_item_def_ = from._impl_.associated_item_def_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAttribute_ItemDynamicRecipeComponent::CopyFrom(const CAttribute_ItemDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_ItemDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_ItemDynamicRecipeComponent::IsInitialized() const {
  return true;
}

void CAttribute_ItemDynamicRecipeComponent::InternalSwap(CAttribute_ItemDynamicRecipeComponent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attributes_string_, lhs_arena,
      &other->_impl_.attributes_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lootlist_, lhs_arena,
      &other->_impl_.lootlist_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, _impl_.associated_item_def_)
      + sizeof(CAttribute_ItemDynamicRecipeComponent::_impl_.associated_item_def_)
      - PROTOBUF_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, _impl_.item_def_)>(
          reinterpret_cast<char*>(&_impl_.item_def_),
          reinterpret_cast<char*>(&other->_impl_.item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_ItemDynamicRecipeComponent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[74]);
}

// ===================================================================

class CProtoItemSocket::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attr_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_required_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_required_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gem_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_not_tradable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_required_item_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CProtoItemSocket::CProtoItemSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket)
}
CProtoItemSocket::CProtoItemSocket(const CProtoItemSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.required_hero_){}
    , decltype(_impl_.required_item_slot_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.attr_def_index_){}
    , decltype(_impl_.required_type_){}
    , decltype(_impl_.gem_def_index_){}
    , decltype(_impl_.not_tradable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.required_hero_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.required_hero_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_required_hero()) {
    _this->_impl_.required_hero_.Set(from._internal_required_hero(), 
      _this->GetArenaForAllocation());
  }
  _impl_.required_item_slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.required_item_slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_required_item_slot()) {
    _this->_impl_.required_item_slot_.Set(from._internal_required_item_slot(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.not_tradable_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.not_tradable_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket)
}

inline void CProtoItemSocket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.required_hero_){}
    , decltype(_impl_.required_item_slot_){}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.attr_def_index_){0u}
    , decltype(_impl_.required_type_){0u}
    , decltype(_impl_.gem_def_index_){0u}
    , decltype(_impl_.not_tradable_){false}
  };
  _impl_.required_hero_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.required_hero_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.required_item_slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.required_item_slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CProtoItemSocket::~CProtoItemSocket() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.required_hero_.Destroy();
  _impl_.required_item_slot_.Destroy();
}

void CProtoItemSocket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.required_hero_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.required_item_slot_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.not_tradable_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.not_tradable_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attr_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attr_def_index(&has_bits);
          _impl_.attr_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_required_type(&has_bits);
          _impl_.required_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string required_hero = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_required_hero();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CProtoItemSocket.required_hero");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gem_def_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gem_def_index(&has_bits);
          _impl_.gem_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool not_tradable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_not_tradable(&has_bits);
          _impl_.not_tradable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string required_item_slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_required_item_slot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CProtoItemSocket.required_item_slot");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 attr_def_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attr_def_index(), target);
  }

  // optional uint32 required_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_type(), target);
  }

  // optional string required_hero = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_hero().data(), static_cast<int>(this->_internal_required_hero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_hero");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_required_hero(), target);
  }

  // optional uint32 gem_def_index = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gem_def_index(), target);
  }

  // optional bool not_tradable = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_not_tradable(), target);
  }

  // optional string required_item_slot = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_item_slot().data(), static_cast<int>(this->_internal_required_item_slot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_item_slot");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_required_item_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket)
  return target;
}

size_t CProtoItemSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string required_hero = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_required_hero());
    }

    // optional string required_item_slot = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_required_item_slot());
    }

    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 attr_def_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attr_def_index());
    }

    // optional uint32 required_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_required_type());
    }

    // optional uint32 gem_def_index = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gem_def_index());
    }

    // optional bool not_tradable = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket::GetClassData() const { return &_class_data_; }


void CProtoItemSocket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_required_hero(from._internal_required_hero());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_required_item_slot(from._internal_required_item_slot());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.attr_def_index_ = from._impl_.attr_def_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.required_type_ = from._impl_.required_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gem_def_index_ = from._impl_.gem_def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.not_tradable_ = from._impl_.not_tradable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket::CopyFrom(const CProtoItemSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket::IsInitialized() const {
  return true;
}

void CProtoItemSocket::InternalSwap(CProtoItemSocket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.required_hero_, lhs_arena,
      &other->_impl_.required_hero_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.required_item_slot_, lhs_arena,
      &other->_impl_.required_item_slot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket, _impl_.not_tradable_)
      + sizeof(CProtoItemSocket::_impl_.not_tradable_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[75]);
}

// ===================================================================

class CProtoItemSocket_Empty::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Empty>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Empty* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Empty::_Internal::socket(const CProtoItemSocket_Empty* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_Empty::CProtoItemSocket_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Empty)
}
CProtoItemSocket_Empty::CProtoItemSocket_Empty(const CProtoItemSocket_Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_Empty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Empty)
}

inline void CProtoItemSocket_Empty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
  };
}

CProtoItemSocket_Empty::~CProtoItemSocket_Empty() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Empty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_Empty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Empty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Empty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_Empty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Empty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Empty)
  return target;
}

size_t CProtoItemSocket_Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Empty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CProtoItemSocket socket = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.socket_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_Empty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_Empty::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_Empty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_Empty*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_Empty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Empty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_socket()) {
    _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
        from._internal_socket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_Empty::CopyFrom(const CProtoItemSocket_Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Empty::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Empty::InternalSwap(CProtoItemSocket_Empty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.socket_, other->_impl_.socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[76]);
}

// ===================================================================

class CProtoItemSocket_Effect::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Effect>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Effect* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Effect::_Internal::socket(const CProtoItemSocket_Effect* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_Effect::CProtoItemSocket_Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Effect)
}
CProtoItemSocket_Effect::CProtoItemSocket_Effect(const CProtoItemSocket_Effect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_Effect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.effect_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  _this->_impl_.effect_ = from._impl_.effect_;
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Effect)
}

inline void CProtoItemSocket_Effect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.effect_){0u}
  };
}

CProtoItemSocket_Effect::~CProtoItemSocket_Effect() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Effect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_Effect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_Effect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_Effect::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Effect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  _impl_.effect_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Effect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_effect(&has_bits);
          _impl_.effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_Effect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Effect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional uint32 effect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Effect)
  return target;
}

size_t CProtoItemSocket_Effect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Effect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 effect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_effect());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_Effect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_Effect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_Effect::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_Effect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_Effect*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_Effect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Effect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.effect_ = from._impl_.effect_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_Effect::CopyFrom(const CProtoItemSocket_Effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Effect::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Effect::InternalSwap(CProtoItemSocket_Effect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Effect, _impl_.effect_)
      + sizeof(CProtoItemSocket_Effect::_impl_.effect_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Effect, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Effect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[77]);
}

// ===================================================================

class CProtoItemSocket_Color::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Color>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Color* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_red(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_green(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Color::_Internal::socket(const CProtoItemSocket_Color* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_Color::CProtoItemSocket_Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Color)
}
CProtoItemSocket_Color::CProtoItemSocket_Color(const CProtoItemSocket_Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.blue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  ::memcpy(&_impl_.red_, &from._impl_.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_) -
    reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Color)
}

inline void CProtoItemSocket_Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.red_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.blue_){0u}
  };
}

CProtoItemSocket_Color::~CProtoItemSocket_Color() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_Color::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.red_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.blue_) -
        reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 red = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_red(&has_bits);
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 green = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_green(&has_bits);
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 blue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_blue(&has_bits);
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional uint32 red = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_red(), target);
  }

  // optional uint32 green = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_green(), target);
  }

  // optional uint32 blue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Color)
  return target;
}

size_t CProtoItemSocket_Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 red = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red());
    }

    // optional uint32 green = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
    }

    // optional uint32 blue = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blue());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_Color::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_Color*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.red_ = from._impl_.red_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.green_ = from._impl_.green_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.blue_ = from._impl_.blue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_Color::CopyFrom(const CProtoItemSocket_Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Color::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Color::InternalSwap(CProtoItemSocket_Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Color, _impl_.blue_)
      + sizeof(CProtoItemSocket_Color::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Color, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[78]);
}

// ===================================================================

class CProtoItemSocket_Strange::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Strange>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Strange* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strange_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strange_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Strange::_Internal::socket(const CProtoItemSocket_Strange* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_Strange::CProtoItemSocket_Strange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Strange)
}
CProtoItemSocket_Strange::CProtoItemSocket_Strange(const CProtoItemSocket_Strange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_Strange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.strange_type_){}
    , decltype(_impl_.strange_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  ::memcpy(&_impl_.strange_type_, &from._impl_.strange_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.strange_value_) -
    reinterpret_cast<char*>(&_impl_.strange_type_)) + sizeof(_impl_.strange_value_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Strange)
}

inline void CProtoItemSocket_Strange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.strange_type_){0u}
    , decltype(_impl_.strange_value_){0u}
  };
}

CProtoItemSocket_Strange::~CProtoItemSocket_Strange() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Strange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_Strange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_Strange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_Strange::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Strange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.strange_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.strange_value_) -
        reinterpret_cast<char*>(&_impl_.strange_type_)) + sizeof(_impl_.strange_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Strange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 strange_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_strange_type(&has_bits);
          _impl_.strange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 strange_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_strange_value(&has_bits);
          _impl_.strange_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_Strange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Strange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional uint32 strange_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_strange_type(), target);
  }

  // optional uint32 strange_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_strange_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Strange)
  return target;
}

size_t CProtoItemSocket_Strange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Strange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 strange_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_strange_type());
    }

    // optional uint32 strange_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_strange_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_Strange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_Strange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_Strange::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_Strange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_Strange*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_Strange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Strange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.strange_type_ = from._impl_.strange_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.strange_value_ = from._impl_.strange_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_Strange::CopyFrom(const CProtoItemSocket_Strange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Strange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Strange::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Strange::InternalSwap(CProtoItemSocket_Strange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange, _impl_.strange_value_)
      + sizeof(CProtoItemSocket_Strange::_impl_.strange_value_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Strange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[79]);
}

// ===================================================================

class CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strange_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strange_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_Internal::socket(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
}
CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.strange_type_){}
    , decltype(_impl_.strange_value_){}
    , decltype(_impl_.ability_effect_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  ::memcpy(&_impl_.strange_type_, &from._impl_.strange_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_effect_) -
    reinterpret_cast<char*>(&_impl_.strange_type_)) + sizeof(_impl_.ability_effect_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
}

inline void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.strange_type_){0u}
    , decltype(_impl_.strange_value_){0u}
    , decltype(_impl_.ability_effect_){0u}
  };
}

CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::~CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.strange_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ability_effect_) -
        reinterpret_cast<char*>(&_impl_.strange_type_)) + sizeof(_impl_.ability_effect_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 strange_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_strange_type(&has_bits);
          _impl_.strange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 strange_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_strange_value(&has_bits);
          _impl_.strange_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_effect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ability_effect(&has_bits);
          _impl_.ability_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional uint32 strange_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_strange_type(), target);
  }

  // optional uint32 strange_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_strange_value(), target);
  }

  // optional uint32 ability_effect = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  return target;
}

size_t CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 strange_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_strange_type());
    }

    // optional uint32 strange_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_strange_value());
    }

    // optional uint32 ability_effect = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_effect());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.strange_type_ = from._impl_.strange_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.strange_value_ = from._impl_.strange_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ability_effect_ = from._impl_.ability_effect_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::InternalSwap(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _impl_.ability_effect_)
      + sizeof(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_impl_.ability_effect_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[80]);
}

// ===================================================================

class CProtoItemSocket_Spectator::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Spectator>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Spectator* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_games_viewed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_corporation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Spectator::_Internal::socket(const CProtoItemSocket_Spectator* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Spectator)
}
CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(const CProtoItemSocket_Spectator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_Spectator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.games_viewed_){}
    , decltype(_impl_.corporation_id_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  ::memcpy(&_impl_.games_viewed_, &from._impl_.games_viewed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.games_viewed_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Spectator)
}

inline void CProtoItemSocket_Spectator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.games_viewed_){0u}
    , decltype(_impl_.corporation_id_){0u}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.team_id_){0u}
  };
}

CProtoItemSocket_Spectator::~CProtoItemSocket_Spectator() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Spectator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_Spectator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_Spectator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_Spectator::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Spectator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.games_viewed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.games_viewed_)) + sizeof(_impl_.team_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Spectator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 games_viewed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_games_viewed(&has_bits);
          _impl_.games_viewed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 corporation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_corporation_id(&has_bits);
          _impl_.corporation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_Spectator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Spectator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional uint32 games_viewed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_games_viewed(), target);
  }

  // optional uint32 corporation_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_corporation_id(), target);
  }

  // optional uint32 league_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_league_id(), target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Spectator)
  return target;
}

size_t CProtoItemSocket_Spectator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Spectator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 games_viewed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_games_viewed());
    }

    // optional uint32 corporation_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_corporation_id());
    }

    // optional uint32 league_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_Spectator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_Spectator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_Spectator::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_Spectator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_Spectator*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_Spectator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Spectator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.games_viewed_ = from._impl_.games_viewed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.corporation_id_ = from._impl_.corporation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_Spectator::CopyFrom(const CProtoItemSocket_Spectator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Spectator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Spectator::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Spectator::InternalSwap(CProtoItemSocket_Spectator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Spectator, _impl_.team_id_)
      + sizeof(CProtoItemSocket_Spectator::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Spectator, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Spectator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[81]);
}

// ===================================================================

class CProtoItemSocket_AssetModifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_AssetModifier>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_AssetModifier* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asset_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_AssetModifier::_Internal::socket(const CProtoItemSocket_AssetModifier* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_AssetModifier)
}
CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier(const CProtoItemSocket_AssetModifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_AssetModifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.asset_modifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  _this->_impl_.asset_modifier_ = from._impl_.asset_modifier_;
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_AssetModifier)
}

inline void CProtoItemSocket_AssetModifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.asset_modifier_){0u}
  };
}

CProtoItemSocket_AssetModifier::~CProtoItemSocket_AssetModifier() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_AssetModifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_AssetModifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_AssetModifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_AssetModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_AssetModifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  _impl_.asset_modifier_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_AssetModifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 asset_modifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_asset_modifier(&has_bits);
          _impl_.asset_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_AssetModifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_AssetModifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional uint32 asset_modifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asset_modifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_AssetModifier)
  return target;
}

size_t CProtoItemSocket_AssetModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_AssetModifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 asset_modifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_asset_modifier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_AssetModifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_AssetModifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_AssetModifier::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_AssetModifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_AssetModifier*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_AssetModifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_AssetModifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.asset_modifier_ = from._impl_.asset_modifier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_AssetModifier::CopyFrom(const CProtoItemSocket_AssetModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_AssetModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AssetModifier::IsInitialized() const {
  return true;
}

void CProtoItemSocket_AssetModifier::InternalSwap(CProtoItemSocket_AssetModifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier, _impl_.asset_modifier_)
      + sizeof(CProtoItemSocket_AssetModifier::_impl_.asset_modifier_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_AssetModifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[82]);
}

// ===================================================================

class CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asset_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_anim_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_Internal::socket(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
}
CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.asset_modifier_){}
    , decltype(_impl_.anim_modifier_){}
    , decltype(_impl_.ability_effect_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  ::memcpy(&_impl_.asset_modifier_, &from._impl_.asset_modifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_effect_) -
    reinterpret_cast<char*>(&_impl_.asset_modifier_)) + sizeof(_impl_.ability_effect_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
}

inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.asset_modifier_){0u}
    , decltype(_impl_.anim_modifier_){0u}
    , decltype(_impl_.ability_effect_){0u}
  };
}

CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::~CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.asset_modifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ability_effect_) -
        reinterpret_cast<char*>(&_impl_.asset_modifier_)) + sizeof(_impl_.ability_effect_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 asset_modifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_asset_modifier(&has_bits);
          _impl_.asset_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 anim_modifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_anim_modifier(&has_bits);
          _impl_.anim_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_effect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ability_effect(&has_bits);
          _impl_.ability_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional uint32 asset_modifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asset_modifier(), target);
  }

  // optional uint32 anim_modifier = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_anim_modifier(), target);
  }

  // optional uint32 ability_effect = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  return target;
}

size_t CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 asset_modifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_asset_modifier());
    }

    // optional uint32 anim_modifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_anim_modifier());
    }

    // optional uint32 ability_effect = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_effect());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.asset_modifier_ = from._impl_.asset_modifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.anim_modifier_ = from._impl_.anim_modifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ability_effect_ = from._impl_.ability_effect_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::IsInitialized() const {
  return true;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::InternalSwap(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _impl_.ability_effect_)
      + sizeof(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_impl_.ability_effect_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[83]);
}

// ===================================================================

class CProtoItemSocket_Autograph::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Autograph>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Autograph* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_autograph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autograph_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_autograph_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Autograph::_Internal::socket(const CProtoItemSocket_Autograph* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Autograph)
}
CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(const CProtoItemSocket_Autograph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_Autograph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.autograph_){}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.autograph_id_){}
    , decltype(_impl_.autograph_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.autograph_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.autograph_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_autograph()) {
    _this->_impl_.autograph_.Set(from._internal_autograph(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  ::memcpy(&_impl_.autograph_id_, &from._impl_.autograph_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.autograph_score_) -
    reinterpret_cast<char*>(&_impl_.autograph_id_)) + sizeof(_impl_.autograph_score_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Autograph)
}

inline void CProtoItemSocket_Autograph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.autograph_){}
    , decltype(_impl_.socket_){nullptr}
    , decltype(_impl_.autograph_id_){0u}
    , decltype(_impl_.autograph_score_){0u}
  };
  _impl_.autograph_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.autograph_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CProtoItemSocket_Autograph::~CProtoItemSocket_Autograph() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Autograph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_Autograph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.autograph_.Destroy();
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_Autograph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_Autograph::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Autograph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.autograph_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.socket_ != nullptr);
      _impl_.socket_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.autograph_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.autograph_score_) -
        reinterpret_cast<char*>(&_impl_.autograph_id_)) + sizeof(_impl_.autograph_score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Autograph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string autograph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_autograph();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CProtoItemSocket_Autograph.autograph");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 autograph_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_autograph_id(&has_bits);
          _impl_.autograph_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 autograph_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_autograph_score(&has_bits);
          _impl_.autograph_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_Autograph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Autograph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  // optional string autograph = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_autograph().data(), static_cast<int>(this->_internal_autograph().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket_Autograph.autograph");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_autograph(), target);
  }

  // optional uint32 autograph_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_autograph_id(), target);
  }

  // optional uint32 autograph_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_autograph_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Autograph)
  return target;
}

size_t CProtoItemSocket_Autograph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Autograph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string autograph = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_autograph());
    }

    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_);
    }

    // optional uint32 autograph_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_autograph_id());
    }

    // optional uint32 autograph_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_autograph_score());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_Autograph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_Autograph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_Autograph::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_Autograph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_Autograph*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_Autograph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Autograph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_autograph(from._internal_autograph());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
          from._internal_socket());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.autograph_id_ = from._impl_.autograph_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.autograph_score_ = from._impl_.autograph_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_Autograph::CopyFrom(const CProtoItemSocket_Autograph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Autograph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Autograph::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Autograph::InternalSwap(CProtoItemSocket_Autograph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.autograph_, lhs_arena,
      &other->_impl_.autograph_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Autograph, _impl_.autograph_score_)
      + sizeof(CProtoItemSocket_Autograph::_impl_.autograph_score_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Autograph, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Autograph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[84]);
}

// ===================================================================

class CProtoItemSocket_StaticVisuals::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_StaticVisuals>()._impl_._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_StaticVisuals* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_StaticVisuals::_Internal::socket(const CProtoItemSocket_StaticVisuals* msg) {
  return *msg->_impl_.socket_;
}
CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_StaticVisuals)
}
CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(const CProtoItemSocket_StaticVisuals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtoItemSocket_StaticVisuals* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::CProtoItemSocket(*from._impl_.socket_);
  }
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_StaticVisuals)
}

inline void CProtoItemSocket_StaticVisuals::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.socket_){nullptr}
  };
}

CProtoItemSocket_StaticVisuals::~CProtoItemSocket_StaticVisuals() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_StaticVisuals)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtoItemSocket_StaticVisuals::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void CProtoItemSocket_StaticVisuals::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtoItemSocket_StaticVisuals::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_StaticVisuals)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.socket_ != nullptr);
    _impl_.socket_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_StaticVisuals::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtoItemSocket_StaticVisuals::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_StaticVisuals)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_StaticVisuals)
  return target;
}

size_t CProtoItemSocket_StaticVisuals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_StaticVisuals)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CProtoItemSocket socket = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.socket_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtoItemSocket_StaticVisuals::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtoItemSocket_StaticVisuals::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtoItemSocket_StaticVisuals::GetClassData() const { return &_class_data_; }


void CProtoItemSocket_StaticVisuals::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtoItemSocket_StaticVisuals*>(&to_msg);
  auto& from = static_cast<const CProtoItemSocket_StaticVisuals&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_StaticVisuals)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_socket()) {
    _this->_internal_mutable_socket()->::CProtoItemSocket::MergeFrom(
        from._internal_socket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtoItemSocket_StaticVisuals::CopyFrom(const CProtoItemSocket_StaticVisuals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_StaticVisuals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_StaticVisuals::IsInitialized() const {
  return true;
}

void CProtoItemSocket_StaticVisuals::InternalSwap(CProtoItemSocket_StaticVisuals* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.socket_, other->_impl_.socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_StaticVisuals::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[85]);
}

// ===================================================================

class CAttribute_String::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_String>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAttribute_String::CAttribute_String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CAttribute_String)
}
CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CAttribute_String* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

inline void CAttribute_String::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CAttribute_String::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void CAttribute_String::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CAttribute_String::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_String)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_String::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CAttribute_String.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAttribute_String::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

size_t CAttribute_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_String)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAttribute_String::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CAttribute_String::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAttribute_String::GetClassData() const { return &_class_data_; }


void CAttribute_String::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CAttribute_String*>(&to_msg);
  auto& from = static_cast<const CAttribute_String&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  return true;
}

void CAttribute_String::InternalSwap(CAttribute_String* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_String::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[86]);
}

// ===================================================================

class CWorkshop_GetItemDailyRevenue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetItemDailyRevenue_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_GetItemDailyRevenue_Request::CWorkshop_GetItemDailyRevenue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetItemDailyRevenue_Request)
}
CWorkshop_GetItemDailyRevenue_Request::CWorkshop_GetItemDailyRevenue_Request(const CWorkshop_GetItemDailyRevenue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetItemDailyRevenue_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.date_start_){}
    , decltype(_impl_.date_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.date_end_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.date_end_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetItemDailyRevenue_Request)
}

inline void CWorkshop_GetItemDailyRevenue_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.item_id_){0u}
    , decltype(_impl_.date_start_){0u}
    , decltype(_impl_.date_end_){0u}
  };
}

CWorkshop_GetItemDailyRevenue_Request::~CWorkshop_GetItemDailyRevenue_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetItemDailyRevenue_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetItemDailyRevenue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CWorkshop_GetItemDailyRevenue_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetItemDailyRevenue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetItemDailyRevenue_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.date_end_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.date_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetItemDailyRevenue_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 date_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_date_start(&has_bits);
          _impl_.date_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 date_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_date_end(&has_bits);
          _impl_.date_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetItemDailyRevenue_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetItemDailyRevenue_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 date_start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_start(), target);
  }

  // optional uint32 date_end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_date_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetItemDailyRevenue_Request)
  return target;
}

size_t CWorkshop_GetItemDailyRevenue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetItemDailyRevenue_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 date_start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date_start());
    }

    // optional uint32 date_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetItemDailyRevenue_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetItemDailyRevenue_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetItemDailyRevenue_Request::GetClassData() const { return &_class_data_; }


void CWorkshop_GetItemDailyRevenue_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetItemDailyRevenue_Request*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetItemDailyRevenue_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetItemDailyRevenue_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.date_start_ = from._impl_.date_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.date_end_ = from._impl_.date_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetItemDailyRevenue_Request::CopyFrom(const CWorkshop_GetItemDailyRevenue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetItemDailyRevenue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetItemDailyRevenue_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetItemDailyRevenue_Request::InternalSwap(CWorkshop_GetItemDailyRevenue_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Request, _impl_.date_end_)
      + sizeof(CWorkshop_GetItemDailyRevenue_Request::_impl_.date_end_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Request, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetItemDailyRevenue_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[87]);
}

// ===================================================================

class CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue>()._impl_._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revenue_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
}
CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue(const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.revenue_usd_){}
    , decltype(_impl_.date_){}
    , decltype(_impl_.units_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.revenue_usd_, &from._impl_.revenue_usd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.units_) -
    reinterpret_cast<char*>(&_impl_.revenue_usd_)) + sizeof(_impl_.units_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
}

inline void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.revenue_usd_){int64_t{0}}
    , decltype(_impl_.date_){0u}
    , decltype(_impl_.units_){0}
  };
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::~CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_code_.Destroy();
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.revenue_usd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.units_) -
        reinterpret_cast<char*>(&_impl_.revenue_usd_)) + sizeof(_impl_.units_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_date(&has_bits);
          _impl_.date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 revenue_usd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_revenue_usd(&has_bits);
          _impl_.revenue_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_units(&has_bits);
          _impl_.units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // optional uint32 date = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_date(), target);
  }

  // optional int64 revenue_usd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_revenue_usd(), target);
  }

  // optional int32 units = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  return target;
}

size_t CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional int64 revenue_usd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_revenue_usd());
    }

    // optional uint32 date = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date());
    }

    // optional int32 units = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_units());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::GetClassData() const { return &_class_data_; }


void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.revenue_usd_ = from._impl_.revenue_usd_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.date_ = from._impl_.date_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.units_ = from._impl_.units_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CopyFrom(const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::IsInitialized() const {
  return true;
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::InternalSwap(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _impl_.units_)
      + sizeof(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_impl_.units_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _impl_.revenue_usd_)>(
          reinterpret_cast<char*>(&_impl_.revenue_usd_),
          reinterpret_cast<char*>(&other->_impl_.revenue_usd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[88]);
}

// ===================================================================

class CWorkshop_GetItemDailyRevenue_Response::_Internal {
 public:
};

CWorkshop_GetItemDailyRevenue_Response::CWorkshop_GetItemDailyRevenue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetItemDailyRevenue_Response)
}
CWorkshop_GetItemDailyRevenue_Response::CWorkshop_GetItemDailyRevenue_Response(const CWorkshop_GetItemDailyRevenue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetItemDailyRevenue_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.country_revenue_){from._impl_.country_revenue_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetItemDailyRevenue_Response)
}

inline void CWorkshop_GetItemDailyRevenue_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.country_revenue_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CWorkshop_GetItemDailyRevenue_Response::~CWorkshop_GetItemDailyRevenue_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetItemDailyRevenue_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetItemDailyRevenue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_revenue_.~RepeatedPtrField();
}

void CWorkshop_GetItemDailyRevenue_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetItemDailyRevenue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetItemDailyRevenue_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.country_revenue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetItemDailyRevenue_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_country_revenue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetItemDailyRevenue_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetItemDailyRevenue_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_country_revenue_size()); i < n; i++) {
    const auto& repfield = this->_internal_country_revenue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetItemDailyRevenue_Response)
  return target;
}

size_t CWorkshop_GetItemDailyRevenue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetItemDailyRevenue_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  total_size += 1UL * this->_internal_country_revenue_size();
  for (const auto& msg : this->_impl_.country_revenue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetItemDailyRevenue_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetItemDailyRevenue_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetItemDailyRevenue_Response::GetClassData() const { return &_class_data_; }


void CWorkshop_GetItemDailyRevenue_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetItemDailyRevenue_Response*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetItemDailyRevenue_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetItemDailyRevenue_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.country_revenue_.MergeFrom(from._impl_.country_revenue_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetItemDailyRevenue_Response::CopyFrom(const CWorkshop_GetItemDailyRevenue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetItemDailyRevenue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetItemDailyRevenue_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetItemDailyRevenue_Response::InternalSwap(CWorkshop_GetItemDailyRevenue_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.country_revenue_.InternalSwap(&other->_impl_.country_revenue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetItemDailyRevenue_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[89]);
}

// ===================================================================

class CWorkshop_GetPackageDailyRevenue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetPackageDailyRevenue_Request>()._impl_._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CWorkshop_GetPackageDailyRevenue_Request::CWorkshop_GetPackageDailyRevenue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetPackageDailyRevenue_Request)
}
CWorkshop_GetPackageDailyRevenue_Request::CWorkshop_GetPackageDailyRevenue_Request(const CWorkshop_GetPackageDailyRevenue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetPackageDailyRevenue_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packageid_){}
    , decltype(_impl_.date_start_){}
    , decltype(_impl_.date_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packageid_, &from._impl_.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.date_end_) -
    reinterpret_cast<char*>(&_impl_.packageid_)) + sizeof(_impl_.date_end_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetPackageDailyRevenue_Request)
}

inline void CWorkshop_GetPackageDailyRevenue_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packageid_){0u}
    , decltype(_impl_.date_start_){0u}
    , decltype(_impl_.date_end_){0u}
  };
}

CWorkshop_GetPackageDailyRevenue_Request::~CWorkshop_GetPackageDailyRevenue_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetPackageDailyRevenue_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetPackageDailyRevenue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CWorkshop_GetPackageDailyRevenue_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetPackageDailyRevenue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetPackageDailyRevenue_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.date_end_) -
        reinterpret_cast<char*>(&_impl_.packageid_)) + sizeof(_impl_.date_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetPackageDailyRevenue_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          _impl_.packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 date_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_date_start(&has_bits);
          _impl_.date_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 date_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_date_end(&has_bits);
          _impl_.date_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetPackageDailyRevenue_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetPackageDailyRevenue_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageid(), target);
  }

  // optional uint32 date_start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_date_start(), target);
  }

  // optional uint32 date_end = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetPackageDailyRevenue_Request)
  return target;
}

size_t CWorkshop_GetPackageDailyRevenue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetPackageDailyRevenue_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packageid());
    }

    // optional uint32 date_start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date_start());
    }

    // optional uint32 date_end = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetPackageDailyRevenue_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetPackageDailyRevenue_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetPackageDailyRevenue_Request::GetClassData() const { return &_class_data_; }


void CWorkshop_GetPackageDailyRevenue_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetPackageDailyRevenue_Request*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetPackageDailyRevenue_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetPackageDailyRevenue_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.packageid_ = from._impl_.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.date_start_ = from._impl_.date_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.date_end_ = from._impl_.date_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetPackageDailyRevenue_Request::CopyFrom(const CWorkshop_GetPackageDailyRevenue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetPackageDailyRevenue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetPackageDailyRevenue_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetPackageDailyRevenue_Request::InternalSwap(CWorkshop_GetPackageDailyRevenue_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Request, _impl_.date_end_)
      + sizeof(CWorkshop_GetPackageDailyRevenue_Request::_impl_.date_end_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Request, _impl_.packageid_)>(
          reinterpret_cast<char*>(&_impl_.packageid_),
          reinterpret_cast<char*>(&other->_impl_.packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetPackageDailyRevenue_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[90]);
}

// ===================================================================

class CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue>()._impl_._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revenue_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
}
CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue(const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.revenue_usd_){}
    , decltype(_impl_.date_){}
    , decltype(_impl_.units_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.revenue_usd_, &from._impl_.revenue_usd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.units_) -
    reinterpret_cast<char*>(&_impl_.revenue_usd_)) + sizeof(_impl_.units_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
}

inline void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.revenue_usd_){int64_t{0}}
    , decltype(_impl_.date_){0u}
    , decltype(_impl_.units_){0}
  };
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::~CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_code_.Destroy();
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.revenue_usd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.units_) -
        reinterpret_cast<char*>(&_impl_.revenue_usd_)) + sizeof(_impl_.units_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_date(&has_bits);
          _impl_.date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 revenue_usd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_revenue_usd(&has_bits);
          _impl_.revenue_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_units(&has_bits);
          _impl_.units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // optional uint32 date = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_date(), target);
  }

  // optional int64 revenue_usd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_revenue_usd(), target);
  }

  // optional int32 units = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  return target;
}

size_t CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional int64 revenue_usd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_revenue_usd());
    }

    // optional uint32 date = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date());
    }

    // optional int32 units = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_units());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::GetClassData() const { return &_class_data_; }


void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.revenue_usd_ = from._impl_.revenue_usd_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.date_ = from._impl_.date_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.units_ = from._impl_.units_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CopyFrom(const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::IsInitialized() const {
  return true;
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::InternalSwap(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _impl_.units_)
      + sizeof(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_impl_.units_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _impl_.revenue_usd_)>(
          reinterpret_cast<char*>(&_impl_.revenue_usd_),
          reinterpret_cast<char*>(&other->_impl_.revenue_usd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[91]);
}

// ===================================================================

class CWorkshop_GetPackageDailyRevenue_Response::_Internal {
 public:
};

CWorkshop_GetPackageDailyRevenue_Response::CWorkshop_GetPackageDailyRevenue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetPackageDailyRevenue_Response)
}
CWorkshop_GetPackageDailyRevenue_Response::CWorkshop_GetPackageDailyRevenue_Response(const CWorkshop_GetPackageDailyRevenue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetPackageDailyRevenue_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.country_revenue_){from._impl_.country_revenue_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetPackageDailyRevenue_Response)
}

inline void CWorkshop_GetPackageDailyRevenue_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.country_revenue_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CWorkshop_GetPackageDailyRevenue_Response::~CWorkshop_GetPackageDailyRevenue_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetPackageDailyRevenue_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetPackageDailyRevenue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_revenue_.~RepeatedPtrField();
}

void CWorkshop_GetPackageDailyRevenue_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetPackageDailyRevenue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetPackageDailyRevenue_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.country_revenue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetPackageDailyRevenue_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_country_revenue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetPackageDailyRevenue_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetPackageDailyRevenue_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_country_revenue_size()); i < n; i++) {
    const auto& repfield = this->_internal_country_revenue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetPackageDailyRevenue_Response)
  return target;
}

size_t CWorkshop_GetPackageDailyRevenue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetPackageDailyRevenue_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  total_size += 1UL * this->_internal_country_revenue_size();
  for (const auto& msg : this->_impl_.country_revenue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetPackageDailyRevenue_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetPackageDailyRevenue_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetPackageDailyRevenue_Response::GetClassData() const { return &_class_data_; }


void CWorkshop_GetPackageDailyRevenue_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetPackageDailyRevenue_Response*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetPackageDailyRevenue_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetPackageDailyRevenue_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.country_revenue_.MergeFrom(from._impl_.country_revenue_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetPackageDailyRevenue_Response::CopyFrom(const CWorkshop_GetPackageDailyRevenue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetPackageDailyRevenue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetPackageDailyRevenue_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetPackageDailyRevenue_Response::InternalSwap(CWorkshop_GetPackageDailyRevenue_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.country_revenue_.InternalSwap(&other->_impl_.country_revenue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetPackageDailyRevenue_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[92]);
}

// ===================================================================

class CMsgSQLGCToGCGrantBackpackSlots::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSQLGCToGCGrantBackpackSlots>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_add_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSQLGCToGCGrantBackpackSlots::CMsgSQLGCToGCGrantBackpackSlots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSQLGCToGCGrantBackpackSlots)
}
CMsgSQLGCToGCGrantBackpackSlots::CMsgSQLGCToGCGrantBackpackSlots(const CMsgSQLGCToGCGrantBackpackSlots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSQLGCToGCGrantBackpackSlots* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.add_slots_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.add_slots_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.add_slots_));
  // @@protoc_insertion_point(copy_constructor:CMsgSQLGCToGCGrantBackpackSlots)
}

inline void CMsgSQLGCToGCGrantBackpackSlots::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.add_slots_){0u}
  };
}

CMsgSQLGCToGCGrantBackpackSlots::~CMsgSQLGCToGCGrantBackpackSlots() {
  // @@protoc_insertion_point(destructor:CMsgSQLGCToGCGrantBackpackSlots)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSQLGCToGCGrantBackpackSlots::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSQLGCToGCGrantBackpackSlots::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSQLGCToGCGrantBackpackSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSQLGCToGCGrantBackpackSlots)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.add_slots_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.add_slots_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSQLGCToGCGrantBackpackSlots::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 add_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_add_slots(&has_bits);
          _impl_.add_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSQLGCToGCGrantBackpackSlots::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSQLGCToGCGrantBackpackSlots)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 add_slots = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_add_slots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSQLGCToGCGrantBackpackSlots)
  return target;
}

size_t CMsgSQLGCToGCGrantBackpackSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSQLGCToGCGrantBackpackSlots)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 add_slots = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_add_slots());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSQLGCToGCGrantBackpackSlots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSQLGCToGCGrantBackpackSlots::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSQLGCToGCGrantBackpackSlots::GetClassData() const { return &_class_data_; }


void CMsgSQLGCToGCGrantBackpackSlots::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSQLGCToGCGrantBackpackSlots*>(&to_msg);
  auto& from = static_cast<const CMsgSQLGCToGCGrantBackpackSlots&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSQLGCToGCGrantBackpackSlots)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.add_slots_ = from._impl_.add_slots_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSQLGCToGCGrantBackpackSlots::CopyFrom(const CMsgSQLGCToGCGrantBackpackSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSQLGCToGCGrantBackpackSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSQLGCToGCGrantBackpackSlots::IsInitialized() const {
  return true;
}

void CMsgSQLGCToGCGrantBackpackSlots::InternalSwap(CMsgSQLGCToGCGrantBackpackSlots* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSQLGCToGCGrantBackpackSlots, _impl_.add_slots_)
      + sizeof(CMsgSQLGCToGCGrantBackpackSlots::_impl_.add_slots_)
      - PROTOBUF_FIELD_OFFSET(CMsgSQLGCToGCGrantBackpackSlots, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSQLGCToGCGrantBackpackSlots::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[93]);
}

// ===================================================================

class CMsgClientToGCLookupAccountName::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCLookupAccountName>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCLookupAccountName::CMsgClientToGCLookupAccountName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCLookupAccountName)
}
CMsgClientToGCLookupAccountName::CMsgClientToGCLookupAccountName(const CMsgClientToGCLookupAccountName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCLookupAccountName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCLookupAccountName)
}

inline void CMsgClientToGCLookupAccountName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgClientToGCLookupAccountName::~CMsgClientToGCLookupAccountName() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCLookupAccountName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCLookupAccountName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCLookupAccountName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCLookupAccountName::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCLookupAccountName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCLookupAccountName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCLookupAccountName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCLookupAccountName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCLookupAccountName)
  return target;
}

size_t CMsgClientToGCLookupAccountName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCLookupAccountName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCLookupAccountName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCLookupAccountName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCLookupAccountName::GetClassData() const { return &_class_data_; }


void CMsgClientToGCLookupAccountName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCLookupAccountName*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCLookupAccountName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCLookupAccountName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCLookupAccountName::CopyFrom(const CMsgClientToGCLookupAccountName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCLookupAccountName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCLookupAccountName::IsInitialized() const {
  return true;
}

void CMsgClientToGCLookupAccountName::InternalSwap(CMsgClientToGCLookupAccountName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCLookupAccountName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[94]);
}

// ===================================================================

class CMsgClientToGCLookupAccountNameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCLookupAccountNameResponse>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCLookupAccountNameResponse::CMsgClientToGCLookupAccountNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCLookupAccountNameResponse)
}
CMsgClientToGCLookupAccountNameResponse::CMsgClientToGCLookupAccountNameResponse(const CMsgClientToGCLookupAccountNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCLookupAccountNameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCLookupAccountNameResponse)
}

inline void CMsgClientToGCLookupAccountNameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.account_id_){0u}
  };
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCLookupAccountNameResponse::~CMsgClientToGCLookupAccountNameResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCLookupAccountNameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCLookupAccountNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_name_.Destroy();
}

void CMsgClientToGCLookupAccountNameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCLookupAccountNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCLookupAccountNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.account_name_.ClearNonDefaultToEmpty();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCLookupAccountNameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCLookupAccountNameResponse.account_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCLookupAccountNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCLookupAccountNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCLookupAccountNameResponse.account_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCLookupAccountNameResponse)
  return target;
}

size_t CMsgClientToGCLookupAccountNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCLookupAccountNameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string account_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCLookupAccountNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCLookupAccountNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCLookupAccountNameResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCLookupAccountNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCLookupAccountNameResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCLookupAccountNameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCLookupAccountNameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCLookupAccountNameResponse::CopyFrom(const CMsgClientToGCLookupAccountNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCLookupAccountNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCLookupAccountNameResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCLookupAccountNameResponse::InternalSwap(CMsgClientToGCLookupAccountNameResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_name_, lhs_arena,
      &other->_impl_.account_name_, rhs_arena
  );
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCLookupAccountNameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[95]);
}

// ===================================================================

class CMsgClientToGCCreateStaticRecipe_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipe_Item>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCCreateStaticRecipe_Item::CMsgClientToGCCreateStaticRecipe_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipe.Item)
}
CMsgClientToGCCreateStaticRecipe_Item::CMsgClientToGCCreateStaticRecipe_Item(const CMsgClientToGCCreateStaticRecipe_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCCreateStaticRecipe_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.slot_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_id_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.slot_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipe.Item)
}

inline void CMsgClientToGCCreateStaticRecipe_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.slot_id_){0u}
  };
}

CMsgClientToGCCreateStaticRecipe_Item::~CMsgClientToGCCreateStaticRecipe_Item() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipe.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCCreateStaticRecipe_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCCreateStaticRecipe_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipe_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipe.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slot_id_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.slot_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipe_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          _impl_.slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCCreateStaticRecipe_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipe.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipe.Item)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipe_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipe.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCCreateStaticRecipe_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCCreateStaticRecipe_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCCreateStaticRecipe_Item::GetClassData() const { return &_class_data_; }


void CMsgClientToGCCreateStaticRecipe_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCCreateStaticRecipe_Item*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCCreateStaticRecipe_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipe.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slot_id_ = from._impl_.slot_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCCreateStaticRecipe_Item::CopyFrom(const CMsgClientToGCCreateStaticRecipe_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipe.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipe_Item::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipe_Item::InternalSwap(CMsgClientToGCCreateStaticRecipe_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipe_Item, _impl_.slot_id_)
      + sizeof(CMsgClientToGCCreateStaticRecipe_Item::_impl_.slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipe_Item, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipe_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[96]);
}

// ===================================================================

class CMsgClientToGCCreateStaticRecipe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipe>()._impl_._has_bits_);
  static void set_has_recipe_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCCreateStaticRecipe::CMsgClientToGCCreateStaticRecipe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipe)
}
CMsgClientToGCCreateStaticRecipe::CMsgClientToGCCreateStaticRecipe(const CMsgClientToGCCreateStaticRecipe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCCreateStaticRecipe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.recipe_def_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.recipe_def_index_ = from._impl_.recipe_def_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipe)
}

inline void CMsgClientToGCCreateStaticRecipe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.recipe_def_index_){0u}
  };
}

CMsgClientToGCCreateStaticRecipe::~CMsgClientToGCCreateStaticRecipe() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCCreateStaticRecipe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void CMsgClientToGCCreateStaticRecipe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.recipe_def_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientToGCCreateStaticRecipe.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 recipe_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_recipe_def_index(&has_bits);
          _impl_.recipe_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCCreateStaticRecipe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientToGCCreateStaticRecipe.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 recipe_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recipe_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipe)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCCreateStaticRecipe.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 recipe_def_index = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recipe_def_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCCreateStaticRecipe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCCreateStaticRecipe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCCreateStaticRecipe::GetClassData() const { return &_class_data_; }


void CMsgClientToGCCreateStaticRecipe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCCreateStaticRecipe*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCCreateStaticRecipe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_recipe_def_index()) {
    _this->_internal_set_recipe_def_index(from._internal_recipe_def_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCCreateStaticRecipe::CopyFrom(const CMsgClientToGCCreateStaticRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipe::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipe::InternalSwap(CMsgClientToGCCreateStaticRecipe* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.recipe_def_index_, other->_impl_.recipe_def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[97]);
}

// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse_OutputItem>()._impl_._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CMsgClientToGCCreateStaticRecipeResponse_OutputItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
}
CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CMsgClientToGCCreateStaticRecipeResponse_OutputItem(const CMsgClientToGCCreateStaticRecipeResponse_OutputItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCCreateStaticRecipeResponse_OutputItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.def_index_){}
    , decltype(_impl_.slot_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_id_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.slot_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
}

inline void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.def_index_){0u}
    , decltype(_impl_.slot_id_){0u}
  };
}

CMsgClientToGCCreateStaticRecipeResponse_OutputItem::~CMsgClientToGCCreateStaticRecipeResponse_OutputItem() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slot_id_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.slot_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slot_id(&has_bits);
          _impl_.slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 slot_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse_OutputItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 slot_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCCreateStaticRecipeResponse_OutputItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCCreateStaticRecipeResponse_OutputItem::GetClassData() const { return &_class_data_; }


void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCCreateStaticRecipeResponse_OutputItem*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCCreateStaticRecipeResponse_OutputItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.def_index_ = from._impl_.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.slot_id_ = from._impl_.slot_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse_OutputItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse_OutputItem::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse_OutputItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _impl_.slot_id_)
      + sizeof(CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_impl_.slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse_OutputItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[98]);
}

// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse_InputError::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse_InputError>()._impl_._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse_InputError::CMsgClientToGCCreateStaticRecipeResponse_InputError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse.InputError)
}
CMsgClientToGCCreateStaticRecipeResponse_InputError::CMsgClientToGCCreateStaticRecipeResponse_InputError(const CMsgClientToGCCreateStaticRecipeResponse_InputError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCCreateStaticRecipeResponse_InputError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_id_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_id_, &from._impl_.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.slot_id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse.InputError)
}

inline void CMsgClientToGCCreateStaticRecipeResponse_InputError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_id_){0u}
    , decltype(_impl_.error_){0}
  };
}

CMsgClientToGCCreateStaticRecipeResponse_InputError::~CMsgClientToGCCreateStaticRecipeResponse_InputError() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCCreateStaticRecipeResponse_InputError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_) -
        reinterpret_cast<char*>(&_impl_.slot_id_)) + sizeof(_impl_.error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse_InputError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          _impl_.slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2 [default = eResponse_Success];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCCreateStaticRecipeResponse_EResponse_IsValid(val))) {
            _internal_set_error(static_cast<::CMsgClientToGCCreateStaticRecipeResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCCreateStaticRecipeResponse_InputError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2 [default = eResponse_Success];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse_InputError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

    // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2 [default = eResponse_Success];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCCreateStaticRecipeResponse_InputError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCCreateStaticRecipeResponse_InputError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCCreateStaticRecipeResponse_InputError::GetClassData() const { return &_class_data_; }


void CMsgClientToGCCreateStaticRecipeResponse_InputError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCCreateStaticRecipeResponse_InputError*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCCreateStaticRecipeResponse_InputError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slot_id_ = from._impl_.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse_InputError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse_InputError::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse_InputError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_InputError, _impl_.error_)
      + sizeof(CMsgClientToGCCreateStaticRecipeResponse_InputError::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_InputError, _impl_.slot_id_)>(
          reinterpret_cast<char*>(&_impl_.slot_id_),
          reinterpret_cast<char*>(&other->_impl_.slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse_InputError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[99]);
}

// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput>()._impl_._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
}
CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput(const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.slot_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_id_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.slot_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
}

inline void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){uint64_t{0u}}
    , decltype(_impl_.slot_id_){0u}
  };
}

CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::~CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slot_id_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.slot_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          _impl_.slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::GetClassData() const { return &_class_data_; }


void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slot_id_ = from._impl_.slot_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _impl_.slot_id_)
      + sizeof(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_impl_.slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[100]);
}

// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse::CMsgClientToGCCreateStaticRecipeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse)
}
CMsgClientToGCCreateStaticRecipeResponse::CMsgClientToGCCreateStaticRecipeResponse(const CMsgClientToGCCreateStaticRecipeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCCreateStaticRecipeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_items_){from._impl_.output_items_}
    , decltype(_impl_.input_errors_){from._impl_.input_errors_}
    , decltype(_impl_.additional_outputs_){from._impl_.additional_outputs_}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse)
}

inline void CMsgClientToGCCreateStaticRecipeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_items_){arena}
    , decltype(_impl_.input_errors_){arena}
    , decltype(_impl_.additional_outputs_){arena}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCCreateStaticRecipeResponse::~CMsgClientToGCCreateStaticRecipeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCCreateStaticRecipeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_items_.~RepeatedPtrField();
  _impl_.input_errors_.~RepeatedPtrField();
  _impl_.additional_outputs_.~RepeatedPtrField();
}

void CMsgClientToGCCreateStaticRecipeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_items_.Clear();
  _impl_.input_errors_.Clear();
  _impl_.additional_outputs_.Clear();
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1 [default = eResponse_Success];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCCreateStaticRecipeResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCCreateStaticRecipeResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCCreateStaticRecipeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1 [default = eResponse_Success];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_output_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_output_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_input_errors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
  total_size += 1UL * this->_internal_output_items_size();
  for (const auto& msg : this->_impl_.output_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
  total_size += 1UL * this->_internal_input_errors_size();
  for (const auto& msg : this->_impl_.input_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
  total_size += 1UL * this->_internal_additional_outputs_size();
  for (const auto& msg : this->_impl_.additional_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1 [default = eResponse_Success];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCCreateStaticRecipeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCCreateStaticRecipeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCCreateStaticRecipeResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCCreateStaticRecipeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCCreateStaticRecipeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCCreateStaticRecipeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.output_items_.MergeFrom(from._impl_.output_items_);
  _this->_impl_.input_errors_.MergeFrom(from._impl_.input_errors_);
  _this->_impl_.additional_outputs_.MergeFrom(from._impl_.additional_outputs_);
  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCCreateStaticRecipeResponse::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.output_items_.InternalSwap(&other->_impl_.output_items_);
  _impl_.input_errors_.InternalSwap(&other->_impl_.input_errors_);
  _impl_.additional_outputs_.InternalSwap(&other->_impl_.additional_outputs_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[101]);
}

// ===================================================================

class CMsgProcessTransactionOrder_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProcessTransactionOrder_Item>()._impl_._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_category_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_purchase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_reference_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parent_stack_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_price(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_user_facing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgProcessTransactionOrder_Item::CMsgProcessTransactionOrder_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgProcessTransactionOrder.Item)
}
CMsgProcessTransactionOrder_Item::CMsgProcessTransactionOrder_Item(const CMsgProcessTransactionOrder_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgProcessTransactionOrder_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_desc_){}
    , decltype(_impl_.item_def_index_){}
    , decltype(_impl_.item_price_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.store_purchase_type_){}
    , decltype(_impl_.source_reference_id_){}
    , decltype(_impl_.parent_stack_index_){}
    , decltype(_impl_.default_price_){}
    , decltype(_impl_.is_user_facing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category_desc()) {
    _this->_impl_.category_desc_.Set(from._internal_category_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.item_def_index_, &from._impl_.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_user_facing_) -
    reinterpret_cast<char*>(&_impl_.item_def_index_)) + sizeof(_impl_.is_user_facing_));
  // @@protoc_insertion_point(copy_constructor:CMsgProcessTransactionOrder.Item)
}

inline void CMsgProcessTransactionOrder_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_desc_){}
    , decltype(_impl_.item_def_index_){0u}
    , decltype(_impl_.item_price_){0u}
    , decltype(_impl_.quantity_){0u}
    , decltype(_impl_.store_purchase_type_){0u}
    , decltype(_impl_.source_reference_id_){uint64_t{0u}}
    , decltype(_impl_.parent_stack_index_){0}
    , decltype(_impl_.default_price_){false}
    , decltype(_impl_.is_user_facing_){false}
  };
  _impl_.category_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgProcessTransactionOrder_Item::~CMsgProcessTransactionOrder_Item() {
  // @@protoc_insertion_point(destructor:CMsgProcessTransactionOrder.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgProcessTransactionOrder_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_desc_.Destroy();
}

void CMsgProcessTransactionOrder_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgProcessTransactionOrder_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProcessTransactionOrder.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.category_desc_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.default_price_) -
        reinterpret_cast<char*>(&_impl_.item_def_index_)) + sizeof(_impl_.default_price_));
  }
  _impl_.is_user_facing_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProcessTransactionOrder_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def_index(&has_bits);
          _impl_.item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_price(&has_bits);
          _impl_.item_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string category_desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_category_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgProcessTransactionOrder.Item.category_desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 store_purchase_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_store_purchase_type(&has_bits);
          _impl_.store_purchase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 source_reference_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_source_reference_id(&has_bits);
          _impl_.source_reference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 parent_stack_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_parent_stack_index(&has_bits);
          _impl_.parent_stack_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool default_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_default_price(&has_bits);
          _impl_.default_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_user_facing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_user_facing(&has_bits);
          _impl_.is_user_facing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgProcessTransactionOrder_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProcessTransactionOrder.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_index(), target);
  }

  // optional uint32 item_price = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_price(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_quantity(), target);
  }

  // optional string category_desc = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category_desc().data(), static_cast<int>(this->_internal_category_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProcessTransactionOrder.Item.category_desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_category_desc(), target);
  }

  // optional uint32 store_purchase_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_store_purchase_type(), target);
  }

  // optional uint64 source_reference_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_source_reference_id(), target);
  }

  // optional int32 parent_stack_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_parent_stack_index(), target);
  }

  // optional bool default_price = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_default_price(), target);
  }

  // optional bool is_user_facing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_user_facing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProcessTransactionOrder.Item)
  return target;
}

size_t CMsgProcessTransactionOrder_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProcessTransactionOrder.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string category_desc = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category_desc());
    }

    // optional uint32 item_def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
    }

    // optional uint32 item_price = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_price());
    }

    // optional uint32 quantity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 store_purchase_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_store_purchase_type());
    }

    // optional uint64 source_reference_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_reference_id());
    }

    // optional int32 parent_stack_index = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent_stack_index());
    }

    // optional bool default_price = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_user_facing = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgProcessTransactionOrder_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgProcessTransactionOrder_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgProcessTransactionOrder_Item::GetClassData() const { return &_class_data_; }


void CMsgProcessTransactionOrder_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgProcessTransactionOrder_Item*>(&to_msg);
  auto& from = static_cast<const CMsgProcessTransactionOrder_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgProcessTransactionOrder.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_category_desc(from._internal_category_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_def_index_ = from._impl_.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_price_ = from._impl_.item_price_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.store_purchase_type_ = from._impl_.store_purchase_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.source_reference_id_ = from._impl_.source_reference_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.parent_stack_index_ = from._impl_.parent_stack_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.default_price_ = from._impl_.default_price_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_is_user_facing(from._internal_is_user_facing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProcessTransactionOrder_Item::CopyFrom(const CMsgProcessTransactionOrder_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProcessTransactionOrder.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProcessTransactionOrder_Item::IsInitialized() const {
  return true;
}

void CMsgProcessTransactionOrder_Item::InternalSwap(CMsgProcessTransactionOrder_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_desc_, lhs_arena,
      &other->_impl_.category_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder_Item, _impl_.is_user_facing_)
      + sizeof(CMsgProcessTransactionOrder_Item::_impl_.is_user_facing_)
      - PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder_Item, _impl_.item_def_index_)>(
          reinterpret_cast<char*>(&_impl_.item_def_index_),
          reinterpret_cast<char*>(&other->_impl_.item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProcessTransactionOrder_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[102]);
}

// ===================================================================

class CMsgProcessTransactionOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProcessTransactionOrder>()._impl_._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partner_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_watermark(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_purchase_report_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgProcessTransactionOrder::CMsgProcessTransactionOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgProcessTransactionOrder)
}
CMsgProcessTransactionOrder::CMsgProcessTransactionOrder(const CMsgProcessTransactionOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgProcessTransactionOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.txn_id_){}
    , decltype(_impl_.steam_txn_id_){}
    , decltype(_impl_.partner_txn_id_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.watermark_){}
    , decltype(_impl_.time_stamp_){}
    , decltype(_impl_.purchase_report_status_){}
    , decltype(_impl_.currency_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.txn_id_, &from._impl_.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currency_) -
    reinterpret_cast<char*>(&_impl_.txn_id_)) + sizeof(_impl_.currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgProcessTransactionOrder)
}

inline void CMsgProcessTransactionOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.txn_id_){uint64_t{0u}}
    , decltype(_impl_.steam_txn_id_){uint64_t{0u}}
    , decltype(_impl_.partner_txn_id_){uint64_t{0u}}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.watermark_){uint64_t{0u}}
    , decltype(_impl_.time_stamp_){0u}
    , decltype(_impl_.purchase_report_status_){0}
    , decltype(_impl_.currency_){0u}
  };
}

CMsgProcessTransactionOrder::~CMsgProcessTransactionOrder() {
  // @@protoc_insertion_point(destructor:CMsgProcessTransactionOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgProcessTransactionOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void CMsgProcessTransactionOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgProcessTransactionOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProcessTransactionOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.txn_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currency_) -
        reinterpret_cast<char*>(&_impl_.txn_id_)) + sizeof(_impl_.currency_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProcessTransactionOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          _impl_.txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steam_txn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steam_txn_id(&has_bits);
          _impl_.steam_txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 partner_txn_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_partner_txn_id(&has_bits);
          _impl_.partner_txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_stamp(&has_bits);
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 watermark = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_watermark(&has_bits);
          _impl_.watermark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_report_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_purchase_report_status(&has_bits);
          _impl_.purchase_report_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_currency(&has_bits);
          _impl_.currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgProcessTransactionOrder.Item items = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgProcessTransactionOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProcessTransactionOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  // optional uint64 steam_txn_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steam_txn_id(), target);
  }

  // optional uint64 partner_txn_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_partner_txn_id(), target);
  }

  // optional fixed64 steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steam_id(), target);
  }

  // optional uint32 time_stamp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_stamp(), target);
  }

  // optional uint64 watermark = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_watermark(), target);
  }

  // optional int32 purchase_report_status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_purchase_report_status(), target);
  }

  // optional uint32 currency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_currency(), target);
  }

  // repeated .CMsgProcessTransactionOrder.Item items = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProcessTransactionOrder)
  return target;
}

size_t CMsgProcessTransactionOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProcessTransactionOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgProcessTransactionOrder.Item items = 9;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 txn_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
    }

    // optional uint64 steam_txn_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steam_txn_id());
    }

    // optional uint64 partner_txn_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_partner_txn_id());
    }

    // optional fixed64 steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 watermark = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_watermark());
    }

    // optional uint32 time_stamp = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_stamp());
    }

    // optional int32 purchase_report_status = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_report_status());
    }

    // optional uint32 currency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currency());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgProcessTransactionOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgProcessTransactionOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgProcessTransactionOrder::GetClassData() const { return &_class_data_; }


void CMsgProcessTransactionOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgProcessTransactionOrder*>(&to_msg);
  auto& from = static_cast<const CMsgProcessTransactionOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgProcessTransactionOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.txn_id_ = from._impl_.txn_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_txn_id_ = from._impl_.steam_txn_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.partner_txn_id_ = from._impl_.partner_txn_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.watermark_ = from._impl_.watermark_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_stamp_ = from._impl_.time_stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.purchase_report_status_ = from._impl_.purchase_report_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.currency_ = from._impl_.currency_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProcessTransactionOrder::CopyFrom(const CMsgProcessTransactionOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProcessTransactionOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProcessTransactionOrder::IsInitialized() const {
  return true;
}

void CMsgProcessTransactionOrder::InternalSwap(CMsgProcessTransactionOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder, _impl_.currency_)
      + sizeof(CMsgProcessTransactionOrder::_impl_.currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder, _impl_.txn_id_)>(
          reinterpret_cast<char*>(&_impl_.txn_id_),
          reinterpret_cast<char*>(&other->_impl_.txn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProcessTransactionOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[103]);
}

// ===================================================================

class CMsgGCToGCStoreProcessCDKeyTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessCDKeyTransaction>()._impl_._has_bits_);
  static const ::CMsgProcessTransactionOrder& order(const CMsgGCToGCStoreProcessCDKeyTransaction* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgProcessTransactionOrder&
CMsgGCToGCStoreProcessCDKeyTransaction::_Internal::order(const CMsgGCToGCStoreProcessCDKeyTransaction* msg) {
  return *msg->_impl_.order_;
}
CMsgGCToGCStoreProcessCDKeyTransaction::CMsgGCToGCStoreProcessCDKeyTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessCDKeyTransaction)
}
CMsgGCToGCStoreProcessCDKeyTransaction::CMsgGCToGCStoreProcessCDKeyTransaction(const CMsgGCToGCStoreProcessCDKeyTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCStoreProcessCDKeyTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.reason_code_){}
    , decltype(_impl_.partner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    _this->_impl_.order_ = new ::CMsgProcessTransactionOrder(*from._impl_.order_);
  }
  ::memcpy(&_impl_.reason_code_, &from._impl_.reason_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partner_) -
    reinterpret_cast<char*>(&_impl_.reason_code_)) + sizeof(_impl_.partner_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessCDKeyTransaction)
}

inline void CMsgGCToGCStoreProcessCDKeyTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.reason_code_){0u}
    , decltype(_impl_.partner_){0u}
  };
}

CMsgGCToGCStoreProcessCDKeyTransaction::~CMsgGCToGCStoreProcessCDKeyTransaction() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessCDKeyTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCStoreProcessCDKeyTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_;
}

void CMsgGCToGCStoreProcessCDKeyTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessCDKeyTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.reason_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.partner_) -
        reinterpret_cast<char*>(&_impl_.reason_code_)) + sizeof(_impl_.partner_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessCDKeyTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgProcessTransactionOrder order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reason_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reason_code(&has_bits);
          _impl_.reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 partner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_partner(&has_bits);
          _impl_.partner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCStoreProcessCDKeyTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgProcessTransactionOrder order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // optional uint32 reason_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason_code(), target);
  }

  // optional uint32 partner = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_partner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessCDKeyTransaction)
  return target;
}

size_t CMsgGCToGCStoreProcessCDKeyTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgProcessTransactionOrder order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.order_);
    }

    // optional uint32 reason_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reason_code());
    }

    // optional uint32 partner = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partner());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCStoreProcessCDKeyTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCStoreProcessCDKeyTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCStoreProcessCDKeyTransaction::GetClassData() const { return &_class_data_; }


void CMsgGCToGCStoreProcessCDKeyTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCStoreProcessCDKeyTransaction*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCStoreProcessCDKeyTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_order()->::CMsgProcessTransactionOrder::MergeFrom(
          from._internal_order());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reason_code_ = from._impl_.reason_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.partner_ = from._impl_.partner_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCStoreProcessCDKeyTransaction::CopyFrom(const CMsgGCToGCStoreProcessCDKeyTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessCDKeyTransaction::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessCDKeyTransaction::InternalSwap(CMsgGCToGCStoreProcessCDKeyTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCStoreProcessCDKeyTransaction, _impl_.partner_)
      + sizeof(CMsgGCToGCStoreProcessCDKeyTransaction::_impl_.partner_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCStoreProcessCDKeyTransaction, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessCDKeyTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[104]);
}

// ===================================================================

class CMsgGCToGCStoreProcessCDKeyTransactionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessCDKeyTransactionResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCStoreProcessCDKeyTransactionResponse::CMsgGCToGCStoreProcessCDKeyTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
}
CMsgGCToGCStoreProcessCDKeyTransactionResponse::CMsgGCToGCStoreProcessCDKeyTransactionResponse(const CMsgGCToGCStoreProcessCDKeyTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCStoreProcessCDKeyTransactionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
}

inline void CMsgGCToGCStoreProcessCDKeyTransactionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgGCToGCStoreProcessCDKeyTransactionResponse::~CMsgGCToGCStoreProcessCDKeyTransactionResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCStoreProcessCDKeyTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessCDKeyTransactionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCStoreProcessCDKeyTransactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  return target;
}

size_t CMsgGCToGCStoreProcessCDKeyTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCStoreProcessCDKeyTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCStoreProcessCDKeyTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCStoreProcessCDKeyTransactionResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToGCStoreProcessCDKeyTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCStoreProcessCDKeyTransactionResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCStoreProcessCDKeyTransactionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::CopyFrom(const CMsgGCToGCStoreProcessCDKeyTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessCDKeyTransactionResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::InternalSwap(CMsgGCToGCStoreProcessCDKeyTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessCDKeyTransactionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[105]);
}

// ===================================================================

class CMsgGCToGCStoreProcessSettlement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessSettlement>()._impl_._has_bits_);
  static const ::CMsgProcessTransactionOrder& order(const CMsgGCToGCStoreProcessSettlement* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgProcessTransactionOrder&
CMsgGCToGCStoreProcessSettlement::_Internal::order(const CMsgGCToGCStoreProcessSettlement* msg) {
  return *msg->_impl_.order_;
}
CMsgGCToGCStoreProcessSettlement::CMsgGCToGCStoreProcessSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessSettlement)
}
CMsgGCToGCStoreProcessSettlement::CMsgGCToGCStoreProcessSettlement(const CMsgGCToGCStoreProcessSettlement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCStoreProcessSettlement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    _this->_impl_.order_ = new ::CMsgProcessTransactionOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessSettlement)
}

inline void CMsgGCToGCStoreProcessSettlement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}
  };
}

CMsgGCToGCStoreProcessSettlement::~CMsgGCToGCStoreProcessSettlement() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessSettlement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCStoreProcessSettlement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_;
}

void CMsgGCToGCStoreProcessSettlement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessSettlement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessSettlement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgProcessTransactionOrder order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCStoreProcessSettlement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessSettlement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgProcessTransactionOrder order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessSettlement)
  return target;
}

size_t CMsgGCToGCStoreProcessSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessSettlement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgProcessTransactionOrder order = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCStoreProcessSettlement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCStoreProcessSettlement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCStoreProcessSettlement::GetClassData() const { return &_class_data_; }


void CMsgGCToGCStoreProcessSettlement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCStoreProcessSettlement*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCStoreProcessSettlement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessSettlement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order()) {
    _this->_internal_mutable_order()->::CMsgProcessTransactionOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCStoreProcessSettlement::CopyFrom(const CMsgGCToGCStoreProcessSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessSettlement::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessSettlement::InternalSwap(CMsgGCToGCStoreProcessSettlement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessSettlement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[106]);
}

// ===================================================================

class CMsgGCToGCStoreProcessSettlementResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessSettlementResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCStoreProcessSettlementResponse::CMsgGCToGCStoreProcessSettlementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessSettlementResponse)
}
CMsgGCToGCStoreProcessSettlementResponse::CMsgGCToGCStoreProcessSettlementResponse(const CMsgGCToGCStoreProcessSettlementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCStoreProcessSettlementResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessSettlementResponse)
}

inline void CMsgGCToGCStoreProcessSettlementResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgGCToGCStoreProcessSettlementResponse::~CMsgGCToGCStoreProcessSettlementResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessSettlementResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCStoreProcessSettlementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCStoreProcessSettlementResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessSettlementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessSettlementResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessSettlementResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCStoreProcessSettlementResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessSettlementResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessSettlementResponse)
  return target;
}

size_t CMsgGCToGCStoreProcessSettlementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessSettlementResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCStoreProcessSettlementResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCStoreProcessSettlementResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCStoreProcessSettlementResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToGCStoreProcessSettlementResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCStoreProcessSettlementResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCStoreProcessSettlementResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessSettlementResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCStoreProcessSettlementResponse::CopyFrom(const CMsgGCToGCStoreProcessSettlementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessSettlementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessSettlementResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessSettlementResponse::InternalSwap(CMsgGCToGCStoreProcessSettlementResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessSettlementResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[107]);
}

// ===================================================================

class CMsgGCToGCBroadcastConsoleCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBroadcastConsoleCommand>()._impl_._has_bits_);
  static void set_has_con_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sending_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_output_initiator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBroadcastConsoleCommand)
}
CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(const CMsgGCToGCBroadcastConsoleCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCBroadcastConsoleCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.con_command_){}
    , decltype(_impl_.output_initiator_){}
    , decltype(_impl_.report_output_){}
    , decltype(_impl_.sending_gc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.con_command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.con_command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_con_command()) {
    _this->_impl_.con_command_.Set(from._internal_con_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_initiator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_initiator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_initiator()) {
    _this->_impl_.output_initiator_.Set(from._internal_output_initiator(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.report_output_, &from._impl_.report_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sending_gc_) -
    reinterpret_cast<char*>(&_impl_.report_output_)) + sizeof(_impl_.sending_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBroadcastConsoleCommand)
}

inline void CMsgGCToGCBroadcastConsoleCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.con_command_){}
    , decltype(_impl_.output_initiator_){}
    , decltype(_impl_.report_output_){false}
    , decltype(_impl_.sending_gc_){-1}
  };
  _impl_.con_command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.con_command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_initiator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_initiator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToGCBroadcastConsoleCommand::~CMsgGCToGCBroadcastConsoleCommand() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBroadcastConsoleCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCBroadcastConsoleCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.con_command_.Destroy();
  _impl_.output_initiator_.Destroy();
}

void CMsgGCToGCBroadcastConsoleCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCBroadcastConsoleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBroadcastConsoleCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.con_command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.output_initiator_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.report_output_ = false;
    _impl_.sending_gc_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBroadcastConsoleCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string con_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_con_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToGCBroadcastConsoleCommand.con_command");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool report_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_report_output(&has_bits);
          _impl_.report_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sending_gc = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sending_gc(&has_bits);
          _impl_.sending_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_initiator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_output_initiator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToGCBroadcastConsoleCommand.output_initiator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCBroadcastConsoleCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBroadcastConsoleCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string con_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_con_command().data(), static_cast<int>(this->_internal_con_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCBroadcastConsoleCommand.con_command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_con_command(), target);
  }

  // optional bool report_output = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_report_output(), target);
  }

  // optional int32 sending_gc = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sending_gc(), target);
  }

  // optional string output_initiator = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_initiator().data(), static_cast<int>(this->_internal_output_initiator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCBroadcastConsoleCommand.output_initiator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_initiator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBroadcastConsoleCommand)
  return target;
}

size_t CMsgGCToGCBroadcastConsoleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBroadcastConsoleCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string con_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_con_command());
    }

    // optional string output_initiator = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_initiator());
    }

    // optional bool report_output = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 sending_gc = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sending_gc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCBroadcastConsoleCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCBroadcastConsoleCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCBroadcastConsoleCommand::GetClassData() const { return &_class_data_; }


void CMsgGCToGCBroadcastConsoleCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCBroadcastConsoleCommand*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCBroadcastConsoleCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBroadcastConsoleCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_con_command(from._internal_con_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_output_initiator(from._internal_output_initiator());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.report_output_ = from._impl_.report_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sending_gc_ = from._impl_.sending_gc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCBroadcastConsoleCommand::CopyFrom(const CMsgGCToGCBroadcastConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBroadcastConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBroadcastConsoleCommand::IsInitialized() const {
  return true;
}

void CMsgGCToGCBroadcastConsoleCommand::InternalSwap(CMsgGCToGCBroadcastConsoleCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.con_command_, lhs_arena,
      &other->_impl_.con_command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_initiator_, lhs_arena,
      &other->_impl_.output_initiator_, rhs_arena
  );
  swap(_impl_.report_output_, other->_impl_.report_output_);
  swap(_impl_.sending_gc_, other->_impl_.sending_gc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBroadcastConsoleCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[108]);
}

// ===================================================================

class CMsgGCToGCConsoleOutput_OutputLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCConsoleOutput_OutputLine>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spew_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCConsoleOutput_OutputLine::CMsgGCToGCConsoleOutput_OutputLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCConsoleOutput.OutputLine)
}
CMsgGCToGCConsoleOutput_OutputLine::CMsgGCToGCConsoleOutput_OutputLine(const CMsgGCToGCConsoleOutput_OutputLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCConsoleOutput_OutputLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.spew_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.spew_level_ = from._impl_.spew_level_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCConsoleOutput.OutputLine)
}

inline void CMsgGCToGCConsoleOutput_OutputLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.spew_level_){0u}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToGCConsoleOutput_OutputLine::~CMsgGCToGCConsoleOutput_OutputLine() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCConsoleOutput.OutputLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCConsoleOutput_OutputLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CMsgGCToGCConsoleOutput_OutputLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCConsoleOutput_OutputLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCConsoleOutput.OutputLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_.spew_level_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCConsoleOutput_OutputLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToGCConsoleOutput.OutputLine.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spew_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_spew_level(&has_bits);
          _impl_.spew_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCConsoleOutput_OutputLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCConsoleOutput.OutputLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCConsoleOutput.OutputLine.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional uint32 spew_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_spew_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCConsoleOutput.OutputLine)
  return target;
}

size_t CMsgGCToGCConsoleOutput_OutputLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCConsoleOutput.OutputLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 spew_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spew_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCConsoleOutput_OutputLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCConsoleOutput_OutputLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCConsoleOutput_OutputLine::GetClassData() const { return &_class_data_; }


void CMsgGCToGCConsoleOutput_OutputLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCConsoleOutput_OutputLine*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCConsoleOutput_OutputLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCConsoleOutput.OutputLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.spew_level_ = from._impl_.spew_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCConsoleOutput_OutputLine::CopyFrom(const CMsgGCToGCConsoleOutput_OutputLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCConsoleOutput.OutputLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCConsoleOutput_OutputLine::IsInitialized() const {
  return true;
}

void CMsgGCToGCConsoleOutput_OutputLine::InternalSwap(CMsgGCToGCConsoleOutput_OutputLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.spew_level_, other->_impl_.spew_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCConsoleOutput_OutputLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[109]);
}

// ===================================================================

class CMsgGCToGCConsoleOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCConsoleOutput>()._impl_._has_bits_);
  static void set_has_initiator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sending_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_last_for_source_job(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCConsoleOutput::CMsgGCToGCConsoleOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCConsoleOutput)
}
CMsgGCToGCConsoleOutput::CMsgGCToGCConsoleOutput(const CMsgGCToGCConsoleOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCConsoleOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){from._impl_.msgs_}
    , decltype(_impl_.initiator_){}
    , decltype(_impl_.is_last_for_source_job_){}
    , decltype(_impl_.sending_gc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.initiator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initiator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_initiator()) {
    _this->_impl_.initiator_.Set(from._internal_initiator(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_last_for_source_job_, &from._impl_.is_last_for_source_job_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sending_gc_) -
    reinterpret_cast<char*>(&_impl_.is_last_for_source_job_)) + sizeof(_impl_.sending_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCConsoleOutput)
}

inline void CMsgGCToGCConsoleOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){arena}
    , decltype(_impl_.initiator_){}
    , decltype(_impl_.is_last_for_source_job_){false}
    , decltype(_impl_.sending_gc_){-1}
  };
  _impl_.initiator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initiator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToGCConsoleOutput::~CMsgGCToGCConsoleOutput() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCConsoleOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCConsoleOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgs_.~RepeatedPtrField();
  _impl_.initiator_.Destroy();
}

void CMsgGCToGCConsoleOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCConsoleOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCConsoleOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.initiator_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.is_last_for_source_job_ = false;
    _impl_.sending_gc_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCConsoleOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string initiator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_initiator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToGCConsoleOutput.initiator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 sending_gc = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sending_gc(&has_bits);
          _impl_.sending_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_last_for_source_job = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_last_for_source_job(&has_bits);
          _impl_.is_last_for_source_job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCConsoleOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCConsoleOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string initiator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_initiator().data(), static_cast<int>(this->_internal_initiator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCConsoleOutput.initiator");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_initiator(), target);
  }

  // optional int32 sending_gc = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sending_gc(), target);
  }

  // repeated .CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msgs_size()); i < n; i++) {
    const auto& repfield = this->_internal_msgs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_last_for_source_job = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_last_for_source_job(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCConsoleOutput)
  return target;
}

size_t CMsgGCToGCConsoleOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCConsoleOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->_impl_.msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string initiator = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initiator());
    }

    // optional bool is_last_for_source_job = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 sending_gc = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sending_gc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCConsoleOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCConsoleOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCConsoleOutput::GetClassData() const { return &_class_data_; }


void CMsgGCToGCConsoleOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCConsoleOutput*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCConsoleOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCConsoleOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.msgs_.MergeFrom(from._impl_.msgs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_initiator(from._internal_initiator());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_last_for_source_job_ = from._impl_.is_last_for_source_job_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sending_gc_ = from._impl_.sending_gc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCConsoleOutput::CopyFrom(const CMsgGCToGCConsoleOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCConsoleOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCConsoleOutput::IsInitialized() const {
  return true;
}

void CMsgGCToGCConsoleOutput::InternalSwap(CMsgGCToGCConsoleOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.msgs_.InternalSwap(&other->_impl_.msgs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initiator_, lhs_arena,
      &other->_impl_.initiator_, rhs_arena
  );
  swap(_impl_.is_last_for_source_job_, other->_impl_.is_last_for_source_job_);
  swap(_impl_.sending_gc_, other->_impl_.sending_gc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCConsoleOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[110]);
}

// ===================================================================

class CMsgItemAges_MaxItemIDTimestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemAges_MaxItemIDTimestamp>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgItemAges_MaxItemIDTimestamp::CMsgItemAges_MaxItemIDTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAges.MaxItemIDTimestamp)
}
CMsgItemAges_MaxItemIDTimestamp::CMsgItemAges_MaxItemIDTimestamp(const CMsgItemAges_MaxItemIDTimestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgItemAges_MaxItemIDTimestamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_item_id_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_item_id_, &from._impl_.max_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.max_item_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemAges.MaxItemIDTimestamp)
}

inline void CMsgItemAges_MaxItemIDTimestamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_item_id_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){0u}
  };
}

CMsgItemAges_MaxItemIDTimestamp::~CMsgItemAges_MaxItemIDTimestamp() {
  // @@protoc_insertion_point(destructor:CMsgItemAges.MaxItemIDTimestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgItemAges_MaxItemIDTimestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgItemAges_MaxItemIDTimestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgItemAges_MaxItemIDTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAges.MaxItemIDTimestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.max_item_id_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAges_MaxItemIDTimestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_item_id(&has_bits);
          _impl_.max_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgItemAges_MaxItemIDTimestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAges.MaxItemIDTimestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint64 max_item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAges.MaxItemIDTimestamp)
  return target;
}

size_t CMsgItemAges_MaxItemIDTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAges.MaxItemIDTimestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 max_item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_item_id());
    }

    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemAges_MaxItemIDTimestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgItemAges_MaxItemIDTimestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemAges_MaxItemIDTimestamp::GetClassData() const { return &_class_data_; }


void CMsgItemAges_MaxItemIDTimestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgItemAges_MaxItemIDTimestamp*>(&to_msg);
  auto& from = static_cast<const CMsgItemAges_MaxItemIDTimestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAges.MaxItemIDTimestamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_item_id_ = from._impl_.max_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemAges_MaxItemIDTimestamp::CopyFrom(const CMsgItemAges_MaxItemIDTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAges.MaxItemIDTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAges_MaxItemIDTimestamp::IsInitialized() const {
  return true;
}

void CMsgItemAges_MaxItemIDTimestamp::InternalSwap(CMsgItemAges_MaxItemIDTimestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemAges_MaxItemIDTimestamp, _impl_.timestamp_)
      + sizeof(CMsgItemAges_MaxItemIDTimestamp::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemAges_MaxItemIDTimestamp, _impl_.max_item_id_)>(
          reinterpret_cast<char*>(&_impl_.max_item_id_),
          reinterpret_cast<char*>(&other->_impl_.max_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAges_MaxItemIDTimestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[111]);
}

// ===================================================================

class CMsgItemAges::_Internal {
 public:
};

CMsgItemAges::CMsgItemAges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAges)
}
CMsgItemAges::CMsgItemAges(const CMsgItemAges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgItemAges* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_item_id_timestamps_){from._impl_.max_item_id_timestamps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgItemAges)
}

inline void CMsgItemAges::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_item_id_timestamps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgItemAges::~CMsgItemAges() {
  // @@protoc_insertion_point(destructor:CMsgItemAges)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgItemAges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.max_item_id_timestamps_.~RepeatedPtrField();
}

void CMsgItemAges::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgItemAges::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAges)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_item_id_timestamps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAges::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_max_item_id_timestamps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgItemAges::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAges)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_max_item_id_timestamps_size()); i < n; i++) {
    const auto& repfield = this->_internal_max_item_id_timestamps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAges)
  return target;
}

size_t CMsgItemAges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAges)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
  total_size += 1UL * this->_internal_max_item_id_timestamps_size();
  for (const auto& msg : this->_impl_.max_item_id_timestamps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemAges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgItemAges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemAges::GetClassData() const { return &_class_data_; }


void CMsgItemAges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgItemAges*>(&to_msg);
  auto& from = static_cast<const CMsgItemAges&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAges)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.max_item_id_timestamps_.MergeFrom(from._impl_.max_item_id_timestamps_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemAges::CopyFrom(const CMsgItemAges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAges::IsInitialized() const {
  return true;
}

void CMsgItemAges::InternalSwap(CMsgItemAges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.max_item_id_timestamps_.InternalSwap(&other->_impl_.max_item_id_timestamps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAges::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[112]);
}

// ===================================================================

class CMsgGCToGCInternalTestMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCInternalTestMsg>()._impl_._has_bits_);
  static void set_has_sending_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_job_id_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_job_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCToGCInternalTestMsg::CMsgGCToGCInternalTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCInternalTestMsg)
}
CMsgGCToGCInternalTestMsg::CMsgGCToGCInternalTestMsg(const CMsgGCToGCInternalTestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCInternalTestMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_body_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.job_id_source_){}
    , decltype(_impl_.job_id_target_){}
    , decltype(_impl_.sending_gc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_body()) {
    _this->_impl_.message_body_.Set(from._internal_message_body(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_id_, &from._impl_.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sending_gc_) -
    reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.sending_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCInternalTestMsg)
}

inline void CMsgGCToGCInternalTestMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_body_){}
    , decltype(_impl_.sender_id_){uint64_t{0u}}
    , decltype(_impl_.context_){0u}
    , decltype(_impl_.message_id_){0u}
    , decltype(_impl_.job_id_source_){uint64_t{0u}}
    , decltype(_impl_.job_id_target_){uint64_t{0u}}
    , decltype(_impl_.sending_gc_){-1}
  };
  _impl_.message_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToGCInternalTestMsg::~CMsgGCToGCInternalTestMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCInternalTestMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCInternalTestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_body_.Destroy();
}

void CMsgGCToGCInternalTestMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCInternalTestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCInternalTestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_body_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.job_id_target_) -
        reinterpret_cast<char*>(&_impl_.sender_id_)) + sizeof(_impl_.job_id_target_));
    _impl_.sending_gc_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCInternalTestMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 sending_gc = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sending_gc(&has_bits);
          _impl_.sending_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          _impl_.context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 message_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_message_id(&has_bits);
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message_body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 job_id_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_job_id_source(&has_bits);
          _impl_.job_id_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 job_id_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_job_id_target(&has_bits);
          _impl_.job_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCInternalTestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCInternalTestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 sending_gc = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sending_gc(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // optional uint32 message_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_message_id(), target);
  }

  // optional bytes message_body = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_message_body(), target);
  }

  // optional fixed64 job_id_source = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_job_id_source(), target);
  }

  // optional fixed64 job_id_target = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_job_id_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCInternalTestMsg)
  return target;
}

size_t CMsgGCToGCInternalTestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCInternalTestMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes message_body = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message_body());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 context = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_context());
    }

    // optional uint32 message_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id());
    }

    // optional fixed64 job_id_source = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 job_id_target = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 sending_gc = 1 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sending_gc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCInternalTestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCInternalTestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCInternalTestMsg::GetClassData() const { return &_class_data_; }


void CMsgGCToGCInternalTestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCInternalTestMsg*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCInternalTestMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCInternalTestMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message_body(from._internal_message_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sender_id_ = from._impl_.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.context_ = from._impl_.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.message_id_ = from._impl_.message_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.job_id_source_ = from._impl_.job_id_source_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.job_id_target_ = from._impl_.job_id_target_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.sending_gc_ = from._impl_.sending_gc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCInternalTestMsg::CopyFrom(const CMsgGCToGCInternalTestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCInternalTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCInternalTestMsg::IsInitialized() const {
  return true;
}

void CMsgGCToGCInternalTestMsg::InternalSwap(CMsgGCToGCInternalTestMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_body_, lhs_arena,
      &other->_impl_.message_body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCInternalTestMsg, _impl_.job_id_target_)
      + sizeof(CMsgGCToGCInternalTestMsg::_impl_.job_id_target_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCInternalTestMsg, _impl_.sender_id_)>(
          reinterpret_cast<char*>(&_impl_.sender_id_),
          reinterpret_cast<char*>(&other->_impl_.sender_id_));
  swap(_impl_.sending_gc_, other->_impl_.sending_gc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCInternalTestMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[113]);
}

// ===================================================================

class CMsgGCToGCClientServerVersionsUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCClientServerVersionsUpdated>()._impl_._has_bits_);
  static void set_has_client_min_allowed_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_active_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_active_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_deployed_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_what_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCToGCClientServerVersionsUpdated::CMsgGCToGCClientServerVersionsUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCClientServerVersionsUpdated)
}
CMsgGCToGCClientServerVersionsUpdated::CMsgGCToGCClientServerVersionsUpdated(const CMsgGCToGCClientServerVersionsUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCClientServerVersionsUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_min_allowed_version_){}
    , decltype(_impl_.client_active_version_){}
    , decltype(_impl_.server_active_version_){}
    , decltype(_impl_.server_deployed_version_){}
    , decltype(_impl_.what_changed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.client_min_allowed_version_, &from._impl_.client_min_allowed_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.what_changed_) -
    reinterpret_cast<char*>(&_impl_.client_min_allowed_version_)) + sizeof(_impl_.what_changed_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCClientServerVersionsUpdated)
}

inline void CMsgGCToGCClientServerVersionsUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_min_allowed_version_){0u}
    , decltype(_impl_.client_active_version_){0u}
    , decltype(_impl_.server_active_version_){0u}
    , decltype(_impl_.server_deployed_version_){0u}
    , decltype(_impl_.what_changed_){0u}
  };
}

CMsgGCToGCClientServerVersionsUpdated::~CMsgGCToGCClientServerVersionsUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCClientServerVersionsUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCClientServerVersionsUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCClientServerVersionsUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCClientServerVersionsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCClientServerVersionsUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.client_min_allowed_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.what_changed_) -
        reinterpret_cast<char*>(&_impl_.client_min_allowed_version_)) + sizeof(_impl_.what_changed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCClientServerVersionsUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 client_min_allowed_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_min_allowed_version(&has_bits);
          _impl_.client_min_allowed_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_active_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_active_version(&has_bits);
          _impl_.client_active_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_active_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_active_version(&has_bits);
          _impl_.server_active_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_deployed_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_deployed_version(&has_bits);
          _impl_.server_deployed_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 what_changed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_what_changed(&has_bits);
          _impl_.what_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCClientServerVersionsUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCClientServerVersionsUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 client_min_allowed_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_min_allowed_version(), target);
  }

  // optional uint32 client_active_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_active_version(), target);
  }

  // optional uint32 server_active_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_active_version(), target);
  }

  // optional uint32 server_deployed_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_deployed_version(), target);
  }

  // optional uint32 what_changed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_what_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCClientServerVersionsUpdated)
  return target;
}

size_t CMsgGCToGCClientServerVersionsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCClientServerVersionsUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 client_min_allowed_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_min_allowed_version());
    }

    // optional uint32 client_active_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_active_version());
    }

    // optional uint32 server_active_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_active_version());
    }

    // optional uint32 server_deployed_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_deployed_version());
    }

    // optional uint32 what_changed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_what_changed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCClientServerVersionsUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCClientServerVersionsUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCClientServerVersionsUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCToGCClientServerVersionsUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCClientServerVersionsUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCClientServerVersionsUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCClientServerVersionsUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.client_min_allowed_version_ = from._impl_.client_min_allowed_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_active_version_ = from._impl_.client_active_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_active_version_ = from._impl_.server_active_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_deployed_version_ = from._impl_.server_deployed_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.what_changed_ = from._impl_.what_changed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCClientServerVersionsUpdated::CopyFrom(const CMsgGCToGCClientServerVersionsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCClientServerVersionsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCClientServerVersionsUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToGCClientServerVersionsUpdated::InternalSwap(CMsgGCToGCClientServerVersionsUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCClientServerVersionsUpdated, _impl_.what_changed_)
      + sizeof(CMsgGCToGCClientServerVersionsUpdated::_impl_.what_changed_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCClientServerVersionsUpdated, _impl_.client_min_allowed_version_)>(
          reinterpret_cast<char*>(&_impl_.client_min_allowed_version_),
          reinterpret_cast<char*>(&other->_impl_.client_min_allowed_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCClientServerVersionsUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[114]);
}

// ===================================================================

class CMsgGCToGCBroadcastMessageFromSub::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBroadcastMessageFromSub>()._impl_._has_bits_);
  static void set_has_msg_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serialized_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBroadcastMessageFromSub::CMsgGCToGCBroadcastMessageFromSub(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBroadcastMessageFromSub)
}
CMsgGCToGCBroadcastMessageFromSub::CMsgGCToGCBroadcastMessageFromSub(const CMsgGCToGCBroadcastMessageFromSub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCBroadcastMessageFromSub* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_list_){from._impl_.account_id_list_}
    , /*decltype(_impl_._account_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.steam_id_list_){from._impl_.steam_id_list_}
    , decltype(_impl_.serialized_msg_){}
    , decltype(_impl_.msg_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serialized_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_msg()) {
    _this->_impl_.serialized_msg_.Set(from._internal_serialized_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msg_id_ = from._impl_.msg_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBroadcastMessageFromSub)
}

inline void CMsgGCToGCBroadcastMessageFromSub::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_list_){arena}
    , /*decltype(_impl_._account_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.steam_id_list_){arena}
    , decltype(_impl_.serialized_msg_){}
    , decltype(_impl_.msg_id_){0u}
  };
  _impl_.serialized_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToGCBroadcastMessageFromSub::~CMsgGCToGCBroadcastMessageFromSub() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBroadcastMessageFromSub)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCBroadcastMessageFromSub::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_list_.~RepeatedField();
  _impl_.steam_id_list_.~RepeatedField();
  _impl_.serialized_msg_.Destroy();
}

void CMsgGCToGCBroadcastMessageFromSub::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCBroadcastMessageFromSub::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBroadcastMessageFromSub)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_list_.Clear();
  _impl_.steam_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serialized_msg_.ClearNonDefaultToEmpty();
  }
  _impl_.msg_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBroadcastMessageFromSub::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msg_id(&has_bits);
          _impl_.msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serialized_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serialized_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 account_id_list = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_account_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steam_id_list = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_steam_id_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCBroadcastMessageFromSub::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBroadcastMessageFromSub)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 msg_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_id(), target);
  }

  // optional bytes serialized_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serialized_msg(), target);
  }

  // repeated uint32 account_id_list = 3 [packed = true];
  {
    int byte_size = _impl_._account_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_account_id_list(), byte_size, target);
    }
  }

  // repeated fixed64 steam_id_list = 4 [packed = true];
  if (this->_internal_steam_id_list_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_steam_id_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBroadcastMessageFromSub)
  return target;
}

size_t CMsgGCToGCBroadcastMessageFromSub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBroadcastMessageFromSub)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_id_list = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._account_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 steam_id_list = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_id_list_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_msg());
    }

    // optional uint32 msg_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCBroadcastMessageFromSub::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCBroadcastMessageFromSub::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCBroadcastMessageFromSub::GetClassData() const { return &_class_data_; }


void CMsgGCToGCBroadcastMessageFromSub::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCBroadcastMessageFromSub*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCBroadcastMessageFromSub&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBroadcastMessageFromSub)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_id_list_.MergeFrom(from._impl_.account_id_list_);
  _this->_impl_.steam_id_list_.MergeFrom(from._impl_.steam_id_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_serialized_msg(from._internal_serialized_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msg_id_ = from._impl_.msg_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCBroadcastMessageFromSub::CopyFrom(const CMsgGCToGCBroadcastMessageFromSub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBroadcastMessageFromSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBroadcastMessageFromSub::IsInitialized() const {
  return true;
}

void CMsgGCToGCBroadcastMessageFromSub::InternalSwap(CMsgGCToGCBroadcastMessageFromSub* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_id_list_.InternalSwap(&other->_impl_.account_id_list_);
  _impl_.steam_id_list_.InternalSwap(&other->_impl_.steam_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_msg_, lhs_arena,
      &other->_impl_.serialized_msg_, rhs_arena
  );
  swap(_impl_.msg_id_, other->_impl_.msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBroadcastMessageFromSub::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[115]);
}

// ===================================================================

class CMsgGCToClientCurrencyPricePoints_Currency::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientCurrencyPricePoints_Currency>()._impl_._has_bits_);
  static void set_has_currency_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientCurrencyPricePoints_Currency::CMsgGCToClientCurrencyPricePoints_Currency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientCurrencyPricePoints.Currency)
}
CMsgGCToClientCurrencyPricePoints_Currency::CMsgGCToClientCurrencyPricePoints_Currency(const CMsgGCToClientCurrencyPricePoints_Currency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientCurrencyPricePoints_Currency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_price_){from._impl_.currency_price_}
    , /*decltype(_impl_._currency_price_cached_byte_size_)*/{0}
    , decltype(_impl_.currency_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.currency_id_ = from._impl_.currency_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientCurrencyPricePoints.Currency)
}

inline void CMsgGCToClientCurrencyPricePoints_Currency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_price_){arena}
    , /*decltype(_impl_._currency_price_cached_byte_size_)*/{0}
    , decltype(_impl_.currency_id_){0u}
  };
}

CMsgGCToClientCurrencyPricePoints_Currency::~CMsgGCToClientCurrencyPricePoints_Currency() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientCurrencyPricePoints.Currency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientCurrencyPricePoints_Currency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_price_.~RepeatedField();
}

void CMsgGCToClientCurrencyPricePoints_Currency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientCurrencyPricePoints_Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientCurrencyPricePoints.Currency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currency_price_.Clear();
  _impl_.currency_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientCurrencyPricePoints_Currency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 currency_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_currency_id(&has_bits);
          _impl_.currency_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 currency_price = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_currency_price(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_currency_price(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientCurrencyPricePoints_Currency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientCurrencyPricePoints.Currency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 currency_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_currency_id(), target);
  }

  // repeated uint64 currency_price = 2 [packed = true];
  {
    int byte_size = _impl_._currency_price_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_currency_price(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientCurrencyPricePoints.Currency)
  return target;
}

size_t CMsgGCToClientCurrencyPricePoints_Currency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientCurrencyPricePoints.Currency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 currency_price = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.currency_price_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._currency_price_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 currency_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currency_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientCurrencyPricePoints_Currency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientCurrencyPricePoints_Currency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientCurrencyPricePoints_Currency::GetClassData() const { return &_class_data_; }


void CMsgGCToClientCurrencyPricePoints_Currency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientCurrencyPricePoints_Currency*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientCurrencyPricePoints_Currency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientCurrencyPricePoints.Currency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.currency_price_.MergeFrom(from._impl_.currency_price_);
  if (from._internal_has_currency_id()) {
    _this->_internal_set_currency_id(from._internal_currency_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientCurrencyPricePoints_Currency::CopyFrom(const CMsgGCToClientCurrencyPricePoints_Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientCurrencyPricePoints.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientCurrencyPricePoints_Currency::IsInitialized() const {
  return true;
}

void CMsgGCToClientCurrencyPricePoints_Currency::InternalSwap(CMsgGCToClientCurrencyPricePoints_Currency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.currency_price_.InternalSwap(&other->_impl_.currency_price_);
  swap(_impl_.currency_id_, other->_impl_.currency_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientCurrencyPricePoints_Currency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[116]);
}

// ===================================================================

class CMsgGCToClientCurrencyPricePoints::_Internal {
 public:
};

CMsgGCToClientCurrencyPricePoints::CMsgGCToClientCurrencyPricePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientCurrencyPricePoints)
}
CMsgGCToClientCurrencyPricePoints::CMsgGCToClientCurrencyPricePoints(const CMsgGCToClientCurrencyPricePoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientCurrencyPricePoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_key_){from._impl_.price_key_}
    , /*decltype(_impl_._price_key_cached_byte_size_)*/{0}
    , decltype(_impl_.currencies_){from._impl_.currencies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientCurrencyPricePoints)
}

inline void CMsgGCToClientCurrencyPricePoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_key_){arena}
    , /*decltype(_impl_._price_key_cached_byte_size_)*/{0}
    , decltype(_impl_.currencies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToClientCurrencyPricePoints::~CMsgGCToClientCurrencyPricePoints() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientCurrencyPricePoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientCurrencyPricePoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_key_.~RepeatedField();
  _impl_.currencies_.~RepeatedPtrField();
}

void CMsgGCToClientCurrencyPricePoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientCurrencyPricePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientCurrencyPricePoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_key_.Clear();
  _impl_.currencies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientCurrencyPricePoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 price_key = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_price_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_price_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_currencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientCurrencyPricePoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientCurrencyPricePoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 price_key = 1 [packed = true];
  {
    int byte_size = _impl_._price_key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_price_key(), byte_size, target);
    }
  }

  // repeated .CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_currencies_size()); i < n; i++) {
    const auto& repfield = this->_internal_currencies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientCurrencyPricePoints)
  return target;
}

size_t CMsgGCToClientCurrencyPricePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientCurrencyPricePoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 price_key = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.price_key_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._price_key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
  total_size += 1UL * this->_internal_currencies_size();
  for (const auto& msg : this->_impl_.currencies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientCurrencyPricePoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientCurrencyPricePoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientCurrencyPricePoints::GetClassData() const { return &_class_data_; }


void CMsgGCToClientCurrencyPricePoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientCurrencyPricePoints*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientCurrencyPricePoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientCurrencyPricePoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.price_key_.MergeFrom(from._impl_.price_key_);
  _this->_impl_.currencies_.MergeFrom(from._impl_.currencies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientCurrencyPricePoints::CopyFrom(const CMsgGCToClientCurrencyPricePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientCurrencyPricePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientCurrencyPricePoints::IsInitialized() const {
  return true;
}

void CMsgGCToClientCurrencyPricePoints::InternalSwap(CMsgGCToClientCurrencyPricePoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.price_key_.InternalSwap(&other->_impl_.price_key_);
  _impl_.currencies_.InternalSwap(&other->_impl_.currencies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientCurrencyPricePoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[117]);
}

// ===================================================================

class CMsgBannedWordList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBannedWordList>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBannedWordList::CMsgBannedWordList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBannedWordList)
}
CMsgBannedWordList::CMsgBannedWordList(const CMsgBannedWordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBannedWordList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.banned_words_){from._impl_.banned_words_}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgBannedWordList)
}

inline void CMsgBannedWordList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.banned_words_){arena}
    , decltype(_impl_.version_){0u}
  };
}

CMsgBannedWordList::~CMsgBannedWordList() {
  // @@protoc_insertion_point(destructor:CMsgBannedWordList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBannedWordList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.banned_words_.~RepeatedPtrField();
}

void CMsgBannedWordList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBannedWordList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBannedWordList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.banned_words_.Clear();
  _impl_.version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBannedWordList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string banned_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_banned_words();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgBannedWordList.banned_words");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBannedWordList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBannedWordList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated string banned_words = 2;
  for (int i = 0, n = this->_internal_banned_words_size(); i < n; i++) {
    const auto& s = this->_internal_banned_words(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBannedWordList.banned_words");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBannedWordList)
  return target;
}

size_t CMsgBannedWordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBannedWordList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string banned_words = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.banned_words_.size());
  for (int i = 0, n = _impl_.banned_words_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.banned_words_.Get(i));
  }

  // optional uint32 version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBannedWordList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBannedWordList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBannedWordList::GetClassData() const { return &_class_data_; }


void CMsgBannedWordList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBannedWordList*>(&to_msg);
  auto& from = static_cast<const CMsgBannedWordList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBannedWordList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.banned_words_.MergeFrom(from._impl_.banned_words_);
  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBannedWordList::CopyFrom(const CMsgBannedWordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBannedWordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBannedWordList::IsInitialized() const {
  return true;
}

void CMsgBannedWordList::InternalSwap(CMsgBannedWordList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.banned_words_.InternalSwap(&other->_impl_.banned_words_);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBannedWordList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[118]);
}

// ===================================================================

class CMsgGCToGCFlushSteamInventoryCache_Key::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCFlushSteamInventoryCache_Key>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCFlushSteamInventoryCache_Key::CMsgGCToGCFlushSteamInventoryCache_Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCFlushSteamInventoryCache.Key)
}
CMsgGCToGCFlushSteamInventoryCache_Key::CMsgGCToGCFlushSteamInventoryCache_Key(const CMsgGCToGCFlushSteamInventoryCache_Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCFlushSteamInventoryCache_Key* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.contextid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contextid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.contextid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCFlushSteamInventoryCache.Key)
}

inline void CMsgGCToGCFlushSteamInventoryCache_Key::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.contextid_){uint64_t{0u}}
  };
}

CMsgGCToGCFlushSteamInventoryCache_Key::~CMsgGCToGCFlushSteamInventoryCache_Key() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCFlushSteamInventoryCache.Key)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCFlushSteamInventoryCache_Key::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCFlushSteamInventoryCache_Key::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCFlushSteamInventoryCache_Key::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.contextid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.contextid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCFlushSteamInventoryCache_Key::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 contextid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_contextid(&has_bits);
          _impl_.contextid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCFlushSteamInventoryCache_Key::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint64 contextid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_contextid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCFlushSteamInventoryCache.Key)
  return target;
}

size_t CMsgGCToGCFlushSteamInventoryCache_Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint64 contextid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_contextid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCFlushSteamInventoryCache_Key::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCFlushSteamInventoryCache_Key::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCFlushSteamInventoryCache_Key::GetClassData() const { return &_class_data_; }


void CMsgGCToGCFlushSteamInventoryCache_Key::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCFlushSteamInventoryCache_Key*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCFlushSteamInventoryCache_Key&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.contextid_ = from._impl_.contextid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCFlushSteamInventoryCache_Key::CopyFrom(const CMsgGCToGCFlushSteamInventoryCache_Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFlushSteamInventoryCache_Key::IsInitialized() const {
  return true;
}

void CMsgGCToGCFlushSteamInventoryCache_Key::InternalSwap(CMsgGCToGCFlushSteamInventoryCache_Key* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCFlushSteamInventoryCache_Key, _impl_.contextid_)
      + sizeof(CMsgGCToGCFlushSteamInventoryCache_Key::_impl_.contextid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCFlushSteamInventoryCache_Key, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCFlushSteamInventoryCache_Key::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[119]);
}

// ===================================================================

class CMsgGCToGCFlushSteamInventoryCache::_Internal {
 public:
};

CMsgGCToGCFlushSteamInventoryCache::CMsgGCToGCFlushSteamInventoryCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCFlushSteamInventoryCache)
}
CMsgGCToGCFlushSteamInventoryCache::CMsgGCToGCFlushSteamInventoryCache(const CMsgGCToGCFlushSteamInventoryCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCFlushSteamInventoryCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCFlushSteamInventoryCache)
}

inline void CMsgGCToGCFlushSteamInventoryCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToGCFlushSteamInventoryCache::~CMsgGCToGCFlushSteamInventoryCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCFlushSteamInventoryCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCFlushSteamInventoryCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void CMsgGCToGCFlushSteamInventoryCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCFlushSteamInventoryCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCFlushSteamInventoryCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCFlushSteamInventoryCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCFlushSteamInventoryCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCFlushSteamInventoryCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCFlushSteamInventoryCache)
  return target;
}

size_t CMsgGCToGCFlushSteamInventoryCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCFlushSteamInventoryCache)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCFlushSteamInventoryCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCFlushSteamInventoryCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCFlushSteamInventoryCache::GetClassData() const { return &_class_data_; }


void CMsgGCToGCFlushSteamInventoryCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCFlushSteamInventoryCache*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCFlushSteamInventoryCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCFlushSteamInventoryCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCFlushSteamInventoryCache::CopyFrom(const CMsgGCToGCFlushSteamInventoryCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCFlushSteamInventoryCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFlushSteamInventoryCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCFlushSteamInventoryCache::InternalSwap(CMsgGCToGCFlushSteamInventoryCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCFlushSteamInventoryCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[120]);
}

// ===================================================================

class CMsgGCToGCUpdateSubscriptionItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateSubscriptionItems>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_always_notify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCUpdateSubscriptionItems::CMsgGCToGCUpdateSubscriptionItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateSubscriptionItems)
}
CMsgGCToGCUpdateSubscriptionItems::CMsgGCToGCUpdateSubscriptionItems(const CMsgGCToGCUpdateSubscriptionItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCUpdateSubscriptionItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.always_notify_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.always_notify_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.always_notify_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateSubscriptionItems)
}

inline void CMsgGCToGCUpdateSubscriptionItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.always_notify_){false}
  };
}

CMsgGCToGCUpdateSubscriptionItems::~CMsgGCToGCUpdateSubscriptionItems() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateSubscriptionItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCUpdateSubscriptionItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCUpdateSubscriptionItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCUpdateSubscriptionItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateSubscriptionItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.always_notify_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.always_notify_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateSubscriptionItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool always_notify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_always_notify(&has_bits);
          _impl_.always_notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCUpdateSubscriptionItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateSubscriptionItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool always_notify = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_always_notify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateSubscriptionItems)
  return target;
}

size_t CMsgGCToGCUpdateSubscriptionItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateSubscriptionItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool always_notify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCUpdateSubscriptionItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCUpdateSubscriptionItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCUpdateSubscriptionItems::GetClassData() const { return &_class_data_; }


void CMsgGCToGCUpdateSubscriptionItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCUpdateSubscriptionItems*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCUpdateSubscriptionItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateSubscriptionItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.always_notify_ = from._impl_.always_notify_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCUpdateSubscriptionItems::CopyFrom(const CMsgGCToGCUpdateSubscriptionItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateSubscriptionItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSubscriptionItems::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSubscriptionItems::InternalSwap(CMsgGCToGCUpdateSubscriptionItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateSubscriptionItems, _impl_.always_notify_)
      + sizeof(CMsgGCToGCUpdateSubscriptionItems::_impl_.always_notify_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateSubscriptionItems, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateSubscriptionItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[121]);
}

// ===================================================================

class CMsgGCToGCSelfPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCSelfPing>()._impl_._has_bits_);
  static void set_has_sample_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCSelfPing::CMsgGCToGCSelfPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCSelfPing)
}
CMsgGCToGCSelfPing::CMsgGCToGCSelfPing(const CMsgGCToGCSelfPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCSelfPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sample_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sample_id_ = from._impl_.sample_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSelfPing)
}

inline void CMsgGCToGCSelfPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sample_id_){0u}
  };
}

CMsgGCToGCSelfPing::~CMsgGCToGCSelfPing() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSelfPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCSelfPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCSelfPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCSelfPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSelfPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sample_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCSelfPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sample_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sample_id(&has_bits);
          _impl_.sample_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCSelfPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSelfPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sample_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSelfPing)
  return target;
}

size_t CMsgGCToGCSelfPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSelfPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sample_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCSelfPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCSelfPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCSelfPing::GetClassData() const { return &_class_data_; }


void CMsgGCToGCSelfPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCSelfPing*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCSelfPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSelfPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sample_id()) {
    _this->_internal_set_sample_id(from._internal_sample_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCSelfPing::CopyFrom(const CMsgGCToGCSelfPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSelfPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSelfPing::IsInitialized() const {
  return true;
}

void CMsgGCToGCSelfPing::InternalSwap(CMsgGCToGCSelfPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.sample_id_, other->_impl_.sample_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCSelfPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[122]);
}

// ===================================================================

class CMsgGCToGCGetInfuxIntervalStats::_Internal {
 public:
};

CMsgGCToGCGetInfuxIntervalStats::CMsgGCToGCGetInfuxIntervalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetInfuxIntervalStats)
}
CMsgGCToGCGetInfuxIntervalStats::CMsgGCToGCGetInfuxIntervalStats(const CMsgGCToGCGetInfuxIntervalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToGCGetInfuxIntervalStats* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetInfuxIntervalStats)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGetInfuxIntervalStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGetInfuxIntervalStats::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetInfuxIntervalStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[123]);
}

// ===================================================================

class CMsgGCToGCGetInfuxIntervalStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetInfuxIntervalStatsResponse>()._impl_._has_bits_);
  static void set_has_sample_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCGetInfuxIntervalStatsResponse::CMsgGCToGCGetInfuxIntervalStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetInfuxIntervalStatsResponse)
}
CMsgGCToGCGetInfuxIntervalStatsResponse::CMsgGCToGCGetInfuxIntervalStatsResponse(const CMsgGCToGCGetInfuxIntervalStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCGetInfuxIntervalStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_ids_){from._impl_.stat_ids_}
    , decltype(_impl_.stat_total_){from._impl_.stat_total_}
    , /*decltype(_impl_._stat_total_cached_byte_size_)*/{0}
    , decltype(_impl_.stat_samples_){from._impl_.stat_samples_}
    , /*decltype(_impl_._stat_samples_cached_byte_size_)*/{0}
    , decltype(_impl_.stat_max_){from._impl_.stat_max_}
    , /*decltype(_impl_._stat_max_cached_byte_size_)*/{0}
    , decltype(_impl_.sample_duration_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sample_duration_ms_ = from._impl_.sample_duration_ms_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetInfuxIntervalStatsResponse)
}

inline void CMsgGCToGCGetInfuxIntervalStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_ids_){arena}
    , decltype(_impl_.stat_total_){arena}
    , /*decltype(_impl_._stat_total_cached_byte_size_)*/{0}
    , decltype(_impl_.stat_samples_){arena}
    , /*decltype(_impl_._stat_samples_cached_byte_size_)*/{0}
    , decltype(_impl_.stat_max_){arena}
    , /*decltype(_impl_._stat_max_cached_byte_size_)*/{0}
    , decltype(_impl_.sample_duration_ms_){0u}
  };
}

CMsgGCToGCGetInfuxIntervalStatsResponse::~CMsgGCToGCGetInfuxIntervalStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetInfuxIntervalStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCGetInfuxIntervalStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_ids_.~RepeatedField();
  _impl_.stat_total_.~RepeatedField();
  _impl_.stat_samples_.~RepeatedField();
  _impl_.stat_max_.~RepeatedField();
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_ids_.Clear();
  _impl_.stat_total_.Clear();
  _impl_.stat_samples_.Clear();
  _impl_.stat_max_.Clear();
  _impl_.sample_duration_ms_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetInfuxIntervalStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 stat_ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_stat_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_stat_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 stat_total = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_stat_total(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_stat_total(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 stat_samples = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stat_samples(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_stat_samples(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 stat_max = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stat_max(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_stat_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sample_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sample_duration_ms(&has_bits);
          _impl_.sample_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCGetInfuxIntervalStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 stat_ids = 1 [packed = true];
  if (this->_internal_stat_ids_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_stat_ids(), target);
  }

  // repeated uint64 stat_total = 2 [packed = true];
  {
    int byte_size = _impl_._stat_total_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_stat_total(), byte_size, target);
    }
  }

  // repeated uint32 stat_samples = 3 [packed = true];
  {
    int byte_size = _impl_._stat_samples_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_stat_samples(), byte_size, target);
    }
  }

  // repeated uint32 stat_max = 4 [packed = true];
  {
    int byte_size = _impl_._stat_max_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_stat_max(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sample_duration_ms = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sample_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetInfuxIntervalStatsResponse)
  return target;
}

size_t CMsgGCToGCGetInfuxIntervalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 stat_ids = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_stat_ids_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint64 stat_total = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.stat_total_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stat_total_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 stat_samples = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.stat_samples_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stat_samples_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 stat_max = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.stat_max_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stat_max_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 sample_duration_ms = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_duration_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCGetInfuxIntervalStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCGetInfuxIntervalStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCGetInfuxIntervalStatsResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToGCGetInfuxIntervalStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCGetInfuxIntervalStatsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCGetInfuxIntervalStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_ids_.MergeFrom(from._impl_.stat_ids_);
  _this->_impl_.stat_total_.MergeFrom(from._impl_.stat_total_);
  _this->_impl_.stat_samples_.MergeFrom(from._impl_.stat_samples_);
  _this->_impl_.stat_max_.MergeFrom(from._impl_.stat_max_);
  if (from._internal_has_sample_duration_ms()) {
    _this->_internal_set_sample_duration_ms(from._internal_sample_duration_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::CopyFrom(const CMsgGCToGCGetInfuxIntervalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetInfuxIntervalStatsResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::InternalSwap(CMsgGCToGCGetInfuxIntervalStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stat_ids_.InternalSwap(&other->_impl_.stat_ids_);
  _impl_.stat_total_.InternalSwap(&other->_impl_.stat_total_);
  _impl_.stat_samples_.InternalSwap(&other->_impl_.stat_samples_);
  _impl_.stat_max_.InternalSwap(&other->_impl_.stat_max_);
  swap(_impl_.sample_duration_ms_, other->_impl_.sample_duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetInfuxIntervalStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[124]);
}

// ===================================================================

class CMsgGCToGCPurchaseSucceeded::_Internal {
 public:
};

CMsgGCToGCPurchaseSucceeded::CMsgGCToGCPurchaseSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPurchaseSucceeded)
}
CMsgGCToGCPurchaseSucceeded::CMsgGCToGCPurchaseSucceeded(const CMsgGCToGCPurchaseSucceeded& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToGCPurchaseSucceeded* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPurchaseSucceeded)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCPurchaseSucceeded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCPurchaseSucceeded::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPurchaseSucceeded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[125]);
}

// ===================================================================

class CMsgClientToGCGetLimitedItemPurchaseQuantity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetLimitedItemPurchaseQuantity>()._impl_._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCGetLimitedItemPurchaseQuantity::CMsgClientToGCGetLimitedItemPurchaseQuantity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantity)
}
CMsgClientToGCGetLimitedItemPurchaseQuantity::CMsgClientToGCGetLimitedItemPurchaseQuantity(const CMsgClientToGCGetLimitedItemPurchaseQuantity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetLimitedItemPurchaseQuantity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_def_ = from._impl_.item_def_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantity)
}

inline void CMsgClientToGCGetLimitedItemPurchaseQuantity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_){0u}
  };
}

CMsgClientToGCGetLimitedItemPurchaseQuantity::~CMsgClientToGCGetLimitedItemPurchaseQuantity() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetLimitedItemPurchaseQuantity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_def_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetLimitedItemPurchaseQuantity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetLimitedItemPurchaseQuantity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  return target;
}

size_t CMsgClientToGCGetLimitedItemPurchaseQuantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 item_def = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetLimitedItemPurchaseQuantity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetLimitedItemPurchaseQuantity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetLimitedItemPurchaseQuantity::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetLimitedItemPurchaseQuantity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetLimitedItemPurchaseQuantity*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetLimitedItemPurchaseQuantity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_def()) {
    _this->_internal_set_item_def(from._internal_item_def());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::CopyFrom(const CMsgClientToGCGetLimitedItemPurchaseQuantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetLimitedItemPurchaseQuantity::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::InternalSwap(CMsgClientToGCGetLimitedItemPurchaseQuantity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_def_, other->_impl_.item_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetLimitedItemPurchaseQuantity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[126]);
}

// ===================================================================

class CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
}
CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse(const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetLimitedItemPurchaseQuantityResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}
    , decltype(_impl_.quantity_purchased_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_purchased_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.quantity_purchased_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
}

inline void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.quantity_purchased_){0u}
  };
}

CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::~CMsgClientToGCGetLimitedItemPurchaseQuantityResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quantity_purchased_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.quantity_purchased_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity_purchased = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quantity_purchased(&has_bits);
          _impl_.quantity_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 quantity_purchased = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity_purchased(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  return target;
}

size_t CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 quantity_purchased = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity_purchased());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.quantity_purchased_ = from._impl_.quantity_purchased_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CopyFrom(const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::InternalSwap(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _impl_.quantity_purchased_)
      + sizeof(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_impl_.quantity_purchased_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[127]);
}

// ===================================================================

class CMsgGCToGCUpdateWelcomeMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateWelcomeMsg>()._impl_._has_bits_);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CExtraMsgBlock& new_msg(const CMsgGCToGCUpdateWelcomeMsg* msg);
  static void set_has_new_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CExtraMsgBlock&
CMsgGCToGCUpdateWelcomeMsg::_Internal::new_msg(const CMsgGCToGCUpdateWelcomeMsg* msg) {
  return *msg->_impl_.new_msg_;
}
void CMsgGCToGCUpdateWelcomeMsg::clear_new_msg() {
  if (_impl_.new_msg_ != nullptr) _impl_.new_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgGCToGCUpdateWelcomeMsg::CMsgGCToGCUpdateWelcomeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateWelcomeMsg)
}
CMsgGCToGCUpdateWelcomeMsg::CMsgGCToGCUpdateWelcomeMsg(const CMsgGCToGCUpdateWelcomeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCUpdateWelcomeMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_msg_){nullptr}
    , decltype(_impl_.server_){}
    , decltype(_impl_.broadcast_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_new_msg()) {
    _this->_impl_.new_msg_ = new ::CExtraMsgBlock(*from._impl_.new_msg_);
  }
  ::memcpy(&_impl_.server_, &from._impl_.server_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.broadcast_) -
    reinterpret_cast<char*>(&_impl_.server_)) + sizeof(_impl_.broadcast_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateWelcomeMsg)
}

inline void CMsgGCToGCUpdateWelcomeMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_msg_){nullptr}
    , decltype(_impl_.server_){false}
    , decltype(_impl_.broadcast_){false}
  };
}

CMsgGCToGCUpdateWelcomeMsg::~CMsgGCToGCUpdateWelcomeMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateWelcomeMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCUpdateWelcomeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.new_msg_;
}

void CMsgGCToGCUpdateWelcomeMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCUpdateWelcomeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateWelcomeMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.new_msg_ != nullptr);
    _impl_.new_msg_->Clear();
  }
  ::memset(&_impl_.server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.broadcast_) -
      reinterpret_cast<char*>(&_impl_.server_)) + sizeof(_impl_.broadcast_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateWelcomeMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server(&has_bits);
          _impl_.server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CExtraMsgBlock new_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_broadcast(&has_bits);
          _impl_.broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCUpdateWelcomeMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateWelcomeMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool server = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_server(), target);
  }

  // optional .CExtraMsgBlock new_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_msg(this),
        _Internal::new_msg(this).GetCachedSize(), target, stream);
  }

  // optional bool broadcast = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateWelcomeMsg)
  return target;
}

size_t CMsgGCToGCUpdateWelcomeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateWelcomeMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CExtraMsgBlock new_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_msg_);
    }

    // optional bool server = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool broadcast = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCUpdateWelcomeMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCUpdateWelcomeMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCUpdateWelcomeMsg::GetClassData() const { return &_class_data_; }


void CMsgGCToGCUpdateWelcomeMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCUpdateWelcomeMsg*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCUpdateWelcomeMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateWelcomeMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_new_msg()->::CExtraMsgBlock::MergeFrom(
          from._internal_new_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_ = from._impl_.server_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.broadcast_ = from._impl_.broadcast_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCUpdateWelcomeMsg::CopyFrom(const CMsgGCToGCUpdateWelcomeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateWelcomeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateWelcomeMsg::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateWelcomeMsg::InternalSwap(CMsgGCToGCUpdateWelcomeMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateWelcomeMsg, _impl_.broadcast_)
      + sizeof(CMsgGCToGCUpdateWelcomeMsg::_impl_.broadcast_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateWelcomeMsg, _impl_.new_msg_)>(
          reinterpret_cast<char*>(&_impl_.new_msg_),
          reinterpret_cast<char*>(&other->_impl_.new_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateWelcomeMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_econ_5fgcmessages_2eproto_getter, &descriptor_table_econ_5fgcmessages_2eproto_once,
      file_level_metadata_econ_5fgcmessages_2eproto[128]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgApplyAutograph*
Arena::CreateMaybeMessage< ::CMsgApplyAutograph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyAutograph >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAdjustItemEquippedState*
Arena::CreateMaybeMessage< ::CMsgAdjustItemEquippedState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAdjustItemEquippedState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment*
Arena::CreateMaybeMessage< ::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgEconPlayerStrangeCountAdjustment*
Arena::CreateMaybeMessage< ::CMsgEconPlayerStrangeCountAdjustment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgEconPlayerStrangeCountAdjustment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCraftingResponse*
Arena::CreateMaybeMessage< ::CMsgCraftingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCraftingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesData*
Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesDataResponse_Price*
Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesDataResponse_Price >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesDataResponse_Price >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesDataResponse*
Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesDataUpToDateResponse*
Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesDataUpToDateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesDataUpToDateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPingRequest*
Arena::CreateMaybeMessage< ::CMsgGCToGCPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPingResponse*
Arena::CreateMaybeMessage< ::CMsgGCToGCPingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserSessionServer*
Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserSessionServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserSessionServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserSessionServerResponse*
Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserSessionServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserSessionServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserServerMembers*
Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserServerMembers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserServerMembers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserServerMembersResponse*
Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserServerMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserServerMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLookupMultipleAccountNames*
Arena::CreateMaybeMessage< ::CMsgLookupMultipleAccountNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLookupMultipleAccountNames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLookupMultipleAccountNamesResponse_Account*
Arena::CreateMaybeMessage< ::CMsgLookupMultipleAccountNamesResponse_Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLookupMultipleAccountNamesResponse_Account >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLookupMultipleAccountNamesResponse*
Arena::CreateMaybeMessage< ::CMsgLookupMultipleAccountNamesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLookupMultipleAccountNamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateItems*
Arena::CreateMaybeMessage< ::CMsgRequestCrateItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateItemsResponse*
Arena::CreateMaybeMessage< ::CMsgRequestCrateItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateEscalationLevel*
Arena::CreateMaybeMessage< ::CMsgRequestCrateEscalationLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateEscalationLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateEscalationLevelResponse*
Arena::CreateMaybeMessage< ::CMsgRequestCrateEscalationLevelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateEscalationLevelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCCanUseDropRateBonus*
Arena::CreateMaybeMessage< ::CMsgGCToGCCanUseDropRateBonus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCCanUseDropRateBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSQLAddDropRateBonus*
Arena::CreateMaybeMessage< ::CMsgSQLAddDropRateBonus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSQLAddDropRateBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSQLUpgradeBattleBooster*
Arena::CreateMaybeMessage< ::CMsgSQLUpgradeBattleBooster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSQLUpgradeBattleBooster >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCRefreshSOCache*
Arena::CreateMaybeMessage< ::CMsgGCToGCRefreshSOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCRefreshSOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCAddSubscriptionTime*
Arena::CreateMaybeMessage< ::CMsgGCToGCAddSubscriptionTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCAddSubscriptionTime >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute*
Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry*
Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems_Item*
Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems*
Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBetaDeleteItems*
Arena::CreateMaybeMessage< ::CMsgGCToGCBetaDeleteItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBetaDeleteItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantSelfMadeItemToAccount*
Arena::CreateMaybeMessage< ::CMsgGCToGCGrantSelfMadeItemToAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantSelfMadeItemToAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUseItem*
Arena::CreateMaybeMessage< ::CMsgUseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerUseItem*
Arena::CreateMaybeMessage< ::CMsgServerUseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUseMultipleItems*
Arena::CreateMaybeMessage< ::CMsgUseMultipleItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUseMultipleItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCStoreRechargeRedirect_LineItem*
Arena::CreateMaybeMessage< ::CGCStoreRechargeRedirect_LineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCStoreRechargeRedirect_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCEconSQLWorkItemEmbeddedRollbackData*
Arena::CreateMaybeMessage< ::CMsgGCEconSQLWorkItemEmbeddedRollbackData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCEconSQLWorkItemEmbeddedRollbackData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCraftStatue*
Arena::CreateMaybeMessage< ::CMsgCraftStatue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCraftStatue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRedeemCode*
Arena::CreateMaybeMessage< ::CMsgRedeemCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRedeemCode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRedeemCodeResponse*
Arena::CreateMaybeMessage< ::CMsgRedeemCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRedeemCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevNewItemRequest*
Arena::CreateMaybeMessage< ::CMsgDevNewItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevNewItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevNewItemRequestResponse*
Arena::CreateMaybeMessage< ::CMsgDevNewItemRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevNewItemRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevUnlockAllItemStyles*
Arena::CreateMaybeMessage< ::CMsgDevUnlockAllItemStyles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevUnlockAllItemStyles >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevUnlockAllItemStylesResponse*
Arena::CreateMaybeMessage< ::CMsgDevUnlockAllItemStylesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevUnlockAllItemStylesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetAccountSubscriptionItem*
Arena::CreateMaybeMessage< ::CMsgGCGetAccountSubscriptionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetAccountSubscriptionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetAccountSubscriptionItemResponse*
Arena::CreateMaybeMessage< ::CMsgGCGetAccountSubscriptionItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetAccountSubscriptionItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCAddGiftItem*
Arena::CreateMaybeMessage< ::CMsgGCAddGiftItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCAddGiftItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCWrapAndDeliverGift*
Arena::CreateMaybeMessage< ::CMsgClientToGCWrapAndDeliverGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCWrapAndDeliverGift >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCWrapAndDeliverGiftResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCWrapAndDeliverGiftResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCWrapAndDeliverGiftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnwrapGift*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnwrapGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnwrapGift >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetGiftPermissions*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetGiftPermissions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetGiftPermissions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetGiftPermissionsResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetGiftPermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetGiftPermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnpackBundle*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnpackBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnpackBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnpackBundleResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnpackBundleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnpackBundleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPackBundle*
Arena::CreateMaybeMessage< ::CMsgClientToGCPackBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPackBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPackBundleResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCPackBundleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPackBundleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientStoreTransactionCompleted*
Arena::CreateMaybeMessage< ::CMsgGCToClientStoreTransactionCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientStoreTransactionCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCEquipItems*
Arena::CreateMaybeMessage< ::CMsgClientToGCEquipItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCEquipItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCEquipItemsResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCEquipItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCEquipItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetItemStyle*
Arena::CreateMaybeMessage< ::CMsgClientToGCSetItemStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetItemStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetItemStyleResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCSetItemStyleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetItemStyleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockItemStyle*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockItemStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockItemStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockItemStyleResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockItemStyleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockItemStyleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetItemInventoryCategory*
Arena::CreateMaybeMessage< ::CMsgClientToGCSetItemInventoryCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetItemInventoryCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockCrate*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockCrate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockCrate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockCrateResponse_Item*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockCrateResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockCrateResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockCrateResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockCrateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockCrateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRemoveItemAttribute*
Arena::CreateMaybeMessage< ::CMsgClientToGCRemoveItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRemoveItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRemoveItemAttributeResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCRemoveItemAttributeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRemoveItemAttributeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCNameItem*
Arena::CreateMaybeMessage< ::CMsgClientToGCNameItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCNameItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCNameItemResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCNameItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCNameItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCSetItemPosition*
Arena::CreateMaybeMessage< ::CMsgGCSetItemPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCSetItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_ItemDynamicRecipeComponent*
Arena::CreateMaybeMessage< ::CAttribute_ItemDynamicRecipeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_ItemDynamicRecipeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket*
Arena::CreateMaybeMessage< ::CProtoItemSocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Empty*
Arena::CreateMaybeMessage< ::CProtoItemSocket_Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Effect*
Arena::CreateMaybeMessage< ::CProtoItemSocket_Effect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Effect >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Color*
Arena::CreateMaybeMessage< ::CProtoItemSocket_Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Color >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Strange*
Arena::CreateMaybeMessage< ::CProtoItemSocket_Strange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Strange >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY*
Arena::CreateMaybeMessage< ::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Spectator*
Arena::CreateMaybeMessage< ::CProtoItemSocket_Spectator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Spectator >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_AssetModifier*
Arena::CreateMaybeMessage< ::CProtoItemSocket_AssetModifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_AssetModifier >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY*
Arena::CreateMaybeMessage< ::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Autograph*
Arena::CreateMaybeMessage< ::CProtoItemSocket_Autograph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Autograph >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_StaticVisuals*
Arena::CreateMaybeMessage< ::CProtoItemSocket_StaticVisuals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_StaticVisuals >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_String*
Arena::CreateMaybeMessage< ::CAttribute_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_String >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetItemDailyRevenue_Request*
Arena::CreateMaybeMessage< ::CWorkshop_GetItemDailyRevenue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetItemDailyRevenue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue*
Arena::CreateMaybeMessage< ::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetItemDailyRevenue_Response*
Arena::CreateMaybeMessage< ::CWorkshop_GetItemDailyRevenue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetItemDailyRevenue_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetPackageDailyRevenue_Request*
Arena::CreateMaybeMessage< ::CWorkshop_GetPackageDailyRevenue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetPackageDailyRevenue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue*
Arena::CreateMaybeMessage< ::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetPackageDailyRevenue_Response*
Arena::CreateMaybeMessage< ::CWorkshop_GetPackageDailyRevenue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetPackageDailyRevenue_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSQLGCToGCGrantBackpackSlots*
Arena::CreateMaybeMessage< ::CMsgSQLGCToGCGrantBackpackSlots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSQLGCToGCGrantBackpackSlots >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCLookupAccountName*
Arena::CreateMaybeMessage< ::CMsgClientToGCLookupAccountName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCLookupAccountName >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCLookupAccountNameResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCLookupAccountNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCLookupAccountNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipe_Item*
Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipe_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipe_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipe*
Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse_OutputItem*
Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse_OutputItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse_OutputItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse_InputError*
Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse_InputError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse_InputError >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput*
Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProcessTransactionOrder_Item*
Arena::CreateMaybeMessage< ::CMsgProcessTransactionOrder_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProcessTransactionOrder_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProcessTransactionOrder*
Arena::CreateMaybeMessage< ::CMsgProcessTransactionOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProcessTransactionOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessCDKeyTransaction*
Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessCDKeyTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessCDKeyTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessCDKeyTransactionResponse*
Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessCDKeyTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessCDKeyTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessSettlement*
Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessSettlement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessSettlement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessSettlementResponse*
Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessSettlementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessSettlementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBroadcastConsoleCommand*
Arena::CreateMaybeMessage< ::CMsgGCToGCBroadcastConsoleCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBroadcastConsoleCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCConsoleOutput_OutputLine*
Arena::CreateMaybeMessage< ::CMsgGCToGCConsoleOutput_OutputLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCConsoleOutput_OutputLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCConsoleOutput*
Arena::CreateMaybeMessage< ::CMsgGCToGCConsoleOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCConsoleOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAges_MaxItemIDTimestamp*
Arena::CreateMaybeMessage< ::CMsgItemAges_MaxItemIDTimestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAges_MaxItemIDTimestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAges*
Arena::CreateMaybeMessage< ::CMsgItemAges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAges >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCInternalTestMsg*
Arena::CreateMaybeMessage< ::CMsgGCToGCInternalTestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCInternalTestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCClientServerVersionsUpdated*
Arena::CreateMaybeMessage< ::CMsgGCToGCClientServerVersionsUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCClientServerVersionsUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBroadcastMessageFromSub*
Arena::CreateMaybeMessage< ::CMsgGCToGCBroadcastMessageFromSub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBroadcastMessageFromSub >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientCurrencyPricePoints_Currency*
Arena::CreateMaybeMessage< ::CMsgGCToClientCurrencyPricePoints_Currency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientCurrencyPricePoints_Currency >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientCurrencyPricePoints*
Arena::CreateMaybeMessage< ::CMsgGCToClientCurrencyPricePoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientCurrencyPricePoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBannedWordList*
Arena::CreateMaybeMessage< ::CMsgBannedWordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBannedWordList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCFlushSteamInventoryCache_Key*
Arena::CreateMaybeMessage< ::CMsgGCToGCFlushSteamInventoryCache_Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCFlushSteamInventoryCache_Key >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCFlushSteamInventoryCache*
Arena::CreateMaybeMessage< ::CMsgGCToGCFlushSteamInventoryCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCFlushSteamInventoryCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateSubscriptionItems*
Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateSubscriptionItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateSubscriptionItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCSelfPing*
Arena::CreateMaybeMessage< ::CMsgGCToGCSelfPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCSelfPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetInfuxIntervalStats*
Arena::CreateMaybeMessage< ::CMsgGCToGCGetInfuxIntervalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetInfuxIntervalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetInfuxIntervalStatsResponse*
Arena::CreateMaybeMessage< ::CMsgGCToGCGetInfuxIntervalStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetInfuxIntervalStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPurchaseSucceeded*
Arena::CreateMaybeMessage< ::CMsgGCToGCPurchaseSucceeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPurchaseSucceeded >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetLimitedItemPurchaseQuantity*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetLimitedItemPurchaseQuantity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetLimitedItemPurchaseQuantity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateWelcomeMsg*
Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateWelcomeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateWelcomeMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
