// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_guild_events.proto

#include "dota_gcmessages_client_guild_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgGuildContract::CMsgGuildContract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contract_id_)*/uint64_t{0u}
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u
  , /*decltype(_impl_.challenge_timestamp_)*/0u
  , /*decltype(_impl_.assigned_account_id_)*/0u
  , /*decltype(_impl_.contract_flags_)*/0u} {}
struct CMsgGuildContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGuildContractDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGuildContractDefaultTypeInternal() {}
  union {
    CMsgGuildContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGuildContractDefaultTypeInternal _CMsgGuildContract_default_instance_;
PROTOBUF_CONSTEXPR CMsgGuildContractSlot::CMsgGuildContractSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contract_)*/nullptr} {}
struct CMsgGuildContractSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGuildContractSlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGuildContractSlotDefaultTypeInternal() {}
  union {
    CMsgGuildContractSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGuildContractSlotDefaultTypeInternal _CMsgGuildContractSlot_default_instance_;
PROTOBUF_CONSTEXPR CMsgAccountGuildEventData::CMsgAccountGuildEventData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contract_slots_)*/{}
  , /*decltype(_impl_.guild_points_)*/0u
  , /*decltype(_impl_.contracts_refreshed_timestamp_)*/0u
  , /*decltype(_impl_.completed_challenge_count_)*/0u
  , /*decltype(_impl_.challenges_refresh_timestamp_)*/0u
  , /*decltype(_impl_.guild_weekly_percentile_)*/0u
  , /*decltype(_impl_.guild_weekly_last_timestamp_)*/0u
  , /*decltype(_impl_.last_weekly_claim_time_)*/0u
  , /*decltype(_impl_.guild_current_percentile_)*/0u} {}
struct CMsgAccountGuildEventDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAccountGuildEventDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAccountGuildEventDataDefaultTypeInternal() {}
  union {
    CMsgAccountGuildEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAccountGuildEventDataDefaultTypeInternal _CMsgAccountGuildEventData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGuildActiveContracts::CMsgGuildActiveContracts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contracts_)*/{}
  , /*decltype(_impl_.contracts_refreshed_timestamp_)*/0u} {}
struct CMsgGuildActiveContractsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGuildActiveContractsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGuildActiveContractsDefaultTypeInternal() {}
  union {
    CMsgGuildActiveContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGuildActiveContractsDefaultTypeInternal _CMsgGuildActiveContracts_default_instance_;
PROTOBUF_CONSTEXPR CMsgGuildChallenge::CMsgGuildChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u
  , /*decltype(_impl_.challenge_timestamp_)*/0u
  , /*decltype(_impl_.challenge_progress_)*/0u
  , /*decltype(_impl_.challenge_flags_)*/0u} {}
struct CMsgGuildChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGuildChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGuildChallengeDefaultTypeInternal() {}
  union {
    CMsgGuildChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGuildChallengeDefaultTypeInternal _CMsgGuildChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgGuildEventMember::CMsgGuildEventMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.guild_points_earned_)*/0u} {}
struct CMsgGuildEventMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGuildEventMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGuildEventMemberDefaultTypeInternal() {}
  union {
    CMsgGuildEventMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGuildEventMemberDefaultTypeInternal _CMsgGuildEventMember_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestAccountGuildEventData::CMsgClientToGCRequestAccountGuildEventData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestAccountGuildEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestAccountGuildEventDataDefaultTypeInternal _CMsgClientToGCRequestAccountGuildEventData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestAccountGuildEventDataResponse::CMsgClientToGCRequestAccountGuildEventDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_data_)*/nullptr
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestAccountGuildEventDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestAccountGuildEventDataResponseDefaultTypeInternal _CMsgClientToGCRequestAccountGuildEventDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientAccountGuildEventDataUpdated::CMsgGCToClientAccountGuildEventDataUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_event_data_)*/nullptr
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.update_flags_)*/0u
  , /*decltype(_impl_.contracts_updated_)*/false} {}
struct CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientAccountGuildEventDataUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientAccountGuildEventDataUpdatedDefaultTypeInternal _CMsgGCToClientAccountGuildEventDataUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildContracts::CMsgClientToGCRequestActiveGuildContracts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestActiveGuildContractsDefaultTypeInternal _CMsgClientToGCRequestActiveGuildContracts_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildContractsResponse::CMsgClientToGCRequestActiveGuildContractsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_contracts_)*/nullptr
  , /*decltype(_impl_.active_challenges_)*/nullptr
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildContractsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestActiveGuildContractsResponseDefaultTypeInternal _CMsgClientToGCRequestActiveGuildContractsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientActiveGuildContractsUpdated::CMsgGCToClientActiveGuildContractsUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientActiveGuildContractsUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientActiveGuildContractsUpdatedDefaultTypeInternal _CMsgGCToClientActiveGuildContractsUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCSelectGuildContract::CMsgClientToGCSelectGuildContract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.contract_id_)*/uint64_t{0u}
  , /*decltype(_impl_.contract_slot_)*/0u} {}
struct CMsgClientToGCSelectGuildContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCSelectGuildContractDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCSelectGuildContractDefaultTypeInternal() {}
  union {
    CMsgClientToGCSelectGuildContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCSelectGuildContractDefaultTypeInternal _CMsgClientToGCSelectGuildContract_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCSelectGuildContractResponse::CMsgClientToGCSelectGuildContractResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCSelectGuildContractResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCSelectGuildContractResponseDefaultTypeInternal _CMsgClientToGCSelectGuildContractResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildChallenge::CMsgClientToGCRequestActiveGuildChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestActiveGuildChallengeDefaultTypeInternal _CMsgClientToGCRequestActiveGuildChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildChallengeResponse::CMsgClientToGCRequestActiveGuildChallengeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_challenge_)*/nullptr
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestActiveGuildChallengeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestActiveGuildChallengeResponseDefaultTypeInternal _CMsgClientToGCRequestActiveGuildChallengeResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientActiveGuildChallengeUpdated::CMsgGCToClientActiveGuildChallengeUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_challenge_)*/nullptr
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientActiveGuildChallengeUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientActiveGuildChallengeUpdatedDefaultTypeInternal _CMsgGCToClientActiveGuildChallengeUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestGuildEventMembers::CMsgClientToGCRequestGuildEventMembers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestGuildEventMembers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestGuildEventMembersDefaultTypeInternal _CMsgClientToGCRequestGuildEventMembers_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestGuildEventMembersResponse::CMsgClientToGCRequestGuildEventMembersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestGuildEventMembersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestGuildEventMembersResponseDefaultTypeInternal _CMsgClientToGCRequestGuildEventMembersResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGuildLeaderboardCombinedResponse::CMsgGuildLeaderboardCombinedResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/{}
  , /*decltype(_impl_._guild_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rank_)*/{}
  , /*decltype(_impl_._rank_cached_byte_size_)*/{0}
  , /*decltype(_impl_.current_percentile_)*/{}
  , /*decltype(_impl_._current_percentile_cached_byte_size_)*/{0}
  , /*decltype(_impl_.weekly_percentile_)*/{}
  , /*decltype(_impl_._weekly_percentile_cached_byte_size_)*/{0}
  , /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._points_cached_byte_size_)*/{0}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.region_)*/0u
  , /*decltype(_impl_.last_updated_)*/0u} {}
struct CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal() {}
  union {
    CMsgGuildLeaderboardCombinedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGuildLeaderboardCombinedResponseDefaultTypeInternal _CMsgGuildLeaderboardCombinedResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCClaimLeaderboardRewards::CMsgClientToGCClaimLeaderboardRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal() {}
  union {
    CMsgClientToGCClaimLeaderboardRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCClaimLeaderboardRewardsDefaultTypeInternal _CMsgClientToGCClaimLeaderboardRewards_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCClaimLeaderboardRewardsResponse::CMsgClientToGCClaimLeaderboardRewardsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.event_points_)*/0u} {}
struct CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCClaimLeaderboardRewardsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCClaimLeaderboardRewardsResponseDefaultTypeInternal _CMsgClientToGCClaimLeaderboardRewardsResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _impl_.contract_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _impl_.challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _impl_.challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _impl_.assigned_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContract, _impl_.contract_flags_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContractSlot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContractSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildContractSlot, _impl_.contract_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.guild_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.contracts_refreshed_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.contract_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.completed_challenge_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.challenges_refresh_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.guild_weekly_percentile_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.guild_weekly_last_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.last_weekly_claim_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgAccountGuildEventData, _impl_.guild_current_percentile_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, _impl_.contracts_refreshed_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildActiveContracts, _impl_.contracts_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _impl_.challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _impl_.challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _impl_.challenge_progress_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildChallenge, _impl_.challenge_flags_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildEventMember, _impl_.guild_points_earned_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventData, _impl_.event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestAccountGuildEventDataResponse, _impl_.event_data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _impl_.update_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _impl_.guild_event_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAccountGuildEventDataUpdated, _impl_.contracts_updated_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContracts, _impl_.event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, _impl_.active_contracts_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildContractsResponse, _impl_.active_challenges_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildContractsUpdated, _impl_.event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _impl_.contract_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContract, _impl_.contract_slot_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContractResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContractResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSelectGuildContractResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallenge, _impl_.event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestActiveGuildChallengeResponse, _impl_.active_challenge_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientActiveGuildChallengeUpdated, _impl_.active_challenge_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembers, _impl_.event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestGuildEventMembersResponse, _impl_.members_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.last_updated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.current_percentile_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.weekly_percentile_),
  PROTOBUF_FIELD_OFFSET(::CMsgGuildLeaderboardCombinedResponse, _impl_.points_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewards, _impl_.event_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCClaimLeaderboardRewardsResponse, _impl_.event_points_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::CMsgGuildContract)},
  { 18, 25, -1, sizeof(::CMsgGuildContractSlot)},
  { 26, 41, -1, sizeof(::CMsgAccountGuildEventData)},
  { 50, 58, -1, sizeof(::CMsgGuildActiveContracts)},
  { 60, 71, -1, sizeof(::CMsgGuildChallenge)},
  { 76, 84, -1, sizeof(::CMsgGuildEventMember)},
  { 86, 94, -1, sizeof(::CMsgClientToGCRequestAccountGuildEventData)},
  { 96, 105, -1, sizeof(::CMsgClientToGCRequestAccountGuildEventDataResponse)},
  { 108, 119, -1, sizeof(::CMsgGCToClientAccountGuildEventDataUpdated)},
  { 124, 132, -1, sizeof(::CMsgClientToGCRequestActiveGuildContracts)},
  { 134, 143, -1, sizeof(::CMsgClientToGCRequestActiveGuildContractsResponse)},
  { 146, 154, -1, sizeof(::CMsgGCToClientActiveGuildContractsUpdated)},
  { 156, 166, -1, sizeof(::CMsgClientToGCSelectGuildContract)},
  { 170, 177, -1, sizeof(::CMsgClientToGCSelectGuildContractResponse)},
  { 178, 186, -1, sizeof(::CMsgClientToGCRequestActiveGuildChallenge)},
  { 188, 196, -1, sizeof(::CMsgClientToGCRequestActiveGuildChallengeResponse)},
  { 198, 207, -1, sizeof(::CMsgGCToClientActiveGuildChallengeUpdated)},
  { 210, 218, -1, sizeof(::CMsgClientToGCRequestGuildEventMembers)},
  { 220, 228, -1, sizeof(::CMsgClientToGCRequestGuildEventMembersResponse)},
  { 230, 244, -1, sizeof(::CMsgGuildLeaderboardCombinedResponse)},
  { 252, 260, -1, sizeof(::CMsgClientToGCClaimLeaderboardRewards)},
  { 262, 270, -1, sizeof(::CMsgClientToGCClaimLeaderboardRewardsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgGuildContract_default_instance_._instance,
  &::_CMsgGuildContractSlot_default_instance_._instance,
  &::_CMsgAccountGuildEventData_default_instance_._instance,
  &::_CMsgGuildActiveContracts_default_instance_._instance,
  &::_CMsgGuildChallenge_default_instance_._instance,
  &::_CMsgGuildEventMember_default_instance_._instance,
  &::_CMsgClientToGCRequestAccountGuildEventData_default_instance_._instance,
  &::_CMsgClientToGCRequestAccountGuildEventDataResponse_default_instance_._instance,
  &::_CMsgGCToClientAccountGuildEventDataUpdated_default_instance_._instance,
  &::_CMsgClientToGCRequestActiveGuildContracts_default_instance_._instance,
  &::_CMsgClientToGCRequestActiveGuildContractsResponse_default_instance_._instance,
  &::_CMsgGCToClientActiveGuildContractsUpdated_default_instance_._instance,
  &::_CMsgClientToGCSelectGuildContract_default_instance_._instance,
  &::_CMsgClientToGCSelectGuildContractResponse_default_instance_._instance,
  &::_CMsgClientToGCRequestActiveGuildChallenge_default_instance_._instance,
  &::_CMsgClientToGCRequestActiveGuildChallengeResponse_default_instance_._instance,
  &::_CMsgGCToClientActiveGuildChallengeUpdated_default_instance_._instance,
  &::_CMsgClientToGCRequestGuildEventMembers_default_instance_._instance,
  &::_CMsgClientToGCRequestGuildEventMembersResponse_default_instance_._instance,
  &::_CMsgGuildLeaderboardCombinedResponse_default_instance_._instance,
  &::_CMsgClientToGCClaimLeaderboardRewards_default_instance_._instance,
  &::_CMsgClientToGCClaimLeaderboardRewardsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)dota_gcmessages_client_guild_events.pr"
  "oto\032\027dota_shared_enums.proto\"\266\001\n\021CMsgGui"
  "ldContract\022\023\n\013contract_id\030\001 \001(\004\022\035\n\025chall"
  "enge_instance_id\030\002 \001(\r\022\033\n\023challenge_para"
  "meter\030\003 \001(\r\022\033\n\023challenge_timestamp\030\004 \001(\r"
  "\022\033\n\023assigned_account_id\030\005 \001(\r\022\026\n\016contrac"
  "t_flags\030\006 \001(\r\"=\n\025CMsgGuildContractSlot\022$"
  "\n\010contract\030\001 \001(\0132\022.CMsgGuildContract\"\331\002\n"
  "\031CMsgAccountGuildEventData\022\024\n\014guild_poin"
  "ts\030\001 \001(\r\022%\n\035contracts_refreshed_timestam"
  "p\030\002 \001(\r\022.\n\016contract_slots\030\003 \003(\0132\026.CMsgGu"
  "ildContractSlot\022!\n\031completed_challenge_c"
  "ount\030\004 \001(\r\022$\n\034challenges_refresh_timesta"
  "mp\030\005 \001(\r\022\037\n\027guild_weekly_percentile\030\006 \001("
  "\r\022#\n\033guild_weekly_last_timestamp\030\007 \001(\r\022\036"
  "\n\026last_weekly_claim_time\030\010 \001(\r\022 \n\030guild_"
  "current_percentile\030\t \001(\r\"h\n\030CMsgGuildAct"
  "iveContracts\022%\n\035contracts_refreshed_time"
  "stamp\030\001 \001(\r\022%\n\tcontracts\030\002 \003(\0132\022.CMsgGui"
  "ldContract\"\242\001\n\022CMsgGuildChallenge\022\035\n\025cha"
  "llenge_instance_id\030\001 \001(\r\022\033\n\023challenge_pa"
  "rameter\030\002 \001(\r\022\033\n\023challenge_timestamp\030\003 \001"
  "(\r\022\032\n\022challenge_progress\030\004 \001(\r\022\027\n\017challe"
  "nge_flags\030\005 \001(\r\"G\n\024CMsgGuildEventMember\022"
  "\022\n\naccount_id\030\001 \001(\r\022\033\n\023guild_points_earn"
  "ed\030\002 \001(\r\"h\n*CMsgClientToGCRequestAccount"
  "GuildEventData\022\020\n\010guild_id\030\001 \001(\r\022(\n\010even"
  "t_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"\252\003\n2C"
  "MsgClientToGCRequestAccountGuildEventDat"
  "aResponse\022_\n\006result\030\001 \001(\0162=.CMsgClientTo"
  "GCRequestAccountGuildEventDataResponse.E"
  "Response:\020k_eInternalError\022(\n\010event_id\030\002"
  " \001(\0162\007.EEvent:\rEVENT_ID_NONE\022.\n\nevent_da"
  "ta\030\003 \001(\0132\032.CMsgAccountGuildEventData\"\270\001\n"
  "\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eS"
  "uccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020"
  "\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023"
  "\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n"
  "\024k_eInvalidGuildEvent\020\010\"\317\001\n*CMsgGCToClie"
  "ntAccountGuildEventDataUpdated\022\020\n\010guild_"
  "id\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVE"
  "NT_ID_NONE\022\024\n\014update_flags\030\003 \001(\r\0224\n\020guil"
  "d_event_data\030\004 \001(\0132\032.CMsgAccountGuildEve"
  "ntData\022\031\n\021contracts_updated\030\005 \001(\010\"g\n)CMs"
  "gClientToGCRequestActiveGuildContracts\022\020"
  "\n\010guild_id\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEv"
  "ent:\rEVENT_ID_NONE\"\263\003\n1CMsgClientToGCReq"
  "uestActiveGuildContractsResponse\022^\n\006resu"
  "lt\030\001 \001(\0162<.CMsgClientToGCRequestActiveGu"
  "ildContractsResponse.EResponse:\020k_eInter"
  "nalError\0223\n\020active_contracts\030\002 \001(\0132\031.CMs"
  "gGuildActiveContracts\022.\n\021active_challeng"
  "es\030\003 \001(\0132\023.CMsgGuildChallenge\"\270\001\n\tERespo"
  "nse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess\020"
  "\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_"
  "eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023\n\017k_eIn"
  "validGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n\024k_eInv"
  "alidGuildEvent\020\010\"g\n)CMsgGCToClientActive"
  "GuildContractsUpdated\022\020\n\010guild_id\030\001 \001(\r\022"
  "(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NON"
  "E\"\213\001\n!CMsgClientToGCSelectGuildContract\022"
  "\020\n\010guild_id\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EE"
  "vent:\rEVENT_ID_NONE\022\023\n\013contract_id\030\003 \001(\004"
  "\022\025\n\rcontract_slot\030\004 \001(\r\"\244\004\n)CMsgClientTo"
  "GCSelectGuildContractResponse\022V\n\006result\030"
  "\001 \001(\01624.CMsgClientToGCSelectGuildContrac"
  "tResponse.EResponse:\020k_eInternalError\"\236\003"
  "\n\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_e"
  "Success\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled"
  "\020\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022"
  "\023\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030"
  "\n\024k_eInvalidGuildEvent\020\010\022\030\n\024k_eInvalidCo"
  "ntractID\020\t\022\026\n\022k_eAlreadyAssigned\020\n\022\032\n\026k_"
  "eInvalidContractSlot\020\013\022\036\n\032k_eContractSlo"
  "tLockedGuild\020\014\022\033\n\027k_eContractSlotCooldow"
  "n\020\r\022\030\n\024k_eContractDuplicate\020\016\022\034\n\030k_eCont"
  "ractSlotTimeError\020\017\022!\n\035k_eContractSlotLo"
  "ckedDotaPlus\020\020\"g\n)CMsgClientToGCRequestA"
  "ctiveGuildChallenge\022\020\n\010guild_id\030\001 \001(\r\022(\n"
  "\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\""
  "\375\002\n1CMsgClientToGCRequestActiveGuildChal"
  "lengeResponse\022^\n\006result\030\001 \001(\0162<.CMsgClie"
  "ntToGCRequestActiveGuildChallengeRespons"
  "e.EResponse:\020k_eInternalError\022-\n\020active_"
  "challenge\030\002 \001(\0132\023.CMsgGuildChallenge\"\270\001\n"
  "\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eS"
  "uccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020"
  "\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023"
  "\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n"
  "\024k_eInvalidGuildEvent\020\010\"\226\001\n)CMsgGCToClie"
  "ntActiveGuildChallengeUpdated\022\020\n\010guild_i"
  "d\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVEN"
  "T_ID_NONE\022-\n\020active_challenge\030\003 \001(\0132\023.CM"
  "sgGuildChallenge\"d\n&CMsgClientToGCReques"
  "tGuildEventMembers\022\020\n\010guild_id\030\001 \001(\r\022(\n\010"
  "event_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"\360"
  "\002\n.CMsgClientToGCRequestGuildEventMember"
  "sResponse\022[\n\006result\030\001 \001(\01629.CMsgClientTo"
  "GCRequestGuildEventMembersResponse.EResp"
  "onse:\020k_eInternalError\022&\n\007members\030\002 \003(\0132"
  "\025.CMsgGuildEventMember\"\270\001\n\tEResponse\022\024\n\020"
  "k_eInternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_"
  "eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeou"
  "t\020\004\022\023\n\017k_eInvalidEvent\020\005\022\023\n\017k_eInvalidGu"
  "ild\020\006\022\020\n\014k_eNotMember\020\007\022\030\n\024k_eInvalidGui"
  "ldEvent\020\010\"\361\001\n$CMsgGuildLeaderboardCombin"
  "edResponse\022(\n\010event_id\030\001 \001(\0162\007.EEvent:\rE"
  "VENT_ID_NONE\022\016\n\006region\030\002 \001(\r\022\024\n\014last_upd"
  "ated\030\003 \001(\r\022\024\n\010guild_id\030\004 \003(\rB\002\020\001\022\020\n\004rank"
  "\030\005 \003(\rB\002\020\001\022\036\n\022current_percentile\030\006 \003(\rB\002"
  "\020\001\022\035\n\021weekly_percentile\030\007 \003(\rB\002\020\001\022\022\n\006poi"
  "nts\030\010 \003(\rB\002\020\001\"c\n%CMsgClientToGCClaimLead"
  "erboardRewards\022\020\n\010guild_id\030\001 \001(\r\022(\n\010even"
  "t_id\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"\212\003\n-C"
  "MsgClientToGCClaimLeaderboardRewardsResp"
  "onse\022Z\n\006result\030\001 \001(\01628.CMsgClientToGCCla"
  "imLeaderboardRewardsResponse.EResponse:\020"
  "k_eInternalError\022\024\n\014event_points\030\002 \001(\r\"\346"
  "\001\n\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_"
  "eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisable"
  "d\020\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eInvalidEvent\020\005"
  "\022\023\n\017k_eInvalidGuild\020\006\022\020\n\014k_eNotMember\020\007\022"
  "\030\n\024k_eInvalidGuildEvent\020\010\022\025\n\021k_eDoesNotQ"
  "ualify\020\t\022\025\n\021k_eAlreadyClaimed\020\n*\263\003\n\026EGui"
  "ldEventAuditAction\022$\n k_EGuildEventAudit"
  "Action_Invalid\020\000\022%\n!k_EGuildEventAuditAc"
  "tion_DevGrant\020\001\022-\n)k_EGuildEventAuditAct"
  "ion_CompleteContract\020\002\022.\n*k_EGuildEventA"
  "uditAction_CompleteChallenge\020\003\0221\n-k_EGui"
  "ldEventAuditAction_CompleteMatch_Winner\020"
  "\004\022.\n*k_EGuildEventAuditAction_ChallengeP"
  "rogress\020\005\0220\n,k_EGuildEventAuditAction_Co"
  "mpleteMatch_Loser\020\006\022.\n*k_EGuildEventAudi"
  "tAction_WeeklyLeaderboard\020\007\022(\n$k_EGuildE"
  "ventAuditAction_ManualGrant\020\010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto = {
    false, false, 5389, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto,
    "dota_gcmessages_client_guild_events.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_deps, 1, 22,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[0];
}
bool CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInternalError;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eSuccess;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eDisabled;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eTimeout;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eNotMember;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse CMsgClientToGCRequestAccountGuildEventDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestAccountGuildEventDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestActiveGuildContractsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[1];
}
bool CMsgClientToGCRequestActiveGuildContractsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInternalError;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eSuccess;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eDisabled;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eTimeout;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eNotMember;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestActiveGuildContractsResponse_EResponse CMsgClientToGCRequestActiveGuildContractsResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestActiveGuildContractsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSelectGuildContractResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[2];
}
bool CMsgClientToGCSelectGuildContractResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInternalError;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eSuccess;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eTooBusy;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eDisabled;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eTimeout;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidEvent;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidGuild;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eNotMember;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidContractID;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eAlreadyAssigned;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eInvalidContractSlot;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractSlotLockedGuild;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractSlotCooldown;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractDuplicate;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractSlotTimeError;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::k_eContractSlotLockedDotaPlus;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::EResponse_MIN;
constexpr CMsgClientToGCSelectGuildContractResponse_EResponse CMsgClientToGCSelectGuildContractResponse::EResponse_MAX;
constexpr int CMsgClientToGCSelectGuildContractResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[3];
}
bool CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInternalError;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eSuccess;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eDisabled;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eTimeout;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eNotMember;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse CMsgClientToGCRequestActiveGuildChallengeResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestActiveGuildChallengeResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRequestGuildEventMembersResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[4];
}
bool CMsgClientToGCRequestGuildEventMembersResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInternalError;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eSuccess;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eTooBusy;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eDisabled;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eTimeout;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInvalidEvent;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInvalidGuild;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eNotMember;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::EResponse_MIN;
constexpr CMsgClientToGCRequestGuildEventMembersResponse_EResponse CMsgClientToGCRequestGuildEventMembersResponse::EResponse_MAX;
constexpr int CMsgClientToGCRequestGuildEventMembersResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[5];
}
bool CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInternalError;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eSuccess;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eTooBusy;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eDisabled;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eTimeout;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInvalidEvent;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInvalidGuild;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eNotMember;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eInvalidGuildEvent;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eDoesNotQualify;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::k_eAlreadyClaimed;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::EResponse_MIN;
constexpr CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse CMsgClientToGCClaimLeaderboardRewardsResponse::EResponse_MAX;
constexpr int CMsgClientToGCClaimLeaderboardRewardsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGuildEventAuditAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[6];
}
bool EGuildEventAuditAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgGuildContract::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildContract>()._impl_._has_bits_);
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assigned_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contract_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGuildContract::CMsgGuildContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildContract)
}
CMsgGuildContract::CMsgGuildContract(const CMsgGuildContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGuildContract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_id_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_parameter_){}
    , decltype(_impl_.challenge_timestamp_){}
    , decltype(_impl_.assigned_account_id_){}
    , decltype(_impl_.contract_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.contract_id_, &from._impl_.contract_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contract_flags_) -
    reinterpret_cast<char*>(&_impl_.contract_id_)) + sizeof(_impl_.contract_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildContract)
}

inline void CMsgGuildContract::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_id_){uint64_t{0u}}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
    , decltype(_impl_.challenge_timestamp_){0u}
    , decltype(_impl_.assigned_account_id_){0u}
    , decltype(_impl_.contract_flags_){0u}
  };
}

CMsgGuildContract::~CMsgGuildContract() {
  // @@protoc_insertion_point(destructor:CMsgGuildContract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGuildContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGuildContract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGuildContract::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.contract_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.contract_flags_) -
        reinterpret_cast<char*>(&_impl_.contract_id_)) + sizeof(_impl_.contract_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildContract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_contract_id(&has_bits);
          _impl_.contract_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          _impl_.challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assigned_account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_assigned_account_id(&has_bits);
          _impl_.assigned_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contract_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contract_flags(&has_bits);
          _impl_.contract_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGuildContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 contract_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_contract_id(), target);
  }

  // optional uint32 challenge_instance_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 assigned_account_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assigned_account_id(), target);
  }

  // optional uint32 contract_flags = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_contract_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildContract)
  return target;
}

size_t CMsgGuildContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 contract_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_contract_id());
    }

    // optional uint32 challenge_instance_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_timestamp());
    }

    // optional uint32 assigned_account_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assigned_account_id());
    }

    // optional uint32 contract_flags = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contract_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGuildContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGuildContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGuildContract::GetClassData() const { return &_class_data_; }


void CMsgGuildContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGuildContract*>(&to_msg);
  auto& from = static_cast<const CMsgGuildContract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildContract)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.contract_id_ = from._impl_.contract_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_timestamp_ = from._impl_.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.assigned_account_id_ = from._impl_.assigned_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.contract_flags_ = from._impl_.contract_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGuildContract::CopyFrom(const CMsgGuildContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildContract::IsInitialized() const {
  return true;
}

void CMsgGuildContract::InternalSwap(CMsgGuildContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildContract, _impl_.contract_flags_)
      + sizeof(CMsgGuildContract::_impl_.contract_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildContract, _impl_.contract_id_)>(
          reinterpret_cast<char*>(&_impl_.contract_id_),
          reinterpret_cast<char*>(&other->_impl_.contract_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildContract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[0]);
}

// ===================================================================

class CMsgGuildContractSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildContractSlot>()._impl_._has_bits_);
  static const ::CMsgGuildContract& contract(const CMsgGuildContractSlot* msg);
  static void set_has_contract(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGuildContract&
CMsgGuildContractSlot::_Internal::contract(const CMsgGuildContractSlot* msg) {
  return *msg->_impl_.contract_;
}
CMsgGuildContractSlot::CMsgGuildContractSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildContractSlot)
}
CMsgGuildContractSlot::CMsgGuildContractSlot(const CMsgGuildContractSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGuildContractSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contract()) {
    _this->_impl_.contract_ = new ::CMsgGuildContract(*from._impl_.contract_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGuildContractSlot)
}

inline void CMsgGuildContractSlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_){nullptr}
  };
}

CMsgGuildContractSlot::~CMsgGuildContractSlot() {
  // @@protoc_insertion_point(destructor:CMsgGuildContractSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGuildContractSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.contract_;
}

void CMsgGuildContractSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGuildContractSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildContractSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.contract_ != nullptr);
    _impl_.contract_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildContractSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGuildContract contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGuildContractSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildContractSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGuildContract contract = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::contract(this),
        _Internal::contract(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildContractSlot)
  return target;
}

size_t CMsgGuildContractSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildContractSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGuildContract contract = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contract_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGuildContractSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGuildContractSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGuildContractSlot::GetClassData() const { return &_class_data_; }


void CMsgGuildContractSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGuildContractSlot*>(&to_msg);
  auto& from = static_cast<const CMsgGuildContractSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildContractSlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contract()) {
    _this->_internal_mutable_contract()->::CMsgGuildContract::MergeFrom(
        from._internal_contract());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGuildContractSlot::CopyFrom(const CMsgGuildContractSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildContractSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildContractSlot::IsInitialized() const {
  return true;
}

void CMsgGuildContractSlot::InternalSwap(CMsgGuildContractSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.contract_, other->_impl_.contract_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildContractSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[1]);
}

// ===================================================================

class CMsgAccountGuildEventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAccountGuildEventData>()._impl_._has_bits_);
  static void set_has_guild_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contracts_refreshed_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_completed_challenge_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenges_refresh_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guild_weekly_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guild_weekly_last_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_weekly_claim_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_guild_current_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgAccountGuildEventData::CMsgAccountGuildEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAccountGuildEventData)
}
CMsgAccountGuildEventData::CMsgAccountGuildEventData(const CMsgAccountGuildEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAccountGuildEventData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_slots_){from._impl_.contract_slots_}
    , decltype(_impl_.guild_points_){}
    , decltype(_impl_.contracts_refreshed_timestamp_){}
    , decltype(_impl_.completed_challenge_count_){}
    , decltype(_impl_.challenges_refresh_timestamp_){}
    , decltype(_impl_.guild_weekly_percentile_){}
    , decltype(_impl_.guild_weekly_last_timestamp_){}
    , decltype(_impl_.last_weekly_claim_time_){}
    , decltype(_impl_.guild_current_percentile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_points_, &from._impl_.guild_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guild_current_percentile_) -
    reinterpret_cast<char*>(&_impl_.guild_points_)) + sizeof(_impl_.guild_current_percentile_));
  // @@protoc_insertion_point(copy_constructor:CMsgAccountGuildEventData)
}

inline void CMsgAccountGuildEventData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_slots_){arena}
    , decltype(_impl_.guild_points_){0u}
    , decltype(_impl_.contracts_refreshed_timestamp_){0u}
    , decltype(_impl_.completed_challenge_count_){0u}
    , decltype(_impl_.challenges_refresh_timestamp_){0u}
    , decltype(_impl_.guild_weekly_percentile_){0u}
    , decltype(_impl_.guild_weekly_last_timestamp_){0u}
    , decltype(_impl_.last_weekly_claim_time_){0u}
    , decltype(_impl_.guild_current_percentile_){0u}
  };
}

CMsgAccountGuildEventData::~CMsgAccountGuildEventData() {
  // @@protoc_insertion_point(destructor:CMsgAccountGuildEventData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAccountGuildEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contract_slots_.~RepeatedPtrField();
}

void CMsgAccountGuildEventData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAccountGuildEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAccountGuildEventData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contract_slots_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.guild_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.guild_current_percentile_) -
        reinterpret_cast<char*>(&_impl_.guild_points_)) + sizeof(_impl_.guild_current_percentile_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAccountGuildEventData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_points(&has_bits);
          _impl_.guild_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contracts_refreshed_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_contracts_refreshed_timestamp(&has_bits);
          _impl_.contracts_refreshed_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGuildContractSlot contract_slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 completed_challenge_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_completed_challenge_count(&has_bits);
          _impl_.completed_challenge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenges_refresh_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenges_refresh_timestamp(&has_bits);
          _impl_.challenges_refresh_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_percentile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_guild_weekly_percentile(&has_bits);
          _impl_.guild_weekly_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_last_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_guild_weekly_last_timestamp(&has_bits);
          _impl_.guild_weekly_last_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_weekly_claim_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_last_weekly_claim_time(&has_bits);
          _impl_.last_weekly_claim_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_current_percentile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_guild_current_percentile(&has_bits);
          _impl_.guild_current_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAccountGuildEventData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAccountGuildEventData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_points(), target);
  }

  // optional uint32 contracts_refreshed_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_contracts_refreshed_timestamp(), target);
  }

  // repeated .CMsgGuildContractSlot contract_slots = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contract_slots_size()); i < n; i++) {
    const auto& repfield = this->_internal_contract_slots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 completed_challenge_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_completed_challenge_count(), target);
  }

  // optional uint32 challenges_refresh_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenges_refresh_timestamp(), target);
  }

  // optional uint32 guild_weekly_percentile = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_guild_weekly_percentile(), target);
  }

  // optional uint32 guild_weekly_last_timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_guild_weekly_last_timestamp(), target);
  }

  // optional uint32 last_weekly_claim_time = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_weekly_claim_time(), target);
  }

  // optional uint32 guild_current_percentile = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_guild_current_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAccountGuildEventData)
  return target;
}

size_t CMsgAccountGuildEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAccountGuildEventData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGuildContractSlot contract_slots = 3;
  total_size += 1UL * this->_internal_contract_slots_size();
  for (const auto& msg : this->_impl_.contract_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 guild_points = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_points());
    }

    // optional uint32 contracts_refreshed_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contracts_refreshed_timestamp());
    }

    // optional uint32 completed_challenge_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_completed_challenge_count());
    }

    // optional uint32 challenges_refresh_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenges_refresh_timestamp());
    }

    // optional uint32 guild_weekly_percentile = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_weekly_percentile());
    }

    // optional uint32 guild_weekly_last_timestamp = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_weekly_last_timestamp());
    }

    // optional uint32 last_weekly_claim_time = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_weekly_claim_time());
    }

    // optional uint32 guild_current_percentile = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_current_percentile());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAccountGuildEventData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAccountGuildEventData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAccountGuildEventData::GetClassData() const { return &_class_data_; }


void CMsgAccountGuildEventData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAccountGuildEventData*>(&to_msg);
  auto& from = static_cast<const CMsgAccountGuildEventData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAccountGuildEventData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contract_slots_.MergeFrom(from._impl_.contract_slots_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_points_ = from._impl_.guild_points_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.contracts_refreshed_timestamp_ = from._impl_.contracts_refreshed_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.completed_challenge_count_ = from._impl_.completed_challenge_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenges_refresh_timestamp_ = from._impl_.challenges_refresh_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.guild_weekly_percentile_ = from._impl_.guild_weekly_percentile_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.guild_weekly_last_timestamp_ = from._impl_.guild_weekly_last_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.last_weekly_claim_time_ = from._impl_.last_weekly_claim_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.guild_current_percentile_ = from._impl_.guild_current_percentile_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAccountGuildEventData::CopyFrom(const CMsgAccountGuildEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAccountGuildEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAccountGuildEventData::IsInitialized() const {
  return true;
}

void CMsgAccountGuildEventData::InternalSwap(CMsgAccountGuildEventData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contract_slots_.InternalSwap(&other->_impl_.contract_slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAccountGuildEventData, _impl_.guild_current_percentile_)
      + sizeof(CMsgAccountGuildEventData::_impl_.guild_current_percentile_)
      - PROTOBUF_FIELD_OFFSET(CMsgAccountGuildEventData, _impl_.guild_points_)>(
          reinterpret_cast<char*>(&_impl_.guild_points_),
          reinterpret_cast<char*>(&other->_impl_.guild_points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAccountGuildEventData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[2]);
}

// ===================================================================

class CMsgGuildActiveContracts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildActiveContracts>()._impl_._has_bits_);
  static void set_has_contracts_refreshed_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGuildActiveContracts::CMsgGuildActiveContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildActiveContracts)
}
CMsgGuildActiveContracts::CMsgGuildActiveContracts(const CMsgGuildActiveContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGuildActiveContracts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contracts_){from._impl_.contracts_}
    , decltype(_impl_.contracts_refreshed_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.contracts_refreshed_timestamp_ = from._impl_.contracts_refreshed_timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgGuildActiveContracts)
}

inline void CMsgGuildActiveContracts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contracts_){arena}
    , decltype(_impl_.contracts_refreshed_timestamp_){0u}
  };
}

CMsgGuildActiveContracts::~CMsgGuildActiveContracts() {
  // @@protoc_insertion_point(destructor:CMsgGuildActiveContracts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGuildActiveContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contracts_.~RepeatedPtrField();
}

void CMsgGuildActiveContracts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGuildActiveContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildActiveContracts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contracts_.Clear();
  _impl_.contracts_refreshed_timestamp_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildActiveContracts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 contracts_refreshed_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_contracts_refreshed_timestamp(&has_bits);
          _impl_.contracts_refreshed_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGuildContract contracts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGuildActiveContracts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildActiveContracts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 contracts_refreshed_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_contracts_refreshed_timestamp(), target);
  }

  // repeated .CMsgGuildContract contracts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contracts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contracts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildActiveContracts)
  return target;
}

size_t CMsgGuildActiveContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildActiveContracts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGuildContract contracts = 2;
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->_impl_.contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 contracts_refreshed_timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contracts_refreshed_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGuildActiveContracts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGuildActiveContracts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGuildActiveContracts::GetClassData() const { return &_class_data_; }


void CMsgGuildActiveContracts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGuildActiveContracts*>(&to_msg);
  auto& from = static_cast<const CMsgGuildActiveContracts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildActiveContracts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contracts_.MergeFrom(from._impl_.contracts_);
  if (from._internal_has_contracts_refreshed_timestamp()) {
    _this->_internal_set_contracts_refreshed_timestamp(from._internal_contracts_refreshed_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGuildActiveContracts::CopyFrom(const CMsgGuildActiveContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildActiveContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildActiveContracts::IsInitialized() const {
  return true;
}

void CMsgGuildActiveContracts::InternalSwap(CMsgGuildActiveContracts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contracts_.InternalSwap(&other->_impl_.contracts_);
  swap(_impl_.contracts_refreshed_timestamp_, other->_impl_.contracts_refreshed_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildActiveContracts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[3]);
}

// ===================================================================

class CMsgGuildChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildChallenge>()._impl_._has_bits_);
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGuildChallenge::CMsgGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildChallenge)
}
CMsgGuildChallenge::CMsgGuildChallenge(const CMsgGuildChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGuildChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_parameter_){}
    , decltype(_impl_.challenge_timestamp_){}
    , decltype(_impl_.challenge_progress_){}
    , decltype(_impl_.challenge_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.challenge_instance_id_, &from._impl_.challenge_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.challenge_flags_) -
    reinterpret_cast<char*>(&_impl_.challenge_instance_id_)) + sizeof(_impl_.challenge_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildChallenge)
}

inline void CMsgGuildChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
    , decltype(_impl_.challenge_timestamp_){0u}
    , decltype(_impl_.challenge_progress_){0u}
    , decltype(_impl_.challenge_flags_){0u}
  };
}

CMsgGuildChallenge::~CMsgGuildChallenge() {
  // @@protoc_insertion_point(destructor:CMsgGuildChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGuildChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGuildChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGuildChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.challenge_instance_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.challenge_flags_) -
        reinterpret_cast<char*>(&_impl_.challenge_instance_id_)) + sizeof(_impl_.challenge_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 challenge_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          _impl_.challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_progress(&has_bits);
          _impl_.challenge_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_flags(&has_bits);
          _impl_.challenge_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGuildChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 challenge_instance_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 challenge_progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_progress(), target);
  }

  // optional uint32 challenge_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildChallenge)
  return target;
}

size_t CMsgGuildChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 challenge_instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_timestamp());
    }

    // optional uint32 challenge_progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_progress());
    }

    // optional uint32 challenge_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGuildChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGuildChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGuildChallenge::GetClassData() const { return &_class_data_; }


void CMsgGuildChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGuildChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgGuildChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_timestamp_ = from._impl_.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_progress_ = from._impl_.challenge_progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_flags_ = from._impl_.challenge_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGuildChallenge::CopyFrom(const CMsgGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildChallenge::IsInitialized() const {
  return true;
}

void CMsgGuildChallenge::InternalSwap(CMsgGuildChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildChallenge, _impl_.challenge_flags_)
      + sizeof(CMsgGuildChallenge::_impl_.challenge_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildChallenge, _impl_.challenge_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.challenge_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.challenge_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[4]);
}

// ===================================================================

class CMsgGuildEventMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildEventMember>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guild_points_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGuildEventMember::CMsgGuildEventMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildEventMember)
}
CMsgGuildEventMember::CMsgGuildEventMember(const CMsgGuildEventMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGuildEventMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.guild_points_earned_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guild_points_earned_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.guild_points_earned_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildEventMember)
}

inline void CMsgGuildEventMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.guild_points_earned_){0u}
  };
}

CMsgGuildEventMember::~CMsgGuildEventMember() {
  // @@protoc_insertion_point(destructor:CMsgGuildEventMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGuildEventMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGuildEventMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGuildEventMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildEventMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.guild_points_earned_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.guild_points_earned_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildEventMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_points_earned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guild_points_earned(&has_bits);
          _impl_.guild_points_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGuildEventMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildEventMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 guild_points_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_points_earned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildEventMember)
  return target;
}

size_t CMsgGuildEventMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildEventMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 guild_points_earned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_points_earned());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGuildEventMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGuildEventMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGuildEventMember::GetClassData() const { return &_class_data_; }


void CMsgGuildEventMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGuildEventMember*>(&to_msg);
  auto& from = static_cast<const CMsgGuildEventMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildEventMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guild_points_earned_ = from._impl_.guild_points_earned_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGuildEventMember::CopyFrom(const CMsgGuildEventMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildEventMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildEventMember::IsInitialized() const {
  return true;
}

void CMsgGuildEventMember::InternalSwap(CMsgGuildEventMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildEventMember, _impl_.guild_points_earned_)
      + sizeof(CMsgGuildEventMember::_impl_.guild_points_earned_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildEventMember, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildEventMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[5]);
}

// ===================================================================

class CMsgClientToGCRequestAccountGuildEventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestAccountGuildEventData>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestAccountGuildEventData::CMsgClientToGCRequestAccountGuildEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestAccountGuildEventData)
}
CMsgClientToGCRequestAccountGuildEventData::CMsgClientToGCRequestAccountGuildEventData(const CMsgClientToGCRequestAccountGuildEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestAccountGuildEventData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestAccountGuildEventData)
}

inline void CMsgClientToGCRequestAccountGuildEventData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgClientToGCRequestAccountGuildEventData::~CMsgClientToGCRequestAccountGuildEventData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestAccountGuildEventData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestAccountGuildEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRequestAccountGuildEventData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestAccountGuildEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestAccountGuildEventData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestAccountGuildEventData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestAccountGuildEventData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestAccountGuildEventData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestAccountGuildEventData)
  return target;
}

size_t CMsgClientToGCRequestAccountGuildEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestAccountGuildEventData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestAccountGuildEventData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestAccountGuildEventData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestAccountGuildEventData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestAccountGuildEventData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestAccountGuildEventData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestAccountGuildEventData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestAccountGuildEventData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestAccountGuildEventData::CopyFrom(const CMsgClientToGCRequestAccountGuildEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestAccountGuildEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestAccountGuildEventData::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestAccountGuildEventData::InternalSwap(CMsgClientToGCRequestAccountGuildEventData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventData, _impl_.event_id_)
      + sizeof(CMsgClientToGCRequestAccountGuildEventData::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventData, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestAccountGuildEventData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[6]);
}

// ===================================================================

class CMsgClientToGCRequestAccountGuildEventDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestAccountGuildEventDataResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgAccountGuildEventData& event_data(const CMsgClientToGCRequestAccountGuildEventDataResponse* msg);
  static void set_has_event_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgAccountGuildEventData&
CMsgClientToGCRequestAccountGuildEventDataResponse::_Internal::event_data(const CMsgClientToGCRequestAccountGuildEventDataResponse* msg) {
  return *msg->_impl_.event_data_;
}
CMsgClientToGCRequestAccountGuildEventDataResponse::CMsgClientToGCRequestAccountGuildEventDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestAccountGuildEventDataResponse)
}
CMsgClientToGCRequestAccountGuildEventDataResponse::CMsgClientToGCRequestAccountGuildEventDataResponse(const CMsgClientToGCRequestAccountGuildEventDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestAccountGuildEventDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_data_){nullptr}
    , decltype(_impl_.result_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event_data()) {
    _this->_impl_.event_data_ = new ::CMsgAccountGuildEventData(*from._impl_.event_data_);
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestAccountGuildEventDataResponse)
}

inline void CMsgClientToGCRequestAccountGuildEventDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_data_){nullptr}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgClientToGCRequestAccountGuildEventDataResponse::~CMsgClientToGCRequestAccountGuildEventDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestAccountGuildEventDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestAccountGuildEventDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.event_data_;
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_data_ != nullptr);
    _impl_.event_data_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestAccountGuildEventDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestAccountGuildEventDataResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestAccountGuildEventDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgAccountGuildEventData event_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestAccountGuildEventDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCRequestAccountGuildEventDataResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional .CMsgAccountGuildEventData event_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::event_data(this),
        _Internal::event_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestAccountGuildEventDataResponse)
  return target;
}

size_t CMsgClientToGCRequestAccountGuildEventDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgAccountGuildEventData event_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_data_);
    }

    // optional .CMsgClientToGCRequestAccountGuildEventDataResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestAccountGuildEventDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestAccountGuildEventDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestAccountGuildEventDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestAccountGuildEventDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestAccountGuildEventDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestAccountGuildEventDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_event_data()->::CMsgAccountGuildEventData::MergeFrom(
          from._internal_event_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::CopyFrom(const CMsgClientToGCRequestAccountGuildEventDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestAccountGuildEventDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestAccountGuildEventDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestAccountGuildEventDataResponse::InternalSwap(CMsgClientToGCRequestAccountGuildEventDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventDataResponse, _impl_.event_id_)
      + sizeof(CMsgClientToGCRequestAccountGuildEventDataResponse::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestAccountGuildEventDataResponse, _impl_.event_data_)>(
          reinterpret_cast<char*>(&_impl_.event_data_),
          reinterpret_cast<char*>(&other->_impl_.event_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestAccountGuildEventDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[7]);
}

// ===================================================================

class CMsgGCToClientAccountGuildEventDataUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientAccountGuildEventDataUpdated>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_update_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgAccountGuildEventData& guild_event_data(const CMsgGCToClientAccountGuildEventDataUpdated* msg);
  static void set_has_guild_event_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contracts_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgAccountGuildEventData&
CMsgGCToClientAccountGuildEventDataUpdated::_Internal::guild_event_data(const CMsgGCToClientAccountGuildEventDataUpdated* msg) {
  return *msg->_impl_.guild_event_data_;
}
CMsgGCToClientAccountGuildEventDataUpdated::CMsgGCToClientAccountGuildEventDataUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientAccountGuildEventDataUpdated)
}
CMsgGCToClientAccountGuildEventDataUpdated::CMsgGCToClientAccountGuildEventDataUpdated(const CMsgGCToClientAccountGuildEventDataUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientAccountGuildEventDataUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_event_data_){nullptr}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.update_flags_){}
    , decltype(_impl_.contracts_updated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guild_event_data()) {
    _this->_impl_.guild_event_data_ = new ::CMsgAccountGuildEventData(*from._impl_.guild_event_data_);
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contracts_updated_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.contracts_updated_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientAccountGuildEventDataUpdated)
}

inline void CMsgGCToClientAccountGuildEventDataUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_event_data_){nullptr}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.update_flags_){0u}
    , decltype(_impl_.contracts_updated_){false}
  };
}

CMsgGCToClientAccountGuildEventDataUpdated::~CMsgGCToClientAccountGuildEventDataUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientAccountGuildEventDataUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientAccountGuildEventDataUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.guild_event_data_;
}

void CMsgGCToClientAccountGuildEventDataUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientAccountGuildEventDataUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientAccountGuildEventDataUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.guild_event_data_ != nullptr);
    _impl_.guild_event_data_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.contracts_updated_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.contracts_updated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientAccountGuildEventDataUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 update_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_update_flags(&has_bits);
          _impl_.update_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgAccountGuildEventData guild_event_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_event_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contracts_updated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_contracts_updated(&has_bits);
          _impl_.contracts_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientAccountGuildEventDataUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientAccountGuildEventDataUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 update_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_update_flags(), target);
  }

  // optional .CMsgAccountGuildEventData guild_event_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::guild_event_data(this),
        _Internal::guild_event_data(this).GetCachedSize(), target, stream);
  }

  // optional bool contracts_updated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_contracts_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientAccountGuildEventDataUpdated)
  return target;
}

size_t CMsgGCToClientAccountGuildEventDataUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientAccountGuildEventDataUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgAccountGuildEventData guild_event_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.guild_event_data_);
    }

    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 update_flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_update_flags());
    }

    // optional bool contracts_updated = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientAccountGuildEventDataUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientAccountGuildEventDataUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientAccountGuildEventDataUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCToClientAccountGuildEventDataUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientAccountGuildEventDataUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientAccountGuildEventDataUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientAccountGuildEventDataUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_guild_event_data()->::CMsgAccountGuildEventData::MergeFrom(
          from._internal_guild_event_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.update_flags_ = from._impl_.update_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.contracts_updated_ = from._impl_.contracts_updated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientAccountGuildEventDataUpdated::CopyFrom(const CMsgGCToClientAccountGuildEventDataUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientAccountGuildEventDataUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientAccountGuildEventDataUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientAccountGuildEventDataUpdated::InternalSwap(CMsgGCToClientAccountGuildEventDataUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientAccountGuildEventDataUpdated, _impl_.contracts_updated_)
      + sizeof(CMsgGCToClientAccountGuildEventDataUpdated::_impl_.contracts_updated_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientAccountGuildEventDataUpdated, _impl_.guild_event_data_)>(
          reinterpret_cast<char*>(&_impl_.guild_event_data_),
          reinterpret_cast<char*>(&other->_impl_.guild_event_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientAccountGuildEventDataUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[8]);
}

// ===================================================================

class CMsgClientToGCRequestActiveGuildContracts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildContracts>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestActiveGuildContracts::CMsgClientToGCRequestActiveGuildContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildContracts)
}
CMsgClientToGCRequestActiveGuildContracts::CMsgClientToGCRequestActiveGuildContracts(const CMsgClientToGCRequestActiveGuildContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestActiveGuildContracts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildContracts)
}

inline void CMsgClientToGCRequestActiveGuildContracts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgClientToGCRequestActiveGuildContracts::~CMsgClientToGCRequestActiveGuildContracts() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildContracts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestActiveGuildContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRequestActiveGuildContracts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildContracts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildContracts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestActiveGuildContracts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildContracts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildContracts)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildContracts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestActiveGuildContracts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestActiveGuildContracts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestActiveGuildContracts::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestActiveGuildContracts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestActiveGuildContracts*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestActiveGuildContracts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildContracts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestActiveGuildContracts::CopyFrom(const CMsgClientToGCRequestActiveGuildContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildContracts::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildContracts::InternalSwap(CMsgClientToGCRequestActiveGuildContracts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContracts, _impl_.event_id_)
      + sizeof(CMsgClientToGCRequestActiveGuildContracts::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContracts, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildContracts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[9]);
}

// ===================================================================

class CMsgClientToGCRequestActiveGuildContractsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildContractsResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgGuildActiveContracts& active_contracts(const CMsgClientToGCRequestActiveGuildContractsResponse* msg);
  static void set_has_active_contracts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGuildChallenge& active_challenges(const CMsgClientToGCRequestActiveGuildContractsResponse* msg);
  static void set_has_active_challenges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgGuildActiveContracts&
CMsgClientToGCRequestActiveGuildContractsResponse::_Internal::active_contracts(const CMsgClientToGCRequestActiveGuildContractsResponse* msg) {
  return *msg->_impl_.active_contracts_;
}
const ::CMsgGuildChallenge&
CMsgClientToGCRequestActiveGuildContractsResponse::_Internal::active_challenges(const CMsgClientToGCRequestActiveGuildContractsResponse* msg) {
  return *msg->_impl_.active_challenges_;
}
CMsgClientToGCRequestActiveGuildContractsResponse::CMsgClientToGCRequestActiveGuildContractsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildContractsResponse)
}
CMsgClientToGCRequestActiveGuildContractsResponse::CMsgClientToGCRequestActiveGuildContractsResponse(const CMsgClientToGCRequestActiveGuildContractsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestActiveGuildContractsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_contracts_){nullptr}
    , decltype(_impl_.active_challenges_){nullptr}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_active_contracts()) {
    _this->_impl_.active_contracts_ = new ::CMsgGuildActiveContracts(*from._impl_.active_contracts_);
  }
  if (from._internal_has_active_challenges()) {
    _this->_impl_.active_challenges_ = new ::CMsgGuildChallenge(*from._impl_.active_challenges_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildContractsResponse)
}

inline void CMsgClientToGCRequestActiveGuildContractsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_contracts_){nullptr}
    , decltype(_impl_.active_challenges_){nullptr}
    , decltype(_impl_.result_){0}
  };
}

CMsgClientToGCRequestActiveGuildContractsResponse::~CMsgClientToGCRequestActiveGuildContractsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildContractsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestActiveGuildContractsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.active_contracts_;
  if (this != internal_default_instance()) delete _impl_.active_challenges_;
}

void CMsgClientToGCRequestActiveGuildContractsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildContractsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.active_contracts_ != nullptr);
      _impl_.active_contracts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.active_challenges_ != nullptr);
      _impl_.active_challenges_->Clear();
    }
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildContractsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestActiveGuildContractsResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestActiveGuildContractsResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestActiveGuildContractsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGuildActiveContracts active_contracts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_contracts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGuildChallenge active_challenges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_challenges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestActiveGuildContractsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCRequestActiveGuildContractsResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .CMsgGuildActiveContracts active_contracts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::active_contracts(this),
        _Internal::active_contracts(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgGuildChallenge active_challenges = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::active_challenges(this),
        _Internal::active_challenges(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildContractsResponse)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildContractsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgGuildActiveContracts active_contracts = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.active_contracts_);
    }

    // optional .CMsgGuildChallenge active_challenges = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.active_challenges_);
    }

    // optional .CMsgClientToGCRequestActiveGuildContractsResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestActiveGuildContractsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestActiveGuildContractsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestActiveGuildContractsResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestActiveGuildContractsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestActiveGuildContractsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestActiveGuildContractsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_active_contracts()->::CMsgGuildActiveContracts::MergeFrom(
          from._internal_active_contracts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_active_challenges()->::CMsgGuildChallenge::MergeFrom(
          from._internal_active_challenges());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestActiveGuildContractsResponse::CopyFrom(const CMsgClientToGCRequestActiveGuildContractsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildContractsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildContractsResponse::InternalSwap(CMsgClientToGCRequestActiveGuildContractsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContractsResponse, _impl_.result_)
      + sizeof(CMsgClientToGCRequestActiveGuildContractsResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildContractsResponse, _impl_.active_contracts_)>(
          reinterpret_cast<char*>(&_impl_.active_contracts_),
          reinterpret_cast<char*>(&other->_impl_.active_contracts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildContractsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[10]);
}

// ===================================================================

class CMsgGCToClientActiveGuildContractsUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientActiveGuildContractsUpdated>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientActiveGuildContractsUpdated::CMsgGCToClientActiveGuildContractsUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientActiveGuildContractsUpdated)
}
CMsgGCToClientActiveGuildContractsUpdated::CMsgGCToClientActiveGuildContractsUpdated(const CMsgGCToClientActiveGuildContractsUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientActiveGuildContractsUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientActiveGuildContractsUpdated)
}

inline void CMsgGCToClientActiveGuildContractsUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgGCToClientActiveGuildContractsUpdated::~CMsgGCToClientActiveGuildContractsUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientActiveGuildContractsUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientActiveGuildContractsUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientActiveGuildContractsUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientActiveGuildContractsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientActiveGuildContractsUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientActiveGuildContractsUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientActiveGuildContractsUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientActiveGuildContractsUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientActiveGuildContractsUpdated)
  return target;
}

size_t CMsgGCToClientActiveGuildContractsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientActiveGuildContractsUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientActiveGuildContractsUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientActiveGuildContractsUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientActiveGuildContractsUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCToClientActiveGuildContractsUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientActiveGuildContractsUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientActiveGuildContractsUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientActiveGuildContractsUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientActiveGuildContractsUpdated::CopyFrom(const CMsgGCToClientActiveGuildContractsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientActiveGuildContractsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientActiveGuildContractsUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientActiveGuildContractsUpdated::InternalSwap(CMsgGCToClientActiveGuildContractsUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildContractsUpdated, _impl_.event_id_)
      + sizeof(CMsgGCToClientActiveGuildContractsUpdated::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildContractsUpdated, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientActiveGuildContractsUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[11]);
}

// ===================================================================

class CMsgClientToGCSelectGuildContract::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSelectGuildContract>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCSelectGuildContract::CMsgClientToGCSelectGuildContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSelectGuildContract)
}
CMsgClientToGCSelectGuildContract::CMsgClientToGCSelectGuildContract(const CMsgClientToGCSelectGuildContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCSelectGuildContract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.contract_id_){}
    , decltype(_impl_.contract_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contract_slot_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.contract_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSelectGuildContract)
}

inline void CMsgClientToGCSelectGuildContract::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.contract_id_){uint64_t{0u}}
    , decltype(_impl_.contract_slot_){0u}
  };
}

CMsgClientToGCSelectGuildContract::~CMsgClientToGCSelectGuildContract() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSelectGuildContract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCSelectGuildContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCSelectGuildContract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCSelectGuildContract::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSelectGuildContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.contract_slot_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.contract_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSelectGuildContract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 contract_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_contract_id(&has_bits);
          _impl_.contract_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contract_slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_contract_slot(&has_bits);
          _impl_.contract_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSelectGuildContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSelectGuildContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint64 contract_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_contract_id(), target);
  }

  // optional uint32 contract_slot = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_contract_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSelectGuildContract)
  return target;
}

size_t CMsgClientToGCSelectGuildContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSelectGuildContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint64 contract_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_contract_id());
    }

    // optional uint32 contract_slot = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contract_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSelectGuildContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCSelectGuildContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSelectGuildContract::GetClassData() const { return &_class_data_; }


void CMsgClientToGCSelectGuildContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCSelectGuildContract*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCSelectGuildContract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSelectGuildContract)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.contract_id_ = from._impl_.contract_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.contract_slot_ = from._impl_.contract_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSelectGuildContract::CopyFrom(const CMsgClientToGCSelectGuildContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSelectGuildContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSelectGuildContract::IsInitialized() const {
  return true;
}

void CMsgClientToGCSelectGuildContract::InternalSwap(CMsgClientToGCSelectGuildContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSelectGuildContract, _impl_.contract_slot_)
      + sizeof(CMsgClientToGCSelectGuildContract::_impl_.contract_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSelectGuildContract, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSelectGuildContract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[12]);
}

// ===================================================================

class CMsgClientToGCSelectGuildContractResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSelectGuildContractResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCSelectGuildContractResponse::CMsgClientToGCSelectGuildContractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSelectGuildContractResponse)
}
CMsgClientToGCSelectGuildContractResponse::CMsgClientToGCSelectGuildContractResponse(const CMsgClientToGCSelectGuildContractResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCSelectGuildContractResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSelectGuildContractResponse)
}

inline void CMsgClientToGCSelectGuildContractResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgClientToGCSelectGuildContractResponse::~CMsgClientToGCSelectGuildContractResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSelectGuildContractResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCSelectGuildContractResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCSelectGuildContractResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCSelectGuildContractResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSelectGuildContractResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSelectGuildContractResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCSelectGuildContractResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCSelectGuildContractResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCSelectGuildContractResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSelectGuildContractResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSelectGuildContractResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCSelectGuildContractResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSelectGuildContractResponse)
  return target;
}

size_t CMsgClientToGCSelectGuildContractResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSelectGuildContractResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCSelectGuildContractResponse.EResponse result = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSelectGuildContractResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCSelectGuildContractResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSelectGuildContractResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCSelectGuildContractResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCSelectGuildContractResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCSelectGuildContractResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSelectGuildContractResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSelectGuildContractResponse::CopyFrom(const CMsgClientToGCSelectGuildContractResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSelectGuildContractResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSelectGuildContractResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSelectGuildContractResponse::InternalSwap(CMsgClientToGCSelectGuildContractResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSelectGuildContractResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[13]);
}

// ===================================================================

class CMsgClientToGCRequestActiveGuildChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildChallenge>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestActiveGuildChallenge::CMsgClientToGCRequestActiveGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildChallenge)
}
CMsgClientToGCRequestActiveGuildChallenge::CMsgClientToGCRequestActiveGuildChallenge(const CMsgClientToGCRequestActiveGuildChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestActiveGuildChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildChallenge)
}

inline void CMsgClientToGCRequestActiveGuildChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgClientToGCRequestActiveGuildChallenge::~CMsgClientToGCRequestActiveGuildChallenge() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestActiveGuildChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRequestActiveGuildChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestActiveGuildChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildChallenge)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestActiveGuildChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestActiveGuildChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestActiveGuildChallenge::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestActiveGuildChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestActiveGuildChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestActiveGuildChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestActiveGuildChallenge::CopyFrom(const CMsgClientToGCRequestActiveGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildChallenge::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildChallenge::InternalSwap(CMsgClientToGCRequestActiveGuildChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallenge, _impl_.event_id_)
      + sizeof(CMsgClientToGCRequestActiveGuildChallenge::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallenge, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[14]);
}

// ===================================================================

class CMsgClientToGCRequestActiveGuildChallengeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestActiveGuildChallengeResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGuildChallenge& active_challenge(const CMsgClientToGCRequestActiveGuildChallengeResponse* msg);
  static void set_has_active_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGuildChallenge&
CMsgClientToGCRequestActiveGuildChallengeResponse::_Internal::active_challenge(const CMsgClientToGCRequestActiveGuildChallengeResponse* msg) {
  return *msg->_impl_.active_challenge_;
}
CMsgClientToGCRequestActiveGuildChallengeResponse::CMsgClientToGCRequestActiveGuildChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestActiveGuildChallengeResponse)
}
CMsgClientToGCRequestActiveGuildChallengeResponse::CMsgClientToGCRequestActiveGuildChallengeResponse(const CMsgClientToGCRequestActiveGuildChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestActiveGuildChallengeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_challenge_){nullptr}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_active_challenge()) {
    _this->_impl_.active_challenge_ = new ::CMsgGuildChallenge(*from._impl_.active_challenge_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestActiveGuildChallengeResponse)
}

inline void CMsgClientToGCRequestActiveGuildChallengeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_challenge_){nullptr}
    , decltype(_impl_.result_){0}
  };
}

CMsgClientToGCRequestActiveGuildChallengeResponse::~CMsgClientToGCRequestActiveGuildChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestActiveGuildChallengeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestActiveGuildChallengeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.active_challenge_;
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.active_challenge_ != nullptr);
    _impl_.active_challenge_->Clear();
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestActiveGuildChallengeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestActiveGuildChallengeResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestActiveGuildChallengeResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGuildChallenge active_challenge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_challenge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestActiveGuildChallengeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCRequestActiveGuildChallengeResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .CMsgGuildChallenge active_challenge = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::active_challenge(this),
        _Internal::active_challenge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestActiveGuildChallengeResponse)
  return target;
}

size_t CMsgClientToGCRequestActiveGuildChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGuildChallenge active_challenge = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.active_challenge_);
    }

    // optional .CMsgClientToGCRequestActiveGuildChallengeResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestActiveGuildChallengeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestActiveGuildChallengeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestActiveGuildChallengeResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestActiveGuildChallengeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestActiveGuildChallengeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestActiveGuildChallengeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_active_challenge()->::CMsgGuildChallenge::MergeFrom(
          from._internal_active_challenge());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::CopyFrom(const CMsgClientToGCRequestActiveGuildChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestActiveGuildChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestActiveGuildChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestActiveGuildChallengeResponse::InternalSwap(CMsgClientToGCRequestActiveGuildChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallengeResponse, _impl_.result_)
      + sizeof(CMsgClientToGCRequestActiveGuildChallengeResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestActiveGuildChallengeResponse, _impl_.active_challenge_)>(
          reinterpret_cast<char*>(&_impl_.active_challenge_),
          reinterpret_cast<char*>(&other->_impl_.active_challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestActiveGuildChallengeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[15]);
}

// ===================================================================

class CMsgGCToClientActiveGuildChallengeUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientActiveGuildChallengeUpdated>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgGuildChallenge& active_challenge(const CMsgGCToClientActiveGuildChallengeUpdated* msg);
  static void set_has_active_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGuildChallenge&
CMsgGCToClientActiveGuildChallengeUpdated::_Internal::active_challenge(const CMsgGCToClientActiveGuildChallengeUpdated* msg) {
  return *msg->_impl_.active_challenge_;
}
CMsgGCToClientActiveGuildChallengeUpdated::CMsgGCToClientActiveGuildChallengeUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientActiveGuildChallengeUpdated)
}
CMsgGCToClientActiveGuildChallengeUpdated::CMsgGCToClientActiveGuildChallengeUpdated(const CMsgGCToClientActiveGuildChallengeUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientActiveGuildChallengeUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_challenge_){nullptr}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_active_challenge()) {
    _this->_impl_.active_challenge_ = new ::CMsgGuildChallenge(*from._impl_.active_challenge_);
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientActiveGuildChallengeUpdated)
}

inline void CMsgGCToClientActiveGuildChallengeUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_challenge_){nullptr}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgGCToClientActiveGuildChallengeUpdated::~CMsgGCToClientActiveGuildChallengeUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientActiveGuildChallengeUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientActiveGuildChallengeUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.active_challenge_;
}

void CMsgGCToClientActiveGuildChallengeUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientActiveGuildChallengeUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientActiveGuildChallengeUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.active_challenge_ != nullptr);
    _impl_.active_challenge_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientActiveGuildChallengeUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGuildChallenge active_challenge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_challenge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientActiveGuildChallengeUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientActiveGuildChallengeUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional .CMsgGuildChallenge active_challenge = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::active_challenge(this),
        _Internal::active_challenge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientActiveGuildChallengeUpdated)
  return target;
}

size_t CMsgGCToClientActiveGuildChallengeUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientActiveGuildChallengeUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgGuildChallenge active_challenge = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.active_challenge_);
    }

    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientActiveGuildChallengeUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientActiveGuildChallengeUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientActiveGuildChallengeUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCToClientActiveGuildChallengeUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientActiveGuildChallengeUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientActiveGuildChallengeUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientActiveGuildChallengeUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_active_challenge()->::CMsgGuildChallenge::MergeFrom(
          from._internal_active_challenge());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientActiveGuildChallengeUpdated::CopyFrom(const CMsgGCToClientActiveGuildChallengeUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientActiveGuildChallengeUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientActiveGuildChallengeUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientActiveGuildChallengeUpdated::InternalSwap(CMsgGCToClientActiveGuildChallengeUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildChallengeUpdated, _impl_.event_id_)
      + sizeof(CMsgGCToClientActiveGuildChallengeUpdated::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientActiveGuildChallengeUpdated, _impl_.active_challenge_)>(
          reinterpret_cast<char*>(&_impl_.active_challenge_),
          reinterpret_cast<char*>(&other->_impl_.active_challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientActiveGuildChallengeUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[16]);
}

// ===================================================================

class CMsgClientToGCRequestGuildEventMembers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestGuildEventMembers>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestGuildEventMembers::CMsgClientToGCRequestGuildEventMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestGuildEventMembers)
}
CMsgClientToGCRequestGuildEventMembers::CMsgClientToGCRequestGuildEventMembers(const CMsgClientToGCRequestGuildEventMembers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestGuildEventMembers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestGuildEventMembers)
}

inline void CMsgClientToGCRequestGuildEventMembers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgClientToGCRequestGuildEventMembers::~CMsgClientToGCRequestGuildEventMembers() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestGuildEventMembers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestGuildEventMembers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRequestGuildEventMembers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestGuildEventMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestGuildEventMembers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestGuildEventMembers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestGuildEventMembers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestGuildEventMembers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestGuildEventMembers)
  return target;
}

size_t CMsgClientToGCRequestGuildEventMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestGuildEventMembers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestGuildEventMembers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestGuildEventMembers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestGuildEventMembers::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestGuildEventMembers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestGuildEventMembers*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestGuildEventMembers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestGuildEventMembers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestGuildEventMembers::CopyFrom(const CMsgClientToGCRequestGuildEventMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestGuildEventMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestGuildEventMembers::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestGuildEventMembers::InternalSwap(CMsgClientToGCRequestGuildEventMembers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestGuildEventMembers, _impl_.event_id_)
      + sizeof(CMsgClientToGCRequestGuildEventMembers::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestGuildEventMembers, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestGuildEventMembers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[17]);
}

// ===================================================================

class CMsgClientToGCRequestGuildEventMembersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestGuildEventMembersResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRequestGuildEventMembersResponse::CMsgClientToGCRequestGuildEventMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestGuildEventMembersResponse)
}
CMsgClientToGCRequestGuildEventMembersResponse::CMsgClientToGCRequestGuildEventMembersResponse(const CMsgClientToGCRequestGuildEventMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestGuildEventMembersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestGuildEventMembersResponse)
}

inline void CMsgClientToGCRequestGuildEventMembersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.result_){0}
  };
}

CMsgClientToGCRequestGuildEventMembersResponse::~CMsgClientToGCRequestGuildEventMembersResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestGuildEventMembersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestGuildEventMembersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
}

void CMsgClientToGCRequestGuildEventMembersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestGuildEventMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestGuildEventMembersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestGuildEventMembersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRequestGuildEventMembersResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRequestGuildEventMembersResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCRequestGuildEventMembersResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGuildEventMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestGuildEventMembersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestGuildEventMembersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCRequestGuildEventMembersResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgGuildEventMember members = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestGuildEventMembersResponse)
  return target;
}

size_t CMsgClientToGCRequestGuildEventMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestGuildEventMembersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGuildEventMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgClientToGCRequestGuildEventMembersResponse.EResponse result = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestGuildEventMembersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestGuildEventMembersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestGuildEventMembersResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestGuildEventMembersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestGuildEventMembersResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestGuildEventMembersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestGuildEventMembersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestGuildEventMembersResponse::CopyFrom(const CMsgClientToGCRequestGuildEventMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestGuildEventMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestGuildEventMembersResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestGuildEventMembersResponse::InternalSwap(CMsgClientToGCRequestGuildEventMembersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestGuildEventMembersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[18]);
}

// ===================================================================

class CMsgGuildLeaderboardCombinedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGuildLeaderboardCombinedResponse>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGuildLeaderboardCombinedResponse::CMsgGuildLeaderboardCombinedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGuildLeaderboardCombinedResponse)
}
CMsgGuildLeaderboardCombinedResponse::CMsgGuildLeaderboardCombinedResponse(const CMsgGuildLeaderboardCombinedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGuildLeaderboardCombinedResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){from._impl_.guild_id_}
    , /*decltype(_impl_._guild_id_cached_byte_size_)*/{0}
    , decltype(_impl_.rank_){from._impl_.rank_}
    , /*decltype(_impl_._rank_cached_byte_size_)*/{0}
    , decltype(_impl_.current_percentile_){from._impl_.current_percentile_}
    , /*decltype(_impl_._current_percentile_cached_byte_size_)*/{0}
    , decltype(_impl_.weekly_percentile_){from._impl_.weekly_percentile_}
    , /*decltype(_impl_._weekly_percentile_cached_byte_size_)*/{0}
    , decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._points_cached_byte_size_)*/{0}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.last_updated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_updated_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.last_updated_));
  // @@protoc_insertion_point(copy_constructor:CMsgGuildLeaderboardCombinedResponse)
}

inline void CMsgGuildLeaderboardCombinedResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){arena}
    , /*decltype(_impl_._guild_id_cached_byte_size_)*/{0}
    , decltype(_impl_.rank_){arena}
    , /*decltype(_impl_._rank_cached_byte_size_)*/{0}
    , decltype(_impl_.current_percentile_){arena}
    , /*decltype(_impl_._current_percentile_cached_byte_size_)*/{0}
    , decltype(_impl_.weekly_percentile_){arena}
    , /*decltype(_impl_._weekly_percentile_cached_byte_size_)*/{0}
    , decltype(_impl_.points_){arena}
    , /*decltype(_impl_._points_cached_byte_size_)*/{0}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.region_){0u}
    , decltype(_impl_.last_updated_){0u}
  };
}

CMsgGuildLeaderboardCombinedResponse::~CMsgGuildLeaderboardCombinedResponse() {
  // @@protoc_insertion_point(destructor:CMsgGuildLeaderboardCombinedResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGuildLeaderboardCombinedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guild_id_.~RepeatedField();
  _impl_.rank_.~RepeatedField();
  _impl_.current_percentile_.~RepeatedField();
  _impl_.weekly_percentile_.~RepeatedField();
  _impl_.points_.~RepeatedField();
}

void CMsgGuildLeaderboardCombinedResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGuildLeaderboardCombinedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGuildLeaderboardCombinedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_id_.Clear();
  _impl_.rank_.Clear();
  _impl_.current_percentile_.Clear();
  _impl_.weekly_percentile_.Clear();
  _impl_.points_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_updated_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.last_updated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGuildLeaderboardCombinedResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_region(&has_bits);
          _impl_.region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_updated(&has_bits);
          _impl_.last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 guild_id = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_guild_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_guild_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 rank = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rank(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_rank(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 current_percentile = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_current_percentile(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_current_percentile(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 weekly_percentile = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_weekly_percentile(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_weekly_percentile(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 points = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGuildLeaderboardCombinedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildLeaderboardCombinedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_region(), target);
  }

  // optional uint32 last_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_updated(), target);
  }

  // repeated uint32 guild_id = 4 [packed = true];
  {
    int byte_size = _impl_._guild_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_guild_id(), byte_size, target);
    }
  }

  // repeated uint32 rank = 5 [packed = true];
  {
    int byte_size = _impl_._rank_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_rank(), byte_size, target);
    }
  }

  // repeated uint32 current_percentile = 6 [packed = true];
  {
    int byte_size = _impl_._current_percentile_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_current_percentile(), byte_size, target);
    }
  }

  // repeated uint32 weekly_percentile = 7 [packed = true];
  {
    int byte_size = _impl_._weekly_percentile_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_weekly_percentile(), byte_size, target);
    }
  }

  // repeated uint32 points = 8 [packed = true];
  {
    int byte_size = _impl_._points_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_points(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildLeaderboardCombinedResponse)
  return target;
}

size_t CMsgGuildLeaderboardCombinedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGuildLeaderboardCombinedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 guild_id = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.guild_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._guild_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 rank = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.rank_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rank_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 current_percentile = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.current_percentile_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._current_percentile_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 weekly_percentile = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.weekly_percentile_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._weekly_percentile_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 points = 8 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.points_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 region = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region());
    }

    // optional uint32 last_updated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_updated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGuildLeaderboardCombinedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGuildLeaderboardCombinedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGuildLeaderboardCombinedResponse::GetClassData() const { return &_class_data_; }


void CMsgGuildLeaderboardCombinedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGuildLeaderboardCombinedResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGuildLeaderboardCombinedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGuildLeaderboardCombinedResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.guild_id_.MergeFrom(from._impl_.guild_id_);
  _this->_impl_.rank_.MergeFrom(from._impl_.rank_);
  _this->_impl_.current_percentile_.MergeFrom(from._impl_.current_percentile_);
  _this->_impl_.weekly_percentile_.MergeFrom(from._impl_.weekly_percentile_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.region_ = from._impl_.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_updated_ = from._impl_.last_updated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGuildLeaderboardCombinedResponse::CopyFrom(const CMsgGuildLeaderboardCombinedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGuildLeaderboardCombinedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildLeaderboardCombinedResponse::IsInitialized() const {
  return true;
}

void CMsgGuildLeaderboardCombinedResponse::InternalSwap(CMsgGuildLeaderboardCombinedResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.guild_id_.InternalSwap(&other->_impl_.guild_id_);
  _impl_.rank_.InternalSwap(&other->_impl_.rank_);
  _impl_.current_percentile_.InternalSwap(&other->_impl_.current_percentile_);
  _impl_.weekly_percentile_.InternalSwap(&other->_impl_.weekly_percentile_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponse, _impl_.last_updated_)
      + sizeof(CMsgGuildLeaderboardCombinedResponse::_impl_.last_updated_)
      - PROTOBUF_FIELD_OFFSET(CMsgGuildLeaderboardCombinedResponse, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGuildLeaderboardCombinedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[19]);
}

// ===================================================================

class CMsgClientToGCClaimLeaderboardRewards::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCClaimLeaderboardRewards>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCClaimLeaderboardRewards::CMsgClientToGCClaimLeaderboardRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCClaimLeaderboardRewards)
}
CMsgClientToGCClaimLeaderboardRewards::CMsgClientToGCClaimLeaderboardRewards(const CMsgClientToGCClaimLeaderboardRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCClaimLeaderboardRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCClaimLeaderboardRewards)
}

inline void CMsgClientToGCClaimLeaderboardRewards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgClientToGCClaimLeaderboardRewards::~CMsgClientToGCClaimLeaderboardRewards() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCClaimLeaderboardRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCClaimLeaderboardRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCClaimLeaderboardRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCClaimLeaderboardRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCClaimLeaderboardRewards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCClaimLeaderboardRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCClaimLeaderboardRewards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCClaimLeaderboardRewards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCClaimLeaderboardRewards)
  return target;
}

size_t CMsgClientToGCClaimLeaderboardRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCClaimLeaderboardRewards)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCClaimLeaderboardRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCClaimLeaderboardRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCClaimLeaderboardRewards::GetClassData() const { return &_class_data_; }


void CMsgClientToGCClaimLeaderboardRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCClaimLeaderboardRewards*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCClaimLeaderboardRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCClaimLeaderboardRewards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCClaimLeaderboardRewards::CopyFrom(const CMsgClientToGCClaimLeaderboardRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCClaimLeaderboardRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCClaimLeaderboardRewards::IsInitialized() const {
  return true;
}

void CMsgClientToGCClaimLeaderboardRewards::InternalSwap(CMsgClientToGCClaimLeaderboardRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewards, _impl_.event_id_)
      + sizeof(CMsgClientToGCClaimLeaderboardRewards::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewards, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCClaimLeaderboardRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[20]);
}

// ===================================================================

class CMsgClientToGCClaimLeaderboardRewardsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCClaimLeaderboardRewardsResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCClaimLeaderboardRewardsResponse::CMsgClientToGCClaimLeaderboardRewardsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCClaimLeaderboardRewardsResponse)
}
CMsgClientToGCClaimLeaderboardRewardsResponse::CMsgClientToGCClaimLeaderboardRewardsResponse(const CMsgClientToGCClaimLeaderboardRewardsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCClaimLeaderboardRewardsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}
    , decltype(_impl_.event_points_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_points_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.event_points_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCClaimLeaderboardRewardsResponse)
}

inline void CMsgClientToGCClaimLeaderboardRewardsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.event_points_){0u}
  };
}

CMsgClientToGCClaimLeaderboardRewardsResponse::~CMsgClientToGCClaimLeaderboardRewardsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCClaimLeaderboardRewardsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCClaimLeaderboardRewardsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_points_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.event_points_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCClaimLeaderboardRewardsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCClaimLeaderboardRewardsResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCClaimLeaderboardRewardsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_points(&has_bits);
          _impl_.event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCClaimLeaderboardRewardsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCClaimLeaderboardRewardsResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCClaimLeaderboardRewardsResponse)
  return target;
}

size_t CMsgClientToGCClaimLeaderboardRewardsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCClaimLeaderboardRewardsResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 event_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_points());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCClaimLeaderboardRewardsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCClaimLeaderboardRewardsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCClaimLeaderboardRewardsResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCClaimLeaderboardRewardsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCClaimLeaderboardRewardsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCClaimLeaderboardRewardsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_points_ = from._impl_.event_points_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::CopyFrom(const CMsgClientToGCClaimLeaderboardRewardsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCClaimLeaderboardRewardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCClaimLeaderboardRewardsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCClaimLeaderboardRewardsResponse::InternalSwap(CMsgClientToGCClaimLeaderboardRewardsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewardsResponse, _impl_.event_points_)
      + sizeof(CMsgClientToGCClaimLeaderboardRewardsResponse::_impl_.event_points_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCClaimLeaderboardRewardsResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCClaimLeaderboardRewardsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fguild_5fevents_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgGuildContract*
Arena::CreateMaybeMessage< ::CMsgGuildContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildContract >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildContractSlot*
Arena::CreateMaybeMessage< ::CMsgGuildContractSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildContractSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAccountGuildEventData*
Arena::CreateMaybeMessage< ::CMsgAccountGuildEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAccountGuildEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildActiveContracts*
Arena::CreateMaybeMessage< ::CMsgGuildActiveContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildActiveContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildChallenge*
Arena::CreateMaybeMessage< ::CMsgGuildChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildEventMember*
Arena::CreateMaybeMessage< ::CMsgGuildEventMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildEventMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestAccountGuildEventData*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestAccountGuildEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestAccountGuildEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestAccountGuildEventDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestAccountGuildEventDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestAccountGuildEventDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientAccountGuildEventDataUpdated*
Arena::CreateMaybeMessage< ::CMsgGCToClientAccountGuildEventDataUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientAccountGuildEventDataUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildContracts*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildContractsResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildContractsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildContractsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientActiveGuildContractsUpdated*
Arena::CreateMaybeMessage< ::CMsgGCToClientActiveGuildContractsUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientActiveGuildContractsUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSelectGuildContract*
Arena::CreateMaybeMessage< ::CMsgClientToGCSelectGuildContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSelectGuildContract >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSelectGuildContractResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCSelectGuildContractResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSelectGuildContractResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildChallenge*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestActiveGuildChallengeResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestActiveGuildChallengeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestActiveGuildChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientActiveGuildChallengeUpdated*
Arena::CreateMaybeMessage< ::CMsgGCToClientActiveGuildChallengeUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientActiveGuildChallengeUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestGuildEventMembers*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestGuildEventMembers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestGuildEventMembers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestGuildEventMembersResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestGuildEventMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestGuildEventMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGuildLeaderboardCombinedResponse*
Arena::CreateMaybeMessage< ::CMsgGuildLeaderboardCombinedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGuildLeaderboardCombinedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCClaimLeaderboardRewards*
Arena::CreateMaybeMessage< ::CMsgClientToGCClaimLeaderboardRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCClaimLeaderboardRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCClaimLeaderboardRewardsResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCClaimLeaderboardRewardsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCClaimLeaderboardRewardsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
