// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usercmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fusercmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fusercmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
#include "usercmd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fusercmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fusercmd_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fusercmd_2eproto;
class CDota2UserCmdPB;
struct CDota2UserCmdPBDefaultTypeInternal;
extern CDota2UserCmdPBDefaultTypeInternal _CDota2UserCmdPB_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDota2UserCmdPB* Arena::CreateMaybeMessage<::CDota2UserCmdPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CDota2UserCmdPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDota2UserCmdPB) */ {
 public:
  inline CDota2UserCmdPB() : CDota2UserCmdPB(nullptr) {}
  ~CDota2UserCmdPB() override;
  explicit PROTOBUF_CONSTEXPR CDota2UserCmdPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDota2UserCmdPB(const CDota2UserCmdPB& from);
  CDota2UserCmdPB(CDota2UserCmdPB&& from) noexcept
    : CDota2UserCmdPB() {
    *this = ::std::move(from);
  }

  inline CDota2UserCmdPB& operator=(const CDota2UserCmdPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDota2UserCmdPB& operator=(CDota2UserCmdPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDota2UserCmdPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDota2UserCmdPB* internal_default_instance() {
    return reinterpret_cast<const CDota2UserCmdPB*>(
               &_CDota2UserCmdPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDota2UserCmdPB& a, CDota2UserCmdPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CDota2UserCmdPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDota2UserCmdPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDota2UserCmdPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDota2UserCmdPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDota2UserCmdPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDota2UserCmdPB& from) {
    CDota2UserCmdPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDota2UserCmdPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDota2UserCmdPB";
  }
  protected:
  explicit CDota2UserCmdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCrosshairtraceFieldNumber = 3,
    kSpectatorQueryUnitEntindexFieldNumber = 2,
    kCamerapositionXFieldNumber = 4,
    kCamerapositionYFieldNumber = 5,
    kClickbehaviorFieldNumber = 6,
    kStatspanelFieldNumber = 7,
    kShoppanelFieldNumber = 8,
    kStatsDropdownFieldNumber = 9,
    kStatsDropdownSortFieldNumber = 10,
  };
  // optional .CBaseUserCmdPB base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::CBaseUserCmdPB& base() const;
  PROTOBUF_NODISCARD ::CBaseUserCmdPB* release_base();
  ::CBaseUserCmdPB* mutable_base();
  void set_allocated_base(::CBaseUserCmdPB* base);
  private:
  const ::CBaseUserCmdPB& _internal_base() const;
  ::CBaseUserCmdPB* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::CBaseUserCmdPB* base);
  ::CBaseUserCmdPB* unsafe_arena_release_base();

  // optional .CMsgVector crosshairtrace = 3;
  bool has_crosshairtrace() const;
  private:
  bool _internal_has_crosshairtrace() const;
  public:
  void clear_crosshairtrace();
  const ::CMsgVector& crosshairtrace() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_crosshairtrace();
  ::CMsgVector* mutable_crosshairtrace();
  void set_allocated_crosshairtrace(::CMsgVector* crosshairtrace);
  private:
  const ::CMsgVector& _internal_crosshairtrace() const;
  ::CMsgVector* _internal_mutable_crosshairtrace();
  public:
  void unsafe_arena_set_allocated_crosshairtrace(
      ::CMsgVector* crosshairtrace);
  ::CMsgVector* unsafe_arena_release_crosshairtrace();

  // optional int32 spectator_query_unit_entindex = 2;
  bool has_spectator_query_unit_entindex() const;
  private:
  bool _internal_has_spectator_query_unit_entindex() const;
  public:
  void clear_spectator_query_unit_entindex();
  int32_t spectator_query_unit_entindex() const;
  void set_spectator_query_unit_entindex(int32_t value);
  private:
  int32_t _internal_spectator_query_unit_entindex() const;
  void _internal_set_spectator_query_unit_entindex(int32_t value);
  public:

  // optional int32 cameraposition_x = 4;
  bool has_cameraposition_x() const;
  private:
  bool _internal_has_cameraposition_x() const;
  public:
  void clear_cameraposition_x();
  int32_t cameraposition_x() const;
  void set_cameraposition_x(int32_t value);
  private:
  int32_t _internal_cameraposition_x() const;
  void _internal_set_cameraposition_x(int32_t value);
  public:

  // optional int32 cameraposition_y = 5;
  bool has_cameraposition_y() const;
  private:
  bool _internal_has_cameraposition_y() const;
  public:
  void clear_cameraposition_y();
  int32_t cameraposition_y() const;
  void set_cameraposition_y(int32_t value);
  private:
  int32_t _internal_cameraposition_y() const;
  void _internal_set_cameraposition_y(int32_t value);
  public:

  // optional uint32 clickbehavior = 6;
  bool has_clickbehavior() const;
  private:
  bool _internal_has_clickbehavior() const;
  public:
  void clear_clickbehavior();
  uint32_t clickbehavior() const;
  void set_clickbehavior(uint32_t value);
  private:
  uint32_t _internal_clickbehavior() const;
  void _internal_set_clickbehavior(uint32_t value);
  public:

  // optional uint32 statspanel = 7;
  bool has_statspanel() const;
  private:
  bool _internal_has_statspanel() const;
  public:
  void clear_statspanel();
  uint32_t statspanel() const;
  void set_statspanel(uint32_t value);
  private:
  uint32_t _internal_statspanel() const;
  void _internal_set_statspanel(uint32_t value);
  public:

  // optional uint32 shoppanel = 8;
  bool has_shoppanel() const;
  private:
  bool _internal_has_shoppanel() const;
  public:
  void clear_shoppanel();
  uint32_t shoppanel() const;
  void set_shoppanel(uint32_t value);
  private:
  uint32_t _internal_shoppanel() const;
  void _internal_set_shoppanel(uint32_t value);
  public:

  // optional uint32 stats_dropdown = 9;
  bool has_stats_dropdown() const;
  private:
  bool _internal_has_stats_dropdown() const;
  public:
  void clear_stats_dropdown();
  uint32_t stats_dropdown() const;
  void set_stats_dropdown(uint32_t value);
  private:
  uint32_t _internal_stats_dropdown() const;
  void _internal_set_stats_dropdown(uint32_t value);
  public:

  // optional uint32 stats_dropdown_sort = 10;
  bool has_stats_dropdown_sort() const;
  private:
  bool _internal_has_stats_dropdown_sort() const;
  public:
  void clear_stats_dropdown_sort();
  uint32_t stats_dropdown_sort() const;
  void set_stats_dropdown_sort(uint32_t value);
  private:
  uint32_t _internal_stats_dropdown_sort() const;
  void _internal_set_stats_dropdown_sort(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDota2UserCmdPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CBaseUserCmdPB* base_;
    ::CMsgVector* crosshairtrace_;
    int32_t spectator_query_unit_entindex_;
    int32_t cameraposition_x_;
    int32_t cameraposition_y_;
    uint32_t clickbehavior_;
    uint32_t statspanel_;
    uint32_t shoppanel_;
    uint32_t stats_dropdown_;
    uint32_t stats_dropdown_sort_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fusercmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDota2UserCmdPB

// optional .CBaseUserCmdPB base = 1;
inline bool CDota2UserCmdPB::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool CDota2UserCmdPB::has_base() const {
  return _internal_has_base();
}
inline const ::CBaseUserCmdPB& CDota2UserCmdPB::_internal_base() const {
  const ::CBaseUserCmdPB* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBaseUserCmdPB&>(
      ::_CBaseUserCmdPB_default_instance_);
}
inline const ::CBaseUserCmdPB& CDota2UserCmdPB::base() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.base)
  return _internal_base();
}
inline void CDota2UserCmdPB::unsafe_arena_set_allocated_base(
    ::CBaseUserCmdPB* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDota2UserCmdPB.base)
}
inline ::CBaseUserCmdPB* CDota2UserCmdPB::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CBaseUserCmdPB* CDota2UserCmdPB::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:CDota2UserCmdPB.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::CBaseUserCmdPB* CDota2UserCmdPB::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::CBaseUserCmdPB>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::CBaseUserCmdPB* CDota2UserCmdPB::mutable_base() {
  ::CBaseUserCmdPB* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CDota2UserCmdPB.base)
  return _msg;
}
inline void CDota2UserCmdPB::set_allocated_base(::CBaseUserCmdPB* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:CDota2UserCmdPB.base)
}

// optional int32 spectator_query_unit_entindex = 2;
inline bool CDota2UserCmdPB::_internal_has_spectator_query_unit_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_spectator_query_unit_entindex() const {
  return _internal_has_spectator_query_unit_entindex();
}
inline void CDota2UserCmdPB::clear_spectator_query_unit_entindex() {
  _impl_.spectator_query_unit_entindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDota2UserCmdPB::_internal_spectator_query_unit_entindex() const {
  return _impl_.spectator_query_unit_entindex_;
}
inline int32_t CDota2UserCmdPB::spectator_query_unit_entindex() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.spectator_query_unit_entindex)
  return _internal_spectator_query_unit_entindex();
}
inline void CDota2UserCmdPB::_internal_set_spectator_query_unit_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.spectator_query_unit_entindex_ = value;
}
inline void CDota2UserCmdPB::set_spectator_query_unit_entindex(int32_t value) {
  _internal_set_spectator_query_unit_entindex(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.spectator_query_unit_entindex)
}

// optional .CMsgVector crosshairtrace = 3;
inline bool CDota2UserCmdPB::_internal_has_crosshairtrace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crosshairtrace_ != nullptr);
  return value;
}
inline bool CDota2UserCmdPB::has_crosshairtrace() const {
  return _internal_has_crosshairtrace();
}
inline const ::CMsgVector& CDota2UserCmdPB::_internal_crosshairtrace() const {
  const ::CMsgVector* p = _impl_.crosshairtrace_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CDota2UserCmdPB::crosshairtrace() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.crosshairtrace)
  return _internal_crosshairtrace();
}
inline void CDota2UserCmdPB::unsafe_arena_set_allocated_crosshairtrace(
    ::CMsgVector* crosshairtrace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crosshairtrace_);
  }
  _impl_.crosshairtrace_ = crosshairtrace;
  if (crosshairtrace) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDota2UserCmdPB.crosshairtrace)
}
inline ::CMsgVector* CDota2UserCmdPB::release_crosshairtrace() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.crosshairtrace_;
  _impl_.crosshairtrace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CDota2UserCmdPB::unsafe_arena_release_crosshairtrace() {
  // @@protoc_insertion_point(field_release:CDota2UserCmdPB.crosshairtrace)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.crosshairtrace_;
  _impl_.crosshairtrace_ = nullptr;
  return temp;
}
inline ::CMsgVector* CDota2UserCmdPB::_internal_mutable_crosshairtrace() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.crosshairtrace_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.crosshairtrace_ = p;
  }
  return _impl_.crosshairtrace_;
}
inline ::CMsgVector* CDota2UserCmdPB::mutable_crosshairtrace() {
  ::CMsgVector* _msg = _internal_mutable_crosshairtrace();
  // @@protoc_insertion_point(field_mutable:CDota2UserCmdPB.crosshairtrace)
  return _msg;
}
inline void CDota2UserCmdPB::set_allocated_crosshairtrace(::CMsgVector* crosshairtrace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crosshairtrace_);
  }
  if (crosshairtrace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crosshairtrace));
    if (message_arena != submessage_arena) {
      crosshairtrace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosshairtrace, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.crosshairtrace_ = crosshairtrace;
  // @@protoc_insertion_point(field_set_allocated:CDota2UserCmdPB.crosshairtrace)
}

// optional int32 cameraposition_x = 4;
inline bool CDota2UserCmdPB::_internal_has_cameraposition_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_cameraposition_x() const {
  return _internal_has_cameraposition_x();
}
inline void CDota2UserCmdPB::clear_cameraposition_x() {
  _impl_.cameraposition_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CDota2UserCmdPB::_internal_cameraposition_x() const {
  return _impl_.cameraposition_x_;
}
inline int32_t CDota2UserCmdPB::cameraposition_x() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.cameraposition_x)
  return _internal_cameraposition_x();
}
inline void CDota2UserCmdPB::_internal_set_cameraposition_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cameraposition_x_ = value;
}
inline void CDota2UserCmdPB::set_cameraposition_x(int32_t value) {
  _internal_set_cameraposition_x(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.cameraposition_x)
}

// optional int32 cameraposition_y = 5;
inline bool CDota2UserCmdPB::_internal_has_cameraposition_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_cameraposition_y() const {
  return _internal_has_cameraposition_y();
}
inline void CDota2UserCmdPB::clear_cameraposition_y() {
  _impl_.cameraposition_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CDota2UserCmdPB::_internal_cameraposition_y() const {
  return _impl_.cameraposition_y_;
}
inline int32_t CDota2UserCmdPB::cameraposition_y() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.cameraposition_y)
  return _internal_cameraposition_y();
}
inline void CDota2UserCmdPB::_internal_set_cameraposition_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cameraposition_y_ = value;
}
inline void CDota2UserCmdPB::set_cameraposition_y(int32_t value) {
  _internal_set_cameraposition_y(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.cameraposition_y)
}

// optional uint32 clickbehavior = 6;
inline bool CDota2UserCmdPB::_internal_has_clickbehavior() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_clickbehavior() const {
  return _internal_has_clickbehavior();
}
inline void CDota2UserCmdPB::clear_clickbehavior() {
  _impl_.clickbehavior_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDota2UserCmdPB::_internal_clickbehavior() const {
  return _impl_.clickbehavior_;
}
inline uint32_t CDota2UserCmdPB::clickbehavior() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.clickbehavior)
  return _internal_clickbehavior();
}
inline void CDota2UserCmdPB::_internal_set_clickbehavior(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.clickbehavior_ = value;
}
inline void CDota2UserCmdPB::set_clickbehavior(uint32_t value) {
  _internal_set_clickbehavior(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.clickbehavior)
}

// optional uint32 statspanel = 7;
inline bool CDota2UserCmdPB::_internal_has_statspanel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_statspanel() const {
  return _internal_has_statspanel();
}
inline void CDota2UserCmdPB::clear_statspanel() {
  _impl_.statspanel_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CDota2UserCmdPB::_internal_statspanel() const {
  return _impl_.statspanel_;
}
inline uint32_t CDota2UserCmdPB::statspanel() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.statspanel)
  return _internal_statspanel();
}
inline void CDota2UserCmdPB::_internal_set_statspanel(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.statspanel_ = value;
}
inline void CDota2UserCmdPB::set_statspanel(uint32_t value) {
  _internal_set_statspanel(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.statspanel)
}

// optional uint32 shoppanel = 8;
inline bool CDota2UserCmdPB::_internal_has_shoppanel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_shoppanel() const {
  return _internal_has_shoppanel();
}
inline void CDota2UserCmdPB::clear_shoppanel() {
  _impl_.shoppanel_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CDota2UserCmdPB::_internal_shoppanel() const {
  return _impl_.shoppanel_;
}
inline uint32_t CDota2UserCmdPB::shoppanel() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.shoppanel)
  return _internal_shoppanel();
}
inline void CDota2UserCmdPB::_internal_set_shoppanel(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.shoppanel_ = value;
}
inline void CDota2UserCmdPB::set_shoppanel(uint32_t value) {
  _internal_set_shoppanel(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.shoppanel)
}

// optional uint32 stats_dropdown = 9;
inline bool CDota2UserCmdPB::_internal_has_stats_dropdown() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_stats_dropdown() const {
  return _internal_has_stats_dropdown();
}
inline void CDota2UserCmdPB::clear_stats_dropdown() {
  _impl_.stats_dropdown_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CDota2UserCmdPB::_internal_stats_dropdown() const {
  return _impl_.stats_dropdown_;
}
inline uint32_t CDota2UserCmdPB::stats_dropdown() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.stats_dropdown)
  return _internal_stats_dropdown();
}
inline void CDota2UserCmdPB::_internal_set_stats_dropdown(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.stats_dropdown_ = value;
}
inline void CDota2UserCmdPB::set_stats_dropdown(uint32_t value) {
  _internal_set_stats_dropdown(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.stats_dropdown)
}

// optional uint32 stats_dropdown_sort = 10;
inline bool CDota2UserCmdPB::_internal_has_stats_dropdown_sort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDota2UserCmdPB::has_stats_dropdown_sort() const {
  return _internal_has_stats_dropdown_sort();
}
inline void CDota2UserCmdPB::clear_stats_dropdown_sort() {
  _impl_.stats_dropdown_sort_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CDota2UserCmdPB::_internal_stats_dropdown_sort() const {
  return _impl_.stats_dropdown_sort_;
}
inline uint32_t CDota2UserCmdPB::stats_dropdown_sort() const {
  // @@protoc_insertion_point(field_get:CDota2UserCmdPB.stats_dropdown_sort)
  return _internal_stats_dropdown_sort();
}
inline void CDota2UserCmdPB::_internal_set_stats_dropdown_sort(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.stats_dropdown_sort_ = value;
}
inline void CDota2UserCmdPB::set_stats_dropdown_sort(uint32_t value) {
  _internal_set_stats_dropdown_sort(value);
  // @@protoc_insertion_point(field_set:CDota2UserCmdPB.stats_dropdown_sort)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fusercmd_2eproto
