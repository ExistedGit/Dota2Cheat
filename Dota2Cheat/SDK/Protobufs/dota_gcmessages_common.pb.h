// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_2eproto;
class CMatchAdditionalUnitInventory;
struct CMatchAdditionalUnitInventoryDefaultTypeInternal;
extern CMatchAdditionalUnitInventoryDefaultTypeInternal _CMatchAdditionalUnitInventory_default_instance_;
class CMatchClip;
struct CMatchClipDefaultTypeInternal;
extern CMatchClipDefaultTypeInternal _CMatchClip_default_instance_;
class CMatchHeroSelectEvent;
struct CMatchHeroSelectEventDefaultTypeInternal;
extern CMatchHeroSelectEventDefaultTypeInternal _CMatchHeroSelectEvent_default_instance_;
class CMatchPlayerAbilityUpgrade;
struct CMatchPlayerAbilityUpgradeDefaultTypeInternal;
extern CMatchPlayerAbilityUpgradeDefaultTypeInternal _CMatchPlayerAbilityUpgrade_default_instance_;
class CMatchPlayerPermanentBuff;
struct CMatchPlayerPermanentBuffDefaultTypeInternal;
extern CMatchPlayerPermanentBuffDefaultTypeInternal _CMatchPlayerPermanentBuff_default_instance_;
class CMatchPlayerTimedStats;
struct CMatchPlayerTimedStatsDefaultTypeInternal;
extern CMatchPlayerTimedStatsDefaultTypeInternal _CMatchPlayerTimedStats_default_instance_;
class CMatchTeamTimedStats;
struct CMatchTeamTimedStatsDefaultTypeInternal;
extern CMatchTeamTimedStatsDefaultTypeInternal _CMatchTeamTimedStats_default_instance_;
class CMsgArcanaVoteMatchVotes;
struct CMsgArcanaVoteMatchVotesDefaultTypeInternal;
extern CMsgArcanaVoteMatchVotesDefaultTypeInternal _CMsgArcanaVoteMatchVotes_default_instance_;
class CMsgAvailablePredictions;
struct CMsgAvailablePredictionsDefaultTypeInternal;
extern CMsgAvailablePredictionsDefaultTypeInternal _CMsgAvailablePredictions_default_instance_;
class CMsgAvailablePredictions_MatchPrediction;
struct CMsgAvailablePredictions_MatchPredictionDefaultTypeInternal;
extern CMsgAvailablePredictions_MatchPredictionDefaultTypeInternal _CMsgAvailablePredictions_MatchPrediction_default_instance_;
class CMsgBattleCupVictory;
struct CMsgBattleCupVictoryDefaultTypeInternal;
extern CMsgBattleCupVictoryDefaultTypeInternal _CMsgBattleCupVictory_default_instance_;
class CMsgClientToGCRerollPlayerChallenge;
struct CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal;
extern CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal _CMsgClientToGCRerollPlayerChallenge_default_instance_;
class CMsgConsumableUsage;
struct CMsgConsumableUsageDefaultTypeInternal;
extern CMsgConsumableUsageDefaultTypeInternal _CMsgConsumableUsage_default_instance_;
class CMsgCustomGameWhitelist;
struct CMsgCustomGameWhitelistDefaultTypeInternal;
extern CMsgCustomGameWhitelistDefaultTypeInternal _CMsgCustomGameWhitelist_default_instance_;
class CMsgCustomGameWhitelistForEdit;
struct CMsgCustomGameWhitelistForEditDefaultTypeInternal;
extern CMsgCustomGameWhitelistForEditDefaultTypeInternal _CMsgCustomGameWhitelistForEdit_default_instance_;
class CMsgCustomGameWhitelistForEdit_WhitelistEntry;
struct CMsgCustomGameWhitelistForEdit_WhitelistEntryDefaultTypeInternal;
extern CMsgCustomGameWhitelistForEdit_WhitelistEntryDefaultTypeInternal _CMsgCustomGameWhitelistForEdit_WhitelistEntry_default_instance_;
class CMsgDOTABotDebugInfo;
struct CMsgDOTABotDebugInfoDefaultTypeInternal;
extern CMsgDOTABotDebugInfoDefaultTypeInternal _CMsgDOTABotDebugInfo_default_instance_;
class CMsgDOTABotDebugInfo_Bot;
struct CMsgDOTABotDebugInfo_BotDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_BotDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_default_instance_;
class CMsgDOTABotDebugInfo_Bot_Action;
struct CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Action_default_instance_;
class CMsgDOTABotDebugInfo_Bot_Mode;
struct CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_;
class CMsgDOTABroadcastNotification;
struct CMsgDOTABroadcastNotificationDefaultTypeInternal;
extern CMsgDOTABroadcastNotificationDefaultTypeInternal _CMsgDOTABroadcastNotification_default_instance_;
class CMsgDOTABroadcastTimelineEvent;
struct CMsgDOTABroadcastTimelineEventDefaultTypeInternal;
extern CMsgDOTABroadcastTimelineEventDefaultTypeInternal _CMsgDOTABroadcastTimelineEvent_default_instance_;
class CMsgDOTAFantasyPlayerMatchStats;
struct CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerMatchStats_default_instance_;
class CMsgDOTAFantasyPlayerStats;
struct CMsgDOTAFantasyPlayerStatsDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerStats_default_instance_;
class CMsgDOTAHasItemQuery;
struct CMsgDOTAHasItemQueryDefaultTypeInternal;
extern CMsgDOTAHasItemQueryDefaultTypeInternal _CMsgDOTAHasItemQuery_default_instance_;
class CMsgDOTAHasItemResponse;
struct CMsgDOTAHasItemResponseDefaultTypeInternal;
extern CMsgDOTAHasItemResponseDefaultTypeInternal _CMsgDOTAHasItemResponse_default_instance_;
class CMsgDOTAMatch;
struct CMsgDOTAMatchDefaultTypeInternal;
extern CMsgDOTAMatchDefaultTypeInternal _CMsgDOTAMatch_default_instance_;
class CMsgDOTAMatchMinimal;
struct CMsgDOTAMatchMinimalDefaultTypeInternal;
extern CMsgDOTAMatchMinimalDefaultTypeInternal _CMsgDOTAMatchMinimal_default_instance_;
class CMsgDOTAMatchMinimal_Player;
struct CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal;
extern CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal _CMsgDOTAMatchMinimal_Player_default_instance_;
class CMsgDOTAMatchMinimal_Tourney;
struct CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal;
extern CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal _CMsgDOTAMatchMinimal_Tourney_default_instance_;
class CMsgDOTAMatch_BroadcasterChannel;
struct CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal;
extern CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal _CMsgDOTAMatch_BroadcasterChannel_default_instance_;
class CMsgDOTAMatch_BroadcasterInfo;
struct CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal;
extern CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal _CMsgDOTAMatch_BroadcasterInfo_default_instance_;
class CMsgDOTAMatch_Coach;
struct CMsgDOTAMatch_CoachDefaultTypeInternal;
extern CMsgDOTAMatch_CoachDefaultTypeInternal _CMsgDOTAMatch_Coach_default_instance_;
class CMsgDOTAMatch_CustomGameData;
struct CMsgDOTAMatch_CustomGameDataDefaultTypeInternal;
extern CMsgDOTAMatch_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_CustomGameData_default_instance_;
class CMsgDOTAMatch_Player;
struct CMsgDOTAMatch_PlayerDefaultTypeInternal;
extern CMsgDOTAMatch_PlayerDefaultTypeInternal _CMsgDOTAMatch_Player_default_instance_;
class CMsgDOTAMatch_Player_CustomGameData;
struct CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal;
extern CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_Player_CustomGameData_default_instance_;
class CMsgDOTAMatch_Player_HeroDamageReceived;
struct CMsgDOTAMatch_Player_HeroDamageReceivedDefaultTypeInternal;
extern CMsgDOTAMatch_Player_HeroDamageReceivedDefaultTypeInternal _CMsgDOTAMatch_Player_HeroDamageReceived_default_instance_;
class CMsgDOTAProfileCard;
struct CMsgDOTAProfileCardDefaultTypeInternal;
extern CMsgDOTAProfileCardDefaultTypeInternal _CMsgDOTAProfileCard_default_instance_;
class CMsgDOTAProfileCard_Slot;
struct CMsgDOTAProfileCard_SlotDefaultTypeInternal;
extern CMsgDOTAProfileCard_SlotDefaultTypeInternal _CMsgDOTAProfileCard_Slot_default_instance_;
class CMsgDOTAProfileCard_Slot_Emoticon;
struct CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
class CMsgDOTAProfileCard_Slot_Hero;
struct CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
class CMsgDOTAProfileCard_Slot_Item;
struct CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Item_default_instance_;
class CMsgDOTAProfileCard_Slot_Stat;
struct CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
class CMsgDOTAProfileCard_Slot_Team;
struct CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Team_default_instance_;
class CMsgDOTAProfileCard_Slot_Trophy;
struct CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
class CMsgDOTARealtimeGameStats;
struct CMsgDOTARealtimeGameStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_default_instance_;
class CMsgDOTARealtimeGameStatsTerse;
struct CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
struct CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_GraphData;
struct CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_MatchDetails;
struct CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PickBanDetails;
struct CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
struct CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_TeamDetails;
struct CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityDetails;
struct CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityList;
struct CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityList_default_instance_;
class CMsgDOTARealtimeGameStats_BroadcasterDetails;
struct CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_;
class CMsgDOTARealtimeGameStats_BuildingDetails;
struct CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData;
struct CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_LocationStats;
struct CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
struct CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_HeroToHeroStats;
struct CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_;
class CMsgDOTARealtimeGameStats_ItemDetails;
struct CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_;
class CMsgDOTARealtimeGameStats_KillDetails;
struct CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_KillDetails_default_instance_;
class CMsgDOTARealtimeGameStats_MatchDetails;
struct CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PickBanDetails;
struct CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PlayerDetails;
struct CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStats_TeamDetails;
struct CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_;
class CMsgDOTASDOHeroStatsHistory;
struct CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal;
extern CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal _CMsgDOTASDOHeroStatsHistory_default_instance_;
class CMsgDOTASeasonPredictions;
struct CMsgDOTASeasonPredictionsDefaultTypeInternal;
extern CMsgDOTASeasonPredictionsDefaultTypeInternal _CMsgDOTASeasonPredictions_default_instance_;
class CMsgDOTASeasonPredictions_Prediction;
struct CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal _CMsgDOTASeasonPredictions_Prediction_default_instance_;
class CMsgDOTASeasonPredictions_Prediction_Answers;
struct CMsgDOTASeasonPredictions_Prediction_AnswersDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_Prediction_AnswersDefaultTypeInternal _CMsgDOTASeasonPredictions_Prediction_Answers_default_instance_;
class CMsgDOTATriviaQuestion;
struct CMsgDOTATriviaQuestionDefaultTypeInternal;
extern CMsgDOTATriviaQuestionDefaultTypeInternal _CMsgDOTATriviaQuestion_default_instance_;
class CMsgDOTATriviaQuestionAnswersSummary;
struct CMsgDOTATriviaQuestionAnswersSummaryDefaultTypeInternal;
extern CMsgDOTATriviaQuestionAnswersSummaryDefaultTypeInternal _CMsgDOTATriviaQuestionAnswersSummary_default_instance_;
class CMsgGCGetPlayerCardItemInfo;
struct CMsgGCGetPlayerCardItemInfoDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfo_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse;
struct CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo;
struct CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_;
class CMsgGCRerollPlayerChallengeResponse;
struct CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal;
extern CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal _CMsgGCRerollPlayerChallengeResponse_default_instance_;
class CMsgGCToClientMatchGroupsVersion;
struct CMsgGCToClientMatchGroupsVersionDefaultTypeInternal;
extern CMsgGCToClientMatchGroupsVersionDefaultTypeInternal _CMsgGCToClientMatchGroupsVersion_default_instance_;
class CMsgGCTopCustomGamesList;
struct CMsgGCTopCustomGamesListDefaultTypeInternal;
extern CMsgGCTopCustomGamesListDefaultTypeInternal _CMsgGCTopCustomGamesList_default_instance_;
class CMsgGCtoGCAssociatedExploiterAccountInfo;
struct CMsgGCtoGCAssociatedExploiterAccountInfoDefaultTypeInternal;
extern CMsgGCtoGCAssociatedExploiterAccountInfoDefaultTypeInternal _CMsgGCtoGCAssociatedExploiterAccountInfo_default_instance_;
class CMsgGCtoGCAssociatedExploiterAccountInfoResponse;
struct CMsgGCtoGCAssociatedExploiterAccountInfoResponseDefaultTypeInternal;
extern CMsgGCtoGCAssociatedExploiterAccountInfoResponseDefaultTypeInternal _CMsgGCtoGCAssociatedExploiterAccountInfoResponse_default_instance_;
class CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account;
struct CMsgGCtoGCAssociatedExploiterAccountInfoResponse_AccountDefaultTypeInternal;
extern CMsgGCtoGCAssociatedExploiterAccountInfoResponse_AccountDefaultTypeInternal _CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account_default_instance_;
class CMsgGameDataAbilities;
struct CMsgGameDataAbilitiesDefaultTypeInternal;
extern CMsgGameDataAbilitiesDefaultTypeInternal _CMsgGameDataAbilities_default_instance_;
class CMsgGameDataAbilityOrItem;
struct CMsgGameDataAbilityOrItemDefaultTypeInternal;
extern CMsgGameDataAbilityOrItemDefaultTypeInternal _CMsgGameDataAbilityOrItem_default_instance_;
class CMsgGameDataHero;
struct CMsgGameDataHeroDefaultTypeInternal;
extern CMsgGameDataHeroDefaultTypeInternal _CMsgGameDataHero_default_instance_;
class CMsgGameDataHeroList;
struct CMsgGameDataHeroListDefaultTypeInternal;
extern CMsgGameDataHeroListDefaultTypeInternal _CMsgGameDataHeroList_default_instance_;
class CMsgGameDataHeroList_HeroInfo;
struct CMsgGameDataHeroList_HeroInfoDefaultTypeInternal;
extern CMsgGameDataHeroList_HeroInfoDefaultTypeInternal _CMsgGameDataHeroList_HeroInfo_default_instance_;
class CMsgGameDataHeroes;
struct CMsgGameDataHeroesDefaultTypeInternal;
extern CMsgGameDataHeroesDefaultTypeInternal _CMsgGameDataHeroes_default_instance_;
class CMsgGameDataItemAbilityList;
struct CMsgGameDataItemAbilityListDefaultTypeInternal;
extern CMsgGameDataItemAbilityListDefaultTypeInternal _CMsgGameDataItemAbilityList_default_instance_;
class CMsgGameDataItemAbilityList_ItemAbilityInfo;
struct CMsgGameDataItemAbilityList_ItemAbilityInfoDefaultTypeInternal;
extern CMsgGameDataItemAbilityList_ItemAbilityInfoDefaultTypeInternal _CMsgGameDataItemAbilityList_ItemAbilityInfo_default_instance_;
class CMsgGameDataItems;
struct CMsgGameDataItemsDefaultTypeInternal;
extern CMsgGameDataItemsDefaultTypeInternal _CMsgGameDataItems_default_instance_;
class CMsgGameDataSpecialValueBonus;
struct CMsgGameDataSpecialValueBonusDefaultTypeInternal;
extern CMsgGameDataSpecialValueBonusDefaultTypeInternal _CMsgGameDataSpecialValueBonus_default_instance_;
class CMsgGameDataSpecialValues;
struct CMsgGameDataSpecialValuesDefaultTypeInternal;
extern CMsgGameDataSpecialValuesDefaultTypeInternal _CMsgGameDataSpecialValues_default_instance_;
class CMsgHeroRoleAllRanksStats;
struct CMsgHeroRoleAllRanksStatsDefaultTypeInternal;
extern CMsgHeroRoleAllRanksStatsDefaultTypeInternal _CMsgHeroRoleAllRanksStats_default_instance_;
class CMsgHeroRoleHeroStats;
struct CMsgHeroRoleHeroStatsDefaultTypeInternal;
extern CMsgHeroRoleHeroStatsDefaultTypeInternal _CMsgHeroRoleHeroStats_default_instance_;
class CMsgHeroRoleRankStats;
struct CMsgHeroRoleRankStatsDefaultTypeInternal;
extern CMsgHeroRoleRankStatsDefaultTypeInternal _CMsgHeroRoleRankStats_default_instance_;
class CMsgHeroRoleStats;
struct CMsgHeroRoleStatsDefaultTypeInternal;
extern CMsgHeroRoleStatsDefaultTypeInternal _CMsgHeroRoleStats_default_instance_;
class CMsgInGamePrediction;
struct CMsgInGamePredictionDefaultTypeInternal;
extern CMsgInGamePredictionDefaultTypeInternal _CMsgInGamePrediction_default_instance_;
class CMsgInGamePrediction_QueryKeyValues;
struct CMsgInGamePrediction_QueryKeyValuesDefaultTypeInternal;
extern CMsgInGamePrediction_QueryKeyValuesDefaultTypeInternal _CMsgInGamePrediction_QueryKeyValues_default_instance_;
class CMsgLeagueAdminList;
struct CMsgLeagueAdminListDefaultTypeInternal;
extern CMsgLeagueAdminListDefaultTypeInternal _CMsgLeagueAdminList_default_instance_;
class CMsgLeagueWatchedGames;
struct CMsgLeagueWatchedGamesDefaultTypeInternal;
extern CMsgLeagueWatchedGamesDefaultTypeInternal _CMsgLeagueWatchedGames_default_instance_;
class CMsgLeagueWatchedGames_League;
struct CMsgLeagueWatchedGames_LeagueDefaultTypeInternal;
extern CMsgLeagueWatchedGames_LeagueDefaultTypeInternal _CMsgLeagueWatchedGames_League_default_instance_;
class CMsgLeagueWatchedGames_Series;
struct CMsgLeagueWatchedGames_SeriesDefaultTypeInternal;
extern CMsgLeagueWatchedGames_SeriesDefaultTypeInternal _CMsgLeagueWatchedGames_Series_default_instance_;
class CMsgLobbyAbilityDraftData;
struct CMsgLobbyAbilityDraftDataDefaultTypeInternal;
extern CMsgLobbyAbilityDraftDataDefaultTypeInternal _CMsgLobbyAbilityDraftData_default_instance_;
class CMsgLobbyBattleCupVictoryList;
struct CMsgLobbyBattleCupVictoryListDefaultTypeInternal;
extern CMsgLobbyBattleCupVictoryListDefaultTypeInternal _CMsgLobbyBattleCupVictoryList_default_instance_;
class CMsgLobbyFeaturedGamemodeProgress;
struct CMsgLobbyFeaturedGamemodeProgressDefaultTypeInternal;
extern CMsgLobbyFeaturedGamemodeProgressDefaultTypeInternal _CMsgLobbyFeaturedGamemodeProgress_default_instance_;
class CMsgLobbyFeaturedGamemodeProgress_AccountProgress;
struct CMsgLobbyFeaturedGamemodeProgress_AccountProgressDefaultTypeInternal;
extern CMsgLobbyFeaturedGamemodeProgress_AccountProgressDefaultTypeInternal _CMsgLobbyFeaturedGamemodeProgress_AccountProgress_default_instance_;
class CMsgMatchConsumableUsage;
struct CMsgMatchConsumableUsageDefaultTypeInternal;
extern CMsgMatchConsumableUsageDefaultTypeInternal _CMsgMatchConsumableUsage_default_instance_;
class CMsgMatchConsumableUsage_PlayerUsage;
struct CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal;
extern CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal _CMsgMatchConsumableUsage_PlayerUsage_default_instance_;
class CMsgMatchEventActionGrants;
struct CMsgMatchEventActionGrantsDefaultTypeInternal;
extern CMsgMatchEventActionGrantsDefaultTypeInternal _CMsgMatchEventActionGrants_default_instance_;
class CMsgMatchEventActionGrants_PlayerGrants;
struct CMsgMatchEventActionGrants_PlayerGrantsDefaultTypeInternal;
extern CMsgMatchEventActionGrants_PlayerGrantsDefaultTypeInternal _CMsgMatchEventActionGrants_PlayerGrants_default_instance_;
class CMsgMatchTips;
struct CMsgMatchTipsDefaultTypeInternal;
extern CMsgMatchTipsDefaultTypeInternal _CMsgMatchTips_default_instance_;
class CMsgMatchTips_SingleTip;
struct CMsgMatchTips_SingleTipDefaultTypeInternal;
extern CMsgMatchTips_SingleTipDefaultTypeInternal _CMsgMatchTips_SingleTip_default_instance_;
class CMsgPlayerCard;
struct CMsgPlayerCardDefaultTypeInternal;
extern CMsgPlayerCardDefaultTypeInternal _CMsgPlayerCard_default_instance_;
class CMsgPlayerCard_StatModifier;
struct CMsgPlayerCard_StatModifierDefaultTypeInternal;
extern CMsgPlayerCard_StatModifierDefaultTypeInternal _CMsgPlayerCard_StatModifier_default_instance_;
class CMsgPlayerHeroRecentAccomplishments;
struct CMsgPlayerHeroRecentAccomplishmentsDefaultTypeInternal;
extern CMsgPlayerHeroRecentAccomplishmentsDefaultTypeInternal _CMsgPlayerHeroRecentAccomplishments_default_instance_;
class CMsgPlayerMatchRecord;
struct CMsgPlayerMatchRecordDefaultTypeInternal;
extern CMsgPlayerMatchRecordDefaultTypeInternal _CMsgPlayerMatchRecord_default_instance_;
class CMsgPlayerRecentAccomplishments;
struct CMsgPlayerRecentAccomplishmentsDefaultTypeInternal;
extern CMsgPlayerRecentAccomplishmentsDefaultTypeInternal _CMsgPlayerRecentAccomplishments_default_instance_;
class CMsgPlayerRecentCommends;
struct CMsgPlayerRecentCommendsDefaultTypeInternal;
extern CMsgPlayerRecentCommendsDefaultTypeInternal _CMsgPlayerRecentCommends_default_instance_;
class CMsgPlayerRecentMatchInfo;
struct CMsgPlayerRecentMatchInfoDefaultTypeInternal;
extern CMsgPlayerRecentMatchInfoDefaultTypeInternal _CMsgPlayerRecentMatchInfo_default_instance_;
class CMsgPlayerRecentMatchOutcomes;
struct CMsgPlayerRecentMatchOutcomesDefaultTypeInternal;
extern CMsgPlayerRecentMatchOutcomesDefaultTypeInternal _CMsgPlayerRecentMatchOutcomes_default_instance_;
class CMsgPlayerTitleData;
struct CMsgPlayerTitleDataDefaultTypeInternal;
extern CMsgPlayerTitleDataDefaultTypeInternal _CMsgPlayerTitleData_default_instance_;
class CMsgPredictionChoice;
struct CMsgPredictionChoiceDefaultTypeInternal;
extern CMsgPredictionChoiceDefaultTypeInternal _CMsgPredictionChoice_default_instance_;
class CMsgPullTabsData;
struct CMsgPullTabsDataDefaultTypeInternal;
extern CMsgPullTabsDataDefaultTypeInternal _CMsgPullTabsData_default_instance_;
class CMsgPullTabsData_Jackpot;
struct CMsgPullTabsData_JackpotDefaultTypeInternal;
extern CMsgPullTabsData_JackpotDefaultTypeInternal _CMsgPullTabsData_Jackpot_default_instance_;
class CMsgPullTabsData_Slot;
struct CMsgPullTabsData_SlotDefaultTypeInternal;
extern CMsgPullTabsData_SlotDefaultTypeInternal _CMsgPullTabsData_Slot_default_instance_;
class CMsgRecentAccomplishments;
struct CMsgRecentAccomplishmentsDefaultTypeInternal;
extern CMsgRecentAccomplishmentsDefaultTypeInternal _CMsgRecentAccomplishments_default_instance_;
class CMsgRecentMatchInfo;
struct CMsgRecentMatchInfoDefaultTypeInternal;
extern CMsgRecentMatchInfoDefaultTypeInternal _CMsgRecentMatchInfo_default_instance_;
class CMsgServerToGCRequestPlayerRecentAccomplishments;
struct CMsgServerToGCRequestPlayerRecentAccomplishmentsDefaultTypeInternal;
extern CMsgServerToGCRequestPlayerRecentAccomplishmentsDefaultTypeInternal _CMsgServerToGCRequestPlayerRecentAccomplishments_default_instance_;
class CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse;
struct CMsgServerToGCRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal;
extern CMsgServerToGCRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal _CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_default_instance_;
class CMsgStickerHero;
struct CMsgStickerHeroDefaultTypeInternal;
extern CMsgStickerHeroDefaultTypeInternal _CMsgStickerHero_default_instance_;
class CMsgStickerHeroes;
struct CMsgStickerHeroesDefaultTypeInternal;
extern CMsgStickerHeroesDefaultTypeInternal _CMsgStickerHeroes_default_instance_;
class CMsgStickerbook;
struct CMsgStickerbookDefaultTypeInternal;
extern CMsgStickerbookDefaultTypeInternal _CMsgStickerbook_default_instance_;
class CMsgStickerbookPage;
struct CMsgStickerbookPageDefaultTypeInternal;
extern CMsgStickerbookPageDefaultTypeInternal _CMsgStickerbookPage_default_instance_;
class CMsgStickerbookSticker;
struct CMsgStickerbookStickerDefaultTypeInternal;
extern CMsgStickerbookStickerDefaultTypeInternal _CMsgStickerbookSticker_default_instance_;
class CMsgStickerbookTeamPageOrderSequence;
struct CMsgStickerbookTeamPageOrderSequenceDefaultTypeInternal;
extern CMsgStickerbookTeamPageOrderSequenceDefaultTypeInternal _CMsgStickerbookTeamPageOrderSequence_default_instance_;
class CMsgSuccessfulHero;
struct CMsgSuccessfulHeroDefaultTypeInternal;
extern CMsgSuccessfulHeroDefaultTypeInternal _CMsgSuccessfulHero_default_instance_;
class CMsgUnderDraftData;
struct CMsgUnderDraftDataDefaultTypeInternal;
extern CMsgUnderDraftDataDefaultTypeInternal _CMsgUnderDraftData_default_instance_;
class CMsgUnderDraftData_BenchSlot;
struct CMsgUnderDraftData_BenchSlotDefaultTypeInternal;
extern CMsgUnderDraftData_BenchSlotDefaultTypeInternal _CMsgUnderDraftData_BenchSlot_default_instance_;
class CMsgUnderDraftData_ShopSlot;
struct CMsgUnderDraftData_ShopSlotDefaultTypeInternal;
extern CMsgUnderDraftData_ShopSlotDefaultTypeInternal _CMsgUnderDraftData_ShopSlot_default_instance_;
class CPartySearchClientParty;
struct CPartySearchClientPartyDefaultTypeInternal;
extern CPartySearchClientPartyDefaultTypeInternal _CPartySearchClientParty_default_instance_;
class CProtoItemHeroStatue;
struct CProtoItemHeroStatueDefaultTypeInternal;
extern CProtoItemHeroStatueDefaultTypeInternal _CProtoItemHeroStatue_default_instance_;
class CSODOTAGameAccountClient;
struct CSODOTAGameAccountClientDefaultTypeInternal;
extern CSODOTAGameAccountClientDefaultTypeInternal _CSODOTAGameAccountClient_default_instance_;
class CSODOTAGameAccountClient_RoleHandicap;
struct CSODOTAGameAccountClient_RoleHandicapDefaultTypeInternal;
extern CSODOTAGameAccountClient_RoleHandicapDefaultTypeInternal _CSODOTAGameAccountClient_RoleHandicap_default_instance_;
class CSODOTAGameAccountPlus;
struct CSODOTAGameAccountPlusDefaultTypeInternal;
extern CSODOTAGameAccountPlusDefaultTypeInternal _CSODOTAGameAccountPlus_default_instance_;
class CSODOTAMapLocationState;
struct CSODOTAMapLocationStateDefaultTypeInternal;
extern CSODOTAMapLocationStateDefaultTypeInternal _CSODOTAMapLocationState_default_instance_;
class CSODOTAPlayerChallenge;
struct CSODOTAPlayerChallengeDefaultTypeInternal;
extern CSODOTAPlayerChallengeDefaultTypeInternal _CSODOTAPlayerChallenge_default_instance_;
class CSOEconItemDropRateBonus;
struct CSOEconItemDropRateBonusDefaultTypeInternal;
extern CSOEconItemDropRateBonusDefaultTypeInternal _CSOEconItemDropRateBonus_default_instance_;
class CSOEconItemTournamentPassport;
struct CSOEconItemTournamentPassportDefaultTypeInternal;
extern CSOEconItemTournamentPassportDefaultTypeInternal _CSOEconItemTournamentPassport_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMatchAdditionalUnitInventory* Arena::CreateMaybeMessage<::CMatchAdditionalUnitInventory>(Arena*);
template<> ::CMatchClip* Arena::CreateMaybeMessage<::CMatchClip>(Arena*);
template<> ::CMatchHeroSelectEvent* Arena::CreateMaybeMessage<::CMatchHeroSelectEvent>(Arena*);
template<> ::CMatchPlayerAbilityUpgrade* Arena::CreateMaybeMessage<::CMatchPlayerAbilityUpgrade>(Arena*);
template<> ::CMatchPlayerPermanentBuff* Arena::CreateMaybeMessage<::CMatchPlayerPermanentBuff>(Arena*);
template<> ::CMatchPlayerTimedStats* Arena::CreateMaybeMessage<::CMatchPlayerTimedStats>(Arena*);
template<> ::CMatchTeamTimedStats* Arena::CreateMaybeMessage<::CMatchTeamTimedStats>(Arena*);
template<> ::CMsgArcanaVoteMatchVotes* Arena::CreateMaybeMessage<::CMsgArcanaVoteMatchVotes>(Arena*);
template<> ::CMsgAvailablePredictions* Arena::CreateMaybeMessage<::CMsgAvailablePredictions>(Arena*);
template<> ::CMsgAvailablePredictions_MatchPrediction* Arena::CreateMaybeMessage<::CMsgAvailablePredictions_MatchPrediction>(Arena*);
template<> ::CMsgBattleCupVictory* Arena::CreateMaybeMessage<::CMsgBattleCupVictory>(Arena*);
template<> ::CMsgClientToGCRerollPlayerChallenge* Arena::CreateMaybeMessage<::CMsgClientToGCRerollPlayerChallenge>(Arena*);
template<> ::CMsgConsumableUsage* Arena::CreateMaybeMessage<::CMsgConsumableUsage>(Arena*);
template<> ::CMsgCustomGameWhitelist* Arena::CreateMaybeMessage<::CMsgCustomGameWhitelist>(Arena*);
template<> ::CMsgCustomGameWhitelistForEdit* Arena::CreateMaybeMessage<::CMsgCustomGameWhitelistForEdit>(Arena*);
template<> ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* Arena::CreateMaybeMessage<::CMsgCustomGameWhitelistForEdit_WhitelistEntry>(Arena*);
template<> ::CMsgDOTABotDebugInfo* Arena::CreateMaybeMessage<::CMsgDOTABotDebugInfo>(Arena*);
template<> ::CMsgDOTABotDebugInfo_Bot* Arena::CreateMaybeMessage<::CMsgDOTABotDebugInfo_Bot>(Arena*);
template<> ::CMsgDOTABotDebugInfo_Bot_Action* Arena::CreateMaybeMessage<::CMsgDOTABotDebugInfo_Bot_Action>(Arena*);
template<> ::CMsgDOTABotDebugInfo_Bot_Mode* Arena::CreateMaybeMessage<::CMsgDOTABotDebugInfo_Bot_Mode>(Arena*);
template<> ::CMsgDOTABroadcastNotification* Arena::CreateMaybeMessage<::CMsgDOTABroadcastNotification>(Arena*);
template<> ::CMsgDOTABroadcastTimelineEvent* Arena::CreateMaybeMessage<::CMsgDOTABroadcastTimelineEvent>(Arena*);
template<> ::CMsgDOTAFantasyPlayerMatchStats* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerMatchStats>(Arena*);
template<> ::CMsgDOTAFantasyPlayerStats* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerStats>(Arena*);
template<> ::CMsgDOTAHasItemQuery* Arena::CreateMaybeMessage<::CMsgDOTAHasItemQuery>(Arena*);
template<> ::CMsgDOTAHasItemResponse* Arena::CreateMaybeMessage<::CMsgDOTAHasItemResponse>(Arena*);
template<> ::CMsgDOTAMatch* Arena::CreateMaybeMessage<::CMsgDOTAMatch>(Arena*);
template<> ::CMsgDOTAMatchMinimal* Arena::CreateMaybeMessage<::CMsgDOTAMatchMinimal>(Arena*);
template<> ::CMsgDOTAMatchMinimal_Player* Arena::CreateMaybeMessage<::CMsgDOTAMatchMinimal_Player>(Arena*);
template<> ::CMsgDOTAMatchMinimal_Tourney* Arena::CreateMaybeMessage<::CMsgDOTAMatchMinimal_Tourney>(Arena*);
template<> ::CMsgDOTAMatch_BroadcasterChannel* Arena::CreateMaybeMessage<::CMsgDOTAMatch_BroadcasterChannel>(Arena*);
template<> ::CMsgDOTAMatch_BroadcasterInfo* Arena::CreateMaybeMessage<::CMsgDOTAMatch_BroadcasterInfo>(Arena*);
template<> ::CMsgDOTAMatch_Coach* Arena::CreateMaybeMessage<::CMsgDOTAMatch_Coach>(Arena*);
template<> ::CMsgDOTAMatch_CustomGameData* Arena::CreateMaybeMessage<::CMsgDOTAMatch_CustomGameData>(Arena*);
template<> ::CMsgDOTAMatch_Player* Arena::CreateMaybeMessage<::CMsgDOTAMatch_Player>(Arena*);
template<> ::CMsgDOTAMatch_Player_CustomGameData* Arena::CreateMaybeMessage<::CMsgDOTAMatch_Player_CustomGameData>(Arena*);
template<> ::CMsgDOTAMatch_Player_HeroDamageReceived* Arena::CreateMaybeMessage<::CMsgDOTAMatch_Player_HeroDamageReceived>(Arena*);
template<> ::CMsgDOTAProfileCard* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Emoticon* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Emoticon>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Hero* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Hero>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Item* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Item>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Stat* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Stat>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Team* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Team>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Trophy* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Trophy>(Arena*);
template<> ::CMsgDOTARealtimeGameStats* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats>(Arena*);
template<> ::CMsgDOTARealtimeGameStatsTerse* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse>(Arena*);
template<> ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStatsTerse_GraphData* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_GraphData>(Arena*);
template<> ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_MatchDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_PickBanDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_TeamDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_AbilityDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_AbilityDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_AbilityList* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_AbilityList>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_BroadcasterDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_BroadcasterDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_BuildingDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_BuildingDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_GraphData* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_GraphData>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_GraphData_LocationStats>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_HeroToHeroStats* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_HeroToHeroStats>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_ItemDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_ItemDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_KillDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_KillDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_MatchDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_MatchDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_PickBanDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_PickBanDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_PlayerDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_PlayerDetails>(Arena*);
template<> ::CMsgDOTARealtimeGameStats_TeamDetails* Arena::CreateMaybeMessage<::CMsgDOTARealtimeGameStats_TeamDetails>(Arena*);
template<> ::CMsgDOTASDOHeroStatsHistory* Arena::CreateMaybeMessage<::CMsgDOTASDOHeroStatsHistory>(Arena*);
template<> ::CMsgDOTASeasonPredictions* Arena::CreateMaybeMessage<::CMsgDOTASeasonPredictions>(Arena*);
template<> ::CMsgDOTASeasonPredictions_Prediction* Arena::CreateMaybeMessage<::CMsgDOTASeasonPredictions_Prediction>(Arena*);
template<> ::CMsgDOTASeasonPredictions_Prediction_Answers* Arena::CreateMaybeMessage<::CMsgDOTASeasonPredictions_Prediction_Answers>(Arena*);
template<> ::CMsgDOTATriviaQuestion* Arena::CreateMaybeMessage<::CMsgDOTATriviaQuestion>(Arena*);
template<> ::CMsgDOTATriviaQuestionAnswersSummary* Arena::CreateMaybeMessage<::CMsgDOTATriviaQuestionAnswersSummary>(Arena*);
template<> ::CMsgGCGetPlayerCardItemInfo* Arena::CreateMaybeMessage<::CMsgGCGetPlayerCardItemInfo>(Arena*);
template<> ::CMsgGCGetPlayerCardItemInfoResponse* Arena::CreateMaybeMessage<::CMsgGCGetPlayerCardItemInfoResponse>(Arena*);
template<> ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* Arena::CreateMaybeMessage<::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(Arena*);
template<> ::CMsgGCRerollPlayerChallengeResponse* Arena::CreateMaybeMessage<::CMsgGCRerollPlayerChallengeResponse>(Arena*);
template<> ::CMsgGCToClientMatchGroupsVersion* Arena::CreateMaybeMessage<::CMsgGCToClientMatchGroupsVersion>(Arena*);
template<> ::CMsgGCTopCustomGamesList* Arena::CreateMaybeMessage<::CMsgGCTopCustomGamesList>(Arena*);
template<> ::CMsgGCtoGCAssociatedExploiterAccountInfo* Arena::CreateMaybeMessage<::CMsgGCtoGCAssociatedExploiterAccountInfo>(Arena*);
template<> ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse* Arena::CreateMaybeMessage<::CMsgGCtoGCAssociatedExploiterAccountInfoResponse>(Arena*);
template<> ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* Arena::CreateMaybeMessage<::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account>(Arena*);
template<> ::CMsgGameDataAbilities* Arena::CreateMaybeMessage<::CMsgGameDataAbilities>(Arena*);
template<> ::CMsgGameDataAbilityOrItem* Arena::CreateMaybeMessage<::CMsgGameDataAbilityOrItem>(Arena*);
template<> ::CMsgGameDataHero* Arena::CreateMaybeMessage<::CMsgGameDataHero>(Arena*);
template<> ::CMsgGameDataHeroList* Arena::CreateMaybeMessage<::CMsgGameDataHeroList>(Arena*);
template<> ::CMsgGameDataHeroList_HeroInfo* Arena::CreateMaybeMessage<::CMsgGameDataHeroList_HeroInfo>(Arena*);
template<> ::CMsgGameDataHeroes* Arena::CreateMaybeMessage<::CMsgGameDataHeroes>(Arena*);
template<> ::CMsgGameDataItemAbilityList* Arena::CreateMaybeMessage<::CMsgGameDataItemAbilityList>(Arena*);
template<> ::CMsgGameDataItemAbilityList_ItemAbilityInfo* Arena::CreateMaybeMessage<::CMsgGameDataItemAbilityList_ItemAbilityInfo>(Arena*);
template<> ::CMsgGameDataItems* Arena::CreateMaybeMessage<::CMsgGameDataItems>(Arena*);
template<> ::CMsgGameDataSpecialValueBonus* Arena::CreateMaybeMessage<::CMsgGameDataSpecialValueBonus>(Arena*);
template<> ::CMsgGameDataSpecialValues* Arena::CreateMaybeMessage<::CMsgGameDataSpecialValues>(Arena*);
template<> ::CMsgHeroRoleAllRanksStats* Arena::CreateMaybeMessage<::CMsgHeroRoleAllRanksStats>(Arena*);
template<> ::CMsgHeroRoleHeroStats* Arena::CreateMaybeMessage<::CMsgHeroRoleHeroStats>(Arena*);
template<> ::CMsgHeroRoleRankStats* Arena::CreateMaybeMessage<::CMsgHeroRoleRankStats>(Arena*);
template<> ::CMsgHeroRoleStats* Arena::CreateMaybeMessage<::CMsgHeroRoleStats>(Arena*);
template<> ::CMsgInGamePrediction* Arena::CreateMaybeMessage<::CMsgInGamePrediction>(Arena*);
template<> ::CMsgInGamePrediction_QueryKeyValues* Arena::CreateMaybeMessage<::CMsgInGamePrediction_QueryKeyValues>(Arena*);
template<> ::CMsgLeagueAdminList* Arena::CreateMaybeMessage<::CMsgLeagueAdminList>(Arena*);
template<> ::CMsgLeagueWatchedGames* Arena::CreateMaybeMessage<::CMsgLeagueWatchedGames>(Arena*);
template<> ::CMsgLeagueWatchedGames_League* Arena::CreateMaybeMessage<::CMsgLeagueWatchedGames_League>(Arena*);
template<> ::CMsgLeagueWatchedGames_Series* Arena::CreateMaybeMessage<::CMsgLeagueWatchedGames_Series>(Arena*);
template<> ::CMsgLobbyAbilityDraftData* Arena::CreateMaybeMessage<::CMsgLobbyAbilityDraftData>(Arena*);
template<> ::CMsgLobbyBattleCupVictoryList* Arena::CreateMaybeMessage<::CMsgLobbyBattleCupVictoryList>(Arena*);
template<> ::CMsgLobbyFeaturedGamemodeProgress* Arena::CreateMaybeMessage<::CMsgLobbyFeaturedGamemodeProgress>(Arena*);
template<> ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* Arena::CreateMaybeMessage<::CMsgLobbyFeaturedGamemodeProgress_AccountProgress>(Arena*);
template<> ::CMsgMatchConsumableUsage* Arena::CreateMaybeMessage<::CMsgMatchConsumableUsage>(Arena*);
template<> ::CMsgMatchConsumableUsage_PlayerUsage* Arena::CreateMaybeMessage<::CMsgMatchConsumableUsage_PlayerUsage>(Arena*);
template<> ::CMsgMatchEventActionGrants* Arena::CreateMaybeMessage<::CMsgMatchEventActionGrants>(Arena*);
template<> ::CMsgMatchEventActionGrants_PlayerGrants* Arena::CreateMaybeMessage<::CMsgMatchEventActionGrants_PlayerGrants>(Arena*);
template<> ::CMsgMatchTips* Arena::CreateMaybeMessage<::CMsgMatchTips>(Arena*);
template<> ::CMsgMatchTips_SingleTip* Arena::CreateMaybeMessage<::CMsgMatchTips_SingleTip>(Arena*);
template<> ::CMsgPlayerCard* Arena::CreateMaybeMessage<::CMsgPlayerCard>(Arena*);
template<> ::CMsgPlayerCard_StatModifier* Arena::CreateMaybeMessage<::CMsgPlayerCard_StatModifier>(Arena*);
template<> ::CMsgPlayerHeroRecentAccomplishments* Arena::CreateMaybeMessage<::CMsgPlayerHeroRecentAccomplishments>(Arena*);
template<> ::CMsgPlayerMatchRecord* Arena::CreateMaybeMessage<::CMsgPlayerMatchRecord>(Arena*);
template<> ::CMsgPlayerRecentAccomplishments* Arena::CreateMaybeMessage<::CMsgPlayerRecentAccomplishments>(Arena*);
template<> ::CMsgPlayerRecentCommends* Arena::CreateMaybeMessage<::CMsgPlayerRecentCommends>(Arena*);
template<> ::CMsgPlayerRecentMatchInfo* Arena::CreateMaybeMessage<::CMsgPlayerRecentMatchInfo>(Arena*);
template<> ::CMsgPlayerRecentMatchOutcomes* Arena::CreateMaybeMessage<::CMsgPlayerRecentMatchOutcomes>(Arena*);
template<> ::CMsgPlayerTitleData* Arena::CreateMaybeMessage<::CMsgPlayerTitleData>(Arena*);
template<> ::CMsgPredictionChoice* Arena::CreateMaybeMessage<::CMsgPredictionChoice>(Arena*);
template<> ::CMsgPullTabsData* Arena::CreateMaybeMessage<::CMsgPullTabsData>(Arena*);
template<> ::CMsgPullTabsData_Jackpot* Arena::CreateMaybeMessage<::CMsgPullTabsData_Jackpot>(Arena*);
template<> ::CMsgPullTabsData_Slot* Arena::CreateMaybeMessage<::CMsgPullTabsData_Slot>(Arena*);
template<> ::CMsgRecentAccomplishments* Arena::CreateMaybeMessage<::CMsgRecentAccomplishments>(Arena*);
template<> ::CMsgRecentMatchInfo* Arena::CreateMaybeMessage<::CMsgRecentMatchInfo>(Arena*);
template<> ::CMsgServerToGCRequestPlayerRecentAccomplishments* Arena::CreateMaybeMessage<::CMsgServerToGCRequestPlayerRecentAccomplishments>(Arena*);
template<> ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* Arena::CreateMaybeMessage<::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse>(Arena*);
template<> ::CMsgStickerHero* Arena::CreateMaybeMessage<::CMsgStickerHero>(Arena*);
template<> ::CMsgStickerHeroes* Arena::CreateMaybeMessage<::CMsgStickerHeroes>(Arena*);
template<> ::CMsgStickerbook* Arena::CreateMaybeMessage<::CMsgStickerbook>(Arena*);
template<> ::CMsgStickerbookPage* Arena::CreateMaybeMessage<::CMsgStickerbookPage>(Arena*);
template<> ::CMsgStickerbookSticker* Arena::CreateMaybeMessage<::CMsgStickerbookSticker>(Arena*);
template<> ::CMsgStickerbookTeamPageOrderSequence* Arena::CreateMaybeMessage<::CMsgStickerbookTeamPageOrderSequence>(Arena*);
template<> ::CMsgSuccessfulHero* Arena::CreateMaybeMessage<::CMsgSuccessfulHero>(Arena*);
template<> ::CMsgUnderDraftData* Arena::CreateMaybeMessage<::CMsgUnderDraftData>(Arena*);
template<> ::CMsgUnderDraftData_BenchSlot* Arena::CreateMaybeMessage<::CMsgUnderDraftData_BenchSlot>(Arena*);
template<> ::CMsgUnderDraftData_ShopSlot* Arena::CreateMaybeMessage<::CMsgUnderDraftData_ShopSlot>(Arena*);
template<> ::CPartySearchClientParty* Arena::CreateMaybeMessage<::CPartySearchClientParty>(Arena*);
template<> ::CProtoItemHeroStatue* Arena::CreateMaybeMessage<::CProtoItemHeroStatue>(Arena*);
template<> ::CSODOTAGameAccountClient* Arena::CreateMaybeMessage<::CSODOTAGameAccountClient>(Arena*);
template<> ::CSODOTAGameAccountClient_RoleHandicap* Arena::CreateMaybeMessage<::CSODOTAGameAccountClient_RoleHandicap>(Arena*);
template<> ::CSODOTAGameAccountPlus* Arena::CreateMaybeMessage<::CSODOTAGameAccountPlus>(Arena*);
template<> ::CSODOTAMapLocationState* Arena::CreateMaybeMessage<::CSODOTAMapLocationState>(Arena*);
template<> ::CSODOTAPlayerChallenge* Arena::CreateMaybeMessage<::CSODOTAPlayerChallenge>(Arena*);
template<> ::CSOEconItemDropRateBonus* Arena::CreateMaybeMessage<::CSOEconItemDropRateBonus>(Arena*);
template<> ::CSOEconItemTournamentPassport* Arena::CreateMaybeMessage<::CSOEconItemTournamentPassport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgDOTAProfileCard_EStatID : int {
  CMsgDOTAProfileCard_EStatID_k_eStat_Wins = 3,
  CMsgDOTAProfileCard_EStatID_k_eStat_Commends = 4,
  CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed = 5,
  CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate = 6,
  CMsgDOTAProfileCard_EStatID_k_eStat_PreviousSeasonRank = 7,
  CMsgDOTAProfileCard_EStatID_k_eStat_GamesMVP = 8
};
bool CMsgDOTAProfileCard_EStatID_IsValid(int value);
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MIN = CMsgDOTAProfileCard_EStatID_k_eStat_Wins;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MAX = CMsgDOTAProfileCard_EStatID_k_eStat_GamesMVP;
constexpr int CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE = CMsgDOTAProfileCard_EStatID_EStatID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor();
template<typename T>
inline const std::string& CMsgDOTAProfileCard_EStatID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAProfileCard_EStatID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAProfileCard_EStatID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAProfileCard_EStatID_descriptor(), enum_t_value);
}
inline bool CMsgDOTAProfileCard_EStatID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAProfileCard_EStatID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAProfileCard_EStatID>(
    CMsgDOTAProfileCard_EStatID_descriptor(), name, value);
}
enum CMsgGCRerollPlayerChallengeResponse_EResult : int {
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success = 0,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped = 1,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound = 2,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll = 3,
  CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError = 4
};
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value);
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX = CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
constexpr int CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE = CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgGCRerollPlayerChallengeResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCRerollPlayerChallengeResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCRerollPlayerChallengeResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgGCRerollPlayerChallengeResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCRerollPlayerChallengeResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCRerollPlayerChallengeResponse_EResult>(
    CMsgGCRerollPlayerChallengeResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eStat : int {
  CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned = 0,
  CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned = 1,
  CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost = 2,
  CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned = 3
};
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value);
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN = CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX = CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
constexpr int CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
template<typename T>
inline const std::string& CMsgDOTARealtimeGameStats_GraphData_eStat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTARealtimeGameStats_GraphData_eStat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTARealtimeGameStats_GraphData_eStat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), enum_t_value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTARealtimeGameStats_GraphData_eStat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eStat>(
    CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor(), name, value);
}
enum CMsgDOTARealtimeGameStats_GraphData_eLocation : int {
  CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane = 0,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane = 1,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane = 2,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle = 3,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients = 4,
  CMsgDOTARealtimeGameStats_GraphData_eLocation_Other = 5
};
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value);
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN = CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX = CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
constexpr int CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE = CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
template<typename T>
inline const std::string& CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTARealtimeGameStats_GraphData_eLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTARealtimeGameStats_GraphData_eLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), enum_t_value);
}
inline bool CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTARealtimeGameStats_GraphData_eLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTARealtimeGameStats_GraphData_eLocation>(
    CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor(), name, value);
}
enum CMsgInGamePrediction_ERawValueType_t : int {
  CMsgInGamePrediction_ERawValueType_t_Number = 0,
  CMsgInGamePrediction_ERawValueType_t_Time = 1
};
bool CMsgInGamePrediction_ERawValueType_t_IsValid(int value);
constexpr CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction_ERawValueType_t_ERawValueType_t_MIN = CMsgInGamePrediction_ERawValueType_t_Number;
constexpr CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction_ERawValueType_t_ERawValueType_t_MAX = CMsgInGamePrediction_ERawValueType_t_Time;
constexpr int CMsgInGamePrediction_ERawValueType_t_ERawValueType_t_ARRAYSIZE = CMsgInGamePrediction_ERawValueType_t_ERawValueType_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_ERawValueType_t_descriptor();
template<typename T>
inline const std::string& CMsgInGamePrediction_ERawValueType_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgInGamePrediction_ERawValueType_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgInGamePrediction_ERawValueType_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgInGamePrediction_ERawValueType_t_descriptor(), enum_t_value);
}
inline bool CMsgInGamePrediction_ERawValueType_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgInGamePrediction_ERawValueType_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgInGamePrediction_ERawValueType_t>(
    CMsgInGamePrediction_ERawValueType_t_descriptor(), name, value);
}
enum CMsgInGamePrediction_EPredictionType : int {
  CMsgInGamePrediction_EPredictionType_Generic = 0,
  CMsgInGamePrediction_EPredictionType_Hero = 1,
  CMsgInGamePrediction_EPredictionType_Team = 2,
  CMsgInGamePrediction_EPredictionType_Player = 3,
  CMsgInGamePrediction_EPredictionType_Special = 4,
  CMsgInGamePrediction_EPredictionType_YesNo = 5,
  CMsgInGamePrediction_EPredictionType_QualifiersTeam = 6
};
bool CMsgInGamePrediction_EPredictionType_IsValid(int value);
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction_EPredictionType_EPredictionType_MIN = CMsgInGamePrediction_EPredictionType_Generic;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction_EPredictionType_EPredictionType_MAX = CMsgInGamePrediction_EPredictionType_QualifiersTeam;
constexpr int CMsgInGamePrediction_EPredictionType_EPredictionType_ARRAYSIZE = CMsgInGamePrediction_EPredictionType_EPredictionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_EPredictionType_descriptor();
template<typename T>
inline const std::string& CMsgInGamePrediction_EPredictionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgInGamePrediction_EPredictionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgInGamePrediction_EPredictionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgInGamePrediction_EPredictionType_descriptor(), enum_t_value);
}
inline bool CMsgInGamePrediction_EPredictionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgInGamePrediction_EPredictionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgInGamePrediction_EPredictionType>(
    CMsgInGamePrediction_EPredictionType_descriptor(), name, value);
}
enum CMsgInGamePrediction_EResolutionType_t : int {
  CMsgInGamePrediction_EResolutionType_t_InvalidQuery = 0,
  CMsgInGamePrediction_EResolutionType_t_FirstToPassQuery = 1,
  CMsgInGamePrediction_EResolutionType_t_LastToPassQuery = 2,
  CMsgInGamePrediction_EResolutionType_t_LastRemainingQuery = 3,
  CMsgInGamePrediction_EResolutionType_t_MaxToPassQuery = 4,
  CMsgInGamePrediction_EResolutionType_t_MinToPassQuery = 5,
  CMsgInGamePrediction_EResolutionType_t_SumQuery = 6,
  CMsgInGamePrediction_EResolutionType_t_MaxTeamSumToPassQuery = 7,
  CMsgInGamePrediction_EResolutionType_t_MinTeamSumToPassQuery = 8
};
bool CMsgInGamePrediction_EResolutionType_t_IsValid(int value);
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction_EResolutionType_t_EResolutionType_t_MIN = CMsgInGamePrediction_EResolutionType_t_InvalidQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction_EResolutionType_t_EResolutionType_t_MAX = CMsgInGamePrediction_EResolutionType_t_MinTeamSumToPassQuery;
constexpr int CMsgInGamePrediction_EResolutionType_t_EResolutionType_t_ARRAYSIZE = CMsgInGamePrediction_EResolutionType_t_EResolutionType_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_EResolutionType_t_descriptor();
template<typename T>
inline const std::string& CMsgInGamePrediction_EResolutionType_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgInGamePrediction_EResolutionType_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgInGamePrediction_EResolutionType_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgInGamePrediction_EResolutionType_t_descriptor(), enum_t_value);
}
inline bool CMsgInGamePrediction_EResolutionType_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgInGamePrediction_EResolutionType_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgInGamePrediction_EResolutionType_t>(
    CMsgInGamePrediction_EResolutionType_t_descriptor(), name, value);
}
enum CMsgInGamePrediction_ERandomSelectionGroup_t : int {
  CMsgInGamePrediction_ERandomSelectionGroup_t_EarlyGame = 0,
  CMsgInGamePrediction_ERandomSelectionGroup_t_MidGame = 1,
  CMsgInGamePrediction_ERandomSelectionGroup_t_LateGame = 2,
  CMsgInGamePrediction_ERandomSelectionGroup_t_Count = 3
};
bool CMsgInGamePrediction_ERandomSelectionGroup_t_IsValid(int value);
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction_ERandomSelectionGroup_t_ERandomSelectionGroup_t_MIN = CMsgInGamePrediction_ERandomSelectionGroup_t_EarlyGame;
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction_ERandomSelectionGroup_t_ERandomSelectionGroup_t_MAX = CMsgInGamePrediction_ERandomSelectionGroup_t_Count;
constexpr int CMsgInGamePrediction_ERandomSelectionGroup_t_ERandomSelectionGroup_t_ARRAYSIZE = CMsgInGamePrediction_ERandomSelectionGroup_t_ERandomSelectionGroup_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_ERandomSelectionGroup_t_descriptor();
template<typename T>
inline const std::string& CMsgInGamePrediction_ERandomSelectionGroup_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgInGamePrediction_ERandomSelectionGroup_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgInGamePrediction_ERandomSelectionGroup_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgInGamePrediction_ERandomSelectionGroup_t_descriptor(), enum_t_value);
}
inline bool CMsgInGamePrediction_ERandomSelectionGroup_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgInGamePrediction_ERandomSelectionGroup_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgInGamePrediction_ERandomSelectionGroup_t>(
    CMsgInGamePrediction_ERandomSelectionGroup_t_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_Prediction_EPredictionType : int {
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_Generic = 0,
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_Hero = 1,
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_Team = 2,
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_Player = 3,
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_Special = 4,
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_YesNo = 5,
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_QualifiersTeam = 6,
  CMsgDOTASeasonPredictions_Prediction_EPredictionType_LastChanceTeam = 7
};
bool CMsgDOTASeasonPredictions_Prediction_EPredictionType_IsValid(int value);
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction_EPredictionType_EPredictionType_MIN = CMsgDOTASeasonPredictions_Prediction_EPredictionType_Generic;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction_EPredictionType_EPredictionType_MAX = CMsgDOTASeasonPredictions_Prediction_EPredictionType_LastChanceTeam;
constexpr int CMsgDOTASeasonPredictions_Prediction_EPredictionType_EPredictionType_ARRAYSIZE = CMsgDOTASeasonPredictions_Prediction_EPredictionType_EPredictionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTASeasonPredictions_Prediction_EPredictionType_descriptor();
template<typename T>
inline const std::string& CMsgDOTASeasonPredictions_Prediction_EPredictionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTASeasonPredictions_Prediction_EPredictionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTASeasonPredictions_Prediction_EPredictionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_descriptor(), enum_t_value);
}
inline bool CMsgDOTASeasonPredictions_Prediction_EPredictionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTASeasonPredictions_Prediction_EPredictionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_Prediction_EPredictionType>(
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_descriptor(), name, value);
}
enum CMsgDOTASeasonPredictions_Prediction_EAnswerType : int {
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_SingleInt = 0,
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_SingleFloat = 1,
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_MultipleInt = 2,
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_MultipleFloat = 3,
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_AnswerTeam = 4,
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_SingleTime = 5,
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_MultipleTime = 6,
  CMsgDOTASeasonPredictions_Prediction_EAnswerType_NoAnswer = 7
};
bool CMsgDOTASeasonPredictions_Prediction_EAnswerType_IsValid(int value);
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction_EAnswerType_EAnswerType_MIN = CMsgDOTASeasonPredictions_Prediction_EAnswerType_SingleInt;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction_EAnswerType_EAnswerType_MAX = CMsgDOTASeasonPredictions_Prediction_EAnswerType_NoAnswer;
constexpr int CMsgDOTASeasonPredictions_Prediction_EAnswerType_EAnswerType_ARRAYSIZE = CMsgDOTASeasonPredictions_Prediction_EAnswerType_EAnswerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTASeasonPredictions_Prediction_EAnswerType_descriptor();
template<typename T>
inline const std::string& CMsgDOTASeasonPredictions_Prediction_EAnswerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTASeasonPredictions_Prediction_EAnswerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTASeasonPredictions_Prediction_EAnswerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_descriptor(), enum_t_value);
}
inline bool CMsgDOTASeasonPredictions_Prediction_EAnswerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTASeasonPredictions_Prediction_EAnswerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTASeasonPredictions_Prediction_EAnswerType>(
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_descriptor(), name, value);
}
enum CMsgDOTAMatch_Player_HeroDamageType : int {
  CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_PHYSICAL = 0,
  CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_MAGICAL = 1,
  CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_PURE = 2
};
bool CMsgDOTAMatch_Player_HeroDamageType_IsValid(int value);
constexpr CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player_HeroDamageType_HeroDamageType_MIN = CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_PHYSICAL;
constexpr CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player_HeroDamageType_HeroDamageType_MAX = CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_PURE;
constexpr int CMsgDOTAMatch_Player_HeroDamageType_HeroDamageType_ARRAYSIZE = CMsgDOTAMatch_Player_HeroDamageType_HeroDamageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAMatch_Player_HeroDamageType_descriptor();
template<typename T>
inline const std::string& CMsgDOTAMatch_Player_HeroDamageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAMatch_Player_HeroDamageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAMatch_Player_HeroDamageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAMatch_Player_HeroDamageType_descriptor(), enum_t_value);
}
inline bool CMsgDOTAMatch_Player_HeroDamageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAMatch_Player_HeroDamageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAMatch_Player_HeroDamageType>(
    CMsgDOTAMatch_Player_HeroDamageType_descriptor(), name, value);
}
enum CMsgDOTAMatch_ReplayState : int {
  CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE = 0,
  CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED = 1,
  CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED = 2
};
bool CMsgDOTAMatch_ReplayState_IsValid(int value);
constexpr CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MIN = CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
constexpr CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState_ReplayState_MAX = CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
constexpr int CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE = CMsgDOTAMatch_ReplayState_ReplayState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor();
template<typename T>
inline const std::string& CMsgDOTAMatch_ReplayState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAMatch_ReplayState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAMatch_ReplayState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAMatch_ReplayState_descriptor(), enum_t_value);
}
inline bool CMsgDOTAMatch_ReplayState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAMatch_ReplayState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAMatch_ReplayState>(
    CMsgDOTAMatch_ReplayState_descriptor(), name, value);
}
enum CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse : int {
  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eInternalError = 0,
  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eSuccess = 1,
  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eTooBusy = 2,
  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eDisabled = 3
};
bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_IsValid(int value);
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_EResponse_MIN = CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eInternalError;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_EResponse_MAX = CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eDisabled;
constexpr int CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_EResponse_ARRAYSIZE = CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse>(
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_descriptor(), name, value);
}
enum ESpecialPingValue : int {
  k_ESpecialPingValue_NoData = 16382,
  k_ESpecialPingValue_Failed = 16383
};
bool ESpecialPingValue_IsValid(int value);
constexpr ESpecialPingValue ESpecialPingValue_MIN = k_ESpecialPingValue_NoData;
constexpr ESpecialPingValue ESpecialPingValue_MAX = k_ESpecialPingValue_Failed;
constexpr int ESpecialPingValue_ARRAYSIZE = ESpecialPingValue_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESpecialPingValue_descriptor();
template<typename T>
inline const std::string& ESpecialPingValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESpecialPingValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESpecialPingValue_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESpecialPingValue_descriptor(), enum_t_value);
}
inline bool ESpecialPingValue_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESpecialPingValue* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESpecialPingValue>(
    ESpecialPingValue_descriptor(), name, value);
}
enum EDOTAGCSessionNeed : int {
  k_EDOTAGCSessionNeed_Unknown = 0,
  k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
  k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
  k_EDOTAGCSessionNeed_UserInLocalGame = 102,
  k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
  k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
  k_EDOTAGCSessionNeed_UserTutorials = 105,
  k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle = 106,
  k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle = 107,
  k_EDOTAGCSessionNeed_GameServerOnline = 200,
  k_EDOTAGCSessionNeed_GameServerLocal = 201,
  k_EDOTAGCSessionNeed_GameServerIdle = 202,
  k_EDOTAGCSessionNeed_GameServerRelay = 203,
  k_EDOTAGCSessionNeed_GameServerLocalUpload = 204
};
bool EDOTAGCSessionNeed_IsValid(int value);
constexpr EDOTAGCSessionNeed EDOTAGCSessionNeed_MIN = k_EDOTAGCSessionNeed_Unknown;
constexpr EDOTAGCSessionNeed EDOTAGCSessionNeed_MAX = k_EDOTAGCSessionNeed_GameServerLocalUpload;
constexpr int EDOTAGCSessionNeed_ARRAYSIZE = EDOTAGCSessionNeed_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAGCSessionNeed_descriptor();
template<typename T>
inline const std::string& EDOTAGCSessionNeed_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDOTAGCSessionNeed>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDOTAGCSessionNeed_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDOTAGCSessionNeed_descriptor(), enum_t_value);
}
inline bool EDOTAGCSessionNeed_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDOTAGCSessionNeed* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDOTAGCSessionNeed>(
    EDOTAGCSessionNeed_descriptor(), name, value);
}
enum DOTA_TournamentEvents : int {
  TE_FIRST_BLOOD = 0,
  TE_GAME_END = 1,
  TE_MULTI_KILL = 2,
  TE_HERO_DENY = 3,
  TE_AEGIS_DENY = 4,
  TE_AEGIS_STOLEN = 5,
  TE_GODLIKE = 6,
  TE_COURIER_KILL = 7,
  TE_ECHOSLAM = 8,
  TE_RAPIER = 9,
  TE_EARLY_ROSHAN = 10,
  TE_BLACK_HOLE = 11
};
bool DOTA_TournamentEvents_IsValid(int value);
constexpr DOTA_TournamentEvents DOTA_TournamentEvents_MIN = TE_FIRST_BLOOD;
constexpr DOTA_TournamentEvents DOTA_TournamentEvents_MAX = TE_BLACK_HOLE;
constexpr int DOTA_TournamentEvents_ARRAYSIZE = DOTA_TournamentEvents_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_TournamentEvents_descriptor();
template<typename T>
inline const std::string& DOTA_TournamentEvents_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DOTA_TournamentEvents>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DOTA_TournamentEvents_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DOTA_TournamentEvents_descriptor(), enum_t_value);
}
inline bool DOTA_TournamentEvents_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DOTA_TournamentEvents* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DOTA_TournamentEvents>(
    DOTA_TournamentEvents_descriptor(), name, value);
}
enum EBroadcastTimelineEvent : int {
  EBroadcastTimelineEvent_MatchStarted = 1,
  EBroadcastTimelineEvent_GameStateChanged = 2,
  EBroadcastTimelineEvent_TowerDeath = 3,
  EBroadcastTimelineEvent_BarracksDeath = 4,
  EBroadcastTimelineEvent_AncientDeath = 5,
  EBroadcastTimelineEvent_RoshanDeath = 6,
  EBroadcastTimelineEvent_HeroDeath = 7,
  EBroadcastTimelineEvent_TeamFight = 8,
  EBroadcastTimelineEvent_FirstBlood = 9
};
bool EBroadcastTimelineEvent_IsValid(int value);
constexpr EBroadcastTimelineEvent EBroadcastTimelineEvent_MIN = EBroadcastTimelineEvent_MatchStarted;
constexpr EBroadcastTimelineEvent EBroadcastTimelineEvent_MAX = EBroadcastTimelineEvent_FirstBlood;
constexpr int EBroadcastTimelineEvent_ARRAYSIZE = EBroadcastTimelineEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastTimelineEvent_descriptor();
template<typename T>
inline const std::string& EBroadcastTimelineEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBroadcastTimelineEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBroadcastTimelineEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBroadcastTimelineEvent_descriptor(), enum_t_value);
}
inline bool EBroadcastTimelineEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBroadcastTimelineEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBroadcastTimelineEvent>(
    EBroadcastTimelineEvent_descriptor(), name, value);
}
enum ECustomGameWhitelistState : int {
  CUSTOM_GAME_WHITELIST_STATE_UNKNOWN = 0,
  CUSTOM_GAME_WHITELIST_STATE_APPROVED = 1,
  CUSTOM_GAME_WHITELIST_STATE_REJECTED = 2
};
bool ECustomGameWhitelistState_IsValid(int value);
constexpr ECustomGameWhitelistState ECustomGameWhitelistState_MIN = CUSTOM_GAME_WHITELIST_STATE_UNKNOWN;
constexpr ECustomGameWhitelistState ECustomGameWhitelistState_MAX = CUSTOM_GAME_WHITELIST_STATE_REJECTED;
constexpr int ECustomGameWhitelistState_ARRAYSIZE = ECustomGameWhitelistState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECustomGameWhitelistState_descriptor();
template<typename T>
inline const std::string& ECustomGameWhitelistState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECustomGameWhitelistState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECustomGameWhitelistState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECustomGameWhitelistState_descriptor(), enum_t_value);
}
inline bool ECustomGameWhitelistState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECustomGameWhitelistState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECustomGameWhitelistState>(
    ECustomGameWhitelistState_descriptor(), name, value);
}
enum EDOTATriviaQuestionCategory : int {
  k_EDOTATriviaQuestionCategory_AbilityIcon = 0,
  k_EDOTATriviaQuestionCategory_AbilityCooldown = 1,
  k_EDOTATriviaQuestionCategory_HeroAttributes = 2,
  k_EDOTATriviaQuestionCategory_HeroMovementSpeed = 3,
  k_EDOTATriviaQuestionCategory_TalentTree = 4,
  k_EDOTATriviaQuestionCategory_HeroStats = 5,
  k_EDOTATriviaQuestionCategory_ItemPrice = 6,
  k_EDOTATriviaQuestionCategory_AbilitySound = 7,
  k_EDOTATriviaQuestionCategory_InvokerSpells = 8,
  k_EDOTATriviaQuestionCategory_AbilityManaCost = 9,
  k_EDOTATriviaQuestionCategory_HeroAttackSound = 10,
  k_EDOTATriviaQuestionCategory_AbilityName = 11,
  k_EDOTATriviaQuestionCategory_ItemComponents = 12,
  k_EDOTATriviaQuestionCategory_ItemLore = 13,
  k_EDOTATriviaQuestionCategory_ItemPassives = 14,
  k_EDOTATriviaQuestionCategory_STATIC_QUESTIONS_END = 15,
  k_EDOTATriviaQuestionCategory_DYNAMIC_QUESTIONS_START = 99,
  k_EDOTATriviaQuestionCategory_Dynamic_ItemBuild = 100
};
bool EDOTATriviaQuestionCategory_IsValid(int value);
constexpr EDOTATriviaQuestionCategory EDOTATriviaQuestionCategory_MIN = k_EDOTATriviaQuestionCategory_AbilityIcon;
constexpr EDOTATriviaQuestionCategory EDOTATriviaQuestionCategory_MAX = k_EDOTATriviaQuestionCategory_Dynamic_ItemBuild;
constexpr int EDOTATriviaQuestionCategory_ARRAYSIZE = EDOTATriviaQuestionCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTATriviaQuestionCategory_descriptor();
template<typename T>
inline const std::string& EDOTATriviaQuestionCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDOTATriviaQuestionCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDOTATriviaQuestionCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDOTATriviaQuestionCategory_descriptor(), enum_t_value);
}
inline bool EDOTATriviaQuestionCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDOTATriviaQuestionCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDOTATriviaQuestionCategory>(
    EDOTATriviaQuestionCategory_descriptor(), name, value);
}
enum EOverwatchConviction : int {
  k_EOverwatchConviction_None = 0,
  k_EOverwatchConviction_NotGuilty = 1,
  k_EOverwatchConviction_GuiltUnclear = 2,
  k_EOverwatchConviction_Guilty = 3
};
bool EOverwatchConviction_IsValid(int value);
constexpr EOverwatchConviction EOverwatchConviction_MIN = k_EOverwatchConviction_None;
constexpr EOverwatchConviction EOverwatchConviction_MAX = k_EOverwatchConviction_Guilty;
constexpr int EOverwatchConviction_ARRAYSIZE = EOverwatchConviction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOverwatchConviction_descriptor();
template<typename T>
inline const std::string& EOverwatchConviction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EOverwatchConviction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EOverwatchConviction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EOverwatchConviction_descriptor(), enum_t_value);
}
inline bool EOverwatchConviction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EOverwatchConviction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EOverwatchConviction>(
    EOverwatchConviction_descriptor(), name, value);
}
enum EHeroRelicRarity : int {
  HERO_RELIC_RARITY_INVALID = -1,
  HERO_RELIC_RARITY_COMMON = 0,
  HERO_RELIC_RARITY_RARE = 1
};
bool EHeroRelicRarity_IsValid(int value);
constexpr EHeroRelicRarity EHeroRelicRarity_MIN = HERO_RELIC_RARITY_INVALID;
constexpr EHeroRelicRarity EHeroRelicRarity_MAX = HERO_RELIC_RARITY_RARE;
constexpr int EHeroRelicRarity_ARRAYSIZE = EHeroRelicRarity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHeroRelicRarity_descriptor();
template<typename T>
inline const std::string& EHeroRelicRarity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EHeroRelicRarity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EHeroRelicRarity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EHeroRelicRarity_descriptor(), enum_t_value);
}
inline bool EHeroRelicRarity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EHeroRelicRarity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EHeroRelicRarity>(
    EHeroRelicRarity_descriptor(), name, value);
}
enum EStickerbookAuditAction : int {
  STICKERBOOK_AUDIT_CREATE_PAGE = 0,
  STICKERBOOK_AUDIT_DELETE_PAGE = 1,
  STICKERBOOK_AUDIT_STICK_STICKERS = 2,
  STICKERBOOK_AUDIT_REPLACE_STICKERS = 3,
  STICKERBOOK_AUDIT_HERO_STICKER = 4
};
bool EStickerbookAuditAction_IsValid(int value);
constexpr EStickerbookAuditAction EStickerbookAuditAction_MIN = STICKERBOOK_AUDIT_CREATE_PAGE;
constexpr EStickerbookAuditAction EStickerbookAuditAction_MAX = STICKERBOOK_AUDIT_HERO_STICKER;
constexpr int EStickerbookAuditAction_ARRAYSIZE = EStickerbookAuditAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStickerbookAuditAction_descriptor();
template<typename T>
inline const std::string& EStickerbookAuditAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EStickerbookAuditAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EStickerbookAuditAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EStickerbookAuditAction_descriptor(), enum_t_value);
}
inline bool EStickerbookAuditAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EStickerbookAuditAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EStickerbookAuditAction>(
    EStickerbookAuditAction_descriptor(), name, value);
}
enum EStickerbookPageType : int {
  STICKER_PAGE_GENERIC = 0,
  STICKER_PAGE_TEAM = 1,
  STICKER_PAGE_TALENT = 2
};
bool EStickerbookPageType_IsValid(int value);
constexpr EStickerbookPageType EStickerbookPageType_MIN = STICKER_PAGE_GENERIC;
constexpr EStickerbookPageType EStickerbookPageType_MAX = STICKER_PAGE_TALENT;
constexpr int EStickerbookPageType_ARRAYSIZE = EStickerbookPageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStickerbookPageType_descriptor();
template<typename T>
inline const std::string& EStickerbookPageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EStickerbookPageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EStickerbookPageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EStickerbookPageType_descriptor(), enum_t_value);
}
inline bool EStickerbookPageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EStickerbookPageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EStickerbookPageType>(
    EStickerbookPageType_descriptor(), name, value);
}
// ===================================================================

class CSODOTAGameAccountClient_RoleHandicap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAGameAccountClient.RoleHandicap) */ {
 public:
  inline CSODOTAGameAccountClient_RoleHandicap() : CSODOTAGameAccountClient_RoleHandicap(nullptr) {}
  ~CSODOTAGameAccountClient_RoleHandicap() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAGameAccountClient_RoleHandicap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAGameAccountClient_RoleHandicap(const CSODOTAGameAccountClient_RoleHandicap& from);
  CSODOTAGameAccountClient_RoleHandicap(CSODOTAGameAccountClient_RoleHandicap&& from) noexcept
    : CSODOTAGameAccountClient_RoleHandicap() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameAccountClient_RoleHandicap& operator=(const CSODOTAGameAccountClient_RoleHandicap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAGameAccountClient_RoleHandicap& operator=(CSODOTAGameAccountClient_RoleHandicap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAGameAccountClient_RoleHandicap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAGameAccountClient_RoleHandicap* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameAccountClient_RoleHandicap*>(
               &_CSODOTAGameAccountClient_RoleHandicap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSODOTAGameAccountClient_RoleHandicap& a, CSODOTAGameAccountClient_RoleHandicap& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAGameAccountClient_RoleHandicap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAGameAccountClient_RoleHandicap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAGameAccountClient_RoleHandicap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAGameAccountClient_RoleHandicap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAGameAccountClient_RoleHandicap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAGameAccountClient_RoleHandicap& from) {
    CSODOTAGameAccountClient_RoleHandicap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAGameAccountClient_RoleHandicap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAGameAccountClient.RoleHandicap";
  }
  protected:
  explicit CSODOTAGameAccountClient_RoleHandicap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kHandicapFieldNumber = 2,
  };
  // optional uint32 role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // optional float handicap = 2;
  bool has_handicap() const;
  private:
  bool _internal_has_handicap() const;
  public:
  void clear_handicap();
  float handicap() const;
  void set_handicap(float value);
  private:
  float _internal_handicap() const;
  void _internal_set_handicap(float value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountClient.RoleHandicap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t role_;
    float handicap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAGameAccountClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAGameAccountClient) */ {
 public:
  inline CSODOTAGameAccountClient() : CSODOTAGameAccountClient(nullptr) {}
  ~CSODOTAGameAccountClient() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAGameAccountClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from);
  CSODOTAGameAccountClient(CSODOTAGameAccountClient&& from) noexcept
    : CSODOTAGameAccountClient() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameAccountClient& operator=(const CSODOTAGameAccountClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAGameAccountClient& operator=(CSODOTAGameAccountClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAGameAccountClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAGameAccountClient* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameAccountClient*>(
               &_CSODOTAGameAccountClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSODOTAGameAccountClient& a, CSODOTAGameAccountClient& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAGameAccountClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAGameAccountClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAGameAccountClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAGameAccountClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAGameAccountClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAGameAccountClient& from) {
    CSODOTAGameAccountClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAGameAccountClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAGameAccountClient";
  }
  protected:
  explicit CSODOTAGameAccountClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTAGameAccountClient_RoleHandicap RoleHandicap;

  // accessors -------------------------------------------------------

  enum : int {
    kRoleHandicapsFieldNumber = 115,
    kAccountIdFieldNumber = 1,
    kWinsFieldNumber = 3,
    kLossesFieldNumber = 4,
    kXpFieldNumber = 12,
    kLevelFieldNumber = 13,
    kInitialSkillFieldNumber = 14,
    kLeaverCountFieldNumber = 15,
    kLowPriorityUntilDateFieldNumber = 18,
    kPreventTextChatUntilDateFieldNumber = 20,
    kPreventVoiceUntilDateFieldNumber = 21,
    kLastAbandonedGameDateFieldNumber = 22,
    kLeaverPenaltyCountFieldNumber = 23,
    kCompletedGameStreakFieldNumber = 24,
    kAccountDisabledUntilDateFieldNumber = 38,
    kAccountDisabledCountFieldNumber = 39,
    kMatchDisabledUntilDateFieldNumber = 41,
    kMatchDisabledCountFieldNumber = 42,
    kShutdownlawterminatetimestampFieldNumber = 47,
    kLowPriorityGamesRemainingFieldNumber = 48,
    kCompetitiveRankFieldNumber = 49,
    kCompetitiveCalibrationGamesRemainingFieldNumber = 51,
    kRecruitmentLevelFieldNumber = 55,
    kSecondaryLeaverCountFieldNumber = 58,
    kLastSecondaryAbandonedGameDateFieldNumber = 59,
    kCasualGamesPlayedFieldNumber = 60,
    kSoloCompetitiveGamesPlayedFieldNumber = 61,
    kPartyCompetitiveGamesPlayedFieldNumber = 62,
    kHasNewNotificationsFieldNumber = 56,
    kIsLeagueAdminFieldNumber = 57,
    kPlayerBehaviorReportOldDataFieldNumber = 73,
    kCasual1V1GamesPlayedFieldNumber = 65,
    kCurrAllHeroChallengeIdFieldNumber = 67,
    kPlayTimePointsFieldNumber = 68,
    kAccountFlagsFieldNumber = 69,
    kPlayTimeLevelFieldNumber = 70,
    kPlayerBehaviorSeqNumLastReportFieldNumber = 71,
    kPlayerBehaviorScoreLastReportFieldNumber = 72,
    kTourneySkillLevelFieldNumber = 74,
    kTourneyRecentParticipationDateFieldNumber = 85,
    kPreventPublicTextChatUntilDateFieldNumber = 86,
    kAnchoredPhoneNumberIdFieldNumber = 88,
    kRankedMatchmakingBanUntilDateFieldNumber = 89,
    kRecentGameTime1FieldNumber = 90,
    kRecentGameTime2FieldNumber = 91,
    kRecentGameTime3FieldNumber = 92,
    kFavoriteTeamPackedFieldNumber = 103,
    kRecentReportTimeFieldNumber = 104,
    kCustomGameDisabledUntilDateFieldNumber = 105,
    kRecentWinTime1FieldNumber = 106,
    kRecentWinTime2FieldNumber = 107,
    kRecentWinTime3FieldNumber = 108,
    kCoachRatingFieldNumber = 109,
    kQueuePointsFieldNumber = 114,
    kEventModeRecentTimeFieldNumber = 120,
    kMmrRecalibrationTimeFieldNumber = 121,
    kPreventNewPlayerChatUntilDateFieldNumber = 122,
  };
  // repeated .CSODOTAGameAccountClient.RoleHandicap role_handicaps = 115;
  int role_handicaps_size() const;
  private:
  int _internal_role_handicaps_size() const;
  public:
  void clear_role_handicaps();
  ::CSODOTAGameAccountClient_RoleHandicap* mutable_role_handicaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAGameAccountClient_RoleHandicap >*
      mutable_role_handicaps();
  private:
  const ::CSODOTAGameAccountClient_RoleHandicap& _internal_role_handicaps(int index) const;
  ::CSODOTAGameAccountClient_RoleHandicap* _internal_add_role_handicaps();
  public:
  const ::CSODOTAGameAccountClient_RoleHandicap& role_handicaps(int index) const;
  ::CSODOTAGameAccountClient_RoleHandicap* add_role_handicaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAGameAccountClient_RoleHandicap >&
      role_handicaps() const;

  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 wins = 3;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  uint32_t wins() const;
  void set_wins(uint32_t value);
  private:
  uint32_t _internal_wins() const;
  void _internal_set_wins(uint32_t value);
  public:

  // optional uint32 losses = 4;
  bool has_losses() const;
  private:
  bool _internal_has_losses() const;
  public:
  void clear_losses();
  uint32_t losses() const;
  void set_losses(uint32_t value);
  private:
  uint32_t _internal_losses() const;
  void _internal_set_losses(uint32_t value);
  public:

  // optional uint32 xp = 12;
  bool has_xp() const;
  private:
  bool _internal_has_xp() const;
  public:
  void clear_xp();
  uint32_t xp() const;
  void set_xp(uint32_t value);
  private:
  uint32_t _internal_xp() const;
  void _internal_set_xp(uint32_t value);
  public:

  // optional uint32 level = 13;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 initial_skill = 14;
  bool has_initial_skill() const;
  private:
  bool _internal_has_initial_skill() const;
  public:
  void clear_initial_skill();
  uint32_t initial_skill() const;
  void set_initial_skill(uint32_t value);
  private:
  uint32_t _internal_initial_skill() const;
  void _internal_set_initial_skill(uint32_t value);
  public:

  // optional uint32 leaver_count = 15;
  bool has_leaver_count() const;
  private:
  bool _internal_has_leaver_count() const;
  public:
  void clear_leaver_count();
  uint32_t leaver_count() const;
  void set_leaver_count(uint32_t value);
  private:
  uint32_t _internal_leaver_count() const;
  void _internal_set_leaver_count(uint32_t value);
  public:

  // optional uint32 low_priority_until_date = 18;
  bool has_low_priority_until_date() const;
  private:
  bool _internal_has_low_priority_until_date() const;
  public:
  void clear_low_priority_until_date();
  uint32_t low_priority_until_date() const;
  void set_low_priority_until_date(uint32_t value);
  private:
  uint32_t _internal_low_priority_until_date() const;
  void _internal_set_low_priority_until_date(uint32_t value);
  public:

  // optional uint32 prevent_text_chat_until_date = 20;
  bool has_prevent_text_chat_until_date() const;
  private:
  bool _internal_has_prevent_text_chat_until_date() const;
  public:
  void clear_prevent_text_chat_until_date();
  uint32_t prevent_text_chat_until_date() const;
  void set_prevent_text_chat_until_date(uint32_t value);
  private:
  uint32_t _internal_prevent_text_chat_until_date() const;
  void _internal_set_prevent_text_chat_until_date(uint32_t value);
  public:

  // optional uint32 prevent_voice_until_date = 21;
  bool has_prevent_voice_until_date() const;
  private:
  bool _internal_has_prevent_voice_until_date() const;
  public:
  void clear_prevent_voice_until_date();
  uint32_t prevent_voice_until_date() const;
  void set_prevent_voice_until_date(uint32_t value);
  private:
  uint32_t _internal_prevent_voice_until_date() const;
  void _internal_set_prevent_voice_until_date(uint32_t value);
  public:

  // optional uint32 last_abandoned_game_date = 22;
  bool has_last_abandoned_game_date() const;
  private:
  bool _internal_has_last_abandoned_game_date() const;
  public:
  void clear_last_abandoned_game_date();
  uint32_t last_abandoned_game_date() const;
  void set_last_abandoned_game_date(uint32_t value);
  private:
  uint32_t _internal_last_abandoned_game_date() const;
  void _internal_set_last_abandoned_game_date(uint32_t value);
  public:

  // optional uint32 leaver_penalty_count = 23;
  bool has_leaver_penalty_count() const;
  private:
  bool _internal_has_leaver_penalty_count() const;
  public:
  void clear_leaver_penalty_count();
  uint32_t leaver_penalty_count() const;
  void set_leaver_penalty_count(uint32_t value);
  private:
  uint32_t _internal_leaver_penalty_count() const;
  void _internal_set_leaver_penalty_count(uint32_t value);
  public:

  // optional uint32 completed_game_streak = 24;
  bool has_completed_game_streak() const;
  private:
  bool _internal_has_completed_game_streak() const;
  public:
  void clear_completed_game_streak();
  uint32_t completed_game_streak() const;
  void set_completed_game_streak(uint32_t value);
  private:
  uint32_t _internal_completed_game_streak() const;
  void _internal_set_completed_game_streak(uint32_t value);
  public:

  // optional uint32 account_disabled_until_date = 38;
  bool has_account_disabled_until_date() const;
  private:
  bool _internal_has_account_disabled_until_date() const;
  public:
  void clear_account_disabled_until_date();
  uint32_t account_disabled_until_date() const;
  void set_account_disabled_until_date(uint32_t value);
  private:
  uint32_t _internal_account_disabled_until_date() const;
  void _internal_set_account_disabled_until_date(uint32_t value);
  public:

  // optional uint32 account_disabled_count = 39;
  bool has_account_disabled_count() const;
  private:
  bool _internal_has_account_disabled_count() const;
  public:
  void clear_account_disabled_count();
  uint32_t account_disabled_count() const;
  void set_account_disabled_count(uint32_t value);
  private:
  uint32_t _internal_account_disabled_count() const;
  void _internal_set_account_disabled_count(uint32_t value);
  public:

  // optional uint32 match_disabled_until_date = 41;
  bool has_match_disabled_until_date() const;
  private:
  bool _internal_has_match_disabled_until_date() const;
  public:
  void clear_match_disabled_until_date();
  uint32_t match_disabled_until_date() const;
  void set_match_disabled_until_date(uint32_t value);
  private:
  uint32_t _internal_match_disabled_until_date() const;
  void _internal_set_match_disabled_until_date(uint32_t value);
  public:

  // optional uint32 match_disabled_count = 42;
  bool has_match_disabled_count() const;
  private:
  bool _internal_has_match_disabled_count() const;
  public:
  void clear_match_disabled_count();
  uint32_t match_disabled_count() const;
  void set_match_disabled_count(uint32_t value);
  private:
  uint32_t _internal_match_disabled_count() const;
  void _internal_set_match_disabled_count(uint32_t value);
  public:

  // optional uint32 shutdownlawterminatetimestamp = 47;
  bool has_shutdownlawterminatetimestamp() const;
  private:
  bool _internal_has_shutdownlawterminatetimestamp() const;
  public:
  void clear_shutdownlawterminatetimestamp();
  uint32_t shutdownlawterminatetimestamp() const;
  void set_shutdownlawterminatetimestamp(uint32_t value);
  private:
  uint32_t _internal_shutdownlawterminatetimestamp() const;
  void _internal_set_shutdownlawterminatetimestamp(uint32_t value);
  public:

  // optional uint32 low_priority_games_remaining = 48;
  bool has_low_priority_games_remaining() const;
  private:
  bool _internal_has_low_priority_games_remaining() const;
  public:
  void clear_low_priority_games_remaining();
  uint32_t low_priority_games_remaining() const;
  void set_low_priority_games_remaining(uint32_t value);
  private:
  uint32_t _internal_low_priority_games_remaining() const;
  void _internal_set_low_priority_games_remaining(uint32_t value);
  public:

  // optional uint32 competitive_rank = 49;
  bool has_competitive_rank() const;
  private:
  bool _internal_has_competitive_rank() const;
  public:
  void clear_competitive_rank();
  uint32_t competitive_rank() const;
  void set_competitive_rank(uint32_t value);
  private:
  uint32_t _internal_competitive_rank() const;
  void _internal_set_competitive_rank(uint32_t value);
  public:

  // optional uint32 competitive_calibration_games_remaining = 51;
  bool has_competitive_calibration_games_remaining() const;
  private:
  bool _internal_has_competitive_calibration_games_remaining() const;
  public:
  void clear_competitive_calibration_games_remaining();
  uint32_t competitive_calibration_games_remaining() const;
  void set_competitive_calibration_games_remaining(uint32_t value);
  private:
  uint32_t _internal_competitive_calibration_games_remaining() const;
  void _internal_set_competitive_calibration_games_remaining(uint32_t value);
  public:

  // optional uint32 recruitment_level = 55;
  bool has_recruitment_level() const;
  private:
  bool _internal_has_recruitment_level() const;
  public:
  void clear_recruitment_level();
  uint32_t recruitment_level() const;
  void set_recruitment_level(uint32_t value);
  private:
  uint32_t _internal_recruitment_level() const;
  void _internal_set_recruitment_level(uint32_t value);
  public:

  // optional uint32 secondary_leaver_count = 58;
  bool has_secondary_leaver_count() const;
  private:
  bool _internal_has_secondary_leaver_count() const;
  public:
  void clear_secondary_leaver_count();
  uint32_t secondary_leaver_count() const;
  void set_secondary_leaver_count(uint32_t value);
  private:
  uint32_t _internal_secondary_leaver_count() const;
  void _internal_set_secondary_leaver_count(uint32_t value);
  public:

  // optional uint32 last_secondary_abandoned_game_date = 59;
  bool has_last_secondary_abandoned_game_date() const;
  private:
  bool _internal_has_last_secondary_abandoned_game_date() const;
  public:
  void clear_last_secondary_abandoned_game_date();
  uint32_t last_secondary_abandoned_game_date() const;
  void set_last_secondary_abandoned_game_date(uint32_t value);
  private:
  uint32_t _internal_last_secondary_abandoned_game_date() const;
  void _internal_set_last_secondary_abandoned_game_date(uint32_t value);
  public:

  // optional uint32 casual_games_played = 60;
  bool has_casual_games_played() const;
  private:
  bool _internal_has_casual_games_played() const;
  public:
  void clear_casual_games_played();
  uint32_t casual_games_played() const;
  void set_casual_games_played(uint32_t value);
  private:
  uint32_t _internal_casual_games_played() const;
  void _internal_set_casual_games_played(uint32_t value);
  public:

  // optional uint32 solo_competitive_games_played = 61;
  bool has_solo_competitive_games_played() const;
  private:
  bool _internal_has_solo_competitive_games_played() const;
  public:
  void clear_solo_competitive_games_played();
  uint32_t solo_competitive_games_played() const;
  void set_solo_competitive_games_played(uint32_t value);
  private:
  uint32_t _internal_solo_competitive_games_played() const;
  void _internal_set_solo_competitive_games_played(uint32_t value);
  public:

  // optional uint32 party_competitive_games_played = 62;
  bool has_party_competitive_games_played() const;
  private:
  bool _internal_has_party_competitive_games_played() const;
  public:
  void clear_party_competitive_games_played();
  uint32_t party_competitive_games_played() const;
  void set_party_competitive_games_played(uint32_t value);
  private:
  uint32_t _internal_party_competitive_games_played() const;
  void _internal_set_party_competitive_games_played(uint32_t value);
  public:

  // optional bool has_new_notifications = 56;
  bool has_has_new_notifications() const;
  private:
  bool _internal_has_has_new_notifications() const;
  public:
  void clear_has_new_notifications();
  bool has_new_notifications() const;
  void set_has_new_notifications(bool value);
  private:
  bool _internal_has_new_notifications() const;
  void _internal_set_has_new_notifications(bool value);
  public:

  // optional bool is_league_admin = 57;
  bool has_is_league_admin() const;
  private:
  bool _internal_has_is_league_admin() const;
  public:
  void clear_is_league_admin();
  bool is_league_admin() const;
  void set_is_league_admin(bool value);
  private:
  bool _internal_is_league_admin() const;
  void _internal_set_is_league_admin(bool value);
  public:

  // optional bool player_behavior_report_old_data = 73;
  bool has_player_behavior_report_old_data() const;
  private:
  bool _internal_has_player_behavior_report_old_data() const;
  public:
  void clear_player_behavior_report_old_data();
  bool player_behavior_report_old_data() const;
  void set_player_behavior_report_old_data(bool value);
  private:
  bool _internal_player_behavior_report_old_data() const;
  void _internal_set_player_behavior_report_old_data(bool value);
  public:

  // optional uint32 casual_1v1_games_played = 65;
  bool has_casual_1v1_games_played() const;
  private:
  bool _internal_has_casual_1v1_games_played() const;
  public:
  void clear_casual_1v1_games_played();
  uint32_t casual_1v1_games_played() const;
  void set_casual_1v1_games_played(uint32_t value);
  private:
  uint32_t _internal_casual_1v1_games_played() const;
  void _internal_set_casual_1v1_games_played(uint32_t value);
  public:

  // optional uint32 curr_all_hero_challenge_id = 67;
  bool has_curr_all_hero_challenge_id() const;
  private:
  bool _internal_has_curr_all_hero_challenge_id() const;
  public:
  void clear_curr_all_hero_challenge_id();
  uint32_t curr_all_hero_challenge_id() const;
  void set_curr_all_hero_challenge_id(uint32_t value);
  private:
  uint32_t _internal_curr_all_hero_challenge_id() const;
  void _internal_set_curr_all_hero_challenge_id(uint32_t value);
  public:

  // optional uint32 play_time_points = 68;
  bool has_play_time_points() const;
  private:
  bool _internal_has_play_time_points() const;
  public:
  void clear_play_time_points();
  uint32_t play_time_points() const;
  void set_play_time_points(uint32_t value);
  private:
  uint32_t _internal_play_time_points() const;
  void _internal_set_play_time_points(uint32_t value);
  public:

  // optional uint32 account_flags = 69;
  bool has_account_flags() const;
  private:
  bool _internal_has_account_flags() const;
  public:
  void clear_account_flags();
  uint32_t account_flags() const;
  void set_account_flags(uint32_t value);
  private:
  uint32_t _internal_account_flags() const;
  void _internal_set_account_flags(uint32_t value);
  public:

  // optional uint32 play_time_level = 70;
  bool has_play_time_level() const;
  private:
  bool _internal_has_play_time_level() const;
  public:
  void clear_play_time_level();
  uint32_t play_time_level() const;
  void set_play_time_level(uint32_t value);
  private:
  uint32_t _internal_play_time_level() const;
  void _internal_set_play_time_level(uint32_t value);
  public:

  // optional uint32 player_behavior_seq_num_last_report = 71;
  bool has_player_behavior_seq_num_last_report() const;
  private:
  bool _internal_has_player_behavior_seq_num_last_report() const;
  public:
  void clear_player_behavior_seq_num_last_report();
  uint32_t player_behavior_seq_num_last_report() const;
  void set_player_behavior_seq_num_last_report(uint32_t value);
  private:
  uint32_t _internal_player_behavior_seq_num_last_report() const;
  void _internal_set_player_behavior_seq_num_last_report(uint32_t value);
  public:

  // optional uint32 player_behavior_score_last_report = 72;
  bool has_player_behavior_score_last_report() const;
  private:
  bool _internal_has_player_behavior_score_last_report() const;
  public:
  void clear_player_behavior_score_last_report();
  uint32_t player_behavior_score_last_report() const;
  void set_player_behavior_score_last_report(uint32_t value);
  private:
  uint32_t _internal_player_behavior_score_last_report() const;
  void _internal_set_player_behavior_score_last_report(uint32_t value);
  public:

  // optional uint32 tourney_skill_level = 74;
  bool has_tourney_skill_level() const;
  private:
  bool _internal_has_tourney_skill_level() const;
  public:
  void clear_tourney_skill_level();
  uint32_t tourney_skill_level() const;
  void set_tourney_skill_level(uint32_t value);
  private:
  uint32_t _internal_tourney_skill_level() const;
  void _internal_set_tourney_skill_level(uint32_t value);
  public:

  // optional uint32 tourney_recent_participation_date = 85;
  bool has_tourney_recent_participation_date() const;
  private:
  bool _internal_has_tourney_recent_participation_date() const;
  public:
  void clear_tourney_recent_participation_date();
  uint32_t tourney_recent_participation_date() const;
  void set_tourney_recent_participation_date(uint32_t value);
  private:
  uint32_t _internal_tourney_recent_participation_date() const;
  void _internal_set_tourney_recent_participation_date(uint32_t value);
  public:

  // optional uint32 prevent_public_text_chat_until_date = 86;
  bool has_prevent_public_text_chat_until_date() const;
  private:
  bool _internal_has_prevent_public_text_chat_until_date() const;
  public:
  void clear_prevent_public_text_chat_until_date();
  uint32_t prevent_public_text_chat_until_date() const;
  void set_prevent_public_text_chat_until_date(uint32_t value);
  private:
  uint32_t _internal_prevent_public_text_chat_until_date() const;
  void _internal_set_prevent_public_text_chat_until_date(uint32_t value);
  public:

  // optional uint64 anchored_phone_number_id = 88;
  bool has_anchored_phone_number_id() const;
  private:
  bool _internal_has_anchored_phone_number_id() const;
  public:
  void clear_anchored_phone_number_id();
  uint64_t anchored_phone_number_id() const;
  void set_anchored_phone_number_id(uint64_t value);
  private:
  uint64_t _internal_anchored_phone_number_id() const;
  void _internal_set_anchored_phone_number_id(uint64_t value);
  public:

  // optional uint32 ranked_matchmaking_ban_until_date = 89;
  bool has_ranked_matchmaking_ban_until_date() const;
  private:
  bool _internal_has_ranked_matchmaking_ban_until_date() const;
  public:
  void clear_ranked_matchmaking_ban_until_date();
  uint32_t ranked_matchmaking_ban_until_date() const;
  void set_ranked_matchmaking_ban_until_date(uint32_t value);
  private:
  uint32_t _internal_ranked_matchmaking_ban_until_date() const;
  void _internal_set_ranked_matchmaking_ban_until_date(uint32_t value);
  public:

  // optional uint32 recent_game_time_1 = 90;
  bool has_recent_game_time_1() const;
  private:
  bool _internal_has_recent_game_time_1() const;
  public:
  void clear_recent_game_time_1();
  uint32_t recent_game_time_1() const;
  void set_recent_game_time_1(uint32_t value);
  private:
  uint32_t _internal_recent_game_time_1() const;
  void _internal_set_recent_game_time_1(uint32_t value);
  public:

  // optional uint32 recent_game_time_2 = 91;
  bool has_recent_game_time_2() const;
  private:
  bool _internal_has_recent_game_time_2() const;
  public:
  void clear_recent_game_time_2();
  uint32_t recent_game_time_2() const;
  void set_recent_game_time_2(uint32_t value);
  private:
  uint32_t _internal_recent_game_time_2() const;
  void _internal_set_recent_game_time_2(uint32_t value);
  public:

  // optional uint32 recent_game_time_3 = 92;
  bool has_recent_game_time_3() const;
  private:
  bool _internal_has_recent_game_time_3() const;
  public:
  void clear_recent_game_time_3();
  uint32_t recent_game_time_3() const;
  void set_recent_game_time_3(uint32_t value);
  private:
  uint32_t _internal_recent_game_time_3() const;
  void _internal_set_recent_game_time_3(uint32_t value);
  public:

  // optional uint64 favorite_team_packed = 103;
  bool has_favorite_team_packed() const;
  private:
  bool _internal_has_favorite_team_packed() const;
  public:
  void clear_favorite_team_packed();
  uint64_t favorite_team_packed() const;
  void set_favorite_team_packed(uint64_t value);
  private:
  uint64_t _internal_favorite_team_packed() const;
  void _internal_set_favorite_team_packed(uint64_t value);
  public:

  // optional uint32 recent_report_time = 104;
  bool has_recent_report_time() const;
  private:
  bool _internal_has_recent_report_time() const;
  public:
  void clear_recent_report_time();
  uint32_t recent_report_time() const;
  void set_recent_report_time(uint32_t value);
  private:
  uint32_t _internal_recent_report_time() const;
  void _internal_set_recent_report_time(uint32_t value);
  public:

  // optional uint32 custom_game_disabled_until_date = 105;
  bool has_custom_game_disabled_until_date() const;
  private:
  bool _internal_has_custom_game_disabled_until_date() const;
  public:
  void clear_custom_game_disabled_until_date();
  uint32_t custom_game_disabled_until_date() const;
  void set_custom_game_disabled_until_date(uint32_t value);
  private:
  uint32_t _internal_custom_game_disabled_until_date() const;
  void _internal_set_custom_game_disabled_until_date(uint32_t value);
  public:

  // optional uint32 recent_win_time_1 = 106;
  bool has_recent_win_time_1() const;
  private:
  bool _internal_has_recent_win_time_1() const;
  public:
  void clear_recent_win_time_1();
  uint32_t recent_win_time_1() const;
  void set_recent_win_time_1(uint32_t value);
  private:
  uint32_t _internal_recent_win_time_1() const;
  void _internal_set_recent_win_time_1(uint32_t value);
  public:

  // optional uint32 recent_win_time_2 = 107;
  bool has_recent_win_time_2() const;
  private:
  bool _internal_has_recent_win_time_2() const;
  public:
  void clear_recent_win_time_2();
  uint32_t recent_win_time_2() const;
  void set_recent_win_time_2(uint32_t value);
  private:
  uint32_t _internal_recent_win_time_2() const;
  void _internal_set_recent_win_time_2(uint32_t value);
  public:

  // optional uint32 recent_win_time_3 = 108;
  bool has_recent_win_time_3() const;
  private:
  bool _internal_has_recent_win_time_3() const;
  public:
  void clear_recent_win_time_3();
  uint32_t recent_win_time_3() const;
  void set_recent_win_time_3(uint32_t value);
  private:
  uint32_t _internal_recent_win_time_3() const;
  void _internal_set_recent_win_time_3(uint32_t value);
  public:

  // optional uint32 coach_rating = 109;
  bool has_coach_rating() const;
  private:
  bool _internal_has_coach_rating() const;
  public:
  void clear_coach_rating();
  uint32_t coach_rating() const;
  void set_coach_rating(uint32_t value);
  private:
  uint32_t _internal_coach_rating() const;
  void _internal_set_coach_rating(uint32_t value);
  public:

  // optional uint32 queue_points = 114;
  bool has_queue_points() const;
  private:
  bool _internal_has_queue_points() const;
  public:
  void clear_queue_points();
  uint32_t queue_points() const;
  void set_queue_points(uint32_t value);
  private:
  uint32_t _internal_queue_points() const;
  void _internal_set_queue_points(uint32_t value);
  public:

  // optional uint32 event_mode_recent_time = 120;
  bool has_event_mode_recent_time() const;
  private:
  bool _internal_has_event_mode_recent_time() const;
  public:
  void clear_event_mode_recent_time();
  uint32_t event_mode_recent_time() const;
  void set_event_mode_recent_time(uint32_t value);
  private:
  uint32_t _internal_event_mode_recent_time() const;
  void _internal_set_event_mode_recent_time(uint32_t value);
  public:

  // optional uint32 mmr_recalibration_time = 121;
  bool has_mmr_recalibration_time() const;
  private:
  bool _internal_has_mmr_recalibration_time() const;
  public:
  void clear_mmr_recalibration_time();
  uint32_t mmr_recalibration_time() const;
  void set_mmr_recalibration_time(uint32_t value);
  private:
  uint32_t _internal_mmr_recalibration_time() const;
  void _internal_set_mmr_recalibration_time(uint32_t value);
  public:

  // optional uint32 prevent_new_player_chat_until_date = 122;
  bool has_prevent_new_player_chat_until_date() const;
  private:
  bool _internal_has_prevent_new_player_chat_until_date() const;
  public:
  void clear_prevent_new_player_chat_until_date();
  uint32_t prevent_new_player_chat_until_date() const;
  void set_prevent_new_player_chat_until_date(uint32_t value);
  private:
  uint32_t _internal_prevent_new_player_chat_until_date() const;
  void _internal_set_prevent_new_player_chat_until_date(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAGameAccountClient_RoleHandicap > role_handicaps_;
    uint32_t account_id_;
    uint32_t wins_;
    uint32_t losses_;
    uint32_t xp_;
    uint32_t level_;
    uint32_t initial_skill_;
    uint32_t leaver_count_;
    uint32_t low_priority_until_date_;
    uint32_t prevent_text_chat_until_date_;
    uint32_t prevent_voice_until_date_;
    uint32_t last_abandoned_game_date_;
    uint32_t leaver_penalty_count_;
    uint32_t completed_game_streak_;
    uint32_t account_disabled_until_date_;
    uint32_t account_disabled_count_;
    uint32_t match_disabled_until_date_;
    uint32_t match_disabled_count_;
    uint32_t shutdownlawterminatetimestamp_;
    uint32_t low_priority_games_remaining_;
    uint32_t competitive_rank_;
    uint32_t competitive_calibration_games_remaining_;
    uint32_t recruitment_level_;
    uint32_t secondary_leaver_count_;
    uint32_t last_secondary_abandoned_game_date_;
    uint32_t casual_games_played_;
    uint32_t solo_competitive_games_played_;
    uint32_t party_competitive_games_played_;
    bool has_new_notifications_;
    bool is_league_admin_;
    bool player_behavior_report_old_data_;
    uint32_t casual_1v1_games_played_;
    uint32_t curr_all_hero_challenge_id_;
    uint32_t play_time_points_;
    uint32_t account_flags_;
    uint32_t play_time_level_;
    uint32_t player_behavior_seq_num_last_report_;
    uint32_t player_behavior_score_last_report_;
    uint32_t tourney_skill_level_;
    uint32_t tourney_recent_participation_date_;
    uint32_t prevent_public_text_chat_until_date_;
    uint64_t anchored_phone_number_id_;
    uint32_t ranked_matchmaking_ban_until_date_;
    uint32_t recent_game_time_1_;
    uint32_t recent_game_time_2_;
    uint32_t recent_game_time_3_;
    uint64_t favorite_team_packed_;
    uint32_t recent_report_time_;
    uint32_t custom_game_disabled_until_date_;
    uint32_t recent_win_time_1_;
    uint32_t recent_win_time_2_;
    uint32_t recent_win_time_3_;
    uint32_t coach_rating_;
    uint32_t queue_points_;
    uint32_t event_mode_recent_time_;
    uint32_t mmr_recalibration_time_;
    uint32_t prevent_new_player_chat_until_date_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAGameAccountPlus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAGameAccountPlus) */ {
 public:
  inline CSODOTAGameAccountPlus() : CSODOTAGameAccountPlus(nullptr) {}
  ~CSODOTAGameAccountPlus() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAGameAccountPlus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAGameAccountPlus(const CSODOTAGameAccountPlus& from);
  CSODOTAGameAccountPlus(CSODOTAGameAccountPlus&& from) noexcept
    : CSODOTAGameAccountPlus() {
    *this = ::std::move(from);
  }

  inline CSODOTAGameAccountPlus& operator=(const CSODOTAGameAccountPlus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAGameAccountPlus& operator=(CSODOTAGameAccountPlus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAGameAccountPlus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAGameAccountPlus* internal_default_instance() {
    return reinterpret_cast<const CSODOTAGameAccountPlus*>(
               &_CSODOTAGameAccountPlus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSODOTAGameAccountPlus& a, CSODOTAGameAccountPlus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAGameAccountPlus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAGameAccountPlus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAGameAccountPlus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAGameAccountPlus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAGameAccountPlus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAGameAccountPlus& from) {
    CSODOTAGameAccountPlus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAGameAccountPlus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAGameAccountPlus";
  }
  protected:
  explicit CSODOTAGameAccountPlus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kOriginalStartDateFieldNumber = 2,
    kPlusFlagsFieldNumber = 3,
    kPlusStatusFieldNumber = 4,
    kPrepaidTimeStartFieldNumber = 5,
    kPrepaidTimeBalanceFieldNumber = 6,
    kSteamAgreementIdFieldNumber = 8,
    kNextPaymentDateFieldNumber = 7,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 original_start_date = 2;
  bool has_original_start_date() const;
  private:
  bool _internal_has_original_start_date() const;
  public:
  void clear_original_start_date();
  uint32_t original_start_date() const;
  void set_original_start_date(uint32_t value);
  private:
  uint32_t _internal_original_start_date() const;
  void _internal_set_original_start_date(uint32_t value);
  public:

  // optional uint32 plus_flags = 3;
  bool has_plus_flags() const;
  private:
  bool _internal_has_plus_flags() const;
  public:
  void clear_plus_flags();
  uint32_t plus_flags() const;
  void set_plus_flags(uint32_t value);
  private:
  uint32_t _internal_plus_flags() const;
  void _internal_set_plus_flags(uint32_t value);
  public:

  // optional uint32 plus_status = 4;
  bool has_plus_status() const;
  private:
  bool _internal_has_plus_status() const;
  public:
  void clear_plus_status();
  uint32_t plus_status() const;
  void set_plus_status(uint32_t value);
  private:
  uint32_t _internal_plus_status() const;
  void _internal_set_plus_status(uint32_t value);
  public:

  // optional uint32 prepaid_time_start = 5;
  bool has_prepaid_time_start() const;
  private:
  bool _internal_has_prepaid_time_start() const;
  public:
  void clear_prepaid_time_start();
  uint32_t prepaid_time_start() const;
  void set_prepaid_time_start(uint32_t value);
  private:
  uint32_t _internal_prepaid_time_start() const;
  void _internal_set_prepaid_time_start(uint32_t value);
  public:

  // optional uint32 prepaid_time_balance = 6;
  bool has_prepaid_time_balance() const;
  private:
  bool _internal_has_prepaid_time_balance() const;
  public:
  void clear_prepaid_time_balance();
  uint32_t prepaid_time_balance() const;
  void set_prepaid_time_balance(uint32_t value);
  private:
  uint32_t _internal_prepaid_time_balance() const;
  void _internal_set_prepaid_time_balance(uint32_t value);
  public:

  // optional fixed64 steam_agreement_id = 8;
  bool has_steam_agreement_id() const;
  private:
  bool _internal_has_steam_agreement_id() const;
  public:
  void clear_steam_agreement_id();
  uint64_t steam_agreement_id() const;
  void set_steam_agreement_id(uint64_t value);
  private:
  uint64_t _internal_steam_agreement_id() const;
  void _internal_set_steam_agreement_id(uint64_t value);
  public:

  // optional fixed32 next_payment_date = 7;
  bool has_next_payment_date() const;
  private:
  bool _internal_has_next_payment_date() const;
  public:
  void clear_next_payment_date();
  uint32_t next_payment_date() const;
  void set_next_payment_date(uint32_t value);
  private:
  uint32_t _internal_next_payment_date() const;
  void _internal_set_next_payment_date(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountPlus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t original_start_date_;
    uint32_t plus_flags_;
    uint32_t plus_status_;
    uint32_t prepaid_time_start_;
    uint32_t prepaid_time_balance_;
    uint64_t steam_agreement_id_;
    uint32_t next_payment_date_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyFeaturedGamemodeProgress_AccountProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyFeaturedGamemodeProgress.AccountProgress) */ {
 public:
  inline CMsgLobbyFeaturedGamemodeProgress_AccountProgress() : CMsgLobbyFeaturedGamemodeProgress_AccountProgress(nullptr) {}
  ~CMsgLobbyFeaturedGamemodeProgress_AccountProgress() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyFeaturedGamemodeProgress_AccountProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyFeaturedGamemodeProgress_AccountProgress(const CMsgLobbyFeaturedGamemodeProgress_AccountProgress& from);
  CMsgLobbyFeaturedGamemodeProgress_AccountProgress(CMsgLobbyFeaturedGamemodeProgress_AccountProgress&& from) noexcept
    : CMsgLobbyFeaturedGamemodeProgress_AccountProgress() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyFeaturedGamemodeProgress_AccountProgress& operator=(const CMsgLobbyFeaturedGamemodeProgress_AccountProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyFeaturedGamemodeProgress_AccountProgress& operator=(CMsgLobbyFeaturedGamemodeProgress_AccountProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyFeaturedGamemodeProgress_AccountProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyFeaturedGamemodeProgress_AccountProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyFeaturedGamemodeProgress_AccountProgress*>(
               &_CMsgLobbyFeaturedGamemodeProgress_AccountProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgLobbyFeaturedGamemodeProgress_AccountProgress& a, CMsgLobbyFeaturedGamemodeProgress_AccountProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyFeaturedGamemodeProgress_AccountProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyFeaturedGamemodeProgress_AccountProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyFeaturedGamemodeProgress_AccountProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyFeaturedGamemodeProgress_AccountProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyFeaturedGamemodeProgress_AccountProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyFeaturedGamemodeProgress_AccountProgress& from) {
    CMsgLobbyFeaturedGamemodeProgress_AccountProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyFeaturedGamemodeProgress_AccountProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyFeaturedGamemodeProgress.AccountProgress";
  }
  protected:
  explicit CMsgLobbyFeaturedGamemodeProgress_AccountProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kCurrentValueFieldNumber = 2,
    kMaxValueFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 current_value = 2;
  bool has_current_value() const;
  private:
  bool _internal_has_current_value() const;
  public:
  void clear_current_value();
  uint32_t current_value() const;
  void set_current_value(uint32_t value);
  private:
  uint32_t _internal_current_value() const;
  void _internal_set_current_value(uint32_t value);
  public:

  // optional uint32 max_value = 3;
  bool has_max_value() const;
  private:
  bool _internal_has_max_value() const;
  public:
  void clear_max_value();
  uint32_t max_value() const;
  void set_max_value(uint32_t value);
  private:
  uint32_t _internal_max_value() const;
  void _internal_set_max_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyFeaturedGamemodeProgress.AccountProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t current_value_;
    uint32_t max_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyFeaturedGamemodeProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyFeaturedGamemodeProgress) */ {
 public:
  inline CMsgLobbyFeaturedGamemodeProgress() : CMsgLobbyFeaturedGamemodeProgress(nullptr) {}
  ~CMsgLobbyFeaturedGamemodeProgress() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyFeaturedGamemodeProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyFeaturedGamemodeProgress(const CMsgLobbyFeaturedGamemodeProgress& from);
  CMsgLobbyFeaturedGamemodeProgress(CMsgLobbyFeaturedGamemodeProgress&& from) noexcept
    : CMsgLobbyFeaturedGamemodeProgress() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyFeaturedGamemodeProgress& operator=(const CMsgLobbyFeaturedGamemodeProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyFeaturedGamemodeProgress& operator=(CMsgLobbyFeaturedGamemodeProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyFeaturedGamemodeProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyFeaturedGamemodeProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyFeaturedGamemodeProgress*>(
               &_CMsgLobbyFeaturedGamemodeProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgLobbyFeaturedGamemodeProgress& a, CMsgLobbyFeaturedGamemodeProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyFeaturedGamemodeProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyFeaturedGamemodeProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyFeaturedGamemodeProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyFeaturedGamemodeProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyFeaturedGamemodeProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyFeaturedGamemodeProgress& from) {
    CMsgLobbyFeaturedGamemodeProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyFeaturedGamemodeProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyFeaturedGamemodeProgress";
  }
  protected:
  explicit CMsgLobbyFeaturedGamemodeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgLobbyFeaturedGamemodeProgress_AccountProgress AccountProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .CMsgLobbyFeaturedGamemodeProgress.AccountProgress accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress >*
      mutable_accounts();
  private:
  const ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress& _internal_accounts(int index) const;
  ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* _internal_add_accounts();
  public:
  const ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress& accounts(int index) const;
  ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:CMsgLobbyFeaturedGamemodeProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress > accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleCupVictory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleCupVictory) */ {
 public:
  inline CMsgBattleCupVictory() : CMsgBattleCupVictory(nullptr) {}
  ~CMsgBattleCupVictory() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleCupVictory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleCupVictory(const CMsgBattleCupVictory& from);
  CMsgBattleCupVictory(CMsgBattleCupVictory&& from) noexcept
    : CMsgBattleCupVictory() {
    *this = ::std::move(from);
  }

  inline CMsgBattleCupVictory& operator=(const CMsgBattleCupVictory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleCupVictory& operator=(CMsgBattleCupVictory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleCupVictory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleCupVictory* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleCupVictory*>(
               &_CMsgBattleCupVictory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgBattleCupVictory& a, CMsgBattleCupVictory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleCupVictory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleCupVictory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleCupVictory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleCupVictory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleCupVictory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleCupVictory& from) {
    CMsgBattleCupVictory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleCupVictory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleCupVictory";
  }
  protected:
  explicit CMsgBattleCupVictory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kWinDateFieldNumber = 2,
    kValidUntilFieldNumber = 3,
    kSkillLevelFieldNumber = 4,
    kTournamentIdFieldNumber = 5,
    kDivisionIdFieldNumber = 6,
    kTeamIdFieldNumber = 7,
    kStreakFieldNumber = 8,
    kTrophyIdFieldNumber = 9,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 win_date = 2;
  bool has_win_date() const;
  private:
  bool _internal_has_win_date() const;
  public:
  void clear_win_date();
  uint32_t win_date() const;
  void set_win_date(uint32_t value);
  private:
  uint32_t _internal_win_date() const;
  void _internal_set_win_date(uint32_t value);
  public:

  // optional uint32 valid_until = 3;
  bool has_valid_until() const;
  private:
  bool _internal_has_valid_until() const;
  public:
  void clear_valid_until();
  uint32_t valid_until() const;
  void set_valid_until(uint32_t value);
  private:
  uint32_t _internal_valid_until() const;
  void _internal_set_valid_until(uint32_t value);
  public:

  // optional uint32 skill_level = 4;
  bool has_skill_level() const;
  private:
  bool _internal_has_skill_level() const;
  public:
  void clear_skill_level();
  uint32_t skill_level() const;
  void set_skill_level(uint32_t value);
  private:
  uint32_t _internal_skill_level() const;
  void _internal_set_skill_level(uint32_t value);
  public:

  // optional uint32 tournament_id = 5;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // optional uint32 division_id = 6;
  bool has_division_id() const;
  private:
  bool _internal_has_division_id() const;
  public:
  void clear_division_id();
  uint32_t division_id() const;
  void set_division_id(uint32_t value);
  private:
  uint32_t _internal_division_id() const;
  void _internal_set_division_id(uint32_t value);
  public:

  // optional uint32 team_id = 7;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 streak = 8;
  bool has_streak() const;
  private:
  bool _internal_has_streak() const;
  public:
  void clear_streak();
  uint32_t streak() const;
  void set_streak(uint32_t value);
  private:
  uint32_t _internal_streak() const;
  void _internal_set_streak(uint32_t value);
  public:

  // optional uint32 trophy_id = 9;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleCupVictory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t win_date_;
    uint32_t valid_until_;
    uint32_t skill_level_;
    uint32_t tournament_id_;
    uint32_t division_id_;
    uint32_t team_id_;
    uint32_t streak_;
    uint32_t trophy_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyBattleCupVictoryList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyBattleCupVictoryList) */ {
 public:
  inline CMsgLobbyBattleCupVictoryList() : CMsgLobbyBattleCupVictoryList(nullptr) {}
  ~CMsgLobbyBattleCupVictoryList() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyBattleCupVictoryList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyBattleCupVictoryList(const CMsgLobbyBattleCupVictoryList& from);
  CMsgLobbyBattleCupVictoryList(CMsgLobbyBattleCupVictoryList&& from) noexcept
    : CMsgLobbyBattleCupVictoryList() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyBattleCupVictoryList& operator=(const CMsgLobbyBattleCupVictoryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyBattleCupVictoryList& operator=(CMsgLobbyBattleCupVictoryList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyBattleCupVictoryList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyBattleCupVictoryList* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyBattleCupVictoryList*>(
               &_CMsgLobbyBattleCupVictoryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgLobbyBattleCupVictoryList& a, CMsgLobbyBattleCupVictoryList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyBattleCupVictoryList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyBattleCupVictoryList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyBattleCupVictoryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyBattleCupVictoryList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyBattleCupVictoryList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyBattleCupVictoryList& from) {
    CMsgLobbyBattleCupVictoryList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyBattleCupVictoryList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyBattleCupVictoryList";
  }
  protected:
  explicit CMsgLobbyBattleCupVictoryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinnersFieldNumber = 1,
  };
  // repeated .CMsgBattleCupVictory winners = 1;
  int winners_size() const;
  private:
  int _internal_winners_size() const;
  public:
  void clear_winners();
  ::CMsgBattleCupVictory* mutable_winners(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleCupVictory >*
      mutable_winners();
  private:
  const ::CMsgBattleCupVictory& _internal_winners(int index) const;
  ::CMsgBattleCupVictory* _internal_add_winners();
  public:
  const ::CMsgBattleCupVictory& winners(int index) const;
  ::CMsgBattleCupVictory* add_winners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleCupVictory >&
      winners() const;

  // @@protoc_insertion_point(class_scope:CMsgLobbyBattleCupVictoryList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleCupVictory > winners_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABroadcastNotification) */ {
 public:
  inline CMsgDOTABroadcastNotification() : CMsgDOTABroadcastNotification(nullptr) {}
  ~CMsgDOTABroadcastNotification() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTABroadcastNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from);
  CMsgDOTABroadcastNotification(CMsgDOTABroadcastNotification&& from) noexcept
    : CMsgDOTABroadcastNotification() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABroadcastNotification& operator=(const CMsgDOTABroadcastNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTABroadcastNotification& operator=(CMsgDOTABroadcastNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTABroadcastNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTABroadcastNotification* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABroadcastNotification*>(
               &_CMsgDOTABroadcastNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgDOTABroadcastNotification& a, CMsgDOTABroadcastNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTABroadcastNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTABroadcastNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTABroadcastNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTABroadcastNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTABroadcastNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTABroadcastNotification& from) {
    CMsgDOTABroadcastNotification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABroadcastNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTABroadcastNotification";
  }
  protected:
  explicit CMsgDOTABroadcastNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTABroadcastNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CProtoItemHeroStatue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CProtoItemHeroStatue) */ {
 public:
  inline CProtoItemHeroStatue() : CProtoItemHeroStatue(nullptr) {}
  ~CProtoItemHeroStatue() override;
  explicit PROTOBUF_CONSTEXPR CProtoItemHeroStatue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CProtoItemHeroStatue(const CProtoItemHeroStatue& from);
  CProtoItemHeroStatue(CProtoItemHeroStatue&& from) noexcept
    : CProtoItemHeroStatue() {
    *this = ::std::move(from);
  }

  inline CProtoItemHeroStatue& operator=(const CProtoItemHeroStatue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CProtoItemHeroStatue& operator=(CProtoItemHeroStatue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CProtoItemHeroStatue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CProtoItemHeroStatue* internal_default_instance() {
    return reinterpret_cast<const CProtoItemHeroStatue*>(
               &_CProtoItemHeroStatue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CProtoItemHeroStatue& a, CProtoItemHeroStatue& b) {
    a.Swap(&b);
  }
  inline void Swap(CProtoItemHeroStatue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CProtoItemHeroStatue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CProtoItemHeroStatue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CProtoItemHeroStatue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CProtoItemHeroStatue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CProtoItemHeroStatue& from) {
    CProtoItemHeroStatue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CProtoItemHeroStatue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CProtoItemHeroStatue";
  }
  protected:
  explicit CProtoItemHeroStatue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWearableFieldNumber = 5,
    kStyleFieldNumber = 7,
    kSequenceNameFieldNumber = 3,
    kInscriptionFieldNumber = 6,
    kHeroIdFieldNumber = 1,
    kStatusEffectIndexFieldNumber = 2,
    kCycleFieldNumber = 4,
    kTournamentDropFieldNumber = 8,
  };
  // repeated uint32 wearable = 5;
  int wearable_size() const;
  private:
  int _internal_wearable_size() const;
  public:
  void clear_wearable();
  private:
  uint32_t _internal_wearable(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_wearable() const;
  void _internal_add_wearable(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_wearable();
  public:
  uint32_t wearable(int index) const;
  void set_wearable(int index, uint32_t value);
  void add_wearable(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      wearable() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_wearable();

  // repeated uint32 style = 7;
  int style_size() const;
  private:
  int _internal_style_size() const;
  public:
  void clear_style();
  private:
  uint32_t _internal_style(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_style() const;
  void _internal_add_style(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_style();
  public:
  uint32_t style(int index) const;
  void set_style(int index, uint32_t value);
  void add_style(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      style() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_style();

  // optional string sequence_name = 3;
  bool has_sequence_name() const;
  private:
  bool _internal_has_sequence_name() const;
  public:
  void clear_sequence_name();
  const std::string& sequence_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sequence_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sequence_name();
  PROTOBUF_NODISCARD std::string* release_sequence_name();
  void set_allocated_sequence_name(std::string* sequence_name);
  private:
  const std::string& _internal_sequence_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sequence_name(const std::string& value);
  std::string* _internal_mutable_sequence_name();
  public:

  // optional string inscription = 6;
  bool has_inscription() const;
  private:
  bool _internal_has_inscription() const;
  public:
  void clear_inscription();
  const std::string& inscription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inscription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inscription();
  PROTOBUF_NODISCARD std::string* release_inscription();
  void set_allocated_inscription(std::string* inscription);
  private:
  const std::string& _internal_inscription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inscription(const std::string& value);
  std::string* _internal_mutable_inscription();
  public:

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 status_effect_index = 2;
  bool has_status_effect_index() const;
  private:
  bool _internal_has_status_effect_index() const;
  public:
  void clear_status_effect_index();
  uint32_t status_effect_index() const;
  void set_status_effect_index(uint32_t value);
  private:
  uint32_t _internal_status_effect_index() const;
  void _internal_set_status_effect_index(uint32_t value);
  public:

  // optional float cycle = 4;
  bool has_cycle() const;
  private:
  bool _internal_has_cycle() const;
  public:
  void clear_cycle();
  float cycle() const;
  void set_cycle(float value);
  private:
  float _internal_cycle() const;
  void _internal_set_cycle(float value);
  public:

  // optional bool tournament_drop = 8;
  bool has_tournament_drop() const;
  private:
  bool _internal_has_tournament_drop() const;
  public:
  void clear_tournament_drop();
  bool tournament_drop() const;
  void set_tournament_drop(bool value);
  private:
  bool _internal_tournament_drop() const;
  void _internal_set_tournament_drop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CProtoItemHeroStatue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > wearable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > style_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inscription_;
    uint32_t hero_id_;
    uint32_t status_effect_index_;
    float cycle_;
    bool tournament_drop_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchPlayerAbilityUpgrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMatchPlayerAbilityUpgrade) */ {
 public:
  inline CMatchPlayerAbilityUpgrade() : CMatchPlayerAbilityUpgrade(nullptr) {}
  ~CMatchPlayerAbilityUpgrade() override;
  explicit PROTOBUF_CONSTEXPR CMatchPlayerAbilityUpgrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from);
  CMatchPlayerAbilityUpgrade(CMatchPlayerAbilityUpgrade&& from) noexcept
    : CMatchPlayerAbilityUpgrade() {
    *this = ::std::move(from);
  }

  inline CMatchPlayerAbilityUpgrade& operator=(const CMatchPlayerAbilityUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchPlayerAbilityUpgrade& operator=(CMatchPlayerAbilityUpgrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMatchPlayerAbilityUpgrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMatchPlayerAbilityUpgrade* internal_default_instance() {
    return reinterpret_cast<const CMatchPlayerAbilityUpgrade*>(
               &_CMatchPlayerAbilityUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMatchPlayerAbilityUpgrade& a, CMatchPlayerAbilityUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchPlayerAbilityUpgrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMatchPlayerAbilityUpgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMatchPlayerAbilityUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMatchPlayerAbilityUpgrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMatchPlayerAbilityUpgrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMatchPlayerAbilityUpgrade& from) {
    CMatchPlayerAbilityUpgrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchPlayerAbilityUpgrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMatchPlayerAbilityUpgrade";
  }
  protected:
  explicit CMatchPlayerAbilityUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kAbilityFieldNumber = 1,
  };
  // optional uint32 time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // optional int32 ability = 1 [default = -1];
  bool has_ability() const;
  private:
  bool _internal_has_ability() const;
  public:
  void clear_ability();
  int32_t ability() const;
  void set_ability(int32_t value);
  private:
  int32_t _internal_ability() const;
  void _internal_set_ability(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMatchPlayerAbilityUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t time_;
    int32_t ability_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchPlayerTimedStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMatchPlayerTimedStats) */ {
 public:
  inline CMatchPlayerTimedStats() : CMatchPlayerTimedStats(nullptr) {}
  ~CMatchPlayerTimedStats() override;
  explicit PROTOBUF_CONSTEXPR CMatchPlayerTimedStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMatchPlayerTimedStats(const CMatchPlayerTimedStats& from);
  CMatchPlayerTimedStats(CMatchPlayerTimedStats&& from) noexcept
    : CMatchPlayerTimedStats() {
    *this = ::std::move(from);
  }

  inline CMatchPlayerTimedStats& operator=(const CMatchPlayerTimedStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchPlayerTimedStats& operator=(CMatchPlayerTimedStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMatchPlayerTimedStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMatchPlayerTimedStats* internal_default_instance() {
    return reinterpret_cast<const CMatchPlayerTimedStats*>(
               &_CMatchPlayerTimedStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMatchPlayerTimedStats& a, CMatchPlayerTimedStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchPlayerTimedStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMatchPlayerTimedStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMatchPlayerTimedStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMatchPlayerTimedStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMatchPlayerTimedStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMatchPlayerTimedStats& from) {
    CMatchPlayerTimedStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchPlayerTimedStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMatchPlayerTimedStats";
  }
  protected:
  explicit CMatchPlayerTimedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kKillsFieldNumber = 2,
    kDeathsFieldNumber = 3,
    kAssistsFieldNumber = 4,
    kNetWorthFieldNumber = 5,
    kXpFieldNumber = 6,
    kLastHitsFieldNumber = 7,
    kDeniesFieldNumber = 8,
    kBountyRuneGoldFieldNumber = 9,
    kRangeCreepUpgradeGoldFieldNumber = 10,
    kObserverWardsDewardedFieldNumber = 11,
    kReliableGoldEarnedFieldNumber = 12,
    kGoldLossPreventedFieldNumber = 13,
    kHeroKillGoldFieldNumber = 14,
    kCreepKillGoldFieldNumber = 15,
    kBuildingGoldFieldNumber = 16,
    kOtherGoldFieldNumber = 17,
    kComebackGoldFieldNumber = 18,
    kExperimentalGoldFieldNumber = 19,
    kExperimental2GoldFieldNumber = 20,
    kCreepDenyGoldFieldNumber = 21,
    kTpScrollsPurchased1FieldNumber = 22,
    kTpScrollsPurchased2FieldNumber = 23,
    kTpScrollsPurchased3FieldNumber = 24,
    kTpScrollsPurchased4FieldNumber = 25,
    kTpScrollsPurchased5FieldNumber = 26,
    kNeutralGoldFieldNumber = 27,
    kCourierGoldFieldNumber = 28,
    kRoshanGoldFieldNumber = 29,
    kIncomeGoldFieldNumber = 30,
    kCustomStats1FieldNumber = 31,
    kCustomStats2FieldNumber = 32,
    kCustomStats3FieldNumber = 33,
    kCustomStats4FieldNumber = 34,
    kCustomStats5FieldNumber = 35,
    kItemValueFieldNumber = 36,
    kSupportGoldSpentFieldNumber = 37,
    kCampsStackedFieldNumber = 38,
    kWardsPlacedFieldNumber = 39,
    kTripleKillsFieldNumber = 40,
    kRampagesFieldNumber = 41,
  };
  // optional uint32 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // optional uint32 kills = 2;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 3;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 4;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 net_worth = 5;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 xp = 6;
  bool has_xp() const;
  private:
  bool _internal_has_xp() const;
  public:
  void clear_xp();
  uint32_t xp() const;
  void set_xp(uint32_t value);
  private:
  uint32_t _internal_xp() const;
  void _internal_set_xp(uint32_t value);
  public:

  // optional uint32 last_hits = 7;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  uint32_t last_hits() const;
  void set_last_hits(uint32_t value);
  private:
  uint32_t _internal_last_hits() const;
  void _internal_set_last_hits(uint32_t value);
  public:

  // optional uint32 denies = 8;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  uint32_t denies() const;
  void set_denies(uint32_t value);
  private:
  uint32_t _internal_denies() const;
  void _internal_set_denies(uint32_t value);
  public:

  // optional uint32 bounty_rune_gold = 9;
  bool has_bounty_rune_gold() const;
  private:
  bool _internal_has_bounty_rune_gold() const;
  public:
  void clear_bounty_rune_gold();
  uint32_t bounty_rune_gold() const;
  void set_bounty_rune_gold(uint32_t value);
  private:
  uint32_t _internal_bounty_rune_gold() const;
  void _internal_set_bounty_rune_gold(uint32_t value);
  public:

  // optional uint32 range_creep_upgrade_gold = 10;
  bool has_range_creep_upgrade_gold() const;
  private:
  bool _internal_has_range_creep_upgrade_gold() const;
  public:
  void clear_range_creep_upgrade_gold();
  uint32_t range_creep_upgrade_gold() const;
  void set_range_creep_upgrade_gold(uint32_t value);
  private:
  uint32_t _internal_range_creep_upgrade_gold() const;
  void _internal_set_range_creep_upgrade_gold(uint32_t value);
  public:

  // optional uint32 observer_wards_dewarded = 11;
  bool has_observer_wards_dewarded() const;
  private:
  bool _internal_has_observer_wards_dewarded() const;
  public:
  void clear_observer_wards_dewarded();
  uint32_t observer_wards_dewarded() const;
  void set_observer_wards_dewarded(uint32_t value);
  private:
  uint32_t _internal_observer_wards_dewarded() const;
  void _internal_set_observer_wards_dewarded(uint32_t value);
  public:

  // optional uint32 reliable_gold_earned = 12;
  bool has_reliable_gold_earned() const;
  private:
  bool _internal_has_reliable_gold_earned() const;
  public:
  void clear_reliable_gold_earned();
  uint32_t reliable_gold_earned() const;
  void set_reliable_gold_earned(uint32_t value);
  private:
  uint32_t _internal_reliable_gold_earned() const;
  void _internal_set_reliable_gold_earned(uint32_t value);
  public:

  // optional uint32 gold_loss_prevented = 13;
  bool has_gold_loss_prevented() const;
  private:
  bool _internal_has_gold_loss_prevented() const;
  public:
  void clear_gold_loss_prevented();
  uint32_t gold_loss_prevented() const;
  void set_gold_loss_prevented(uint32_t value);
  private:
  uint32_t _internal_gold_loss_prevented() const;
  void _internal_set_gold_loss_prevented(uint32_t value);
  public:

  // optional uint32 hero_kill_gold = 14;
  bool has_hero_kill_gold() const;
  private:
  bool _internal_has_hero_kill_gold() const;
  public:
  void clear_hero_kill_gold();
  uint32_t hero_kill_gold() const;
  void set_hero_kill_gold(uint32_t value);
  private:
  uint32_t _internal_hero_kill_gold() const;
  void _internal_set_hero_kill_gold(uint32_t value);
  public:

  // optional uint32 creep_kill_gold = 15;
  bool has_creep_kill_gold() const;
  private:
  bool _internal_has_creep_kill_gold() const;
  public:
  void clear_creep_kill_gold();
  uint32_t creep_kill_gold() const;
  void set_creep_kill_gold(uint32_t value);
  private:
  uint32_t _internal_creep_kill_gold() const;
  void _internal_set_creep_kill_gold(uint32_t value);
  public:

  // optional uint32 building_gold = 16;
  bool has_building_gold() const;
  private:
  bool _internal_has_building_gold() const;
  public:
  void clear_building_gold();
  uint32_t building_gold() const;
  void set_building_gold(uint32_t value);
  private:
  uint32_t _internal_building_gold() const;
  void _internal_set_building_gold(uint32_t value);
  public:

  // optional uint32 other_gold = 17;
  bool has_other_gold() const;
  private:
  bool _internal_has_other_gold() const;
  public:
  void clear_other_gold();
  uint32_t other_gold() const;
  void set_other_gold(uint32_t value);
  private:
  uint32_t _internal_other_gold() const;
  void _internal_set_other_gold(uint32_t value);
  public:

  // optional uint32 comeback_gold = 18;
  bool has_comeback_gold() const;
  private:
  bool _internal_has_comeback_gold() const;
  public:
  void clear_comeback_gold();
  uint32_t comeback_gold() const;
  void set_comeback_gold(uint32_t value);
  private:
  uint32_t _internal_comeback_gold() const;
  void _internal_set_comeback_gold(uint32_t value);
  public:

  // optional uint32 experimental_gold = 19;
  bool has_experimental_gold() const;
  private:
  bool _internal_has_experimental_gold() const;
  public:
  void clear_experimental_gold();
  uint32_t experimental_gold() const;
  void set_experimental_gold(uint32_t value);
  private:
  uint32_t _internal_experimental_gold() const;
  void _internal_set_experimental_gold(uint32_t value);
  public:

  // optional uint32 experimental2_gold = 20;
  bool has_experimental2_gold() const;
  private:
  bool _internal_has_experimental2_gold() const;
  public:
  void clear_experimental2_gold();
  uint32_t experimental2_gold() const;
  void set_experimental2_gold(uint32_t value);
  private:
  uint32_t _internal_experimental2_gold() const;
  void _internal_set_experimental2_gold(uint32_t value);
  public:

  // optional uint32 creep_deny_gold = 21;
  bool has_creep_deny_gold() const;
  private:
  bool _internal_has_creep_deny_gold() const;
  public:
  void clear_creep_deny_gold();
  uint32_t creep_deny_gold() const;
  void set_creep_deny_gold(uint32_t value);
  private:
  uint32_t _internal_creep_deny_gold() const;
  void _internal_set_creep_deny_gold(uint32_t value);
  public:

  // optional uint32 tp_scrolls_purchased_1 = 22;
  bool has_tp_scrolls_purchased_1() const;
  private:
  bool _internal_has_tp_scrolls_purchased_1() const;
  public:
  void clear_tp_scrolls_purchased_1();
  uint32_t tp_scrolls_purchased_1() const;
  void set_tp_scrolls_purchased_1(uint32_t value);
  private:
  uint32_t _internal_tp_scrolls_purchased_1() const;
  void _internal_set_tp_scrolls_purchased_1(uint32_t value);
  public:

  // optional uint32 tp_scrolls_purchased_2 = 23;
  bool has_tp_scrolls_purchased_2() const;
  private:
  bool _internal_has_tp_scrolls_purchased_2() const;
  public:
  void clear_tp_scrolls_purchased_2();
  uint32_t tp_scrolls_purchased_2() const;
  void set_tp_scrolls_purchased_2(uint32_t value);
  private:
  uint32_t _internal_tp_scrolls_purchased_2() const;
  void _internal_set_tp_scrolls_purchased_2(uint32_t value);
  public:

  // optional uint32 tp_scrolls_purchased_3 = 24;
  bool has_tp_scrolls_purchased_3() const;
  private:
  bool _internal_has_tp_scrolls_purchased_3() const;
  public:
  void clear_tp_scrolls_purchased_3();
  uint32_t tp_scrolls_purchased_3() const;
  void set_tp_scrolls_purchased_3(uint32_t value);
  private:
  uint32_t _internal_tp_scrolls_purchased_3() const;
  void _internal_set_tp_scrolls_purchased_3(uint32_t value);
  public:

  // optional uint32 tp_scrolls_purchased_4 = 25;
  bool has_tp_scrolls_purchased_4() const;
  private:
  bool _internal_has_tp_scrolls_purchased_4() const;
  public:
  void clear_tp_scrolls_purchased_4();
  uint32_t tp_scrolls_purchased_4() const;
  void set_tp_scrolls_purchased_4(uint32_t value);
  private:
  uint32_t _internal_tp_scrolls_purchased_4() const;
  void _internal_set_tp_scrolls_purchased_4(uint32_t value);
  public:

  // optional uint32 tp_scrolls_purchased_5 = 26;
  bool has_tp_scrolls_purchased_5() const;
  private:
  bool _internal_has_tp_scrolls_purchased_5() const;
  public:
  void clear_tp_scrolls_purchased_5();
  uint32_t tp_scrolls_purchased_5() const;
  void set_tp_scrolls_purchased_5(uint32_t value);
  private:
  uint32_t _internal_tp_scrolls_purchased_5() const;
  void _internal_set_tp_scrolls_purchased_5(uint32_t value);
  public:

  // optional uint32 neutral_gold = 27;
  bool has_neutral_gold() const;
  private:
  bool _internal_has_neutral_gold() const;
  public:
  void clear_neutral_gold();
  uint32_t neutral_gold() const;
  void set_neutral_gold(uint32_t value);
  private:
  uint32_t _internal_neutral_gold() const;
  void _internal_set_neutral_gold(uint32_t value);
  public:

  // optional uint32 courier_gold = 28;
  bool has_courier_gold() const;
  private:
  bool _internal_has_courier_gold() const;
  public:
  void clear_courier_gold();
  uint32_t courier_gold() const;
  void set_courier_gold(uint32_t value);
  private:
  uint32_t _internal_courier_gold() const;
  void _internal_set_courier_gold(uint32_t value);
  public:

  // optional uint32 roshan_gold = 29;
  bool has_roshan_gold() const;
  private:
  bool _internal_has_roshan_gold() const;
  public:
  void clear_roshan_gold();
  uint32_t roshan_gold() const;
  void set_roshan_gold(uint32_t value);
  private:
  uint32_t _internal_roshan_gold() const;
  void _internal_set_roshan_gold(uint32_t value);
  public:

  // optional uint32 income_gold = 30;
  bool has_income_gold() const;
  private:
  bool _internal_has_income_gold() const;
  public:
  void clear_income_gold();
  uint32_t income_gold() const;
  void set_income_gold(uint32_t value);
  private:
  uint32_t _internal_income_gold() const;
  void _internal_set_income_gold(uint32_t value);
  public:

  // optional uint32 custom_stats_1 = 31;
  bool has_custom_stats_1() const;
  private:
  bool _internal_has_custom_stats_1() const;
  public:
  void clear_custom_stats_1();
  uint32_t custom_stats_1() const;
  void set_custom_stats_1(uint32_t value);
  private:
  uint32_t _internal_custom_stats_1() const;
  void _internal_set_custom_stats_1(uint32_t value);
  public:

  // optional uint32 custom_stats_2 = 32;
  bool has_custom_stats_2() const;
  private:
  bool _internal_has_custom_stats_2() const;
  public:
  void clear_custom_stats_2();
  uint32_t custom_stats_2() const;
  void set_custom_stats_2(uint32_t value);
  private:
  uint32_t _internal_custom_stats_2() const;
  void _internal_set_custom_stats_2(uint32_t value);
  public:

  // optional uint32 custom_stats_3 = 33;
  bool has_custom_stats_3() const;
  private:
  bool _internal_has_custom_stats_3() const;
  public:
  void clear_custom_stats_3();
  uint32_t custom_stats_3() const;
  void set_custom_stats_3(uint32_t value);
  private:
  uint32_t _internal_custom_stats_3() const;
  void _internal_set_custom_stats_3(uint32_t value);
  public:

  // optional uint32 custom_stats_4 = 34;
  bool has_custom_stats_4() const;
  private:
  bool _internal_has_custom_stats_4() const;
  public:
  void clear_custom_stats_4();
  uint32_t custom_stats_4() const;
  void set_custom_stats_4(uint32_t value);
  private:
  uint32_t _internal_custom_stats_4() const;
  void _internal_set_custom_stats_4(uint32_t value);
  public:

  // optional uint32 custom_stats_5 = 35;
  bool has_custom_stats_5() const;
  private:
  bool _internal_has_custom_stats_5() const;
  public:
  void clear_custom_stats_5();
  uint32_t custom_stats_5() const;
  void set_custom_stats_5(uint32_t value);
  private:
  uint32_t _internal_custom_stats_5() const;
  void _internal_set_custom_stats_5(uint32_t value);
  public:

  // optional uint32 item_value = 36;
  bool has_item_value() const;
  private:
  bool _internal_has_item_value() const;
  public:
  void clear_item_value();
  uint32_t item_value() const;
  void set_item_value(uint32_t value);
  private:
  uint32_t _internal_item_value() const;
  void _internal_set_item_value(uint32_t value);
  public:

  // optional uint32 support_gold_spent = 37;
  bool has_support_gold_spent() const;
  private:
  bool _internal_has_support_gold_spent() const;
  public:
  void clear_support_gold_spent();
  uint32_t support_gold_spent() const;
  void set_support_gold_spent(uint32_t value);
  private:
  uint32_t _internal_support_gold_spent() const;
  void _internal_set_support_gold_spent(uint32_t value);
  public:

  // optional uint32 camps_stacked = 38;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  uint32_t camps_stacked() const;
  void set_camps_stacked(uint32_t value);
  private:
  uint32_t _internal_camps_stacked() const;
  void _internal_set_camps_stacked(uint32_t value);
  public:

  // optional uint32 wards_placed = 39;
  bool has_wards_placed() const;
  private:
  bool _internal_has_wards_placed() const;
  public:
  void clear_wards_placed();
  uint32_t wards_placed() const;
  void set_wards_placed(uint32_t value);
  private:
  uint32_t _internal_wards_placed() const;
  void _internal_set_wards_placed(uint32_t value);
  public:

  // optional uint32 triple_kills = 40;
  bool has_triple_kills() const;
  private:
  bool _internal_has_triple_kills() const;
  public:
  void clear_triple_kills();
  uint32_t triple_kills() const;
  void set_triple_kills(uint32_t value);
  private:
  uint32_t _internal_triple_kills() const;
  void _internal_set_triple_kills(uint32_t value);
  public:

  // optional uint32 rampages = 41;
  bool has_rampages() const;
  private:
  bool _internal_has_rampages() const;
  public:
  void clear_rampages();
  uint32_t rampages() const;
  void set_rampages(uint32_t value);
  private:
  uint32_t _internal_rampages() const;
  void _internal_set_rampages(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMatchPlayerTimedStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t time_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t net_worth_;
    uint32_t xp_;
    uint32_t last_hits_;
    uint32_t denies_;
    uint32_t bounty_rune_gold_;
    uint32_t range_creep_upgrade_gold_;
    uint32_t observer_wards_dewarded_;
    uint32_t reliable_gold_earned_;
    uint32_t gold_loss_prevented_;
    uint32_t hero_kill_gold_;
    uint32_t creep_kill_gold_;
    uint32_t building_gold_;
    uint32_t other_gold_;
    uint32_t comeback_gold_;
    uint32_t experimental_gold_;
    uint32_t experimental2_gold_;
    uint32_t creep_deny_gold_;
    uint32_t tp_scrolls_purchased_1_;
    uint32_t tp_scrolls_purchased_2_;
    uint32_t tp_scrolls_purchased_3_;
    uint32_t tp_scrolls_purchased_4_;
    uint32_t tp_scrolls_purchased_5_;
    uint32_t neutral_gold_;
    uint32_t courier_gold_;
    uint32_t roshan_gold_;
    uint32_t income_gold_;
    uint32_t custom_stats_1_;
    uint32_t custom_stats_2_;
    uint32_t custom_stats_3_;
    uint32_t custom_stats_4_;
    uint32_t custom_stats_5_;
    uint32_t item_value_;
    uint32_t support_gold_spent_;
    uint32_t camps_stacked_;
    uint32_t wards_placed_;
    uint32_t triple_kills_;
    uint32_t rampages_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchTeamTimedStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMatchTeamTimedStats) */ {
 public:
  inline CMatchTeamTimedStats() : CMatchTeamTimedStats(nullptr) {}
  ~CMatchTeamTimedStats() override;
  explicit PROTOBUF_CONSTEXPR CMatchTeamTimedStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMatchTeamTimedStats(const CMatchTeamTimedStats& from);
  CMatchTeamTimedStats(CMatchTeamTimedStats&& from) noexcept
    : CMatchTeamTimedStats() {
    *this = ::std::move(from);
  }

  inline CMatchTeamTimedStats& operator=(const CMatchTeamTimedStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchTeamTimedStats& operator=(CMatchTeamTimedStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMatchTeamTimedStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMatchTeamTimedStats* internal_default_instance() {
    return reinterpret_cast<const CMatchTeamTimedStats*>(
               &_CMatchTeamTimedStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMatchTeamTimedStats& a, CMatchTeamTimedStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchTeamTimedStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMatchTeamTimedStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMatchTeamTimedStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMatchTeamTimedStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMatchTeamTimedStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMatchTeamTimedStats& from) {
    CMatchTeamTimedStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchTeamTimedStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMatchTeamTimedStats";
  }
  protected:
  explicit CMatchTeamTimedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kEnemyTowersKilledFieldNumber = 2,
    kEnemyBarracksKilledFieldNumber = 3,
    kEnemyTowersStatusFieldNumber = 4,
    kEnemyBarracksStatusFieldNumber = 5,
  };
  // optional uint32 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // optional uint32 enemy_towers_killed = 2;
  bool has_enemy_towers_killed() const;
  private:
  bool _internal_has_enemy_towers_killed() const;
  public:
  void clear_enemy_towers_killed();
  uint32_t enemy_towers_killed() const;
  void set_enemy_towers_killed(uint32_t value);
  private:
  uint32_t _internal_enemy_towers_killed() const;
  void _internal_set_enemy_towers_killed(uint32_t value);
  public:

  // optional uint32 enemy_barracks_killed = 3;
  bool has_enemy_barracks_killed() const;
  private:
  bool _internal_has_enemy_barracks_killed() const;
  public:
  void clear_enemy_barracks_killed();
  uint32_t enemy_barracks_killed() const;
  void set_enemy_barracks_killed(uint32_t value);
  private:
  uint32_t _internal_enemy_barracks_killed() const;
  void _internal_set_enemy_barracks_killed(uint32_t value);
  public:

  // optional uint32 enemy_towers_status = 4;
  bool has_enemy_towers_status() const;
  private:
  bool _internal_has_enemy_towers_status() const;
  public:
  void clear_enemy_towers_status();
  uint32_t enemy_towers_status() const;
  void set_enemy_towers_status(uint32_t value);
  private:
  uint32_t _internal_enemy_towers_status() const;
  void _internal_set_enemy_towers_status(uint32_t value);
  public:

  // optional uint32 enemy_barracks_status = 5;
  bool has_enemy_barracks_status() const;
  private:
  bool _internal_has_enemy_barracks_status() const;
  public:
  void clear_enemy_barracks_status();
  uint32_t enemy_barracks_status() const;
  void set_enemy_barracks_status(uint32_t value);
  private:
  uint32_t _internal_enemy_barracks_status() const;
  void _internal_set_enemy_barracks_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMatchTeamTimedStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t time_;
    uint32_t enemy_towers_killed_;
    uint32_t enemy_barracks_killed_;
    uint32_t enemy_towers_status_;
    uint32_t enemy_barracks_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchAdditionalUnitInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMatchAdditionalUnitInventory) */ {
 public:
  inline CMatchAdditionalUnitInventory() : CMatchAdditionalUnitInventory(nullptr) {}
  ~CMatchAdditionalUnitInventory() override;
  explicit PROTOBUF_CONSTEXPR CMatchAdditionalUnitInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from);
  CMatchAdditionalUnitInventory(CMatchAdditionalUnitInventory&& from) noexcept
    : CMatchAdditionalUnitInventory() {
    *this = ::std::move(from);
  }

  inline CMatchAdditionalUnitInventory& operator=(const CMatchAdditionalUnitInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchAdditionalUnitInventory& operator=(CMatchAdditionalUnitInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMatchAdditionalUnitInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMatchAdditionalUnitInventory* internal_default_instance() {
    return reinterpret_cast<const CMatchAdditionalUnitInventory*>(
               &_CMatchAdditionalUnitInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMatchAdditionalUnitInventory& a, CMatchAdditionalUnitInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchAdditionalUnitInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMatchAdditionalUnitInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMatchAdditionalUnitInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMatchAdditionalUnitInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMatchAdditionalUnitInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMatchAdditionalUnitInventory& from) {
    CMatchAdditionalUnitInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchAdditionalUnitInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMatchAdditionalUnitInventory";
  }
  protected:
  explicit CMatchAdditionalUnitInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kUnitNameFieldNumber = 1,
  };
  // repeated int32 items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  int32_t _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items() const;
  void _internal_add_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items();
  public:
  int32_t items(int index) const;
  void set_items(int index, int32_t value);
  void add_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items();

  // optional string unit_name = 1;
  bool has_unit_name() const;
  private:
  bool _internal_has_unit_name() const;
  public:
  void clear_unit_name();
  const std::string& unit_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit_name();
  PROTOBUF_NODISCARD std::string* release_unit_name();
  void set_allocated_unit_name(std::string* unit_name);
  private:
  const std::string& _internal_unit_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit_name(const std::string& value);
  std::string* _internal_mutable_unit_name();
  public:

  // @@protoc_insertion_point(class_scope:CMatchAdditionalUnitInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchPlayerPermanentBuff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMatchPlayerPermanentBuff) */ {
 public:
  inline CMatchPlayerPermanentBuff() : CMatchPlayerPermanentBuff(nullptr) {}
  ~CMatchPlayerPermanentBuff() override;
  explicit PROTOBUF_CONSTEXPR CMatchPlayerPermanentBuff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMatchPlayerPermanentBuff(const CMatchPlayerPermanentBuff& from);
  CMatchPlayerPermanentBuff(CMatchPlayerPermanentBuff&& from) noexcept
    : CMatchPlayerPermanentBuff() {
    *this = ::std::move(from);
  }

  inline CMatchPlayerPermanentBuff& operator=(const CMatchPlayerPermanentBuff& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchPlayerPermanentBuff& operator=(CMatchPlayerPermanentBuff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMatchPlayerPermanentBuff& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMatchPlayerPermanentBuff* internal_default_instance() {
    return reinterpret_cast<const CMatchPlayerPermanentBuff*>(
               &_CMatchPlayerPermanentBuff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMatchPlayerPermanentBuff& a, CMatchPlayerPermanentBuff& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchPlayerPermanentBuff* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMatchPlayerPermanentBuff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMatchPlayerPermanentBuff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMatchPlayerPermanentBuff>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMatchPlayerPermanentBuff& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMatchPlayerPermanentBuff& from) {
    CMatchPlayerPermanentBuff::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchPlayerPermanentBuff* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMatchPlayerPermanentBuff";
  }
  protected:
  explicit CMatchPlayerPermanentBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermanentBuffFieldNumber = 1,
    kStackCountFieldNumber = 2,
    kGrantTimeFieldNumber = 3,
  };
  // optional uint32 permanent_buff = 1;
  bool has_permanent_buff() const;
  private:
  bool _internal_has_permanent_buff() const;
  public:
  void clear_permanent_buff();
  uint32_t permanent_buff() const;
  void set_permanent_buff(uint32_t value);
  private:
  uint32_t _internal_permanent_buff() const;
  void _internal_set_permanent_buff(uint32_t value);
  public:

  // optional uint32 stack_count = 2;
  bool has_stack_count() const;
  private:
  bool _internal_has_stack_count() const;
  public:
  void clear_stack_count();
  uint32_t stack_count() const;
  void set_stack_count(uint32_t value);
  private:
  uint32_t _internal_stack_count() const;
  void _internal_set_stack_count(uint32_t value);
  public:

  // optional uint32 grant_time = 3;
  bool has_grant_time() const;
  private:
  bool _internal_has_grant_time() const;
  public:
  void clear_grant_time();
  uint32_t grant_time() const;
  void set_grant_time(uint32_t value);
  private:
  uint32_t _internal_grant_time() const;
  void _internal_set_grant_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMatchPlayerPermanentBuff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t permanent_buff_;
    uint32_t stack_count_;
    uint32_t grant_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchHeroSelectEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMatchHeroSelectEvent) */ {
 public:
  inline CMatchHeroSelectEvent() : CMatchHeroSelectEvent(nullptr) {}
  ~CMatchHeroSelectEvent() override;
  explicit PROTOBUF_CONSTEXPR CMatchHeroSelectEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from);
  CMatchHeroSelectEvent(CMatchHeroSelectEvent&& from) noexcept
    : CMatchHeroSelectEvent() {
    *this = ::std::move(from);
  }

  inline CMatchHeroSelectEvent& operator=(const CMatchHeroSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchHeroSelectEvent& operator=(CMatchHeroSelectEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMatchHeroSelectEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMatchHeroSelectEvent* internal_default_instance() {
    return reinterpret_cast<const CMatchHeroSelectEvent*>(
               &_CMatchHeroSelectEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMatchHeroSelectEvent& a, CMatchHeroSelectEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchHeroSelectEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMatchHeroSelectEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMatchHeroSelectEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMatchHeroSelectEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMatchHeroSelectEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMatchHeroSelectEvent& from) {
    CMatchHeroSelectEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchHeroSelectEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMatchHeroSelectEvent";
  }
  protected:
  explicit CMatchHeroSelectEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPickFieldNumber = 1,
    kTeamFieldNumber = 2,
    kHeroIdFieldNumber = 3,
  };
  // optional bool is_pick = 1;
  bool has_is_pick() const;
  private:
  bool _internal_has_is_pick() const;
  public:
  void clear_is_pick();
  bool is_pick() const;
  void set_is_pick(bool value);
  private:
  bool _internal_is_pick() const;
  void _internal_set_is_pick(bool value);
  public:

  // optional uint32 team = 2;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMatchHeroSelectEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool is_pick_;
    uint32_t team_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMatchClip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMatchClip) */ {
 public:
  inline CMatchClip() : CMatchClip(nullptr) {}
  ~CMatchClip() override;
  explicit PROTOBUF_CONSTEXPR CMatchClip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMatchClip(const CMatchClip& from);
  CMatchClip(CMatchClip&& from) noexcept
    : CMatchClip() {
    *this = ::std::move(from);
  }

  inline CMatchClip& operator=(const CMatchClip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMatchClip& operator=(CMatchClip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMatchClip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMatchClip* internal_default_instance() {
    return reinterpret_cast<const CMatchClip*>(
               &_CMatchClip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMatchClip& a, CMatchClip& b) {
    a.Swap(&b);
  }
  inline void Swap(CMatchClip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMatchClip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMatchClip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMatchClip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMatchClip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMatchClip& from) {
    CMatchClip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMatchClip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMatchClip";
  }
  protected:
  explicit CMatchClip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 9,
    kMatchIdFieldNumber = 1,
    kPlayerAccountIdFieldNumber = 2,
    kGameTimeSecondsFieldNumber = 3,
    kDurationSecondsFieldNumber = 4,
    kPlayerIdFieldNumber = 5,
    kHeroIdFieldNumber = 6,
    kCameraModeFieldNumber = 8,
    kAbilityIdFieldNumber = 7,
  };
  // optional string comment = 9;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 player_account_id = 2;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  uint32_t player_account_id() const;
  void set_player_account_id(uint32_t value);
  private:
  uint32_t _internal_player_account_id() const;
  void _internal_set_player_account_id(uint32_t value);
  public:

  // optional uint32 game_time_seconds = 3;
  bool has_game_time_seconds() const;
  private:
  bool _internal_has_game_time_seconds() const;
  public:
  void clear_game_time_seconds();
  uint32_t game_time_seconds() const;
  void set_game_time_seconds(uint32_t value);
  private:
  uint32_t _internal_game_time_seconds() const;
  void _internal_set_game_time_seconds(uint32_t value);
  public:

  // optional uint32 duration_seconds = 4;
  bool has_duration_seconds() const;
  private:
  bool _internal_has_duration_seconds() const;
  public:
  void clear_duration_seconds();
  uint32_t duration_seconds() const;
  void set_duration_seconds(uint32_t value);
  private:
  uint32_t _internal_duration_seconds() const;
  void _internal_set_duration_seconds(uint32_t value);
  public:

  // optional uint32 player_id = 5;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // optional uint32 hero_id = 6;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 camera_mode = 8;
  bool has_camera_mode() const;
  private:
  bool _internal_has_camera_mode() const;
  public:
  void clear_camera_mode();
  uint32_t camera_mode() const;
  void set_camera_mode(uint32_t value);
  private:
  uint32_t _internal_camera_mode() const;
  void _internal_set_camera_mode(uint32_t value);
  public:

  // optional int32 ability_id = 7 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMatchClip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    uint64_t match_id_;
    uint32_t player_account_id_;
    uint32_t game_time_seconds_;
    uint32_t duration_seconds_;
    uint32_t player_id_;
    uint32_t hero_id_;
    uint32_t camera_mode_;
    int32_t ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CPartySearchClientParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPartySearchClientParty) */ {
 public:
  inline CPartySearchClientParty() : CPartySearchClientParty(nullptr) {}
  ~CPartySearchClientParty() override;
  explicit PROTOBUF_CONSTEXPR CPartySearchClientParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPartySearchClientParty(const CPartySearchClientParty& from);
  CPartySearchClientParty(CPartySearchClientParty&& from) noexcept
    : CPartySearchClientParty() {
    *this = ::std::move(from);
  }

  inline CPartySearchClientParty& operator=(const CPartySearchClientParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPartySearchClientParty& operator=(CPartySearchClientParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPartySearchClientParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPartySearchClientParty* internal_default_instance() {
    return reinterpret_cast<const CPartySearchClientParty*>(
               &_CPartySearchClientParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CPartySearchClientParty& a, CPartySearchClientParty& b) {
    a.Swap(&b);
  }
  inline void Swap(CPartySearchClientParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPartySearchClientParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPartySearchClientParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPartySearchClientParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPartySearchClientParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CPartySearchClientParty& from) {
    CPartySearchClientParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPartySearchClientParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPartySearchClientParty";
  }
  protected:
  explicit CPartySearchClientParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyMembersFieldNumber = 3,
    kPartyIdFieldNumber = 1,
    kBeaconTypeFieldNumber = 2,
  };
  // repeated fixed32 party_members = 3;
  int party_members_size() const;
  private:
  int _internal_party_members_size() const;
  public:
  void clear_party_members();
  private:
  uint32_t _internal_party_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_party_members() const;
  void _internal_add_party_members(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_party_members();
  public:
  uint32_t party_members(int index) const;
  void set_party_members(int index, uint32_t value);
  void add_party_members(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      party_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_party_members();

  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  uint64_t party_id() const;
  void set_party_id(uint64_t value);
  private:
  uint64_t _internal_party_id() const;
  void _internal_set_party_id(uint64_t value);
  public:

  // optional int32 beacon_type = 2;
  bool has_beacon_type() const;
  private:
  bool _internal_has_beacon_type() const;
  public:
  void clear_beacon_type();
  int32_t beacon_type() const;
  void set_beacon_type(int32_t value);
  private:
  int32_t _internal_beacon_type() const;
  void _internal_set_beacon_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPartySearchClientParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > party_members_;
    uint64_t party_id_;
    int32_t beacon_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHasItemQuery) */ {
 public:
  inline CMsgDOTAHasItemQuery() : CMsgDOTAHasItemQuery(nullptr) {}
  ~CMsgDOTAHasItemQuery() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAHasItemQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from);
  CMsgDOTAHasItemQuery(CMsgDOTAHasItemQuery&& from) noexcept
    : CMsgDOTAHasItemQuery() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHasItemQuery& operator=(const CMsgDOTAHasItemQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAHasItemQuery& operator=(CMsgDOTAHasItemQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAHasItemQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAHasItemQuery* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHasItemQuery*>(
               &_CMsgDOTAHasItemQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgDOTAHasItemQuery& a, CMsgDOTAHasItemQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAHasItemQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAHasItemQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAHasItemQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAHasItemQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAHasItemQuery& from) {
    CMsgDOTAHasItemQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAHasItemQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAHasItemQuery";
  }
  protected:
  explicit CMsgDOTAHasItemQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional uint64 item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t item_id_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAHasItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAHasItemResponse) */ {
 public:
  inline CMsgDOTAHasItemResponse() : CMsgDOTAHasItemResponse(nullptr) {}
  ~CMsgDOTAHasItemResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAHasItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from);
  CMsgDOTAHasItemResponse(CMsgDOTAHasItemResponse&& from) noexcept
    : CMsgDOTAHasItemResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAHasItemResponse& operator=(const CMsgDOTAHasItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAHasItemResponse& operator=(CMsgDOTAHasItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAHasItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAHasItemResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAHasItemResponse*>(
               &_CMsgDOTAHasItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgDOTAHasItemResponse& a, CMsgDOTAHasItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAHasItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAHasItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAHasItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAHasItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAHasItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAHasItemResponse& from) {
    CMsgDOTAHasItemResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAHasItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAHasItemResponse";
  }
  protected:
  explicit CMsgDOTAHasItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasItemFieldNumber = 1,
  };
  // optional bool has_item = 1;
  bool has_has_item() const;
  private:
  bool _internal_has_has_item() const;
  public:
  void clear_has_item();
  bool has_item() const;
  void set_has_item(bool value);
  private:
  bool _internal_has_item() const;
  void _internal_set_has_item(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAHasItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool has_item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPlayerCardItemInfo) */ {
 public:
  inline CMsgGCGetPlayerCardItemInfo() : CMsgGCGetPlayerCardItemInfo(nullptr) {}
  ~CMsgGCGetPlayerCardItemInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPlayerCardItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPlayerCardItemInfo(const CMsgGCGetPlayerCardItemInfo& from);
  CMsgGCGetPlayerCardItemInfo(CMsgGCGetPlayerCardItemInfo&& from) noexcept
    : CMsgGCGetPlayerCardItemInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPlayerCardItemInfo& operator=(const CMsgGCGetPlayerCardItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPlayerCardItemInfo& operator=(CMsgGCGetPlayerCardItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPlayerCardItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPlayerCardItemInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPlayerCardItemInfo*>(
               &_CMsgGCGetPlayerCardItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgGCGetPlayerCardItemInfo& a, CMsgGCGetPlayerCardItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPlayerCardItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPlayerCardItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPlayerCardItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPlayerCardItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPlayerCardItemInfo& from) {
    CMsgGCGetPlayerCardItemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPlayerCardItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPlayerCardItemInfo";
  }
  protected:
  explicit CMsgGCGetPlayerCardItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCardItemIdsFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kAllForEventFieldNumber = 3,
  };
  // repeated uint64 player_card_item_ids = 2;
  int player_card_item_ids_size() const;
  private:
  int _internal_player_card_item_ids_size() const;
  public:
  void clear_player_card_item_ids();
  private:
  uint64_t _internal_player_card_item_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_player_card_item_ids() const;
  void _internal_add_player_card_item_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_player_card_item_ids();
  public:
  uint64_t player_card_item_ids(int index) const;
  void set_player_card_item_ids(int index, uint64_t value);
  void add_player_card_item_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      player_card_item_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_player_card_item_ids();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 all_for_event = 3;
  bool has_all_for_event() const;
  private:
  bool _internal_has_all_for_event() const;
  public:
  void clear_all_for_event();
  uint32_t all_for_event() const;
  void set_all_for_event(uint32_t value);
  private:
  uint32_t _internal_all_for_event() const;
  void _internal_set_all_for_event(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetPlayerCardItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > player_card_item_ids_;
    uint32_t account_id_;
    uint32_t all_for_event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo) */ {
 public:
  inline CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() : CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(nullptr) {}
  ~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo&& from) noexcept
    : CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& operator=(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& operator=(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo*>(
               &_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& a, CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
    CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo";
  }
  protected:
  explicit CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCardItemIdFieldNumber = 1,
    kPackedBonusesFieldNumber = 3,
    kAccountIdFieldNumber = 2,
  };
  // optional uint64 player_card_item_id = 1;
  bool has_player_card_item_id() const;
  private:
  bool _internal_has_player_card_item_id() const;
  public:
  void clear_player_card_item_id();
  uint64_t player_card_item_id() const;
  void set_player_card_item_id(uint64_t value);
  private:
  uint64_t _internal_player_card_item_id() const;
  void _internal_set_player_card_item_id(uint64_t value);
  public:

  // optional uint64 packed_bonuses = 3;
  bool has_packed_bonuses() const;
  private:
  bool _internal_has_packed_bonuses() const;
  public:
  void clear_packed_bonuses();
  uint64_t packed_bonuses() const;
  void set_packed_bonuses(uint64_t value);
  private:
  uint64_t _internal_packed_bonuses() const;
  void _internal_set_packed_bonuses(uint64_t value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t player_card_item_id_;
    uint64_t packed_bonuses_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPlayerCardItemInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPlayerCardItemInfoResponse) */ {
 public:
  inline CMsgGCGetPlayerCardItemInfoResponse() : CMsgGCGetPlayerCardItemInfoResponse(nullptr) {}
  ~CMsgGCGetPlayerCardItemInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPlayerCardItemInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPlayerCardItemInfoResponse(const CMsgGCGetPlayerCardItemInfoResponse& from);
  CMsgGCGetPlayerCardItemInfoResponse(CMsgGCGetPlayerCardItemInfoResponse&& from) noexcept
    : CMsgGCGetPlayerCardItemInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPlayerCardItemInfoResponse& operator=(const CMsgGCGetPlayerCardItemInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPlayerCardItemInfoResponse& operator=(CMsgGCGetPlayerCardItemInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPlayerCardItemInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPlayerCardItemInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPlayerCardItemInfoResponse*>(
               &_CMsgGCGetPlayerCardItemInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgGCGetPlayerCardItemInfoResponse& a, CMsgGCGetPlayerCardItemInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPlayerCardItemInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPlayerCardItemInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPlayerCardItemInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPlayerCardItemInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPlayerCardItemInfoResponse& from) {
    CMsgGCGetPlayerCardItemInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPlayerCardItemInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPlayerCardItemInfoResponse";
  }
  protected:
  explicit CMsgGCGetPlayerCardItemInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo PlayerCardInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCardInfosFieldNumber = 1,
  };
  // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  int player_card_infos_size() const;
  private:
  int _internal_player_card_infos_size() const;
  public:
  void clear_player_card_infos();
  ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* mutable_player_card_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >*
      mutable_player_card_infos();
  private:
  const ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& _internal_player_card_infos(int index) const;
  ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* _internal_add_player_card_infos();
  public:
  const ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& player_card_infos(int index) const;
  ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* add_player_card_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >&
      player_card_infos() const;

  // @@protoc_insertion_point(class_scope:CMsgGCGetPlayerCardItemInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo > player_card_infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAMapLocationState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAMapLocationState) */ {
 public:
  inline CSODOTAMapLocationState() : CSODOTAMapLocationState(nullptr) {}
  ~CSODOTAMapLocationState() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAMapLocationState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAMapLocationState(const CSODOTAMapLocationState& from);
  CSODOTAMapLocationState(CSODOTAMapLocationState&& from) noexcept
    : CSODOTAMapLocationState() {
    *this = ::std::move(from);
  }

  inline CSODOTAMapLocationState& operator=(const CSODOTAMapLocationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAMapLocationState& operator=(CSODOTAMapLocationState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAMapLocationState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAMapLocationState* internal_default_instance() {
    return reinterpret_cast<const CSODOTAMapLocationState*>(
               &_CSODOTAMapLocationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CSODOTAMapLocationState& a, CSODOTAMapLocationState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAMapLocationState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAMapLocationState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAMapLocationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAMapLocationState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAMapLocationState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAMapLocationState& from) {
    CSODOTAMapLocationState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAMapLocationState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAMapLocationState";
  }
  protected:
  explicit CSODOTAMapLocationState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kCompletedFieldNumber = 3,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional int32 location_id = 2 [(.key_field) = true];
  bool has_location_id() const;
  private:
  bool _internal_has_location_id() const;
  public:
  void clear_location_id();
  int32_t location_id() const;
  void set_location_id(int32_t value);
  private:
  int32_t _internal_location_id() const;
  void _internal_set_location_id(int32_t value);
  public:

  // optional bool completed = 3;
  bool has_completed() const;
  private:
  bool _internal_has_completed() const;
  public:
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAMapLocationState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int32_t location_id_;
    bool completed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeagueAdminList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeagueAdminList) */ {
 public:
  inline CMsgLeagueAdminList() : CMsgLeagueAdminList(nullptr) {}
  ~CMsgLeagueAdminList() override;
  explicit PROTOBUF_CONSTEXPR CMsgLeagueAdminList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeagueAdminList(const CMsgLeagueAdminList& from);
  CMsgLeagueAdminList(CMsgLeagueAdminList&& from) noexcept
    : CMsgLeagueAdminList() {
    *this = ::std::move(from);
  }

  inline CMsgLeagueAdminList& operator=(const CMsgLeagueAdminList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeagueAdminList& operator=(CMsgLeagueAdminList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeagueAdminList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeagueAdminList* internal_default_instance() {
    return reinterpret_cast<const CMsgLeagueAdminList*>(
               &_CMsgLeagueAdminList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgLeagueAdminList& a, CMsgLeagueAdminList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeagueAdminList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeagueAdminList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLeagueAdminList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLeagueAdminList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLeagueAdminList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLeagueAdminList& from) {
    CMsgLeagueAdminList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeagueAdminList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeagueAdminList";
  }
  protected:
  explicit CMsgLeagueAdminList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  uint32_t _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_account_ids() const;
  void _internal_add_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_account_ids();
  public:
  uint32_t account_ids(int index) const;
  void set_account_ids(int index, uint32_t value);
  void add_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:CMsgLeagueAdminList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > account_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Trophy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Trophy) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Trophy() : CMsgDOTAProfileCard_Slot_Trophy(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Trophy() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard_Slot_Trophy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from);
  CMsgDOTAProfileCard_Slot_Trophy(CMsgDOTAProfileCard_Slot_Trophy&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Trophy() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(const CMsgDOTAProfileCard_Slot_Trophy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(CMsgDOTAProfileCard_Slot_Trophy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Trophy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Trophy* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Trophy*>(
               &_CMsgDOTAProfileCard_Slot_Trophy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgDOTAProfileCard_Slot_Trophy& a, CMsgDOTAProfileCard_Slot_Trophy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Trophy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Trophy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Trophy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Trophy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard_Slot_Trophy& from) {
    CMsgDOTAProfileCard_Slot_Trophy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Trophy";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyIdFieldNumber = 1,
    kTrophyScoreFieldNumber = 2,
  };
  // optional uint32 trophy_id = 1;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // optional uint32 trophy_score = 2;
  bool has_trophy_score() const;
  private:
  bool _internal_has_trophy_score() const;
  public:
  void clear_trophy_score();
  uint32_t trophy_score() const;
  void set_trophy_score(uint32_t value);
  private:
  uint32_t _internal_trophy_score() const;
  void _internal_set_trophy_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Trophy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t trophy_id_;
    uint32_t trophy_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Stat) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Stat() : CMsgDOTAProfileCard_Slot_Stat(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Stat() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard_Slot_Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from);
  CMsgDOTAProfileCard_Slot_Stat(CMsgDOTAProfileCard_Slot_Stat&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Stat() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Stat& operator=(const CMsgDOTAProfileCard_Slot_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Stat& operator=(CMsgDOTAProfileCard_Slot_Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Stat* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Stat*>(
               &_CMsgDOTAProfileCard_Slot_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgDOTAProfileCard_Slot_Stat& a, CMsgDOTAProfileCard_Slot_Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard_Slot_Stat& from) {
    CMsgDOTAProfileCard_Slot_Stat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Stat";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatScoreFieldNumber = 2,
    kStatIdFieldNumber = 1,
  };
  // optional uint32 stat_score = 2;
  bool has_stat_score() const;
  private:
  bool _internal_has_stat_score() const;
  public:
  void clear_stat_score();
  uint32_t stat_score() const;
  void set_stat_score(uint32_t value);
  private:
  uint32_t _internal_stat_score() const;
  void _internal_set_stat_score(uint32_t value);
  public:

  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
  bool has_stat_id() const;
  private:
  bool _internal_has_stat_id() const;
  public:
  void clear_stat_id();
  ::CMsgDOTAProfileCard_EStatID stat_id() const;
  void set_stat_id(::CMsgDOTAProfileCard_EStatID value);
  private:
  ::CMsgDOTAProfileCard_EStatID _internal_stat_id() const;
  void _internal_set_stat_id(::CMsgDOTAProfileCard_EStatID value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t stat_score_;
    int stat_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Item) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Item() : CMsgDOTAProfileCard_Slot_Item(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Item() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard_Slot_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from);
  CMsgDOTAProfileCard_Slot_Item(CMsgDOTAProfileCard_Slot_Item&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Item() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Item& operator=(const CMsgDOTAProfileCard_Slot_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Item& operator=(CMsgDOTAProfileCard_Slot_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Item* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Item*>(
               &_CMsgDOTAProfileCard_Slot_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgDOTAProfileCard_Slot_Item& a, CMsgDOTAProfileCard_Slot_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard_Slot_Item& from) {
    CMsgDOTAProfileCard_Slot_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Item";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedItemFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // optional bytes serialized_item = 1;
  bool has_serialized_item() const;
  private:
  bool _internal_has_serialized_item() const;
  public:
  void clear_serialized_item();
  const std::string& serialized_item() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_item(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_item();
  PROTOBUF_NODISCARD std::string* release_serialized_item();
  void set_allocated_serialized_item(std::string* serialized_item);
  private:
  const std::string& _internal_serialized_item() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_item(const std::string& value);
  std::string* _internal_mutable_serialized_item();
  public:

  // optional uint64 item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_item_;
    uint64_t item_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Hero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Hero) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Hero() : CMsgDOTAProfileCard_Slot_Hero(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Hero() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard_Slot_Hero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from);
  CMsgDOTAProfileCard_Slot_Hero(CMsgDOTAProfileCard_Slot_Hero&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Hero() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Hero& operator=(const CMsgDOTAProfileCard_Slot_Hero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Hero& operator=(CMsgDOTAProfileCard_Slot_Hero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Hero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Hero* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Hero*>(
               &_CMsgDOTAProfileCard_Slot_Hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgDOTAProfileCard_Slot_Hero& a, CMsgDOTAProfileCard_Slot_Hero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Hero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Hero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Hero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Hero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard_Slot_Hero& from) {
    CMsgDOTAProfileCard_Slot_Hero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Hero";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kHeroWinsFieldNumber = 2,
    kHeroLossesFieldNumber = 3,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 hero_wins = 2;
  bool has_hero_wins() const;
  private:
  bool _internal_has_hero_wins() const;
  public:
  void clear_hero_wins();
  uint32_t hero_wins() const;
  void set_hero_wins(uint32_t value);
  private:
  uint32_t _internal_hero_wins() const;
  void _internal_set_hero_wins(uint32_t value);
  public:

  // optional uint32 hero_losses = 3;
  bool has_hero_losses() const;
  private:
  bool _internal_has_hero_losses() const;
  public:
  void clear_hero_losses();
  uint32_t hero_losses() const;
  void set_hero_losses(uint32_t value);
  private:
  uint32_t _internal_hero_losses() const;
  void _internal_set_hero_losses(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Hero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t hero_wins_;
    uint32_t hero_losses_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Emoticon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Emoticon) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Emoticon() : CMsgDOTAProfileCard_Slot_Emoticon(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Emoticon() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard_Slot_Emoticon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  CMsgDOTAProfileCard_Slot_Emoticon(CMsgDOTAProfileCard_Slot_Emoticon&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Emoticon() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(CMsgDOTAProfileCard_Slot_Emoticon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Emoticon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Emoticon* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Emoticon*>(
               &_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgDOTAProfileCard_Slot_Emoticon& a, CMsgDOTAProfileCard_Slot_Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Emoticon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard_Slot_Emoticon& from) {
    CMsgDOTAProfileCard_Slot_Emoticon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Emoticon";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmoticonIdFieldNumber = 1,
  };
  // optional uint32 emoticon_id = 1;
  bool has_emoticon_id() const;
  private:
  bool _internal_has_emoticon_id() const;
  public:
  void clear_emoticon_id();
  uint32_t emoticon_id() const;
  void set_emoticon_id(uint32_t value);
  private:
  uint32_t _internal_emoticon_id() const;
  void _internal_set_emoticon_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t emoticon_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Team) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Team() : CMsgDOTAProfileCard_Slot_Team(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Team() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard_Slot_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Team(const CMsgDOTAProfileCard_Slot_Team& from);
  CMsgDOTAProfileCard_Slot_Team(CMsgDOTAProfileCard_Slot_Team&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Team& operator=(const CMsgDOTAProfileCard_Slot_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Team& operator=(CMsgDOTAProfileCard_Slot_Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Team*>(
               &_CMsgDOTAProfileCard_Slot_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgDOTAProfileCard_Slot_Team& a, CMsgDOTAProfileCard_Slot_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard_Slot_Team& from) {
    CMsgDOTAProfileCard_Slot_Team::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Team";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
  };
  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t team_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot) */ {
 public:
  inline CMsgDOTAProfileCard_Slot() : CMsgDOTAProfileCard_Slot(nullptr) {}
  ~CMsgDOTAProfileCard_Slot() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard_Slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from);
  CMsgDOTAProfileCard_Slot(CMsgDOTAProfileCard_Slot&& from) noexcept
    : CMsgDOTAProfileCard_Slot() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot& operator=(const CMsgDOTAProfileCard_Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot& operator=(CMsgDOTAProfileCard_Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot*>(
               &_CMsgDOTAProfileCard_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgDOTAProfileCard_Slot& a, CMsgDOTAProfileCard_Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard_Slot& from) {
    CMsgDOTAProfileCard_Slot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot_Trophy Trophy;
  typedef CMsgDOTAProfileCard_Slot_Stat Stat;
  typedef CMsgDOTAProfileCard_Slot_Item Item;
  typedef CMsgDOTAProfileCard_Slot_Hero Hero;
  typedef CMsgDOTAProfileCard_Slot_Emoticon Emoticon;
  typedef CMsgDOTAProfileCard_Slot_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyFieldNumber = 2,
    kStatFieldNumber = 3,
    kItemFieldNumber = 4,
    kHeroFieldNumber = 5,
    kEmoticonFieldNumber = 6,
    kTeamFieldNumber = 7,
    kSlotIdFieldNumber = 1,
  };
  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  bool has_trophy() const;
  private:
  bool _internal_has_trophy() const;
  public:
  void clear_trophy();
  const ::CMsgDOTAProfileCard_Slot_Trophy& trophy() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Trophy* release_trophy();
  ::CMsgDOTAProfileCard_Slot_Trophy* mutable_trophy();
  void set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy);
  private:
  const ::CMsgDOTAProfileCard_Slot_Trophy& _internal_trophy() const;
  ::CMsgDOTAProfileCard_Slot_Trophy* _internal_mutable_trophy();
  public:
  void unsafe_arena_set_allocated_trophy(
      ::CMsgDOTAProfileCard_Slot_Trophy* trophy);
  ::CMsgDOTAProfileCard_Slot_Trophy* unsafe_arena_release_trophy();

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::CMsgDOTAProfileCard_Slot_Stat& stat() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Stat* release_stat();
  ::CMsgDOTAProfileCard_Slot_Stat* mutable_stat();
  void set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat);
  private:
  const ::CMsgDOTAProfileCard_Slot_Stat& _internal_stat() const;
  ::CMsgDOTAProfileCard_Slot_Stat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::CMsgDOTAProfileCard_Slot_Stat* stat);
  ::CMsgDOTAProfileCard_Slot_Stat* unsafe_arena_release_stat();

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::CMsgDOTAProfileCard_Slot_Item& item() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Item* release_item();
  ::CMsgDOTAProfileCard_Slot_Item* mutable_item();
  void set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item);
  private:
  const ::CMsgDOTAProfileCard_Slot_Item& _internal_item() const;
  ::CMsgDOTAProfileCard_Slot_Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::CMsgDOTAProfileCard_Slot_Item* item);
  ::CMsgDOTAProfileCard_Slot_Item* unsafe_arena_release_item();

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  bool has_hero() const;
  private:
  bool _internal_has_hero() const;
  public:
  void clear_hero();
  const ::CMsgDOTAProfileCard_Slot_Hero& hero() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Hero* release_hero();
  ::CMsgDOTAProfileCard_Slot_Hero* mutable_hero();
  void set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero);
  private:
  const ::CMsgDOTAProfileCard_Slot_Hero& _internal_hero() const;
  ::CMsgDOTAProfileCard_Slot_Hero* _internal_mutable_hero();
  public:
  void unsafe_arena_set_allocated_hero(
      ::CMsgDOTAProfileCard_Slot_Hero* hero);
  ::CMsgDOTAProfileCard_Slot_Hero* unsafe_arena_release_hero();

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  bool has_emoticon() const;
  private:
  bool _internal_has_emoticon() const;
  public:
  void clear_emoticon();
  const ::CMsgDOTAProfileCard_Slot_Emoticon& emoticon() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Emoticon* release_emoticon();
  ::CMsgDOTAProfileCard_Slot_Emoticon* mutable_emoticon();
  void set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon);
  private:
  const ::CMsgDOTAProfileCard_Slot_Emoticon& _internal_emoticon() const;
  ::CMsgDOTAProfileCard_Slot_Emoticon* _internal_mutable_emoticon();
  public:
  void unsafe_arena_set_allocated_emoticon(
      ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon);
  ::CMsgDOTAProfileCard_Slot_Emoticon* unsafe_arena_release_emoticon();

  // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const ::CMsgDOTAProfileCard_Slot_Team& team() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Team* release_team();
  ::CMsgDOTAProfileCard_Slot_Team* mutable_team();
  void set_allocated_team(::CMsgDOTAProfileCard_Slot_Team* team);
  private:
  const ::CMsgDOTAProfileCard_Slot_Team& _internal_team() const;
  ::CMsgDOTAProfileCard_Slot_Team* _internal_mutable_team();
  public:
  void unsafe_arena_set_allocated_team(
      ::CMsgDOTAProfileCard_Slot_Team* team);
  ::CMsgDOTAProfileCard_Slot_Team* unsafe_arena_release_team();

  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDOTAProfileCard_Slot_Trophy* trophy_;
    ::CMsgDOTAProfileCard_Slot_Stat* stat_;
    ::CMsgDOTAProfileCard_Slot_Item* item_;
    ::CMsgDOTAProfileCard_Slot_Hero* hero_;
    ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon_;
    ::CMsgDOTAProfileCard_Slot_Team* team_;
    uint32_t slot_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard) */ {
 public:
  inline CMsgDOTAProfileCard() : CMsgDOTAProfileCard(nullptr) {}
  ~CMsgDOTAProfileCard() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAProfileCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from);
  CMsgDOTAProfileCard(CMsgDOTAProfileCard&& from) noexcept
    : CMsgDOTAProfileCard() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard& operator=(const CMsgDOTAProfileCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard& operator=(CMsgDOTAProfileCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard*>(
               &_CMsgDOTAProfileCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgDOTAProfileCard& a, CMsgDOTAProfileCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAProfileCard& from) {
    CMsgDOTAProfileCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard";
  }
  protected:
  explicit CMsgDOTAProfileCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot Slot;

  typedef CMsgDOTAProfileCard_EStatID EStatID;
  static constexpr EStatID k_eStat_Wins =
    CMsgDOTAProfileCard_EStatID_k_eStat_Wins;
  static constexpr EStatID k_eStat_Commends =
    CMsgDOTAProfileCard_EStatID_k_eStat_Commends;
  static constexpr EStatID k_eStat_GamesPlayed =
    CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed;
  static constexpr EStatID k_eStat_FirstMatchDate =
    CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate;
  static constexpr EStatID k_eStat_PreviousSeasonRank =
    CMsgDOTAProfileCard_EStatID_k_eStat_PreviousSeasonRank;
  static constexpr EStatID k_eStat_GamesMVP =
    CMsgDOTAProfileCard_EStatID_k_eStat_GamesMVP;
  static inline bool EStatID_IsValid(int value) {
    return CMsgDOTAProfileCard_EStatID_IsValid(value);
  }
  static constexpr EStatID EStatID_MIN =
    CMsgDOTAProfileCard_EStatID_EStatID_MIN;
  static constexpr EStatID EStatID_MAX =
    CMsgDOTAProfileCard_EStatID_EStatID_MAX;
  static constexpr int EStatID_ARRAYSIZE =
    CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EStatID_descriptor() {
    return CMsgDOTAProfileCard_EStatID_descriptor();
  }
  template<typename T>
  static inline const std::string& EStatID_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EStatID>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EStatID_Name.");
    return CMsgDOTAProfileCard_EStatID_Name(enum_t_value);
  }
  static inline bool EStatID_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EStatID* value) {
    return CMsgDOTAProfileCard_EStatID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 3,
    kRecentBattleCupVictoryFieldNumber = 7,
    kAccountIdFieldNumber = 1,
    kBadgePointsFieldNumber = 4,
    kEventPointsFieldNumber = 5,
    kEventIdFieldNumber = 6,
    kRankTierFieldNumber = 8,
    kLeaderboardRankFieldNumber = 9,
    kIsPlusSubscriberFieldNumber = 10,
    kPlusOriginalStartDateFieldNumber = 11,
    kRankTierScoreFieldNumber = 12,
    kLeaderboardRankCoreFieldNumber = 17,
    kFavoriteTeamPackedFieldNumber = 24,
    kTitleFieldNumber = 23,
    kLifetimeGamesFieldNumber = 25,
  };
  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::CMsgDOTAProfileCard_Slot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
      mutable_slots();
  private:
  const ::CMsgDOTAProfileCard_Slot& _internal_slots(int index) const;
  ::CMsgDOTAProfileCard_Slot* _internal_add_slots();
  public:
  const ::CMsgDOTAProfileCard_Slot& slots(int index) const;
  ::CMsgDOTAProfileCard_Slot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
      slots() const;

  // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
  bool has_recent_battle_cup_victory() const;
  private:
  bool _internal_has_recent_battle_cup_victory() const;
  public:
  void clear_recent_battle_cup_victory();
  const ::CMsgBattleCupVictory& recent_battle_cup_victory() const;
  PROTOBUF_NODISCARD ::CMsgBattleCupVictory* release_recent_battle_cup_victory();
  ::CMsgBattleCupVictory* mutable_recent_battle_cup_victory();
  void set_allocated_recent_battle_cup_victory(::CMsgBattleCupVictory* recent_battle_cup_victory);
  private:
  const ::CMsgBattleCupVictory& _internal_recent_battle_cup_victory() const;
  ::CMsgBattleCupVictory* _internal_mutable_recent_battle_cup_victory();
  public:
  void unsafe_arena_set_allocated_recent_battle_cup_victory(
      ::CMsgBattleCupVictory* recent_battle_cup_victory);
  ::CMsgBattleCupVictory* unsafe_arena_release_recent_battle_cup_victory();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 badge_points = 4;
  bool has_badge_points() const;
  private:
  bool _internal_has_badge_points() const;
  public:
  void clear_badge_points();
  uint32_t badge_points() const;
  void set_badge_points(uint32_t value);
  private:
  uint32_t _internal_badge_points() const;
  void _internal_set_badge_points(uint32_t value);
  public:

  // optional uint32 event_points = 5;
  bool has_event_points() const;
  private:
  bool _internal_has_event_points() const;
  public:
  void clear_event_points();
  uint32_t event_points() const;
  void set_event_points(uint32_t value);
  private:
  uint32_t _internal_event_points() const;
  void _internal_set_event_points(uint32_t value);
  public:

  // optional uint32 event_id = 6;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 rank_tier = 8;
  bool has_rank_tier() const;
  private:
  bool _internal_has_rank_tier() const;
  public:
  void clear_rank_tier();
  uint32_t rank_tier() const;
  void set_rank_tier(uint32_t value);
  private:
  uint32_t _internal_rank_tier() const;
  void _internal_set_rank_tier(uint32_t value);
  public:

  // optional uint32 leaderboard_rank = 9;
  bool has_leaderboard_rank() const;
  private:
  bool _internal_has_leaderboard_rank() const;
  public:
  void clear_leaderboard_rank();
  uint32_t leaderboard_rank() const;
  void set_leaderboard_rank(uint32_t value);
  private:
  uint32_t _internal_leaderboard_rank() const;
  void _internal_set_leaderboard_rank(uint32_t value);
  public:

  // optional bool is_plus_subscriber = 10;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // optional uint32 plus_original_start_date = 11;
  bool has_plus_original_start_date() const;
  private:
  bool _internal_has_plus_original_start_date() const;
  public:
  void clear_plus_original_start_date();
  uint32_t plus_original_start_date() const;
  void set_plus_original_start_date(uint32_t value);
  private:
  uint32_t _internal_plus_original_start_date() const;
  void _internal_set_plus_original_start_date(uint32_t value);
  public:

  // optional uint32 rank_tier_score = 12;
  bool has_rank_tier_score() const;
  private:
  bool _internal_has_rank_tier_score() const;
  public:
  void clear_rank_tier_score();
  uint32_t rank_tier_score() const;
  void set_rank_tier_score(uint32_t value);
  private:
  uint32_t _internal_rank_tier_score() const;
  void _internal_set_rank_tier_score(uint32_t value);
  public:

  // optional uint32 leaderboard_rank_core = 17;
  bool has_leaderboard_rank_core() const;
  private:
  bool _internal_has_leaderboard_rank_core() const;
  public:
  void clear_leaderboard_rank_core();
  uint32_t leaderboard_rank_core() const;
  void set_leaderboard_rank_core(uint32_t value);
  private:
  uint32_t _internal_leaderboard_rank_core() const;
  void _internal_set_leaderboard_rank_core(uint32_t value);
  public:

  // optional uint64 favorite_team_packed = 24;
  bool has_favorite_team_packed() const;
  private:
  bool _internal_has_favorite_team_packed() const;
  public:
  void clear_favorite_team_packed();
  uint64_t favorite_team_packed() const;
  void set_favorite_team_packed(uint64_t value);
  private:
  uint64_t _internal_favorite_team_packed() const;
  void _internal_set_favorite_team_packed(uint64_t value);
  public:

  // optional uint32 title = 23;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  uint32_t title() const;
  void set_title(uint32_t value);
  private:
  uint32_t _internal_title() const;
  void _internal_set_title(uint32_t value);
  public:

  // optional uint32 lifetime_games = 25;
  bool has_lifetime_games() const;
  private:
  bool _internal_has_lifetime_games() const;
  public:
  void clear_lifetime_games();
  uint32_t lifetime_games() const;
  void set_lifetime_games(uint32_t value);
  private:
  uint32_t _internal_lifetime_games() const;
  void _internal_set_lifetime_games(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot > slots_;
    ::CMsgBattleCupVictory* recent_battle_cup_victory_;
    uint32_t account_id_;
    uint32_t badge_points_;
    uint32_t event_points_;
    uint32_t event_id_;
    uint32_t rank_tier_;
    uint32_t leaderboard_rank_;
    bool is_plus_subscriber_;
    uint32_t plus_original_start_date_;
    uint32_t rank_tier_score_;
    uint32_t leaderboard_rank_core_;
    uint64_t favorite_team_packed_;
    uint32_t title_;
    uint32_t lifetime_games_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPlayerChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAPlayerChallenge) */ {
 public:
  inline CSODOTAPlayerChallenge() : CSODOTAPlayerChallenge(nullptr) {}
  ~CSODOTAPlayerChallenge() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAPlayerChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from);
  CSODOTAPlayerChallenge(CSODOTAPlayerChallenge&& from) noexcept
    : CSODOTAPlayerChallenge() {
    *this = ::std::move(from);
  }

  inline CSODOTAPlayerChallenge& operator=(const CSODOTAPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAPlayerChallenge& operator=(CSODOTAPlayerChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAPlayerChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAPlayerChallenge* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPlayerChallenge*>(
               &_CSODOTAPlayerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSODOTAPlayerChallenge& a, CSODOTAPlayerChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAPlayerChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAPlayerChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAPlayerChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAPlayerChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAPlayerChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAPlayerChallenge& from) {
    CSODOTAPlayerChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPlayerChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAPlayerChallenge";
  }
  protected:
  explicit CSODOTAPlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kSlotIdFieldNumber = 3,
    kIntParam0FieldNumber = 5,
    kIntParam1FieldNumber = 6,
    kCreatedTimeFieldNumber = 7,
    kCompletedFieldNumber = 8,
    kSequenceIdFieldNumber = 9,
    kChallengeTierFieldNumber = 10,
    kFlagsFieldNumber = 11,
    kAttemptsFieldNumber = 12,
    kCompleteLimitFieldNumber = 13,
    kQuestRankFieldNumber = 14,
    kMaxQuestRankFieldNumber = 15,
    kInstanceIdFieldNumber = 16,
    kHeroIdFieldNumber = 17,
    kTemplateIdFieldNumber = 18,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 event_id = 2 [(.key_field) = true];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 slot_id = 3 [(.key_field) = true];
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // optional uint32 int_param_0 = 5;
  bool has_int_param_0() const;
  private:
  bool _internal_has_int_param_0() const;
  public:
  void clear_int_param_0();
  uint32_t int_param_0() const;
  void set_int_param_0(uint32_t value);
  private:
  uint32_t _internal_int_param_0() const;
  void _internal_set_int_param_0(uint32_t value);
  public:

  // optional uint32 int_param_1 = 6;
  bool has_int_param_1() const;
  private:
  bool _internal_has_int_param_1() const;
  public:
  void clear_int_param_1();
  uint32_t int_param_1() const;
  void set_int_param_1(uint32_t value);
  private:
  uint32_t _internal_int_param_1() const;
  void _internal_set_int_param_1(uint32_t value);
  public:

  // optional uint32 created_time = 7;
  bool has_created_time() const;
  private:
  bool _internal_has_created_time() const;
  public:
  void clear_created_time();
  uint32_t created_time() const;
  void set_created_time(uint32_t value);
  private:
  uint32_t _internal_created_time() const;
  void _internal_set_created_time(uint32_t value);
  public:

  // optional uint32 completed = 8;
  bool has_completed() const;
  private:
  bool _internal_has_completed() const;
  public:
  void clear_completed();
  uint32_t completed() const;
  void set_completed(uint32_t value);
  private:
  uint32_t _internal_completed() const;
  void _internal_set_completed(uint32_t value);
  public:

  // optional uint32 sequence_id = 9;
  bool has_sequence_id() const;
  private:
  bool _internal_has_sequence_id() const;
  public:
  void clear_sequence_id();
  uint32_t sequence_id() const;
  void set_sequence_id(uint32_t value);
  private:
  uint32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint32_t value);
  public:

  // optional uint32 challenge_tier = 10;
  bool has_challenge_tier() const;
  private:
  bool _internal_has_challenge_tier() const;
  public:
  void clear_challenge_tier();
  uint32_t challenge_tier() const;
  void set_challenge_tier(uint32_t value);
  private:
  uint32_t _internal_challenge_tier() const;
  void _internal_set_challenge_tier(uint32_t value);
  public:

  // optional uint32 flags = 11;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 attempts = 12;
  bool has_attempts() const;
  private:
  bool _internal_has_attempts() const;
  public:
  void clear_attempts();
  uint32_t attempts() const;
  void set_attempts(uint32_t value);
  private:
  uint32_t _internal_attempts() const;
  void _internal_set_attempts(uint32_t value);
  public:

  // optional uint32 complete_limit = 13;
  bool has_complete_limit() const;
  private:
  bool _internal_has_complete_limit() const;
  public:
  void clear_complete_limit();
  uint32_t complete_limit() const;
  void set_complete_limit(uint32_t value);
  private:
  uint32_t _internal_complete_limit() const;
  void _internal_set_complete_limit(uint32_t value);
  public:

  // optional uint32 quest_rank = 14;
  bool has_quest_rank() const;
  private:
  bool _internal_has_quest_rank() const;
  public:
  void clear_quest_rank();
  uint32_t quest_rank() const;
  void set_quest_rank(uint32_t value);
  private:
  uint32_t _internal_quest_rank() const;
  void _internal_set_quest_rank(uint32_t value);
  public:

  // optional uint32 max_quest_rank = 15;
  bool has_max_quest_rank() const;
  private:
  bool _internal_has_max_quest_rank() const;
  public:
  void clear_max_quest_rank();
  uint32_t max_quest_rank() const;
  void set_max_quest_rank(uint32_t value);
  private:
  uint32_t _internal_max_quest_rank() const;
  void _internal_set_max_quest_rank(uint32_t value);
  public:

  // optional uint32 instance_id = 16;
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  uint32_t instance_id() const;
  void set_instance_id(uint32_t value);
  private:
  uint32_t _internal_instance_id() const;
  void _internal_set_instance_id(uint32_t value);
  public:

  // optional uint32 hero_id = 17;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 template_id = 18;
  bool has_template_id() const;
  private:
  bool _internal_has_template_id() const;
  public:
  void clear_template_id();
  uint32_t template_id() const;
  void set_template_id(uint32_t value);
  private:
  uint32_t _internal_template_id() const;
  void _internal_set_template_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAPlayerChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t event_id_;
    uint32_t slot_id_;
    uint32_t int_param_0_;
    uint32_t int_param_1_;
    uint32_t created_time_;
    uint32_t completed_;
    uint32_t sequence_id_;
    uint32_t challenge_tier_;
    uint32_t flags_;
    uint32_t attempts_;
    uint32_t complete_limit_;
    uint32_t quest_rank_;
    uint32_t max_quest_rank_;
    uint32_t instance_id_;
    uint32_t hero_id_;
    uint32_t template_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCRerollPlayerChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCRerollPlayerChallenge) */ {
 public:
  inline CMsgClientToGCRerollPlayerChallenge() : CMsgClientToGCRerollPlayerChallenge(nullptr) {}
  ~CMsgClientToGCRerollPlayerChallenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCRerollPlayerChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from);
  CMsgClientToGCRerollPlayerChallenge(CMsgClientToGCRerollPlayerChallenge&& from) noexcept
    : CMsgClientToGCRerollPlayerChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCRerollPlayerChallenge& operator=(const CMsgClientToGCRerollPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCRerollPlayerChallenge& operator=(CMsgClientToGCRerollPlayerChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCRerollPlayerChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCRerollPlayerChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCRerollPlayerChallenge*>(
               &_CMsgClientToGCRerollPlayerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgClientToGCRerollPlayerChallenge& a, CMsgClientToGCRerollPlayerChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCRerollPlayerChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCRerollPlayerChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCRerollPlayerChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCRerollPlayerChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCRerollPlayerChallenge& from) {
    CMsgClientToGCRerollPlayerChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCRerollPlayerChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCRerollPlayerChallenge";
  }
  protected:
  explicit CMsgClientToGCRerollPlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kSequenceIdFieldNumber = 3,
    kHeroIdFieldNumber = 4,
  };
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 sequence_id = 3;
  bool has_sequence_id() const;
  private:
  bool _internal_has_sequence_id() const;
  public:
  void clear_sequence_id();
  uint32_t sequence_id() const;
  void set_sequence_id(uint32_t value);
  private:
  uint32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint32_t value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRerollPlayerChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int event_id_;
    uint32_t sequence_id_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCRerollPlayerChallengeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCRerollPlayerChallengeResponse) */ {
 public:
  inline CMsgGCRerollPlayerChallengeResponse() : CMsgGCRerollPlayerChallengeResponse(nullptr) {}
  ~CMsgGCRerollPlayerChallengeResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCRerollPlayerChallengeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from);
  CMsgGCRerollPlayerChallengeResponse(CMsgGCRerollPlayerChallengeResponse&& from) noexcept
    : CMsgGCRerollPlayerChallengeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCRerollPlayerChallengeResponse& operator=(const CMsgGCRerollPlayerChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCRerollPlayerChallengeResponse& operator=(CMsgGCRerollPlayerChallengeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCRerollPlayerChallengeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCRerollPlayerChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCRerollPlayerChallengeResponse*>(
               &_CMsgGCRerollPlayerChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgGCRerollPlayerChallengeResponse& a, CMsgGCRerollPlayerChallengeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCRerollPlayerChallengeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCRerollPlayerChallengeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCRerollPlayerChallengeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCRerollPlayerChallengeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCRerollPlayerChallengeResponse& from) {
    CMsgGCRerollPlayerChallengeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCRerollPlayerChallengeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCRerollPlayerChallengeResponse";
  }
  protected:
  explicit CMsgGCRerollPlayerChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCRerollPlayerChallengeResponse_EResult EResult;
  static constexpr EResult eResult_Success =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Success;
  static constexpr EResult eResult_Dropped =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_Dropped;
  static constexpr EResult eResult_NotFound =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_NotFound;
  static constexpr EResult eResult_CantReroll =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_CantReroll;
  static constexpr EResult eResult_ServerError =
    CMsgGCRerollPlayerChallengeResponse_EResult_eResult_ServerError;
  static inline bool EResult_IsValid(int value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgGCRerollPlayerChallengeResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgGCRerollPlayerChallengeResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgGCRerollPlayerChallengeResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgGCRerollPlayerChallengeResponse_EResult result() const;
  void set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value);
  private:
  ::CMsgGCRerollPlayerChallengeResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCRerollPlayerChallengeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCTopCustomGamesList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCTopCustomGamesList) */ {
 public:
  inline CMsgGCTopCustomGamesList() : CMsgGCTopCustomGamesList(nullptr) {}
  ~CMsgGCTopCustomGamesList() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCTopCustomGamesList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from);
  CMsgGCTopCustomGamesList(CMsgGCTopCustomGamesList&& from) noexcept
    : CMsgGCTopCustomGamesList() {
    *this = ::std::move(from);
  }

  inline CMsgGCTopCustomGamesList& operator=(const CMsgGCTopCustomGamesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCTopCustomGamesList& operator=(CMsgGCTopCustomGamesList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCTopCustomGamesList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCTopCustomGamesList* internal_default_instance() {
    return reinterpret_cast<const CMsgGCTopCustomGamesList*>(
               &_CMsgGCTopCustomGamesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgGCTopCustomGamesList& a, CMsgGCTopCustomGamesList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCTopCustomGamesList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCTopCustomGamesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCTopCustomGamesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCTopCustomGamesList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCTopCustomGamesList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCTopCustomGamesList& from) {
    CMsgGCTopCustomGamesList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCTopCustomGamesList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCTopCustomGamesList";
  }
  protected:
  explicit CMsgGCTopCustomGamesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopCustomGamesFieldNumber = 1,
    kGameOfTheDayFieldNumber = 2,
  };
  // repeated uint64 top_custom_games = 1;
  int top_custom_games_size() const;
  private:
  int _internal_top_custom_games_size() const;
  public:
  void clear_top_custom_games();
  private:
  uint64_t _internal_top_custom_games(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_top_custom_games() const;
  void _internal_add_top_custom_games(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_top_custom_games();
  public:
  uint64_t top_custom_games(int index) const;
  void set_top_custom_games(int index, uint64_t value);
  void add_top_custom_games(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      top_custom_games() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_top_custom_games();

  // optional uint64 game_of_the_day = 2;
  bool has_game_of_the_day() const;
  private:
  bool _internal_has_game_of_the_day() const;
  public:
  void clear_game_of_the_day();
  uint64_t game_of_the_day() const;
  void set_game_of_the_day(uint64_t value);
  private:
  uint64_t _internal_game_of_the_day() const;
  void _internal_set_game_of_the_day(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCTopCustomGamesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > top_custom_games_;
    uint64_t game_of_the_day_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_TeamDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.TeamDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_TeamDetails() : CMsgDOTARealtimeGameStats_TeamDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_TeamDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_TeamDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  CMsgDOTARealtimeGameStats_TeamDetails(CMsgDOTARealtimeGameStats_TeamDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_TeamDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_TeamDetails& operator=(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_TeamDetails& operator=(CMsgDOTARealtimeGameStats_TeamDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_TeamDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_TeamDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_TeamDetails*>(
               &_CMsgDOTARealtimeGameStats_TeamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgDOTARealtimeGameStats_TeamDetails& a, CMsgDOTARealtimeGameStats_TeamDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_TeamDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_TeamDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_TeamDetails& from) {
    CMsgDOTARealtimeGameStats_TeamDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_TeamDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.TeamDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_TeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 6,
    kTeamNameFieldNumber = 3,
    kTeamTagFieldNumber = 10,
    kTeamLogoUrlFieldNumber = 11,
    kTeamNumberFieldNumber = 1,
    kTeamIdFieldNumber = 2,
    kTeamLogoFieldNumber = 4,
    kScoreFieldNumber = 5,
    kOnlyTeamFieldNumber = 7,
    kCheersFieldNumber = 8,
    kNetWorthFieldNumber = 9,
  };
  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgDOTARealtimeGameStats_PlayerDetails* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >*
      mutable_players();
  private:
  const ::CMsgDOTARealtimeGameStats_PlayerDetails& _internal_players(int index) const;
  ::CMsgDOTARealtimeGameStats_PlayerDetails* _internal_add_players();
  public:
  const ::CMsgDOTARealtimeGameStats_PlayerDetails& players(int index) const;
  ::CMsgDOTARealtimeGameStats_PlayerDetails* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >&
      players() const;

  // optional string team_name = 3;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 10;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_tag();
  PROTOBUF_NODISCARD std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string team_logo_url = 11;
  bool has_team_logo_url() const;
  private:
  bool _internal_has_team_logo_url() const;
  public:
  void clear_team_logo_url();
  const std::string& team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_team_logo_url();
  void set_allocated_team_logo_url(std::string* team_logo_url);
  private:
  const std::string& _internal_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_logo_url(const std::string& value);
  std::string* _internal_mutable_team_logo_url();
  public:

  // optional uint32 team_number = 1;
  bool has_team_number() const;
  private:
  bool _internal_has_team_number() const;
  public:
  void clear_team_number();
  uint32_t team_number() const;
  void set_team_number(uint32_t value);
  private:
  uint32_t _internal_team_number() const;
  void _internal_set_team_number(uint32_t value);
  public:

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional fixed64 team_logo = 4;
  bool has_team_logo() const;
  private:
  bool _internal_has_team_logo() const;
  public:
  void clear_team_logo();
  uint64_t team_logo() const;
  void set_team_logo(uint64_t value);
  private:
  uint64_t _internal_team_logo() const;
  void _internal_set_team_logo(uint64_t value);
  public:

  // optional uint32 score = 5;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // optional bool only_team = 7;
  bool has_only_team() const;
  private:
  bool _internal_has_only_team() const;
  public:
  void clear_only_team();
  bool only_team() const;
  void set_only_team(bool value);
  private:
  bool _internal_only_team() const;
  void _internal_set_only_team(bool value);
  public:

  // optional uint32 cheers = 8;
  bool has_cheers() const;
  private:
  bool _internal_has_cheers() const;
  public:
  void clear_cheers();
  uint32_t cheers() const;
  void set_cheers(uint32_t value);
  private:
  uint32_t _internal_cheers() const;
  void _internal_set_cheers(uint32_t value);
  public:

  // optional uint32 net_worth = 9;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.TeamDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_logo_url_;
    uint32_t team_number_;
    uint32_t team_id_;
    uint64_t team_logo_;
    uint32_t score_;
    bool only_team_;
    uint32_t cheers_;
    uint32_t net_worth_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_ItemDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.ItemDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_ItemDetails() : CMsgDOTARealtimeGameStats_ItemDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_ItemDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_ItemDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  CMsgDOTARealtimeGameStats_ItemDetails(CMsgDOTARealtimeGameStats_ItemDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_ItemDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_ItemDetails& operator=(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_ItemDetails& operator=(CMsgDOTARealtimeGameStats_ItemDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_ItemDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_ItemDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_ItemDetails*>(
               &_CMsgDOTARealtimeGameStats_ItemDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgDOTARealtimeGameStats_ItemDetails& a, CMsgDOTARealtimeGameStats_ItemDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_ItemDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_ItemDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_ItemDetails& from) {
    CMsgDOTARealtimeGameStats_ItemDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_ItemDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.ItemDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_ItemDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTimeFieldNumber = 3,
    kSoldFieldNumber = 4,
    kStackcountFieldNumber = 5,
    kItemAbilityIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // optional bool sold = 4;
  bool has_sold() const;
  private:
  bool _internal_has_sold() const;
  public:
  void clear_sold();
  bool sold() const;
  void set_sold(bool value);
  private:
  bool _internal_sold() const;
  void _internal_set_sold(bool value);
  public:

  // optional uint32 stackcount = 5;
  bool has_stackcount() const;
  private:
  bool _internal_has_stackcount() const;
  public:
  void clear_stackcount();
  uint32_t stackcount() const;
  void set_stackcount(uint32_t value);
  private:
  uint32_t _internal_stackcount() const;
  void _internal_set_stackcount(uint32_t value);
  public:

  // optional int32 item_ability_id = 1 [default = -1];
  bool has_item_ability_id() const;
  private:
  bool _internal_has_item_ability_id() const;
  public:
  void clear_item_ability_id();
  int32_t item_ability_id() const;
  void set_item_ability_id(int32_t value);
  private:
  int32_t _internal_item_ability_id() const;
  void _internal_set_item_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.ItemDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t time_;
    bool sold_;
    uint32_t stackcount_;
    int32_t item_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.AbilityDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_AbilityDetails() : CMsgDOTARealtimeGameStats_AbilityDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_AbilityDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_AbilityDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  CMsgDOTARealtimeGameStats_AbilityDetails(CMsgDOTARealtimeGameStats_AbilityDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_AbilityDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_AbilityDetails& operator=(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_AbilityDetails& operator=(CMsgDOTARealtimeGameStats_AbilityDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_AbilityDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_AbilityDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_AbilityDetails*>(
               &_CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgDOTARealtimeGameStats_AbilityDetails& a, CMsgDOTARealtimeGameStats_AbilityDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_AbilityDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_AbilityDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
    CMsgDOTARealtimeGameStats_AbilityDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_AbilityDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.AbilityDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_AbilityDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLevelFieldNumber = 3,
    kCooldownFieldNumber = 4,
    kCooldownMaxFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional float cooldown = 4;
  bool has_cooldown() const;
  private:
  bool _internal_has_cooldown() const;
  public:
  void clear_cooldown();
  float cooldown() const;
  void set_cooldown(float value);
  private:
  float _internal_cooldown() const;
  void _internal_set_cooldown(float value);
  public:

  // optional float cooldown_max = 5;
  bool has_cooldown_max() const;
  private:
  bool _internal_has_cooldown_max() const;
  public:
  void clear_cooldown_max();
  float cooldown_max() const;
  void set_cooldown_max(float value);
  private:
  float _internal_cooldown_max() const;
  void _internal_set_cooldown_max(float value);
  public:

  // optional int32 id = 1 [default = -1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.AbilityDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t level_;
    float cooldown_;
    float cooldown_max_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_HeroToHeroStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.HeroToHeroStats) */ {
 public:
  inline CMsgDOTARealtimeGameStats_HeroToHeroStats() : CMsgDOTARealtimeGameStats_HeroToHeroStats(nullptr) {}
  ~CMsgDOTARealtimeGameStats_HeroToHeroStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_HeroToHeroStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  CMsgDOTARealtimeGameStats_HeroToHeroStats(CMsgDOTARealtimeGameStats_HeroToHeroStats&& from) noexcept
    : CMsgDOTARealtimeGameStats_HeroToHeroStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_HeroToHeroStats& operator=(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_HeroToHeroStats& operator=(CMsgDOTARealtimeGameStats_HeroToHeroStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_HeroToHeroStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_HeroToHeroStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_HeroToHeroStats*>(
               &_CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgDOTARealtimeGameStats_HeroToHeroStats& a, CMsgDOTARealtimeGameStats_HeroToHeroStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_HeroToHeroStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_HeroToHeroStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
    CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.HeroToHeroStats";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_HeroToHeroStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillsFieldNumber = 2,
    kAssistsFieldNumber = 3,
    kVictimidFieldNumber = 1,
  };
  // optional uint32 kills = 2;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 assists = 3;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional int32 victimid = 1 [default = -1];
  bool has_victimid() const;
  private:
  bool _internal_has_victimid() const;
  public:
  void clear_victimid();
  int32_t victimid() const;
  void set_victimid(int32_t value);
  private:
  int32_t _internal_victimid() const;
  void _internal_set_victimid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.HeroToHeroStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t kills_;
    uint32_t assists_;
    int32_t victimid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_AbilityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.AbilityList) */ {
 public:
  inline CMsgDOTARealtimeGameStats_AbilityList() : CMsgDOTARealtimeGameStats_AbilityList(nullptr) {}
  ~CMsgDOTARealtimeGameStats_AbilityList() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_AbilityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from);
  CMsgDOTARealtimeGameStats_AbilityList(CMsgDOTARealtimeGameStats_AbilityList&& from) noexcept
    : CMsgDOTARealtimeGameStats_AbilityList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_AbilityList& operator=(const CMsgDOTARealtimeGameStats_AbilityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_AbilityList& operator=(CMsgDOTARealtimeGameStats_AbilityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_AbilityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_AbilityList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_AbilityList*>(
               &_CMsgDOTARealtimeGameStats_AbilityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgDOTARealtimeGameStats_AbilityList& a, CMsgDOTARealtimeGameStats_AbilityList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_AbilityList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_AbilityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_AbilityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_AbilityList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_AbilityList& from) {
    CMsgDOTARealtimeGameStats_AbilityList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_AbilityList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.AbilityList";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_AbilityList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated int32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  int32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id() const;
  void _internal_add_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id();
  public:
  int32_t id(int index) const;
  void set_id(int index, int32_t value);
  void add_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.AbilityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PlayerDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.PlayerDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_PlayerDetails() : CMsgDOTARealtimeGameStats_PlayerDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_PlayerDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_PlayerDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  CMsgDOTARealtimeGameStats_PlayerDetails(CMsgDOTARealtimeGameStats_PlayerDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_PlayerDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_PlayerDetails& operator=(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_PlayerDetails& operator=(CMsgDOTARealtimeGameStats_PlayerDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_PlayerDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_PlayerDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_PlayerDetails*>(
               &_CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgDOTARealtimeGameStats_PlayerDetails& a, CMsgDOTARealtimeGameStats_PlayerDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_PlayerDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_PlayerDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
    CMsgDOTARealtimeGameStats_PlayerDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_PlayerDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.PlayerDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_PlayerDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilitiesFieldNumber = 26,
    kItemsFieldNumber = 43,
    kStashitemsFieldNumber = 44,
    kItemshoppinglistFieldNumber = 45,
    kLevelpointsFieldNumber = 46,
    kHeroToHeroStatsFieldNumber = 47,
    kNameFieldNumber = 3,
    kAccountidFieldNumber = 1,
    kTeamFieldNumber = 4,
    kHeroidFieldNumber = 5,
    kHealthpointsFieldNumber = 6,
    kMaxhealthpointsFieldNumber = 7,
    kHealthregenrateFieldNumber = 8,
    kManapointsFieldNumber = 9,
    kMaxmanapointsFieldNumber = 10,
    kManaregenrateFieldNumber = 11,
    kBaseStrengthFieldNumber = 12,
    kBaseAgilityFieldNumber = 13,
    kBaseIntelligenceFieldNumber = 14,
    kBaseArmorFieldNumber = 15,
    kBaseMovespeedFieldNumber = 16,
    kBaseDamageFieldNumber = 17,
    kStrengthFieldNumber = 18,
    kAgilityFieldNumber = 19,
    kIntelligenceFieldNumber = 20,
    kArmorFieldNumber = 21,
    kMovespeedFieldNumber = 22,
    kDamageFieldNumber = 23,
    kHeroDamageFieldNumber = 24,
    kTowerDamageFieldNumber = 25,
    kLevelFieldNumber = 27,
    kKillCountFieldNumber = 28,
    kDeathCountFieldNumber = 29,
    kAssistsCountFieldNumber = 30,
    kDeniesCountFieldNumber = 31,
    kLhCountFieldNumber = 32,
    kHeroHealingFieldNumber = 33,
    kGoldPerMinFieldNumber = 34,
    kXpPerMinFieldNumber = 35,
    kNetGoldFieldNumber = 36,
    kGoldFieldNumber = 37,
    kXFieldNumber = 38,
    kYFieldNumber = 39,
    kRespawnTimeFieldNumber = 40,
    kUltimateCooldownFieldNumber = 41,
    kHasBuybackFieldNumber = 42,
    kHasUltimateFieldNumber = 48,
    kHasUltimateManaFieldNumber = 49,
    kPlayeridFieldNumber = 2,
  };
  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::CMsgDOTARealtimeGameStats_AbilityDetails* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >*
      mutable_abilities();
  private:
  const ::CMsgDOTARealtimeGameStats_AbilityDetails& _internal_abilities(int index) const;
  ::CMsgDOTARealtimeGameStats_AbilityDetails* _internal_add_abilities();
  public:
  const ::CMsgDOTARealtimeGameStats_AbilityDetails& abilities(int index) const;
  ::CMsgDOTARealtimeGameStats_AbilityDetails* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >&
      abilities() const;

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_items();
  private:
  const ::CMsgDOTARealtimeGameStats_ItemDetails& _internal_items(int index) const;
  ::CMsgDOTARealtimeGameStats_ItemDetails* _internal_add_items();
  public:
  const ::CMsgDOTARealtimeGameStats_ItemDetails& items(int index) const;
  ::CMsgDOTARealtimeGameStats_ItemDetails* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      items() const;

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  int stashitems_size() const;
  private:
  int _internal_stashitems_size() const;
  public:
  void clear_stashitems();
  ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_stashitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_stashitems();
  private:
  const ::CMsgDOTARealtimeGameStats_ItemDetails& _internal_stashitems(int index) const;
  ::CMsgDOTARealtimeGameStats_ItemDetails* _internal_add_stashitems();
  public:
  const ::CMsgDOTARealtimeGameStats_ItemDetails& stashitems(int index) const;
  ::CMsgDOTARealtimeGameStats_ItemDetails* add_stashitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      stashitems() const;

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  int itemshoppinglist_size() const;
  private:
  int _internal_itemshoppinglist_size() const;
  public:
  void clear_itemshoppinglist();
  ::CMsgDOTARealtimeGameStats_ItemDetails* mutable_itemshoppinglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
      mutable_itemshoppinglist();
  private:
  const ::CMsgDOTARealtimeGameStats_ItemDetails& _internal_itemshoppinglist(int index) const;
  ::CMsgDOTARealtimeGameStats_ItemDetails* _internal_add_itemshoppinglist();
  public:
  const ::CMsgDOTARealtimeGameStats_ItemDetails& itemshoppinglist(int index) const;
  ::CMsgDOTARealtimeGameStats_ItemDetails* add_itemshoppinglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
      itemshoppinglist() const;

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  int levelpoints_size() const;
  private:
  int _internal_levelpoints_size() const;
  public:
  void clear_levelpoints();
  ::CMsgDOTARealtimeGameStats_AbilityList* mutable_levelpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >*
      mutable_levelpoints();
  private:
  const ::CMsgDOTARealtimeGameStats_AbilityList& _internal_levelpoints(int index) const;
  ::CMsgDOTARealtimeGameStats_AbilityList* _internal_add_levelpoints();
  public:
  const ::CMsgDOTARealtimeGameStats_AbilityList& levelpoints(int index) const;
  ::CMsgDOTARealtimeGameStats_AbilityList* add_levelpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >&
      levelpoints() const;

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  int hero_to_hero_stats_size() const;
  private:
  int _internal_hero_to_hero_stats_size() const;
  public:
  void clear_hero_to_hero_stats();
  ::CMsgDOTARealtimeGameStats_HeroToHeroStats* mutable_hero_to_hero_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
      mutable_hero_to_hero_stats();
  private:
  const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& _internal_hero_to_hero_stats(int index) const;
  ::CMsgDOTARealtimeGameStats_HeroToHeroStats* _internal_add_hero_to_hero_stats();
  public:
  const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& hero_to_hero_stats(int index) const;
  ::CMsgDOTARealtimeGameStats_HeroToHeroStats* add_hero_to_hero_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
      hero_to_hero_stats() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional uint32 team = 4;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional uint32 heroid = 5;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  uint32_t heroid() const;
  void set_heroid(uint32_t value);
  private:
  uint32_t _internal_heroid() const;
  void _internal_set_heroid(uint32_t value);
  public:

  // optional uint32 healthpoints = 6;
  bool has_healthpoints() const;
  private:
  bool _internal_has_healthpoints() const;
  public:
  void clear_healthpoints();
  uint32_t healthpoints() const;
  void set_healthpoints(uint32_t value);
  private:
  uint32_t _internal_healthpoints() const;
  void _internal_set_healthpoints(uint32_t value);
  public:

  // optional uint32 maxhealthpoints = 7;
  bool has_maxhealthpoints() const;
  private:
  bool _internal_has_maxhealthpoints() const;
  public:
  void clear_maxhealthpoints();
  uint32_t maxhealthpoints() const;
  void set_maxhealthpoints(uint32_t value);
  private:
  uint32_t _internal_maxhealthpoints() const;
  void _internal_set_maxhealthpoints(uint32_t value);
  public:

  // optional float healthregenrate = 8;
  bool has_healthregenrate() const;
  private:
  bool _internal_has_healthregenrate() const;
  public:
  void clear_healthregenrate();
  float healthregenrate() const;
  void set_healthregenrate(float value);
  private:
  float _internal_healthregenrate() const;
  void _internal_set_healthregenrate(float value);
  public:

  // optional uint32 manapoints = 9;
  bool has_manapoints() const;
  private:
  bool _internal_has_manapoints() const;
  public:
  void clear_manapoints();
  uint32_t manapoints() const;
  void set_manapoints(uint32_t value);
  private:
  uint32_t _internal_manapoints() const;
  void _internal_set_manapoints(uint32_t value);
  public:

  // optional uint32 maxmanapoints = 10;
  bool has_maxmanapoints() const;
  private:
  bool _internal_has_maxmanapoints() const;
  public:
  void clear_maxmanapoints();
  uint32_t maxmanapoints() const;
  void set_maxmanapoints(uint32_t value);
  private:
  uint32_t _internal_maxmanapoints() const;
  void _internal_set_maxmanapoints(uint32_t value);
  public:

  // optional float manaregenrate = 11;
  bool has_manaregenrate() const;
  private:
  bool _internal_has_manaregenrate() const;
  public:
  void clear_manaregenrate();
  float manaregenrate() const;
  void set_manaregenrate(float value);
  private:
  float _internal_manaregenrate() const;
  void _internal_set_manaregenrate(float value);
  public:

  // optional uint32 base_strength = 12;
  bool has_base_strength() const;
  private:
  bool _internal_has_base_strength() const;
  public:
  void clear_base_strength();
  uint32_t base_strength() const;
  void set_base_strength(uint32_t value);
  private:
  uint32_t _internal_base_strength() const;
  void _internal_set_base_strength(uint32_t value);
  public:

  // optional uint32 base_agility = 13;
  bool has_base_agility() const;
  private:
  bool _internal_has_base_agility() const;
  public:
  void clear_base_agility();
  uint32_t base_agility() const;
  void set_base_agility(uint32_t value);
  private:
  uint32_t _internal_base_agility() const;
  void _internal_set_base_agility(uint32_t value);
  public:

  // optional uint32 base_intelligence = 14;
  bool has_base_intelligence() const;
  private:
  bool _internal_has_base_intelligence() const;
  public:
  void clear_base_intelligence();
  uint32_t base_intelligence() const;
  void set_base_intelligence(uint32_t value);
  private:
  uint32_t _internal_base_intelligence() const;
  void _internal_set_base_intelligence(uint32_t value);
  public:

  // optional int32 base_armor = 15;
  bool has_base_armor() const;
  private:
  bool _internal_has_base_armor() const;
  public:
  void clear_base_armor();
  int32_t base_armor() const;
  void set_base_armor(int32_t value);
  private:
  int32_t _internal_base_armor() const;
  void _internal_set_base_armor(int32_t value);
  public:

  // optional uint32 base_movespeed = 16;
  bool has_base_movespeed() const;
  private:
  bool _internal_has_base_movespeed() const;
  public:
  void clear_base_movespeed();
  uint32_t base_movespeed() const;
  void set_base_movespeed(uint32_t value);
  private:
  uint32_t _internal_base_movespeed() const;
  void _internal_set_base_movespeed(uint32_t value);
  public:

  // optional uint32 base_damage = 17;
  bool has_base_damage() const;
  private:
  bool _internal_has_base_damage() const;
  public:
  void clear_base_damage();
  uint32_t base_damage() const;
  void set_base_damage(uint32_t value);
  private:
  uint32_t _internal_base_damage() const;
  void _internal_set_base_damage(uint32_t value);
  public:

  // optional uint32 strength = 18;
  bool has_strength() const;
  private:
  bool _internal_has_strength() const;
  public:
  void clear_strength();
  uint32_t strength() const;
  void set_strength(uint32_t value);
  private:
  uint32_t _internal_strength() const;
  void _internal_set_strength(uint32_t value);
  public:

  // optional uint32 agility = 19;
  bool has_agility() const;
  private:
  bool _internal_has_agility() const;
  public:
  void clear_agility();
  uint32_t agility() const;
  void set_agility(uint32_t value);
  private:
  uint32_t _internal_agility() const;
  void _internal_set_agility(uint32_t value);
  public:

  // optional uint32 intelligence = 20;
  bool has_intelligence() const;
  private:
  bool _internal_has_intelligence() const;
  public:
  void clear_intelligence();
  uint32_t intelligence() const;
  void set_intelligence(uint32_t value);
  private:
  uint32_t _internal_intelligence() const;
  void _internal_set_intelligence(uint32_t value);
  public:

  // optional int32 armor = 21;
  bool has_armor() const;
  private:
  bool _internal_has_armor() const;
  public:
  void clear_armor();
  int32_t armor() const;
  void set_armor(int32_t value);
  private:
  int32_t _internal_armor() const;
  void _internal_set_armor(int32_t value);
  public:

  // optional uint32 movespeed = 22;
  bool has_movespeed() const;
  private:
  bool _internal_has_movespeed() const;
  public:
  void clear_movespeed();
  uint32_t movespeed() const;
  void set_movespeed(uint32_t value);
  private:
  uint32_t _internal_movespeed() const;
  void _internal_set_movespeed(uint32_t value);
  public:

  // optional uint32 damage = 23;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // optional uint32 hero_damage = 24;
  bool has_hero_damage() const;
  private:
  bool _internal_has_hero_damage() const;
  public:
  void clear_hero_damage();
  uint32_t hero_damage() const;
  void set_hero_damage(uint32_t value);
  private:
  uint32_t _internal_hero_damage() const;
  void _internal_set_hero_damage(uint32_t value);
  public:

  // optional uint32 tower_damage = 25;
  bool has_tower_damage() const;
  private:
  bool _internal_has_tower_damage() const;
  public:
  void clear_tower_damage();
  uint32_t tower_damage() const;
  void set_tower_damage(uint32_t value);
  private:
  uint32_t _internal_tower_damage() const;
  void _internal_set_tower_damage(uint32_t value);
  public:

  // optional uint32 level = 27;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 kill_count = 28;
  bool has_kill_count() const;
  private:
  bool _internal_has_kill_count() const;
  public:
  void clear_kill_count();
  uint32_t kill_count() const;
  void set_kill_count(uint32_t value);
  private:
  uint32_t _internal_kill_count() const;
  void _internal_set_kill_count(uint32_t value);
  public:

  // optional uint32 death_count = 29;
  bool has_death_count() const;
  private:
  bool _internal_has_death_count() const;
  public:
  void clear_death_count();
  uint32_t death_count() const;
  void set_death_count(uint32_t value);
  private:
  uint32_t _internal_death_count() const;
  void _internal_set_death_count(uint32_t value);
  public:

  // optional uint32 assists_count = 30;
  bool has_assists_count() const;
  private:
  bool _internal_has_assists_count() const;
  public:
  void clear_assists_count();
  uint32_t assists_count() const;
  void set_assists_count(uint32_t value);
  private:
  uint32_t _internal_assists_count() const;
  void _internal_set_assists_count(uint32_t value);
  public:

  // optional uint32 denies_count = 31;
  bool has_denies_count() const;
  private:
  bool _internal_has_denies_count() const;
  public:
  void clear_denies_count();
  uint32_t denies_count() const;
  void set_denies_count(uint32_t value);
  private:
  uint32_t _internal_denies_count() const;
  void _internal_set_denies_count(uint32_t value);
  public:

  // optional uint32 lh_count = 32;
  bool has_lh_count() const;
  private:
  bool _internal_has_lh_count() const;
  public:
  void clear_lh_count();
  uint32_t lh_count() const;
  void set_lh_count(uint32_t value);
  private:
  uint32_t _internal_lh_count() const;
  void _internal_set_lh_count(uint32_t value);
  public:

  // optional uint32 hero_healing = 33;
  bool has_hero_healing() const;
  private:
  bool _internal_has_hero_healing() const;
  public:
  void clear_hero_healing();
  uint32_t hero_healing() const;
  void set_hero_healing(uint32_t value);
  private:
  uint32_t _internal_hero_healing() const;
  void _internal_set_hero_healing(uint32_t value);
  public:

  // optional uint32 gold_per_min = 34;
  bool has_gold_per_min() const;
  private:
  bool _internal_has_gold_per_min() const;
  public:
  void clear_gold_per_min();
  uint32_t gold_per_min() const;
  void set_gold_per_min(uint32_t value);
  private:
  uint32_t _internal_gold_per_min() const;
  void _internal_set_gold_per_min(uint32_t value);
  public:

  // optional uint32 xp_per_min = 35;
  bool has_xp_per_min() const;
  private:
  bool _internal_has_xp_per_min() const;
  public:
  void clear_xp_per_min();
  uint32_t xp_per_min() const;
  void set_xp_per_min(uint32_t value);
  private:
  uint32_t _internal_xp_per_min() const;
  void _internal_set_xp_per_min(uint32_t value);
  public:

  // optional uint32 net_gold = 36;
  bool has_net_gold() const;
  private:
  bool _internal_has_net_gold() const;
  public:
  void clear_net_gold();
  uint32_t net_gold() const;
  void set_net_gold(uint32_t value);
  private:
  uint32_t _internal_net_gold() const;
  void _internal_set_net_gold(uint32_t value);
  public:

  // optional uint32 gold = 37;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional float x = 38;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 39;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional int32 respawn_time = 40;
  bool has_respawn_time() const;
  private:
  bool _internal_has_respawn_time() const;
  public:
  void clear_respawn_time();
  int32_t respawn_time() const;
  void set_respawn_time(int32_t value);
  private:
  int32_t _internal_respawn_time() const;
  void _internal_set_respawn_time(int32_t value);
  public:

  // optional uint32 ultimate_cooldown = 41;
  bool has_ultimate_cooldown() const;
  private:
  bool _internal_has_ultimate_cooldown() const;
  public:
  void clear_ultimate_cooldown();
  uint32_t ultimate_cooldown() const;
  void set_ultimate_cooldown(uint32_t value);
  private:
  uint32_t _internal_ultimate_cooldown() const;
  void _internal_set_ultimate_cooldown(uint32_t value);
  public:

  // optional bool has_buyback = 42;
  bool has_has_buyback() const;
  private:
  bool _internal_has_has_buyback() const;
  public:
  void clear_has_buyback();
  bool has_buyback() const;
  void set_has_buyback(bool value);
  private:
  bool _internal_has_buyback() const;
  void _internal_set_has_buyback(bool value);
  public:

  // optional bool has_ultimate = 48;
  bool has_has_ultimate() const;
  private:
  bool _internal_has_has_ultimate() const;
  public:
  void clear_has_ultimate();
  bool has_ultimate() const;
  void set_has_ultimate(bool value);
  private:
  bool _internal_has_ultimate() const;
  void _internal_set_has_ultimate(bool value);
  public:

  // optional bool has_ultimate_mana = 49;
  bool has_has_ultimate_mana() const;
  private:
  bool _internal_has_has_ultimate_mana() const;
  public:
  void clear_has_ultimate_mana();
  bool has_ultimate_mana() const;
  void set_has_ultimate_mana(bool value);
  private:
  bool _internal_has_ultimate_mana() const;
  void _internal_set_has_ultimate_mana(bool value);
  public:

  // optional int32 playerid = 2 [default = -1];
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.PlayerDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails > abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > stashitems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails > itemshoppinglist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList > levelpoints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats > hero_to_hero_stats_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t accountid_;
    uint32_t team_;
    uint32_t heroid_;
    uint32_t healthpoints_;
    uint32_t maxhealthpoints_;
    float healthregenrate_;
    uint32_t manapoints_;
    uint32_t maxmanapoints_;
    float manaregenrate_;
    uint32_t base_strength_;
    uint32_t base_agility_;
    uint32_t base_intelligence_;
    int32_t base_armor_;
    uint32_t base_movespeed_;
    uint32_t base_damage_;
    uint32_t strength_;
    uint32_t agility_;
    uint32_t intelligence_;
    int32_t armor_;
    uint32_t movespeed_;
    uint32_t damage_;
    uint32_t hero_damage_;
    uint32_t tower_damage_;
    uint32_t level_;
    uint32_t kill_count_;
    uint32_t death_count_;
    uint32_t assists_count_;
    uint32_t denies_count_;
    uint32_t lh_count_;
    uint32_t hero_healing_;
    uint32_t gold_per_min_;
    uint32_t xp_per_min_;
    uint32_t net_gold_;
    uint32_t gold_;
    float x_;
    float y_;
    int32_t respawn_time_;
    uint32_t ultimate_cooldown_;
    bool has_buyback_;
    bool has_ultimate_;
    bool has_ultimate_mana_;
    int32_t playerid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BuildingDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.BuildingDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_BuildingDetails() : CMsgDOTARealtimeGameStats_BuildingDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_BuildingDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_BuildingDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  CMsgDOTARealtimeGameStats_BuildingDetails(CMsgDOTARealtimeGameStats_BuildingDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_BuildingDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_BuildingDetails& operator=(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_BuildingDetails& operator=(CMsgDOTARealtimeGameStats_BuildingDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_BuildingDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_BuildingDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_BuildingDetails*>(
               &_CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgDOTARealtimeGameStats_BuildingDetails& a, CMsgDOTARealtimeGameStats_BuildingDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_BuildingDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_BuildingDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
    CMsgDOTARealtimeGameStats_BuildingDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_BuildingDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.BuildingDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_BuildingDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kLaneFieldNumber = 4,
    kTierFieldNumber = 5,
    kTypeFieldNumber = 6,
    kXFieldNumber = 7,
    kYFieldNumber = 8,
    kDestroyedFieldNumber = 9,
  };
  // optional uint32 team = 2;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional float heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // optional uint32 lane = 4;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional uint32 tier = 5;
  bool has_tier() const;
  private:
  bool _internal_has_tier() const;
  public:
  void clear_tier();
  uint32_t tier() const;
  void set_tier(uint32_t value);
  private:
  uint32_t _internal_tier() const;
  void _internal_set_tier(uint32_t value);
  public:

  // optional uint32 type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional float x = 7;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 8;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional bool destroyed = 9;
  bool has_destroyed() const;
  private:
  bool _internal_has_destroyed() const;
  public:
  void clear_destroyed();
  bool destroyed() const;
  void set_destroyed(bool value);
  private:
  bool _internal_destroyed() const;
  void _internal_set_destroyed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.BuildingDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t team_;
    float heading_;
    uint32_t lane_;
    uint32_t tier_;
    uint32_t type_;
    float x_;
    float y_;
    bool destroyed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_KillDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.KillDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_KillDetails() : CMsgDOTARealtimeGameStats_KillDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_KillDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_KillDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from);
  CMsgDOTARealtimeGameStats_KillDetails(CMsgDOTARealtimeGameStats_KillDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_KillDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_KillDetails& operator=(const CMsgDOTARealtimeGameStats_KillDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_KillDetails& operator=(CMsgDOTARealtimeGameStats_KillDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_KillDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_KillDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_KillDetails*>(
               &_CMsgDOTARealtimeGameStats_KillDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgDOTARealtimeGameStats_KillDetails& a, CMsgDOTARealtimeGameStats_KillDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_KillDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_KillDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_KillDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_KillDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_KillDetails& from) {
    CMsgDOTARealtimeGameStats_KillDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_KillDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.KillDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_KillDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeathTimeFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kKillerPlayerIdFieldNumber = 3,
  };
  // optional int32 death_time = 2;
  bool has_death_time() const;
  private:
  bool _internal_has_death_time() const;
  public:
  void clear_death_time();
  int32_t death_time() const;
  void set_death_time(int32_t value);
  private:
  int32_t _internal_death_time() const;
  void _internal_set_death_time(int32_t value);
  public:

  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional int32 killer_player_id = 3 [default = -1];
  bool has_killer_player_id() const;
  private:
  bool _internal_has_killer_player_id() const;
  public:
  void clear_killer_player_id();
  int32_t killer_player_id() const;
  void set_killer_player_id(int32_t value);
  private:
  int32_t _internal_killer_player_id() const;
  void _internal_set_killer_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.KillDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t death_time_;
    int32_t player_id_;
    int32_t killer_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_BroadcasterDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.BroadcasterDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_BroadcasterDetails() : CMsgDOTARealtimeGameStats_BroadcasterDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_BroadcasterDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_BroadcasterDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  CMsgDOTARealtimeGameStats_BroadcasterDetails(CMsgDOTARealtimeGameStats_BroadcasterDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_BroadcasterDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_BroadcasterDetails& operator=(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_BroadcasterDetails& operator=(CMsgDOTARealtimeGameStats_BroadcasterDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_BroadcasterDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_BroadcasterDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_BroadcasterDetails*>(
               &_CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgDOTARealtimeGameStats_BroadcasterDetails& a, CMsgDOTARealtimeGameStats_BroadcasterDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_BroadcasterDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_BroadcasterDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
    CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.BroadcasterDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_BroadcasterDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.BroadcasterDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_PickBanDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.PickBanDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_PickBanDetails() : CMsgDOTARealtimeGameStats_PickBanDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_PickBanDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_PickBanDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  CMsgDOTARealtimeGameStats_PickBanDetails(CMsgDOTARealtimeGameStats_PickBanDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_PickBanDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_PickBanDetails& operator=(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_PickBanDetails& operator=(CMsgDOTARealtimeGameStats_PickBanDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_PickBanDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_PickBanDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_PickBanDetails*>(
               &_CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgDOTARealtimeGameStats_PickBanDetails& a, CMsgDOTARealtimeGameStats_PickBanDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_PickBanDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_PickBanDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
    CMsgDOTARealtimeGameStats_PickBanDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_PickBanDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.PickBanDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_PickBanDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // optional uint32 hero = 1;
  bool has_hero() const;
  private:
  bool _internal_has_hero() const;
  public:
  void clear_hero();
  uint32_t hero() const;
  void set_hero(uint32_t value);
  private:
  uint32_t _internal_hero() const;
  void _internal_set_hero(uint32_t value);
  public:

  // optional uint32 team = 2;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.PickBanDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_;
    uint32_t team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_MatchDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.MatchDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStats_MatchDetails() : CMsgDOTARealtimeGameStats_MatchDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStats_MatchDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_MatchDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  CMsgDOTARealtimeGameStats_MatchDetails(CMsgDOTARealtimeGameStats_MatchDetails&& from) noexcept
    : CMsgDOTARealtimeGameStats_MatchDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_MatchDetails& operator=(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_MatchDetails& operator=(CMsgDOTARealtimeGameStats_MatchDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_MatchDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_MatchDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_MatchDetails*>(
               &_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgDOTARealtimeGameStats_MatchDetails& a, CMsgDOTARealtimeGameStats_MatchDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_MatchDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_MatchDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_MatchDetails& from) {
    CMsgDOTARealtimeGameStats_MatchDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_MatchDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.MatchDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_MatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicksFieldNumber = 10,
    kBansFieldNumber = 11,
    kKillsFieldNumber = 12,
    kBroadcastersFieldNumber = 13,
    kServerSteamIdFieldNumber = 1,
    kMatchIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTimeOfDayFieldNumber = 4,
    kGameTimeFieldNumber = 6,
    kTeamidRadiantFieldNumber = 8,
    kTeamidDireFieldNumber = 9,
    kIsNightstalkerNightFieldNumber = 5,
    kSingleTeamFieldNumber = 16,
    kGameModeFieldNumber = 14,
    kLeagueIdFieldNumber = 15,
    kCheersPeakFieldNumber = 17,
    kLeagueNodeIdFieldNumber = 18,
    kGameStateFieldNumber = 19,
    kLobbyTypeFieldNumber = 20,
    kStartTimestampFieldNumber = 21,
  };
  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  int picks_size() const;
  private:
  int _internal_picks_size() const;
  public:
  void clear_picks();
  ::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_picks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_picks();
  private:
  const ::CMsgDOTARealtimeGameStats_PickBanDetails& _internal_picks(int index) const;
  ::CMsgDOTARealtimeGameStats_PickBanDetails* _internal_add_picks();
  public:
  const ::CMsgDOTARealtimeGameStats_PickBanDetails& picks(int index) const;
  ::CMsgDOTARealtimeGameStats_PickBanDetails* add_picks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
      picks() const;

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  int bans_size() const;
  private:
  int _internal_bans_size() const;
  public:
  void clear_bans();
  ::CMsgDOTARealtimeGameStats_PickBanDetails* mutable_bans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
      mutable_bans();
  private:
  const ::CMsgDOTARealtimeGameStats_PickBanDetails& _internal_bans(int index) const;
  ::CMsgDOTARealtimeGameStats_PickBanDetails* _internal_add_bans();
  public:
  const ::CMsgDOTARealtimeGameStats_PickBanDetails& bans(int index) const;
  ::CMsgDOTARealtimeGameStats_PickBanDetails* add_bans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
      bans() const;

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  int kills_size() const;
  private:
  int _internal_kills_size() const;
  public:
  void clear_kills();
  ::CMsgDOTARealtimeGameStats_KillDetails* mutable_kills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >*
      mutable_kills();
  private:
  const ::CMsgDOTARealtimeGameStats_KillDetails& _internal_kills(int index) const;
  ::CMsgDOTARealtimeGameStats_KillDetails* _internal_add_kills();
  public:
  const ::CMsgDOTARealtimeGameStats_KillDetails& kills(int index) const;
  ::CMsgDOTARealtimeGameStats_KillDetails* add_kills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >&
      kills() const;

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  int broadcasters_size() const;
  private:
  int _internal_broadcasters_size() const;
  public:
  void clear_broadcasters();
  ::CMsgDOTARealtimeGameStats_BroadcasterDetails* mutable_broadcasters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
      mutable_broadcasters();
  private:
  const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& _internal_broadcasters(int index) const;
  ::CMsgDOTARealtimeGameStats_BroadcasterDetails* _internal_add_broadcasters();
  public:
  const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& broadcasters(int index) const;
  ::CMsgDOTARealtimeGameStats_BroadcasterDetails* add_broadcasters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
      broadcasters() const;

  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional float time_of_day = 4;
  bool has_time_of_day() const;
  private:
  bool _internal_has_time_of_day() const;
  public:
  void clear_time_of_day();
  float time_of_day() const;
  void set_time_of_day(float value);
  private:
  float _internal_time_of_day() const;
  void _internal_set_time_of_day(float value);
  public:

  // optional int32 game_time = 6;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  int32_t game_time() const;
  void set_game_time(int32_t value);
  private:
  int32_t _internal_game_time() const;
  void _internal_set_game_time(int32_t value);
  public:

  // optional uint32 teamid_radiant = 8;
  bool has_teamid_radiant() const;
  private:
  bool _internal_has_teamid_radiant() const;
  public:
  void clear_teamid_radiant();
  uint32_t teamid_radiant() const;
  void set_teamid_radiant(uint32_t value);
  private:
  uint32_t _internal_teamid_radiant() const;
  void _internal_set_teamid_radiant(uint32_t value);
  public:

  // optional uint32 teamid_dire = 9;
  bool has_teamid_dire() const;
  private:
  bool _internal_has_teamid_dire() const;
  public:
  void clear_teamid_dire();
  uint32_t teamid_dire() const;
  void set_teamid_dire(uint32_t value);
  private:
  uint32_t _internal_teamid_dire() const;
  void _internal_set_teamid_dire(uint32_t value);
  public:

  // optional bool is_nightstalker_night = 5;
  bool has_is_nightstalker_night() const;
  private:
  bool _internal_has_is_nightstalker_night() const;
  public:
  void clear_is_nightstalker_night();
  bool is_nightstalker_night() const;
  void set_is_nightstalker_night(bool value);
  private:
  bool _internal_is_nightstalker_night() const;
  void _internal_set_is_nightstalker_night(bool value);
  public:

  // optional bool single_team = 16;
  bool has_single_team() const;
  private:
  bool _internal_has_single_team() const;
  public:
  void clear_single_team();
  bool single_team() const;
  void set_single_team(bool value);
  private:
  bool _internal_single_team() const;
  void _internal_set_single_team(bool value);
  public:

  // optional uint32 game_mode = 14;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional uint32 league_id = 15;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 cheers_peak = 17;
  bool has_cheers_peak() const;
  private:
  bool _internal_has_cheers_peak() const;
  public:
  void clear_cheers_peak();
  uint32_t cheers_peak() const;
  void set_cheers_peak(uint32_t value);
  private:
  uint32_t _internal_cheers_peak() const;
  void _internal_set_cheers_peak(uint32_t value);
  public:

  // optional uint32 league_node_id = 18;
  bool has_league_node_id() const;
  private:
  bool _internal_has_league_node_id() const;
  public:
  void clear_league_node_id();
  uint32_t league_node_id() const;
  void set_league_node_id(uint32_t value);
  private:
  uint32_t _internal_league_node_id() const;
  void _internal_set_league_node_id(uint32_t value);
  public:

  // optional uint32 game_state = 19;
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  uint32_t game_state() const;
  void set_game_state(uint32_t value);
  private:
  uint32_t _internal_game_state() const;
  void _internal_set_game_state(uint32_t value);
  public:

  // optional uint32 lobby_type = 20;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // optional uint32 start_timestamp = 21;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.MatchDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails > picks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails > bans_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails > kills_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails > broadcasters_;
    uint64_t server_steam_id_;
    uint64_t match_id_;
    uint32_t timestamp_;
    float time_of_day_;
    int32_t game_time_;
    uint32_t teamid_radiant_;
    uint32_t teamid_dire_;
    bool is_nightstalker_night_;
    bool single_team_;
    uint32_t game_mode_;
    uint32_t league_id_;
    uint32_t cheers_peak_;
    uint32_t league_node_id_;
    uint32_t game_state_;
    uint32_t lobby_type_;
    uint32_t start_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_LocationStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.GraphData.LocationStats) */ {
 public:
  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats() : CMsgDOTARealtimeGameStats_GraphData_LocationStats(nullptr) {}
  ~CMsgDOTARealtimeGameStats_GraphData_LocationStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_GraphData_LocationStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  CMsgDOTARealtimeGameStats_GraphData_LocationStats(CMsgDOTARealtimeGameStats_GraphData_LocationStats&& from) noexcept
    : CMsgDOTARealtimeGameStats_GraphData_LocationStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_GraphData_LocationStats& operator=(CMsgDOTARealtimeGameStats_GraphData_LocationStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_GraphData_LocationStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_GraphData_LocationStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_GraphData_LocationStats*>(
               &_CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats& a, CMsgDOTARealtimeGameStats_GraphData_LocationStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData_LocationStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData_LocationStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
    CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.GraphData.LocationStats";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_GraphData_LocationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated int32 stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  private:
  int32_t _internal_stats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_stats() const;
  void _internal_add_stats(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_stats();
  public:
  int32_t stats(int index) const;
  void set_stats(int index, int32_t value);
  void add_stats(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_stats();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats) */ {
 public:
  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() : CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(nullptr) {}
  ~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats&& from) noexcept
    : CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& operator=(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& operator=(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats*>(
               &_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& a, CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
    CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocStatsFieldNumber = 1,
  };
  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  int loc_stats_size() const;
  private:
  int _internal_loc_stats_size() const;
  public:
  void clear_loc_stats();
  ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* mutable_loc_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
      mutable_loc_stats();
  private:
  const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& _internal_loc_stats(int index) const;
  ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* _internal_add_loc_stats();
  public:
  const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& loc_stats(int index) const;
  ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* add_loc_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
      loc_stats() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats > loc_stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats_GraphData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats.GraphData) */ {
 public:
  inline CMsgDOTARealtimeGameStats_GraphData() : CMsgDOTARealtimeGameStats_GraphData(nullptr) {}
  ~CMsgDOTARealtimeGameStats_GraphData() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats_GraphData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from);
  CMsgDOTARealtimeGameStats_GraphData(CMsgDOTARealtimeGameStats_GraphData&& from) noexcept
    : CMsgDOTARealtimeGameStats_GraphData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats_GraphData& operator=(const CMsgDOTARealtimeGameStats_GraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats_GraphData& operator=(CMsgDOTARealtimeGameStats_GraphData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats_GraphData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats_GraphData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats_GraphData*>(
               &_CMsgDOTARealtimeGameStats_GraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgDOTARealtimeGameStats_GraphData& a, CMsgDOTARealtimeGameStats_GraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats_GraphData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats_GraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats_GraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats_GraphData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats_GraphData& from) {
    CMsgDOTARealtimeGameStats_GraphData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats_GraphData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats.GraphData";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats_GraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_GraphData_LocationStats LocationStats;
  typedef CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats TeamLocationStats;

  typedef CMsgDOTARealtimeGameStats_GraphData_eStat eStat;
  static constexpr eStat CreepGoldEarned =
    CMsgDOTARealtimeGameStats_GraphData_eStat_CreepGoldEarned;
  static constexpr eStat KillGoldEarned =
    CMsgDOTARealtimeGameStats_GraphData_eStat_KillGoldEarned;
  static constexpr eStat DeathAndBuybackGoldLost =
    CMsgDOTARealtimeGameStats_GraphData_eStat_DeathAndBuybackGoldLost;
  static constexpr eStat XPEarned =
    CMsgDOTARealtimeGameStats_GraphData_eStat_XPEarned;
  static inline bool eStat_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(value);
  }
  static constexpr eStat eStat_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MIN;
  static constexpr eStat eStat_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_MAX;
  static constexpr int eStat_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eStat_eStat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eStat_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
  }
  template<typename T>
  static inline const std::string& eStat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eStat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eStat_Name.");
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Name(enum_t_value);
  }
  static inline bool eStat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eStat* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eStat_Parse(name, value);
  }

  typedef CMsgDOTARealtimeGameStats_GraphData_eLocation eLocation;
  static constexpr eLocation BotLane =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_BotLane;
  static constexpr eLocation MidLane =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_MidLane;
  static constexpr eLocation TopLane =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_TopLane;
  static constexpr eLocation Jungle =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_Jungle;
  static constexpr eLocation Ancients =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_Ancients;
  static constexpr eLocation Other =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_Other;
  static inline bool eLocation_IsValid(int value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(value);
  }
  static constexpr eLocation eLocation_MIN =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MIN;
  static constexpr eLocation eLocation_MAX =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_MAX;
  static constexpr int eLocation_ARRAYSIZE =
    CMsgDOTARealtimeGameStats_GraphData_eLocation_eLocation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eLocation_descriptor() {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
  }
  template<typename T>
  static inline const std::string& eLocation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eLocation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eLocation_Name.");
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Name(enum_t_value);
  }
  static inline bool eLocation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eLocation* value) {
    return CMsgDOTARealtimeGameStats_GraphData_eLocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGraphGoldFieldNumber = 1,
    kGraphXpFieldNumber = 2,
    kGraphKillFieldNumber = 3,
    kGraphTowerFieldNumber = 4,
    kGraphRaxFieldNumber = 5,
    kTeamLocStatsFieldNumber = 6,
  };
  // repeated int32 graph_gold = 1;
  int graph_gold_size() const;
  private:
  int _internal_graph_gold_size() const;
  public:
  void clear_graph_gold();
  private:
  int32_t _internal_graph_gold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_graph_gold() const;
  void _internal_add_graph_gold(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_graph_gold();
  public:
  int32_t graph_gold(int index) const;
  void set_graph_gold(int index, int32_t value);
  void add_graph_gold(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      graph_gold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_graph_gold();

  // repeated int32 graph_xp = 2;
  int graph_xp_size() const;
  private:
  int _internal_graph_xp_size() const;
  public:
  void clear_graph_xp();
  private:
  int32_t _internal_graph_xp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_graph_xp() const;
  void _internal_add_graph_xp(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_graph_xp();
  public:
  int32_t graph_xp(int index) const;
  void set_graph_xp(int index, int32_t value);
  void add_graph_xp(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      graph_xp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_graph_xp();

  // repeated int32 graph_kill = 3;
  int graph_kill_size() const;
  private:
  int _internal_graph_kill_size() const;
  public:
  void clear_graph_kill();
  private:
  int32_t _internal_graph_kill(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_graph_kill() const;
  void _internal_add_graph_kill(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_graph_kill();
  public:
  int32_t graph_kill(int index) const;
  void set_graph_kill(int index, int32_t value);
  void add_graph_kill(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      graph_kill() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_graph_kill();

  // repeated int32 graph_tower = 4;
  int graph_tower_size() const;
  private:
  int _internal_graph_tower_size() const;
  public:
  void clear_graph_tower();
  private:
  int32_t _internal_graph_tower(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_graph_tower() const;
  void _internal_add_graph_tower(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_graph_tower();
  public:
  int32_t graph_tower(int index) const;
  void set_graph_tower(int index, int32_t value);
  void add_graph_tower(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      graph_tower() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_graph_tower();

  // repeated int32 graph_rax = 5;
  int graph_rax_size() const;
  private:
  int _internal_graph_rax_size() const;
  public:
  void clear_graph_rax();
  private:
  int32_t _internal_graph_rax(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_graph_rax() const;
  void _internal_add_graph_rax(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_graph_rax();
  public:
  int32_t graph_rax(int index) const;
  void set_graph_rax(int index, int32_t value);
  void add_graph_rax(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      graph_rax() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_graph_rax();

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  int team_loc_stats_size() const;
  private:
  int _internal_team_loc_stats_size() const;
  public:
  void clear_team_loc_stats();
  ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* mutable_team_loc_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
      mutable_team_loc_stats();
  private:
  const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& _internal_team_loc_stats(int index) const;
  ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* _internal_add_team_loc_stats();
  public:
  const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& team_loc_stats(int index) const;
  ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* add_team_loc_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
      team_loc_stats() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats.GraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > graph_gold_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > graph_xp_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > graph_kill_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > graph_tower_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > graph_rax_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats > team_loc_stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStats) */ {
 public:
  inline CMsgDOTARealtimeGameStats() : CMsgDOTARealtimeGameStats(nullptr) {}
  ~CMsgDOTARealtimeGameStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from);
  CMsgDOTARealtimeGameStats(CMsgDOTARealtimeGameStats&& from) noexcept
    : CMsgDOTARealtimeGameStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStats& operator=(const CMsgDOTARealtimeGameStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStats& operator=(CMsgDOTARealtimeGameStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStats*>(
               &_CMsgDOTARealtimeGameStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgDOTARealtimeGameStats& a, CMsgDOTARealtimeGameStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStats& from) {
    CMsgDOTARealtimeGameStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStats";
  }
  protected:
  explicit CMsgDOTARealtimeGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStats_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStats_ItemDetails ItemDetails;
  typedef CMsgDOTARealtimeGameStats_AbilityDetails AbilityDetails;
  typedef CMsgDOTARealtimeGameStats_HeroToHeroStats HeroToHeroStats;
  typedef CMsgDOTARealtimeGameStats_AbilityList AbilityList;
  typedef CMsgDOTARealtimeGameStats_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStats_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStats_KillDetails KillDetails;
  typedef CMsgDOTARealtimeGameStats_BroadcasterDetails BroadcasterDetails;
  typedef CMsgDOTARealtimeGameStats_PickBanDetails PickBanDetails;
  typedef CMsgDOTARealtimeGameStats_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStats_GraphData GraphData;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 2,
    kBuildingsFieldNumber = 3,
    kMatchFieldNumber = 1,
    kGraphDataFieldNumber = 4,
    kDeltaFrameFieldNumber = 5,
  };
  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgDOTARealtimeGameStats_TeamDetails* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >*
      mutable_teams();
  private:
  const ::CMsgDOTARealtimeGameStats_TeamDetails& _internal_teams(int index) const;
  ::CMsgDOTARealtimeGameStats_TeamDetails* _internal_add_teams();
  public:
  const ::CMsgDOTARealtimeGameStats_TeamDetails& teams(int index) const;
  ::CMsgDOTARealtimeGameStats_TeamDetails* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >&
      teams() const;

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  int buildings_size() const;
  private:
  int _internal_buildings_size() const;
  public:
  void clear_buildings();
  ::CMsgDOTARealtimeGameStats_BuildingDetails* mutable_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >*
      mutable_buildings();
  private:
  const ::CMsgDOTARealtimeGameStats_BuildingDetails& _internal_buildings(int index) const;
  ::CMsgDOTARealtimeGameStats_BuildingDetails* _internal_add_buildings();
  public:
  const ::CMsgDOTARealtimeGameStats_BuildingDetails& buildings(int index) const;
  ::CMsgDOTARealtimeGameStats_BuildingDetails* add_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >&
      buildings() const;

  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::CMsgDOTARealtimeGameStats_MatchDetails& match() const;
  PROTOBUF_NODISCARD ::CMsgDOTARealtimeGameStats_MatchDetails* release_match();
  ::CMsgDOTARealtimeGameStats_MatchDetails* mutable_match();
  void set_allocated_match(::CMsgDOTARealtimeGameStats_MatchDetails* match);
  private:
  const ::CMsgDOTARealtimeGameStats_MatchDetails& _internal_match() const;
  ::CMsgDOTARealtimeGameStats_MatchDetails* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::CMsgDOTARealtimeGameStats_MatchDetails* match);
  ::CMsgDOTARealtimeGameStats_MatchDetails* unsafe_arena_release_match();

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  bool has_graph_data() const;
  private:
  bool _internal_has_graph_data() const;
  public:
  void clear_graph_data();
  const ::CMsgDOTARealtimeGameStats_GraphData& graph_data() const;
  PROTOBUF_NODISCARD ::CMsgDOTARealtimeGameStats_GraphData* release_graph_data();
  ::CMsgDOTARealtimeGameStats_GraphData* mutable_graph_data();
  void set_allocated_graph_data(::CMsgDOTARealtimeGameStats_GraphData* graph_data);
  private:
  const ::CMsgDOTARealtimeGameStats_GraphData& _internal_graph_data() const;
  ::CMsgDOTARealtimeGameStats_GraphData* _internal_mutable_graph_data();
  public:
  void unsafe_arena_set_allocated_graph_data(
      ::CMsgDOTARealtimeGameStats_GraphData* graph_data);
  ::CMsgDOTARealtimeGameStats_GraphData* unsafe_arena_release_graph_data();

  // optional bool delta_frame = 5;
  bool has_delta_frame() const;
  private:
  bool _internal_has_delta_frame() const;
  public:
  void clear_delta_frame();
  bool delta_frame() const;
  void set_delta_frame(bool value);
  private:
  bool _internal_delta_frame() const;
  void _internal_set_delta_frame(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails > teams_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails > buildings_;
    ::CMsgDOTARealtimeGameStats_MatchDetails* match_;
    ::CMsgDOTARealtimeGameStats_GraphData* graph_data_;
    bool delta_frame_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_TeamDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStatsTerse.TeamDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails() : CMsgDOTARealtimeGameStatsTerse_TeamDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStatsTerse_TeamDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStatsTerse_TeamDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  CMsgDOTARealtimeGameStatsTerse_TeamDetails(CMsgDOTARealtimeGameStatsTerse_TeamDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_TeamDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStatsTerse_TeamDetails& operator=(CMsgDOTARealtimeGameStatsTerse_TeamDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStatsTerse_TeamDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStatsTerse_TeamDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_TeamDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails& a, CMsgDOTARealtimeGameStatsTerse_TeamDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_TeamDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_TeamDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
    CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStatsTerse.TeamDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStatsTerse_TeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 6,
    kTeamNameFieldNumber = 3,
    kTeamTagFieldNumber = 8,
    kTeamLogoUrlFieldNumber = 9,
    kTeamNumberFieldNumber = 1,
    kTeamIdFieldNumber = 2,
    kTeamLogoFieldNumber = 4,
    kScoreFieldNumber = 5,
    kNetWorthFieldNumber = 7,
  };
  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
      mutable_players();
  private:
  const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& _internal_players(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* _internal_add_players();
  public:
  const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& players(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
      players() const;

  // optional string team_name = 3;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 8;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_tag();
  PROTOBUF_NODISCARD std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string team_logo_url = 9;
  bool has_team_logo_url() const;
  private:
  bool _internal_has_team_logo_url() const;
  public:
  void clear_team_logo_url();
  const std::string& team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_team_logo_url();
  void set_allocated_team_logo_url(std::string* team_logo_url);
  private:
  const std::string& _internal_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_logo_url(const std::string& value);
  std::string* _internal_mutable_team_logo_url();
  public:

  // optional uint32 team_number = 1;
  bool has_team_number() const;
  private:
  bool _internal_has_team_number() const;
  public:
  void clear_team_number();
  uint32_t team_number() const;
  void set_team_number(uint32_t value);
  private:
  uint32_t _internal_team_number() const;
  void _internal_set_team_number(uint32_t value);
  public:

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional fixed64 team_logo = 4;
  bool has_team_logo() const;
  private:
  bool _internal_has_team_logo() const;
  public:
  void clear_team_logo();
  uint64_t team_logo() const;
  void set_team_logo(uint64_t value);
  private:
  uint64_t _internal_team_logo() const;
  void _internal_set_team_logo(uint64_t value);
  public:

  // optional uint32 score = 5;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // optional uint32 net_worth = 7;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_logo_url_;
    uint32_t team_number_;
    uint32_t team_id_;
    uint64_t team_logo_;
    uint32_t score_;
    uint32_t net_worth_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_PlayerDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStatsTerse.PlayerDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails() : CMsgDOTARealtimeGameStatsTerse_PlayerDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStatsTerse_PlayerDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStatsTerse_PlayerDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails(CMsgDOTARealtimeGameStatsTerse_PlayerDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_PlayerDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStatsTerse_PlayerDetails& operator=(CMsgDOTARealtimeGameStatsTerse_PlayerDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStatsTerse_PlayerDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_PlayerDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails& a, CMsgDOTARealtimeGameStatsTerse_PlayerDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_PlayerDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
    CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStatsTerse.PlayerDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStatsTerse_PlayerDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilitiesFieldNumber = 16,
    kItemsFieldNumber = 17,
    kNameFieldNumber = 3,
    kAccountidFieldNumber = 1,
    kTeamFieldNumber = 4,
    kHeroidFieldNumber = 5,
    kLevelFieldNumber = 6,
    kKillCountFieldNumber = 7,
    kDeathCountFieldNumber = 8,
    kAssistsCountFieldNumber = 9,
    kDeniesCountFieldNumber = 10,
    kLhCountFieldNumber = 11,
    kGoldFieldNumber = 12,
    kXFieldNumber = 13,
    kYFieldNumber = 14,
    kNetWorthFieldNumber = 15,
    kPlayeridFieldNumber = 2,
  };
  // repeated int32 abilities = 16;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  private:
  int32_t _internal_abilities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_abilities() const;
  void _internal_add_abilities(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_abilities();
  public:
  int32_t abilities(int index) const;
  void set_abilities(int index, int32_t value);
  void add_abilities(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      abilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_abilities();

  // repeated int32 items = 17;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  int32_t _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items() const;
  void _internal_add_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items();
  public:
  int32_t items(int index) const;
  void set_items(int index, int32_t value);
  void add_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items();

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional uint32 team = 4;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional uint32 heroid = 5;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  uint32_t heroid() const;
  void set_heroid(uint32_t value);
  private:
  uint32_t _internal_heroid() const;
  void _internal_set_heroid(uint32_t value);
  public:

  // optional uint32 level = 6;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 kill_count = 7;
  bool has_kill_count() const;
  private:
  bool _internal_has_kill_count() const;
  public:
  void clear_kill_count();
  uint32_t kill_count() const;
  void set_kill_count(uint32_t value);
  private:
  uint32_t _internal_kill_count() const;
  void _internal_set_kill_count(uint32_t value);
  public:

  // optional uint32 death_count = 8;
  bool has_death_count() const;
  private:
  bool _internal_has_death_count() const;
  public:
  void clear_death_count();
  uint32_t death_count() const;
  void set_death_count(uint32_t value);
  private:
  uint32_t _internal_death_count() const;
  void _internal_set_death_count(uint32_t value);
  public:

  // optional uint32 assists_count = 9;
  bool has_assists_count() const;
  private:
  bool _internal_has_assists_count() const;
  public:
  void clear_assists_count();
  uint32_t assists_count() const;
  void set_assists_count(uint32_t value);
  private:
  uint32_t _internal_assists_count() const;
  void _internal_set_assists_count(uint32_t value);
  public:

  // optional uint32 denies_count = 10;
  bool has_denies_count() const;
  private:
  bool _internal_has_denies_count() const;
  public:
  void clear_denies_count();
  uint32_t denies_count() const;
  void set_denies_count(uint32_t value);
  private:
  uint32_t _internal_denies_count() const;
  void _internal_set_denies_count(uint32_t value);
  public:

  // optional uint32 lh_count = 11;
  bool has_lh_count() const;
  private:
  bool _internal_has_lh_count() const;
  public:
  void clear_lh_count();
  uint32_t lh_count() const;
  void set_lh_count(uint32_t value);
  private:
  uint32_t _internal_lh_count() const;
  void _internal_set_lh_count(uint32_t value);
  public:

  // optional uint32 gold = 12;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional float x = 13;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 14;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional uint32 net_worth = 15;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional int32 playerid = 2 [default = -1];
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t accountid_;
    uint32_t team_;
    uint32_t heroid_;
    uint32_t level_;
    uint32_t kill_count_;
    uint32_t death_count_;
    uint32_t assists_count_;
    uint32_t denies_count_;
    uint32_t lh_count_;
    uint32_t gold_;
    float x_;
    float y_;
    uint32_t net_worth_;
    int32_t playerid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_BuildingDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStatsTerse.BuildingDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails() : CMsgDOTARealtimeGameStatsTerse_BuildingDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStatsTerse_BuildingDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStatsTerse_BuildingDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails(CMsgDOTARealtimeGameStatsTerse_BuildingDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_BuildingDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStatsTerse_BuildingDetails& operator=(CMsgDOTARealtimeGameStatsTerse_BuildingDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStatsTerse_BuildingDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_BuildingDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails& a, CMsgDOTARealtimeGameStatsTerse_BuildingDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_BuildingDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
    CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStatsTerse.BuildingDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStatsTerse_BuildingDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 1,
    kHeadingFieldNumber = 2,
    kTypeFieldNumber = 3,
    kLaneFieldNumber = 4,
    kTierFieldNumber = 5,
    kXFieldNumber = 6,
    kYFieldNumber = 7,
    kDestroyedFieldNumber = 8,
  };
  // optional uint32 team = 1;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional float heading = 2;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // optional uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 lane = 4;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional uint32 tier = 5;
  bool has_tier() const;
  private:
  bool _internal_has_tier() const;
  public:
  void clear_tier();
  uint32_t tier() const;
  void set_tier(uint32_t value);
  private:
  uint32_t _internal_tier() const;
  void _internal_set_tier(uint32_t value);
  public:

  // optional float x = 6;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 7;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional bool destroyed = 8;
  bool has_destroyed() const;
  private:
  bool _internal_has_destroyed() const;
  public:
  void clear_destroyed();
  bool destroyed() const;
  void set_destroyed(bool value);
  private:
  bool _internal_destroyed() const;
  void _internal_set_destroyed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t team_;
    float heading_;
    uint32_t type_;
    uint32_t lane_;
    uint32_t tier_;
    float x_;
    float y_;
    bool destroyed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_PickBanDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStatsTerse.PickBanDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStatsTerse_PickBanDetails() : CMsgDOTARealtimeGameStatsTerse_PickBanDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStatsTerse_PickBanDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStatsTerse_PickBanDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStatsTerse_PickBanDetails(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from);
  CMsgDOTARealtimeGameStatsTerse_PickBanDetails(CMsgDOTARealtimeGameStatsTerse_PickBanDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_PickBanDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_PickBanDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStatsTerse_PickBanDetails& operator=(CMsgDOTARealtimeGameStatsTerse_PickBanDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStatsTerse_PickBanDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_PickBanDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails& a, CMsgDOTARealtimeGameStatsTerse_PickBanDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_PickBanDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_PickBanDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from) {
    CMsgDOTARealtimeGameStatsTerse_PickBanDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStatsTerse.PickBanDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStatsTerse_PickBanDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // optional uint32 hero = 1;
  bool has_hero() const;
  private:
  bool _internal_has_hero() const;
  public:
  void clear_hero();
  uint32_t hero() const;
  void set_hero(uint32_t value);
  private:
  uint32_t _internal_hero() const;
  void _internal_set_hero(uint32_t value);
  public:

  // optional uint32 team = 2;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_;
    uint32_t team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_MatchDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStatsTerse.MatchDetails) */ {
 public:
  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails() : CMsgDOTARealtimeGameStatsTerse_MatchDetails(nullptr) {}
  ~CMsgDOTARealtimeGameStatsTerse_MatchDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStatsTerse_MatchDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  CMsgDOTARealtimeGameStatsTerse_MatchDetails(CMsgDOTARealtimeGameStatsTerse_MatchDetails&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_MatchDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails& operator=(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStatsTerse_MatchDetails& operator=(CMsgDOTARealtimeGameStatsTerse_MatchDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStatsTerse_MatchDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStatsTerse_MatchDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(
               &_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails& a, CMsgDOTARealtimeGameStatsTerse_MatchDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_MatchDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_MatchDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
    CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStatsTerse.MatchDetails";
  }
  protected:
  explicit CMsgDOTARealtimeGameStatsTerse_MatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamBroadcasterAccountIdsFieldNumber = 6,
    kPicksFieldNumber = 11,
    kBansFieldNumber = 12,
    kServerSteamIdFieldNumber = 1,
    kMatchIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kGameTimeFieldNumber = 4,
    kGameModeFieldNumber = 7,
    kLeagueIdFieldNumber = 8,
    kLeagueNodeIdFieldNumber = 9,
    kGameStateFieldNumber = 10,
    kLobbyTypeFieldNumber = 13,
    kStartTimestampFieldNumber = 14,
  };
  // repeated uint32 steam_broadcaster_account_ids = 6;
  int steam_broadcaster_account_ids_size() const;
  private:
  int _internal_steam_broadcaster_account_ids_size() const;
  public:
  void clear_steam_broadcaster_account_ids();
  private:
  uint32_t _internal_steam_broadcaster_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_steam_broadcaster_account_ids() const;
  void _internal_add_steam_broadcaster_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_steam_broadcaster_account_ids();
  public:
  uint32_t steam_broadcaster_account_ids(int index) const;
  void set_steam_broadcaster_account_ids(int index, uint32_t value);
  void add_steam_broadcaster_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      steam_broadcaster_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_steam_broadcaster_account_ids();

  // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
  int picks_size() const;
  private:
  int _internal_picks_size() const;
  public:
  void clear_picks();
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* mutable_picks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
      mutable_picks();
  private:
  const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& _internal_picks(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* _internal_add_picks();
  public:
  const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& picks(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* add_picks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
      picks() const;

  // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
  int bans_size() const;
  private:
  int _internal_bans_size() const;
  public:
  void clear_bans();
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* mutable_bans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
      mutable_bans();
  private:
  const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& _internal_bans(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* _internal_add_bans();
  public:
  const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& bans(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* add_bans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
      bans() const;

  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional int32 game_time = 4;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  int32_t game_time() const;
  void set_game_time(int32_t value);
  private:
  int32_t _internal_game_time() const;
  void _internal_set_game_time(int32_t value);
  public:

  // optional uint32 game_mode = 7;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional uint32 league_id = 8;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 league_node_id = 9;
  bool has_league_node_id() const;
  private:
  bool _internal_has_league_node_id() const;
  public:
  void clear_league_node_id();
  uint32_t league_node_id() const;
  void set_league_node_id(uint32_t value);
  private:
  uint32_t _internal_league_node_id() const;
  void _internal_set_league_node_id(uint32_t value);
  public:

  // optional uint32 game_state = 10;
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  uint32_t game_state() const;
  void set_game_state(uint32_t value);
  private:
  uint32_t _internal_game_state() const;
  void _internal_set_game_state(uint32_t value);
  public:

  // optional uint32 lobby_type = 13;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // optional uint32 start_timestamp = 14;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > steam_broadcaster_account_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails > picks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails > bans_;
    uint64_t server_steam_id_;
    uint64_t match_id_;
    uint32_t timestamp_;
    int32_t game_time_;
    uint32_t game_mode_;
    uint32_t league_id_;
    uint32_t league_node_id_;
    uint32_t game_state_;
    uint32_t lobby_type_;
    uint32_t start_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse_GraphData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStatsTerse.GraphData) */ {
 public:
  inline CMsgDOTARealtimeGameStatsTerse_GraphData() : CMsgDOTARealtimeGameStatsTerse_GraphData(nullptr) {}
  ~CMsgDOTARealtimeGameStatsTerse_GraphData() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStatsTerse_GraphData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  CMsgDOTARealtimeGameStatsTerse_GraphData(CMsgDOTARealtimeGameStatsTerse_GraphData&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse_GraphData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse_GraphData& operator=(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStatsTerse_GraphData& operator=(CMsgDOTARealtimeGameStatsTerse_GraphData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStatsTerse_GraphData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStatsTerse_GraphData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse_GraphData*>(
               &_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgDOTARealtimeGameStatsTerse_GraphData& a, CMsgDOTARealtimeGameStatsTerse_GraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse_GraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse_GraphData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
    CMsgDOTARealtimeGameStatsTerse_GraphData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse_GraphData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStatsTerse.GraphData";
  }
  protected:
  explicit CMsgDOTARealtimeGameStatsTerse_GraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphGoldFieldNumber = 1,
  };
  // repeated int32 graph_gold = 1;
  int graph_gold_size() const;
  private:
  int _internal_graph_gold_size() const;
  public:
  void clear_graph_gold();
  private:
  int32_t _internal_graph_gold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_graph_gold() const;
  void _internal_add_graph_gold(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_graph_gold();
  public:
  int32_t graph_gold(int index) const;
  void set_graph_gold(int index, int32_t value);
  void add_graph_gold(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      graph_gold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_graph_gold();

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse.GraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > graph_gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARealtimeGameStatsTerse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARealtimeGameStatsTerse) */ {
 public:
  inline CMsgDOTARealtimeGameStatsTerse() : CMsgDOTARealtimeGameStatsTerse(nullptr) {}
  ~CMsgDOTARealtimeGameStatsTerse() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARealtimeGameStatsTerse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from);
  CMsgDOTARealtimeGameStatsTerse(CMsgDOTARealtimeGameStatsTerse&& from) noexcept
    : CMsgDOTARealtimeGameStatsTerse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARealtimeGameStatsTerse& operator=(const CMsgDOTARealtimeGameStatsTerse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARealtimeGameStatsTerse& operator=(CMsgDOTARealtimeGameStatsTerse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARealtimeGameStatsTerse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARealtimeGameStatsTerse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARealtimeGameStatsTerse*>(
               &_CMsgDOTARealtimeGameStatsTerse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgDOTARealtimeGameStatsTerse& a, CMsgDOTARealtimeGameStatsTerse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARealtimeGameStatsTerse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARealtimeGameStatsTerse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARealtimeGameStatsTerse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARealtimeGameStatsTerse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARealtimeGameStatsTerse& from) {
    CMsgDOTARealtimeGameStatsTerse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARealtimeGameStatsTerse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARealtimeGameStatsTerse";
  }
  protected:
  explicit CMsgDOTARealtimeGameStatsTerse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARealtimeGameStatsTerse_TeamDetails TeamDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_PlayerDetails PlayerDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_BuildingDetails BuildingDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_PickBanDetails PickBanDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_MatchDetails MatchDetails;
  typedef CMsgDOTARealtimeGameStatsTerse_GraphData GraphData;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 2,
    kBuildingsFieldNumber = 3,
    kMatchFieldNumber = 1,
    kGraphDataFieldNumber = 4,
    kDeltaFrameFieldNumber = 5,
  };
  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
      mutable_teams();
  private:
  const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& _internal_teams(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* _internal_add_teams();
  public:
  const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& teams(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
      teams() const;

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  int buildings_size() const;
  private:
  int _internal_buildings_size() const;
  public:
  void clear_buildings();
  ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* mutable_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
      mutable_buildings();
  private:
  const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& _internal_buildings(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* _internal_add_buildings();
  public:
  const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& buildings(int index) const;
  ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* add_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
      buildings() const;

  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& match() const;
  PROTOBUF_NODISCARD ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* release_match();
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* mutable_match();
  void set_allocated_match(::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match);
  private:
  const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& _internal_match() const;
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match);
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* unsafe_arena_release_match();

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  bool has_graph_data() const;
  private:
  bool _internal_has_graph_data() const;
  public:
  void clear_graph_data();
  const ::CMsgDOTARealtimeGameStatsTerse_GraphData& graph_data() const;
  PROTOBUF_NODISCARD ::CMsgDOTARealtimeGameStatsTerse_GraphData* release_graph_data();
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* mutable_graph_data();
  void set_allocated_graph_data(::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data);
  private:
  const ::CMsgDOTARealtimeGameStatsTerse_GraphData& _internal_graph_data() const;
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* _internal_mutable_graph_data();
  public:
  void unsafe_arena_set_allocated_graph_data(
      ::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data);
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* unsafe_arena_release_graph_data();

  // optional bool delta_frame = 5;
  bool has_delta_frame() const;
  private:
  bool _internal_has_delta_frame() const;
  public:
  void clear_delta_frame();
  bool delta_frame() const;
  void set_delta_frame(bool value);
  private:
  bool _internal_delta_frame() const;
  void _internal_set_delta_frame(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARealtimeGameStatsTerse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails > teams_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails > buildings_;
    ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match_;
    ::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data_;
    bool delta_frame_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastTimelineEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABroadcastTimelineEvent) */ {
 public:
  inline CMsgDOTABroadcastTimelineEvent() : CMsgDOTABroadcastTimelineEvent(nullptr) {}
  ~CMsgDOTABroadcastTimelineEvent() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTABroadcastTimelineEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTABroadcastTimelineEvent(const CMsgDOTABroadcastTimelineEvent& from);
  CMsgDOTABroadcastTimelineEvent(CMsgDOTABroadcastTimelineEvent&& from) noexcept
    : CMsgDOTABroadcastTimelineEvent() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABroadcastTimelineEvent& operator=(const CMsgDOTABroadcastTimelineEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTABroadcastTimelineEvent& operator=(CMsgDOTABroadcastTimelineEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTABroadcastTimelineEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTABroadcastTimelineEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABroadcastTimelineEvent*>(
               &_CMsgDOTABroadcastTimelineEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgDOTABroadcastTimelineEvent& a, CMsgDOTABroadcastTimelineEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTABroadcastTimelineEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTABroadcastTimelineEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTABroadcastTimelineEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTABroadcastTimelineEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTABroadcastTimelineEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTABroadcastTimelineEvent& from) {
    CMsgDOTABroadcastTimelineEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABroadcastTimelineEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTABroadcastTimelineEvent";
  }
  protected:
  explicit CMsgDOTABroadcastTimelineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringDataFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kDataFieldNumber = 3,
    kEventFieldNumber = 1,
  };
  // optional string string_data = 4;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_data();
  PROTOBUF_NODISCARD std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // optional fixed32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  uint32_t data() const;
  void set_data(uint32_t value);
  private:
  uint32_t _internal_data() const;
  void _internal_set_data(uint32_t value);
  public:

  // optional .EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::EBroadcastTimelineEvent event() const;
  void set_event(::EBroadcastTimelineEvent value);
  private:
  ::EBroadcastTimelineEvent _internal_event() const;
  void _internal_set_event(::EBroadcastTimelineEvent value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTABroadcastTimelineEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
    uint32_t timestamp_;
    uint32_t data_;
    int event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientMatchGroupsVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientMatchGroupsVersion) */ {
 public:
  inline CMsgGCToClientMatchGroupsVersion() : CMsgGCToClientMatchGroupsVersion(nullptr) {}
  ~CMsgGCToClientMatchGroupsVersion() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientMatchGroupsVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientMatchGroupsVersion(const CMsgGCToClientMatchGroupsVersion& from);
  CMsgGCToClientMatchGroupsVersion(CMsgGCToClientMatchGroupsVersion&& from) noexcept
    : CMsgGCToClientMatchGroupsVersion() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientMatchGroupsVersion& operator=(const CMsgGCToClientMatchGroupsVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientMatchGroupsVersion& operator=(CMsgGCToClientMatchGroupsVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientMatchGroupsVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientMatchGroupsVersion* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientMatchGroupsVersion*>(
               &_CMsgGCToClientMatchGroupsVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgGCToClientMatchGroupsVersion& a, CMsgGCToClientMatchGroupsVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientMatchGroupsVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientMatchGroupsVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientMatchGroupsVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientMatchGroupsVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientMatchGroupsVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientMatchGroupsVersion& from) {
    CMsgGCToClientMatchGroupsVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientMatchGroupsVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientMatchGroupsVersion";
  }
  protected:
  explicit CMsgGCToClientMatchGroupsVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchgroupsVersionFieldNumber = 1,
  };
  // optional uint32 matchgroups_version = 1;
  bool has_matchgroups_version() const;
  private:
  bool _internal_has_matchgroups_version() const;
  public:
  void clear_matchgroups_version();
  uint32_t matchgroups_version() const;
  void set_matchgroups_version(uint32_t value);
  private:
  uint32_t _internal_matchgroups_version() const;
  void _internal_set_matchgroups_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientMatchGroupsVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t matchgroups_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASDOHeroStatsHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASDOHeroStatsHistory) */ {
 public:
  inline CMsgDOTASDOHeroStatsHistory() : CMsgDOTASDOHeroStatsHistory(nullptr) {}
  ~CMsgDOTASDOHeroStatsHistory() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTASDOHeroStatsHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASDOHeroStatsHistory(const CMsgDOTASDOHeroStatsHistory& from);
  CMsgDOTASDOHeroStatsHistory(CMsgDOTASDOHeroStatsHistory&& from) noexcept
    : CMsgDOTASDOHeroStatsHistory() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASDOHeroStatsHistory& operator=(const CMsgDOTASDOHeroStatsHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASDOHeroStatsHistory& operator=(CMsgDOTASDOHeroStatsHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTASDOHeroStatsHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASDOHeroStatsHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASDOHeroStatsHistory*>(
               &_CMsgDOTASDOHeroStatsHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgDOTASDOHeroStatsHistory& a, CMsgDOTASDOHeroStatsHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASDOHeroStatsHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASDOHeroStatsHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTASDOHeroStatsHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTASDOHeroStatsHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTASDOHeroStatsHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTASDOHeroStatsHistory& from) {
    CMsgDOTASDOHeroStatsHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASDOHeroStatsHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASDOHeroStatsHistory";
  }
  protected:
  explicit CMsgDOTASDOHeroStatsHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kGameModeFieldNumber = 2,
    kLobbyTypeFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kWonFieldNumber = 5,
    kGpmFieldNumber = 6,
    kXpmFieldNumber = 7,
    kKillsFieldNumber = 8,
    kDeathsFieldNumber = 9,
    kAssistsFieldNumber = 10,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 game_mode = 2;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional uint32 lobby_type = 3;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // optional uint32 start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // optional bool won = 5;
  bool has_won() const;
  private:
  bool _internal_has_won() const;
  public:
  void clear_won();
  bool won() const;
  void set_won(bool value);
  private:
  bool _internal_won() const;
  void _internal_set_won(bool value);
  public:

  // optional uint32 gpm = 6;
  bool has_gpm() const;
  private:
  bool _internal_has_gpm() const;
  public:
  void clear_gpm();
  uint32_t gpm() const;
  void set_gpm(uint32_t value);
  private:
  uint32_t _internal_gpm() const;
  void _internal_set_gpm(uint32_t value);
  public:

  // optional uint32 xpm = 7;
  bool has_xpm() const;
  private:
  bool _internal_has_xpm() const;
  public:
  void clear_xpm();
  uint32_t xpm() const;
  void set_xpm(uint32_t value);
  private:
  uint32_t _internal_xpm() const;
  void _internal_set_xpm(uint32_t value);
  public:

  // optional uint32 kills = 8;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 9;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 10;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASDOHeroStatsHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    uint32_t game_mode_;
    uint32_t lobby_type_;
    uint32_t start_time_;
    bool won_;
    uint32_t gpm_;
    uint32_t xpm_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPredictionChoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPredictionChoice) */ {
 public:
  inline CMsgPredictionChoice() : CMsgPredictionChoice(nullptr) {}
  ~CMsgPredictionChoice() override;
  explicit PROTOBUF_CONSTEXPR CMsgPredictionChoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPredictionChoice(const CMsgPredictionChoice& from);
  CMsgPredictionChoice(CMsgPredictionChoice&& from) noexcept
    : CMsgPredictionChoice() {
    *this = ::std::move(from);
  }

  inline CMsgPredictionChoice& operator=(const CMsgPredictionChoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPredictionChoice& operator=(CMsgPredictionChoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPredictionChoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPredictionChoice* internal_default_instance() {
    return reinterpret_cast<const CMsgPredictionChoice*>(
               &_CMsgPredictionChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgPredictionChoice& a, CMsgPredictionChoice& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPredictionChoice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPredictionChoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPredictionChoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPredictionChoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPredictionChoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPredictionChoice& from) {
    CMsgPredictionChoice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPredictionChoice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPredictionChoice";
  }
  protected:
  explicit CMsgPredictionChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kValueFieldNumber = 1,
    kMinRawValueFieldNumber = 3,
    kMaxRawValueFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // optional uint32 min_raw_value = 3;
  bool has_min_raw_value() const;
  private:
  bool _internal_has_min_raw_value() const;
  public:
  void clear_min_raw_value();
  uint32_t min_raw_value() const;
  void set_min_raw_value(uint32_t value);
  private:
  uint32_t _internal_min_raw_value() const;
  void _internal_set_min_raw_value(uint32_t value);
  public:

  // optional uint32 max_raw_value = 4;
  bool has_max_raw_value() const;
  private:
  bool _internal_has_max_raw_value() const;
  public:
  void clear_max_raw_value();
  uint32_t max_raw_value() const;
  void set_max_raw_value(uint32_t value);
  private:
  uint32_t _internal_max_raw_value() const;
  void _internal_set_max_raw_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPredictionChoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t value_;
    uint32_t min_raw_value_;
    uint32_t max_raw_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgInGamePrediction_QueryKeyValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgInGamePrediction.QueryKeyValues) */ {
 public:
  inline CMsgInGamePrediction_QueryKeyValues() : CMsgInGamePrediction_QueryKeyValues(nullptr) {}
  ~CMsgInGamePrediction_QueryKeyValues() override;
  explicit PROTOBUF_CONSTEXPR CMsgInGamePrediction_QueryKeyValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgInGamePrediction_QueryKeyValues(const CMsgInGamePrediction_QueryKeyValues& from);
  CMsgInGamePrediction_QueryKeyValues(CMsgInGamePrediction_QueryKeyValues&& from) noexcept
    : CMsgInGamePrediction_QueryKeyValues() {
    *this = ::std::move(from);
  }

  inline CMsgInGamePrediction_QueryKeyValues& operator=(const CMsgInGamePrediction_QueryKeyValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgInGamePrediction_QueryKeyValues& operator=(CMsgInGamePrediction_QueryKeyValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgInGamePrediction_QueryKeyValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgInGamePrediction_QueryKeyValues* internal_default_instance() {
    return reinterpret_cast<const CMsgInGamePrediction_QueryKeyValues*>(
               &_CMsgInGamePrediction_QueryKeyValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgInGamePrediction_QueryKeyValues& a, CMsgInGamePrediction_QueryKeyValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgInGamePrediction_QueryKeyValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgInGamePrediction_QueryKeyValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgInGamePrediction_QueryKeyValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgInGamePrediction_QueryKeyValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgInGamePrediction_QueryKeyValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgInGamePrediction_QueryKeyValues& from) {
    CMsgInGamePrediction_QueryKeyValues::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgInGamePrediction_QueryKeyValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgInGamePrediction.QueryKeyValues";
  }
  protected:
  explicit CMsgInGamePrediction_QueryKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgInGamePrediction.QueryKeyValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgInGamePrediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgInGamePrediction) */ {
 public:
  inline CMsgInGamePrediction() : CMsgInGamePrediction(nullptr) {}
  ~CMsgInGamePrediction() override;
  explicit PROTOBUF_CONSTEXPR CMsgInGamePrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgInGamePrediction(const CMsgInGamePrediction& from);
  CMsgInGamePrediction(CMsgInGamePrediction&& from) noexcept
    : CMsgInGamePrediction() {
    *this = ::std::move(from);
  }

  inline CMsgInGamePrediction& operator=(const CMsgInGamePrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgInGamePrediction& operator=(CMsgInGamePrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgInGamePrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgInGamePrediction* internal_default_instance() {
    return reinterpret_cast<const CMsgInGamePrediction*>(
               &_CMsgInGamePrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgInGamePrediction& a, CMsgInGamePrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgInGamePrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgInGamePrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgInGamePrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgInGamePrediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgInGamePrediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgInGamePrediction& from) {
    CMsgInGamePrediction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgInGamePrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgInGamePrediction";
  }
  protected:
  explicit CMsgInGamePrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgInGamePrediction_QueryKeyValues QueryKeyValues;

  typedef CMsgInGamePrediction_ERawValueType_t ERawValueType_t;
  static constexpr ERawValueType_t Number =
    CMsgInGamePrediction_ERawValueType_t_Number;
  static constexpr ERawValueType_t Time =
    CMsgInGamePrediction_ERawValueType_t_Time;
  static inline bool ERawValueType_t_IsValid(int value) {
    return CMsgInGamePrediction_ERawValueType_t_IsValid(value);
  }
  static constexpr ERawValueType_t ERawValueType_t_MIN =
    CMsgInGamePrediction_ERawValueType_t_ERawValueType_t_MIN;
  static constexpr ERawValueType_t ERawValueType_t_MAX =
    CMsgInGamePrediction_ERawValueType_t_ERawValueType_t_MAX;
  static constexpr int ERawValueType_t_ARRAYSIZE =
    CMsgInGamePrediction_ERawValueType_t_ERawValueType_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ERawValueType_t_descriptor() {
    return CMsgInGamePrediction_ERawValueType_t_descriptor();
  }
  template<typename T>
  static inline const std::string& ERawValueType_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ERawValueType_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ERawValueType_t_Name.");
    return CMsgInGamePrediction_ERawValueType_t_Name(enum_t_value);
  }
  static inline bool ERawValueType_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ERawValueType_t* value) {
    return CMsgInGamePrediction_ERawValueType_t_Parse(name, value);
  }

  typedef CMsgInGamePrediction_EPredictionType EPredictionType;
  static constexpr EPredictionType Generic =
    CMsgInGamePrediction_EPredictionType_Generic;
  static constexpr EPredictionType Hero =
    CMsgInGamePrediction_EPredictionType_Hero;
  static constexpr EPredictionType Team =
    CMsgInGamePrediction_EPredictionType_Team;
  static constexpr EPredictionType Player =
    CMsgInGamePrediction_EPredictionType_Player;
  static constexpr EPredictionType Special =
    CMsgInGamePrediction_EPredictionType_Special;
  static constexpr EPredictionType YesNo =
    CMsgInGamePrediction_EPredictionType_YesNo;
  static constexpr EPredictionType QualifiersTeam =
    CMsgInGamePrediction_EPredictionType_QualifiersTeam;
  static inline bool EPredictionType_IsValid(int value) {
    return CMsgInGamePrediction_EPredictionType_IsValid(value);
  }
  static constexpr EPredictionType EPredictionType_MIN =
    CMsgInGamePrediction_EPredictionType_EPredictionType_MIN;
  static constexpr EPredictionType EPredictionType_MAX =
    CMsgInGamePrediction_EPredictionType_EPredictionType_MAX;
  static constexpr int EPredictionType_ARRAYSIZE =
    CMsgInGamePrediction_EPredictionType_EPredictionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EPredictionType_descriptor() {
    return CMsgInGamePrediction_EPredictionType_descriptor();
  }
  template<typename T>
  static inline const std::string& EPredictionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EPredictionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EPredictionType_Name.");
    return CMsgInGamePrediction_EPredictionType_Name(enum_t_value);
  }
  static inline bool EPredictionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EPredictionType* value) {
    return CMsgInGamePrediction_EPredictionType_Parse(name, value);
  }

  typedef CMsgInGamePrediction_EResolutionType_t EResolutionType_t;
  static constexpr EResolutionType_t InvalidQuery =
    CMsgInGamePrediction_EResolutionType_t_InvalidQuery;
  static constexpr EResolutionType_t FirstToPassQuery =
    CMsgInGamePrediction_EResolutionType_t_FirstToPassQuery;
  static constexpr EResolutionType_t LastToPassQuery =
    CMsgInGamePrediction_EResolutionType_t_LastToPassQuery;
  static constexpr EResolutionType_t LastRemainingQuery =
    CMsgInGamePrediction_EResolutionType_t_LastRemainingQuery;
  static constexpr EResolutionType_t MaxToPassQuery =
    CMsgInGamePrediction_EResolutionType_t_MaxToPassQuery;
  static constexpr EResolutionType_t MinToPassQuery =
    CMsgInGamePrediction_EResolutionType_t_MinToPassQuery;
  static constexpr EResolutionType_t SumQuery =
    CMsgInGamePrediction_EResolutionType_t_SumQuery;
  static constexpr EResolutionType_t MaxTeamSumToPassQuery =
    CMsgInGamePrediction_EResolutionType_t_MaxTeamSumToPassQuery;
  static constexpr EResolutionType_t MinTeamSumToPassQuery =
    CMsgInGamePrediction_EResolutionType_t_MinTeamSumToPassQuery;
  static inline bool EResolutionType_t_IsValid(int value) {
    return CMsgInGamePrediction_EResolutionType_t_IsValid(value);
  }
  static constexpr EResolutionType_t EResolutionType_t_MIN =
    CMsgInGamePrediction_EResolutionType_t_EResolutionType_t_MIN;
  static constexpr EResolutionType_t EResolutionType_t_MAX =
    CMsgInGamePrediction_EResolutionType_t_EResolutionType_t_MAX;
  static constexpr int EResolutionType_t_ARRAYSIZE =
    CMsgInGamePrediction_EResolutionType_t_EResolutionType_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResolutionType_t_descriptor() {
    return CMsgInGamePrediction_EResolutionType_t_descriptor();
  }
  template<typename T>
  static inline const std::string& EResolutionType_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResolutionType_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResolutionType_t_Name.");
    return CMsgInGamePrediction_EResolutionType_t_Name(enum_t_value);
  }
  static inline bool EResolutionType_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResolutionType_t* value) {
    return CMsgInGamePrediction_EResolutionType_t_Parse(name, value);
  }

  typedef CMsgInGamePrediction_ERandomSelectionGroup_t ERandomSelectionGroup_t;
  static constexpr ERandomSelectionGroup_t EarlyGame =
    CMsgInGamePrediction_ERandomSelectionGroup_t_EarlyGame;
  static constexpr ERandomSelectionGroup_t MidGame =
    CMsgInGamePrediction_ERandomSelectionGroup_t_MidGame;
  static constexpr ERandomSelectionGroup_t LateGame =
    CMsgInGamePrediction_ERandomSelectionGroup_t_LateGame;
  static constexpr ERandomSelectionGroup_t Count =
    CMsgInGamePrediction_ERandomSelectionGroup_t_Count;
  static inline bool ERandomSelectionGroup_t_IsValid(int value) {
    return CMsgInGamePrediction_ERandomSelectionGroup_t_IsValid(value);
  }
  static constexpr ERandomSelectionGroup_t ERandomSelectionGroup_t_MIN =
    CMsgInGamePrediction_ERandomSelectionGroup_t_ERandomSelectionGroup_t_MIN;
  static constexpr ERandomSelectionGroup_t ERandomSelectionGroup_t_MAX =
    CMsgInGamePrediction_ERandomSelectionGroup_t_ERandomSelectionGroup_t_MAX;
  static constexpr int ERandomSelectionGroup_t_ARRAYSIZE =
    CMsgInGamePrediction_ERandomSelectionGroup_t_ERandomSelectionGroup_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ERandomSelectionGroup_t_descriptor() {
    return CMsgInGamePrediction_ERandomSelectionGroup_t_descriptor();
  }
  template<typename T>
  static inline const std::string& ERandomSelectionGroup_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ERandomSelectionGroup_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ERandomSelectionGroup_t_Name.");
    return CMsgInGamePrediction_ERandomSelectionGroup_t_Name(enum_t_value);
  }
  static inline bool ERandomSelectionGroup_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ERandomSelectionGroup_t* value) {
    return CMsgInGamePrediction_ERandomSelectionGroup_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChoicesFieldNumber = 6,
    kRequiredHeroesFieldNumber = 7,
    kQueryValuesFieldNumber = 9,
    kNameFieldNumber = 2,
    kQuestionFieldNumber = 5,
    kQueryNameFieldNumber = 8,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kGroupFieldNumber = 4,
    kAnswerResolutionTypeFieldNumber = 10,
    kPointsToGrantFieldNumber = 11,
    kRewardActionFieldNumber = 12,
    kDebugForceSelectionFieldNumber = 13,
    kRawValueTypeFieldNumber = 14,
  };
  // repeated .CMsgPredictionChoice choices = 6;
  int choices_size() const;
  private:
  int _internal_choices_size() const;
  public:
  void clear_choices();
  ::CMsgPredictionChoice* mutable_choices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >*
      mutable_choices();
  private:
  const ::CMsgPredictionChoice& _internal_choices(int index) const;
  ::CMsgPredictionChoice* _internal_add_choices();
  public:
  const ::CMsgPredictionChoice& choices(int index) const;
  ::CMsgPredictionChoice* add_choices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >&
      choices() const;

  // repeated string required_heroes = 7;
  int required_heroes_size() const;
  private:
  int _internal_required_heroes_size() const;
  public:
  void clear_required_heroes();
  const std::string& required_heroes(int index) const;
  std::string* mutable_required_heroes(int index);
  void set_required_heroes(int index, const std::string& value);
  void set_required_heroes(int index, std::string&& value);
  void set_required_heroes(int index, const char* value);
  void set_required_heroes(int index, const char* value, size_t size);
  std::string* add_required_heroes();
  void add_required_heroes(const std::string& value);
  void add_required_heroes(std::string&& value);
  void add_required_heroes(const char* value);
  void add_required_heroes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& required_heroes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_required_heroes();
  private:
  const std::string& _internal_required_heroes(int index) const;
  std::string* _internal_add_required_heroes();
  public:

  // repeated .CMsgInGamePrediction.QueryKeyValues query_values = 9;
  int query_values_size() const;
  private:
  int _internal_query_values_size() const;
  public:
  void clear_query_values();
  ::CMsgInGamePrediction_QueryKeyValues* mutable_query_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction_QueryKeyValues >*
      mutable_query_values();
  private:
  const ::CMsgInGamePrediction_QueryKeyValues& _internal_query_values(int index) const;
  ::CMsgInGamePrediction_QueryKeyValues* _internal_add_query_values();
  public:
  const ::CMsgInGamePrediction_QueryKeyValues& query_values(int index) const;
  ::CMsgInGamePrediction_QueryKeyValues* add_query_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction_QueryKeyValues >&
      query_values() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string question = 5;
  bool has_question() const;
  private:
  bool _internal_has_question() const;
  public:
  void clear_question();
  const std::string& question() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* question);
  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(const std::string& value);
  std::string* _internal_mutable_question();
  public:

  // optional string query_name = 8;
  bool has_query_name() const;
  private:
  bool _internal_has_query_name() const;
  public:
  void clear_query_name();
  const std::string& query_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_name();
  PROTOBUF_NODISCARD std::string* release_query_name();
  void set_allocated_query_name(std::string* query_name);
  private:
  const std::string& _internal_query_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_name(const std::string& value);
  std::string* _internal_mutable_query_name();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional .CMsgInGamePrediction.EPredictionType type = 3 [default = Generic];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CMsgInGamePrediction_EPredictionType type() const;
  void set_type(::CMsgInGamePrediction_EPredictionType value);
  private:
  ::CMsgInGamePrediction_EPredictionType _internal_type() const;
  void _internal_set_type(::CMsgInGamePrediction_EPredictionType value);
  public:

  // optional .CMsgInGamePrediction.ERandomSelectionGroup_t group = 4 [default = EarlyGame];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  ::CMsgInGamePrediction_ERandomSelectionGroup_t group() const;
  void set_group(::CMsgInGamePrediction_ERandomSelectionGroup_t value);
  private:
  ::CMsgInGamePrediction_ERandomSelectionGroup_t _internal_group() const;
  void _internal_set_group(::CMsgInGamePrediction_ERandomSelectionGroup_t value);
  public:

  // optional .CMsgInGamePrediction.EResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  bool has_answer_resolution_type() const;
  private:
  bool _internal_has_answer_resolution_type() const;
  public:
  void clear_answer_resolution_type();
  ::CMsgInGamePrediction_EResolutionType_t answer_resolution_type() const;
  void set_answer_resolution_type(::CMsgInGamePrediction_EResolutionType_t value);
  private:
  ::CMsgInGamePrediction_EResolutionType_t _internal_answer_resolution_type() const;
  void _internal_set_answer_resolution_type(::CMsgInGamePrediction_EResolutionType_t value);
  public:

  // optional uint32 points_to_grant = 11;
  bool has_points_to_grant() const;
  private:
  bool _internal_has_points_to_grant() const;
  public:
  void clear_points_to_grant();
  uint32_t points_to_grant() const;
  void set_points_to_grant(uint32_t value);
  private:
  uint32_t _internal_points_to_grant() const;
  void _internal_set_points_to_grant(uint32_t value);
  public:

  // optional uint32 reward_action = 12;
  bool has_reward_action() const;
  private:
  bool _internal_has_reward_action() const;
  public:
  void clear_reward_action();
  uint32_t reward_action() const;
  void set_reward_action(uint32_t value);
  private:
  uint32_t _internal_reward_action() const;
  void _internal_set_reward_action(uint32_t value);
  public:

  // optional uint32 debug_force_selection = 13;
  bool has_debug_force_selection() const;
  private:
  bool _internal_has_debug_force_selection() const;
  public:
  void clear_debug_force_selection();
  uint32_t debug_force_selection() const;
  void set_debug_force_selection(uint32_t value);
  private:
  uint32_t _internal_debug_force_selection() const;
  void _internal_set_debug_force_selection(uint32_t value);
  public:

  // optional .CMsgInGamePrediction.ERawValueType_t raw_value_type = 14 [default = Number];
  bool has_raw_value_type() const;
  private:
  bool _internal_has_raw_value_type() const;
  public:
  void clear_raw_value_type();
  ::CMsgInGamePrediction_ERawValueType_t raw_value_type() const;
  void set_raw_value_type(::CMsgInGamePrediction_ERawValueType_t value);
  private:
  ::CMsgInGamePrediction_ERawValueType_t _internal_raw_value_type() const;
  void _internal_set_raw_value_type(::CMsgInGamePrediction_ERawValueType_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgInGamePrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice > choices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> required_heroes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction_QueryKeyValues > query_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_name_;
    uint32_t id_;
    int type_;
    int group_;
    int answer_resolution_type_;
    uint32_t points_to_grant_;
    uint32_t reward_action_;
    uint32_t debug_force_selection_;
    int raw_value_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Prediction_Answers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASeasonPredictions.Prediction.Answers) */ {
 public:
  inline CMsgDOTASeasonPredictions_Prediction_Answers() : CMsgDOTASeasonPredictions_Prediction_Answers(nullptr) {}
  ~CMsgDOTASeasonPredictions_Prediction_Answers() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTASeasonPredictions_Prediction_Answers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASeasonPredictions_Prediction_Answers(const CMsgDOTASeasonPredictions_Prediction_Answers& from);
  CMsgDOTASeasonPredictions_Prediction_Answers(CMsgDOTASeasonPredictions_Prediction_Answers&& from) noexcept
    : CMsgDOTASeasonPredictions_Prediction_Answers() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions_Prediction_Answers& operator=(const CMsgDOTASeasonPredictions_Prediction_Answers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASeasonPredictions_Prediction_Answers& operator=(CMsgDOTASeasonPredictions_Prediction_Answers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTASeasonPredictions_Prediction_Answers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASeasonPredictions_Prediction_Answers* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions_Prediction_Answers*>(
               &_CMsgDOTASeasonPredictions_Prediction_Answers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgDOTASeasonPredictions_Prediction_Answers& a, CMsgDOTASeasonPredictions_Prediction_Answers& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASeasonPredictions_Prediction_Answers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASeasonPredictions_Prediction_Answers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions_Prediction_Answers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Prediction_Answers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTASeasonPredictions_Prediction_Answers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTASeasonPredictions_Prediction_Answers& from) {
    CMsgDOTASeasonPredictions_Prediction_Answers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions_Prediction_Answers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASeasonPredictions.Prediction.Answers";
  }
  protected:
  explicit CMsgDOTASeasonPredictions_Prediction_Answers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerIdFieldNumber = 1,
  };
  // optional uint32 answer_id = 1;
  bool has_answer_id() const;
  private:
  bool _internal_has_answer_id() const;
  public:
  void clear_answer_id();
  uint32_t answer_id() const;
  void set_answer_id(uint32_t value);
  private:
  uint32_t _internal_answer_id() const;
  void _internal_set_answer_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions.Prediction.Answers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t answer_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions_Prediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASeasonPredictions.Prediction) */ {
 public:
  inline CMsgDOTASeasonPredictions_Prediction() : CMsgDOTASeasonPredictions_Prediction(nullptr) {}
  ~CMsgDOTASeasonPredictions_Prediction() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTASeasonPredictions_Prediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASeasonPredictions_Prediction(const CMsgDOTASeasonPredictions_Prediction& from);
  CMsgDOTASeasonPredictions_Prediction(CMsgDOTASeasonPredictions_Prediction&& from) noexcept
    : CMsgDOTASeasonPredictions_Prediction() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions_Prediction& operator=(const CMsgDOTASeasonPredictions_Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASeasonPredictions_Prediction& operator=(CMsgDOTASeasonPredictions_Prediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTASeasonPredictions_Prediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASeasonPredictions_Prediction* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions_Prediction*>(
               &_CMsgDOTASeasonPredictions_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgDOTASeasonPredictions_Prediction& a, CMsgDOTASeasonPredictions_Prediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASeasonPredictions_Prediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASeasonPredictions_Prediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions_Prediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions_Prediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTASeasonPredictions_Prediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTASeasonPredictions_Prediction& from) {
    CMsgDOTASeasonPredictions_Prediction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions_Prediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASeasonPredictions.Prediction";
  }
  protected:
  explicit CMsgDOTASeasonPredictions_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonPredictions_Prediction_Answers Answers;

  typedef CMsgDOTASeasonPredictions_Prediction_EPredictionType EPredictionType;
  static constexpr EPredictionType Generic =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_Generic;
  static constexpr EPredictionType Hero =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_Hero;
  static constexpr EPredictionType Team =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_Team;
  static constexpr EPredictionType Player =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_Player;
  static constexpr EPredictionType Special =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_Special;
  static constexpr EPredictionType YesNo =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_YesNo;
  static constexpr EPredictionType QualifiersTeam =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_QualifiersTeam;
  static constexpr EPredictionType LastChanceTeam =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_LastChanceTeam;
  static inline bool EPredictionType_IsValid(int value) {
    return CMsgDOTASeasonPredictions_Prediction_EPredictionType_IsValid(value);
  }
  static constexpr EPredictionType EPredictionType_MIN =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_EPredictionType_MIN;
  static constexpr EPredictionType EPredictionType_MAX =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_EPredictionType_MAX;
  static constexpr int EPredictionType_ARRAYSIZE =
    CMsgDOTASeasonPredictions_Prediction_EPredictionType_EPredictionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EPredictionType_descriptor() {
    return CMsgDOTASeasonPredictions_Prediction_EPredictionType_descriptor();
  }
  template<typename T>
  static inline const std::string& EPredictionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EPredictionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EPredictionType_Name.");
    return CMsgDOTASeasonPredictions_Prediction_EPredictionType_Name(enum_t_value);
  }
  static inline bool EPredictionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EPredictionType* value) {
    return CMsgDOTASeasonPredictions_Prediction_EPredictionType_Parse(name, value);
  }

  typedef CMsgDOTASeasonPredictions_Prediction_EAnswerType EAnswerType;
  static constexpr EAnswerType SingleInt =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_SingleInt;
  static constexpr EAnswerType SingleFloat =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_SingleFloat;
  static constexpr EAnswerType MultipleInt =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_MultipleInt;
  static constexpr EAnswerType MultipleFloat =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_MultipleFloat;
  static constexpr EAnswerType AnswerTeam =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_AnswerTeam;
  static constexpr EAnswerType SingleTime =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_SingleTime;
  static constexpr EAnswerType MultipleTime =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_MultipleTime;
  static constexpr EAnswerType NoAnswer =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_NoAnswer;
  static inline bool EAnswerType_IsValid(int value) {
    return CMsgDOTASeasonPredictions_Prediction_EAnswerType_IsValid(value);
  }
  static constexpr EAnswerType EAnswerType_MIN =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_EAnswerType_MIN;
  static constexpr EAnswerType EAnswerType_MAX =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_EAnswerType_MAX;
  static constexpr int EAnswerType_ARRAYSIZE =
    CMsgDOTASeasonPredictions_Prediction_EAnswerType_EAnswerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EAnswerType_descriptor() {
    return CMsgDOTASeasonPredictions_Prediction_EAnswerType_descriptor();
  }
  template<typename T>
  static inline const std::string& EAnswerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EAnswerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EAnswerType_Name.");
    return CMsgDOTASeasonPredictions_Prediction_EAnswerType_Name(enum_t_value);
  }
  static inline bool EAnswerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EAnswerType* value) {
    return CMsgDOTASeasonPredictions_Prediction_EAnswerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChoicesFieldNumber = 3,
    kAnswersFieldNumber = 10,
    kPhasesFieldNumber = 18,
    kQuestionFieldNumber = 2,
    kQueryNameFieldNumber = 11,
    kTypeFieldNumber = 1,
    kSelectionIdFieldNumber = 4,
    kStartDateFieldNumber = 5,
    kLockDateFieldNumber = 6,
    kRewardFieldNumber = 7,
    kAnswerTypeFieldNumber = 8,
    kAnswerIdFieldNumber = 9,
    kLockOnSelectionIdFieldNumber = 13,
    kLockOnSelectionValueFieldNumber = 14,
    kLockOnSelectionSetFieldNumber = 15,
    kUseAnswerValueRangesFieldNumber = 16,
    kRegionFieldNumber = 17,
    kRewardEventFieldNumber = 19,
  };
  // repeated .CMsgPredictionChoice choices = 3;
  int choices_size() const;
  private:
  int _internal_choices_size() const;
  public:
  void clear_choices();
  ::CMsgPredictionChoice* mutable_choices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >*
      mutable_choices();
  private:
  const ::CMsgPredictionChoice& _internal_choices(int index) const;
  ::CMsgPredictionChoice* _internal_add_choices();
  public:
  const ::CMsgPredictionChoice& choices(int index) const;
  ::CMsgPredictionChoice* add_choices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >&
      choices() const;

  // repeated .CMsgDOTASeasonPredictions.Prediction.Answers answers = 10;
  int answers_size() const;
  private:
  int _internal_answers_size() const;
  public:
  void clear_answers();
  ::CMsgDOTASeasonPredictions_Prediction_Answers* mutable_answers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction_Answers >*
      mutable_answers();
  private:
  const ::CMsgDOTASeasonPredictions_Prediction_Answers& _internal_answers(int index) const;
  ::CMsgDOTASeasonPredictions_Prediction_Answers* _internal_add_answers();
  public:
  const ::CMsgDOTASeasonPredictions_Prediction_Answers& answers(int index) const;
  ::CMsgDOTASeasonPredictions_Prediction_Answers* add_answers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction_Answers >&
      answers() const;

  // repeated .ELeaguePhase phases = 18;
  int phases_size() const;
  private:
  int _internal_phases_size() const;
  public:
  void clear_phases();
  private:
  ::ELeaguePhase _internal_phases(int index) const;
  void _internal_add_phases(::ELeaguePhase value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_phases();
  public:
  ::ELeaguePhase phases(int index) const;
  void set_phases(int index, ::ELeaguePhase value);
  void add_phases(::ELeaguePhase value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& phases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_phases();

  // optional string question = 2;
  bool has_question() const;
  private:
  bool _internal_has_question() const;
  public:
  void clear_question();
  const std::string& question() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* question);
  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(const std::string& value);
  std::string* _internal_mutable_question();
  public:

  // optional string query_name = 11;
  bool has_query_name() const;
  private:
  bool _internal_has_query_name() const;
  public:
  void clear_query_name();
  const std::string& query_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_name();
  PROTOBUF_NODISCARD std::string* release_query_name();
  void set_allocated_query_name(std::string* query_name);
  private:
  const std::string& _internal_query_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_name(const std::string& value);
  std::string* _internal_mutable_query_name();
  public:

  // optional .CMsgDOTASeasonPredictions.Prediction.EPredictionType type = 1 [default = Generic];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CMsgDOTASeasonPredictions_Prediction_EPredictionType type() const;
  void set_type(::CMsgDOTASeasonPredictions_Prediction_EPredictionType value);
  private:
  ::CMsgDOTASeasonPredictions_Prediction_EPredictionType _internal_type() const;
  void _internal_set_type(::CMsgDOTASeasonPredictions_Prediction_EPredictionType value);
  public:

  // optional uint32 selection_id = 4;
  bool has_selection_id() const;
  private:
  bool _internal_has_selection_id() const;
  public:
  void clear_selection_id();
  uint32_t selection_id() const;
  void set_selection_id(uint32_t value);
  private:
  uint32_t _internal_selection_id() const;
  void _internal_set_selection_id(uint32_t value);
  public:

  // optional uint32 start_date = 5;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  uint32_t start_date() const;
  void set_start_date(uint32_t value);
  private:
  uint32_t _internal_start_date() const;
  void _internal_set_start_date(uint32_t value);
  public:

  // optional uint32 lock_date = 6;
  bool has_lock_date() const;
  private:
  bool _internal_has_lock_date() const;
  public:
  void clear_lock_date();
  uint32_t lock_date() const;
  void set_lock_date(uint32_t value);
  private:
  uint32_t _internal_lock_date() const;
  void _internal_set_lock_date(uint32_t value);
  public:

  // optional uint32 reward = 7;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  uint32_t reward() const;
  void set_reward(uint32_t value);
  private:
  uint32_t _internal_reward() const;
  void _internal_set_reward(uint32_t value);
  public:

  // optional .CMsgDOTASeasonPredictions.Prediction.EAnswerType answer_type = 8 [default = SingleInt];
  bool has_answer_type() const;
  private:
  bool _internal_has_answer_type() const;
  public:
  void clear_answer_type();
  ::CMsgDOTASeasonPredictions_Prediction_EAnswerType answer_type() const;
  void set_answer_type(::CMsgDOTASeasonPredictions_Prediction_EAnswerType value);
  private:
  ::CMsgDOTASeasonPredictions_Prediction_EAnswerType _internal_answer_type() const;
  void _internal_set_answer_type(::CMsgDOTASeasonPredictions_Prediction_EAnswerType value);
  public:

  // optional uint32 answer_id = 9;
  bool has_answer_id() const;
  private:
  bool _internal_has_answer_id() const;
  public:
  void clear_answer_id();
  uint32_t answer_id() const;
  void set_answer_id(uint32_t value);
  private:
  uint32_t _internal_answer_id() const;
  void _internal_set_answer_id(uint32_t value);
  public:

  // optional uint32 lock_on_selection_id = 13;
  bool has_lock_on_selection_id() const;
  private:
  bool _internal_has_lock_on_selection_id() const;
  public:
  void clear_lock_on_selection_id();
  uint32_t lock_on_selection_id() const;
  void set_lock_on_selection_id(uint32_t value);
  private:
  uint32_t _internal_lock_on_selection_id() const;
  void _internal_set_lock_on_selection_id(uint32_t value);
  public:

  // optional uint32 lock_on_selection_value = 14;
  bool has_lock_on_selection_value() const;
  private:
  bool _internal_has_lock_on_selection_value() const;
  public:
  void clear_lock_on_selection_value();
  uint32_t lock_on_selection_value() const;
  void set_lock_on_selection_value(uint32_t value);
  private:
  uint32_t _internal_lock_on_selection_value() const;
  void _internal_set_lock_on_selection_value(uint32_t value);
  public:

  // optional bool lock_on_selection_set = 15;
  bool has_lock_on_selection_set() const;
  private:
  bool _internal_has_lock_on_selection_set() const;
  public:
  void clear_lock_on_selection_set();
  bool lock_on_selection_set() const;
  void set_lock_on_selection_set(bool value);
  private:
  bool _internal_lock_on_selection_set() const;
  void _internal_set_lock_on_selection_set(bool value);
  public:

  // optional bool use_answer_value_ranges = 16;
  bool has_use_answer_value_ranges() const;
  private:
  bool _internal_has_use_answer_value_ranges() const;
  public:
  void clear_use_answer_value_ranges();
  bool use_answer_value_ranges() const;
  void set_use_answer_value_ranges(bool value);
  private:
  bool _internal_use_answer_value_ranges() const;
  void _internal_set_use_answer_value_ranges(bool value);
  public:

  // optional .ELeagueRegion region = 17 [default = LEAGUE_REGION_UNSET];
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::ELeagueRegion region() const;
  void set_region(::ELeagueRegion value);
  private:
  ::ELeagueRegion _internal_region() const;
  void _internal_set_region(::ELeagueRegion value);
  public:

  // optional .EEvent reward_event = 19 [default = EVENT_ID_NONE];
  bool has_reward_event() const;
  private:
  bool _internal_has_reward_event() const;
  public:
  void clear_reward_event();
  ::EEvent reward_event() const;
  void set_reward_event(::EEvent value);
  private:
  ::EEvent _internal_reward_event() const;
  void _internal_set_reward_event(::EEvent value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions.Prediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice > choices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction_Answers > answers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> phases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_name_;
    int type_;
    uint32_t selection_id_;
    uint32_t start_date_;
    uint32_t lock_date_;
    uint32_t reward_;
    int answer_type_;
    uint32_t answer_id_;
    uint32_t lock_on_selection_id_;
    uint32_t lock_on_selection_value_;
    bool lock_on_selection_set_;
    bool use_answer_value_ranges_;
    int region_;
    int reward_event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeasonPredictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASeasonPredictions) */ {
 public:
  inline CMsgDOTASeasonPredictions() : CMsgDOTASeasonPredictions(nullptr) {}
  ~CMsgDOTASeasonPredictions() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTASeasonPredictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASeasonPredictions(const CMsgDOTASeasonPredictions& from);
  CMsgDOTASeasonPredictions(CMsgDOTASeasonPredictions&& from) noexcept
    : CMsgDOTASeasonPredictions() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeasonPredictions& operator=(const CMsgDOTASeasonPredictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASeasonPredictions& operator=(CMsgDOTASeasonPredictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTASeasonPredictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASeasonPredictions* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeasonPredictions*>(
               &_CMsgDOTASeasonPredictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgDOTASeasonPredictions& a, CMsgDOTASeasonPredictions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASeasonPredictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASeasonPredictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTASeasonPredictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTASeasonPredictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTASeasonPredictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTASeasonPredictions& from) {
    CMsgDOTASeasonPredictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeasonPredictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASeasonPredictions";
  }
  protected:
  explicit CMsgDOTASeasonPredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeasonPredictions_Prediction Prediction;

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsFieldNumber = 1,
    kInGamePredictionsFieldNumber = 2,
    kInGamePredictionCountPerGameFieldNumber = 3,
    kInGamePredictionVotingPeriodMinutesFieldNumber = 4,
  };
  // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
  int predictions_size() const;
  private:
  int _internal_predictions_size() const;
  public:
  void clear_predictions();
  ::CMsgDOTASeasonPredictions_Prediction* mutable_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >*
      mutable_predictions();
  private:
  const ::CMsgDOTASeasonPredictions_Prediction& _internal_predictions(int index) const;
  ::CMsgDOTASeasonPredictions_Prediction* _internal_add_predictions();
  public:
  const ::CMsgDOTASeasonPredictions_Prediction& predictions(int index) const;
  ::CMsgDOTASeasonPredictions_Prediction* add_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >&
      predictions() const;

  // repeated .CMsgInGamePrediction in_game_predictions = 2;
  int in_game_predictions_size() const;
  private:
  int _internal_in_game_predictions_size() const;
  public:
  void clear_in_game_predictions();
  ::CMsgInGamePrediction* mutable_in_game_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >*
      mutable_in_game_predictions();
  private:
  const ::CMsgInGamePrediction& _internal_in_game_predictions(int index) const;
  ::CMsgInGamePrediction* _internal_add_in_game_predictions();
  public:
  const ::CMsgInGamePrediction& in_game_predictions(int index) const;
  ::CMsgInGamePrediction* add_in_game_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >&
      in_game_predictions() const;

  // optional uint32 in_game_prediction_count_per_game = 3;
  bool has_in_game_prediction_count_per_game() const;
  private:
  bool _internal_has_in_game_prediction_count_per_game() const;
  public:
  void clear_in_game_prediction_count_per_game();
  uint32_t in_game_prediction_count_per_game() const;
  void set_in_game_prediction_count_per_game(uint32_t value);
  private:
  uint32_t _internal_in_game_prediction_count_per_game() const;
  void _internal_set_in_game_prediction_count_per_game(uint32_t value);
  public:

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  bool has_in_game_prediction_voting_period_minutes() const;
  private:
  bool _internal_has_in_game_prediction_voting_period_minutes() const;
  public:
  void clear_in_game_prediction_voting_period_minutes();
  uint32_t in_game_prediction_voting_period_minutes() const;
  void set_in_game_prediction_voting_period_minutes(uint32_t value);
  private:
  uint32_t _internal_in_game_prediction_voting_period_minutes() const;
  void _internal_set_in_game_prediction_voting_period_minutes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASeasonPredictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction > predictions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction > in_game_predictions_;
    uint32_t in_game_prediction_count_per_game_;
    uint32_t in_game_prediction_voting_period_minutes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgAvailablePredictions_MatchPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAvailablePredictions.MatchPrediction) */ {
 public:
  inline CMsgAvailablePredictions_MatchPrediction() : CMsgAvailablePredictions_MatchPrediction(nullptr) {}
  ~CMsgAvailablePredictions_MatchPrediction() override;
  explicit PROTOBUF_CONSTEXPR CMsgAvailablePredictions_MatchPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAvailablePredictions_MatchPrediction(const CMsgAvailablePredictions_MatchPrediction& from);
  CMsgAvailablePredictions_MatchPrediction(CMsgAvailablePredictions_MatchPrediction&& from) noexcept
    : CMsgAvailablePredictions_MatchPrediction() {
    *this = ::std::move(from);
  }

  inline CMsgAvailablePredictions_MatchPrediction& operator=(const CMsgAvailablePredictions_MatchPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAvailablePredictions_MatchPrediction& operator=(CMsgAvailablePredictions_MatchPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAvailablePredictions_MatchPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAvailablePredictions_MatchPrediction* internal_default_instance() {
    return reinterpret_cast<const CMsgAvailablePredictions_MatchPrediction*>(
               &_CMsgAvailablePredictions_MatchPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgAvailablePredictions_MatchPrediction& a, CMsgAvailablePredictions_MatchPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAvailablePredictions_MatchPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAvailablePredictions_MatchPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAvailablePredictions_MatchPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAvailablePredictions_MatchPrediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAvailablePredictions_MatchPrediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAvailablePredictions_MatchPrediction& from) {
    CMsgAvailablePredictions_MatchPrediction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAvailablePredictions_MatchPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAvailablePredictions.MatchPrediction";
  }
  protected:
  explicit CMsgAvailablePredictions_MatchPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsFieldNumber = 2,
    kMatchIdFieldNumber = 1,
  };
  // repeated .CMsgInGamePrediction predictions = 2;
  int predictions_size() const;
  private:
  int _internal_predictions_size() const;
  public:
  void clear_predictions();
  ::CMsgInGamePrediction* mutable_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >*
      mutable_predictions();
  private:
  const ::CMsgInGamePrediction& _internal_predictions(int index) const;
  ::CMsgInGamePrediction* _internal_add_predictions();
  public:
  const ::CMsgInGamePrediction& predictions(int index) const;
  ::CMsgInGamePrediction* add_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >&
      predictions() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAvailablePredictions.MatchPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction > predictions_;
    uint64_t match_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgAvailablePredictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAvailablePredictions) */ {
 public:
  inline CMsgAvailablePredictions() : CMsgAvailablePredictions(nullptr) {}
  ~CMsgAvailablePredictions() override;
  explicit PROTOBUF_CONSTEXPR CMsgAvailablePredictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAvailablePredictions(const CMsgAvailablePredictions& from);
  CMsgAvailablePredictions(CMsgAvailablePredictions&& from) noexcept
    : CMsgAvailablePredictions() {
    *this = ::std::move(from);
  }

  inline CMsgAvailablePredictions& operator=(const CMsgAvailablePredictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAvailablePredictions& operator=(CMsgAvailablePredictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAvailablePredictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAvailablePredictions* internal_default_instance() {
    return reinterpret_cast<const CMsgAvailablePredictions*>(
               &_CMsgAvailablePredictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CMsgAvailablePredictions& a, CMsgAvailablePredictions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAvailablePredictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAvailablePredictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAvailablePredictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAvailablePredictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAvailablePredictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAvailablePredictions& from) {
    CMsgAvailablePredictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAvailablePredictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAvailablePredictions";
  }
  protected:
  explicit CMsgAvailablePredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgAvailablePredictions_MatchPrediction MatchPrediction;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchPredictionsFieldNumber = 1,
  };
  // repeated .CMsgAvailablePredictions.MatchPrediction match_predictions = 1;
  int match_predictions_size() const;
  private:
  int _internal_match_predictions_size() const;
  public:
  void clear_match_predictions();
  ::CMsgAvailablePredictions_MatchPrediction* mutable_match_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailablePredictions_MatchPrediction >*
      mutable_match_predictions();
  private:
  const ::CMsgAvailablePredictions_MatchPrediction& _internal_match_predictions(int index) const;
  ::CMsgAvailablePredictions_MatchPrediction* _internal_add_match_predictions();
  public:
  const ::CMsgAvailablePredictions_MatchPrediction& match_predictions(int index) const;
  ::CMsgAvailablePredictions_MatchPrediction* add_match_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailablePredictions_MatchPrediction >&
      match_predictions() const;

  // @@protoc_insertion_point(class_scope:CMsgAvailablePredictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailablePredictions_MatchPrediction > match_predictions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeagueWatchedGames_Series final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeagueWatchedGames.Series) */ {
 public:
  inline CMsgLeagueWatchedGames_Series() : CMsgLeagueWatchedGames_Series(nullptr) {}
  ~CMsgLeagueWatchedGames_Series() override;
  explicit PROTOBUF_CONSTEXPR CMsgLeagueWatchedGames_Series(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeagueWatchedGames_Series(const CMsgLeagueWatchedGames_Series& from);
  CMsgLeagueWatchedGames_Series(CMsgLeagueWatchedGames_Series&& from) noexcept
    : CMsgLeagueWatchedGames_Series() {
    *this = ::std::move(from);
  }

  inline CMsgLeagueWatchedGames_Series& operator=(const CMsgLeagueWatchedGames_Series& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeagueWatchedGames_Series& operator=(CMsgLeagueWatchedGames_Series&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeagueWatchedGames_Series& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeagueWatchedGames_Series* internal_default_instance() {
    return reinterpret_cast<const CMsgLeagueWatchedGames_Series*>(
               &_CMsgLeagueWatchedGames_Series_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CMsgLeagueWatchedGames_Series& a, CMsgLeagueWatchedGames_Series& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeagueWatchedGames_Series* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeagueWatchedGames_Series* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLeagueWatchedGames_Series* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLeagueWatchedGames_Series>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLeagueWatchedGames_Series& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLeagueWatchedGames_Series& from) {
    CMsgLeagueWatchedGames_Series::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeagueWatchedGames_Series* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeagueWatchedGames.Series";
  }
  protected:
  explicit CMsgLeagueWatchedGames_Series(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated uint32 game = 2;
  int game_size() const;
  private:
  int _internal_game_size() const;
  public:
  void clear_game();
  private:
  uint32_t _internal_game(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_game() const;
  void _internal_add_game(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_game();
  public:
  uint32_t game(int index) const;
  void set_game(int index, uint32_t value);
  void add_game(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      game() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_game();

  // optional uint32 node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  uint32_t node_id() const;
  void set_node_id(uint32_t value);
  private:
  uint32_t _internal_node_id() const;
  void _internal_set_node_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLeagueWatchedGames.Series)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > game_;
    uint32_t node_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeagueWatchedGames_League final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeagueWatchedGames.League) */ {
 public:
  inline CMsgLeagueWatchedGames_League() : CMsgLeagueWatchedGames_League(nullptr) {}
  ~CMsgLeagueWatchedGames_League() override;
  explicit PROTOBUF_CONSTEXPR CMsgLeagueWatchedGames_League(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeagueWatchedGames_League(const CMsgLeagueWatchedGames_League& from);
  CMsgLeagueWatchedGames_League(CMsgLeagueWatchedGames_League&& from) noexcept
    : CMsgLeagueWatchedGames_League() {
    *this = ::std::move(from);
  }

  inline CMsgLeagueWatchedGames_League& operator=(const CMsgLeagueWatchedGames_League& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeagueWatchedGames_League& operator=(CMsgLeagueWatchedGames_League&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeagueWatchedGames_League& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeagueWatchedGames_League* internal_default_instance() {
    return reinterpret_cast<const CMsgLeagueWatchedGames_League*>(
               &_CMsgLeagueWatchedGames_League_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CMsgLeagueWatchedGames_League& a, CMsgLeagueWatchedGames_League& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeagueWatchedGames_League* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeagueWatchedGames_League* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLeagueWatchedGames_League* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLeagueWatchedGames_League>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLeagueWatchedGames_League& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLeagueWatchedGames_League& from) {
    CMsgLeagueWatchedGames_League::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeagueWatchedGames_League* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeagueWatchedGames.League";
  }
  protected:
  explicit CMsgLeagueWatchedGames_League(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeriesFieldNumber = 2,
    kLeagueIdFieldNumber = 1,
  };
  // repeated .CMsgLeagueWatchedGames.Series series = 2;
  int series_size() const;
  private:
  int _internal_series_size() const;
  public:
  void clear_series();
  ::CMsgLeagueWatchedGames_Series* mutable_series(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_Series >*
      mutable_series();
  private:
  const ::CMsgLeagueWatchedGames_Series& _internal_series(int index) const;
  ::CMsgLeagueWatchedGames_Series* _internal_add_series();
  public:
  const ::CMsgLeagueWatchedGames_Series& series(int index) const;
  ::CMsgLeagueWatchedGames_Series* add_series();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_Series >&
      series() const;

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLeagueWatchedGames.League)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_Series > series_;
    uint32_t league_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeagueWatchedGames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeagueWatchedGames) */ {
 public:
  inline CMsgLeagueWatchedGames() : CMsgLeagueWatchedGames(nullptr) {}
  ~CMsgLeagueWatchedGames() override;
  explicit PROTOBUF_CONSTEXPR CMsgLeagueWatchedGames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeagueWatchedGames(const CMsgLeagueWatchedGames& from);
  CMsgLeagueWatchedGames(CMsgLeagueWatchedGames&& from) noexcept
    : CMsgLeagueWatchedGames() {
    *this = ::std::move(from);
  }

  inline CMsgLeagueWatchedGames& operator=(const CMsgLeagueWatchedGames& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeagueWatchedGames& operator=(CMsgLeagueWatchedGames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeagueWatchedGames& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeagueWatchedGames* internal_default_instance() {
    return reinterpret_cast<const CMsgLeagueWatchedGames*>(
               &_CMsgLeagueWatchedGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CMsgLeagueWatchedGames& a, CMsgLeagueWatchedGames& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeagueWatchedGames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeagueWatchedGames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLeagueWatchedGames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLeagueWatchedGames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLeagueWatchedGames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLeagueWatchedGames& from) {
    CMsgLeagueWatchedGames::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeagueWatchedGames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeagueWatchedGames";
  }
  protected:
  explicit CMsgLeagueWatchedGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgLeagueWatchedGames_Series Series;
  typedef CMsgLeagueWatchedGames_League League;

  // accessors -------------------------------------------------------

  enum : int {
    kLeaguesFieldNumber = 1,
  };
  // repeated .CMsgLeagueWatchedGames.League leagues = 1;
  int leagues_size() const;
  private:
  int _internal_leagues_size() const;
  public:
  void clear_leagues();
  ::CMsgLeagueWatchedGames_League* mutable_leagues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_League >*
      mutable_leagues();
  private:
  const ::CMsgLeagueWatchedGames_League& _internal_leagues(int index) const;
  ::CMsgLeagueWatchedGames_League* _internal_add_leagues();
  public:
  const ::CMsgLeagueWatchedGames_League& leagues(int index) const;
  ::CMsgLeagueWatchedGames_League* add_leagues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_League >&
      leagues() const;

  // @@protoc_insertion_point(class_scope:CMsgLeagueWatchedGames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_League > leagues_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player_CustomGameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.Player.CustomGameData) */ {
 public:
  inline CMsgDOTAMatch_Player_CustomGameData() : CMsgDOTAMatch_Player_CustomGameData(nullptr) {}
  ~CMsgDOTAMatch_Player_CustomGameData() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch_Player_CustomGameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch_Player_CustomGameData(const CMsgDOTAMatch_Player_CustomGameData& from);
  CMsgDOTAMatch_Player_CustomGameData(CMsgDOTAMatch_Player_CustomGameData&& from) noexcept
    : CMsgDOTAMatch_Player_CustomGameData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_Player_CustomGameData& operator=(const CMsgDOTAMatch_Player_CustomGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch_Player_CustomGameData& operator=(CMsgDOTAMatch_Player_CustomGameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch_Player_CustomGameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch_Player_CustomGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_Player_CustomGameData*>(
               &_CMsgDOTAMatch_Player_CustomGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CMsgDOTAMatch_Player_CustomGameData& a, CMsgDOTAMatch_Player_CustomGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch_Player_CustomGameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch_Player_CustomGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_Player_CustomGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Player_CustomGameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch_Player_CustomGameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch_Player_CustomGameData& from) {
    CMsgDOTAMatch_Player_CustomGameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_Player_CustomGameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch.Player.CustomGameData";
  }
  protected:
  explicit CMsgDOTAMatch_Player_CustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDotaTeamFieldNumber = 1,
    kWinnerFieldNumber = 2,
  };
  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  private:
  bool _internal_has_dota_team() const;
  public:
  void clear_dota_team();
  uint32_t dota_team() const;
  void set_dota_team(uint32_t value);
  private:
  uint32_t _internal_dota_team() const;
  void _internal_set_dota_team(uint32_t value);
  public:

  // optional bool winner = 2;
  bool has_winner() const;
  private:
  bool _internal_has_winner() const;
  public:
  void clear_winner();
  bool winner() const;
  void set_winner(bool value);
  private:
  bool _internal_winner() const;
  void _internal_set_winner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.Player.CustomGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t dota_team_;
    bool winner_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player_HeroDamageReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.Player.HeroDamageReceived) */ {
 public:
  inline CMsgDOTAMatch_Player_HeroDamageReceived() : CMsgDOTAMatch_Player_HeroDamageReceived(nullptr) {}
  ~CMsgDOTAMatch_Player_HeroDamageReceived() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch_Player_HeroDamageReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch_Player_HeroDamageReceived(const CMsgDOTAMatch_Player_HeroDamageReceived& from);
  CMsgDOTAMatch_Player_HeroDamageReceived(CMsgDOTAMatch_Player_HeroDamageReceived&& from) noexcept
    : CMsgDOTAMatch_Player_HeroDamageReceived() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_Player_HeroDamageReceived& operator=(const CMsgDOTAMatch_Player_HeroDamageReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch_Player_HeroDamageReceived& operator=(CMsgDOTAMatch_Player_HeroDamageReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch_Player_HeroDamageReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch_Player_HeroDamageReceived* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_Player_HeroDamageReceived*>(
               &_CMsgDOTAMatch_Player_HeroDamageReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CMsgDOTAMatch_Player_HeroDamageReceived& a, CMsgDOTAMatch_Player_HeroDamageReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch_Player_HeroDamageReceived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch_Player_HeroDamageReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_Player_HeroDamageReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Player_HeroDamageReceived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch_Player_HeroDamageReceived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch_Player_HeroDamageReceived& from) {
    CMsgDOTAMatch_Player_HeroDamageReceived::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_Player_HeroDamageReceived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch.Player.HeroDamageReceived";
  }
  protected:
  explicit CMsgDOTAMatch_Player_HeroDamageReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreReductionFieldNumber = 1,
    kPostReductionFieldNumber = 2,
    kDamageTypeFieldNumber = 3,
  };
  // optional uint32 pre_reduction = 1;
  bool has_pre_reduction() const;
  private:
  bool _internal_has_pre_reduction() const;
  public:
  void clear_pre_reduction();
  uint32_t pre_reduction() const;
  void set_pre_reduction(uint32_t value);
  private:
  uint32_t _internal_pre_reduction() const;
  void _internal_set_pre_reduction(uint32_t value);
  public:

  // optional uint32 post_reduction = 2;
  bool has_post_reduction() const;
  private:
  bool _internal_has_post_reduction() const;
  public:
  void clear_post_reduction();
  uint32_t post_reduction() const;
  void set_post_reduction(uint32_t value);
  private:
  uint32_t _internal_post_reduction() const;
  void _internal_set_post_reduction(uint32_t value);
  public:

  // optional .CMsgDOTAMatch.Player.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
  bool has_damage_type() const;
  private:
  bool _internal_has_damage_type() const;
  public:
  void clear_damage_type();
  ::CMsgDOTAMatch_Player_HeroDamageType damage_type() const;
  void set_damage_type(::CMsgDOTAMatch_Player_HeroDamageType value);
  private:
  ::CMsgDOTAMatch_Player_HeroDamageType _internal_damage_type() const;
  void _internal_set_damage_type(::CMsgDOTAMatch_Player_HeroDamageType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.Player.HeroDamageReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pre_reduction_;
    uint32_t post_reduction_;
    int damage_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.Player) */ {
 public:
  inline CMsgDOTAMatch_Player() : CMsgDOTAMatch_Player(nullptr) {}
  ~CMsgDOTAMatch_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from);
  CMsgDOTAMatch_Player(CMsgDOTAMatch_Player&& from) noexcept
    : CMsgDOTAMatch_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_Player& operator=(const CMsgDOTAMatch_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch_Player& operator=(CMsgDOTAMatch_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_Player*>(
               &_CMsgDOTAMatch_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CMsgDOTAMatch_Player& a, CMsgDOTAMatch_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch_Player& from) {
    CMsgDOTAMatch_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch.Player";
  }
  protected:
  explicit CMsgDOTAMatch_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatch_Player_CustomGameData CustomGameData;
  typedef CMsgDOTAMatch_Player_HeroDamageReceived HeroDamageReceived;

  typedef CMsgDOTAMatch_Player_HeroDamageType HeroDamageType;
  static constexpr HeroDamageType HERO_DAMAGE_PHYSICAL =
    CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_PHYSICAL;
  static constexpr HeroDamageType HERO_DAMAGE_MAGICAL =
    CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_MAGICAL;
  static constexpr HeroDamageType HERO_DAMAGE_PURE =
    CMsgDOTAMatch_Player_HeroDamageType_HERO_DAMAGE_PURE;
  static inline bool HeroDamageType_IsValid(int value) {
    return CMsgDOTAMatch_Player_HeroDamageType_IsValid(value);
  }
  static constexpr HeroDamageType HeroDamageType_MIN =
    CMsgDOTAMatch_Player_HeroDamageType_HeroDamageType_MIN;
  static constexpr HeroDamageType HeroDamageType_MAX =
    CMsgDOTAMatch_Player_HeroDamageType_HeroDamageType_MAX;
  static constexpr int HeroDamageType_ARRAYSIZE =
    CMsgDOTAMatch_Player_HeroDamageType_HeroDamageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HeroDamageType_descriptor() {
    return CMsgDOTAMatch_Player_HeroDamageType_descriptor();
  }
  template<typename T>
  static inline const std::string& HeroDamageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HeroDamageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HeroDamageType_Name.");
    return CMsgDOTAMatch_Player_HeroDamageType_Name(enum_t_value);
  }
  static inline bool HeroDamageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HeroDamageType* value) {
    return CMsgDOTAMatch_Player_HeroDamageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityUpgradesFieldNumber = 47,
    kAdditionalUnitsInventoryFieldNumber = 48,
    kPermanentBuffsFieldNumber = 57,
    kHeroDamageReceivedFieldNumber = 67,
    kHeroDamageDealtFieldNumber = 79,
    kPlayerNameFieldNumber = 29,
    kProNameFieldNumber = 72,
    kRealNameFieldNumber = 73,
    kCustomGameDataFieldNumber = 50,
    kAccountIdFieldNumber = 1,
    kPlayerSlotFieldNumber = 2,
    kHeroIdFieldNumber = 3,
    kExpectedTeamContributionFieldNumber = 10,
    kScaledMetricFieldNumber = 11,
    kPreviousRankFieldNumber = 12,
    kRankChangeFieldNumber = 13,
    kKillsFieldNumber = 14,
    kDeathsFieldNumber = 15,
    kAssistsFieldNumber = 16,
    kLeaverStatusFieldNumber = 17,
    kGoldFieldNumber = 18,
    kLastHitsFieldNumber = 19,
    kDeniesFieldNumber = 20,
    kGoldPerMinFieldNumber = 21,
    kXpPerMinFieldNumber = 22,
    kGoldSpentFieldNumber = 23,
    kHeroDamageFieldNumber = 24,
    kTowerDamageFieldNumber = 25,
    kHeroHealingFieldNumber = 26,
    kLevelFieldNumber = 27,
    kTimeLastSeenFieldNumber = 28,
    kSupportAbilityValueFieldNumber = 30,
    kSearchRankFieldNumber = 34,
    kSearchRankUncertaintyFieldNumber = 35,
    kRankUncertaintyChangeFieldNumber = 36,
    kPartyIdFieldNumber = 38,
    kHeroPlayCountFieldNumber = 37,
    kScaledKillsFieldNumber = 39,
    kScaledDeathsFieldNumber = 40,
    kScaledAssistsFieldNumber = 41,
    kClaimedFarmGoldFieldNumber = 42,
    kSupportGoldFieldNumber = 43,
    kClaimedDeniesFieldNumber = 44,
    kClaimedMissesFieldNumber = 45,
    kMissesFieldNumber = 46,
    kNetWorthFieldNumber = 52,
    kScaledHeroDamageFieldNumber = 54,
    kFeedingDetectedFieldNumber = 32,
    kActivePlusSubscriptionFieldNumber = 51,
    kHeroWasRandomedFieldNumber = 64,
    kHeroWasDotaPlusSuggestionFieldNumber = 69,
    kScaledTowerDamageFieldNumber = 55,
    kScaledHeroHealingFieldNumber = 56,
    kBotDifficultyFieldNumber = 58,
    kHeroPickOrderFieldNumber = 63,
    kSecondsDeadFieldNumber = 70,
    kGoldLostToDeathFieldNumber = 71,
    kMmrTypeFieldNumber = 74,
    kLaneSelectionFlagsFieldNumber = 75,
    kBountyRunesFieldNumber = 77,
    kOutpostsCapturedFieldNumber = 78,
    kTeamNumberFieldNumber = 80,
    kTeamSlotFieldNumber = 81,
    kItem0FieldNumber = 4,
    kItem1FieldNumber = 5,
    kItem2FieldNumber = 6,
    kItem3FieldNumber = 7,
    kItem4FieldNumber = 8,
    kItem5FieldNumber = 9,
    kItem6FieldNumber = 59,
    kItem7FieldNumber = 60,
    kItem8FieldNumber = 61,
    kItem9FieldNumber = 76,
  };
  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  int ability_upgrades_size() const;
  private:
  int _internal_ability_upgrades_size() const;
  public:
  void clear_ability_upgrades();
  ::CMatchPlayerAbilityUpgrade* mutable_ability_upgrades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
      mutable_ability_upgrades();
  private:
  const ::CMatchPlayerAbilityUpgrade& _internal_ability_upgrades(int index) const;
  ::CMatchPlayerAbilityUpgrade* _internal_add_ability_upgrades();
  public:
  const ::CMatchPlayerAbilityUpgrade& ability_upgrades(int index) const;
  ::CMatchPlayerAbilityUpgrade* add_ability_upgrades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
      ability_upgrades() const;

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  int additional_units_inventory_size() const;
  private:
  int _internal_additional_units_inventory_size() const;
  public:
  void clear_additional_units_inventory();
  ::CMatchAdditionalUnitInventory* mutable_additional_units_inventory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
      mutable_additional_units_inventory();
  private:
  const ::CMatchAdditionalUnitInventory& _internal_additional_units_inventory(int index) const;
  ::CMatchAdditionalUnitInventory* _internal_add_additional_units_inventory();
  public:
  const ::CMatchAdditionalUnitInventory& additional_units_inventory(int index) const;
  ::CMatchAdditionalUnitInventory* add_additional_units_inventory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
      additional_units_inventory() const;

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
  int permanent_buffs_size() const;
  private:
  int _internal_permanent_buffs_size() const;
  public:
  void clear_permanent_buffs();
  ::CMatchPlayerPermanentBuff* mutable_permanent_buffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >*
      mutable_permanent_buffs();
  private:
  const ::CMatchPlayerPermanentBuff& _internal_permanent_buffs(int index) const;
  ::CMatchPlayerPermanentBuff* _internal_add_permanent_buffs();
  public:
  const ::CMatchPlayerPermanentBuff& permanent_buffs(int index) const;
  ::CMatchPlayerPermanentBuff* add_permanent_buffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >&
      permanent_buffs() const;

  // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_received = 67;
  int hero_damage_received_size() const;
  private:
  int _internal_hero_damage_received_size() const;
  public:
  void clear_hero_damage_received();
  ::CMsgDOTAMatch_Player_HeroDamageReceived* mutable_hero_damage_received(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >*
      mutable_hero_damage_received();
  private:
  const ::CMsgDOTAMatch_Player_HeroDamageReceived& _internal_hero_damage_received(int index) const;
  ::CMsgDOTAMatch_Player_HeroDamageReceived* _internal_add_hero_damage_received();
  public:
  const ::CMsgDOTAMatch_Player_HeroDamageReceived& hero_damage_received(int index) const;
  ::CMsgDOTAMatch_Player_HeroDamageReceived* add_hero_damage_received();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >&
      hero_damage_received() const;

  // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_dealt = 79;
  int hero_damage_dealt_size() const;
  private:
  int _internal_hero_damage_dealt_size() const;
  public:
  void clear_hero_damage_dealt();
  ::CMsgDOTAMatch_Player_HeroDamageReceived* mutable_hero_damage_dealt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >*
      mutable_hero_damage_dealt();
  private:
  const ::CMsgDOTAMatch_Player_HeroDamageReceived& _internal_hero_damage_dealt(int index) const;
  ::CMsgDOTAMatch_Player_HeroDamageReceived* _internal_add_hero_damage_dealt();
  public:
  const ::CMsgDOTAMatch_Player_HeroDamageReceived& hero_damage_dealt(int index) const;
  ::CMsgDOTAMatch_Player_HeroDamageReceived* add_hero_damage_dealt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >&
      hero_damage_dealt() const;

  // optional string player_name = 29;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional string pro_name = 72;
  bool has_pro_name() const;
  private:
  bool _internal_has_pro_name() const;
  public:
  void clear_pro_name();
  const std::string& pro_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pro_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pro_name();
  PROTOBUF_NODISCARD std::string* release_pro_name();
  void set_allocated_pro_name(std::string* pro_name);
  private:
  const std::string& _internal_pro_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pro_name(const std::string& value);
  std::string* _internal_mutable_pro_name();
  public:

  // optional string real_name = 73;
  bool has_real_name() const;
  private:
  bool _internal_has_real_name() const;
  public:
  void clear_real_name();
  const std::string& real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  bool has_custom_game_data() const;
  private:
  bool _internal_has_custom_game_data() const;
  public:
  void clear_custom_game_data();
  const ::CMsgDOTAMatch_Player_CustomGameData& custom_game_data() const;
  PROTOBUF_NODISCARD ::CMsgDOTAMatch_Player_CustomGameData* release_custom_game_data();
  ::CMsgDOTAMatch_Player_CustomGameData* mutable_custom_game_data();
  void set_allocated_custom_game_data(::CMsgDOTAMatch_Player_CustomGameData* custom_game_data);
  private:
  const ::CMsgDOTAMatch_Player_CustomGameData& _internal_custom_game_data() const;
  ::CMsgDOTAMatch_Player_CustomGameData* _internal_mutable_custom_game_data();
  public:
  void unsafe_arena_set_allocated_custom_game_data(
      ::CMsgDOTAMatch_Player_CustomGameData* custom_game_data);
  ::CMsgDOTAMatch_Player_CustomGameData* unsafe_arena_release_custom_game_data();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 player_slot = 2;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional float expected_team_contribution = 10;
  bool has_expected_team_contribution() const;
  private:
  bool _internal_has_expected_team_contribution() const;
  public:
  void clear_expected_team_contribution();
  float expected_team_contribution() const;
  void set_expected_team_contribution(float value);
  private:
  float _internal_expected_team_contribution() const;
  void _internal_set_expected_team_contribution(float value);
  public:

  // optional float scaled_metric = 11;
  bool has_scaled_metric() const;
  private:
  bool _internal_has_scaled_metric() const;
  public:
  void clear_scaled_metric();
  float scaled_metric() const;
  void set_scaled_metric(float value);
  private:
  float _internal_scaled_metric() const;
  void _internal_set_scaled_metric(float value);
  public:

  // optional uint32 previous_rank = 12;
  bool has_previous_rank() const;
  private:
  bool _internal_has_previous_rank() const;
  public:
  void clear_previous_rank();
  uint32_t previous_rank() const;
  void set_previous_rank(uint32_t value);
  private:
  uint32_t _internal_previous_rank() const;
  void _internal_set_previous_rank(uint32_t value);
  public:

  // optional sint32 rank_change = 13;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  int32_t rank_change() const;
  void set_rank_change(int32_t value);
  private:
  int32_t _internal_rank_change() const;
  void _internal_set_rank_change(int32_t value);
  public:

  // optional uint32 kills = 14;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 15;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 16;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 leaver_status = 17;
  bool has_leaver_status() const;
  private:
  bool _internal_has_leaver_status() const;
  public:
  void clear_leaver_status();
  uint32_t leaver_status() const;
  void set_leaver_status(uint32_t value);
  private:
  uint32_t _internal_leaver_status() const;
  void _internal_set_leaver_status(uint32_t value);
  public:

  // optional uint32 gold = 18;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional uint32 last_hits = 19;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  uint32_t last_hits() const;
  void set_last_hits(uint32_t value);
  private:
  uint32_t _internal_last_hits() const;
  void _internal_set_last_hits(uint32_t value);
  public:

  // optional uint32 denies = 20;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  uint32_t denies() const;
  void set_denies(uint32_t value);
  private:
  uint32_t _internal_denies() const;
  void _internal_set_denies(uint32_t value);
  public:

  // optional uint32 gold_per_min = 21;
  bool has_gold_per_min() const;
  private:
  bool _internal_has_gold_per_min() const;
  public:
  void clear_gold_per_min();
  uint32_t gold_per_min() const;
  void set_gold_per_min(uint32_t value);
  private:
  uint32_t _internal_gold_per_min() const;
  void _internal_set_gold_per_min(uint32_t value);
  public:

  // optional uint32 xp_per_min = 22;
  bool has_xp_per_min() const;
  private:
  bool _internal_has_xp_per_min() const;
  public:
  void clear_xp_per_min();
  uint32_t xp_per_min() const;
  void set_xp_per_min(uint32_t value);
  private:
  uint32_t _internal_xp_per_min() const;
  void _internal_set_xp_per_min(uint32_t value);
  public:

  // optional uint32 gold_spent = 23;
  bool has_gold_spent() const;
  private:
  bool _internal_has_gold_spent() const;
  public:
  void clear_gold_spent();
  uint32_t gold_spent() const;
  void set_gold_spent(uint32_t value);
  private:
  uint32_t _internal_gold_spent() const;
  void _internal_set_gold_spent(uint32_t value);
  public:

  // optional uint32 hero_damage = 24;
  bool has_hero_damage() const;
  private:
  bool _internal_has_hero_damage() const;
  public:
  void clear_hero_damage();
  uint32_t hero_damage() const;
  void set_hero_damage(uint32_t value);
  private:
  uint32_t _internal_hero_damage() const;
  void _internal_set_hero_damage(uint32_t value);
  public:

  // optional uint32 tower_damage = 25;
  bool has_tower_damage() const;
  private:
  bool _internal_has_tower_damage() const;
  public:
  void clear_tower_damage();
  uint32_t tower_damage() const;
  void set_tower_damage(uint32_t value);
  private:
  uint32_t _internal_tower_damage() const;
  void _internal_set_tower_damage(uint32_t value);
  public:

  // optional uint32 hero_healing = 26;
  bool has_hero_healing() const;
  private:
  bool _internal_has_hero_healing() const;
  public:
  void clear_hero_healing();
  uint32_t hero_healing() const;
  void set_hero_healing(uint32_t value);
  private:
  uint32_t _internal_hero_healing() const;
  void _internal_set_hero_healing(uint32_t value);
  public:

  // optional uint32 level = 27;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 time_last_seen = 28;
  bool has_time_last_seen() const;
  private:
  bool _internal_has_time_last_seen() const;
  public:
  void clear_time_last_seen();
  uint32_t time_last_seen() const;
  void set_time_last_seen(uint32_t value);
  private:
  uint32_t _internal_time_last_seen() const;
  void _internal_set_time_last_seen(uint32_t value);
  public:

  // optional uint32 support_ability_value = 30;
  bool has_support_ability_value() const;
  private:
  bool _internal_has_support_ability_value() const;
  public:
  void clear_support_ability_value();
  uint32_t support_ability_value() const;
  void set_support_ability_value(uint32_t value);
  private:
  uint32_t _internal_support_ability_value() const;
  void _internal_set_support_ability_value(uint32_t value);
  public:

  // optional uint32 search_rank = 34;
  bool has_search_rank() const;
  private:
  bool _internal_has_search_rank() const;
  public:
  void clear_search_rank();
  uint32_t search_rank() const;
  void set_search_rank(uint32_t value);
  private:
  uint32_t _internal_search_rank() const;
  void _internal_set_search_rank(uint32_t value);
  public:

  // optional uint32 search_rank_uncertainty = 35;
  bool has_search_rank_uncertainty() const;
  private:
  bool _internal_has_search_rank_uncertainty() const;
  public:
  void clear_search_rank_uncertainty();
  uint32_t search_rank_uncertainty() const;
  void set_search_rank_uncertainty(uint32_t value);
  private:
  uint32_t _internal_search_rank_uncertainty() const;
  void _internal_set_search_rank_uncertainty(uint32_t value);
  public:

  // optional int32 rank_uncertainty_change = 36;
  bool has_rank_uncertainty_change() const;
  private:
  bool _internal_has_rank_uncertainty_change() const;
  public:
  void clear_rank_uncertainty_change();
  int32_t rank_uncertainty_change() const;
  void set_rank_uncertainty_change(int32_t value);
  private:
  int32_t _internal_rank_uncertainty_change() const;
  void _internal_set_rank_uncertainty_change(int32_t value);
  public:

  // optional fixed64 party_id = 38;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  uint64_t party_id() const;
  void set_party_id(uint64_t value);
  private:
  uint64_t _internal_party_id() const;
  void _internal_set_party_id(uint64_t value);
  public:

  // optional uint32 hero_play_count = 37;
  bool has_hero_play_count() const;
  private:
  bool _internal_has_hero_play_count() const;
  public:
  void clear_hero_play_count();
  uint32_t hero_play_count() const;
  void set_hero_play_count(uint32_t value);
  private:
  uint32_t _internal_hero_play_count() const;
  void _internal_set_hero_play_count(uint32_t value);
  public:

  // optional float scaled_kills = 39;
  bool has_scaled_kills() const;
  private:
  bool _internal_has_scaled_kills() const;
  public:
  void clear_scaled_kills();
  float scaled_kills() const;
  void set_scaled_kills(float value);
  private:
  float _internal_scaled_kills() const;
  void _internal_set_scaled_kills(float value);
  public:

  // optional float scaled_deaths = 40;
  bool has_scaled_deaths() const;
  private:
  bool _internal_has_scaled_deaths() const;
  public:
  void clear_scaled_deaths();
  float scaled_deaths() const;
  void set_scaled_deaths(float value);
  private:
  float _internal_scaled_deaths() const;
  void _internal_set_scaled_deaths(float value);
  public:

  // optional float scaled_assists = 41;
  bool has_scaled_assists() const;
  private:
  bool _internal_has_scaled_assists() const;
  public:
  void clear_scaled_assists();
  float scaled_assists() const;
  void set_scaled_assists(float value);
  private:
  float _internal_scaled_assists() const;
  void _internal_set_scaled_assists(float value);
  public:

  // optional uint32 claimed_farm_gold = 42;
  bool has_claimed_farm_gold() const;
  private:
  bool _internal_has_claimed_farm_gold() const;
  public:
  void clear_claimed_farm_gold();
  uint32_t claimed_farm_gold() const;
  void set_claimed_farm_gold(uint32_t value);
  private:
  uint32_t _internal_claimed_farm_gold() const;
  void _internal_set_claimed_farm_gold(uint32_t value);
  public:

  // optional uint32 support_gold = 43;
  bool has_support_gold() const;
  private:
  bool _internal_has_support_gold() const;
  public:
  void clear_support_gold();
  uint32_t support_gold() const;
  void set_support_gold(uint32_t value);
  private:
  uint32_t _internal_support_gold() const;
  void _internal_set_support_gold(uint32_t value);
  public:

  // optional uint32 claimed_denies = 44;
  bool has_claimed_denies() const;
  private:
  bool _internal_has_claimed_denies() const;
  public:
  void clear_claimed_denies();
  uint32_t claimed_denies() const;
  void set_claimed_denies(uint32_t value);
  private:
  uint32_t _internal_claimed_denies() const;
  void _internal_set_claimed_denies(uint32_t value);
  public:

  // optional uint32 claimed_misses = 45;
  bool has_claimed_misses() const;
  private:
  bool _internal_has_claimed_misses() const;
  public:
  void clear_claimed_misses();
  uint32_t claimed_misses() const;
  void set_claimed_misses(uint32_t value);
  private:
  uint32_t _internal_claimed_misses() const;
  void _internal_set_claimed_misses(uint32_t value);
  public:

  // optional uint32 misses = 46;
  bool has_misses() const;
  private:
  bool _internal_has_misses() const;
  public:
  void clear_misses();
  uint32_t misses() const;
  void set_misses(uint32_t value);
  private:
  uint32_t _internal_misses() const;
  void _internal_set_misses(uint32_t value);
  public:

  // optional uint32 net_worth = 52;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 scaled_hero_damage = 54;
  bool has_scaled_hero_damage() const;
  private:
  bool _internal_has_scaled_hero_damage() const;
  public:
  void clear_scaled_hero_damage();
  uint32_t scaled_hero_damage() const;
  void set_scaled_hero_damage(uint32_t value);
  private:
  uint32_t _internal_scaled_hero_damage() const;
  void _internal_set_scaled_hero_damage(uint32_t value);
  public:

  // optional bool feeding_detected = 32;
  bool has_feeding_detected() const;
  private:
  bool _internal_has_feeding_detected() const;
  public:
  void clear_feeding_detected();
  bool feeding_detected() const;
  void set_feeding_detected(bool value);
  private:
  bool _internal_feeding_detected() const;
  void _internal_set_feeding_detected(bool value);
  public:

  // optional bool active_plus_subscription = 51;
  bool has_active_plus_subscription() const;
  private:
  bool _internal_has_active_plus_subscription() const;
  public:
  void clear_active_plus_subscription();
  bool active_plus_subscription() const;
  void set_active_plus_subscription(bool value);
  private:
  bool _internal_active_plus_subscription() const;
  void _internal_set_active_plus_subscription(bool value);
  public:

  // optional bool hero_was_randomed = 64;
  bool has_hero_was_randomed() const;
  private:
  bool _internal_has_hero_was_randomed() const;
  public:
  void clear_hero_was_randomed();
  bool hero_was_randomed() const;
  void set_hero_was_randomed(bool value);
  private:
  bool _internal_hero_was_randomed() const;
  void _internal_set_hero_was_randomed(bool value);
  public:

  // optional bool hero_was_dota_plus_suggestion = 69;
  bool has_hero_was_dota_plus_suggestion() const;
  private:
  bool _internal_has_hero_was_dota_plus_suggestion() const;
  public:
  void clear_hero_was_dota_plus_suggestion();
  bool hero_was_dota_plus_suggestion() const;
  void set_hero_was_dota_plus_suggestion(bool value);
  private:
  bool _internal_hero_was_dota_plus_suggestion() const;
  void _internal_set_hero_was_dota_plus_suggestion(bool value);
  public:

  // optional uint32 scaled_tower_damage = 55;
  bool has_scaled_tower_damage() const;
  private:
  bool _internal_has_scaled_tower_damage() const;
  public:
  void clear_scaled_tower_damage();
  uint32_t scaled_tower_damage() const;
  void set_scaled_tower_damage(uint32_t value);
  private:
  uint32_t _internal_scaled_tower_damage() const;
  void _internal_set_scaled_tower_damage(uint32_t value);
  public:

  // optional uint32 scaled_hero_healing = 56;
  bool has_scaled_hero_healing() const;
  private:
  bool _internal_has_scaled_hero_healing() const;
  public:
  void clear_scaled_hero_healing();
  uint32_t scaled_hero_healing() const;
  void set_scaled_hero_healing(uint32_t value);
  private:
  uint32_t _internal_scaled_hero_healing() const;
  void _internal_set_scaled_hero_healing(uint32_t value);
  public:

  // optional uint32 bot_difficulty = 58;
  bool has_bot_difficulty() const;
  private:
  bool _internal_has_bot_difficulty() const;
  public:
  void clear_bot_difficulty();
  uint32_t bot_difficulty() const;
  void set_bot_difficulty(uint32_t value);
  private:
  uint32_t _internal_bot_difficulty() const;
  void _internal_set_bot_difficulty(uint32_t value);
  public:

  // optional uint32 hero_pick_order = 63;
  bool has_hero_pick_order() const;
  private:
  bool _internal_has_hero_pick_order() const;
  public:
  void clear_hero_pick_order();
  uint32_t hero_pick_order() const;
  void set_hero_pick_order(uint32_t value);
  private:
  uint32_t _internal_hero_pick_order() const;
  void _internal_set_hero_pick_order(uint32_t value);
  public:

  // optional uint32 seconds_dead = 70;
  bool has_seconds_dead() const;
  private:
  bool _internal_has_seconds_dead() const;
  public:
  void clear_seconds_dead();
  uint32_t seconds_dead() const;
  void set_seconds_dead(uint32_t value);
  private:
  uint32_t _internal_seconds_dead() const;
  void _internal_set_seconds_dead(uint32_t value);
  public:

  // optional uint32 gold_lost_to_death = 71;
  bool has_gold_lost_to_death() const;
  private:
  bool _internal_has_gold_lost_to_death() const;
  public:
  void clear_gold_lost_to_death();
  uint32_t gold_lost_to_death() const;
  void set_gold_lost_to_death(uint32_t value);
  private:
  uint32_t _internal_gold_lost_to_death() const;
  void _internal_set_gold_lost_to_death(uint32_t value);
  public:

  // optional uint32 mmr_type = 74;
  bool has_mmr_type() const;
  private:
  bool _internal_has_mmr_type() const;
  public:
  void clear_mmr_type();
  uint32_t mmr_type() const;
  void set_mmr_type(uint32_t value);
  private:
  uint32_t _internal_mmr_type() const;
  void _internal_set_mmr_type(uint32_t value);
  public:

  // optional uint32 lane_selection_flags = 75;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  uint32_t lane_selection_flags() const;
  void set_lane_selection_flags(uint32_t value);
  private:
  uint32_t _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(uint32_t value);
  public:

  // optional uint32 bounty_runes = 77;
  bool has_bounty_runes() const;
  private:
  bool _internal_has_bounty_runes() const;
  public:
  void clear_bounty_runes();
  uint32_t bounty_runes() const;
  void set_bounty_runes(uint32_t value);
  private:
  uint32_t _internal_bounty_runes() const;
  void _internal_set_bounty_runes(uint32_t value);
  public:

  // optional uint32 outposts_captured = 78;
  bool has_outposts_captured() const;
  private:
  bool _internal_has_outposts_captured() const;
  public:
  void clear_outposts_captured();
  uint32_t outposts_captured() const;
  void set_outposts_captured(uint32_t value);
  private:
  uint32_t _internal_outposts_captured() const;
  void _internal_set_outposts_captured(uint32_t value);
  public:

  // optional .DOTA_GC_TEAM team_number = 80 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team_number() const;
  private:
  bool _internal_has_team_number() const;
  public:
  void clear_team_number();
  ::DOTA_GC_TEAM team_number() const;
  void set_team_number(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team_number() const;
  void _internal_set_team_number(::DOTA_GC_TEAM value);
  public:

  // optional uint32 team_slot = 81;
  bool has_team_slot() const;
  private:
  bool _internal_has_team_slot() const;
  public:
  void clear_team_slot();
  uint32_t team_slot() const;
  void set_team_slot(uint32_t value);
  private:
  uint32_t _internal_team_slot() const;
  void _internal_set_team_slot(uint32_t value);
  public:

  // optional int32 item_0 = 4 [default = -1];
  bool has_item_0() const;
  private:
  bool _internal_has_item_0() const;
  public:
  void clear_item_0();
  int32_t item_0() const;
  void set_item_0(int32_t value);
  private:
  int32_t _internal_item_0() const;
  void _internal_set_item_0(int32_t value);
  public:

  // optional int32 item_1 = 5 [default = -1];
  bool has_item_1() const;
  private:
  bool _internal_has_item_1() const;
  public:
  void clear_item_1();
  int32_t item_1() const;
  void set_item_1(int32_t value);
  private:
  int32_t _internal_item_1() const;
  void _internal_set_item_1(int32_t value);
  public:

  // optional int32 item_2 = 6 [default = -1];
  bool has_item_2() const;
  private:
  bool _internal_has_item_2() const;
  public:
  void clear_item_2();
  int32_t item_2() const;
  void set_item_2(int32_t value);
  private:
  int32_t _internal_item_2() const;
  void _internal_set_item_2(int32_t value);
  public:

  // optional int32 item_3 = 7 [default = -1];
  bool has_item_3() const;
  private:
  bool _internal_has_item_3() const;
  public:
  void clear_item_3();
  int32_t item_3() const;
  void set_item_3(int32_t value);
  private:
  int32_t _internal_item_3() const;
  void _internal_set_item_3(int32_t value);
  public:

  // optional int32 item_4 = 8 [default = -1];
  bool has_item_4() const;
  private:
  bool _internal_has_item_4() const;
  public:
  void clear_item_4();
  int32_t item_4() const;
  void set_item_4(int32_t value);
  private:
  int32_t _internal_item_4() const;
  void _internal_set_item_4(int32_t value);
  public:

  // optional int32 item_5 = 9 [default = -1];
  bool has_item_5() const;
  private:
  bool _internal_has_item_5() const;
  public:
  void clear_item_5();
  int32_t item_5() const;
  void set_item_5(int32_t value);
  private:
  int32_t _internal_item_5() const;
  void _internal_set_item_5(int32_t value);
  public:

  // optional int32 item_6 = 59 [default = -1];
  bool has_item_6() const;
  private:
  bool _internal_has_item_6() const;
  public:
  void clear_item_6();
  int32_t item_6() const;
  void set_item_6(int32_t value);
  private:
  int32_t _internal_item_6() const;
  void _internal_set_item_6(int32_t value);
  public:

  // optional int32 item_7 = 60 [default = -1];
  bool has_item_7() const;
  private:
  bool _internal_has_item_7() const;
  public:
  void clear_item_7();
  int32_t item_7() const;
  void set_item_7(int32_t value);
  private:
  int32_t _internal_item_7() const;
  void _internal_set_item_7(int32_t value);
  public:

  // optional int32 item_8 = 61 [default = -1];
  bool has_item_8() const;
  private:
  bool _internal_has_item_8() const;
  public:
  void clear_item_8();
  int32_t item_8() const;
  void set_item_8(int32_t value);
  private:
  int32_t _internal_item_8() const;
  void _internal_set_item_8(int32_t value);
  public:

  // optional int32 item_9 = 76 [default = -1];
  bool has_item_9() const;
  private:
  bool _internal_has_item_9() const;
  public:
  void clear_item_9();
  int32_t item_9() const;
  void set_item_9(int32_t value);
  private:
  int32_t _internal_item_9() const;
  void _internal_set_item_9(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade > ability_upgrades_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory > additional_units_inventory_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff > permanent_buffs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived > hero_damage_received_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived > hero_damage_dealt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    ::CMsgDOTAMatch_Player_CustomGameData* custom_game_data_;
    uint32_t account_id_;
    uint32_t player_slot_;
    uint32_t hero_id_;
    float expected_team_contribution_;
    float scaled_metric_;
    uint32_t previous_rank_;
    int32_t rank_change_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t leaver_status_;
    uint32_t gold_;
    uint32_t last_hits_;
    uint32_t denies_;
    uint32_t gold_per_min_;
    uint32_t xp_per_min_;
    uint32_t gold_spent_;
    uint32_t hero_damage_;
    uint32_t tower_damage_;
    uint32_t hero_healing_;
    uint32_t level_;
    uint32_t time_last_seen_;
    uint32_t support_ability_value_;
    uint32_t search_rank_;
    uint32_t search_rank_uncertainty_;
    int32_t rank_uncertainty_change_;
    uint64_t party_id_;
    uint32_t hero_play_count_;
    float scaled_kills_;
    float scaled_deaths_;
    float scaled_assists_;
    uint32_t claimed_farm_gold_;
    uint32_t support_gold_;
    uint32_t claimed_denies_;
    uint32_t claimed_misses_;
    uint32_t misses_;
    uint32_t net_worth_;
    uint32_t scaled_hero_damage_;
    bool feeding_detected_;
    bool active_plus_subscription_;
    bool hero_was_randomed_;
    bool hero_was_dota_plus_suggestion_;
    uint32_t scaled_tower_damage_;
    uint32_t scaled_hero_healing_;
    uint32_t bot_difficulty_;
    uint32_t hero_pick_order_;
    uint32_t seconds_dead_;
    uint32_t gold_lost_to_death_;
    uint32_t mmr_type_;
    uint32_t lane_selection_flags_;
    uint32_t bounty_runes_;
    uint32_t outposts_captured_;
    int team_number_;
    uint32_t team_slot_;
    int32_t item_0_;
    int32_t item_1_;
    int32_t item_2_;
    int32_t item_3_;
    int32_t item_4_;
    int32_t item_5_;
    int32_t item_6_;
    int32_t item_7_;
    int32_t item_8_;
    int32_t item_9_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_BroadcasterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.BroadcasterInfo) */ {
 public:
  inline CMsgDOTAMatch_BroadcasterInfo() : CMsgDOTAMatch_BroadcasterInfo(nullptr) {}
  ~CMsgDOTAMatch_BroadcasterInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch_BroadcasterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch_BroadcasterInfo(const CMsgDOTAMatch_BroadcasterInfo& from);
  CMsgDOTAMatch_BroadcasterInfo(CMsgDOTAMatch_BroadcasterInfo&& from) noexcept
    : CMsgDOTAMatch_BroadcasterInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_BroadcasterInfo& operator=(const CMsgDOTAMatch_BroadcasterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch_BroadcasterInfo& operator=(CMsgDOTAMatch_BroadcasterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch_BroadcasterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch_BroadcasterInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_BroadcasterInfo*>(
               &_CMsgDOTAMatch_BroadcasterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CMsgDOTAMatch_BroadcasterInfo& a, CMsgDOTAMatch_BroadcasterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch_BroadcasterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch_BroadcasterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_BroadcasterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_BroadcasterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch_BroadcasterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch_BroadcasterInfo& from) {
    CMsgDOTAMatch_BroadcasterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_BroadcasterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch.BroadcasterInfo";
  }
  protected:
  explicit CMsgDOTAMatch_BroadcasterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.BroadcasterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_BroadcasterChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.BroadcasterChannel) */ {
 public:
  inline CMsgDOTAMatch_BroadcasterChannel() : CMsgDOTAMatch_BroadcasterChannel(nullptr) {}
  ~CMsgDOTAMatch_BroadcasterChannel() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch_BroadcasterChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch_BroadcasterChannel(const CMsgDOTAMatch_BroadcasterChannel& from);
  CMsgDOTAMatch_BroadcasterChannel(CMsgDOTAMatch_BroadcasterChannel&& from) noexcept
    : CMsgDOTAMatch_BroadcasterChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_BroadcasterChannel& operator=(const CMsgDOTAMatch_BroadcasterChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch_BroadcasterChannel& operator=(CMsgDOTAMatch_BroadcasterChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch_BroadcasterChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch_BroadcasterChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_BroadcasterChannel*>(
               &_CMsgDOTAMatch_BroadcasterChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CMsgDOTAMatch_BroadcasterChannel& a, CMsgDOTAMatch_BroadcasterChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch_BroadcasterChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch_BroadcasterChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_BroadcasterChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_BroadcasterChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch_BroadcasterChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch_BroadcasterChannel& from) {
    CMsgDOTAMatch_BroadcasterChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_BroadcasterChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch.BroadcasterChannel";
  }
  protected:
  explicit CMsgDOTAMatch_BroadcasterChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcasterInfosFieldNumber = 3,
    kCountryCodeFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kLanguageCodeFieldNumber = 4,
  };
  // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  int broadcaster_infos_size() const;
  private:
  int _internal_broadcaster_infos_size() const;
  public:
  void clear_broadcaster_infos();
  ::CMsgDOTAMatch_BroadcasterInfo* mutable_broadcaster_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >*
      mutable_broadcaster_infos();
  private:
  const ::CMsgDOTAMatch_BroadcasterInfo& _internal_broadcaster_infos(int index) const;
  ::CMsgDOTAMatch_BroadcasterInfo* _internal_add_broadcaster_infos();
  public:
  const ::CMsgDOTAMatch_BroadcasterInfo& broadcaster_infos(int index) const;
  ::CMsgDOTAMatch_BroadcasterInfo* add_broadcaster_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >&
      broadcaster_infos() const;

  // optional string country_code = 1;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string language_code = 4;
  bool has_language_code() const;
  private:
  bool _internal_has_language_code() const;
  public:
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.BroadcasterChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo > broadcaster_infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_Coach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.Coach) */ {
 public:
  inline CMsgDOTAMatch_Coach() : CMsgDOTAMatch_Coach(nullptr) {}
  ~CMsgDOTAMatch_Coach() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch_Coach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch_Coach(const CMsgDOTAMatch_Coach& from);
  CMsgDOTAMatch_Coach(CMsgDOTAMatch_Coach&& from) noexcept
    : CMsgDOTAMatch_Coach() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_Coach& operator=(const CMsgDOTAMatch_Coach& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch_Coach& operator=(CMsgDOTAMatch_Coach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch_Coach& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch_Coach* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_Coach*>(
               &_CMsgDOTAMatch_Coach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CMsgDOTAMatch_Coach& a, CMsgDOTAMatch_Coach& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch_Coach* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch_Coach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_Coach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_Coach>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch_Coach& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch_Coach& from) {
    CMsgDOTAMatch_Coach::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_Coach* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch.Coach";
  }
  protected:
  explicit CMsgDOTAMatch_Coach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoachNameFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kCoachRatingFieldNumber = 3,
    kCoachPartyIdFieldNumber = 5,
    kCoachTeamFieldNumber = 4,
    kIsPrivateCoachFieldNumber = 6,
  };
  // optional string coach_name = 2;
  bool has_coach_name() const;
  private:
  bool _internal_has_coach_name() const;
  public:
  void clear_coach_name();
  const std::string& coach_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coach_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coach_name();
  PROTOBUF_NODISCARD std::string* release_coach_name();
  void set_allocated_coach_name(std::string* coach_name);
  private:
  const std::string& _internal_coach_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coach_name(const std::string& value);
  std::string* _internal_mutable_coach_name();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 coach_rating = 3;
  bool has_coach_rating() const;
  private:
  bool _internal_has_coach_rating() const;
  public:
  void clear_coach_rating();
  uint32_t coach_rating() const;
  void set_coach_rating(uint32_t value);
  private:
  uint32_t _internal_coach_rating() const;
  void _internal_set_coach_rating(uint32_t value);
  public:

  // optional uint64 coach_party_id = 5;
  bool has_coach_party_id() const;
  private:
  bool _internal_has_coach_party_id() const;
  public:
  void clear_coach_party_id();
  uint64_t coach_party_id() const;
  void set_coach_party_id(uint64_t value);
  private:
  uint64_t _internal_coach_party_id() const;
  void _internal_set_coach_party_id(uint64_t value);
  public:

  // optional uint32 coach_team = 4;
  bool has_coach_team() const;
  private:
  bool _internal_has_coach_team() const;
  public:
  void clear_coach_team();
  uint32_t coach_team() const;
  void set_coach_team(uint32_t value);
  private:
  uint32_t _internal_coach_team() const;
  void _internal_set_coach_team(uint32_t value);
  public:

  // optional bool is_private_coach = 6;
  bool has_is_private_coach() const;
  private:
  bool _internal_has_is_private_coach() const;
  public:
  void clear_is_private_coach();
  bool is_private_coach() const;
  void set_is_private_coach(bool value);
  private:
  bool _internal_is_private_coach() const;
  void _internal_set_is_private_coach(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.Coach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coach_name_;
    uint32_t account_id_;
    uint32_t coach_rating_;
    uint64_t coach_party_id_;
    uint32_t coach_team_;
    bool is_private_coach_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch_CustomGameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch.CustomGameData) */ {
 public:
  inline CMsgDOTAMatch_CustomGameData() : CMsgDOTAMatch_CustomGameData(nullptr) {}
  ~CMsgDOTAMatch_CustomGameData() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch_CustomGameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch_CustomGameData(const CMsgDOTAMatch_CustomGameData& from);
  CMsgDOTAMatch_CustomGameData(CMsgDOTAMatch_CustomGameData&& from) noexcept
    : CMsgDOTAMatch_CustomGameData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch_CustomGameData& operator=(const CMsgDOTAMatch_CustomGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch_CustomGameData& operator=(CMsgDOTAMatch_CustomGameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch_CustomGameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch_CustomGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch_CustomGameData*>(
               &_CMsgDOTAMatch_CustomGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CMsgDOTAMatch_CustomGameData& a, CMsgDOTAMatch_CustomGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch_CustomGameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch_CustomGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch_CustomGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch_CustomGameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch_CustomGameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch_CustomGameData& from) {
    CMsgDOTAMatch_CustomGameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch_CustomGameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch.CustomGameData";
  }
  protected:
  explicit CMsgDOTAMatch_CustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 2,
    kCustomGameIdFieldNumber = 1,
  };
  // optional string map_name = 2;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_NODISCARD std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional uint64 custom_game_id = 1;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  uint64_t custom_game_id() const;
  void set_custom_game_id(uint64_t value);
  private:
  uint64_t _internal_custom_game_id() const;
  void _internal_set_custom_game_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch.CustomGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
    uint64_t custom_game_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatch) */ {
 public:
  inline CMsgDOTAMatch() : CMsgDOTAMatch(nullptr) {}
  ~CMsgDOTAMatch() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatch(const CMsgDOTAMatch& from);
  CMsgDOTAMatch(CMsgDOTAMatch&& from) noexcept
    : CMsgDOTAMatch() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatch& operator=(const CMsgDOTAMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatch& operator=(CMsgDOTAMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatch*>(
               &_CMsgDOTAMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CMsgDOTAMatch& a, CMsgDOTAMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatch& from) {
    CMsgDOTAMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatch";
  }
  protected:
  explicit CMsgDOTAMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatch_Player Player;
  typedef CMsgDOTAMatch_BroadcasterInfo BroadcasterInfo;
  typedef CMsgDOTAMatch_BroadcasterChannel BroadcasterChannel;
  typedef CMsgDOTAMatch_Coach Coach;
  typedef CMsgDOTAMatch_CustomGameData CustomGameData;

  typedef CMsgDOTAMatch_ReplayState ReplayState;
  static constexpr ReplayState REPLAY_AVAILABLE =
    CMsgDOTAMatch_ReplayState_REPLAY_AVAILABLE;
  static constexpr ReplayState REPLAY_NOT_RECORDED =
    CMsgDOTAMatch_ReplayState_REPLAY_NOT_RECORDED;
  static constexpr ReplayState REPLAY_EXPIRED =
    CMsgDOTAMatch_ReplayState_REPLAY_EXPIRED;
  static inline bool ReplayState_IsValid(int value) {
    return CMsgDOTAMatch_ReplayState_IsValid(value);
  }
  static constexpr ReplayState ReplayState_MIN =
    CMsgDOTAMatch_ReplayState_ReplayState_MIN;
  static constexpr ReplayState ReplayState_MAX =
    CMsgDOTAMatch_ReplayState_ReplayState_MAX;
  static constexpr int ReplayState_ARRAYSIZE =
    CMsgDOTAMatch_ReplayState_ReplayState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReplayState_descriptor() {
    return CMsgDOTAMatch_ReplayState_descriptor();
  }
  template<typename T>
  static inline const std::string& ReplayState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReplayState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReplayState_Name.");
    return CMsgDOTAMatch_ReplayState_Name(enum_t_value);
  }
  static inline bool ReplayState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReplayState* value) {
    return CMsgDOTAMatch_ReplayState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 5,
    kTowerStatusFieldNumber = 8,
    kBarracksStatusFieldNumber = 9,
    kPicksBansFieldNumber = 32,
    kBroadcasterChannelsFieldNumber = 43,
    kCoachesFieldNumber = 57,
    kRadiantTeamNameFieldNumber = 23,
    kDireTeamNameFieldNumber = 24,
    kRadiantTeamTagFieldNumber = 37,
    kDireTeamTagFieldNumber = 38,
    kRadiantTeamLogoUrlFieldNumber = 54,
    kDireTeamLogoUrlFieldNumber = 55,
    kCustomGameDataFieldNumber = 45,
    kDurationFieldNumber = 3,
    kStarttimeFieldNumber = 4,
    kMatchIdFieldNumber = 6,
    kClusterFieldNumber = 10,
    kFirstBloodTimeFieldNumber = 12,
    kReplaySaltFieldNumber = 13,
    kServerIpFieldNumber = 14,
    kServerPortFieldNumber = 15,
    kLobbyTypeFieldNumber = 16,
    kHumanPlayersFieldNumber = 17,
    kAverageSkillFieldNumber = 18,
    kGameBalanceFieldNumber = 19,
    kRadiantTeamIdFieldNumber = 20,
    kDireTeamIdFieldNumber = 21,
    kLeagueidFieldNumber = 22,
    kRadiantTeamLogoFieldNumber = 25,
    kDireTeamLogoFieldNumber = 26,
    kRadiantTeamCompleteFieldNumber = 27,
    kDireTeamCompleteFieldNumber = 28,
    kPositiveVotesFieldNumber = 29,
    kNegativeVotesFieldNumber = 30,
    kGameModeFieldNumber = 31,
    kReplayStateFieldNumber = 34,
    kMatchSeqNumFieldNumber = 33,
    kRadiantGuildIdFieldNumber = 35,
    kDireGuildIdFieldNumber = 36,
    kSeriesIdFieldNumber = 39,
    kSeriesTypeFieldNumber = 40,
    kEngineFieldNumber = 44,
    kMatchFlagsFieldNumber = 46,
    kPrivateMetadataKeyFieldNumber = 47,
    kRadiantTeamScoreFieldNumber = 48,
    kDireTeamScoreFieldNumber = 49,
    kMatchOutcomeFieldNumber = 50,
    kTournamentIdFieldNumber = 51,
    kTournamentRoundFieldNumber = 52,
    kPreGameDurationFieldNumber = 53,
  };
  // repeated .CMsgDOTAMatch.Player players = 5;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgDOTAMatch_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player >*
      mutable_players();
  private:
  const ::CMsgDOTAMatch_Player& _internal_players(int index) const;
  ::CMsgDOTAMatch_Player* _internal_add_players();
  public:
  const ::CMsgDOTAMatch_Player& players(int index) const;
  ::CMsgDOTAMatch_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player >&
      players() const;

  // repeated uint32 tower_status = 8;
  int tower_status_size() const;
  private:
  int _internal_tower_status_size() const;
  public:
  void clear_tower_status();
  private:
  uint32_t _internal_tower_status(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tower_status() const;
  void _internal_add_tower_status(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tower_status();
  public:
  uint32_t tower_status(int index) const;
  void set_tower_status(int index, uint32_t value);
  void add_tower_status(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tower_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tower_status();

  // repeated uint32 barracks_status = 9;
  int barracks_status_size() const;
  private:
  int _internal_barracks_status_size() const;
  public:
  void clear_barracks_status();
  private:
  uint32_t _internal_barracks_status(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_barracks_status() const;
  void _internal_add_barracks_status(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_barracks_status();
  public:
  uint32_t barracks_status(int index) const;
  void set_barracks_status(int index, uint32_t value);
  void add_barracks_status(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      barracks_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_barracks_status();

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  int picks_bans_size() const;
  private:
  int _internal_picks_bans_size() const;
  public:
  void clear_picks_bans();
  ::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >*
      mutable_picks_bans();
  private:
  const ::CMatchHeroSelectEvent& _internal_picks_bans(int index) const;
  ::CMatchHeroSelectEvent* _internal_add_picks_bans();
  public:
  const ::CMatchHeroSelectEvent& picks_bans(int index) const;
  ::CMatchHeroSelectEvent* add_picks_bans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >&
      picks_bans() const;

  // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  int broadcaster_channels_size() const;
  private:
  int _internal_broadcaster_channels_size() const;
  public:
  void clear_broadcaster_channels();
  ::CMsgDOTAMatch_BroadcasterChannel* mutable_broadcaster_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >*
      mutable_broadcaster_channels();
  private:
  const ::CMsgDOTAMatch_BroadcasterChannel& _internal_broadcaster_channels(int index) const;
  ::CMsgDOTAMatch_BroadcasterChannel* _internal_add_broadcaster_channels();
  public:
  const ::CMsgDOTAMatch_BroadcasterChannel& broadcaster_channels(int index) const;
  ::CMsgDOTAMatch_BroadcasterChannel* add_broadcaster_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >&
      broadcaster_channels() const;

  // repeated .CMsgDOTAMatch.Coach coaches = 57;
  int coaches_size() const;
  private:
  int _internal_coaches_size() const;
  public:
  void clear_coaches();
  ::CMsgDOTAMatch_Coach* mutable_coaches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Coach >*
      mutable_coaches();
  private:
  const ::CMsgDOTAMatch_Coach& _internal_coaches(int index) const;
  ::CMsgDOTAMatch_Coach* _internal_add_coaches();
  public:
  const ::CMsgDOTAMatch_Coach& coaches(int index) const;
  ::CMsgDOTAMatch_Coach* add_coaches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Coach >&
      coaches() const;

  // optional string radiant_team_name = 23;
  bool has_radiant_team_name() const;
  private:
  bool _internal_has_radiant_team_name() const;
  public:
  void clear_radiant_team_name();
  const std::string& radiant_team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_radiant_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_radiant_team_name();
  PROTOBUF_NODISCARD std::string* release_radiant_team_name();
  void set_allocated_radiant_team_name(std::string* radiant_team_name);
  private:
  const std::string& _internal_radiant_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_radiant_team_name(const std::string& value);
  std::string* _internal_mutable_radiant_team_name();
  public:

  // optional string dire_team_name = 24;
  bool has_dire_team_name() const;
  private:
  bool _internal_has_dire_team_name() const;
  public:
  void clear_dire_team_name();
  const std::string& dire_team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dire_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dire_team_name();
  PROTOBUF_NODISCARD std::string* release_dire_team_name();
  void set_allocated_dire_team_name(std::string* dire_team_name);
  private:
  const std::string& _internal_dire_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dire_team_name(const std::string& value);
  std::string* _internal_mutable_dire_team_name();
  public:

  // optional string radiant_team_tag = 37;
  bool has_radiant_team_tag() const;
  private:
  bool _internal_has_radiant_team_tag() const;
  public:
  void clear_radiant_team_tag();
  const std::string& radiant_team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_radiant_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_radiant_team_tag();
  PROTOBUF_NODISCARD std::string* release_radiant_team_tag();
  void set_allocated_radiant_team_tag(std::string* radiant_team_tag);
  private:
  const std::string& _internal_radiant_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_radiant_team_tag(const std::string& value);
  std::string* _internal_mutable_radiant_team_tag();
  public:

  // optional string dire_team_tag = 38;
  bool has_dire_team_tag() const;
  private:
  bool _internal_has_dire_team_tag() const;
  public:
  void clear_dire_team_tag();
  const std::string& dire_team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dire_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dire_team_tag();
  PROTOBUF_NODISCARD std::string* release_dire_team_tag();
  void set_allocated_dire_team_tag(std::string* dire_team_tag);
  private:
  const std::string& _internal_dire_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dire_team_tag(const std::string& value);
  std::string* _internal_mutable_dire_team_tag();
  public:

  // optional string radiant_team_logo_url = 54;
  bool has_radiant_team_logo_url() const;
  private:
  bool _internal_has_radiant_team_logo_url() const;
  public:
  void clear_radiant_team_logo_url();
  const std::string& radiant_team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_radiant_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_radiant_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_radiant_team_logo_url();
  void set_allocated_radiant_team_logo_url(std::string* radiant_team_logo_url);
  private:
  const std::string& _internal_radiant_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_radiant_team_logo_url(const std::string& value);
  std::string* _internal_mutable_radiant_team_logo_url();
  public:

  // optional string dire_team_logo_url = 55;
  bool has_dire_team_logo_url() const;
  private:
  bool _internal_has_dire_team_logo_url() const;
  public:
  void clear_dire_team_logo_url();
  const std::string& dire_team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dire_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dire_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_dire_team_logo_url();
  void set_allocated_dire_team_logo_url(std::string* dire_team_logo_url);
  private:
  const std::string& _internal_dire_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dire_team_logo_url(const std::string& value);
  std::string* _internal_mutable_dire_team_logo_url();
  public:

  // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  bool has_custom_game_data() const;
  private:
  bool _internal_has_custom_game_data() const;
  public:
  void clear_custom_game_data();
  const ::CMsgDOTAMatch_CustomGameData& custom_game_data() const;
  PROTOBUF_NODISCARD ::CMsgDOTAMatch_CustomGameData* release_custom_game_data();
  ::CMsgDOTAMatch_CustomGameData* mutable_custom_game_data();
  void set_allocated_custom_game_data(::CMsgDOTAMatch_CustomGameData* custom_game_data);
  private:
  const ::CMsgDOTAMatch_CustomGameData& _internal_custom_game_data() const;
  ::CMsgDOTAMatch_CustomGameData* _internal_mutable_custom_game_data();
  public:
  void unsafe_arena_set_allocated_custom_game_data(
      ::CMsgDOTAMatch_CustomGameData* custom_game_data);
  ::CMsgDOTAMatch_CustomGameData* unsafe_arena_release_custom_game_data();

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional fixed32 starttime = 4;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  uint32_t starttime() const;
  void set_starttime(uint32_t value);
  private:
  uint32_t _internal_starttime() const;
  void _internal_set_starttime(uint32_t value);
  public:

  // optional uint64 match_id = 6;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 cluster = 10;
  bool has_cluster() const;
  private:
  bool _internal_has_cluster() const;
  public:
  void clear_cluster();
  uint32_t cluster() const;
  void set_cluster(uint32_t value);
  private:
  uint32_t _internal_cluster() const;
  void _internal_set_cluster(uint32_t value);
  public:

  // optional uint32 first_blood_time = 12;
  bool has_first_blood_time() const;
  private:
  bool _internal_has_first_blood_time() const;
  public:
  void clear_first_blood_time();
  uint32_t first_blood_time() const;
  void set_first_blood_time(uint32_t value);
  private:
  uint32_t _internal_first_blood_time() const;
  void _internal_set_first_blood_time(uint32_t value);
  public:

  // optional fixed32 replay_salt = 13;
  bool has_replay_salt() const;
  private:
  bool _internal_has_replay_salt() const;
  public:
  void clear_replay_salt();
  uint32_t replay_salt() const;
  void set_replay_salt(uint32_t value);
  private:
  uint32_t _internal_replay_salt() const;
  void _internal_set_replay_salt(uint32_t value);
  public:

  // optional fixed32 server_ip = 14;
  bool has_server_ip() const;
  private:
  bool _internal_has_server_ip() const;
  public:
  void clear_server_ip();
  uint32_t server_ip() const;
  void set_server_ip(uint32_t value);
  private:
  uint32_t _internal_server_ip() const;
  void _internal_set_server_ip(uint32_t value);
  public:

  // optional uint32 server_port = 15;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  uint32_t server_port() const;
  void set_server_port(uint32_t value);
  private:
  uint32_t _internal_server_port() const;
  void _internal_set_server_port(uint32_t value);
  public:

  // optional uint32 lobby_type = 16;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // optional uint32 human_players = 17;
  bool has_human_players() const;
  private:
  bool _internal_has_human_players() const;
  public:
  void clear_human_players();
  uint32_t human_players() const;
  void set_human_players(uint32_t value);
  private:
  uint32_t _internal_human_players() const;
  void _internal_set_human_players(uint32_t value);
  public:

  // optional uint32 average_skill = 18;
  bool has_average_skill() const;
  private:
  bool _internal_has_average_skill() const;
  public:
  void clear_average_skill();
  uint32_t average_skill() const;
  void set_average_skill(uint32_t value);
  private:
  uint32_t _internal_average_skill() const;
  void _internal_set_average_skill(uint32_t value);
  public:

  // optional float game_balance = 19;
  bool has_game_balance() const;
  private:
  bool _internal_has_game_balance() const;
  public:
  void clear_game_balance();
  float game_balance() const;
  void set_game_balance(float value);
  private:
  float _internal_game_balance() const;
  void _internal_set_game_balance(float value);
  public:

  // optional uint32 radiant_team_id = 20;
  bool has_radiant_team_id() const;
  private:
  bool _internal_has_radiant_team_id() const;
  public:
  void clear_radiant_team_id();
  uint32_t radiant_team_id() const;
  void set_radiant_team_id(uint32_t value);
  private:
  uint32_t _internal_radiant_team_id() const;
  void _internal_set_radiant_team_id(uint32_t value);
  public:

  // optional uint32 dire_team_id = 21;
  bool has_dire_team_id() const;
  private:
  bool _internal_has_dire_team_id() const;
  public:
  void clear_dire_team_id();
  uint32_t dire_team_id() const;
  void set_dire_team_id(uint32_t value);
  private:
  uint32_t _internal_dire_team_id() const;
  void _internal_set_dire_team_id(uint32_t value);
  public:

  // optional uint32 leagueid = 22;
  bool has_leagueid() const;
  private:
  bool _internal_has_leagueid() const;
  public:
  void clear_leagueid();
  uint32_t leagueid() const;
  void set_leagueid(uint32_t value);
  private:
  uint32_t _internal_leagueid() const;
  void _internal_set_leagueid(uint32_t value);
  public:

  // optional uint64 radiant_team_logo = 25;
  bool has_radiant_team_logo() const;
  private:
  bool _internal_has_radiant_team_logo() const;
  public:
  void clear_radiant_team_logo();
  uint64_t radiant_team_logo() const;
  void set_radiant_team_logo(uint64_t value);
  private:
  uint64_t _internal_radiant_team_logo() const;
  void _internal_set_radiant_team_logo(uint64_t value);
  public:

  // optional uint64 dire_team_logo = 26;
  bool has_dire_team_logo() const;
  private:
  bool _internal_has_dire_team_logo() const;
  public:
  void clear_dire_team_logo();
  uint64_t dire_team_logo() const;
  void set_dire_team_logo(uint64_t value);
  private:
  uint64_t _internal_dire_team_logo() const;
  void _internal_set_dire_team_logo(uint64_t value);
  public:

  // optional uint32 radiant_team_complete = 27;
  bool has_radiant_team_complete() const;
  private:
  bool _internal_has_radiant_team_complete() const;
  public:
  void clear_radiant_team_complete();
  uint32_t radiant_team_complete() const;
  void set_radiant_team_complete(uint32_t value);
  private:
  uint32_t _internal_radiant_team_complete() const;
  void _internal_set_radiant_team_complete(uint32_t value);
  public:

  // optional uint32 dire_team_complete = 28;
  bool has_dire_team_complete() const;
  private:
  bool _internal_has_dire_team_complete() const;
  public:
  void clear_dire_team_complete();
  uint32_t dire_team_complete() const;
  void set_dire_team_complete(uint32_t value);
  private:
  uint32_t _internal_dire_team_complete() const;
  void _internal_set_dire_team_complete(uint32_t value);
  public:

  // optional uint32 positive_votes = 29;
  bool has_positive_votes() const;
  private:
  bool _internal_has_positive_votes() const;
  public:
  void clear_positive_votes();
  uint32_t positive_votes() const;
  void set_positive_votes(uint32_t value);
  private:
  uint32_t _internal_positive_votes() const;
  void _internal_set_positive_votes(uint32_t value);
  public:

  // optional uint32 negative_votes = 30;
  bool has_negative_votes() const;
  private:
  bool _internal_has_negative_votes() const;
  public:
  void clear_negative_votes();
  uint32_t negative_votes() const;
  void set_negative_votes(uint32_t value);
  private:
  uint32_t _internal_negative_votes() const;
  void _internal_set_negative_votes(uint32_t value);
  public:

  // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  bool has_replay_state() const;
  private:
  bool _internal_has_replay_state() const;
  public:
  void clear_replay_state();
  ::CMsgDOTAMatch_ReplayState replay_state() const;
  void set_replay_state(::CMsgDOTAMatch_ReplayState value);
  private:
  ::CMsgDOTAMatch_ReplayState _internal_replay_state() const;
  void _internal_set_replay_state(::CMsgDOTAMatch_ReplayState value);
  public:

  // optional uint64 match_seq_num = 33;
  bool has_match_seq_num() const;
  private:
  bool _internal_has_match_seq_num() const;
  public:
  void clear_match_seq_num();
  uint64_t match_seq_num() const;
  void set_match_seq_num(uint64_t value);
  private:
  uint64_t _internal_match_seq_num() const;
  void _internal_set_match_seq_num(uint64_t value);
  public:

  // optional uint32 radiant_guild_id = 35;
  bool has_radiant_guild_id() const;
  private:
  bool _internal_has_radiant_guild_id() const;
  public:
  void clear_radiant_guild_id();
  uint32_t radiant_guild_id() const;
  void set_radiant_guild_id(uint32_t value);
  private:
  uint32_t _internal_radiant_guild_id() const;
  void _internal_set_radiant_guild_id(uint32_t value);
  public:

  // optional uint32 dire_guild_id = 36;
  bool has_dire_guild_id() const;
  private:
  bool _internal_has_dire_guild_id() const;
  public:
  void clear_dire_guild_id();
  uint32_t dire_guild_id() const;
  void set_dire_guild_id(uint32_t value);
  private:
  uint32_t _internal_dire_guild_id() const;
  void _internal_set_dire_guild_id(uint32_t value);
  public:

  // optional uint32 series_id = 39;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  uint32_t series_id() const;
  void set_series_id(uint32_t value);
  private:
  uint32_t _internal_series_id() const;
  void _internal_set_series_id(uint32_t value);
  public:

  // optional uint32 series_type = 40;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  uint32_t series_type() const;
  void set_series_type(uint32_t value);
  private:
  uint32_t _internal_series_type() const;
  void _internal_set_series_type(uint32_t value);
  public:

  // optional uint32 engine = 44;
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  uint32_t engine() const;
  void set_engine(uint32_t value);
  private:
  uint32_t _internal_engine() const;
  void _internal_set_engine(uint32_t value);
  public:

  // optional uint32 match_flags = 46;
  bool has_match_flags() const;
  private:
  bool _internal_has_match_flags() const;
  public:
  void clear_match_flags();
  uint32_t match_flags() const;
  void set_match_flags(uint32_t value);
  private:
  uint32_t _internal_match_flags() const;
  void _internal_set_match_flags(uint32_t value);
  public:

  // optional fixed32 private_metadata_key = 47;
  bool has_private_metadata_key() const;
  private:
  bool _internal_has_private_metadata_key() const;
  public:
  void clear_private_metadata_key();
  uint32_t private_metadata_key() const;
  void set_private_metadata_key(uint32_t value);
  private:
  uint32_t _internal_private_metadata_key() const;
  void _internal_set_private_metadata_key(uint32_t value);
  public:

  // optional uint32 radiant_team_score = 48;
  bool has_radiant_team_score() const;
  private:
  bool _internal_has_radiant_team_score() const;
  public:
  void clear_radiant_team_score();
  uint32_t radiant_team_score() const;
  void set_radiant_team_score(uint32_t value);
  private:
  uint32_t _internal_radiant_team_score() const;
  void _internal_set_radiant_team_score(uint32_t value);
  public:

  // optional uint32 dire_team_score = 49;
  bool has_dire_team_score() const;
  private:
  bool _internal_has_dire_team_score() const;
  public:
  void clear_dire_team_score();
  uint32_t dire_team_score() const;
  void set_dire_team_score(uint32_t value);
  private:
  uint32_t _internal_dire_team_score() const;
  void _internal_set_dire_team_score(uint32_t value);
  public:

  // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  private:
  bool _internal_has_match_outcome() const;
  public:
  void clear_match_outcome();
  ::EMatchOutcome match_outcome() const;
  void set_match_outcome(::EMatchOutcome value);
  private:
  ::EMatchOutcome _internal_match_outcome() const;
  void _internal_set_match_outcome(::EMatchOutcome value);
  public:

  // optional uint32 tournament_id = 51;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // optional uint32 tournament_round = 52;
  bool has_tournament_round() const;
  private:
  bool _internal_has_tournament_round() const;
  public:
  void clear_tournament_round();
  uint32_t tournament_round() const;
  void set_tournament_round(uint32_t value);
  private:
  uint32_t _internal_tournament_round() const;
  void _internal_set_tournament_round(uint32_t value);
  public:

  // optional uint32 pre_game_duration = 53;
  bool has_pre_game_duration() const;
  private:
  bool _internal_has_pre_game_duration() const;
  public:
  void clear_pre_game_duration();
  uint32_t pre_game_duration() const;
  void set_pre_game_duration(uint32_t value);
  private:
  uint32_t _internal_pre_game_duration() const;
  void _internal_set_pre_game_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tower_status_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > barracks_status_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent > picks_bans_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel > broadcaster_channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Coach > coaches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radiant_team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dire_team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radiant_team_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dire_team_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radiant_team_logo_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dire_team_logo_url_;
    ::CMsgDOTAMatch_CustomGameData* custom_game_data_;
    uint32_t duration_;
    uint32_t starttime_;
    uint64_t match_id_;
    uint32_t cluster_;
    uint32_t first_blood_time_;
    uint32_t replay_salt_;
    uint32_t server_ip_;
    uint32_t server_port_;
    uint32_t lobby_type_;
    uint32_t human_players_;
    uint32_t average_skill_;
    float game_balance_;
    uint32_t radiant_team_id_;
    uint32_t dire_team_id_;
    uint32_t leagueid_;
    uint64_t radiant_team_logo_;
    uint64_t dire_team_logo_;
    uint32_t radiant_team_complete_;
    uint32_t dire_team_complete_;
    uint32_t positive_votes_;
    uint32_t negative_votes_;
    int game_mode_;
    int replay_state_;
    uint64_t match_seq_num_;
    uint32_t radiant_guild_id_;
    uint32_t dire_guild_id_;
    uint32_t series_id_;
    uint32_t series_type_;
    uint32_t engine_;
    uint32_t match_flags_;
    uint32_t private_metadata_key_;
    uint32_t radiant_team_score_;
    uint32_t dire_team_score_;
    int match_outcome_;
    uint32_t tournament_id_;
    uint32_t tournament_round_;
    uint32_t pre_game_duration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerCard_StatModifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerCard.StatModifier) */ {
 public:
  inline CMsgPlayerCard_StatModifier() : CMsgPlayerCard_StatModifier(nullptr) {}
  ~CMsgPlayerCard_StatModifier() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerCard_StatModifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerCard_StatModifier(const CMsgPlayerCard_StatModifier& from);
  CMsgPlayerCard_StatModifier(CMsgPlayerCard_StatModifier&& from) noexcept
    : CMsgPlayerCard_StatModifier() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerCard_StatModifier& operator=(const CMsgPlayerCard_StatModifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerCard_StatModifier& operator=(CMsgPlayerCard_StatModifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerCard_StatModifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerCard_StatModifier* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerCard_StatModifier*>(
               &_CMsgPlayerCard_StatModifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CMsgPlayerCard_StatModifier& a, CMsgPlayerCard_StatModifier& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerCard_StatModifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerCard_StatModifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerCard_StatModifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerCard_StatModifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerCard_StatModifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerCard_StatModifier& from) {
    CMsgPlayerCard_StatModifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerCard_StatModifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerCard.StatModifier";
  }
  protected:
  explicit CMsgPlayerCard_StatModifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional uint32 stat = 1;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  uint32_t stat() const;
  void set_stat(uint32_t value);
  private:
  uint32_t _internal_stat() const;
  void _internal_set_stat(uint32_t value);
  public:

  // optional uint32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerCard.StatModifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t stat_;
    uint32_t value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerCard) */ {
 public:
  inline CMsgPlayerCard() : CMsgPlayerCard(nullptr) {}
  ~CMsgPlayerCard() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerCard(const CMsgPlayerCard& from);
  CMsgPlayerCard(CMsgPlayerCard&& from) noexcept
    : CMsgPlayerCard() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerCard& operator=(const CMsgPlayerCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerCard& operator=(CMsgPlayerCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerCard* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerCard*>(
               &_CMsgPlayerCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CMsgPlayerCard& a, CMsgPlayerCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerCard& from) {
    CMsgPlayerCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerCard";
  }
  protected:
  explicit CMsgPlayerCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgPlayerCard_StatModifier StatModifier;

  // accessors -------------------------------------------------------

  enum : int {
    kStatModifierFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
  int stat_modifier_size() const;
  private:
  int _internal_stat_modifier_size() const;
  public:
  void clear_stat_modifier();
  ::CMsgPlayerCard_StatModifier* mutable_stat_modifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >*
      mutable_stat_modifier();
  private:
  const ::CMsgPlayerCard_StatModifier& _internal_stat_modifier(int index) const;
  ::CMsgPlayerCard_StatModifier* _internal_add_stat_modifier();
  public:
  const ::CMsgPlayerCard_StatModifier& stat_modifier(int index) const;
  ::CMsgPlayerCard_StatModifier* add_stat_modifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >&
      stat_modifier() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPlayerCard_StatModifier > stat_modifier_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerStats) */ {
 public:
  inline CMsgDOTAFantasyPlayerStats() : CMsgDOTAFantasyPlayerStats(nullptr) {}
  ~CMsgDOTAFantasyPlayerStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyPlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from);
  CMsgDOTAFantasyPlayerStats(CMsgDOTAFantasyPlayerStats&& from) noexcept
    : CMsgDOTAFantasyPlayerStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerStats& operator=(const CMsgDOTAFantasyPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerStats& operator=(CMsgDOTAFantasyPlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyPlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerStats*>(
               &_CMsgDOTAFantasyPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CMsgDOTAFantasyPlayerStats& a, CMsgDOTAFantasyPlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyPlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyPlayerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyPlayerStats& from) {
    CMsgDOTAFantasyPlayerStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerStats";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 2,
    kPlayerAccountIdFieldNumber = 1,
    kMatchCompletedFieldNumber = 3,
    kTeamIdFieldNumber = 4,
    kLeagueIdFieldNumber = 5,
    kDelayFieldNumber = 6,
    kSeriesIdFieldNumber = 7,
    kSeriesTypeFieldNumber = 8,
    kKillsFieldNumber = 10,
    kDeathsFieldNumber = 11,
    kCsFieldNumber = 12,
    kGpmFieldNumber = 13,
    kTowerKillsFieldNumber = 14,
    kRoshanKillsFieldNumber = 15,
    kTeamfightParticipationFieldNumber = 16,
    kWardsPlacedFieldNumber = 17,
    kCampsStackedFieldNumber = 18,
    kRunesGrabbedFieldNumber = 19,
    kFirstBloodFieldNumber = 20,
    kStunsFieldNumber = 21,
  };
  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 player_account_id = 1;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  uint32_t player_account_id() const;
  void set_player_account_id(uint32_t value);
  private:
  uint32_t _internal_player_account_id() const;
  void _internal_set_player_account_id(uint32_t value);
  public:

  // optional bool match_completed = 3;
  bool has_match_completed() const;
  private:
  bool _internal_has_match_completed() const;
  public:
  void clear_match_completed();
  bool match_completed() const;
  void set_match_completed(bool value);
  private:
  bool _internal_match_completed() const;
  void _internal_set_match_completed(bool value);
  public:

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 league_id = 5;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 delay = 6;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  uint32_t delay() const;
  void set_delay(uint32_t value);
  private:
  uint32_t _internal_delay() const;
  void _internal_set_delay(uint32_t value);
  public:

  // optional uint32 series_id = 7;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  uint32_t series_id() const;
  void set_series_id(uint32_t value);
  private:
  uint32_t _internal_series_id() const;
  void _internal_set_series_id(uint32_t value);
  public:

  // optional uint32 series_type = 8;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  uint32_t series_type() const;
  void set_series_type(uint32_t value);
  private:
  uint32_t _internal_series_type() const;
  void _internal_set_series_type(uint32_t value);
  public:

  // optional uint32 kills = 10;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 11;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 cs = 12;
  bool has_cs() const;
  private:
  bool _internal_has_cs() const;
  public:
  void clear_cs();
  uint32_t cs() const;
  void set_cs(uint32_t value);
  private:
  uint32_t _internal_cs() const;
  void _internal_set_cs(uint32_t value);
  public:

  // optional float gpm = 13;
  bool has_gpm() const;
  private:
  bool _internal_has_gpm() const;
  public:
  void clear_gpm();
  float gpm() const;
  void set_gpm(float value);
  private:
  float _internal_gpm() const;
  void _internal_set_gpm(float value);
  public:

  // optional uint32 tower_kills = 14;
  bool has_tower_kills() const;
  private:
  bool _internal_has_tower_kills() const;
  public:
  void clear_tower_kills();
  uint32_t tower_kills() const;
  void set_tower_kills(uint32_t value);
  private:
  uint32_t _internal_tower_kills() const;
  void _internal_set_tower_kills(uint32_t value);
  public:

  // optional uint32 roshan_kills = 15;
  bool has_roshan_kills() const;
  private:
  bool _internal_has_roshan_kills() const;
  public:
  void clear_roshan_kills();
  uint32_t roshan_kills() const;
  void set_roshan_kills(uint32_t value);
  private:
  uint32_t _internal_roshan_kills() const;
  void _internal_set_roshan_kills(uint32_t value);
  public:

  // optional float teamfight_participation = 16;
  bool has_teamfight_participation() const;
  private:
  bool _internal_has_teamfight_participation() const;
  public:
  void clear_teamfight_participation();
  float teamfight_participation() const;
  void set_teamfight_participation(float value);
  private:
  float _internal_teamfight_participation() const;
  void _internal_set_teamfight_participation(float value);
  public:

  // optional uint32 wards_placed = 17;
  bool has_wards_placed() const;
  private:
  bool _internal_has_wards_placed() const;
  public:
  void clear_wards_placed();
  uint32_t wards_placed() const;
  void set_wards_placed(uint32_t value);
  private:
  uint32_t _internal_wards_placed() const;
  void _internal_set_wards_placed(uint32_t value);
  public:

  // optional uint32 camps_stacked = 18;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  uint32_t camps_stacked() const;
  void set_camps_stacked(uint32_t value);
  private:
  uint32_t _internal_camps_stacked() const;
  void _internal_set_camps_stacked(uint32_t value);
  public:

  // optional uint32 runes_grabbed = 19;
  bool has_runes_grabbed() const;
  private:
  bool _internal_has_runes_grabbed() const;
  public:
  void clear_runes_grabbed();
  uint32_t runes_grabbed() const;
  void set_runes_grabbed(uint32_t value);
  private:
  uint32_t _internal_runes_grabbed() const;
  void _internal_set_runes_grabbed(uint32_t value);
  public:

  // optional uint32 first_blood = 20;
  bool has_first_blood() const;
  private:
  bool _internal_has_first_blood() const;
  public:
  void clear_first_blood();
  uint32_t first_blood() const;
  void set_first_blood(uint32_t value);
  private:
  uint32_t _internal_first_blood() const;
  void _internal_set_first_blood(uint32_t value);
  public:

  // optional float stuns = 21;
  bool has_stuns() const;
  private:
  bool _internal_has_stuns() const;
  public:
  void clear_stuns();
  float stuns() const;
  void set_stuns(float value);
  private:
  float _internal_stuns() const;
  void _internal_set_stuns(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    uint32_t player_account_id_;
    bool match_completed_;
    uint32_t team_id_;
    uint32_t league_id_;
    uint32_t delay_;
    uint32_t series_id_;
    uint32_t series_type_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t cs_;
    float gpm_;
    uint32_t tower_kills_;
    uint32_t roshan_kills_;
    float teamfight_participation_;
    uint32_t wards_placed_;
    uint32_t camps_stacked_;
    uint32_t runes_grabbed_;
    uint32_t first_blood_;
    float stuns_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerMatchStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerMatchStats) */ {
 public:
  inline CMsgDOTAFantasyPlayerMatchStats() : CMsgDOTAFantasyPlayerMatchStats(nullptr) {}
  ~CMsgDOTAFantasyPlayerMatchStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyPlayerMatchStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerMatchStats(const CMsgDOTAFantasyPlayerMatchStats& from);
  CMsgDOTAFantasyPlayerMatchStats(CMsgDOTAFantasyPlayerMatchStats&& from) noexcept
    : CMsgDOTAFantasyPlayerMatchStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerMatchStats& operator=(const CMsgDOTAFantasyPlayerMatchStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerMatchStats& operator=(CMsgDOTAFantasyPlayerMatchStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyPlayerMatchStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerMatchStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerMatchStats*>(
               &_CMsgDOTAFantasyPlayerMatchStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CMsgDOTAFantasyPlayerMatchStats& a, CMsgDOTAFantasyPlayerMatchStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerMatchStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerMatchStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyPlayerMatchStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerMatchStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyPlayerMatchStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyPlayerMatchStats& from) {
    CMsgDOTAFantasyPlayerMatchStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerMatchStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerMatchStats";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerMatchStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::CMsgDOTAFantasyPlayerStats* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
      mutable_matches();
  private:
  const ::CMsgDOTAFantasyPlayerStats& _internal_matches(int index) const;
  ::CMsgDOTAFantasyPlayerStats* _internal_add_matches();
  public:
  const ::CMsgDOTAFantasyPlayerStats& matches(int index) const;
  ::CMsgDOTAFantasyPlayerStats* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
      matches() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerMatchStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats > matches_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot_Mode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABotDebugInfo.Bot.Mode) */ {
 public:
  inline CMsgDOTABotDebugInfo_Bot_Mode() : CMsgDOTABotDebugInfo_Bot_Mode(nullptr) {}
  ~CMsgDOTABotDebugInfo_Bot_Mode() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTABotDebugInfo_Bot_Mode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTABotDebugInfo_Bot_Mode(const CMsgDOTABotDebugInfo_Bot_Mode& from);
  CMsgDOTABotDebugInfo_Bot_Mode(CMsgDOTABotDebugInfo_Bot_Mode&& from) noexcept
    : CMsgDOTABotDebugInfo_Bot_Mode() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo_Bot_Mode& operator=(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTABotDebugInfo_Bot_Mode& operator=(CMsgDOTABotDebugInfo_Bot_Mode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTABotDebugInfo_Bot_Mode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTABotDebugInfo_Bot_Mode* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo_Bot_Mode*>(
               &_CMsgDOTABotDebugInfo_Bot_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CMsgDOTABotDebugInfo_Bot_Mode& a, CMsgDOTABotDebugInfo_Bot_Mode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo_Bot_Mode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot_Mode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTABotDebugInfo_Bot_Mode& from) {
    CMsgDOTABotDebugInfo_Bot_Mode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo_Bot_Mode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTABotDebugInfo.Bot.Mode";
  }
  protected:
  explicit CMsgDOTABotDebugInfo_Bot_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeIdFieldNumber = 1,
    kDesireFieldNumber = 2,
    kTargetXFieldNumber = 4,
    kTargetYFieldNumber = 5,
    kTargetZFieldNumber = 6,
    kTargetEntityFieldNumber = 3,
  };
  // optional uint32 mode_id = 1;
  bool has_mode_id() const;
  private:
  bool _internal_has_mode_id() const;
  public:
  void clear_mode_id();
  uint32_t mode_id() const;
  void set_mode_id(uint32_t value);
  private:
  uint32_t _internal_mode_id() const;
  void _internal_set_mode_id(uint32_t value);
  public:

  // optional float desire = 2;
  bool has_desire() const;
  private:
  bool _internal_has_desire() const;
  public:
  void clear_desire();
  float desire() const;
  void set_desire(float value);
  private:
  float _internal_desire() const;
  void _internal_set_desire(float value);
  public:

  // optional uint32 target_x = 4;
  bool has_target_x() const;
  private:
  bool _internal_has_target_x() const;
  public:
  void clear_target_x();
  uint32_t target_x() const;
  void set_target_x(uint32_t value);
  private:
  uint32_t _internal_target_x() const;
  void _internal_set_target_x(uint32_t value);
  public:

  // optional uint32 target_y = 5;
  bool has_target_y() const;
  private:
  bool _internal_has_target_y() const;
  public:
  void clear_target_y();
  uint32_t target_y() const;
  void set_target_y(uint32_t value);
  private:
  uint32_t _internal_target_y() const;
  void _internal_set_target_y(uint32_t value);
  public:

  // optional uint32 target_z = 6;
  bool has_target_z() const;
  private:
  bool _internal_has_target_z() const;
  public:
  void clear_target_z();
  uint32_t target_z() const;
  void set_target_z(uint32_t value);
  private:
  uint32_t _internal_target_z() const;
  void _internal_set_target_z(uint32_t value);
  public:

  // optional int32 target_entity = 3 [default = -1];
  bool has_target_entity() const;
  private:
  bool _internal_has_target_entity() const;
  public:
  void clear_target_entity();
  int32_t target_entity() const;
  void set_target_entity(int32_t value);
  private:
  int32_t _internal_target_entity() const;
  void _internal_set_target_entity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo.Bot.Mode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t mode_id_;
    float desire_;
    uint32_t target_x_;
    uint32_t target_y_;
    uint32_t target_z_;
    int32_t target_entity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot_Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABotDebugInfo.Bot.Action) */ {
 public:
  inline CMsgDOTABotDebugInfo_Bot_Action() : CMsgDOTABotDebugInfo_Bot_Action(nullptr) {}
  ~CMsgDOTABotDebugInfo_Bot_Action() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTABotDebugInfo_Bot_Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTABotDebugInfo_Bot_Action(const CMsgDOTABotDebugInfo_Bot_Action& from);
  CMsgDOTABotDebugInfo_Bot_Action(CMsgDOTABotDebugInfo_Bot_Action&& from) noexcept
    : CMsgDOTABotDebugInfo_Bot_Action() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo_Bot_Action& operator=(const CMsgDOTABotDebugInfo_Bot_Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTABotDebugInfo_Bot_Action& operator=(CMsgDOTABotDebugInfo_Bot_Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTABotDebugInfo_Bot_Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTABotDebugInfo_Bot_Action* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo_Bot_Action*>(
               &_CMsgDOTABotDebugInfo_Bot_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CMsgDOTABotDebugInfo_Bot_Action& a, CMsgDOTABotDebugInfo_Bot_Action& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTABotDebugInfo_Bot_Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTABotDebugInfo_Bot_Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo_Bot_Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot_Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot_Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTABotDebugInfo_Bot_Action& from) {
    CMsgDOTABotDebugInfo_Bot_Action::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo_Bot_Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTABotDebugInfo.Bot.Action";
  }
  protected:
  explicit CMsgDOTABotDebugInfo_Bot_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionTargetFieldNumber = 2,
    kActionIdFieldNumber = 1,
  };
  // optional string action_target = 2;
  bool has_action_target() const;
  private:
  bool _internal_has_action_target() const;
  public:
  void clear_action_target();
  const std::string& action_target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_target();
  PROTOBUF_NODISCARD std::string* release_action_target();
  void set_allocated_action_target(std::string* action_target);
  private:
  const std::string& _internal_action_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_target(const std::string& value);
  std::string* _internal_mutable_action_target();
  public:

  // optional uint32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  uint32_t action_id() const;
  void set_action_id(uint32_t value);
  private:
  uint32_t _internal_action_id() const;
  void _internal_set_action_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo.Bot.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_target_;
    uint32_t action_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo_Bot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABotDebugInfo.Bot) */ {
 public:
  inline CMsgDOTABotDebugInfo_Bot() : CMsgDOTABotDebugInfo_Bot(nullptr) {}
  ~CMsgDOTABotDebugInfo_Bot() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTABotDebugInfo_Bot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTABotDebugInfo_Bot(const CMsgDOTABotDebugInfo_Bot& from);
  CMsgDOTABotDebugInfo_Bot(CMsgDOTABotDebugInfo_Bot&& from) noexcept
    : CMsgDOTABotDebugInfo_Bot() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo_Bot& operator=(const CMsgDOTABotDebugInfo_Bot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTABotDebugInfo_Bot& operator=(CMsgDOTABotDebugInfo_Bot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTABotDebugInfo_Bot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTABotDebugInfo_Bot* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo_Bot*>(
               &_CMsgDOTABotDebugInfo_Bot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CMsgDOTABotDebugInfo_Bot& a, CMsgDOTABotDebugInfo_Bot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTABotDebugInfo_Bot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTABotDebugInfo_Bot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo_Bot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo_Bot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTABotDebugInfo_Bot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTABotDebugInfo_Bot& from) {
    CMsgDOTABotDebugInfo_Bot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo_Bot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTABotDebugInfo.Bot";
  }
  protected:
  explicit CMsgDOTABotDebugInfo_Bot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTABotDebugInfo_Bot_Mode Mode;
  typedef CMsgDOTABotDebugInfo_Bot_Action Action;

  // accessors -------------------------------------------------------

  enum : int {
    kModesFieldNumber = 11,
    kActionFieldNumber = 12,
    kHeroIdFieldNumber = 2,
    kDifficultyFieldNumber = 3,
    kPowerCurrentFieldNumber = 4,
    kPowerMaxFieldNumber = 5,
    kMoveTargetXFieldNumber = 6,
    kMoveTargetYFieldNumber = 7,
    kMoveTargetZFieldNumber = 8,
    kActiveModeIdFieldNumber = 9,
    kExecutionTimeFieldNumber = 10,
    kPlayerOwnerIdFieldNumber = 1,
  };
  // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  ::CMsgDOTABotDebugInfo_Bot_Mode* mutable_modes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >*
      mutable_modes();
  private:
  const ::CMsgDOTABotDebugInfo_Bot_Mode& _internal_modes(int index) const;
  ::CMsgDOTABotDebugInfo_Bot_Mode* _internal_add_modes();
  public:
  const ::CMsgDOTABotDebugInfo_Bot_Mode& modes(int index) const;
  ::CMsgDOTABotDebugInfo_Bot_Mode* add_modes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >&
      modes() const;

  // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::CMsgDOTABotDebugInfo_Bot_Action& action() const;
  PROTOBUF_NODISCARD ::CMsgDOTABotDebugInfo_Bot_Action* release_action();
  ::CMsgDOTABotDebugInfo_Bot_Action* mutable_action();
  void set_allocated_action(::CMsgDOTABotDebugInfo_Bot_Action* action);
  private:
  const ::CMsgDOTABotDebugInfo_Bot_Action& _internal_action() const;
  ::CMsgDOTABotDebugInfo_Bot_Action* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::CMsgDOTABotDebugInfo_Bot_Action* action);
  ::CMsgDOTABotDebugInfo_Bot_Action* unsafe_arena_release_action();

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 difficulty = 3;
  bool has_difficulty() const;
  private:
  bool _internal_has_difficulty() const;
  public:
  void clear_difficulty();
  uint32_t difficulty() const;
  void set_difficulty(uint32_t value);
  private:
  uint32_t _internal_difficulty() const;
  void _internal_set_difficulty(uint32_t value);
  public:

  // optional uint32 power_current = 4;
  bool has_power_current() const;
  private:
  bool _internal_has_power_current() const;
  public:
  void clear_power_current();
  uint32_t power_current() const;
  void set_power_current(uint32_t value);
  private:
  uint32_t _internal_power_current() const;
  void _internal_set_power_current(uint32_t value);
  public:

  // optional uint32 power_max = 5;
  bool has_power_max() const;
  private:
  bool _internal_has_power_max() const;
  public:
  void clear_power_max();
  uint32_t power_max() const;
  void set_power_max(uint32_t value);
  private:
  uint32_t _internal_power_max() const;
  void _internal_set_power_max(uint32_t value);
  public:

  // optional uint32 move_target_x = 6;
  bool has_move_target_x() const;
  private:
  bool _internal_has_move_target_x() const;
  public:
  void clear_move_target_x();
  uint32_t move_target_x() const;
  void set_move_target_x(uint32_t value);
  private:
  uint32_t _internal_move_target_x() const;
  void _internal_set_move_target_x(uint32_t value);
  public:

  // optional uint32 move_target_y = 7;
  bool has_move_target_y() const;
  private:
  bool _internal_has_move_target_y() const;
  public:
  void clear_move_target_y();
  uint32_t move_target_y() const;
  void set_move_target_y(uint32_t value);
  private:
  uint32_t _internal_move_target_y() const;
  void _internal_set_move_target_y(uint32_t value);
  public:

  // optional uint32 move_target_z = 8;
  bool has_move_target_z() const;
  private:
  bool _internal_has_move_target_z() const;
  public:
  void clear_move_target_z();
  uint32_t move_target_z() const;
  void set_move_target_z(uint32_t value);
  private:
  uint32_t _internal_move_target_z() const;
  void _internal_set_move_target_z(uint32_t value);
  public:

  // optional uint32 active_mode_id = 9;
  bool has_active_mode_id() const;
  private:
  bool _internal_has_active_mode_id() const;
  public:
  void clear_active_mode_id();
  uint32_t active_mode_id() const;
  void set_active_mode_id(uint32_t value);
  private:
  uint32_t _internal_active_mode_id() const;
  void _internal_set_active_mode_id(uint32_t value);
  public:

  // optional float execution_time = 10;
  bool has_execution_time() const;
  private:
  bool _internal_has_execution_time() const;
  public:
  void clear_execution_time();
  float execution_time() const;
  void set_execution_time(float value);
  private:
  float _internal_execution_time() const;
  void _internal_set_execution_time(float value);
  public:

  // optional int32 player_owner_id = 1 [default = -1];
  bool has_player_owner_id() const;
  private:
  bool _internal_has_player_owner_id() const;
  public:
  void clear_player_owner_id();
  int32_t player_owner_id() const;
  void set_player_owner_id(int32_t value);
  private:
  int32_t _internal_player_owner_id() const;
  void _internal_set_player_owner_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo.Bot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode > modes_;
    ::CMsgDOTABotDebugInfo_Bot_Action* action_;
    uint32_t hero_id_;
    uint32_t difficulty_;
    uint32_t power_current_;
    uint32_t power_max_;
    uint32_t move_target_x_;
    uint32_t move_target_y_;
    uint32_t move_target_z_;
    uint32_t active_mode_id_;
    float execution_time_;
    int32_t player_owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTABotDebugInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTABotDebugInfo) */ {
 public:
  inline CMsgDOTABotDebugInfo() : CMsgDOTABotDebugInfo(nullptr) {}
  ~CMsgDOTABotDebugInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTABotDebugInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTABotDebugInfo(const CMsgDOTABotDebugInfo& from);
  CMsgDOTABotDebugInfo(CMsgDOTABotDebugInfo&& from) noexcept
    : CMsgDOTABotDebugInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTABotDebugInfo& operator=(const CMsgDOTABotDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTABotDebugInfo& operator=(CMsgDOTABotDebugInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTABotDebugInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTABotDebugInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABotDebugInfo*>(
               &_CMsgDOTABotDebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CMsgDOTABotDebugInfo& a, CMsgDOTABotDebugInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTABotDebugInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTABotDebugInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTABotDebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTABotDebugInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTABotDebugInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTABotDebugInfo& from) {
    CMsgDOTABotDebugInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTABotDebugInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTABotDebugInfo";
  }
  protected:
  explicit CMsgDOTABotDebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTABotDebugInfo_Bot Bot;

  // accessors -------------------------------------------------------

  enum : int {
    kBotsFieldNumber = 1,
    kRuneStatusFieldNumber = 13,
    kDesirePushLaneTopFieldNumber = 2,
    kDesirePushLaneMidFieldNumber = 3,
    kDesirePushLaneBotFieldNumber = 4,
    kDesireDefendLaneTopFieldNumber = 5,
    kDesireDefendLaneMidFieldNumber = 6,
    kDesireDefendLaneBotFieldNumber = 7,
    kDesireFarmLaneTopFieldNumber = 8,
    kDesireFarmLaneMidFieldNumber = 9,
    kDesireFarmLaneBotFieldNumber = 10,
    kDesireFarmRoshanFieldNumber = 11,
    kExecutionTimeFieldNumber = 12,
  };
  // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
  int bots_size() const;
  private:
  int _internal_bots_size() const;
  public:
  void clear_bots();
  ::CMsgDOTABotDebugInfo_Bot* mutable_bots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >*
      mutable_bots();
  private:
  const ::CMsgDOTABotDebugInfo_Bot& _internal_bots(int index) const;
  ::CMsgDOTABotDebugInfo_Bot* _internal_add_bots();
  public:
  const ::CMsgDOTABotDebugInfo_Bot& bots(int index) const;
  ::CMsgDOTABotDebugInfo_Bot* add_bots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >&
      bots() const;

  // repeated uint32 rune_status = 13;
  int rune_status_size() const;
  private:
  int _internal_rune_status_size() const;
  public:
  void clear_rune_status();
  private:
  uint32_t _internal_rune_status(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rune_status() const;
  void _internal_add_rune_status(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rune_status();
  public:
  uint32_t rune_status(int index) const;
  void set_rune_status(int index, uint32_t value);
  void add_rune_status(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rune_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rune_status();

  // optional float desire_push_lane_top = 2;
  bool has_desire_push_lane_top() const;
  private:
  bool _internal_has_desire_push_lane_top() const;
  public:
  void clear_desire_push_lane_top();
  float desire_push_lane_top() const;
  void set_desire_push_lane_top(float value);
  private:
  float _internal_desire_push_lane_top() const;
  void _internal_set_desire_push_lane_top(float value);
  public:

  // optional float desire_push_lane_mid = 3;
  bool has_desire_push_lane_mid() const;
  private:
  bool _internal_has_desire_push_lane_mid() const;
  public:
  void clear_desire_push_lane_mid();
  float desire_push_lane_mid() const;
  void set_desire_push_lane_mid(float value);
  private:
  float _internal_desire_push_lane_mid() const;
  void _internal_set_desire_push_lane_mid(float value);
  public:

  // optional float desire_push_lane_bot = 4;
  bool has_desire_push_lane_bot() const;
  private:
  bool _internal_has_desire_push_lane_bot() const;
  public:
  void clear_desire_push_lane_bot();
  float desire_push_lane_bot() const;
  void set_desire_push_lane_bot(float value);
  private:
  float _internal_desire_push_lane_bot() const;
  void _internal_set_desire_push_lane_bot(float value);
  public:

  // optional float desire_defend_lane_top = 5;
  bool has_desire_defend_lane_top() const;
  private:
  bool _internal_has_desire_defend_lane_top() const;
  public:
  void clear_desire_defend_lane_top();
  float desire_defend_lane_top() const;
  void set_desire_defend_lane_top(float value);
  private:
  float _internal_desire_defend_lane_top() const;
  void _internal_set_desire_defend_lane_top(float value);
  public:

  // optional float desire_defend_lane_mid = 6;
  bool has_desire_defend_lane_mid() const;
  private:
  bool _internal_has_desire_defend_lane_mid() const;
  public:
  void clear_desire_defend_lane_mid();
  float desire_defend_lane_mid() const;
  void set_desire_defend_lane_mid(float value);
  private:
  float _internal_desire_defend_lane_mid() const;
  void _internal_set_desire_defend_lane_mid(float value);
  public:

  // optional float desire_defend_lane_bot = 7;
  bool has_desire_defend_lane_bot() const;
  private:
  bool _internal_has_desire_defend_lane_bot() const;
  public:
  void clear_desire_defend_lane_bot();
  float desire_defend_lane_bot() const;
  void set_desire_defend_lane_bot(float value);
  private:
  float _internal_desire_defend_lane_bot() const;
  void _internal_set_desire_defend_lane_bot(float value);
  public:

  // optional float desire_farm_lane_top = 8;
  bool has_desire_farm_lane_top() const;
  private:
  bool _internal_has_desire_farm_lane_top() const;
  public:
  void clear_desire_farm_lane_top();
  float desire_farm_lane_top() const;
  void set_desire_farm_lane_top(float value);
  private:
  float _internal_desire_farm_lane_top() const;
  void _internal_set_desire_farm_lane_top(float value);
  public:

  // optional float desire_farm_lane_mid = 9;
  bool has_desire_farm_lane_mid() const;
  private:
  bool _internal_has_desire_farm_lane_mid() const;
  public:
  void clear_desire_farm_lane_mid();
  float desire_farm_lane_mid() const;
  void set_desire_farm_lane_mid(float value);
  private:
  float _internal_desire_farm_lane_mid() const;
  void _internal_set_desire_farm_lane_mid(float value);
  public:

  // optional float desire_farm_lane_bot = 10;
  bool has_desire_farm_lane_bot() const;
  private:
  bool _internal_has_desire_farm_lane_bot() const;
  public:
  void clear_desire_farm_lane_bot();
  float desire_farm_lane_bot() const;
  void set_desire_farm_lane_bot(float value);
  private:
  float _internal_desire_farm_lane_bot() const;
  void _internal_set_desire_farm_lane_bot(float value);
  public:

  // optional float desire_farm_roshan = 11;
  bool has_desire_farm_roshan() const;
  private:
  bool _internal_has_desire_farm_roshan() const;
  public:
  void clear_desire_farm_roshan();
  float desire_farm_roshan() const;
  void set_desire_farm_roshan(float value);
  private:
  float _internal_desire_farm_roshan() const;
  void _internal_set_desire_farm_roshan(float value);
  public:

  // optional float execution_time = 12;
  bool has_execution_time() const;
  private:
  bool _internal_has_execution_time() const;
  public:
  void clear_execution_time();
  float execution_time() const;
  void set_execution_time(float value);
  private:
  float _internal_execution_time() const;
  void _internal_set_execution_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTABotDebugInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot > bots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rune_status_;
    float desire_push_lane_top_;
    float desire_push_lane_mid_;
    float desire_push_lane_bot_;
    float desire_defend_lane_top_;
    float desire_defend_lane_mid_;
    float desire_defend_lane_bot_;
    float desire_farm_lane_top_;
    float desire_farm_lane_mid_;
    float desire_farm_lane_bot_;
    float desire_farm_roshan_;
    float execution_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgSuccessfulHero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSuccessfulHero) */ {
 public:
  inline CMsgSuccessfulHero() : CMsgSuccessfulHero(nullptr) {}
  ~CMsgSuccessfulHero() override;
  explicit PROTOBUF_CONSTEXPR CMsgSuccessfulHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSuccessfulHero(const CMsgSuccessfulHero& from);
  CMsgSuccessfulHero(CMsgSuccessfulHero&& from) noexcept
    : CMsgSuccessfulHero() {
    *this = ::std::move(from);
  }

  inline CMsgSuccessfulHero& operator=(const CMsgSuccessfulHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSuccessfulHero& operator=(CMsgSuccessfulHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSuccessfulHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSuccessfulHero* internal_default_instance() {
    return reinterpret_cast<const CMsgSuccessfulHero*>(
               &_CMsgSuccessfulHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CMsgSuccessfulHero& a, CMsgSuccessfulHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSuccessfulHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSuccessfulHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSuccessfulHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSuccessfulHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSuccessfulHero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSuccessfulHero& from) {
    CMsgSuccessfulHero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSuccessfulHero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSuccessfulHero";
  }
  protected:
  explicit CMsgSuccessfulHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kWinPercentFieldNumber = 2,
    kLongestStreakFieldNumber = 3,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional float win_percent = 2;
  bool has_win_percent() const;
  private:
  bool _internal_has_win_percent() const;
  public:
  void clear_win_percent();
  float win_percent() const;
  void set_win_percent(float value);
  private:
  float _internal_win_percent() const;
  void _internal_set_win_percent(float value);
  public:

  // optional uint32 longest_streak = 3;
  bool has_longest_streak() const;
  private:
  bool _internal_has_longest_streak() const;
  public:
  void clear_longest_streak();
  uint32_t longest_streak() const;
  void set_longest_streak(uint32_t value);
  private:
  uint32_t _internal_longest_streak() const;
  void _internal_set_longest_streak(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSuccessfulHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    float win_percent_;
    uint32_t longest_streak_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgRecentMatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRecentMatchInfo) */ {
 public:
  inline CMsgRecentMatchInfo() : CMsgRecentMatchInfo(nullptr) {}
  ~CMsgRecentMatchInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRecentMatchInfo(const CMsgRecentMatchInfo& from);
  CMsgRecentMatchInfo(CMsgRecentMatchInfo&& from) noexcept
    : CMsgRecentMatchInfo() {
    *this = ::std::move(from);
  }

  inline CMsgRecentMatchInfo& operator=(const CMsgRecentMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRecentMatchInfo& operator=(CMsgRecentMatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgRecentMatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRecentMatchInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgRecentMatchInfo*>(
               &_CMsgRecentMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CMsgRecentMatchInfo& a, CMsgRecentMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRecentMatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRecentMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgRecentMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgRecentMatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgRecentMatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgRecentMatchInfo& from) {
    CMsgRecentMatchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRecentMatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRecentMatchInfo";
  }
  protected:
  explicit CMsgRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kGameModeFieldNumber = 2,
    kKillsFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kAssistsFieldNumber = 5,
    kDurationFieldNumber = 6,
    kPlayerSlotFieldNumber = 7,
    kMatchOutcomeFieldNumber = 8,
    kTimestampFieldNumber = 9,
    kLobbyTypeFieldNumber = 10,
    kTeamNumberFieldNumber = 11,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // optional uint32 kills = 3;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 5;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 duration = 6;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional uint32 player_slot = 7;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  private:
  bool _internal_has_match_outcome() const;
  public:
  void clear_match_outcome();
  ::EMatchOutcome match_outcome() const;
  void set_match_outcome(::EMatchOutcome value);
  private:
  ::EMatchOutcome _internal_match_outcome() const;
  void _internal_set_match_outcome(::EMatchOutcome value);
  public:

  // optional uint32 timestamp = 9;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 lobby_type = 10;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // optional uint32 team_number = 11;
  bool has_team_number() const;
  private:
  bool _internal_has_team_number() const;
  public:
  void clear_team_number();
  uint32_t team_number() const;
  void set_team_number(uint32_t value);
  private:
  uint32_t _internal_team_number() const;
  void _internal_set_team_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRecentMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    int game_mode_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t duration_;
    uint32_t player_slot_;
    int match_outcome_;
    uint32_t timestamp_;
    uint32_t lobby_type_;
    uint32_t team_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchTips_SingleTip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchTips.SingleTip) */ {
 public:
  inline CMsgMatchTips_SingleTip() : CMsgMatchTips_SingleTip(nullptr) {}
  ~CMsgMatchTips_SingleTip() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchTips_SingleTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchTips_SingleTip(const CMsgMatchTips_SingleTip& from);
  CMsgMatchTips_SingleTip(CMsgMatchTips_SingleTip&& from) noexcept
    : CMsgMatchTips_SingleTip() {
    *this = ::std::move(from);
  }

  inline CMsgMatchTips_SingleTip& operator=(const CMsgMatchTips_SingleTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchTips_SingleTip& operator=(CMsgMatchTips_SingleTip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchTips_SingleTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchTips_SingleTip* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchTips_SingleTip*>(
               &_CMsgMatchTips_SingleTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CMsgMatchTips_SingleTip& a, CMsgMatchTips_SingleTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchTips_SingleTip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchTips_SingleTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchTips_SingleTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchTips_SingleTip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchTips_SingleTip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchTips_SingleTip& from) {
    CMsgMatchTips_SingleTip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchTips_SingleTip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchTips.SingleTip";
  }
  protected:
  explicit CMsgMatchTips_SingleTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceAccountIdFieldNumber = 1,
    kTargetAccountIdFieldNumber = 2,
    kTipAmountFieldNumber = 3,
    kEventIdFieldNumber = 4,
  };
  // optional uint32 source_account_id = 1;
  bool has_source_account_id() const;
  private:
  bool _internal_has_source_account_id() const;
  public:
  void clear_source_account_id();
  uint32_t source_account_id() const;
  void set_source_account_id(uint32_t value);
  private:
  uint32_t _internal_source_account_id() const;
  void _internal_set_source_account_id(uint32_t value);
  public:

  // optional uint32 target_account_id = 2;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // optional uint32 tip_amount = 3;
  bool has_tip_amount() const;
  private:
  bool _internal_has_tip_amount() const;
  public:
  void clear_tip_amount();
  uint32_t tip_amount() const;
  void set_tip_amount(uint32_t value);
  private:
  uint32_t _internal_tip_amount() const;
  void _internal_set_tip_amount(uint32_t value);
  public:

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchTips.SingleTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t source_account_id_;
    uint32_t target_account_id_;
    uint32_t tip_amount_;
    int event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchTips final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchTips) */ {
 public:
  inline CMsgMatchTips() : CMsgMatchTips(nullptr) {}
  ~CMsgMatchTips() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchTips(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchTips(const CMsgMatchTips& from);
  CMsgMatchTips(CMsgMatchTips&& from) noexcept
    : CMsgMatchTips() {
    *this = ::std::move(from);
  }

  inline CMsgMatchTips& operator=(const CMsgMatchTips& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchTips& operator=(CMsgMatchTips&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchTips& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchTips* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchTips*>(
               &_CMsgMatchTips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CMsgMatchTips& a, CMsgMatchTips& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchTips* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchTips* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchTips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchTips>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchTips& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchTips& from) {
    CMsgMatchTips::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchTips* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchTips";
  }
  protected:
  explicit CMsgMatchTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMatchTips_SingleTip SingleTip;

  // accessors -------------------------------------------------------

  enum : int {
    kTipsFieldNumber = 2,
  };
  // repeated .CMsgMatchTips.SingleTip tips = 2;
  int tips_size() const;
  private:
  int _internal_tips_size() const;
  public:
  void clear_tips();
  ::CMsgMatchTips_SingleTip* mutable_tips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >*
      mutable_tips();
  private:
  const ::CMsgMatchTips_SingleTip& _internal_tips(int index) const;
  ::CMsgMatchTips_SingleTip* _internal_add_tips();
  public:
  const ::CMsgMatchTips_SingleTip& tips(int index) const;
  ::CMsgMatchTips_SingleTip* add_tips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >&
      tips() const;

  // @@protoc_insertion_point(class_scope:CMsgMatchTips)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip > tips_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchMinimal.Player) */ {
 public:
  inline CMsgDOTAMatchMinimal_Player() : CMsgDOTAMatchMinimal_Player(nullptr) {}
  ~CMsgDOTAMatchMinimal_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatchMinimal_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from);
  CMsgDOTAMatchMinimal_Player(CMsgDOTAMatchMinimal_Player&& from) noexcept
    : CMsgDOTAMatchMinimal_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchMinimal_Player& operator=(const CMsgDOTAMatchMinimal_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatchMinimal_Player& operator=(CMsgDOTAMatchMinimal_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatchMinimal_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatchMinimal_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal_Player*>(
               &_CMsgDOTAMatchMinimal_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CMsgDOTAMatchMinimal_Player& a, CMsgDOTAMatchMinimal_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatchMinimal_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatchMinimal_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatchMinimal_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatchMinimal_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatchMinimal_Player& from) {
    CMsgDOTAMatchMinimal_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatchMinimal_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatchMinimal.Player";
  }
  protected:
  explicit CMsgDOTAMatchMinimal_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 6,
    kProNameFieldNumber = 8,
    kAccountIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kKillsFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kAssistsFieldNumber = 5,
    kPlayerSlotFieldNumber = 7,
    kLevelFieldNumber = 9,
    kTeamNumberFieldNumber = 10,
  };
  // repeated int32 items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  int32_t _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items() const;
  void _internal_add_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items();
  public:
  int32_t items(int index) const;
  void set_items(int index, int32_t value);
  void add_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items();

  // optional string pro_name = 8;
  bool has_pro_name() const;
  private:
  bool _internal_has_pro_name() const;
  public:
  void clear_pro_name();
  const std::string& pro_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pro_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pro_name();
  PROTOBUF_NODISCARD std::string* release_pro_name();
  void set_allocated_pro_name(std::string* pro_name);
  private:
  const std::string& _internal_pro_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pro_name(const std::string& value);
  std::string* _internal_mutable_pro_name();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 kills = 3;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 5;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 player_slot = 7;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 level = 9;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional .DOTA_GC_TEAM team_number = 10 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team_number() const;
  private:
  bool _internal_has_team_number() const;
  public:
  void clear_team_number();
  ::DOTA_GC_TEAM team_number() const;
  void set_team_number(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team_number() const;
  void _internal_set_team_number(::DOTA_GC_TEAM value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchMinimal.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_name_;
    uint32_t account_id_;
    uint32_t hero_id_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t player_slot_;
    uint32_t level_;
    int team_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Tourney final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchMinimal.Tourney) */ {
 public:
  inline CMsgDOTAMatchMinimal_Tourney() : CMsgDOTAMatchMinimal_Tourney(nullptr) {}
  ~CMsgDOTAMatchMinimal_Tourney() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatchMinimal_Tourney(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from);
  CMsgDOTAMatchMinimal_Tourney(CMsgDOTAMatchMinimal_Tourney&& from) noexcept
    : CMsgDOTAMatchMinimal_Tourney() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchMinimal_Tourney& operator=(const CMsgDOTAMatchMinimal_Tourney& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatchMinimal_Tourney& operator=(CMsgDOTAMatchMinimal_Tourney&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatchMinimal_Tourney& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatchMinimal_Tourney* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal_Tourney*>(
               &_CMsgDOTAMatchMinimal_Tourney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CMsgDOTAMatchMinimal_Tourney& a, CMsgDOTAMatchMinimal_Tourney& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatchMinimal_Tourney* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatchMinimal_Tourney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatchMinimal_Tourney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal_Tourney>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatchMinimal_Tourney& from) {
    CMsgDOTAMatchMinimal_Tourney::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatchMinimal_Tourney* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatchMinimal.Tourney";
  }
  protected:
  explicit CMsgDOTAMatchMinimal_Tourney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiantTeamNameFieldNumber = 3,
    kDireTeamNameFieldNumber = 6,
    kRadiantTeamLogoUrlFieldNumber = 14,
    kDireTeamLogoUrlFieldNumber = 15,
    kLeagueIdFieldNumber = 1,
    kRadiantTeamIdFieldNumber = 2,
    kRadiantTeamLogoFieldNumber = 4,
    kDireTeamIdFieldNumber = 5,
    kSeriesTypeFieldNumber = 8,
    kDireTeamLogoFieldNumber = 7,
    kSeriesGameFieldNumber = 9,
    kWeekendTourneyTournamentIdFieldNumber = 10,
    kWeekendTourneySeasonTrophyIdFieldNumber = 11,
    kWeekendTourneyDivisionFieldNumber = 12,
    kWeekendTourneySkillLevelFieldNumber = 13,
  };
  // optional string radiant_team_name = 3;
  bool has_radiant_team_name() const;
  private:
  bool _internal_has_radiant_team_name() const;
  public:
  void clear_radiant_team_name();
  const std::string& radiant_team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_radiant_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_radiant_team_name();
  PROTOBUF_NODISCARD std::string* release_radiant_team_name();
  void set_allocated_radiant_team_name(std::string* radiant_team_name);
  private:
  const std::string& _internal_radiant_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_radiant_team_name(const std::string& value);
  std::string* _internal_mutable_radiant_team_name();
  public:

  // optional string dire_team_name = 6;
  bool has_dire_team_name() const;
  private:
  bool _internal_has_dire_team_name() const;
  public:
  void clear_dire_team_name();
  const std::string& dire_team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dire_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dire_team_name();
  PROTOBUF_NODISCARD std::string* release_dire_team_name();
  void set_allocated_dire_team_name(std::string* dire_team_name);
  private:
  const std::string& _internal_dire_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dire_team_name(const std::string& value);
  std::string* _internal_mutable_dire_team_name();
  public:

  // optional string radiant_team_logo_url = 14;
  bool has_radiant_team_logo_url() const;
  private:
  bool _internal_has_radiant_team_logo_url() const;
  public:
  void clear_radiant_team_logo_url();
  const std::string& radiant_team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_radiant_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_radiant_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_radiant_team_logo_url();
  void set_allocated_radiant_team_logo_url(std::string* radiant_team_logo_url);
  private:
  const std::string& _internal_radiant_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_radiant_team_logo_url(const std::string& value);
  std::string* _internal_mutable_radiant_team_logo_url();
  public:

  // optional string dire_team_logo_url = 15;
  bool has_dire_team_logo_url() const;
  private:
  bool _internal_has_dire_team_logo_url() const;
  public:
  void clear_dire_team_logo_url();
  const std::string& dire_team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dire_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dire_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_dire_team_logo_url();
  void set_allocated_dire_team_logo_url(std::string* dire_team_logo_url);
  private:
  const std::string& _internal_dire_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dire_team_logo_url(const std::string& value);
  std::string* _internal_mutable_dire_team_logo_url();
  public:

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 radiant_team_id = 2;
  bool has_radiant_team_id() const;
  private:
  bool _internal_has_radiant_team_id() const;
  public:
  void clear_radiant_team_id();
  uint32_t radiant_team_id() const;
  void set_radiant_team_id(uint32_t value);
  private:
  uint32_t _internal_radiant_team_id() const;
  void _internal_set_radiant_team_id(uint32_t value);
  public:

  // optional fixed64 radiant_team_logo = 4;
  bool has_radiant_team_logo() const;
  private:
  bool _internal_has_radiant_team_logo() const;
  public:
  void clear_radiant_team_logo();
  uint64_t radiant_team_logo() const;
  void set_radiant_team_logo(uint64_t value);
  private:
  uint64_t _internal_radiant_team_logo() const;
  void _internal_set_radiant_team_logo(uint64_t value);
  public:

  // optional uint32 dire_team_id = 5;
  bool has_dire_team_id() const;
  private:
  bool _internal_has_dire_team_id() const;
  public:
  void clear_dire_team_id();
  uint32_t dire_team_id() const;
  void set_dire_team_id(uint32_t value);
  private:
  uint32_t _internal_dire_team_id() const;
  void _internal_set_dire_team_id(uint32_t value);
  public:

  // optional uint32 series_type = 8;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  uint32_t series_type() const;
  void set_series_type(uint32_t value);
  private:
  uint32_t _internal_series_type() const;
  void _internal_set_series_type(uint32_t value);
  public:

  // optional fixed64 dire_team_logo = 7;
  bool has_dire_team_logo() const;
  private:
  bool _internal_has_dire_team_logo() const;
  public:
  void clear_dire_team_logo();
  uint64_t dire_team_logo() const;
  void set_dire_team_logo(uint64_t value);
  private:
  uint64_t _internal_dire_team_logo() const;
  void _internal_set_dire_team_logo(uint64_t value);
  public:

  // optional uint32 series_game = 9;
  bool has_series_game() const;
  private:
  bool _internal_has_series_game() const;
  public:
  void clear_series_game();
  uint32_t series_game() const;
  void set_series_game(uint32_t value);
  private:
  uint32_t _internal_series_game() const;
  void _internal_set_series_game(uint32_t value);
  public:

  // optional uint32 weekend_tourney_tournament_id = 10;
  bool has_weekend_tourney_tournament_id() const;
  private:
  bool _internal_has_weekend_tourney_tournament_id() const;
  public:
  void clear_weekend_tourney_tournament_id();
  uint32_t weekend_tourney_tournament_id() const;
  void set_weekend_tourney_tournament_id(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_tournament_id() const;
  void _internal_set_weekend_tourney_tournament_id(uint32_t value);
  public:

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  bool has_weekend_tourney_season_trophy_id() const;
  private:
  bool _internal_has_weekend_tourney_season_trophy_id() const;
  public:
  void clear_weekend_tourney_season_trophy_id();
  uint32_t weekend_tourney_season_trophy_id() const;
  void set_weekend_tourney_season_trophy_id(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_season_trophy_id() const;
  void _internal_set_weekend_tourney_season_trophy_id(uint32_t value);
  public:

  // optional uint32 weekend_tourney_division = 12;
  bool has_weekend_tourney_division() const;
  private:
  bool _internal_has_weekend_tourney_division() const;
  public:
  void clear_weekend_tourney_division();
  uint32_t weekend_tourney_division() const;
  void set_weekend_tourney_division(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_division() const;
  void _internal_set_weekend_tourney_division(uint32_t value);
  public:

  // optional uint32 weekend_tourney_skill_level = 13;
  bool has_weekend_tourney_skill_level() const;
  private:
  bool _internal_has_weekend_tourney_skill_level() const;
  public:
  void clear_weekend_tourney_skill_level();
  uint32_t weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_skill_level() const;
  void _internal_set_weekend_tourney_skill_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchMinimal.Tourney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radiant_team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dire_team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radiant_team_logo_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dire_team_logo_url_;
    uint32_t league_id_;
    uint32_t radiant_team_id_;
    uint64_t radiant_team_logo_;
    uint32_t dire_team_id_;
    uint32_t series_type_;
    uint64_t dire_team_logo_;
    uint32_t series_game_;
    uint32_t weekend_tourney_tournament_id_;
    uint32_t weekend_tourney_season_trophy_id_;
    uint32_t weekend_tourney_division_;
    uint32_t weekend_tourney_skill_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAMatchMinimal) */ {
 public:
  inline CMsgDOTAMatchMinimal() : CMsgDOTAMatchMinimal(nullptr) {}
  ~CMsgDOTAMatchMinimal() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAMatchMinimal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from);
  CMsgDOTAMatchMinimal(CMsgDOTAMatchMinimal&& from) noexcept
    : CMsgDOTAMatchMinimal() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAMatchMinimal& operator=(const CMsgDOTAMatchMinimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAMatchMinimal& operator=(CMsgDOTAMatchMinimal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAMatchMinimal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAMatchMinimal* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal*>(
               &_CMsgDOTAMatchMinimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CMsgDOTAMatchMinimal& a, CMsgDOTAMatchMinimal& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAMatchMinimal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAMatchMinimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAMatchMinimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAMatchMinimal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAMatchMinimal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAMatchMinimal& from) {
    CMsgDOTAMatchMinimal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAMatchMinimal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAMatchMinimal";
  }
  protected:
  explicit CMsgDOTAMatchMinimal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatchMinimal_Player Player;
  typedef CMsgDOTAMatchMinimal_Tourney Tourney;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 6,
    kTourneyFieldNumber = 7,
    kMatchIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kDurationFieldNumber = 3,
    kGameModeFieldNumber = 4,
    kMatchOutcomeFieldNumber = 8,
    kRadiantScoreFieldNumber = 9,
    kDireScoreFieldNumber = 10,
    kLobbyTypeFieldNumber = 11,
  };
  // repeated .CMsgDOTAMatchMinimal.Player players = 6;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgDOTAMatchMinimal_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >*
      mutable_players();
  private:
  const ::CMsgDOTAMatchMinimal_Player& _internal_players(int index) const;
  ::CMsgDOTAMatchMinimal_Player* _internal_add_players();
  public:
  const ::CMsgDOTAMatchMinimal_Player& players(int index) const;
  ::CMsgDOTAMatchMinimal_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >&
      players() const;

  // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
  bool has_tourney() const;
  private:
  bool _internal_has_tourney() const;
  public:
  void clear_tourney();
  const ::CMsgDOTAMatchMinimal_Tourney& tourney() const;
  PROTOBUF_NODISCARD ::CMsgDOTAMatchMinimal_Tourney* release_tourney();
  ::CMsgDOTAMatchMinimal_Tourney* mutable_tourney();
  void set_allocated_tourney(::CMsgDOTAMatchMinimal_Tourney* tourney);
  private:
  const ::CMsgDOTAMatchMinimal_Tourney& _internal_tourney() const;
  ::CMsgDOTAMatchMinimal_Tourney* _internal_mutable_tourney();
  public:
  void unsafe_arena_set_allocated_tourney(
      ::CMsgDOTAMatchMinimal_Tourney* tourney);
  ::CMsgDOTAMatchMinimal_Tourney* unsafe_arena_release_tourney();

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional fixed32 start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  private:
  bool _internal_has_match_outcome() const;
  public:
  void clear_match_outcome();
  ::EMatchOutcome match_outcome() const;
  void set_match_outcome(::EMatchOutcome value);
  private:
  ::EMatchOutcome _internal_match_outcome() const;
  void _internal_set_match_outcome(::EMatchOutcome value);
  public:

  // optional uint32 radiant_score = 9;
  bool has_radiant_score() const;
  private:
  bool _internal_has_radiant_score() const;
  public:
  void clear_radiant_score();
  uint32_t radiant_score() const;
  void set_radiant_score(uint32_t value);
  private:
  uint32_t _internal_radiant_score() const;
  void _internal_set_radiant_score(uint32_t value);
  public:

  // optional uint32 dire_score = 10;
  bool has_dire_score() const;
  private:
  bool _internal_has_dire_score() const;
  public:
  void clear_dire_score();
  uint32_t dire_score() const;
  void set_dire_score(uint32_t value);
  private:
  uint32_t _internal_dire_score() const;
  void _internal_set_dire_score(uint32_t value);
  public:

  // optional uint32 lobby_type = 11;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchMinimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player > players_;
    ::CMsgDOTAMatchMinimal_Tourney* tourney_;
    uint64_t match_id_;
    uint32_t start_time_;
    uint32_t duration_;
    int game_mode_;
    int match_outcome_;
    uint32_t radiant_score_;
    uint32_t dire_score_;
    uint32_t lobby_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgConsumableUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgConsumableUsage) */ {
 public:
  inline CMsgConsumableUsage() : CMsgConsumableUsage(nullptr) {}
  ~CMsgConsumableUsage() override;
  explicit PROTOBUF_CONSTEXPR CMsgConsumableUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgConsumableUsage(const CMsgConsumableUsage& from);
  CMsgConsumableUsage(CMsgConsumableUsage&& from) noexcept
    : CMsgConsumableUsage() {
    *this = ::std::move(from);
  }

  inline CMsgConsumableUsage& operator=(const CMsgConsumableUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgConsumableUsage& operator=(CMsgConsumableUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgConsumableUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgConsumableUsage* internal_default_instance() {
    return reinterpret_cast<const CMsgConsumableUsage*>(
               &_CMsgConsumableUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CMsgConsumableUsage& a, CMsgConsumableUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgConsumableUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgConsumableUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgConsumableUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgConsumableUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgConsumableUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgConsumableUsage& from) {
    CMsgConsumableUsage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgConsumableUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgConsumableUsage";
  }
  protected:
  explicit CMsgConsumableUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefFieldNumber = 1,
    kQuantityChangeFieldNumber = 2,
  };
  // optional uint32 item_def = 1;
  bool has_item_def() const;
  private:
  bool _internal_has_item_def() const;
  public:
  void clear_item_def();
  uint32_t item_def() const;
  void set_item_def(uint32_t value);
  private:
  uint32_t _internal_item_def() const;
  void _internal_set_item_def(uint32_t value);
  public:

  // optional int32 quantity_change = 2;
  bool has_quantity_change() const;
  private:
  bool _internal_has_quantity_change() const;
  public:
  void clear_quantity_change();
  int32_t quantity_change() const;
  void set_quantity_change(int32_t value);
  private:
  int32_t _internal_quantity_change() const;
  void _internal_set_quantity_change(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgConsumableUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t item_def_;
    int32_t quantity_change_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchConsumableUsage_PlayerUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchConsumableUsage.PlayerUsage) */ {
 public:
  inline CMsgMatchConsumableUsage_PlayerUsage() : CMsgMatchConsumableUsage_PlayerUsage(nullptr) {}
  ~CMsgMatchConsumableUsage_PlayerUsage() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchConsumableUsage_PlayerUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchConsumableUsage_PlayerUsage(const CMsgMatchConsumableUsage_PlayerUsage& from);
  CMsgMatchConsumableUsage_PlayerUsage(CMsgMatchConsumableUsage_PlayerUsage&& from) noexcept
    : CMsgMatchConsumableUsage_PlayerUsage() {
    *this = ::std::move(from);
  }

  inline CMsgMatchConsumableUsage_PlayerUsage& operator=(const CMsgMatchConsumableUsage_PlayerUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchConsumableUsage_PlayerUsage& operator=(CMsgMatchConsumableUsage_PlayerUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchConsumableUsage_PlayerUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchConsumableUsage_PlayerUsage* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchConsumableUsage_PlayerUsage*>(
               &_CMsgMatchConsumableUsage_PlayerUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CMsgMatchConsumableUsage_PlayerUsage& a, CMsgMatchConsumableUsage_PlayerUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchConsumableUsage_PlayerUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchConsumableUsage_PlayerUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchConsumableUsage_PlayerUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchConsumableUsage_PlayerUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchConsumableUsage_PlayerUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchConsumableUsage_PlayerUsage& from) {
    CMsgMatchConsumableUsage_PlayerUsage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchConsumableUsage_PlayerUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchConsumableUsage.PlayerUsage";
  }
  protected:
  explicit CMsgMatchConsumableUsage_PlayerUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumablesUsedFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // repeated .CMsgConsumableUsage consumables_used = 2;
  int consumables_used_size() const;
  private:
  int _internal_consumables_used_size() const;
  public:
  void clear_consumables_used();
  ::CMsgConsumableUsage* mutable_consumables_used(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConsumableUsage >*
      mutable_consumables_used();
  private:
  const ::CMsgConsumableUsage& _internal_consumables_used(int index) const;
  ::CMsgConsumableUsage* _internal_add_consumables_used();
  public:
  const ::CMsgConsumableUsage& consumables_used(int index) const;
  ::CMsgConsumableUsage* add_consumables_used();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConsumableUsage >&
      consumables_used() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchConsumableUsage.PlayerUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConsumableUsage > consumables_used_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchConsumableUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchConsumableUsage) */ {
 public:
  inline CMsgMatchConsumableUsage() : CMsgMatchConsumableUsage(nullptr) {}
  ~CMsgMatchConsumableUsage() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchConsumableUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchConsumableUsage(const CMsgMatchConsumableUsage& from);
  CMsgMatchConsumableUsage(CMsgMatchConsumableUsage&& from) noexcept
    : CMsgMatchConsumableUsage() {
    *this = ::std::move(from);
  }

  inline CMsgMatchConsumableUsage& operator=(const CMsgMatchConsumableUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchConsumableUsage& operator=(CMsgMatchConsumableUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchConsumableUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchConsumableUsage* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchConsumableUsage*>(
               &_CMsgMatchConsumableUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CMsgMatchConsumableUsage& a, CMsgMatchConsumableUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchConsumableUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchConsumableUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchConsumableUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchConsumableUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchConsumableUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchConsumableUsage& from) {
    CMsgMatchConsumableUsage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchConsumableUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchConsumableUsage";
  }
  protected:
  explicit CMsgMatchConsumableUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMatchConsumableUsage_PlayerUsage PlayerUsage;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerConsumablesUsedFieldNumber = 1,
  };
  // repeated .CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
  int player_consumables_used_size() const;
  private:
  int _internal_player_consumables_used_size() const;
  public:
  void clear_player_consumables_used();
  ::CMsgMatchConsumableUsage_PlayerUsage* mutable_player_consumables_used(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchConsumableUsage_PlayerUsage >*
      mutable_player_consumables_used();
  private:
  const ::CMsgMatchConsumableUsage_PlayerUsage& _internal_player_consumables_used(int index) const;
  ::CMsgMatchConsumableUsage_PlayerUsage* _internal_add_player_consumables_used();
  public:
  const ::CMsgMatchConsumableUsage_PlayerUsage& player_consumables_used(int index) const;
  ::CMsgMatchConsumableUsage_PlayerUsage* add_player_consumables_used();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchConsumableUsage_PlayerUsage >&
      player_consumables_used() const;

  // @@protoc_insertion_point(class_scope:CMsgMatchConsumableUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchConsumableUsage_PlayerUsage > player_consumables_used_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchEventActionGrants_PlayerGrants final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchEventActionGrants.PlayerGrants) */ {
 public:
  inline CMsgMatchEventActionGrants_PlayerGrants() : CMsgMatchEventActionGrants_PlayerGrants(nullptr) {}
  ~CMsgMatchEventActionGrants_PlayerGrants() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchEventActionGrants_PlayerGrants(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchEventActionGrants_PlayerGrants(const CMsgMatchEventActionGrants_PlayerGrants& from);
  CMsgMatchEventActionGrants_PlayerGrants(CMsgMatchEventActionGrants_PlayerGrants&& from) noexcept
    : CMsgMatchEventActionGrants_PlayerGrants() {
    *this = ::std::move(from);
  }

  inline CMsgMatchEventActionGrants_PlayerGrants& operator=(const CMsgMatchEventActionGrants_PlayerGrants& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchEventActionGrants_PlayerGrants& operator=(CMsgMatchEventActionGrants_PlayerGrants&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchEventActionGrants_PlayerGrants& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchEventActionGrants_PlayerGrants* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchEventActionGrants_PlayerGrants*>(
               &_CMsgMatchEventActionGrants_PlayerGrants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CMsgMatchEventActionGrants_PlayerGrants& a, CMsgMatchEventActionGrants_PlayerGrants& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchEventActionGrants_PlayerGrants* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchEventActionGrants_PlayerGrants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchEventActionGrants_PlayerGrants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchEventActionGrants_PlayerGrants>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchEventActionGrants_PlayerGrants& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchEventActionGrants_PlayerGrants& from) {
    CMsgMatchEventActionGrants_PlayerGrants::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchEventActionGrants_PlayerGrants* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchEventActionGrants.PlayerGrants";
  }
  protected:
  explicit CMsgMatchEventActionGrants_PlayerGrants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsGrantedFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // repeated .CMsgPendingEventAward actions_granted = 3;
  int actions_granted_size() const;
  private:
  int _internal_actions_granted_size() const;
  public:
  void clear_actions_granted();
  ::CMsgPendingEventAward* mutable_actions_granted(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
      mutable_actions_granted();
  private:
  const ::CMsgPendingEventAward& _internal_actions_granted(int index) const;
  ::CMsgPendingEventAward* _internal_add_actions_granted();
  public:
  const ::CMsgPendingEventAward& actions_granted(int index) const;
  ::CMsgPendingEventAward* add_actions_granted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
      actions_granted() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchEventActionGrants.PlayerGrants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward > actions_granted_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchEventActionGrants final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchEventActionGrants) */ {
 public:
  inline CMsgMatchEventActionGrants() : CMsgMatchEventActionGrants(nullptr) {}
  ~CMsgMatchEventActionGrants() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchEventActionGrants(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchEventActionGrants(const CMsgMatchEventActionGrants& from);
  CMsgMatchEventActionGrants(CMsgMatchEventActionGrants&& from) noexcept
    : CMsgMatchEventActionGrants() {
    *this = ::std::move(from);
  }

  inline CMsgMatchEventActionGrants& operator=(const CMsgMatchEventActionGrants& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchEventActionGrants& operator=(CMsgMatchEventActionGrants&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchEventActionGrants& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchEventActionGrants* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchEventActionGrants*>(
               &_CMsgMatchEventActionGrants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CMsgMatchEventActionGrants& a, CMsgMatchEventActionGrants& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchEventActionGrants* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchEventActionGrants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchEventActionGrants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchEventActionGrants>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchEventActionGrants& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchEventActionGrants& from) {
    CMsgMatchEventActionGrants::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchEventActionGrants* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchEventActionGrants";
  }
  protected:
  explicit CMsgMatchEventActionGrants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMatchEventActionGrants_PlayerGrants PlayerGrants;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerGrantsFieldNumber = 1,
  };
  // repeated .CMsgMatchEventActionGrants.PlayerGrants player_grants = 1;
  int player_grants_size() const;
  private:
  int _internal_player_grants_size() const;
  public:
  void clear_player_grants();
  ::CMsgMatchEventActionGrants_PlayerGrants* mutable_player_grants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchEventActionGrants_PlayerGrants >*
      mutable_player_grants();
  private:
  const ::CMsgMatchEventActionGrants_PlayerGrants& _internal_player_grants(int index) const;
  ::CMsgMatchEventActionGrants_PlayerGrants* _internal_add_player_grants();
  public:
  const ::CMsgMatchEventActionGrants_PlayerGrants& player_grants(int index) const;
  ::CMsgMatchEventActionGrants_PlayerGrants* add_player_grants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchEventActionGrants_PlayerGrants >&
      player_grants() const;

  // @@protoc_insertion_point(class_scope:CMsgMatchEventActionGrants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchEventActionGrants_PlayerGrants > player_grants_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgCustomGameWhitelist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCustomGameWhitelist) */ {
 public:
  inline CMsgCustomGameWhitelist() : CMsgCustomGameWhitelist(nullptr) {}
  ~CMsgCustomGameWhitelist() override;
  explicit PROTOBUF_CONSTEXPR CMsgCustomGameWhitelist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCustomGameWhitelist(const CMsgCustomGameWhitelist& from);
  CMsgCustomGameWhitelist(CMsgCustomGameWhitelist&& from) noexcept
    : CMsgCustomGameWhitelist() {
    *this = ::std::move(from);
  }

  inline CMsgCustomGameWhitelist& operator=(const CMsgCustomGameWhitelist& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCustomGameWhitelist& operator=(CMsgCustomGameWhitelist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCustomGameWhitelist& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCustomGameWhitelist* internal_default_instance() {
    return reinterpret_cast<const CMsgCustomGameWhitelist*>(
               &_CMsgCustomGameWhitelist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CMsgCustomGameWhitelist& a, CMsgCustomGameWhitelist& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCustomGameWhitelist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCustomGameWhitelist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCustomGameWhitelist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCustomGameWhitelist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCustomGameWhitelist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgCustomGameWhitelist& from) {
    CMsgCustomGameWhitelist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCustomGameWhitelist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCustomGameWhitelist";
  }
  protected:
  explicit CMsgCustomGameWhitelist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomGamesWhitelistFieldNumber = 2,
    kVersionFieldNumber = 1,
    kDisableWhitelistFieldNumber = 3,
  };
  // repeated uint64 custom_games_whitelist = 2;
  int custom_games_whitelist_size() const;
  private:
  int _internal_custom_games_whitelist_size() const;
  public:
  void clear_custom_games_whitelist();
  private:
  uint64_t _internal_custom_games_whitelist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_custom_games_whitelist() const;
  void _internal_add_custom_games_whitelist(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_custom_games_whitelist();
  public:
  uint64_t custom_games_whitelist(int index) const;
  void set_custom_games_whitelist(int index, uint64_t value);
  void add_custom_games_whitelist(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      custom_games_whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_custom_games_whitelist();

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional bool disable_whitelist = 3;
  bool has_disable_whitelist() const;
  private:
  bool _internal_has_disable_whitelist() const;
  public:
  void clear_disable_whitelist();
  bool disable_whitelist() const;
  void set_disable_whitelist(bool value);
  private:
  bool _internal_disable_whitelist() const;
  void _internal_set_disable_whitelist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCustomGameWhitelist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > custom_games_whitelist_;
    uint32_t version_;
    bool disable_whitelist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgCustomGameWhitelistForEdit_WhitelistEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCustomGameWhitelistForEdit.WhitelistEntry) */ {
 public:
  inline CMsgCustomGameWhitelistForEdit_WhitelistEntry() : CMsgCustomGameWhitelistForEdit_WhitelistEntry(nullptr) {}
  ~CMsgCustomGameWhitelistForEdit_WhitelistEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgCustomGameWhitelistForEdit_WhitelistEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCustomGameWhitelistForEdit_WhitelistEntry(const CMsgCustomGameWhitelistForEdit_WhitelistEntry& from);
  CMsgCustomGameWhitelistForEdit_WhitelistEntry(CMsgCustomGameWhitelistForEdit_WhitelistEntry&& from) noexcept
    : CMsgCustomGameWhitelistForEdit_WhitelistEntry() {
    *this = ::std::move(from);
  }

  inline CMsgCustomGameWhitelistForEdit_WhitelistEntry& operator=(const CMsgCustomGameWhitelistForEdit_WhitelistEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCustomGameWhitelistForEdit_WhitelistEntry& operator=(CMsgCustomGameWhitelistForEdit_WhitelistEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCustomGameWhitelistForEdit_WhitelistEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCustomGameWhitelistForEdit_WhitelistEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgCustomGameWhitelistForEdit_WhitelistEntry*>(
               &_CMsgCustomGameWhitelistForEdit_WhitelistEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CMsgCustomGameWhitelistForEdit_WhitelistEntry& a, CMsgCustomGameWhitelistForEdit_WhitelistEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCustomGameWhitelistForEdit_WhitelistEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCustomGameWhitelistForEdit_WhitelistEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCustomGameWhitelistForEdit_WhitelistEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCustomGameWhitelistForEdit_WhitelistEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCustomGameWhitelistForEdit_WhitelistEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgCustomGameWhitelistForEdit_WhitelistEntry& from) {
    CMsgCustomGameWhitelistForEdit_WhitelistEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCustomGameWhitelistForEdit_WhitelistEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCustomGameWhitelistForEdit.WhitelistEntry";
  }
  protected:
  explicit CMsgCustomGameWhitelistForEdit_WhitelistEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomGameIdFieldNumber = 1,
    kWhitelistStateFieldNumber = 2,
  };
  // optional uint64 custom_game_id = 1;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  uint64_t custom_game_id() const;
  void set_custom_game_id(uint64_t value);
  private:
  uint64_t _internal_custom_game_id() const;
  void _internal_set_custom_game_id(uint64_t value);
  public:

  // optional .ECustomGameWhitelistState whitelist_state = 2 [default = CUSTOM_GAME_WHITELIST_STATE_UNKNOWN];
  bool has_whitelist_state() const;
  private:
  bool _internal_has_whitelist_state() const;
  public:
  void clear_whitelist_state();
  ::ECustomGameWhitelistState whitelist_state() const;
  void set_whitelist_state(::ECustomGameWhitelistState value);
  private:
  ::ECustomGameWhitelistState _internal_whitelist_state() const;
  void _internal_set_whitelist_state(::ECustomGameWhitelistState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t custom_game_id_;
    int whitelist_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgCustomGameWhitelistForEdit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCustomGameWhitelistForEdit) */ {
 public:
  inline CMsgCustomGameWhitelistForEdit() : CMsgCustomGameWhitelistForEdit(nullptr) {}
  ~CMsgCustomGameWhitelistForEdit() override;
  explicit PROTOBUF_CONSTEXPR CMsgCustomGameWhitelistForEdit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCustomGameWhitelistForEdit(const CMsgCustomGameWhitelistForEdit& from);
  CMsgCustomGameWhitelistForEdit(CMsgCustomGameWhitelistForEdit&& from) noexcept
    : CMsgCustomGameWhitelistForEdit() {
    *this = ::std::move(from);
  }

  inline CMsgCustomGameWhitelistForEdit& operator=(const CMsgCustomGameWhitelistForEdit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCustomGameWhitelistForEdit& operator=(CMsgCustomGameWhitelistForEdit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCustomGameWhitelistForEdit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCustomGameWhitelistForEdit* internal_default_instance() {
    return reinterpret_cast<const CMsgCustomGameWhitelistForEdit*>(
               &_CMsgCustomGameWhitelistForEdit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CMsgCustomGameWhitelistForEdit& a, CMsgCustomGameWhitelistForEdit& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCustomGameWhitelistForEdit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCustomGameWhitelistForEdit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCustomGameWhitelistForEdit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCustomGameWhitelistForEdit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCustomGameWhitelistForEdit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgCustomGameWhitelistForEdit& from) {
    CMsgCustomGameWhitelistForEdit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCustomGameWhitelistForEdit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCustomGameWhitelistForEdit";
  }
  protected:
  explicit CMsgCustomGameWhitelistForEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgCustomGameWhitelistForEdit_WhitelistEntry WhitelistEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kWhitelistEntriesFieldNumber = 1,
  };
  // repeated .CMsgCustomGameWhitelistForEdit.WhitelistEntry whitelist_entries = 1;
  int whitelist_entries_size() const;
  private:
  int _internal_whitelist_entries_size() const;
  public:
  void clear_whitelist_entries();
  ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* mutable_whitelist_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCustomGameWhitelistForEdit_WhitelistEntry >*
      mutable_whitelist_entries();
  private:
  const ::CMsgCustomGameWhitelistForEdit_WhitelistEntry& _internal_whitelist_entries(int index) const;
  ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* _internal_add_whitelist_entries();
  public:
  const ::CMsgCustomGameWhitelistForEdit_WhitelistEntry& whitelist_entries(int index) const;
  ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* add_whitelist_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCustomGameWhitelistForEdit_WhitelistEntry >&
      whitelist_entries() const;

  // @@protoc_insertion_point(class_scope:CMsgCustomGameWhitelistForEdit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCustomGameWhitelistForEdit_WhitelistEntry > whitelist_entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerRecentMatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerRecentMatchInfo) */ {
 public:
  inline CMsgPlayerRecentMatchInfo() : CMsgPlayerRecentMatchInfo(nullptr) {}
  ~CMsgPlayerRecentMatchInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerRecentMatchInfo(const CMsgPlayerRecentMatchInfo& from);
  CMsgPlayerRecentMatchInfo(CMsgPlayerRecentMatchInfo&& from) noexcept
    : CMsgPlayerRecentMatchInfo() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerRecentMatchInfo& operator=(const CMsgPlayerRecentMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerRecentMatchInfo& operator=(CMsgPlayerRecentMatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerRecentMatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerRecentMatchInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerRecentMatchInfo*>(
               &_CMsgPlayerRecentMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CMsgPlayerRecentMatchInfo& a, CMsgPlayerRecentMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerRecentMatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerRecentMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerRecentMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerRecentMatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerRecentMatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerRecentMatchInfo& from) {
    CMsgPlayerRecentMatchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerRecentMatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerRecentMatchInfo";
  }
  protected:
  explicit CMsgPlayerRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
    kWinFieldNumber = 4,
    kHeroIdFieldNumber = 5,
    kKillsFieldNumber = 6,
    kDeathsFieldNumber = 7,
    kAssistsFieldNumber = 8,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional bool win = 4;
  bool has_win() const;
  private:
  bool _internal_has_win() const;
  public:
  void clear_win();
  bool win() const;
  void set_win(bool value);
  private:
  bool _internal_win() const;
  void _internal_set_win(bool value);
  public:

  // optional uint32 hero_id = 5;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 kills = 6;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 7;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 8;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerRecentMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    uint32_t timestamp_;
    uint32_t duration_;
    bool win_;
    uint32_t hero_id_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerMatchRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerMatchRecord) */ {
 public:
  inline CMsgPlayerMatchRecord() : CMsgPlayerMatchRecord(nullptr) {}
  ~CMsgPlayerMatchRecord() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerMatchRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerMatchRecord(const CMsgPlayerMatchRecord& from);
  CMsgPlayerMatchRecord(CMsgPlayerMatchRecord&& from) noexcept
    : CMsgPlayerMatchRecord() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerMatchRecord& operator=(const CMsgPlayerMatchRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerMatchRecord& operator=(CMsgPlayerMatchRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerMatchRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerMatchRecord* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerMatchRecord*>(
               &_CMsgPlayerMatchRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CMsgPlayerMatchRecord& a, CMsgPlayerMatchRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerMatchRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerMatchRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerMatchRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerMatchRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerMatchRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerMatchRecord& from) {
    CMsgPlayerMatchRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerMatchRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerMatchRecord";
  }
  protected:
  explicit CMsgPlayerMatchRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinsFieldNumber = 1,
    kLossesFieldNumber = 2,
  };
  // optional uint32 wins = 1;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  uint32_t wins() const;
  void set_wins(uint32_t value);
  private:
  uint32_t _internal_wins() const;
  void _internal_set_wins(uint32_t value);
  public:

  // optional uint32 losses = 2;
  bool has_losses() const;
  private:
  bool _internal_has_losses() const;
  public:
  void clear_losses();
  uint32_t losses() const;
  void set_losses(uint32_t value);
  private:
  uint32_t _internal_losses() const;
  void _internal_set_losses(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerMatchRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t wins_;
    uint32_t losses_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerRecentMatchOutcomes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerRecentMatchOutcomes) */ {
 public:
  inline CMsgPlayerRecentMatchOutcomes() : CMsgPlayerRecentMatchOutcomes(nullptr) {}
  ~CMsgPlayerRecentMatchOutcomes() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerRecentMatchOutcomes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerRecentMatchOutcomes(const CMsgPlayerRecentMatchOutcomes& from);
  CMsgPlayerRecentMatchOutcomes(CMsgPlayerRecentMatchOutcomes&& from) noexcept
    : CMsgPlayerRecentMatchOutcomes() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerRecentMatchOutcomes& operator=(const CMsgPlayerRecentMatchOutcomes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerRecentMatchOutcomes& operator=(CMsgPlayerRecentMatchOutcomes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerRecentMatchOutcomes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerRecentMatchOutcomes* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerRecentMatchOutcomes*>(
               &_CMsgPlayerRecentMatchOutcomes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CMsgPlayerRecentMatchOutcomes& a, CMsgPlayerRecentMatchOutcomes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerRecentMatchOutcomes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerRecentMatchOutcomes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerRecentMatchOutcomes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerRecentMatchOutcomes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerRecentMatchOutcomes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerRecentMatchOutcomes& from) {
    CMsgPlayerRecentMatchOutcomes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerRecentMatchOutcomes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerRecentMatchOutcomes";
  }
  protected:
  explicit CMsgPlayerRecentMatchOutcomes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutcomesFieldNumber = 1,
    kMatchCountFieldNumber = 2,
  };
  // optional uint32 outcomes = 1;
  bool has_outcomes() const;
  private:
  bool _internal_has_outcomes() const;
  public:
  void clear_outcomes();
  uint32_t outcomes() const;
  void set_outcomes(uint32_t value);
  private:
  uint32_t _internal_outcomes() const;
  void _internal_set_outcomes(uint32_t value);
  public:

  // optional uint32 match_count = 2;
  bool has_match_count() const;
  private:
  bool _internal_has_match_count() const;
  public:
  void clear_match_count();
  uint32_t match_count() const;
  void set_match_count(uint32_t value);
  private:
  uint32_t _internal_match_count() const;
  void _internal_set_match_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerRecentMatchOutcomes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t outcomes_;
    uint32_t match_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerRecentCommends final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerRecentCommends) */ {
 public:
  inline CMsgPlayerRecentCommends() : CMsgPlayerRecentCommends(nullptr) {}
  ~CMsgPlayerRecentCommends() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerRecentCommends(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerRecentCommends(const CMsgPlayerRecentCommends& from);
  CMsgPlayerRecentCommends(CMsgPlayerRecentCommends&& from) noexcept
    : CMsgPlayerRecentCommends() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerRecentCommends& operator=(const CMsgPlayerRecentCommends& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerRecentCommends& operator=(CMsgPlayerRecentCommends&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerRecentCommends& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerRecentCommends* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerRecentCommends*>(
               &_CMsgPlayerRecentCommends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CMsgPlayerRecentCommends& a, CMsgPlayerRecentCommends& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerRecentCommends* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerRecentCommends* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerRecentCommends* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerRecentCommends>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerRecentCommends& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerRecentCommends& from) {
    CMsgPlayerRecentCommends::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerRecentCommends* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerRecentCommends";
  }
  protected:
  explicit CMsgPlayerRecentCommends(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommendsFieldNumber = 1,
    kMatchCountFieldNumber = 2,
  };
  // optional uint32 commends = 1;
  bool has_commends() const;
  private:
  bool _internal_has_commends() const;
  public:
  void clear_commends();
  uint32_t commends() const;
  void set_commends(uint32_t value);
  private:
  uint32_t _internal_commends() const;
  void _internal_set_commends(uint32_t value);
  public:

  // optional uint32 match_count = 2;
  bool has_match_count() const;
  private:
  bool _internal_has_match_count() const;
  public:
  void clear_match_count();
  uint32_t match_count() const;
  void set_match_count(uint32_t value);
  private:
  uint32_t _internal_match_count() const;
  void _internal_set_match_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerRecentCommends)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t commends_;
    uint32_t match_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerRecentAccomplishments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerRecentAccomplishments) */ {
 public:
  inline CMsgPlayerRecentAccomplishments() : CMsgPlayerRecentAccomplishments(nullptr) {}
  ~CMsgPlayerRecentAccomplishments() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerRecentAccomplishments(const CMsgPlayerRecentAccomplishments& from);
  CMsgPlayerRecentAccomplishments(CMsgPlayerRecentAccomplishments&& from) noexcept
    : CMsgPlayerRecentAccomplishments() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerRecentAccomplishments& operator=(const CMsgPlayerRecentAccomplishments& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerRecentAccomplishments& operator=(CMsgPlayerRecentAccomplishments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerRecentAccomplishments& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerRecentAccomplishments* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerRecentAccomplishments*>(
               &_CMsgPlayerRecentAccomplishments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CMsgPlayerRecentAccomplishments& a, CMsgPlayerRecentAccomplishments& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerRecentAccomplishments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerRecentAccomplishments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerRecentAccomplishments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerRecentAccomplishments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerRecentAccomplishments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerRecentAccomplishments& from) {
    CMsgPlayerRecentAccomplishments::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerRecentAccomplishments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerRecentAccomplishments";
  }
  protected:
  explicit CMsgPlayerRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentOutcomesFieldNumber = 1,
    kTotalRecordFieldNumber = 2,
    kRecentCommendsFieldNumber = 5,
    kLastMatchFieldNumber = 7,
    kRecentMvpsFieldNumber = 8,
    kPredictionStreakFieldNumber = 3,
    kPlusPredictionStreakFieldNumber = 4,
    kFirstMatchTimestampFieldNumber = 6,
  };
  // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
  bool has_recent_outcomes() const;
  private:
  bool _internal_has_recent_outcomes() const;
  public:
  void clear_recent_outcomes();
  const ::CMsgPlayerRecentMatchOutcomes& recent_outcomes() const;
  PROTOBUF_NODISCARD ::CMsgPlayerRecentMatchOutcomes* release_recent_outcomes();
  ::CMsgPlayerRecentMatchOutcomes* mutable_recent_outcomes();
  void set_allocated_recent_outcomes(::CMsgPlayerRecentMatchOutcomes* recent_outcomes);
  private:
  const ::CMsgPlayerRecentMatchOutcomes& _internal_recent_outcomes() const;
  ::CMsgPlayerRecentMatchOutcomes* _internal_mutable_recent_outcomes();
  public:
  void unsafe_arena_set_allocated_recent_outcomes(
      ::CMsgPlayerRecentMatchOutcomes* recent_outcomes);
  ::CMsgPlayerRecentMatchOutcomes* unsafe_arena_release_recent_outcomes();

  // optional .CMsgPlayerMatchRecord total_record = 2;
  bool has_total_record() const;
  private:
  bool _internal_has_total_record() const;
  public:
  void clear_total_record();
  const ::CMsgPlayerMatchRecord& total_record() const;
  PROTOBUF_NODISCARD ::CMsgPlayerMatchRecord* release_total_record();
  ::CMsgPlayerMatchRecord* mutable_total_record();
  void set_allocated_total_record(::CMsgPlayerMatchRecord* total_record);
  private:
  const ::CMsgPlayerMatchRecord& _internal_total_record() const;
  ::CMsgPlayerMatchRecord* _internal_mutable_total_record();
  public:
  void unsafe_arena_set_allocated_total_record(
      ::CMsgPlayerMatchRecord* total_record);
  ::CMsgPlayerMatchRecord* unsafe_arena_release_total_record();

  // optional .CMsgPlayerRecentCommends recent_commends = 5;
  bool has_recent_commends() const;
  private:
  bool _internal_has_recent_commends() const;
  public:
  void clear_recent_commends();
  const ::CMsgPlayerRecentCommends& recent_commends() const;
  PROTOBUF_NODISCARD ::CMsgPlayerRecentCommends* release_recent_commends();
  ::CMsgPlayerRecentCommends* mutable_recent_commends();
  void set_allocated_recent_commends(::CMsgPlayerRecentCommends* recent_commends);
  private:
  const ::CMsgPlayerRecentCommends& _internal_recent_commends() const;
  ::CMsgPlayerRecentCommends* _internal_mutable_recent_commends();
  public:
  void unsafe_arena_set_allocated_recent_commends(
      ::CMsgPlayerRecentCommends* recent_commends);
  ::CMsgPlayerRecentCommends* unsafe_arena_release_recent_commends();

  // optional .CMsgPlayerRecentMatchInfo last_match = 7;
  bool has_last_match() const;
  private:
  bool _internal_has_last_match() const;
  public:
  void clear_last_match();
  const ::CMsgPlayerRecentMatchInfo& last_match() const;
  PROTOBUF_NODISCARD ::CMsgPlayerRecentMatchInfo* release_last_match();
  ::CMsgPlayerRecentMatchInfo* mutable_last_match();
  void set_allocated_last_match(::CMsgPlayerRecentMatchInfo* last_match);
  private:
  const ::CMsgPlayerRecentMatchInfo& _internal_last_match() const;
  ::CMsgPlayerRecentMatchInfo* _internal_mutable_last_match();
  public:
  void unsafe_arena_set_allocated_last_match(
      ::CMsgPlayerRecentMatchInfo* last_match);
  ::CMsgPlayerRecentMatchInfo* unsafe_arena_release_last_match();

  // optional .CMsgPlayerRecentMatchOutcomes recent_mvps = 8;
  bool has_recent_mvps() const;
  private:
  bool _internal_has_recent_mvps() const;
  public:
  void clear_recent_mvps();
  const ::CMsgPlayerRecentMatchOutcomes& recent_mvps() const;
  PROTOBUF_NODISCARD ::CMsgPlayerRecentMatchOutcomes* release_recent_mvps();
  ::CMsgPlayerRecentMatchOutcomes* mutable_recent_mvps();
  void set_allocated_recent_mvps(::CMsgPlayerRecentMatchOutcomes* recent_mvps);
  private:
  const ::CMsgPlayerRecentMatchOutcomes& _internal_recent_mvps() const;
  ::CMsgPlayerRecentMatchOutcomes* _internal_mutable_recent_mvps();
  public:
  void unsafe_arena_set_allocated_recent_mvps(
      ::CMsgPlayerRecentMatchOutcomes* recent_mvps);
  ::CMsgPlayerRecentMatchOutcomes* unsafe_arena_release_recent_mvps();

  // optional uint32 prediction_streak = 3;
  bool has_prediction_streak() const;
  private:
  bool _internal_has_prediction_streak() const;
  public:
  void clear_prediction_streak();
  uint32_t prediction_streak() const;
  void set_prediction_streak(uint32_t value);
  private:
  uint32_t _internal_prediction_streak() const;
  void _internal_set_prediction_streak(uint32_t value);
  public:

  // optional uint32 plus_prediction_streak = 4;
  bool has_plus_prediction_streak() const;
  private:
  bool _internal_has_plus_prediction_streak() const;
  public:
  void clear_plus_prediction_streak();
  uint32_t plus_prediction_streak() const;
  void set_plus_prediction_streak(uint32_t value);
  private:
  uint32_t _internal_plus_prediction_streak() const;
  void _internal_set_plus_prediction_streak(uint32_t value);
  public:

  // optional uint32 first_match_timestamp = 6;
  bool has_first_match_timestamp() const;
  private:
  bool _internal_has_first_match_timestamp() const;
  public:
  void clear_first_match_timestamp();
  uint32_t first_match_timestamp() const;
  void set_first_match_timestamp(uint32_t value);
  private:
  uint32_t _internal_first_match_timestamp() const;
  void _internal_set_first_match_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerRecentAccomplishments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgPlayerRecentMatchOutcomes* recent_outcomes_;
    ::CMsgPlayerMatchRecord* total_record_;
    ::CMsgPlayerRecentCommends* recent_commends_;
    ::CMsgPlayerRecentMatchInfo* last_match_;
    ::CMsgPlayerRecentMatchOutcomes* recent_mvps_;
    uint32_t prediction_streak_;
    uint32_t plus_prediction_streak_;
    uint32_t first_match_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerHeroRecentAccomplishments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerHeroRecentAccomplishments) */ {
 public:
  inline CMsgPlayerHeroRecentAccomplishments() : CMsgPlayerHeroRecentAccomplishments(nullptr) {}
  ~CMsgPlayerHeroRecentAccomplishments() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerHeroRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerHeroRecentAccomplishments(const CMsgPlayerHeroRecentAccomplishments& from);
  CMsgPlayerHeroRecentAccomplishments(CMsgPlayerHeroRecentAccomplishments&& from) noexcept
    : CMsgPlayerHeroRecentAccomplishments() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerHeroRecentAccomplishments& operator=(const CMsgPlayerHeroRecentAccomplishments& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerHeroRecentAccomplishments& operator=(CMsgPlayerHeroRecentAccomplishments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerHeroRecentAccomplishments& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerHeroRecentAccomplishments* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerHeroRecentAccomplishments*>(
               &_CMsgPlayerHeroRecentAccomplishments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CMsgPlayerHeroRecentAccomplishments& a, CMsgPlayerHeroRecentAccomplishments& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerHeroRecentAccomplishments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerHeroRecentAccomplishments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerHeroRecentAccomplishments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerHeroRecentAccomplishments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerHeroRecentAccomplishments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerHeroRecentAccomplishments& from) {
    CMsgPlayerHeroRecentAccomplishments::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerHeroRecentAccomplishments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerHeroRecentAccomplishments";
  }
  protected:
  explicit CMsgPlayerHeroRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentOutcomesFieldNumber = 1,
    kTotalRecordFieldNumber = 2,
    kLastMatchFieldNumber = 3,
  };
  // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
  bool has_recent_outcomes() const;
  private:
  bool _internal_has_recent_outcomes() const;
  public:
  void clear_recent_outcomes();
  const ::CMsgPlayerRecentMatchOutcomes& recent_outcomes() const;
  PROTOBUF_NODISCARD ::CMsgPlayerRecentMatchOutcomes* release_recent_outcomes();
  ::CMsgPlayerRecentMatchOutcomes* mutable_recent_outcomes();
  void set_allocated_recent_outcomes(::CMsgPlayerRecentMatchOutcomes* recent_outcomes);
  private:
  const ::CMsgPlayerRecentMatchOutcomes& _internal_recent_outcomes() const;
  ::CMsgPlayerRecentMatchOutcomes* _internal_mutable_recent_outcomes();
  public:
  void unsafe_arena_set_allocated_recent_outcomes(
      ::CMsgPlayerRecentMatchOutcomes* recent_outcomes);
  ::CMsgPlayerRecentMatchOutcomes* unsafe_arena_release_recent_outcomes();

  // optional .CMsgPlayerMatchRecord total_record = 2;
  bool has_total_record() const;
  private:
  bool _internal_has_total_record() const;
  public:
  void clear_total_record();
  const ::CMsgPlayerMatchRecord& total_record() const;
  PROTOBUF_NODISCARD ::CMsgPlayerMatchRecord* release_total_record();
  ::CMsgPlayerMatchRecord* mutable_total_record();
  void set_allocated_total_record(::CMsgPlayerMatchRecord* total_record);
  private:
  const ::CMsgPlayerMatchRecord& _internal_total_record() const;
  ::CMsgPlayerMatchRecord* _internal_mutable_total_record();
  public:
  void unsafe_arena_set_allocated_total_record(
      ::CMsgPlayerMatchRecord* total_record);
  ::CMsgPlayerMatchRecord* unsafe_arena_release_total_record();

  // optional .CMsgPlayerRecentMatchInfo last_match = 3;
  bool has_last_match() const;
  private:
  bool _internal_has_last_match() const;
  public:
  void clear_last_match();
  const ::CMsgPlayerRecentMatchInfo& last_match() const;
  PROTOBUF_NODISCARD ::CMsgPlayerRecentMatchInfo* release_last_match();
  ::CMsgPlayerRecentMatchInfo* mutable_last_match();
  void set_allocated_last_match(::CMsgPlayerRecentMatchInfo* last_match);
  private:
  const ::CMsgPlayerRecentMatchInfo& _internal_last_match() const;
  ::CMsgPlayerRecentMatchInfo* _internal_mutable_last_match();
  public:
  void unsafe_arena_set_allocated_last_match(
      ::CMsgPlayerRecentMatchInfo* last_match);
  ::CMsgPlayerRecentMatchInfo* unsafe_arena_release_last_match();

  // @@protoc_insertion_point(class_scope:CMsgPlayerHeroRecentAccomplishments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgPlayerRecentMatchOutcomes* recent_outcomes_;
    ::CMsgPlayerMatchRecord* total_record_;
    ::CMsgPlayerRecentMatchInfo* last_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgRecentAccomplishments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRecentAccomplishments) */ {
 public:
  inline CMsgRecentAccomplishments() : CMsgRecentAccomplishments(nullptr) {}
  ~CMsgRecentAccomplishments() override;
  explicit PROTOBUF_CONSTEXPR CMsgRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRecentAccomplishments(const CMsgRecentAccomplishments& from);
  CMsgRecentAccomplishments(CMsgRecentAccomplishments&& from) noexcept
    : CMsgRecentAccomplishments() {
    *this = ::std::move(from);
  }

  inline CMsgRecentAccomplishments& operator=(const CMsgRecentAccomplishments& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRecentAccomplishments& operator=(CMsgRecentAccomplishments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgRecentAccomplishments& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRecentAccomplishments* internal_default_instance() {
    return reinterpret_cast<const CMsgRecentAccomplishments*>(
               &_CMsgRecentAccomplishments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CMsgRecentAccomplishments& a, CMsgRecentAccomplishments& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRecentAccomplishments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRecentAccomplishments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgRecentAccomplishments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgRecentAccomplishments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgRecentAccomplishments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgRecentAccomplishments& from) {
    CMsgRecentAccomplishments::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRecentAccomplishments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRecentAccomplishments";
  }
  protected:
  explicit CMsgRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerAccomplishmentsFieldNumber = 1,
    kHeroAccomplishmentsFieldNumber = 2,
  };
  // optional .CMsgPlayerRecentAccomplishments player_accomplishments = 1;
  bool has_player_accomplishments() const;
  private:
  bool _internal_has_player_accomplishments() const;
  public:
  void clear_player_accomplishments();
  const ::CMsgPlayerRecentAccomplishments& player_accomplishments() const;
  PROTOBUF_NODISCARD ::CMsgPlayerRecentAccomplishments* release_player_accomplishments();
  ::CMsgPlayerRecentAccomplishments* mutable_player_accomplishments();
  void set_allocated_player_accomplishments(::CMsgPlayerRecentAccomplishments* player_accomplishments);
  private:
  const ::CMsgPlayerRecentAccomplishments& _internal_player_accomplishments() const;
  ::CMsgPlayerRecentAccomplishments* _internal_mutable_player_accomplishments();
  public:
  void unsafe_arena_set_allocated_player_accomplishments(
      ::CMsgPlayerRecentAccomplishments* player_accomplishments);
  ::CMsgPlayerRecentAccomplishments* unsafe_arena_release_player_accomplishments();

  // optional .CMsgPlayerHeroRecentAccomplishments hero_accomplishments = 2;
  bool has_hero_accomplishments() const;
  private:
  bool _internal_has_hero_accomplishments() const;
  public:
  void clear_hero_accomplishments();
  const ::CMsgPlayerHeroRecentAccomplishments& hero_accomplishments() const;
  PROTOBUF_NODISCARD ::CMsgPlayerHeroRecentAccomplishments* release_hero_accomplishments();
  ::CMsgPlayerHeroRecentAccomplishments* mutable_hero_accomplishments();
  void set_allocated_hero_accomplishments(::CMsgPlayerHeroRecentAccomplishments* hero_accomplishments);
  private:
  const ::CMsgPlayerHeroRecentAccomplishments& _internal_hero_accomplishments() const;
  ::CMsgPlayerHeroRecentAccomplishments* _internal_mutable_hero_accomplishments();
  public:
  void unsafe_arena_set_allocated_hero_accomplishments(
      ::CMsgPlayerHeroRecentAccomplishments* hero_accomplishments);
  ::CMsgPlayerHeroRecentAccomplishments* unsafe_arena_release_hero_accomplishments();

  // @@protoc_insertion_point(class_scope:CMsgRecentAccomplishments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgPlayerRecentAccomplishments* player_accomplishments_;
    ::CMsgPlayerHeroRecentAccomplishments* hero_accomplishments_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRequestPlayerRecentAccomplishments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRequestPlayerRecentAccomplishments) */ {
 public:
  inline CMsgServerToGCRequestPlayerRecentAccomplishments() : CMsgServerToGCRequestPlayerRecentAccomplishments(nullptr) {}
  ~CMsgServerToGCRequestPlayerRecentAccomplishments() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRequestPlayerRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRequestPlayerRecentAccomplishments(const CMsgServerToGCRequestPlayerRecentAccomplishments& from);
  CMsgServerToGCRequestPlayerRecentAccomplishments(CMsgServerToGCRequestPlayerRecentAccomplishments&& from) noexcept
    : CMsgServerToGCRequestPlayerRecentAccomplishments() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRequestPlayerRecentAccomplishments& operator=(const CMsgServerToGCRequestPlayerRecentAccomplishments& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRequestPlayerRecentAccomplishments& operator=(CMsgServerToGCRequestPlayerRecentAccomplishments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRequestPlayerRecentAccomplishments& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRequestPlayerRecentAccomplishments* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRequestPlayerRecentAccomplishments*>(
               &_CMsgServerToGCRequestPlayerRecentAccomplishments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CMsgServerToGCRequestPlayerRecentAccomplishments& a, CMsgServerToGCRequestPlayerRecentAccomplishments& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRequestPlayerRecentAccomplishments* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRequestPlayerRecentAccomplishments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRequestPlayerRecentAccomplishments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRequestPlayerRecentAccomplishments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRequestPlayerRecentAccomplishments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRequestPlayerRecentAccomplishments& from) {
    CMsgServerToGCRequestPlayerRecentAccomplishments::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRequestPlayerRecentAccomplishments* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRequestPlayerRecentAccomplishments";
  }
  protected:
  explicit CMsgServerToGCRequestPlayerRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRequestPlayerRecentAccomplishments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse) */ {
 public:
  inline CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse() : CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(nullptr) {}
  ~CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& from);
  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse&& from) noexcept
    : CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& operator=(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& operator=(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse*>(
               &_CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& a, CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& from) {
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse";
  }
  protected:
  explicit CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_k_eDisabled;
  static inline bool EResponse_IsValid(int value) {
    return CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerAccomplishmentsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .CMsgRecentAccomplishments player_accomplishments = 2;
  bool has_player_accomplishments() const;
  private:
  bool _internal_has_player_accomplishments() const;
  public:
  void clear_player_accomplishments();
  const ::CMsgRecentAccomplishments& player_accomplishments() const;
  PROTOBUF_NODISCARD ::CMsgRecentAccomplishments* release_player_accomplishments();
  ::CMsgRecentAccomplishments* mutable_player_accomplishments();
  void set_allocated_player_accomplishments(::CMsgRecentAccomplishments* player_accomplishments);
  private:
  const ::CMsgRecentAccomplishments& _internal_player_accomplishments() const;
  ::CMsgRecentAccomplishments* _internal_mutable_player_accomplishments();
  public:
  void unsafe_arena_set_allocated_player_accomplishments(
      ::CMsgRecentAccomplishments* player_accomplishments);
  ::CMsgRecentAccomplishments* unsafe_arena_release_player_accomplishments();

  // optional .CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse result() const;
  void set_result(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse value);
  private:
  ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse _internal_result() const;
  void _internal_set_result(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgRecentAccomplishments* player_accomplishments_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgArcanaVoteMatchVotes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgArcanaVoteMatchVotes) */ {
 public:
  inline CMsgArcanaVoteMatchVotes() : CMsgArcanaVoteMatchVotes(nullptr) {}
  ~CMsgArcanaVoteMatchVotes() override;
  explicit PROTOBUF_CONSTEXPR CMsgArcanaVoteMatchVotes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgArcanaVoteMatchVotes(const CMsgArcanaVoteMatchVotes& from);
  CMsgArcanaVoteMatchVotes(CMsgArcanaVoteMatchVotes&& from) noexcept
    : CMsgArcanaVoteMatchVotes() {
    *this = ::std::move(from);
  }

  inline CMsgArcanaVoteMatchVotes& operator=(const CMsgArcanaVoteMatchVotes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgArcanaVoteMatchVotes& operator=(CMsgArcanaVoteMatchVotes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgArcanaVoteMatchVotes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgArcanaVoteMatchVotes* internal_default_instance() {
    return reinterpret_cast<const CMsgArcanaVoteMatchVotes*>(
               &_CMsgArcanaVoteMatchVotes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CMsgArcanaVoteMatchVotes& a, CMsgArcanaVoteMatchVotes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgArcanaVoteMatchVotes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgArcanaVoteMatchVotes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgArcanaVoteMatchVotes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgArcanaVoteMatchVotes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgArcanaVoteMatchVotes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgArcanaVoteMatchVotes& from) {
    CMsgArcanaVoteMatchVotes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgArcanaVoteMatchVotes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgArcanaVoteMatchVotes";
  }
  protected:
  explicit CMsgArcanaVoteMatchVotes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kVoteCountFieldNumber = 3,
  };
  // optional uint32 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint32_t match_id() const;
  void set_match_id(uint32_t value);
  private:
  uint32_t _internal_match_id() const;
  void _internal_set_match_id(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 vote_count = 3;
  bool has_vote_count() const;
  private:
  bool _internal_has_vote_count() const;
  public:
  void clear_vote_count();
  uint32_t vote_count() const;
  void set_vote_count(uint32_t value);
  private:
  uint32_t _internal_vote_count() const;
  void _internal_set_vote_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgArcanaVoteMatchVotes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t match_id_;
    uint32_t hero_id_;
    uint32_t vote_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCtoGCAssociatedExploiterAccountInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCtoGCAssociatedExploiterAccountInfo) */ {
 public:
  inline CMsgGCtoGCAssociatedExploiterAccountInfo() : CMsgGCtoGCAssociatedExploiterAccountInfo(nullptr) {}
  ~CMsgGCtoGCAssociatedExploiterAccountInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCtoGCAssociatedExploiterAccountInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCtoGCAssociatedExploiterAccountInfo(const CMsgGCtoGCAssociatedExploiterAccountInfo& from);
  CMsgGCtoGCAssociatedExploiterAccountInfo(CMsgGCtoGCAssociatedExploiterAccountInfo&& from) noexcept
    : CMsgGCtoGCAssociatedExploiterAccountInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCtoGCAssociatedExploiterAccountInfo& operator=(const CMsgGCtoGCAssociatedExploiterAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCtoGCAssociatedExploiterAccountInfo& operator=(CMsgGCtoGCAssociatedExploiterAccountInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCtoGCAssociatedExploiterAccountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCtoGCAssociatedExploiterAccountInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCtoGCAssociatedExploiterAccountInfo*>(
               &_CMsgGCtoGCAssociatedExploiterAccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CMsgGCtoGCAssociatedExploiterAccountInfo& a, CMsgGCtoGCAssociatedExploiterAccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCtoGCAssociatedExploiterAccountInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCtoGCAssociatedExploiterAccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCtoGCAssociatedExploiterAccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCtoGCAssociatedExploiterAccountInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCtoGCAssociatedExploiterAccountInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCtoGCAssociatedExploiterAccountInfo& from) {
    CMsgGCtoGCAssociatedExploiterAccountInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCtoGCAssociatedExploiterAccountInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCtoGCAssociatedExploiterAccountInfo";
  }
  protected:
  explicit CMsgGCtoGCAssociatedExploiterAccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kNumMatchesToSearchFieldNumber = 2,
    kMinSharedMatchCountFieldNumber = 3,
    kNumAdditionalPlayersFieldNumber = 4,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 num_matches_to_search = 2;
  bool has_num_matches_to_search() const;
  private:
  bool _internal_has_num_matches_to_search() const;
  public:
  void clear_num_matches_to_search();
  uint32_t num_matches_to_search() const;
  void set_num_matches_to_search(uint32_t value);
  private:
  uint32_t _internal_num_matches_to_search() const;
  void _internal_set_num_matches_to_search(uint32_t value);
  public:

  // optional uint32 min_shared_match_count = 3;
  bool has_min_shared_match_count() const;
  private:
  bool _internal_has_min_shared_match_count() const;
  public:
  void clear_min_shared_match_count();
  uint32_t min_shared_match_count() const;
  void set_min_shared_match_count(uint32_t value);
  private:
  uint32_t _internal_min_shared_match_count() const;
  void _internal_set_min_shared_match_count(uint32_t value);
  public:

  // optional uint32 num_additional_players = 4;
  bool has_num_additional_players() const;
  private:
  bool _internal_has_num_additional_players() const;
  public:
  void clear_num_additional_players();
  uint32_t num_additional_players() const;
  void set_num_additional_players(uint32_t value);
  private:
  uint32_t _internal_num_additional_players() const;
  void _internal_set_num_additional_players(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCtoGCAssociatedExploiterAccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t num_matches_to_search_;
    uint32_t min_shared_match_count_;
    uint32_t num_additional_players_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account) */ {
 public:
  inline CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account() : CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(nullptr) {}
  ~CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& from);
  CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account&& from) noexcept
    : CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account() {
    *this = ::std::move(from);
  }

  inline CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& operator=(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& operator=(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* internal_default_instance() {
    return reinterpret_cast<const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account*>(
               &_CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& a, CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& from) {
    CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account";
  }
  protected:
  explicit CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaFieldNumber = 6,
    kAccountIdFieldNumber = 1,
    kNumCommonMatchesFieldNumber = 2,
    kEarliestCommonMatchFieldNumber = 3,
    kLatestCommonMatchFieldNumber = 4,
    kGenerationFieldNumber = 5,
    kAlreadyBannedFieldNumber = 7,
  };
  // optional string persona = 6;
  bool has_persona() const;
  private:
  bool _internal_has_persona() const;
  public:
  void clear_persona();
  const std::string& persona() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona();
  PROTOBUF_NODISCARD std::string* release_persona();
  void set_allocated_persona(std::string* persona);
  private:
  const std::string& _internal_persona() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona(const std::string& value);
  std::string* _internal_mutable_persona();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 num_common_matches = 2;
  bool has_num_common_matches() const;
  private:
  bool _internal_has_num_common_matches() const;
  public:
  void clear_num_common_matches();
  uint32_t num_common_matches() const;
  void set_num_common_matches(uint32_t value);
  private:
  uint32_t _internal_num_common_matches() const;
  void _internal_set_num_common_matches(uint32_t value);
  public:

  // optional uint32 earliest_common_match = 3;
  bool has_earliest_common_match() const;
  private:
  bool _internal_has_earliest_common_match() const;
  public:
  void clear_earliest_common_match();
  uint32_t earliest_common_match() const;
  void set_earliest_common_match(uint32_t value);
  private:
  uint32_t _internal_earliest_common_match() const;
  void _internal_set_earliest_common_match(uint32_t value);
  public:

  // optional uint32 latest_common_match = 4;
  bool has_latest_common_match() const;
  private:
  bool _internal_has_latest_common_match() const;
  public:
  void clear_latest_common_match();
  uint32_t latest_common_match() const;
  void set_latest_common_match(uint32_t value);
  private:
  uint32_t _internal_latest_common_match() const;
  void _internal_set_latest_common_match(uint32_t value);
  public:

  // optional uint32 generation = 5;
  bool has_generation() const;
  private:
  bool _internal_has_generation() const;
  public:
  void clear_generation();
  uint32_t generation() const;
  void set_generation(uint32_t value);
  private:
  uint32_t _internal_generation() const;
  void _internal_set_generation(uint32_t value);
  public:

  // optional bool already_banned = 7;
  bool has_already_banned() const;
  private:
  bool _internal_has_already_banned() const;
  public:
  void clear_already_banned();
  bool already_banned() const;
  void set_already_banned(bool value);
  private:
  bool _internal_already_banned() const;
  void _internal_set_already_banned(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_;
    uint32_t account_id_;
    uint32_t num_common_matches_;
    uint32_t earliest_common_match_;
    uint32_t latest_common_match_;
    uint32_t generation_;
    bool already_banned_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCtoGCAssociatedExploiterAccountInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCtoGCAssociatedExploiterAccountInfoResponse) */ {
 public:
  inline CMsgGCtoGCAssociatedExploiterAccountInfoResponse() : CMsgGCtoGCAssociatedExploiterAccountInfoResponse(nullptr) {}
  ~CMsgGCtoGCAssociatedExploiterAccountInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCtoGCAssociatedExploiterAccountInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCtoGCAssociatedExploiterAccountInfoResponse(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& from);
  CMsgGCtoGCAssociatedExploiterAccountInfoResponse(CMsgGCtoGCAssociatedExploiterAccountInfoResponse&& from) noexcept
    : CMsgGCtoGCAssociatedExploiterAccountInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCtoGCAssociatedExploiterAccountInfoResponse& operator=(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCtoGCAssociatedExploiterAccountInfoResponse& operator=(CMsgGCtoGCAssociatedExploiterAccountInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCtoGCAssociatedExploiterAccountInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCtoGCAssociatedExploiterAccountInfoResponse*>(
               &_CMsgGCtoGCAssociatedExploiterAccountInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse& a, CMsgGCtoGCAssociatedExploiterAccountInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCtoGCAssociatedExploiterAccountInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCtoGCAssociatedExploiterAccountInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& from) {
    CMsgGCtoGCAssociatedExploiterAccountInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCtoGCAssociatedExploiterAccountInfoResponse";
  }
  protected:
  explicit CMsgGCtoGCAssociatedExploiterAccountInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account Account;

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account >*
      mutable_accounts();
  private:
  const ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& _internal_accounts(int index) const;
  ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* _internal_add_accounts();
  public:
  const ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& accounts(int index) const;
  ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account > accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPullTabsData_Slot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPullTabsData.Slot) */ {
 public:
  inline CMsgPullTabsData_Slot() : CMsgPullTabsData_Slot(nullptr) {}
  ~CMsgPullTabsData_Slot() override;
  explicit PROTOBUF_CONSTEXPR CMsgPullTabsData_Slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPullTabsData_Slot(const CMsgPullTabsData_Slot& from);
  CMsgPullTabsData_Slot(CMsgPullTabsData_Slot&& from) noexcept
    : CMsgPullTabsData_Slot() {
    *this = ::std::move(from);
  }

  inline CMsgPullTabsData_Slot& operator=(const CMsgPullTabsData_Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPullTabsData_Slot& operator=(CMsgPullTabsData_Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPullTabsData_Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPullTabsData_Slot* internal_default_instance() {
    return reinterpret_cast<const CMsgPullTabsData_Slot*>(
               &_CMsgPullTabsData_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(CMsgPullTabsData_Slot& a, CMsgPullTabsData_Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPullTabsData_Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPullTabsData_Slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPullTabsData_Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPullTabsData_Slot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPullTabsData_Slot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPullTabsData_Slot& from) {
    CMsgPullTabsData_Slot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPullTabsData_Slot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPullTabsData.Slot";
  }
  protected:
  explicit CMsgPullTabsData_Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kBoardIdFieldNumber = 2,
    kHeroIdFieldNumber = 3,
    kActionIdFieldNumber = 4,
    kRedeemedFieldNumber = 5,
  };
  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 board_id = 2;
  bool has_board_id() const;
  private:
  bool _internal_has_board_id() const;
  public:
  void clear_board_id();
  uint32_t board_id() const;
  void set_board_id(uint32_t value);
  private:
  uint32_t _internal_board_id() const;
  void _internal_set_board_id(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 action_id = 4;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  uint32_t action_id() const;
  void set_action_id(uint32_t value);
  private:
  uint32_t _internal_action_id() const;
  void _internal_set_action_id(uint32_t value);
  public:

  // optional bool redeemed = 5;
  bool has_redeemed() const;
  private:
  bool _internal_has_redeemed() const;
  public:
  void clear_redeemed();
  bool redeemed() const;
  void set_redeemed(bool value);
  private:
  bool _internal_redeemed() const;
  void _internal_set_redeemed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPullTabsData.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t event_id_;
    uint32_t board_id_;
    uint32_t hero_id_;
    uint32_t action_id_;
    bool redeemed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPullTabsData_Jackpot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPullTabsData.Jackpot) */ {
 public:
  inline CMsgPullTabsData_Jackpot() : CMsgPullTabsData_Jackpot(nullptr) {}
  ~CMsgPullTabsData_Jackpot() override;
  explicit PROTOBUF_CONSTEXPR CMsgPullTabsData_Jackpot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPullTabsData_Jackpot(const CMsgPullTabsData_Jackpot& from);
  CMsgPullTabsData_Jackpot(CMsgPullTabsData_Jackpot&& from) noexcept
    : CMsgPullTabsData_Jackpot() {
    *this = ::std::move(from);
  }

  inline CMsgPullTabsData_Jackpot& operator=(const CMsgPullTabsData_Jackpot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPullTabsData_Jackpot& operator=(CMsgPullTabsData_Jackpot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPullTabsData_Jackpot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPullTabsData_Jackpot* internal_default_instance() {
    return reinterpret_cast<const CMsgPullTabsData_Jackpot*>(
               &_CMsgPullTabsData_Jackpot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CMsgPullTabsData_Jackpot& a, CMsgPullTabsData_Jackpot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPullTabsData_Jackpot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPullTabsData_Jackpot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPullTabsData_Jackpot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPullTabsData_Jackpot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPullTabsData_Jackpot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPullTabsData_Jackpot& from) {
    CMsgPullTabsData_Jackpot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPullTabsData_Jackpot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPullTabsData.Jackpot";
  }
  protected:
  explicit CMsgPullTabsData_Jackpot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardIdFieldNumber = 1,
    kActionIdFieldNumber = 2,
    kHeroIdFieldNumber = 3,
  };
  // optional uint32 board_id = 1;
  bool has_board_id() const;
  private:
  bool _internal_has_board_id() const;
  public:
  void clear_board_id();
  uint32_t board_id() const;
  void set_board_id(uint32_t value);
  private:
  uint32_t _internal_board_id() const;
  void _internal_set_board_id(uint32_t value);
  public:

  // optional uint32 action_id = 2;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  uint32_t action_id() const;
  void set_action_id(uint32_t value);
  private:
  uint32_t _internal_action_id() const;
  void _internal_set_action_id(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPullTabsData.Jackpot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t board_id_;
    uint32_t action_id_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPullTabsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPullTabsData) */ {
 public:
  inline CMsgPullTabsData() : CMsgPullTabsData(nullptr) {}
  ~CMsgPullTabsData() override;
  explicit PROTOBUF_CONSTEXPR CMsgPullTabsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPullTabsData(const CMsgPullTabsData& from);
  CMsgPullTabsData(CMsgPullTabsData&& from) noexcept
    : CMsgPullTabsData() {
    *this = ::std::move(from);
  }

  inline CMsgPullTabsData& operator=(const CMsgPullTabsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPullTabsData& operator=(CMsgPullTabsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPullTabsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPullTabsData* internal_default_instance() {
    return reinterpret_cast<const CMsgPullTabsData*>(
               &_CMsgPullTabsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CMsgPullTabsData& a, CMsgPullTabsData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPullTabsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPullTabsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPullTabsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPullTabsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPullTabsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPullTabsData& from) {
    CMsgPullTabsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPullTabsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPullTabsData";
  }
  protected:
  explicit CMsgPullTabsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgPullTabsData_Slot Slot;
  typedef CMsgPullTabsData_Jackpot Jackpot;

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 1,
    kJackpotsFieldNumber = 2,
    kLastBoardFieldNumber = 3,
  };
  // repeated .CMsgPullTabsData.Slot slots = 1;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::CMsgPullTabsData_Slot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Slot >*
      mutable_slots();
  private:
  const ::CMsgPullTabsData_Slot& _internal_slots(int index) const;
  ::CMsgPullTabsData_Slot* _internal_add_slots();
  public:
  const ::CMsgPullTabsData_Slot& slots(int index) const;
  ::CMsgPullTabsData_Slot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Slot >&
      slots() const;

  // repeated .CMsgPullTabsData.Jackpot jackpots = 2;
  int jackpots_size() const;
  private:
  int _internal_jackpots_size() const;
  public:
  void clear_jackpots();
  ::CMsgPullTabsData_Jackpot* mutable_jackpots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Jackpot >*
      mutable_jackpots();
  private:
  const ::CMsgPullTabsData_Jackpot& _internal_jackpots(int index) const;
  ::CMsgPullTabsData_Jackpot* _internal_add_jackpots();
  public:
  const ::CMsgPullTabsData_Jackpot& jackpots(int index) const;
  ::CMsgPullTabsData_Jackpot* add_jackpots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Jackpot >&
      jackpots() const;

  // optional uint32 last_board = 3;
  bool has_last_board() const;
  private:
  bool _internal_has_last_board() const;
  public:
  void clear_last_board();
  uint32_t last_board() const;
  void set_last_board(uint32_t value);
  private:
  uint32_t _internal_last_board() const;
  void _internal_set_last_board(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPullTabsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Slot > slots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Jackpot > jackpots_;
    uint32_t last_board_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgUnderDraftData_BenchSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUnderDraftData.BenchSlot) */ {
 public:
  inline CMsgUnderDraftData_BenchSlot() : CMsgUnderDraftData_BenchSlot(nullptr) {}
  ~CMsgUnderDraftData_BenchSlot() override;
  explicit PROTOBUF_CONSTEXPR CMsgUnderDraftData_BenchSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUnderDraftData_BenchSlot(const CMsgUnderDraftData_BenchSlot& from);
  CMsgUnderDraftData_BenchSlot(CMsgUnderDraftData_BenchSlot&& from) noexcept
    : CMsgUnderDraftData_BenchSlot() {
    *this = ::std::move(from);
  }

  inline CMsgUnderDraftData_BenchSlot& operator=(const CMsgUnderDraftData_BenchSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUnderDraftData_BenchSlot& operator=(CMsgUnderDraftData_BenchSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUnderDraftData_BenchSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUnderDraftData_BenchSlot* internal_default_instance() {
    return reinterpret_cast<const CMsgUnderDraftData_BenchSlot*>(
               &_CMsgUnderDraftData_BenchSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CMsgUnderDraftData_BenchSlot& a, CMsgUnderDraftData_BenchSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUnderDraftData_BenchSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUnderDraftData_BenchSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgUnderDraftData_BenchSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgUnderDraftData_BenchSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgUnderDraftData_BenchSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgUnderDraftData_BenchSlot& from) {
    CMsgUnderDraftData_BenchSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUnderDraftData_BenchSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUnderDraftData.BenchSlot";
  }
  protected:
  explicit CMsgUnderDraftData_BenchSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kStarsFieldNumber = 3,
  };
  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 stars = 3;
  bool has_stars() const;
  private:
  bool _internal_has_stars() const;
  public:
  void clear_stars();
  uint32_t stars() const;
  void set_stars(uint32_t value);
  private:
  uint32_t _internal_stars() const;
  void _internal_set_stars(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUnderDraftData.BenchSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t slot_id_;
    uint32_t hero_id_;
    uint32_t stars_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgUnderDraftData_ShopSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUnderDraftData.ShopSlot) */ {
 public:
  inline CMsgUnderDraftData_ShopSlot() : CMsgUnderDraftData_ShopSlot(nullptr) {}
  ~CMsgUnderDraftData_ShopSlot() override;
  explicit PROTOBUF_CONSTEXPR CMsgUnderDraftData_ShopSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUnderDraftData_ShopSlot(const CMsgUnderDraftData_ShopSlot& from);
  CMsgUnderDraftData_ShopSlot(CMsgUnderDraftData_ShopSlot&& from) noexcept
    : CMsgUnderDraftData_ShopSlot() {
    *this = ::std::move(from);
  }

  inline CMsgUnderDraftData_ShopSlot& operator=(const CMsgUnderDraftData_ShopSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUnderDraftData_ShopSlot& operator=(CMsgUnderDraftData_ShopSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUnderDraftData_ShopSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUnderDraftData_ShopSlot* internal_default_instance() {
    return reinterpret_cast<const CMsgUnderDraftData_ShopSlot*>(
               &_CMsgUnderDraftData_ShopSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CMsgUnderDraftData_ShopSlot& a, CMsgUnderDraftData_ShopSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUnderDraftData_ShopSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUnderDraftData_ShopSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgUnderDraftData_ShopSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgUnderDraftData_ShopSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgUnderDraftData_ShopSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgUnderDraftData_ShopSlot& from) {
    CMsgUnderDraftData_ShopSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUnderDraftData_ShopSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUnderDraftData.ShopSlot";
  }
  protected:
  explicit CMsgUnderDraftData_ShopSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kIsSpecialRewardFieldNumber = 3,
  };
  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional bool is_special_reward = 3;
  bool has_is_special_reward() const;
  private:
  bool _internal_has_is_special_reward() const;
  public:
  void clear_is_special_reward();
  bool is_special_reward() const;
  void set_is_special_reward(bool value);
  private:
  bool _internal_is_special_reward() const;
  void _internal_set_is_special_reward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUnderDraftData.ShopSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t slot_id_;
    uint32_t hero_id_;
    bool is_special_reward_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgUnderDraftData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUnderDraftData) */ {
 public:
  inline CMsgUnderDraftData() : CMsgUnderDraftData(nullptr) {}
  ~CMsgUnderDraftData() override;
  explicit PROTOBUF_CONSTEXPR CMsgUnderDraftData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUnderDraftData(const CMsgUnderDraftData& from);
  CMsgUnderDraftData(CMsgUnderDraftData&& from) noexcept
    : CMsgUnderDraftData() {
    *this = ::std::move(from);
  }

  inline CMsgUnderDraftData& operator=(const CMsgUnderDraftData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUnderDraftData& operator=(CMsgUnderDraftData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUnderDraftData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUnderDraftData* internal_default_instance() {
    return reinterpret_cast<const CMsgUnderDraftData*>(
               &_CMsgUnderDraftData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CMsgUnderDraftData& a, CMsgUnderDraftData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUnderDraftData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUnderDraftData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgUnderDraftData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgUnderDraftData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgUnderDraftData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgUnderDraftData& from) {
    CMsgUnderDraftData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUnderDraftData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUnderDraftData";
  }
  protected:
  explicit CMsgUnderDraftData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgUnderDraftData_BenchSlot BenchSlot;
  typedef CMsgUnderDraftData_ShopSlot ShopSlot;

  // accessors -------------------------------------------------------

  enum : int {
    kBenchSlotsFieldNumber = 1,
    kShopSlotsFieldNumber = 2,
    kGoldFieldNumber = 3,
    kTotalGoldFieldNumber = 4,
    kNotRestorableFieldNumber = 5,
  };
  // repeated .CMsgUnderDraftData.BenchSlot bench_slots = 1;
  int bench_slots_size() const;
  private:
  int _internal_bench_slots_size() const;
  public:
  void clear_bench_slots();
  ::CMsgUnderDraftData_BenchSlot* mutable_bench_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_BenchSlot >*
      mutable_bench_slots();
  private:
  const ::CMsgUnderDraftData_BenchSlot& _internal_bench_slots(int index) const;
  ::CMsgUnderDraftData_BenchSlot* _internal_add_bench_slots();
  public:
  const ::CMsgUnderDraftData_BenchSlot& bench_slots(int index) const;
  ::CMsgUnderDraftData_BenchSlot* add_bench_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_BenchSlot >&
      bench_slots() const;

  // repeated .CMsgUnderDraftData.ShopSlot shop_slots = 2;
  int shop_slots_size() const;
  private:
  int _internal_shop_slots_size() const;
  public:
  void clear_shop_slots();
  ::CMsgUnderDraftData_ShopSlot* mutable_shop_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_ShopSlot >*
      mutable_shop_slots();
  private:
  const ::CMsgUnderDraftData_ShopSlot& _internal_shop_slots(int index) const;
  ::CMsgUnderDraftData_ShopSlot* _internal_add_shop_slots();
  public:
  const ::CMsgUnderDraftData_ShopSlot& shop_slots(int index) const;
  ::CMsgUnderDraftData_ShopSlot* add_shop_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_ShopSlot >&
      shop_slots() const;

  // optional uint32 gold = 3;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional uint32 total_gold = 4;
  bool has_total_gold() const;
  private:
  bool _internal_has_total_gold() const;
  public:
  void clear_total_gold();
  uint32_t total_gold() const;
  void set_total_gold(uint32_t value);
  private:
  uint32_t _internal_total_gold() const;
  void _internal_set_total_gold(uint32_t value);
  public:

  // optional bool not_restorable = 5;
  bool has_not_restorable() const;
  private:
  bool _internal_has_not_restorable() const;
  public:
  void clear_not_restorable();
  bool not_restorable() const;
  void set_not_restorable(bool value);
  private:
  bool _internal_not_restorable() const;
  void _internal_set_not_restorable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUnderDraftData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_BenchSlot > bench_slots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_ShopSlot > shop_slots_;
    uint32_t gold_;
    uint32_t total_gold_;
    bool not_restorable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerTitleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerTitleData) */ {
 public:
  inline CMsgPlayerTitleData() : CMsgPlayerTitleData(nullptr) {}
  ~CMsgPlayerTitleData() override;
  explicit PROTOBUF_CONSTEXPR CMsgPlayerTitleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerTitleData(const CMsgPlayerTitleData& from);
  CMsgPlayerTitleData(CMsgPlayerTitleData&& from) noexcept
    : CMsgPlayerTitleData() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerTitleData& operator=(const CMsgPlayerTitleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerTitleData& operator=(CMsgPlayerTitleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerTitleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerTitleData* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerTitleData*>(
               &_CMsgPlayerTitleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CMsgPlayerTitleData& a, CMsgPlayerTitleData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerTitleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerTitleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPlayerTitleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPlayerTitleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPlayerTitleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPlayerTitleData& from) {
    CMsgPlayerTitleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerTitleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerTitleData";
  }
  protected:
  explicit CMsgPlayerTitleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kActiveFieldNumber = 3,
  };
  // repeated uint32 title = 1;
  int title_size() const;
  private:
  int _internal_title_size() const;
  public:
  void clear_title();
  private:
  uint32_t _internal_title(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_title() const;
  void _internal_add_title(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_title();
  public:
  uint32_t title(int index) const;
  void set_title(int index, uint32_t value);
  void add_title(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      title() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_title();

  // repeated uint32 event_id = 2;
  int event_id_size() const;
  private:
  int _internal_event_id_size() const;
  public:
  void clear_event_id();
  private:
  uint32_t _internal_event_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_event_id() const;
  void _internal_add_event_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_event_id();
  public:
  uint32_t event_id(int index) const;
  void set_event_id(int index, uint32_t value);
  void add_event_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      event_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_event_id();

  // optional uint32 active = 3;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  uint32_t active() const;
  void set_active(uint32_t value);
  private:
  uint32_t _internal_active() const;
  void _internal_set_active(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerTitleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > title_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > event_id_;
    uint32_t active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATriviaQuestion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATriviaQuestion) */ {
 public:
  inline CMsgDOTATriviaQuestion() : CMsgDOTATriviaQuestion(nullptr) {}
  ~CMsgDOTATriviaQuestion() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATriviaQuestion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATriviaQuestion(const CMsgDOTATriviaQuestion& from);
  CMsgDOTATriviaQuestion(CMsgDOTATriviaQuestion&& from) noexcept
    : CMsgDOTATriviaQuestion() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATriviaQuestion& operator=(const CMsgDOTATriviaQuestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATriviaQuestion& operator=(CMsgDOTATriviaQuestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATriviaQuestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATriviaQuestion* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATriviaQuestion*>(
               &_CMsgDOTATriviaQuestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CMsgDOTATriviaQuestion& a, CMsgDOTATriviaQuestion& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATriviaQuestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATriviaQuestion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATriviaQuestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATriviaQuestion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATriviaQuestion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATriviaQuestion& from) {
    CMsgDOTATriviaQuestion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATriviaQuestion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATriviaQuestion";
  }
  protected:
  explicit CMsgDOTATriviaQuestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerValuesFieldNumber = 5,
    kQuestionValueFieldNumber = 4,
    kQuestionIdFieldNumber = 1,
    kCategoryFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kCorrectAnswerIndexFieldNumber = 6,
  };
  // repeated string answer_values = 5;
  int answer_values_size() const;
  private:
  int _internal_answer_values_size() const;
  public:
  void clear_answer_values();
  const std::string& answer_values(int index) const;
  std::string* mutable_answer_values(int index);
  void set_answer_values(int index, const std::string& value);
  void set_answer_values(int index, std::string&& value);
  void set_answer_values(int index, const char* value);
  void set_answer_values(int index, const char* value, size_t size);
  std::string* add_answer_values();
  void add_answer_values(const std::string& value);
  void add_answer_values(std::string&& value);
  void add_answer_values(const char* value);
  void add_answer_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& answer_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_answer_values();
  private:
  const std::string& _internal_answer_values(int index) const;
  std::string* _internal_add_answer_values();
  public:

  // optional string question_value = 4;
  bool has_question_value() const;
  private:
  bool _internal_has_question_value() const;
  public:
  void clear_question_value();
  const std::string& question_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question_value();
  PROTOBUF_NODISCARD std::string* release_question_value();
  void set_allocated_question_value(std::string* question_value);
  private:
  const std::string& _internal_question_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question_value(const std::string& value);
  std::string* _internal_mutable_question_value();
  public:

  // optional uint32 question_id = 1;
  bool has_question_id() const;
  private:
  bool _internal_has_question_id() const;
  public:
  void clear_question_id();
  uint32_t question_id() const;
  void set_question_id(uint32_t value);
  private:
  uint32_t _internal_question_id() const;
  void _internal_set_question_id(uint32_t value);
  public:

  // optional .EDOTATriviaQuestionCategory category = 2 [default = k_EDOTATriviaQuestionCategory_AbilityIcon];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::EDOTATriviaQuestionCategory category() const;
  void set_category(::EDOTATriviaQuestionCategory value);
  private:
  ::EDOTATriviaQuestionCategory _internal_category() const;
  void _internal_set_category(::EDOTATriviaQuestionCategory value);
  public:

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 correct_answer_index = 6;
  bool has_correct_answer_index() const;
  private:
  bool _internal_has_correct_answer_index() const;
  public:
  void clear_correct_answer_index();
  uint32_t correct_answer_index() const;
  void set_correct_answer_index(uint32_t value);
  private:
  uint32_t _internal_correct_answer_index() const;
  void _internal_set_correct_answer_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATriviaQuestion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> answer_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_value_;
    uint32_t question_id_;
    int category_;
    uint32_t timestamp_;
    uint32_t correct_answer_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATriviaQuestionAnswersSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATriviaQuestionAnswersSummary) */ {
 public:
  inline CMsgDOTATriviaQuestionAnswersSummary() : CMsgDOTATriviaQuestionAnswersSummary(nullptr) {}
  ~CMsgDOTATriviaQuestionAnswersSummary() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATriviaQuestionAnswersSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATriviaQuestionAnswersSummary(const CMsgDOTATriviaQuestionAnswersSummary& from);
  CMsgDOTATriviaQuestionAnswersSummary(CMsgDOTATriviaQuestionAnswersSummary&& from) noexcept
    : CMsgDOTATriviaQuestionAnswersSummary() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATriviaQuestionAnswersSummary& operator=(const CMsgDOTATriviaQuestionAnswersSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATriviaQuestionAnswersSummary& operator=(CMsgDOTATriviaQuestionAnswersSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATriviaQuestionAnswersSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATriviaQuestionAnswersSummary* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATriviaQuestionAnswersSummary*>(
               &_CMsgDOTATriviaQuestionAnswersSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CMsgDOTATriviaQuestionAnswersSummary& a, CMsgDOTATriviaQuestionAnswersSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATriviaQuestionAnswersSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATriviaQuestionAnswersSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATriviaQuestionAnswersSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATriviaQuestionAnswersSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATriviaQuestionAnswersSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATriviaQuestionAnswersSummary& from) {
    CMsgDOTATriviaQuestionAnswersSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATriviaQuestionAnswersSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATriviaQuestionAnswersSummary";
  }
  protected:
  explicit CMsgDOTATriviaQuestionAnswersSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPickedCountFieldNumber = 2,
    kSummaryAvailableFieldNumber = 1,
  };
  // repeated uint32 picked_count = 2;
  int picked_count_size() const;
  private:
  int _internal_picked_count_size() const;
  public:
  void clear_picked_count();
  private:
  uint32_t _internal_picked_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_picked_count() const;
  void _internal_add_picked_count(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_picked_count();
  public:
  uint32_t picked_count(int index) const;
  void set_picked_count(int index, uint32_t value);
  void add_picked_count(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      picked_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_picked_count();

  // optional bool summary_available = 1;
  bool has_summary_available() const;
  private:
  bool _internal_has_summary_available() const;
  public:
  void clear_summary_available();
  bool summary_available() const;
  void set_summary_available(bool value);
  private:
  bool _internal_summary_available() const;
  void _internal_set_summary_available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATriviaQuestionAnswersSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > picked_count_;
    bool summary_available_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataSpecialValueBonus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataSpecialValueBonus) */ {
 public:
  inline CMsgGameDataSpecialValueBonus() : CMsgGameDataSpecialValueBonus(nullptr) {}
  ~CMsgGameDataSpecialValueBonus() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataSpecialValueBonus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataSpecialValueBonus(const CMsgGameDataSpecialValueBonus& from);
  CMsgGameDataSpecialValueBonus(CMsgGameDataSpecialValueBonus&& from) noexcept
    : CMsgGameDataSpecialValueBonus() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataSpecialValueBonus& operator=(const CMsgGameDataSpecialValueBonus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataSpecialValueBonus& operator=(CMsgGameDataSpecialValueBonus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataSpecialValueBonus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataSpecialValueBonus* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataSpecialValueBonus*>(
               &_CMsgGameDataSpecialValueBonus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CMsgGameDataSpecialValueBonus& a, CMsgGameDataSpecialValueBonus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataSpecialValueBonus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataSpecialValueBonus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataSpecialValueBonus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataSpecialValueBonus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataSpecialValueBonus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataSpecialValueBonus& from) {
    CMsgGameDataSpecialValueBonus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataSpecialValueBonus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataSpecialValueBonus";
  }
  protected:
  explicit CMsgGameDataSpecialValueBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kOperationFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // optional uint32 operation = 3;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  uint32_t operation() const;
  void set_operation(uint32_t value);
  private:
  uint32_t _internal_operation() const;
  void _internal_set_operation(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameDataSpecialValueBonus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    float value_;
    uint32_t operation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataSpecialValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataSpecialValues) */ {
 public:
  inline CMsgGameDataSpecialValues() : CMsgGameDataSpecialValues(nullptr) {}
  ~CMsgGameDataSpecialValues() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataSpecialValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataSpecialValues(const CMsgGameDataSpecialValues& from);
  CMsgGameDataSpecialValues(CMsgGameDataSpecialValues&& from) noexcept
    : CMsgGameDataSpecialValues() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataSpecialValues& operator=(const CMsgGameDataSpecialValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataSpecialValues& operator=(CMsgGameDataSpecialValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataSpecialValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataSpecialValues* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataSpecialValues*>(
               &_CMsgGameDataSpecialValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CMsgGameDataSpecialValues& a, CMsgGameDataSpecialValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataSpecialValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataSpecialValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataSpecialValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataSpecialValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataSpecialValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataSpecialValues& from) {
    CMsgGameDataSpecialValues::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataSpecialValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataSpecialValues";
  }
  protected:
  explicit CMsgGameDataSpecialValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFloatFieldNumber = 2,
    kBonusesFieldNumber = 6,
    kNameFieldNumber = 1,
    kHeadingLocFieldNumber = 5,
    kIsPercentageFieldNumber = 4,
  };
  // repeated float values_float = 2;
  int values_float_size() const;
  private:
  int _internal_values_float_size() const;
  public:
  void clear_values_float();
  private:
  float _internal_values_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values_float() const;
  void _internal_add_values_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values_float();
  public:
  float values_float(int index) const;
  void set_values_float(int index, float value);
  void add_values_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values_float();

  // repeated .CMsgGameDataSpecialValueBonus bonuses = 6;
  int bonuses_size() const;
  private:
  int _internal_bonuses_size() const;
  public:
  void clear_bonuses();
  ::CMsgGameDataSpecialValueBonus* mutable_bonuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValueBonus >*
      mutable_bonuses();
  private:
  const ::CMsgGameDataSpecialValueBonus& _internal_bonuses(int index) const;
  ::CMsgGameDataSpecialValueBonus* _internal_add_bonuses();
  public:
  const ::CMsgGameDataSpecialValueBonus& bonuses(int index) const;
  ::CMsgGameDataSpecialValueBonus* add_bonuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValueBonus >&
      bonuses() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string heading_loc = 5;
  bool has_heading_loc() const;
  private:
  bool _internal_has_heading_loc() const;
  public:
  void clear_heading_loc();
  const std::string& heading_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_heading_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_heading_loc();
  PROTOBUF_NODISCARD std::string* release_heading_loc();
  void set_allocated_heading_loc(std::string* heading_loc);
  private:
  const std::string& _internal_heading_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_heading_loc(const std::string& value);
  std::string* _internal_mutable_heading_loc();
  public:

  // optional bool is_percentage = 4;
  bool has_is_percentage() const;
  private:
  bool _internal_has_is_percentage() const;
  public:
  void clear_is_percentage();
  bool is_percentage() const;
  void set_is_percentage(bool value);
  private:
  bool _internal_is_percentage() const;
  void _internal_set_is_percentage(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameDataSpecialValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_float_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValueBonus > bonuses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heading_loc_;
    bool is_percentage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataAbilityOrItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataAbilityOrItem) */ {
 public:
  inline CMsgGameDataAbilityOrItem() : CMsgGameDataAbilityOrItem(nullptr) {}
  ~CMsgGameDataAbilityOrItem() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataAbilityOrItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataAbilityOrItem(const CMsgGameDataAbilityOrItem& from);
  CMsgGameDataAbilityOrItem(CMsgGameDataAbilityOrItem&& from) noexcept
    : CMsgGameDataAbilityOrItem() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataAbilityOrItem& operator=(const CMsgGameDataAbilityOrItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataAbilityOrItem& operator=(CMsgGameDataAbilityOrItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataAbilityOrItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataAbilityOrItem* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataAbilityOrItem*>(
               &_CMsgGameDataAbilityOrItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CMsgGameDataAbilityOrItem& a, CMsgGameDataAbilityOrItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataAbilityOrItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataAbilityOrItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataAbilityOrItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataAbilityOrItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataAbilityOrItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataAbilityOrItem& from) {
    CMsgGameDataAbilityOrItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataAbilityOrItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataAbilityOrItem";
  }
  protected:
  explicit CMsgGameDataAbilityOrItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesLocFieldNumber = 8,
    kCastRangesFieldNumber = 30,
    kCastPointsFieldNumber = 31,
    kChannelTimesFieldNumber = 32,
    kCooldownsFieldNumber = 33,
    kDurationsFieldNumber = 34,
    kDamagesFieldNumber = 35,
    kManaCostsFieldNumber = 36,
    kGoldCostsFieldNumber = 37,
    kSpecialValuesFieldNumber = 40,
    kNameFieldNumber = 2,
    kNameLocFieldNumber = 5,
    kDescLocFieldNumber = 6,
    kLoreLocFieldNumber = 7,
    kShardLocFieldNumber = 9,
    kScepterLocFieldNumber = 10,
    kBehaviorFieldNumber = 21,
    kTypeFieldNumber = 20,
    kTargetTeamFieldNumber = 22,
    kTargetTypeFieldNumber = 23,
    kFlagsFieldNumber = 24,
    kDamageFieldNumber = 25,
    kImmunityFieldNumber = 26,
    kDispellableFieldNumber = 27,
    kMaxLevelFieldNumber = 28,
    kIsItemFieldNumber = 50,
    kAbilityHasScepterFieldNumber = 60,
    kAbilityHasShardFieldNumber = 61,
    kAbilityIsGrantedByScepterFieldNumber = 62,
    kAbilityIsGrantedByShardFieldNumber = 63,
    kItemCostFieldNumber = 70,
    kItemInitialChargesFieldNumber = 71,
    kItemNeutralTierFieldNumber = 72,
    kItemStockMaxFieldNumber = 73,
    kItemStockTimeFieldNumber = 74,
    kItemQualityFieldNumber = 85,
    kIdFieldNumber = 1,
  };
  // repeated string notes_loc = 8;
  int notes_loc_size() const;
  private:
  int _internal_notes_loc_size() const;
  public:
  void clear_notes_loc();
  const std::string& notes_loc(int index) const;
  std::string* mutable_notes_loc(int index);
  void set_notes_loc(int index, const std::string& value);
  void set_notes_loc(int index, std::string&& value);
  void set_notes_loc(int index, const char* value);
  void set_notes_loc(int index, const char* value, size_t size);
  std::string* add_notes_loc();
  void add_notes_loc(const std::string& value);
  void add_notes_loc(std::string&& value);
  void add_notes_loc(const char* value);
  void add_notes_loc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notes_loc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notes_loc();
  private:
  const std::string& _internal_notes_loc(int index) const;
  std::string* _internal_add_notes_loc();
  public:

  // repeated uint32 cast_ranges = 30;
  int cast_ranges_size() const;
  private:
  int _internal_cast_ranges_size() const;
  public:
  void clear_cast_ranges();
  private:
  uint32_t _internal_cast_ranges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cast_ranges() const;
  void _internal_add_cast_ranges(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cast_ranges();
  public:
  uint32_t cast_ranges(int index) const;
  void set_cast_ranges(int index, uint32_t value);
  void add_cast_ranges(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cast_ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cast_ranges();

  // repeated float cast_points = 31;
  int cast_points_size() const;
  private:
  int _internal_cast_points_size() const;
  public:
  void clear_cast_points();
  private:
  float _internal_cast_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cast_points() const;
  void _internal_add_cast_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cast_points();
  public:
  float cast_points(int index) const;
  void set_cast_points(int index, float value);
  void add_cast_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cast_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cast_points();

  // repeated float channel_times = 32;
  int channel_times_size() const;
  private:
  int _internal_channel_times_size() const;
  public:
  void clear_channel_times();
  private:
  float _internal_channel_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_channel_times() const;
  void _internal_add_channel_times(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_channel_times();
  public:
  float channel_times(int index) const;
  void set_channel_times(int index, float value);
  void add_channel_times(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      channel_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_channel_times();

  // repeated float cooldowns = 33;
  int cooldowns_size() const;
  private:
  int _internal_cooldowns_size() const;
  public:
  void clear_cooldowns();
  private:
  float _internal_cooldowns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cooldowns() const;
  void _internal_add_cooldowns(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cooldowns();
  public:
  float cooldowns(int index) const;
  void set_cooldowns(int index, float value);
  void add_cooldowns(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cooldowns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cooldowns();

  // repeated float durations = 34;
  int durations_size() const;
  private:
  int _internal_durations_size() const;
  public:
  void clear_durations();
  private:
  float _internal_durations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_durations() const;
  void _internal_add_durations(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_durations();
  public:
  float durations(int index) const;
  void set_durations(int index, float value);
  void add_durations(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      durations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_durations();

  // repeated uint32 damages = 35;
  int damages_size() const;
  private:
  int _internal_damages_size() const;
  public:
  void clear_damages();
  private:
  uint32_t _internal_damages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_damages() const;
  void _internal_add_damages(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_damages();
  public:
  uint32_t damages(int index) const;
  void set_damages(int index, uint32_t value);
  void add_damages(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      damages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_damages();

  // repeated uint32 mana_costs = 36;
  int mana_costs_size() const;
  private:
  int _internal_mana_costs_size() const;
  public:
  void clear_mana_costs();
  private:
  uint32_t _internal_mana_costs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_mana_costs() const;
  void _internal_add_mana_costs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_mana_costs();
  public:
  uint32_t mana_costs(int index) const;
  void set_mana_costs(int index, uint32_t value);
  void add_mana_costs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      mana_costs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_mana_costs();

  // repeated uint32 gold_costs = 37;
  int gold_costs_size() const;
  private:
  int _internal_gold_costs_size() const;
  public:
  void clear_gold_costs();
  private:
  uint32_t _internal_gold_costs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_gold_costs() const;
  void _internal_add_gold_costs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_gold_costs();
  public:
  uint32_t gold_costs(int index) const;
  void set_gold_costs(int index, uint32_t value);
  void add_gold_costs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      gold_costs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_gold_costs();

  // repeated .CMsgGameDataSpecialValues special_values = 40;
  int special_values_size() const;
  private:
  int _internal_special_values_size() const;
  public:
  void clear_special_values();
  ::CMsgGameDataSpecialValues* mutable_special_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValues >*
      mutable_special_values();
  private:
  const ::CMsgGameDataSpecialValues& _internal_special_values(int index) const;
  ::CMsgGameDataSpecialValues* _internal_add_special_values();
  public:
  const ::CMsgGameDataSpecialValues& special_values(int index) const;
  ::CMsgGameDataSpecialValues* add_special_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValues >&
      special_values() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_loc = 5;
  bool has_name_loc() const;
  private:
  bool _internal_has_name_loc() const;
  public:
  void clear_name_loc();
  const std::string& name_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_loc();
  PROTOBUF_NODISCARD std::string* release_name_loc();
  void set_allocated_name_loc(std::string* name_loc);
  private:
  const std::string& _internal_name_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_loc(const std::string& value);
  std::string* _internal_mutable_name_loc();
  public:

  // optional string desc_loc = 6;
  bool has_desc_loc() const;
  private:
  bool _internal_has_desc_loc() const;
  public:
  void clear_desc_loc();
  const std::string& desc_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc_loc();
  PROTOBUF_NODISCARD std::string* release_desc_loc();
  void set_allocated_desc_loc(std::string* desc_loc);
  private:
  const std::string& _internal_desc_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc_loc(const std::string& value);
  std::string* _internal_mutable_desc_loc();
  public:

  // optional string lore_loc = 7;
  bool has_lore_loc() const;
  private:
  bool _internal_has_lore_loc() const;
  public:
  void clear_lore_loc();
  const std::string& lore_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lore_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lore_loc();
  PROTOBUF_NODISCARD std::string* release_lore_loc();
  void set_allocated_lore_loc(std::string* lore_loc);
  private:
  const std::string& _internal_lore_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lore_loc(const std::string& value);
  std::string* _internal_mutable_lore_loc();
  public:

  // optional string shard_loc = 9;
  bool has_shard_loc() const;
  private:
  bool _internal_has_shard_loc() const;
  public:
  void clear_shard_loc();
  const std::string& shard_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shard_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shard_loc();
  PROTOBUF_NODISCARD std::string* release_shard_loc();
  void set_allocated_shard_loc(std::string* shard_loc);
  private:
  const std::string& _internal_shard_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shard_loc(const std::string& value);
  std::string* _internal_mutable_shard_loc();
  public:

  // optional string scepter_loc = 10;
  bool has_scepter_loc() const;
  private:
  bool _internal_has_scepter_loc() const;
  public:
  void clear_scepter_loc();
  const std::string& scepter_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scepter_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scepter_loc();
  PROTOBUF_NODISCARD std::string* release_scepter_loc();
  void set_allocated_scepter_loc(std::string* scepter_loc);
  private:
  const std::string& _internal_scepter_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scepter_loc(const std::string& value);
  std::string* _internal_mutable_scepter_loc();
  public:

  // optional uint64 behavior = 21;
  bool has_behavior() const;
  private:
  bool _internal_has_behavior() const;
  public:
  void clear_behavior();
  uint64_t behavior() const;
  void set_behavior(uint64_t value);
  private:
  uint64_t _internal_behavior() const;
  void _internal_set_behavior(uint64_t value);
  public:

  // optional uint32 type = 20;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 target_team = 22;
  bool has_target_team() const;
  private:
  bool _internal_has_target_team() const;
  public:
  void clear_target_team();
  uint32_t target_team() const;
  void set_target_team(uint32_t value);
  private:
  uint32_t _internal_target_team() const;
  void _internal_set_target_team(uint32_t value);
  public:

  // optional uint32 target_type = 23;
  bool has_target_type() const;
  private:
  bool _internal_has_target_type() const;
  public:
  void clear_target_type();
  uint32_t target_type() const;
  void set_target_type(uint32_t value);
  private:
  uint32_t _internal_target_type() const;
  void _internal_set_target_type(uint32_t value);
  public:

  // optional uint32 flags = 24;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 damage = 25;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // optional uint32 immunity = 26;
  bool has_immunity() const;
  private:
  bool _internal_has_immunity() const;
  public:
  void clear_immunity();
  uint32_t immunity() const;
  void set_immunity(uint32_t value);
  private:
  uint32_t _internal_immunity() const;
  void _internal_set_immunity(uint32_t value);
  public:

  // optional uint32 dispellable = 27;
  bool has_dispellable() const;
  private:
  bool _internal_has_dispellable() const;
  public:
  void clear_dispellable();
  uint32_t dispellable() const;
  void set_dispellable(uint32_t value);
  private:
  uint32_t _internal_dispellable() const;
  void _internal_set_dispellable(uint32_t value);
  public:

  // optional uint32 max_level = 28;
  bool has_max_level() const;
  private:
  bool _internal_has_max_level() const;
  public:
  void clear_max_level();
  uint32_t max_level() const;
  void set_max_level(uint32_t value);
  private:
  uint32_t _internal_max_level() const;
  void _internal_set_max_level(uint32_t value);
  public:

  // optional bool is_item = 50;
  bool has_is_item() const;
  private:
  bool _internal_has_is_item() const;
  public:
  void clear_is_item();
  bool is_item() const;
  void set_is_item(bool value);
  private:
  bool _internal_is_item() const;
  void _internal_set_is_item(bool value);
  public:

  // optional bool ability_has_scepter = 60;
  bool has_ability_has_scepter() const;
  private:
  bool _internal_has_ability_has_scepter() const;
  public:
  void clear_ability_has_scepter();
  bool ability_has_scepter() const;
  void set_ability_has_scepter(bool value);
  private:
  bool _internal_ability_has_scepter() const;
  void _internal_set_ability_has_scepter(bool value);
  public:

  // optional bool ability_has_shard = 61;
  bool has_ability_has_shard() const;
  private:
  bool _internal_has_ability_has_shard() const;
  public:
  void clear_ability_has_shard();
  bool ability_has_shard() const;
  void set_ability_has_shard(bool value);
  private:
  bool _internal_ability_has_shard() const;
  void _internal_set_ability_has_shard(bool value);
  public:

  // optional bool ability_is_granted_by_scepter = 62;
  bool has_ability_is_granted_by_scepter() const;
  private:
  bool _internal_has_ability_is_granted_by_scepter() const;
  public:
  void clear_ability_is_granted_by_scepter();
  bool ability_is_granted_by_scepter() const;
  void set_ability_is_granted_by_scepter(bool value);
  private:
  bool _internal_ability_is_granted_by_scepter() const;
  void _internal_set_ability_is_granted_by_scepter(bool value);
  public:

  // optional bool ability_is_granted_by_shard = 63;
  bool has_ability_is_granted_by_shard() const;
  private:
  bool _internal_has_ability_is_granted_by_shard() const;
  public:
  void clear_ability_is_granted_by_shard();
  bool ability_is_granted_by_shard() const;
  void set_ability_is_granted_by_shard(bool value);
  private:
  bool _internal_ability_is_granted_by_shard() const;
  void _internal_set_ability_is_granted_by_shard(bool value);
  public:

  // optional uint32 item_cost = 70;
  bool has_item_cost() const;
  private:
  bool _internal_has_item_cost() const;
  public:
  void clear_item_cost();
  uint32_t item_cost() const;
  void set_item_cost(uint32_t value);
  private:
  uint32_t _internal_item_cost() const;
  void _internal_set_item_cost(uint32_t value);
  public:

  // optional uint32 item_initial_charges = 71;
  bool has_item_initial_charges() const;
  private:
  bool _internal_has_item_initial_charges() const;
  public:
  void clear_item_initial_charges();
  uint32_t item_initial_charges() const;
  void set_item_initial_charges(uint32_t value);
  private:
  uint32_t _internal_item_initial_charges() const;
  void _internal_set_item_initial_charges(uint32_t value);
  public:

  // optional uint32 item_neutral_tier = 72;
  bool has_item_neutral_tier() const;
  private:
  bool _internal_has_item_neutral_tier() const;
  public:
  void clear_item_neutral_tier();
  uint32_t item_neutral_tier() const;
  void set_item_neutral_tier(uint32_t value);
  private:
  uint32_t _internal_item_neutral_tier() const;
  void _internal_set_item_neutral_tier(uint32_t value);
  public:

  // optional uint32 item_stock_max = 73;
  bool has_item_stock_max() const;
  private:
  bool _internal_has_item_stock_max() const;
  public:
  void clear_item_stock_max();
  uint32_t item_stock_max() const;
  void set_item_stock_max(uint32_t value);
  private:
  uint32_t _internal_item_stock_max() const;
  void _internal_set_item_stock_max(uint32_t value);
  public:

  // optional float item_stock_time = 74;
  bool has_item_stock_time() const;
  private:
  bool _internal_has_item_stock_time() const;
  public:
  void clear_item_stock_time();
  float item_stock_time() const;
  void set_item_stock_time(float value);
  private:
  float _internal_item_stock_time() const;
  void _internal_set_item_stock_time(float value);
  public:

  // optional uint32 item_quality = 85;
  bool has_item_quality() const;
  private:
  bool _internal_has_item_quality() const;
  public:
  void clear_item_quality();
  uint32_t item_quality() const;
  void set_item_quality(uint32_t value);
  private:
  uint32_t _internal_item_quality() const;
  void _internal_set_item_quality(uint32_t value);
  public:

  // optional int32 id = 1 [default = -1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameDataAbilityOrItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notes_loc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cast_ranges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cast_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > channel_times_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cooldowns_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > durations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > damages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > mana_costs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > gold_costs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValues > special_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lore_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shard_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scepter_loc_;
    uint64_t behavior_;
    uint32_t type_;
    uint32_t target_team_;
    uint32_t target_type_;
    uint32_t flags_;
    uint32_t damage_;
    uint32_t immunity_;
    uint32_t dispellable_;
    uint32_t max_level_;
    bool is_item_;
    bool ability_has_scepter_;
    bool ability_has_shard_;
    bool ability_is_granted_by_scepter_;
    bool ability_is_granted_by_shard_;
    uint32_t item_cost_;
    uint32_t item_initial_charges_;
    uint32_t item_neutral_tier_;
    uint32_t item_stock_max_;
    float item_stock_time_;
    uint32_t item_quality_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataHero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataHero) */ {
 public:
  inline CMsgGameDataHero() : CMsgGameDataHero(nullptr) {}
  ~CMsgGameDataHero() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataHero(const CMsgGameDataHero& from);
  CMsgGameDataHero(CMsgGameDataHero&& from) noexcept
    : CMsgGameDataHero() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataHero& operator=(const CMsgGameDataHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataHero& operator=(CMsgGameDataHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataHero* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataHero*>(
               &_CMsgGameDataHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CMsgGameDataHero& a, CMsgGameDataHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataHero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataHero& from) {
    CMsgGameDataHero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataHero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataHero";
  }
  protected:
  explicit CMsgGameDataHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleLevelsFieldNumber = 23,
    kAbilitiesFieldNumber = 40,
    kTalentsFieldNumber = 41,
    kNameFieldNumber = 2,
    kNameLocFieldNumber = 5,
    kBioLocFieldNumber = 6,
    kHypeLocFieldNumber = 7,
    kNpeDescLocFieldNumber = 8,
    kIdFieldNumber = 1,
    kOrderIdFieldNumber = 3,
    kStrBaseFieldNumber = 10,
    kStrGainFieldNumber = 11,
    kAgiBaseFieldNumber = 12,
    kAgiGainFieldNumber = 13,
    kIntBaseFieldNumber = 14,
    kIntGainFieldNumber = 15,
    kPrimaryAttrFieldNumber = 20,
    kComplexityFieldNumber = 21,
    kAttackCapabilityFieldNumber = 22,
    kDamageMinFieldNumber = 24,
    kDamageMaxFieldNumber = 25,
    kAttackRateFieldNumber = 26,
    kAttackRangeFieldNumber = 27,
    kProjectileSpeedFieldNumber = 28,
    kArmorFieldNumber = 29,
    kMagicResistanceFieldNumber = 30,
    kMovementSpeedFieldNumber = 31,
    kTurnRateFieldNumber = 32,
    kSightRangeDayFieldNumber = 33,
    kSightRangeNightFieldNumber = 34,
    kMaxHealthFieldNumber = 35,
    kHealthRegenFieldNumber = 36,
    kMaxManaFieldNumber = 37,
    kManaRegenFieldNumber = 38,
  };
  // repeated uint32 role_levels = 23;
  int role_levels_size() const;
  private:
  int _internal_role_levels_size() const;
  public:
  void clear_role_levels();
  private:
  uint32_t _internal_role_levels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_role_levels() const;
  void _internal_add_role_levels(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_role_levels();
  public:
  uint32_t role_levels(int index) const;
  void set_role_levels(int index, uint32_t value);
  void add_role_levels(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      role_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_role_levels();

  // repeated .CMsgGameDataAbilityOrItem abilities = 40;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::CMsgGameDataAbilityOrItem* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
      mutable_abilities();
  private:
  const ::CMsgGameDataAbilityOrItem& _internal_abilities(int index) const;
  ::CMsgGameDataAbilityOrItem* _internal_add_abilities();
  public:
  const ::CMsgGameDataAbilityOrItem& abilities(int index) const;
  ::CMsgGameDataAbilityOrItem* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
      abilities() const;

  // repeated .CMsgGameDataAbilityOrItem talents = 41;
  int talents_size() const;
  private:
  int _internal_talents_size() const;
  public:
  void clear_talents();
  ::CMsgGameDataAbilityOrItem* mutable_talents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
      mutable_talents();
  private:
  const ::CMsgGameDataAbilityOrItem& _internal_talents(int index) const;
  ::CMsgGameDataAbilityOrItem* _internal_add_talents();
  public:
  const ::CMsgGameDataAbilityOrItem& talents(int index) const;
  ::CMsgGameDataAbilityOrItem* add_talents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
      talents() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_loc = 5;
  bool has_name_loc() const;
  private:
  bool _internal_has_name_loc() const;
  public:
  void clear_name_loc();
  const std::string& name_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_loc();
  PROTOBUF_NODISCARD std::string* release_name_loc();
  void set_allocated_name_loc(std::string* name_loc);
  private:
  const std::string& _internal_name_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_loc(const std::string& value);
  std::string* _internal_mutable_name_loc();
  public:

  // optional string bio_loc = 6;
  bool has_bio_loc() const;
  private:
  bool _internal_has_bio_loc() const;
  public:
  void clear_bio_loc();
  const std::string& bio_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bio_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bio_loc();
  PROTOBUF_NODISCARD std::string* release_bio_loc();
  void set_allocated_bio_loc(std::string* bio_loc);
  private:
  const std::string& _internal_bio_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bio_loc(const std::string& value);
  std::string* _internal_mutable_bio_loc();
  public:

  // optional string hype_loc = 7;
  bool has_hype_loc() const;
  private:
  bool _internal_has_hype_loc() const;
  public:
  void clear_hype_loc();
  const std::string& hype_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hype_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hype_loc();
  PROTOBUF_NODISCARD std::string* release_hype_loc();
  void set_allocated_hype_loc(std::string* hype_loc);
  private:
  const std::string& _internal_hype_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hype_loc(const std::string& value);
  std::string* _internal_mutable_hype_loc();
  public:

  // optional string npe_desc_loc = 8;
  bool has_npe_desc_loc() const;
  private:
  bool _internal_has_npe_desc_loc() const;
  public:
  void clear_npe_desc_loc();
  const std::string& npe_desc_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_npe_desc_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_npe_desc_loc();
  PROTOBUF_NODISCARD std::string* release_npe_desc_loc();
  void set_allocated_npe_desc_loc(std::string* npe_desc_loc);
  private:
  const std::string& _internal_npe_desc_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_npe_desc_loc(const std::string& value);
  std::string* _internal_mutable_npe_desc_loc();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 order_id = 3;
  bool has_order_id() const;
  private:
  bool _internal_has_order_id() const;
  public:
  void clear_order_id();
  uint32_t order_id() const;
  void set_order_id(uint32_t value);
  private:
  uint32_t _internal_order_id() const;
  void _internal_set_order_id(uint32_t value);
  public:

  // optional uint32 str_base = 10;
  bool has_str_base() const;
  private:
  bool _internal_has_str_base() const;
  public:
  void clear_str_base();
  uint32_t str_base() const;
  void set_str_base(uint32_t value);
  private:
  uint32_t _internal_str_base() const;
  void _internal_set_str_base(uint32_t value);
  public:

  // optional float str_gain = 11;
  bool has_str_gain() const;
  private:
  bool _internal_has_str_gain() const;
  public:
  void clear_str_gain();
  float str_gain() const;
  void set_str_gain(float value);
  private:
  float _internal_str_gain() const;
  void _internal_set_str_gain(float value);
  public:

  // optional uint32 agi_base = 12;
  bool has_agi_base() const;
  private:
  bool _internal_has_agi_base() const;
  public:
  void clear_agi_base();
  uint32_t agi_base() const;
  void set_agi_base(uint32_t value);
  private:
  uint32_t _internal_agi_base() const;
  void _internal_set_agi_base(uint32_t value);
  public:

  // optional float agi_gain = 13;
  bool has_agi_gain() const;
  private:
  bool _internal_has_agi_gain() const;
  public:
  void clear_agi_gain();
  float agi_gain() const;
  void set_agi_gain(float value);
  private:
  float _internal_agi_gain() const;
  void _internal_set_agi_gain(float value);
  public:

  // optional uint32 int_base = 14;
  bool has_int_base() const;
  private:
  bool _internal_has_int_base() const;
  public:
  void clear_int_base();
  uint32_t int_base() const;
  void set_int_base(uint32_t value);
  private:
  uint32_t _internal_int_base() const;
  void _internal_set_int_base(uint32_t value);
  public:

  // optional float int_gain = 15;
  bool has_int_gain() const;
  private:
  bool _internal_has_int_gain() const;
  public:
  void clear_int_gain();
  float int_gain() const;
  void set_int_gain(float value);
  private:
  float _internal_int_gain() const;
  void _internal_set_int_gain(float value);
  public:

  // optional uint32 primary_attr = 20;
  bool has_primary_attr() const;
  private:
  bool _internal_has_primary_attr() const;
  public:
  void clear_primary_attr();
  uint32_t primary_attr() const;
  void set_primary_attr(uint32_t value);
  private:
  uint32_t _internal_primary_attr() const;
  void _internal_set_primary_attr(uint32_t value);
  public:

  // optional uint32 complexity = 21;
  bool has_complexity() const;
  private:
  bool _internal_has_complexity() const;
  public:
  void clear_complexity();
  uint32_t complexity() const;
  void set_complexity(uint32_t value);
  private:
  uint32_t _internal_complexity() const;
  void _internal_set_complexity(uint32_t value);
  public:

  // optional uint32 attack_capability = 22;
  bool has_attack_capability() const;
  private:
  bool _internal_has_attack_capability() const;
  public:
  void clear_attack_capability();
  uint32_t attack_capability() const;
  void set_attack_capability(uint32_t value);
  private:
  uint32_t _internal_attack_capability() const;
  void _internal_set_attack_capability(uint32_t value);
  public:

  // optional uint32 damage_min = 24;
  bool has_damage_min() const;
  private:
  bool _internal_has_damage_min() const;
  public:
  void clear_damage_min();
  uint32_t damage_min() const;
  void set_damage_min(uint32_t value);
  private:
  uint32_t _internal_damage_min() const;
  void _internal_set_damage_min(uint32_t value);
  public:

  // optional uint32 damage_max = 25;
  bool has_damage_max() const;
  private:
  bool _internal_has_damage_max() const;
  public:
  void clear_damage_max();
  uint32_t damage_max() const;
  void set_damage_max(uint32_t value);
  private:
  uint32_t _internal_damage_max() const;
  void _internal_set_damage_max(uint32_t value);
  public:

  // optional float attack_rate = 26;
  bool has_attack_rate() const;
  private:
  bool _internal_has_attack_rate() const;
  public:
  void clear_attack_rate();
  float attack_rate() const;
  void set_attack_rate(float value);
  private:
  float _internal_attack_rate() const;
  void _internal_set_attack_rate(float value);
  public:

  // optional uint32 attack_range = 27;
  bool has_attack_range() const;
  private:
  bool _internal_has_attack_range() const;
  public:
  void clear_attack_range();
  uint32_t attack_range() const;
  void set_attack_range(uint32_t value);
  private:
  uint32_t _internal_attack_range() const;
  void _internal_set_attack_range(uint32_t value);
  public:

  // optional uint32 projectile_speed = 28;
  bool has_projectile_speed() const;
  private:
  bool _internal_has_projectile_speed() const;
  public:
  void clear_projectile_speed();
  uint32_t projectile_speed() const;
  void set_projectile_speed(uint32_t value);
  private:
  uint32_t _internal_projectile_speed() const;
  void _internal_set_projectile_speed(uint32_t value);
  public:

  // optional float armor = 29;
  bool has_armor() const;
  private:
  bool _internal_has_armor() const;
  public:
  void clear_armor();
  float armor() const;
  void set_armor(float value);
  private:
  float _internal_armor() const;
  void _internal_set_armor(float value);
  public:

  // optional uint32 magic_resistance = 30;
  bool has_magic_resistance() const;
  private:
  bool _internal_has_magic_resistance() const;
  public:
  void clear_magic_resistance();
  uint32_t magic_resistance() const;
  void set_magic_resistance(uint32_t value);
  private:
  uint32_t _internal_magic_resistance() const;
  void _internal_set_magic_resistance(uint32_t value);
  public:

  // optional uint32 movement_speed = 31;
  bool has_movement_speed() const;
  private:
  bool _internal_has_movement_speed() const;
  public:
  void clear_movement_speed();
  uint32_t movement_speed() const;
  void set_movement_speed(uint32_t value);
  private:
  uint32_t _internal_movement_speed() const;
  void _internal_set_movement_speed(uint32_t value);
  public:

  // optional float turn_rate = 32;
  bool has_turn_rate() const;
  private:
  bool _internal_has_turn_rate() const;
  public:
  void clear_turn_rate();
  float turn_rate() const;
  void set_turn_rate(float value);
  private:
  float _internal_turn_rate() const;
  void _internal_set_turn_rate(float value);
  public:

  // optional uint32 sight_range_day = 33;
  bool has_sight_range_day() const;
  private:
  bool _internal_has_sight_range_day() const;
  public:
  void clear_sight_range_day();
  uint32_t sight_range_day() const;
  void set_sight_range_day(uint32_t value);
  private:
  uint32_t _internal_sight_range_day() const;
  void _internal_set_sight_range_day(uint32_t value);
  public:

  // optional uint32 sight_range_night = 34;
  bool has_sight_range_night() const;
  private:
  bool _internal_has_sight_range_night() const;
  public:
  void clear_sight_range_night();
  uint32_t sight_range_night() const;
  void set_sight_range_night(uint32_t value);
  private:
  uint32_t _internal_sight_range_night() const;
  void _internal_set_sight_range_night(uint32_t value);
  public:

  // optional uint32 max_health = 35;
  bool has_max_health() const;
  private:
  bool _internal_has_max_health() const;
  public:
  void clear_max_health();
  uint32_t max_health() const;
  void set_max_health(uint32_t value);
  private:
  uint32_t _internal_max_health() const;
  void _internal_set_max_health(uint32_t value);
  public:

  // optional float health_regen = 36;
  bool has_health_regen() const;
  private:
  bool _internal_has_health_regen() const;
  public:
  void clear_health_regen();
  float health_regen() const;
  void set_health_regen(float value);
  private:
  float _internal_health_regen() const;
  void _internal_set_health_regen(float value);
  public:

  // optional uint32 max_mana = 37;
  bool has_max_mana() const;
  private:
  bool _internal_has_max_mana() const;
  public:
  void clear_max_mana();
  uint32_t max_mana() const;
  void set_max_mana(uint32_t value);
  private:
  uint32_t _internal_max_mana() const;
  void _internal_set_max_mana(uint32_t value);
  public:

  // optional float mana_regen = 38;
  bool has_mana_regen() const;
  private:
  bool _internal_has_mana_regen() const;
  public:
  void clear_mana_regen();
  float mana_regen() const;
  void set_mana_regen(float value);
  private:
  float _internal_mana_regen() const;
  void _internal_set_mana_regen(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameDataHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > role_levels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem > abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem > talents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bio_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hype_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr npe_desc_loc_;
    uint32_t id_;
    uint32_t order_id_;
    uint32_t str_base_;
    float str_gain_;
    uint32_t agi_base_;
    float agi_gain_;
    uint32_t int_base_;
    float int_gain_;
    uint32_t primary_attr_;
    uint32_t complexity_;
    uint32_t attack_capability_;
    uint32_t damage_min_;
    uint32_t damage_max_;
    float attack_rate_;
    uint32_t attack_range_;
    uint32_t projectile_speed_;
    float armor_;
    uint32_t magic_resistance_;
    uint32_t movement_speed_;
    float turn_rate_;
    uint32_t sight_range_day_;
    uint32_t sight_range_night_;
    uint32_t max_health_;
    float health_regen_;
    uint32_t max_mana_;
    float mana_regen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataAbilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataAbilities) */ {
 public:
  inline CMsgGameDataAbilities() : CMsgGameDataAbilities(nullptr) {}
  ~CMsgGameDataAbilities() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataAbilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataAbilities(const CMsgGameDataAbilities& from);
  CMsgGameDataAbilities(CMsgGameDataAbilities&& from) noexcept
    : CMsgGameDataAbilities() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataAbilities& operator=(const CMsgGameDataAbilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataAbilities& operator=(CMsgGameDataAbilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataAbilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataAbilities* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataAbilities*>(
               &_CMsgGameDataAbilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CMsgGameDataAbilities& a, CMsgGameDataAbilities& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataAbilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataAbilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataAbilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataAbilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataAbilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataAbilities& from) {
    CMsgGameDataAbilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataAbilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataAbilities";
  }
  protected:
  explicit CMsgGameDataAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilitiesFieldNumber = 1,
  };
  // repeated .CMsgGameDataAbilityOrItem abilities = 1;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::CMsgGameDataAbilityOrItem* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
      mutable_abilities();
  private:
  const ::CMsgGameDataAbilityOrItem& _internal_abilities(int index) const;
  ::CMsgGameDataAbilityOrItem* _internal_add_abilities();
  public:
  const ::CMsgGameDataAbilityOrItem& abilities(int index) const;
  ::CMsgGameDataAbilityOrItem* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
      abilities() const;

  // @@protoc_insertion_point(class_scope:CMsgGameDataAbilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem > abilities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataItems) */ {
 public:
  inline CMsgGameDataItems() : CMsgGameDataItems(nullptr) {}
  ~CMsgGameDataItems() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataItems(const CMsgGameDataItems& from);
  CMsgGameDataItems(CMsgGameDataItems&& from) noexcept
    : CMsgGameDataItems() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataItems& operator=(const CMsgGameDataItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataItems& operator=(CMsgGameDataItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataItems* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataItems*>(
               &_CMsgGameDataItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CMsgGameDataItems& a, CMsgGameDataItems& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataItems& from) {
    CMsgGameDataItems::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataItems";
  }
  protected:
  explicit CMsgGameDataItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .CMsgGameDataAbilityOrItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CMsgGameDataAbilityOrItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
      mutable_items();
  private:
  const ::CMsgGameDataAbilityOrItem& _internal_items(int index) const;
  ::CMsgGameDataAbilityOrItem* _internal_add_items();
  public:
  const ::CMsgGameDataAbilityOrItem& items(int index) const;
  ::CMsgGameDataAbilityOrItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:CMsgGameDataItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataHeroes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataHeroes) */ {
 public:
  inline CMsgGameDataHeroes() : CMsgGameDataHeroes(nullptr) {}
  ~CMsgGameDataHeroes() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataHeroes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataHeroes(const CMsgGameDataHeroes& from);
  CMsgGameDataHeroes(CMsgGameDataHeroes&& from) noexcept
    : CMsgGameDataHeroes() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataHeroes& operator=(const CMsgGameDataHeroes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataHeroes& operator=(CMsgGameDataHeroes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataHeroes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataHeroes* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataHeroes*>(
               &_CMsgGameDataHeroes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CMsgGameDataHeroes& a, CMsgGameDataHeroes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataHeroes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataHeroes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataHeroes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataHeroes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataHeroes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataHeroes& from) {
    CMsgGameDataHeroes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataHeroes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataHeroes";
  }
  protected:
  explicit CMsgGameDataHeroes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroesFieldNumber = 1,
  };
  // repeated .CMsgGameDataHero heroes = 1;
  int heroes_size() const;
  private:
  int _internal_heroes_size() const;
  public:
  void clear_heroes();
  ::CMsgGameDataHero* mutable_heroes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHero >*
      mutable_heroes();
  private:
  const ::CMsgGameDataHero& _internal_heroes(int index) const;
  ::CMsgGameDataHero* _internal_add_heroes();
  public:
  const ::CMsgGameDataHero& heroes(int index) const;
  ::CMsgGameDataHero* add_heroes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHero >&
      heroes() const;

  // @@protoc_insertion_point(class_scope:CMsgGameDataHeroes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHero > heroes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataHeroList_HeroInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataHeroList.HeroInfo) */ {
 public:
  inline CMsgGameDataHeroList_HeroInfo() : CMsgGameDataHeroList_HeroInfo(nullptr) {}
  ~CMsgGameDataHeroList_HeroInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataHeroList_HeroInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataHeroList_HeroInfo(const CMsgGameDataHeroList_HeroInfo& from);
  CMsgGameDataHeroList_HeroInfo(CMsgGameDataHeroList_HeroInfo&& from) noexcept
    : CMsgGameDataHeroList_HeroInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataHeroList_HeroInfo& operator=(const CMsgGameDataHeroList_HeroInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataHeroList_HeroInfo& operator=(CMsgGameDataHeroList_HeroInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataHeroList_HeroInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataHeroList_HeroInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataHeroList_HeroInfo*>(
               &_CMsgGameDataHeroList_HeroInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CMsgGameDataHeroList_HeroInfo& a, CMsgGameDataHeroList_HeroInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataHeroList_HeroInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataHeroList_HeroInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataHeroList_HeroInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataHeroList_HeroInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataHeroList_HeroInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataHeroList_HeroInfo& from) {
    CMsgGameDataHeroList_HeroInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataHeroList_HeroInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataHeroList.HeroInfo";
  }
  protected:
  explicit CMsgGameDataHeroList_HeroInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNameLocFieldNumber = 3,
    kNameEnglishLocFieldNumber = 4,
    kIdFieldNumber = 1,
    kPrimaryAttrFieldNumber = 5,
    kComplexityFieldNumber = 6,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_loc = 3;
  bool has_name_loc() const;
  private:
  bool _internal_has_name_loc() const;
  public:
  void clear_name_loc();
  const std::string& name_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_loc();
  PROTOBUF_NODISCARD std::string* release_name_loc();
  void set_allocated_name_loc(std::string* name_loc);
  private:
  const std::string& _internal_name_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_loc(const std::string& value);
  std::string* _internal_mutable_name_loc();
  public:

  // optional string name_english_loc = 4;
  bool has_name_english_loc() const;
  private:
  bool _internal_has_name_english_loc() const;
  public:
  void clear_name_english_loc();
  const std::string& name_english_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_english_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_english_loc();
  PROTOBUF_NODISCARD std::string* release_name_english_loc();
  void set_allocated_name_english_loc(std::string* name_english_loc);
  private:
  const std::string& _internal_name_english_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_english_loc(const std::string& value);
  std::string* _internal_mutable_name_english_loc();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 primary_attr = 5;
  bool has_primary_attr() const;
  private:
  bool _internal_has_primary_attr() const;
  public:
  void clear_primary_attr();
  uint32_t primary_attr() const;
  void set_primary_attr(uint32_t value);
  private:
  uint32_t _internal_primary_attr() const;
  void _internal_set_primary_attr(uint32_t value);
  public:

  // optional uint32 complexity = 6;
  bool has_complexity() const;
  private:
  bool _internal_has_complexity() const;
  public:
  void clear_complexity();
  uint32_t complexity() const;
  void set_complexity(uint32_t value);
  private:
  uint32_t _internal_complexity() const;
  void _internal_set_complexity(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameDataHeroList.HeroInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_english_loc_;
    uint32_t id_;
    uint32_t primary_attr_;
    uint32_t complexity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataHeroList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataHeroList) */ {
 public:
  inline CMsgGameDataHeroList() : CMsgGameDataHeroList(nullptr) {}
  ~CMsgGameDataHeroList() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataHeroList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataHeroList(const CMsgGameDataHeroList& from);
  CMsgGameDataHeroList(CMsgGameDataHeroList&& from) noexcept
    : CMsgGameDataHeroList() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataHeroList& operator=(const CMsgGameDataHeroList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataHeroList& operator=(CMsgGameDataHeroList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataHeroList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataHeroList* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataHeroList*>(
               &_CMsgGameDataHeroList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CMsgGameDataHeroList& a, CMsgGameDataHeroList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataHeroList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataHeroList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataHeroList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataHeroList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataHeroList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataHeroList& from) {
    CMsgGameDataHeroList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataHeroList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataHeroList";
  }
  protected:
  explicit CMsgGameDataHeroList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameDataHeroList_HeroInfo HeroInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kHeroesFieldNumber = 1,
  };
  // repeated .CMsgGameDataHeroList.HeroInfo heroes = 1;
  int heroes_size() const;
  private:
  int _internal_heroes_size() const;
  public:
  void clear_heroes();
  ::CMsgGameDataHeroList_HeroInfo* mutable_heroes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHeroList_HeroInfo >*
      mutable_heroes();
  private:
  const ::CMsgGameDataHeroList_HeroInfo& _internal_heroes(int index) const;
  ::CMsgGameDataHeroList_HeroInfo* _internal_add_heroes();
  public:
  const ::CMsgGameDataHeroList_HeroInfo& heroes(int index) const;
  ::CMsgGameDataHeroList_HeroInfo* add_heroes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHeroList_HeroInfo >&
      heroes() const;

  // @@protoc_insertion_point(class_scope:CMsgGameDataHeroList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHeroList_HeroInfo > heroes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataItemAbilityList_ItemAbilityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataItemAbilityList.ItemAbilityInfo) */ {
 public:
  inline CMsgGameDataItemAbilityList_ItemAbilityInfo() : CMsgGameDataItemAbilityList_ItemAbilityInfo(nullptr) {}
  ~CMsgGameDataItemAbilityList_ItemAbilityInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataItemAbilityList_ItemAbilityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataItemAbilityList_ItemAbilityInfo(const CMsgGameDataItemAbilityList_ItemAbilityInfo& from);
  CMsgGameDataItemAbilityList_ItemAbilityInfo(CMsgGameDataItemAbilityList_ItemAbilityInfo&& from) noexcept
    : CMsgGameDataItemAbilityList_ItemAbilityInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataItemAbilityList_ItemAbilityInfo& operator=(const CMsgGameDataItemAbilityList_ItemAbilityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataItemAbilityList_ItemAbilityInfo& operator=(CMsgGameDataItemAbilityList_ItemAbilityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataItemAbilityList_ItemAbilityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataItemAbilityList_ItemAbilityInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataItemAbilityList_ItemAbilityInfo*>(
               &_CMsgGameDataItemAbilityList_ItemAbilityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CMsgGameDataItemAbilityList_ItemAbilityInfo& a, CMsgGameDataItemAbilityList_ItemAbilityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataItemAbilityList_ItemAbilityInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataItemAbilityList_ItemAbilityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataItemAbilityList_ItemAbilityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataItemAbilityList_ItemAbilityInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataItemAbilityList_ItemAbilityInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataItemAbilityList_ItemAbilityInfo& from) {
    CMsgGameDataItemAbilityList_ItemAbilityInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataItemAbilityList_ItemAbilityInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataItemAbilityList.ItemAbilityInfo";
  }
  protected:
  explicit CMsgGameDataItemAbilityList_ItemAbilityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNameLocFieldNumber = 3,
    kNameEnglishLocFieldNumber = 4,
    kNeutralItemTierFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_loc = 3;
  bool has_name_loc() const;
  private:
  bool _internal_has_name_loc() const;
  public:
  void clear_name_loc();
  const std::string& name_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_loc();
  PROTOBUF_NODISCARD std::string* release_name_loc();
  void set_allocated_name_loc(std::string* name_loc);
  private:
  const std::string& _internal_name_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_loc(const std::string& value);
  std::string* _internal_mutable_name_loc();
  public:

  // optional string name_english_loc = 4;
  bool has_name_english_loc() const;
  private:
  bool _internal_has_name_english_loc() const;
  public:
  void clear_name_english_loc();
  const std::string& name_english_loc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_english_loc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_english_loc();
  PROTOBUF_NODISCARD std::string* release_name_english_loc();
  void set_allocated_name_english_loc(std::string* name_english_loc);
  private:
  const std::string& _internal_name_english_loc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_english_loc(const std::string& value);
  std::string* _internal_mutable_name_english_loc();
  public:

  // optional int32 neutral_item_tier = 5;
  bool has_neutral_item_tier() const;
  private:
  bool _internal_has_neutral_item_tier() const;
  public:
  void clear_neutral_item_tier();
  int32_t neutral_item_tier() const;
  void set_neutral_item_tier(int32_t value);
  private:
  int32_t _internal_neutral_item_tier() const;
  void _internal_set_neutral_item_tier(int32_t value);
  public:

  // optional int32 id = 1 [default = -1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameDataItemAbilityList.ItemAbilityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_loc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_english_loc_;
    int32_t neutral_item_tier_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameDataItemAbilityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameDataItemAbilityList) */ {
 public:
  inline CMsgGameDataItemAbilityList() : CMsgGameDataItemAbilityList(nullptr) {}
  ~CMsgGameDataItemAbilityList() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameDataItemAbilityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameDataItemAbilityList(const CMsgGameDataItemAbilityList& from);
  CMsgGameDataItemAbilityList(CMsgGameDataItemAbilityList&& from) noexcept
    : CMsgGameDataItemAbilityList() {
    *this = ::std::move(from);
  }

  inline CMsgGameDataItemAbilityList& operator=(const CMsgGameDataItemAbilityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameDataItemAbilityList& operator=(CMsgGameDataItemAbilityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameDataItemAbilityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameDataItemAbilityList* internal_default_instance() {
    return reinterpret_cast<const CMsgGameDataItemAbilityList*>(
               &_CMsgGameDataItemAbilityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(CMsgGameDataItemAbilityList& a, CMsgGameDataItemAbilityList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameDataItemAbilityList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameDataItemAbilityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameDataItemAbilityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameDataItemAbilityList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameDataItemAbilityList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameDataItemAbilityList& from) {
    CMsgGameDataItemAbilityList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameDataItemAbilityList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameDataItemAbilityList";
  }
  protected:
  explicit CMsgGameDataItemAbilityList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameDataItemAbilityList_ItemAbilityInfo ItemAbilityInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kItemabilitiesFieldNumber = 1,
  };
  // repeated .CMsgGameDataItemAbilityList.ItemAbilityInfo itemabilities = 1;
  int itemabilities_size() const;
  private:
  int _internal_itemabilities_size() const;
  public:
  void clear_itemabilities();
  ::CMsgGameDataItemAbilityList_ItemAbilityInfo* mutable_itemabilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataItemAbilityList_ItemAbilityInfo >*
      mutable_itemabilities();
  private:
  const ::CMsgGameDataItemAbilityList_ItemAbilityInfo& _internal_itemabilities(int index) const;
  ::CMsgGameDataItemAbilityList_ItemAbilityInfo* _internal_add_itemabilities();
  public:
  const ::CMsgGameDataItemAbilityList_ItemAbilityInfo& itemabilities(int index) const;
  ::CMsgGameDataItemAbilityList_ItemAbilityInfo* add_itemabilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataItemAbilityList_ItemAbilityInfo >&
      itemabilities() const;

  // @@protoc_insertion_point(class_scope:CMsgGameDataItemAbilityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataItemAbilityList_ItemAbilityInfo > itemabilities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyAbilityDraftData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyAbilityDraftData) */ {
 public:
  inline CMsgLobbyAbilityDraftData() : CMsgLobbyAbilityDraftData(nullptr) {}
  ~CMsgLobbyAbilityDraftData() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyAbilityDraftData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyAbilityDraftData(const CMsgLobbyAbilityDraftData& from);
  CMsgLobbyAbilityDraftData(CMsgLobbyAbilityDraftData&& from) noexcept
    : CMsgLobbyAbilityDraftData() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyAbilityDraftData& operator=(const CMsgLobbyAbilityDraftData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyAbilityDraftData& operator=(CMsgLobbyAbilityDraftData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyAbilityDraftData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyAbilityDraftData* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyAbilityDraftData*>(
               &_CMsgLobbyAbilityDraftData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CMsgLobbyAbilityDraftData& a, CMsgLobbyAbilityDraftData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyAbilityDraftData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyAbilityDraftData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyAbilityDraftData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyAbilityDraftData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyAbilityDraftData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyAbilityDraftData& from) {
    CMsgLobbyAbilityDraftData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyAbilityDraftData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyAbilityDraftData";
  }
  protected:
  explicit CMsgLobbyAbilityDraftData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShuffleDraftOrderFieldNumber = 1,
  };
  // optional bool shuffle_draft_order = 1;
  bool has_shuffle_draft_order() const;
  private:
  bool _internal_has_shuffle_draft_order() const;
  public:
  void clear_shuffle_draft_order();
  bool shuffle_draft_order() const;
  void set_shuffle_draft_order(bool value);
  private:
  bool _internal_shuffle_draft_order() const;
  void _internal_set_shuffle_draft_order(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyAbilityDraftData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool shuffle_draft_order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSOEconItemDropRateBonus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOEconItemDropRateBonus) */ {
 public:
  inline CSOEconItemDropRateBonus() : CSOEconItemDropRateBonus(nullptr) {}
  ~CSOEconItemDropRateBonus() override;
  explicit PROTOBUF_CONSTEXPR CSOEconItemDropRateBonus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOEconItemDropRateBonus(const CSOEconItemDropRateBonus& from);
  CSOEconItemDropRateBonus(CSOEconItemDropRateBonus&& from) noexcept
    : CSOEconItemDropRateBonus() {
    *this = ::std::move(from);
  }

  inline CSOEconItemDropRateBonus& operator=(const CSOEconItemDropRateBonus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOEconItemDropRateBonus& operator=(CSOEconItemDropRateBonus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOEconItemDropRateBonus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOEconItemDropRateBonus* internal_default_instance() {
    return reinterpret_cast<const CSOEconItemDropRateBonus*>(
               &_CSOEconItemDropRateBonus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(CSOEconItemDropRateBonus& a, CSOEconItemDropRateBonus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOEconItemDropRateBonus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOEconItemDropRateBonus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSOEconItemDropRateBonus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSOEconItemDropRateBonus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOEconItemDropRateBonus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSOEconItemDropRateBonus& from) {
    CSOEconItemDropRateBonus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOEconItemDropRateBonus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOEconItemDropRateBonus";
  }
  protected:
  explicit CSOEconItemDropRateBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kExpirationDateFieldNumber = 2,
    kBonusFieldNumber = 3,
    kBonusCountFieldNumber = 4,
    kItemIdFieldNumber = 5,
    kDefIndexFieldNumber = 6,
    kSecondsLeftFieldNumber = 7,
    kBoosterTypeFieldNumber = 8,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional fixed32 expiration_date = 2;
  bool has_expiration_date() const;
  private:
  bool _internal_has_expiration_date() const;
  public:
  void clear_expiration_date();
  uint32_t expiration_date() const;
  void set_expiration_date(uint32_t value);
  private:
  uint32_t _internal_expiration_date() const;
  void _internal_set_expiration_date(uint32_t value);
  public:

  // optional float bonus = 3 [(.key_field) = true];
  bool has_bonus() const;
  private:
  bool _internal_has_bonus() const;
  public:
  void clear_bonus();
  float bonus() const;
  void set_bonus(float value);
  private:
  float _internal_bonus() const;
  void _internal_set_bonus(float value);
  public:

  // optional uint32 bonus_count = 4;
  bool has_bonus_count() const;
  private:
  bool _internal_has_bonus_count() const;
  public:
  void clear_bonus_count();
  uint32_t bonus_count() const;
  void set_bonus_count(uint32_t value);
  private:
  uint32_t _internal_bonus_count() const;
  void _internal_set_bonus_count(uint32_t value);
  public:

  // optional uint64 item_id = 5;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 def_index = 6;
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  uint32_t def_index() const;
  void set_def_index(uint32_t value);
  private:
  uint32_t _internal_def_index() const;
  void _internal_set_def_index(uint32_t value);
  public:

  // optional uint32 seconds_left = 7;
  bool has_seconds_left() const;
  private:
  bool _internal_has_seconds_left() const;
  public:
  void clear_seconds_left();
  uint32_t seconds_left() const;
  void set_seconds_left(uint32_t value);
  private:
  uint32_t _internal_seconds_left() const;
  void _internal_set_seconds_left(uint32_t value);
  public:

  // optional uint32 booster_type = 8 [(.key_field) = true];
  bool has_booster_type() const;
  private:
  bool _internal_has_booster_type() const;
  public:
  void clear_booster_type();
  uint32_t booster_type() const;
  void set_booster_type(uint32_t value);
  private:
  uint32_t _internal_booster_type() const;
  void _internal_set_booster_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSOEconItemDropRateBonus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t expiration_date_;
    float bonus_;
    uint32_t bonus_count_;
    uint64_t item_id_;
    uint32_t def_index_;
    uint32_t seconds_left_;
    uint32_t booster_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CSOEconItemTournamentPassport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOEconItemTournamentPassport) */ {
 public:
  inline CSOEconItemTournamentPassport() : CSOEconItemTournamentPassport(nullptr) {}
  ~CSOEconItemTournamentPassport() override;
  explicit PROTOBUF_CONSTEXPR CSOEconItemTournamentPassport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOEconItemTournamentPassport(const CSOEconItemTournamentPassport& from);
  CSOEconItemTournamentPassport(CSOEconItemTournamentPassport&& from) noexcept
    : CSOEconItemTournamentPassport() {
    *this = ::std::move(from);
  }

  inline CSOEconItemTournamentPassport& operator=(const CSOEconItemTournamentPassport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOEconItemTournamentPassport& operator=(CSOEconItemTournamentPassport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOEconItemTournamentPassport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOEconItemTournamentPassport* internal_default_instance() {
    return reinterpret_cast<const CSOEconItemTournamentPassport*>(
               &_CSOEconItemTournamentPassport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(CSOEconItemTournamentPassport& a, CSOEconItemTournamentPassport& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOEconItemTournamentPassport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOEconItemTournamentPassport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSOEconItemTournamentPassport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSOEconItemTournamentPassport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOEconItemTournamentPassport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSOEconItemTournamentPassport& from) {
    CSOEconItemTournamentPassport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOEconItemTournamentPassport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOEconItemTournamentPassport";
  }
  protected:
  explicit CSOEconItemTournamentPassport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kLeagueIdFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kOriginalPurchaserIdFieldNumber = 4,
    kPassportsBoughtFieldNumber = 5,
    kVersionFieldNumber = 6,
    kDefIndexFieldNumber = 7,
    kRewardFlagsFieldNumber = 8,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint64 item_id = 3;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 original_purchaser_id = 4;
  bool has_original_purchaser_id() const;
  private:
  bool _internal_has_original_purchaser_id() const;
  public:
  void clear_original_purchaser_id();
  uint32_t original_purchaser_id() const;
  void set_original_purchaser_id(uint32_t value);
  private:
  uint32_t _internal_original_purchaser_id() const;
  void _internal_set_original_purchaser_id(uint32_t value);
  public:

  // optional uint32 passports_bought = 5;
  bool has_passports_bought() const;
  private:
  bool _internal_has_passports_bought() const;
  public:
  void clear_passports_bought();
  uint32_t passports_bought() const;
  void set_passports_bought(uint32_t value);
  private:
  uint32_t _internal_passports_bought() const;
  void _internal_set_passports_bought(uint32_t value);
  public:

  // optional uint32 version = 6;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional uint32 def_index = 7;
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  uint32_t def_index() const;
  void set_def_index(uint32_t value);
  private:
  uint32_t _internal_def_index() const;
  void _internal_set_def_index(uint32_t value);
  public:

  // optional uint32 reward_flags = 8;
  bool has_reward_flags() const;
  private:
  bool _internal_has_reward_flags() const;
  public:
  void clear_reward_flags();
  uint32_t reward_flags() const;
  void set_reward_flags(uint32_t value);
  private:
  uint32_t _internal_reward_flags() const;
  void _internal_set_reward_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSOEconItemTournamentPassport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t league_id_;
    uint64_t item_id_;
    uint32_t original_purchaser_id_;
    uint32_t passports_bought_;
    uint32_t version_;
    uint32_t def_index_;
    uint32_t reward_flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgStickerbookSticker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStickerbookSticker) */ {
 public:
  inline CMsgStickerbookSticker() : CMsgStickerbookSticker(nullptr) {}
  ~CMsgStickerbookSticker() override;
  explicit PROTOBUF_CONSTEXPR CMsgStickerbookSticker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStickerbookSticker(const CMsgStickerbookSticker& from);
  CMsgStickerbookSticker(CMsgStickerbookSticker&& from) noexcept
    : CMsgStickerbookSticker() {
    *this = ::std::move(from);
  }

  inline CMsgStickerbookSticker& operator=(const CMsgStickerbookSticker& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStickerbookSticker& operator=(CMsgStickerbookSticker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStickerbookSticker& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStickerbookSticker* internal_default_instance() {
    return reinterpret_cast<const CMsgStickerbookSticker*>(
               &_CMsgStickerbookSticker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(CMsgStickerbookSticker& a, CMsgStickerbookSticker& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStickerbookSticker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStickerbookSticker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStickerbookSticker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStickerbookSticker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStickerbookSticker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgStickerbookSticker& from) {
    CMsgStickerbookSticker::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStickerbookSticker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStickerbookSticker";
  }
  protected:
  explicit CMsgStickerbookSticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefIdFieldNumber = 1,
    kStickerNumFieldNumber = 2,
    kQualityFieldNumber = 3,
    kPositionXFieldNumber = 4,
    kPositionYFieldNumber = 5,
    kRotationFieldNumber = 6,
    kScaleFieldNumber = 7,
    kPositionZFieldNumber = 8,
    kSourceItemIdFieldNumber = 9,
    kDepthBiasFieldNumber = 10,
  };
  // optional uint32 item_def_id = 1;
  bool has_item_def_id() const;
  private:
  bool _internal_has_item_def_id() const;
  public:
  void clear_item_def_id();
  uint32_t item_def_id() const;
  void set_item_def_id(uint32_t value);
  private:
  uint32_t _internal_item_def_id() const;
  void _internal_set_item_def_id(uint32_t value);
  public:

  // optional uint32 sticker_num = 2;
  bool has_sticker_num() const;
  private:
  bool _internal_has_sticker_num() const;
  public:
  void clear_sticker_num();
  uint32_t sticker_num() const;
  void set_sticker_num(uint32_t value);
  private:
  uint32_t _internal_sticker_num() const;
  void _internal_set_sticker_num(uint32_t value);
  public:

  // optional uint32 quality = 3;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  uint32_t quality() const;
  void set_quality(uint32_t value);
  private:
  uint32_t _internal_quality() const;
  void _internal_set_quality(uint32_t value);
  public:

  // optional float position_x = 4;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  float position_x() const;
  void set_position_x(float value);
  private:
  float _internal_position_x() const;
  void _internal_set_position_x(float value);
  public:

  // optional float position_y = 5;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  float position_y() const;
  void set_position_y(float value);
  private:
  float _internal_position_y() const;
  void _internal_set_position_y(float value);
  public:

  // optional float rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // optional float scale = 7;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float position_z = 8;
  bool has_position_z() const;
  private:
  bool _internal_has_position_z() const;
  public:
  void clear_position_z();
  float position_z() const;
  void set_position_z(float value);
  private:
  float _internal_position_z() const;
  void _internal_set_position_z(float value);
  public:

  // optional uint64 source_item_id = 9;
  bool has_source_item_id() const;
  private:
  bool _internal_has_source_item_id() const;
  public:
  void clear_source_item_id();
  uint64_t source_item_id() const;
  void set_source_item_id(uint64_t value);
  private:
  uint64_t _internal_source_item_id() const;
  void _internal_set_source_item_id(uint64_t value);
  public:

  // optional uint32 depth_bias = 10;
  bool has_depth_bias() const;
  private:
  bool _internal_has_depth_bias() const;
  public:
  void clear_depth_bias();
  uint32_t depth_bias() const;
  void set_depth_bias(uint32_t value);
  private:
  uint32_t _internal_depth_bias() const;
  void _internal_set_depth_bias(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStickerbookSticker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t item_def_id_;
    uint32_t sticker_num_;
    uint32_t quality_;
    float position_x_;
    float position_y_;
    float rotation_;
    float scale_;
    float position_z_;
    uint64_t source_item_id_;
    uint32_t depth_bias_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgStickerbookPage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStickerbookPage) */ {
 public:
  inline CMsgStickerbookPage() : CMsgStickerbookPage(nullptr) {}
  ~CMsgStickerbookPage() override;
  explicit PROTOBUF_CONSTEXPR CMsgStickerbookPage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStickerbookPage(const CMsgStickerbookPage& from);
  CMsgStickerbookPage(CMsgStickerbookPage&& from) noexcept
    : CMsgStickerbookPage() {
    *this = ::std::move(from);
  }

  inline CMsgStickerbookPage& operator=(const CMsgStickerbookPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStickerbookPage& operator=(CMsgStickerbookPage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStickerbookPage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStickerbookPage* internal_default_instance() {
    return reinterpret_cast<const CMsgStickerbookPage*>(
               &_CMsgStickerbookPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(CMsgStickerbookPage& a, CMsgStickerbookPage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStickerbookPage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStickerbookPage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStickerbookPage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStickerbookPage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStickerbookPage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgStickerbookPage& from) {
    CMsgStickerbookPage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStickerbookPage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStickerbookPage";
  }
  protected:
  explicit CMsgStickerbookPage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStickersFieldNumber = 4,
    kPageNumFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kTeamIdFieldNumber = 3,
    kPageTypeFieldNumber = 5,
  };
  // repeated .CMsgStickerbookSticker stickers = 4;
  int stickers_size() const;
  private:
  int _internal_stickers_size() const;
  public:
  void clear_stickers();
  ::CMsgStickerbookSticker* mutable_stickers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookSticker >*
      mutable_stickers();
  private:
  const ::CMsgStickerbookSticker& _internal_stickers(int index) const;
  ::CMsgStickerbookSticker* _internal_add_stickers();
  public:
  const ::CMsgStickerbookSticker& stickers(int index) const;
  ::CMsgStickerbookSticker* add_stickers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookSticker >&
      stickers() const;

  // optional uint32 page_num = 1;
  bool has_page_num() const;
  private:
  bool _internal_has_page_num() const;
  public:
  void clear_page_num();
  uint32_t page_num() const;
  void set_page_num(uint32_t value);
  private:
  uint32_t _internal_page_num() const;
  void _internal_set_page_num(uint32_t value);
  public:

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional .EStickerbookPageType page_type = 5 [default = STICKER_PAGE_GENERIC];
  bool has_page_type() const;
  private:
  bool _internal_has_page_type() const;
  public:
  void clear_page_type();
  ::EStickerbookPageType page_type() const;
  void set_page_type(::EStickerbookPageType value);
  private:
  ::EStickerbookPageType _internal_page_type() const;
  void _internal_set_page_type(::EStickerbookPageType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStickerbookPage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookSticker > stickers_;
    uint32_t page_num_;
    int event_id_;
    uint32_t team_id_;
    int page_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgStickerbookTeamPageOrderSequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStickerbookTeamPageOrderSequence) */ {
 public:
  inline CMsgStickerbookTeamPageOrderSequence() : CMsgStickerbookTeamPageOrderSequence(nullptr) {}
  ~CMsgStickerbookTeamPageOrderSequence() override;
  explicit PROTOBUF_CONSTEXPR CMsgStickerbookTeamPageOrderSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStickerbookTeamPageOrderSequence(const CMsgStickerbookTeamPageOrderSequence& from);
  CMsgStickerbookTeamPageOrderSequence(CMsgStickerbookTeamPageOrderSequence&& from) noexcept
    : CMsgStickerbookTeamPageOrderSequence() {
    *this = ::std::move(from);
  }

  inline CMsgStickerbookTeamPageOrderSequence& operator=(const CMsgStickerbookTeamPageOrderSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStickerbookTeamPageOrderSequence& operator=(CMsgStickerbookTeamPageOrderSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStickerbookTeamPageOrderSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStickerbookTeamPageOrderSequence* internal_default_instance() {
    return reinterpret_cast<const CMsgStickerbookTeamPageOrderSequence*>(
               &_CMsgStickerbookTeamPageOrderSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(CMsgStickerbookTeamPageOrderSequence& a, CMsgStickerbookTeamPageOrderSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStickerbookTeamPageOrderSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStickerbookTeamPageOrderSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStickerbookTeamPageOrderSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStickerbookTeamPageOrderSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStickerbookTeamPageOrderSequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgStickerbookTeamPageOrderSequence& from) {
    CMsgStickerbookTeamPageOrderSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStickerbookTeamPageOrderSequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStickerbookTeamPageOrderSequence";
  }
  protected:
  explicit CMsgStickerbookTeamPageOrderSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageNumbersFieldNumber = 1,
  };
  // repeated uint32 page_numbers = 1;
  int page_numbers_size() const;
  private:
  int _internal_page_numbers_size() const;
  public:
  void clear_page_numbers();
  private:
  uint32_t _internal_page_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_page_numbers() const;
  void _internal_add_page_numbers(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_page_numbers();
  public:
  uint32_t page_numbers(int index) const;
  void set_page_numbers(int index, uint32_t value);
  void add_page_numbers(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      page_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_page_numbers();

  // @@protoc_insertion_point(class_scope:CMsgStickerbookTeamPageOrderSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > page_numbers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgStickerbook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStickerbook) */ {
 public:
  inline CMsgStickerbook() : CMsgStickerbook(nullptr) {}
  ~CMsgStickerbook() override;
  explicit PROTOBUF_CONSTEXPR CMsgStickerbook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStickerbook(const CMsgStickerbook& from);
  CMsgStickerbook(CMsgStickerbook&& from) noexcept
    : CMsgStickerbook() {
    *this = ::std::move(from);
  }

  inline CMsgStickerbook& operator=(const CMsgStickerbook& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStickerbook& operator=(CMsgStickerbook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStickerbook& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStickerbook* internal_default_instance() {
    return reinterpret_cast<const CMsgStickerbook*>(
               &_CMsgStickerbook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(CMsgStickerbook& a, CMsgStickerbook& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStickerbook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStickerbook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStickerbook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStickerbook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStickerbook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgStickerbook& from) {
    CMsgStickerbook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStickerbook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStickerbook";
  }
  protected:
  explicit CMsgStickerbook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 1,
    kTeamPageOrderSequenceFieldNumber = 2,
    kFavoritePageNumFieldNumber = 3,
  };
  // repeated .CMsgStickerbookPage pages = 1;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::CMsgStickerbookPage* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookPage >*
      mutable_pages();
  private:
  const ::CMsgStickerbookPage& _internal_pages(int index) const;
  ::CMsgStickerbookPage* _internal_add_pages();
  public:
  const ::CMsgStickerbookPage& pages(int index) const;
  ::CMsgStickerbookPage* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookPage >&
      pages() const;

  // optional .CMsgStickerbookTeamPageOrderSequence team_page_order_sequence = 2;
  bool has_team_page_order_sequence() const;
  private:
  bool _internal_has_team_page_order_sequence() const;
  public:
  void clear_team_page_order_sequence();
  const ::CMsgStickerbookTeamPageOrderSequence& team_page_order_sequence() const;
  PROTOBUF_NODISCARD ::CMsgStickerbookTeamPageOrderSequence* release_team_page_order_sequence();
  ::CMsgStickerbookTeamPageOrderSequence* mutable_team_page_order_sequence();
  void set_allocated_team_page_order_sequence(::CMsgStickerbookTeamPageOrderSequence* team_page_order_sequence);
  private:
  const ::CMsgStickerbookTeamPageOrderSequence& _internal_team_page_order_sequence() const;
  ::CMsgStickerbookTeamPageOrderSequence* _internal_mutable_team_page_order_sequence();
  public:
  void unsafe_arena_set_allocated_team_page_order_sequence(
      ::CMsgStickerbookTeamPageOrderSequence* team_page_order_sequence);
  ::CMsgStickerbookTeamPageOrderSequence* unsafe_arena_release_team_page_order_sequence();

  // optional uint32 favorite_page_num = 3;
  bool has_favorite_page_num() const;
  private:
  bool _internal_has_favorite_page_num() const;
  public:
  void clear_favorite_page_num();
  uint32_t favorite_page_num() const;
  void set_favorite_page_num(uint32_t value);
  private:
  uint32_t _internal_favorite_page_num() const;
  void _internal_set_favorite_page_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStickerbook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookPage > pages_;
    ::CMsgStickerbookTeamPageOrderSequence* team_page_order_sequence_;
    uint32_t favorite_page_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgStickerHero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStickerHero) */ {
 public:
  inline CMsgStickerHero() : CMsgStickerHero(nullptr) {}
  ~CMsgStickerHero() override;
  explicit PROTOBUF_CONSTEXPR CMsgStickerHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStickerHero(const CMsgStickerHero& from);
  CMsgStickerHero(CMsgStickerHero&& from) noexcept
    : CMsgStickerHero() {
    *this = ::std::move(from);
  }

  inline CMsgStickerHero& operator=(const CMsgStickerHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStickerHero& operator=(CMsgStickerHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStickerHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStickerHero* internal_default_instance() {
    return reinterpret_cast<const CMsgStickerHero*>(
               &_CMsgStickerHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(CMsgStickerHero& a, CMsgStickerHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStickerHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStickerHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStickerHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStickerHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStickerHero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgStickerHero& from) {
    CMsgStickerHero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStickerHero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStickerHero";
  }
  protected:
  explicit CMsgStickerHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kItemDefIdFieldNumber = 2,
    kSourceItemIdFieldNumber = 4,
    kQualityFieldNumber = 3,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 item_def_id = 2;
  bool has_item_def_id() const;
  private:
  bool _internal_has_item_def_id() const;
  public:
  void clear_item_def_id();
  uint32_t item_def_id() const;
  void set_item_def_id(uint32_t value);
  private:
  uint32_t _internal_item_def_id() const;
  void _internal_set_item_def_id(uint32_t value);
  public:

  // optional uint64 source_item_id = 4;
  bool has_source_item_id() const;
  private:
  bool _internal_has_source_item_id() const;
  public:
  void clear_source_item_id();
  uint64_t source_item_id() const;
  void set_source_item_id(uint64_t value);
  private:
  uint64_t _internal_source_item_id() const;
  void _internal_set_source_item_id(uint64_t value);
  public:

  // optional uint32 quality = 3;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  uint32_t quality() const;
  void set_quality(uint32_t value);
  private:
  uint32_t _internal_quality() const;
  void _internal_set_quality(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStickerHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t item_def_id_;
    uint64_t source_item_id_;
    uint32_t quality_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgStickerHeroes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStickerHeroes) */ {
 public:
  inline CMsgStickerHeroes() : CMsgStickerHeroes(nullptr) {}
  ~CMsgStickerHeroes() override;
  explicit PROTOBUF_CONSTEXPR CMsgStickerHeroes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStickerHeroes(const CMsgStickerHeroes& from);
  CMsgStickerHeroes(CMsgStickerHeroes&& from) noexcept
    : CMsgStickerHeroes() {
    *this = ::std::move(from);
  }

  inline CMsgStickerHeroes& operator=(const CMsgStickerHeroes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStickerHeroes& operator=(CMsgStickerHeroes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStickerHeroes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStickerHeroes* internal_default_instance() {
    return reinterpret_cast<const CMsgStickerHeroes*>(
               &_CMsgStickerHeroes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CMsgStickerHeroes& a, CMsgStickerHeroes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStickerHeroes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStickerHeroes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStickerHeroes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStickerHeroes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStickerHeroes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgStickerHeroes& from) {
    CMsgStickerHeroes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStickerHeroes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStickerHeroes";
  }
  protected:
  explicit CMsgStickerHeroes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroesFieldNumber = 1,
  };
  // repeated .CMsgStickerHero heroes = 1;
  int heroes_size() const;
  private:
  int _internal_heroes_size() const;
  public:
  void clear_heroes();
  ::CMsgStickerHero* mutable_heroes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerHero >*
      mutable_heroes();
  private:
  const ::CMsgStickerHero& _internal_heroes(int index) const;
  ::CMsgStickerHero* _internal_add_heroes();
  public:
  const ::CMsgStickerHero& heroes(int index) const;
  ::CMsgStickerHero* add_heroes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerHero >&
      heroes() const;

  // @@protoc_insertion_point(class_scope:CMsgStickerHeroes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerHero > heroes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgHeroRoleStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHeroRoleStats) */ {
 public:
  inline CMsgHeroRoleStats() : CMsgHeroRoleStats(nullptr) {}
  ~CMsgHeroRoleStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgHeroRoleStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHeroRoleStats(const CMsgHeroRoleStats& from);
  CMsgHeroRoleStats(CMsgHeroRoleStats&& from) noexcept
    : CMsgHeroRoleStats() {
    *this = ::std::move(from);
  }

  inline CMsgHeroRoleStats& operator=(const CMsgHeroRoleStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHeroRoleStats& operator=(CMsgHeroRoleStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHeroRoleStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHeroRoleStats* internal_default_instance() {
    return reinterpret_cast<const CMsgHeroRoleStats*>(
               &_CMsgHeroRoleStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(CMsgHeroRoleStats& a, CMsgHeroRoleStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHeroRoleStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHeroRoleStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHeroRoleStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHeroRoleStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHeroRoleStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHeroRoleStats& from) {
    CMsgHeroRoleStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHeroRoleStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHeroRoleStats";
  }
  protected:
  explicit CMsgHeroRoleStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSelectionFlagsFieldNumber = 1,
    kMatchCountFieldNumber = 2,
    kWinCountFieldNumber = 3,
  };
  // optional uint32 lane_selection_flags = 1;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  uint32_t lane_selection_flags() const;
  void set_lane_selection_flags(uint32_t value);
  private:
  uint32_t _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(uint32_t value);
  public:

  // optional uint32 match_count = 2;
  bool has_match_count() const;
  private:
  bool _internal_has_match_count() const;
  public:
  void clear_match_count();
  uint32_t match_count() const;
  void set_match_count(uint32_t value);
  private:
  uint32_t _internal_match_count() const;
  void _internal_set_match_count(uint32_t value);
  public:

  // optional uint32 win_count = 3;
  bool has_win_count() const;
  private:
  bool _internal_has_win_count() const;
  public:
  void clear_win_count();
  uint32_t win_count() const;
  void set_win_count(uint32_t value);
  private:
  uint32_t _internal_win_count() const;
  void _internal_set_win_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHeroRoleStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t lane_selection_flags_;
    uint32_t match_count_;
    uint32_t win_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgHeroRoleHeroStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHeroRoleHeroStats) */ {
 public:
  inline CMsgHeroRoleHeroStats() : CMsgHeroRoleHeroStats(nullptr) {}
  ~CMsgHeroRoleHeroStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgHeroRoleHeroStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHeroRoleHeroStats(const CMsgHeroRoleHeroStats& from);
  CMsgHeroRoleHeroStats(CMsgHeroRoleHeroStats&& from) noexcept
    : CMsgHeroRoleHeroStats() {
    *this = ::std::move(from);
  }

  inline CMsgHeroRoleHeroStats& operator=(const CMsgHeroRoleHeroStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHeroRoleHeroStats& operator=(CMsgHeroRoleHeroStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHeroRoleHeroStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHeroRoleHeroStats* internal_default_instance() {
    return reinterpret_cast<const CMsgHeroRoleHeroStats*>(
               &_CMsgHeroRoleHeroStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(CMsgHeroRoleHeroStats& a, CMsgHeroRoleHeroStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHeroRoleHeroStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHeroRoleHeroStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHeroRoleHeroStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHeroRoleHeroStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHeroRoleHeroStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHeroRoleHeroStats& from) {
    CMsgHeroRoleHeroStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHeroRoleHeroStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHeroRoleHeroStats";
  }
  protected:
  explicit CMsgHeroRoleHeroStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleStatsFieldNumber = 2,
    kHeroIdFieldNumber = 1,
  };
  // repeated .CMsgHeroRoleStats role_stats = 2;
  int role_stats_size() const;
  private:
  int _internal_role_stats_size() const;
  public:
  void clear_role_stats();
  ::CMsgHeroRoleStats* mutable_role_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleStats >*
      mutable_role_stats();
  private:
  const ::CMsgHeroRoleStats& _internal_role_stats(int index) const;
  ::CMsgHeroRoleStats* _internal_add_role_stats();
  public:
  const ::CMsgHeroRoleStats& role_stats(int index) const;
  ::CMsgHeroRoleStats* add_role_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleStats >&
      role_stats() const;

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHeroRoleHeroStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleStats > role_stats_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgHeroRoleRankStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHeroRoleRankStats) */ {
 public:
  inline CMsgHeroRoleRankStats() : CMsgHeroRoleRankStats(nullptr) {}
  ~CMsgHeroRoleRankStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgHeroRoleRankStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHeroRoleRankStats(const CMsgHeroRoleRankStats& from);
  CMsgHeroRoleRankStats(CMsgHeroRoleRankStats&& from) noexcept
    : CMsgHeroRoleRankStats() {
    *this = ::std::move(from);
  }

  inline CMsgHeroRoleRankStats& operator=(const CMsgHeroRoleRankStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHeroRoleRankStats& operator=(CMsgHeroRoleRankStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHeroRoleRankStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHeroRoleRankStats* internal_default_instance() {
    return reinterpret_cast<const CMsgHeroRoleRankStats*>(
               &_CMsgHeroRoleRankStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(CMsgHeroRoleRankStats& a, CMsgHeroRoleRankStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHeroRoleRankStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHeroRoleRankStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHeroRoleRankStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHeroRoleRankStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHeroRoleRankStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHeroRoleRankStats& from) {
    CMsgHeroRoleRankStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHeroRoleRankStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHeroRoleRankStats";
  }
  protected:
  explicit CMsgHeroRoleRankStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroStatsFieldNumber = 2,
    kRankTierFieldNumber = 1,
  };
  // repeated .CMsgHeroRoleHeroStats hero_stats = 2;
  int hero_stats_size() const;
  private:
  int _internal_hero_stats_size() const;
  public:
  void clear_hero_stats();
  ::CMsgHeroRoleHeroStats* mutable_hero_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleHeroStats >*
      mutable_hero_stats();
  private:
  const ::CMsgHeroRoleHeroStats& _internal_hero_stats(int index) const;
  ::CMsgHeroRoleHeroStats* _internal_add_hero_stats();
  public:
  const ::CMsgHeroRoleHeroStats& hero_stats(int index) const;
  ::CMsgHeroRoleHeroStats* add_hero_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleHeroStats >&
      hero_stats() const;

  // optional uint32 rank_tier = 1;
  bool has_rank_tier() const;
  private:
  bool _internal_has_rank_tier() const;
  public:
  void clear_rank_tier();
  uint32_t rank_tier() const;
  void set_rank_tier(uint32_t value);
  private:
  uint32_t _internal_rank_tier() const;
  void _internal_set_rank_tier(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHeroRoleRankStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleHeroStats > hero_stats_;
    uint32_t rank_tier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CMsgHeroRoleAllRanksStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHeroRoleAllRanksStats) */ {
 public:
  inline CMsgHeroRoleAllRanksStats() : CMsgHeroRoleAllRanksStats(nullptr) {}
  ~CMsgHeroRoleAllRanksStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgHeroRoleAllRanksStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHeroRoleAllRanksStats(const CMsgHeroRoleAllRanksStats& from);
  CMsgHeroRoleAllRanksStats(CMsgHeroRoleAllRanksStats&& from) noexcept
    : CMsgHeroRoleAllRanksStats() {
    *this = ::std::move(from);
  }

  inline CMsgHeroRoleAllRanksStats& operator=(const CMsgHeroRoleAllRanksStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHeroRoleAllRanksStats& operator=(CMsgHeroRoleAllRanksStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHeroRoleAllRanksStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHeroRoleAllRanksStats* internal_default_instance() {
    return reinterpret_cast<const CMsgHeroRoleAllRanksStats*>(
               &_CMsgHeroRoleAllRanksStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(CMsgHeroRoleAllRanksStats& a, CMsgHeroRoleAllRanksStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHeroRoleAllRanksStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHeroRoleAllRanksStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHeroRoleAllRanksStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHeroRoleAllRanksStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHeroRoleAllRanksStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHeroRoleAllRanksStats& from) {
    CMsgHeroRoleAllRanksStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHeroRoleAllRanksStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHeroRoleAllRanksStats";
  }
  protected:
  explicit CMsgHeroRoleAllRanksStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankStatsFieldNumber = 3,
    kStartTimestampFieldNumber = 1,
    kEndTimestampFieldNumber = 2,
  };
  // repeated .CMsgHeroRoleRankStats rank_stats = 3;
  int rank_stats_size() const;
  private:
  int _internal_rank_stats_size() const;
  public:
  void clear_rank_stats();
  ::CMsgHeroRoleRankStats* mutable_rank_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleRankStats >*
      mutable_rank_stats();
  private:
  const ::CMsgHeroRoleRankStats& _internal_rank_stats(int index) const;
  ::CMsgHeroRoleRankStats* _internal_add_rank_stats();
  public:
  const ::CMsgHeroRoleRankStats& rank_stats(int index) const;
  ::CMsgHeroRoleRankStats* add_rank_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleRankStats >&
      rank_stats() const;

  // optional uint32 start_timestamp = 1;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // optional uint32 end_timestamp = 2;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  uint32_t end_timestamp() const;
  void set_end_timestamp(uint32_t value);
  private:
  uint32_t _internal_end_timestamp() const;
  void _internal_set_end_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHeroRoleAllRanksStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleRankStats > rank_stats_;
    uint32_t start_timestamp_;
    uint32_t end_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSODOTAGameAccountClient_RoleHandicap

// optional uint32 role = 1;
inline bool CSODOTAGameAccountClient_RoleHandicap::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient_RoleHandicap::has_role() const {
  return _internal_has_role();
}
inline void CSODOTAGameAccountClient_RoleHandicap::clear_role() {
  _impl_.role_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSODOTAGameAccountClient_RoleHandicap::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t CSODOTAGameAccountClient_RoleHandicap::role() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.RoleHandicap.role)
  return _internal_role();
}
inline void CSODOTAGameAccountClient_RoleHandicap::_internal_set_role(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.role_ = value;
}
inline void CSODOTAGameAccountClient_RoleHandicap::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.RoleHandicap.role)
}

// optional float handicap = 2;
inline bool CSODOTAGameAccountClient_RoleHandicap::_internal_has_handicap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient_RoleHandicap::has_handicap() const {
  return _internal_has_handicap();
}
inline void CSODOTAGameAccountClient_RoleHandicap::clear_handicap() {
  _impl_.handicap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CSODOTAGameAccountClient_RoleHandicap::_internal_handicap() const {
  return _impl_.handicap_;
}
inline float CSODOTAGameAccountClient_RoleHandicap::handicap() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.RoleHandicap.handicap)
  return _internal_handicap();
}
inline void CSODOTAGameAccountClient_RoleHandicap::_internal_set_handicap(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.handicap_ = value;
}
inline void CSODOTAGameAccountClient_RoleHandicap::set_handicap(float value) {
  _internal_set_handicap(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.RoleHandicap.handicap)
}

// -------------------------------------------------------------------

// CSODOTAGameAccountClient

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSODOTAGameAccountClient::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSODOTAGameAccountClient::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CSODOTAGameAccountClient::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_id)
  return _internal_account_id();
}
inline void CSODOTAGameAccountClient::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CSODOTAGameAccountClient::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_id)
}

// optional uint32 wins = 3;
inline bool CSODOTAGameAccountClient::_internal_has_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_wins() const {
  return _internal_has_wins();
}
inline void CSODOTAGameAccountClient::clear_wins() {
  _impl_.wins_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_wins() const {
  return _impl_.wins_;
}
inline uint32_t CSODOTAGameAccountClient::wins() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.wins)
  return _internal_wins();
}
inline void CSODOTAGameAccountClient::_internal_set_wins(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.wins_ = value;
}
inline void CSODOTAGameAccountClient::set_wins(uint32_t value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.wins)
}

// optional uint32 losses = 4;
inline bool CSODOTAGameAccountClient::_internal_has_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_losses() const {
  return _internal_has_losses();
}
inline void CSODOTAGameAccountClient::clear_losses() {
  _impl_.losses_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_losses() const {
  return _impl_.losses_;
}
inline uint32_t CSODOTAGameAccountClient::losses() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.losses)
  return _internal_losses();
}
inline void CSODOTAGameAccountClient::_internal_set_losses(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.losses_ = value;
}
inline void CSODOTAGameAccountClient::set_losses(uint32_t value) {
  _internal_set_losses(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.losses)
}

// optional uint32 xp = 12;
inline bool CSODOTAGameAccountClient::_internal_has_xp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_xp() const {
  return _internal_has_xp();
}
inline void CSODOTAGameAccountClient::clear_xp() {
  _impl_.xp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_xp() const {
  return _impl_.xp_;
}
inline uint32_t CSODOTAGameAccountClient::xp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.xp)
  return _internal_xp();
}
inline void CSODOTAGameAccountClient::_internal_set_xp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.xp_ = value;
}
inline void CSODOTAGameAccountClient::set_xp(uint32_t value) {
  _internal_set_xp(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.xp)
}

// optional uint32 level = 13;
inline bool CSODOTAGameAccountClient::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_level() const {
  return _internal_has_level();
}
inline void CSODOTAGameAccountClient::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CSODOTAGameAccountClient::level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.level)
  return _internal_level();
}
inline void CSODOTAGameAccountClient::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}
inline void CSODOTAGameAccountClient::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.level)
}

// optional uint32 initial_skill = 14;
inline bool CSODOTAGameAccountClient::_internal_has_initial_skill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_initial_skill() const {
  return _internal_has_initial_skill();
}
inline void CSODOTAGameAccountClient::clear_initial_skill() {
  _impl_.initial_skill_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_initial_skill() const {
  return _impl_.initial_skill_;
}
inline uint32_t CSODOTAGameAccountClient::initial_skill() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.initial_skill)
  return _internal_initial_skill();
}
inline void CSODOTAGameAccountClient::_internal_set_initial_skill(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.initial_skill_ = value;
}
inline void CSODOTAGameAccountClient::set_initial_skill(uint32_t value) {
  _internal_set_initial_skill(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.initial_skill)
}

// optional uint32 leaver_count = 15;
inline bool CSODOTAGameAccountClient::_internal_has_leaver_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_leaver_count() const {
  return _internal_has_leaver_count();
}
inline void CSODOTAGameAccountClient::clear_leaver_count() {
  _impl_.leaver_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_leaver_count() const {
  return _impl_.leaver_count_;
}
inline uint32_t CSODOTAGameAccountClient::leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_count)
  return _internal_leaver_count();
}
inline void CSODOTAGameAccountClient::_internal_set_leaver_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.leaver_count_ = value;
}
inline void CSODOTAGameAccountClient::set_leaver_count(uint32_t value) {
  _internal_set_leaver_count(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_count)
}

// optional uint32 secondary_leaver_count = 58;
inline bool CSODOTAGameAccountClient::_internal_has_secondary_leaver_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_secondary_leaver_count() const {
  return _internal_has_secondary_leaver_count();
}
inline void CSODOTAGameAccountClient::clear_secondary_leaver_count() {
  _impl_.secondary_leaver_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_secondary_leaver_count() const {
  return _impl_.secondary_leaver_count_;
}
inline uint32_t CSODOTAGameAccountClient::secondary_leaver_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.secondary_leaver_count)
  return _internal_secondary_leaver_count();
}
inline void CSODOTAGameAccountClient::_internal_set_secondary_leaver_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.secondary_leaver_count_ = value;
}
inline void CSODOTAGameAccountClient::set_secondary_leaver_count(uint32_t value) {
  _internal_set_secondary_leaver_count(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.secondary_leaver_count)
}

// optional uint32 low_priority_until_date = 18;
inline bool CSODOTAGameAccountClient::_internal_has_low_priority_until_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_low_priority_until_date() const {
  return _internal_has_low_priority_until_date();
}
inline void CSODOTAGameAccountClient::clear_low_priority_until_date() {
  _impl_.low_priority_until_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_low_priority_until_date() const {
  return _impl_.low_priority_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::low_priority_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_until_date)
  return _internal_low_priority_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_low_priority_until_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.low_priority_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_low_priority_until_date(uint32_t value) {
  _internal_set_low_priority_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_until_date)
}

// optional uint32 prevent_text_chat_until_date = 20;
inline bool CSODOTAGameAccountClient::_internal_has_prevent_text_chat_until_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return _internal_has_prevent_text_chat_until_date();
}
inline void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  _impl_.prevent_text_chat_until_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_prevent_text_chat_until_date() const {
  return _impl_.prevent_text_chat_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_text_chat_until_date)
  return _internal_prevent_text_chat_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_prevent_text_chat_until_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.prevent_text_chat_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(uint32_t value) {
  _internal_set_prevent_text_chat_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_text_chat_until_date)
}

// optional uint32 prevent_voice_until_date = 21;
inline bool CSODOTAGameAccountClient::_internal_has_prevent_voice_until_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return _internal_has_prevent_voice_until_date();
}
inline void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  _impl_.prevent_voice_until_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_prevent_voice_until_date() const {
  return _impl_.prevent_voice_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::prevent_voice_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_voice_until_date)
  return _internal_prevent_voice_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_prevent_voice_until_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.prevent_voice_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_prevent_voice_until_date(uint32_t value) {
  _internal_set_prevent_voice_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_voice_until_date)
}

// optional uint32 prevent_public_text_chat_until_date = 86;
inline bool CSODOTAGameAccountClient::_internal_has_prevent_public_text_chat_until_date() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_prevent_public_text_chat_until_date() const {
  return _internal_has_prevent_public_text_chat_until_date();
}
inline void CSODOTAGameAccountClient::clear_prevent_public_text_chat_until_date() {
  _impl_.prevent_public_text_chat_until_date_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_prevent_public_text_chat_until_date() const {
  return _impl_.prevent_public_text_chat_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::prevent_public_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
  return _internal_prevent_public_text_chat_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_prevent_public_text_chat_until_date(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.prevent_public_text_chat_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_prevent_public_text_chat_until_date(uint32_t value) {
  _internal_set_prevent_public_text_chat_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
}

// optional uint32 prevent_new_player_chat_until_date = 122;
inline bool CSODOTAGameAccountClient::_internal_has_prevent_new_player_chat_until_date() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_prevent_new_player_chat_until_date() const {
  return _internal_has_prevent_new_player_chat_until_date();
}
inline void CSODOTAGameAccountClient::clear_prevent_new_player_chat_until_date() {
  _impl_.prevent_new_player_chat_until_date_ = 0u;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_prevent_new_player_chat_until_date() const {
  return _impl_.prevent_new_player_chat_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::prevent_new_player_chat_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.prevent_new_player_chat_until_date)
  return _internal_prevent_new_player_chat_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_prevent_new_player_chat_until_date(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.prevent_new_player_chat_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_prevent_new_player_chat_until_date(uint32_t value) {
  _internal_set_prevent_new_player_chat_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.prevent_new_player_chat_until_date)
}

// optional uint32 last_abandoned_game_date = 22;
inline bool CSODOTAGameAccountClient::_internal_has_last_abandoned_game_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return _internal_has_last_abandoned_game_date();
}
inline void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  _impl_.last_abandoned_game_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_last_abandoned_game_date() const {
  return _impl_.last_abandoned_game_date_;
}
inline uint32_t CSODOTAGameAccountClient::last_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_abandoned_game_date)
  return _internal_last_abandoned_game_date();
}
inline void CSODOTAGameAccountClient::_internal_set_last_abandoned_game_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.last_abandoned_game_date_ = value;
}
inline void CSODOTAGameAccountClient::set_last_abandoned_game_date(uint32_t value) {
  _internal_set_last_abandoned_game_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_abandoned_game_date)
}

// optional uint32 last_secondary_abandoned_game_date = 59;
inline bool CSODOTAGameAccountClient::_internal_has_last_secondary_abandoned_game_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_last_secondary_abandoned_game_date() const {
  return _internal_has_last_secondary_abandoned_game_date();
}
inline void CSODOTAGameAccountClient::clear_last_secondary_abandoned_game_date() {
  _impl_.last_secondary_abandoned_game_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_last_secondary_abandoned_game_date() const {
  return _impl_.last_secondary_abandoned_game_date_;
}
inline uint32_t CSODOTAGameAccountClient::last_secondary_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
  return _internal_last_secondary_abandoned_game_date();
}
inline void CSODOTAGameAccountClient::_internal_set_last_secondary_abandoned_game_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.last_secondary_abandoned_game_date_ = value;
}
inline void CSODOTAGameAccountClient::set_last_secondary_abandoned_game_date(uint32_t value) {
  _internal_set_last_secondary_abandoned_game_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
}

// optional uint32 leaver_penalty_count = 23;
inline bool CSODOTAGameAccountClient::_internal_has_leaver_penalty_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return _internal_has_leaver_penalty_count();
}
inline void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  _impl_.leaver_penalty_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_leaver_penalty_count() const {
  return _impl_.leaver_penalty_count_;
}
inline uint32_t CSODOTAGameAccountClient::leaver_penalty_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.leaver_penalty_count)
  return _internal_leaver_penalty_count();
}
inline void CSODOTAGameAccountClient::_internal_set_leaver_penalty_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.leaver_penalty_count_ = value;
}
inline void CSODOTAGameAccountClient::set_leaver_penalty_count(uint32_t value) {
  _internal_set_leaver_penalty_count(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.leaver_penalty_count)
}

// optional uint32 completed_game_streak = 24;
inline bool CSODOTAGameAccountClient::_internal_has_completed_game_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return _internal_has_completed_game_streak();
}
inline void CSODOTAGameAccountClient::clear_completed_game_streak() {
  _impl_.completed_game_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_completed_game_streak() const {
  return _impl_.completed_game_streak_;
}
inline uint32_t CSODOTAGameAccountClient::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.completed_game_streak)
  return _internal_completed_game_streak();
}
inline void CSODOTAGameAccountClient::_internal_set_completed_game_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.completed_game_streak_ = value;
}
inline void CSODOTAGameAccountClient::set_completed_game_streak(uint32_t value) {
  _internal_set_completed_game_streak(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.completed_game_streak)
}

// optional uint32 account_disabled_until_date = 38;
inline bool CSODOTAGameAccountClient::_internal_has_account_disabled_until_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return _internal_has_account_disabled_until_date();
}
inline void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  _impl_.account_disabled_until_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_account_disabled_until_date() const {
  return _impl_.account_disabled_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::account_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_until_date)
  return _internal_account_disabled_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_account_disabled_until_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.account_disabled_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_account_disabled_until_date(uint32_t value) {
  _internal_set_account_disabled_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_until_date)
}

// optional uint32 account_disabled_count = 39;
inline bool CSODOTAGameAccountClient::_internal_has_account_disabled_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return _internal_has_account_disabled_count();
}
inline void CSODOTAGameAccountClient::clear_account_disabled_count() {
  _impl_.account_disabled_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_account_disabled_count() const {
  return _impl_.account_disabled_count_;
}
inline uint32_t CSODOTAGameAccountClient::account_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_disabled_count)
  return _internal_account_disabled_count();
}
inline void CSODOTAGameAccountClient::_internal_set_account_disabled_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.account_disabled_count_ = value;
}
inline void CSODOTAGameAccountClient::set_account_disabled_count(uint32_t value) {
  _internal_set_account_disabled_count(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_disabled_count)
}

// optional uint32 match_disabled_until_date = 41;
inline bool CSODOTAGameAccountClient::_internal_has_match_disabled_until_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return _internal_has_match_disabled_until_date();
}
inline void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  _impl_.match_disabled_until_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_match_disabled_until_date() const {
  return _impl_.match_disabled_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_until_date)
  return _internal_match_disabled_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_match_disabled_until_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.match_disabled_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_match_disabled_until_date(uint32_t value) {
  _internal_set_match_disabled_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_until_date)
}

// optional uint32 match_disabled_count = 42;
inline bool CSODOTAGameAccountClient::_internal_has_match_disabled_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return _internal_has_match_disabled_count();
}
inline void CSODOTAGameAccountClient::clear_match_disabled_count() {
  _impl_.match_disabled_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_match_disabled_count() const {
  return _impl_.match_disabled_count_;
}
inline uint32_t CSODOTAGameAccountClient::match_disabled_count() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.match_disabled_count)
  return _internal_match_disabled_count();
}
inline void CSODOTAGameAccountClient::_internal_set_match_disabled_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.match_disabled_count_ = value;
}
inline void CSODOTAGameAccountClient::set_match_disabled_count(uint32_t value) {
  _internal_set_match_disabled_count(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.match_disabled_count)
}

// optional uint32 shutdownlawterminatetimestamp = 47;
inline bool CSODOTAGameAccountClient::_internal_has_shutdownlawterminatetimestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_shutdownlawterminatetimestamp() const {
  return _internal_has_shutdownlawterminatetimestamp();
}
inline void CSODOTAGameAccountClient::clear_shutdownlawterminatetimestamp() {
  _impl_.shutdownlawterminatetimestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_shutdownlawterminatetimestamp() const {
  return _impl_.shutdownlawterminatetimestamp_;
}
inline uint32_t CSODOTAGameAccountClient::shutdownlawterminatetimestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
  return _internal_shutdownlawterminatetimestamp();
}
inline void CSODOTAGameAccountClient::_internal_set_shutdownlawterminatetimestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.shutdownlawterminatetimestamp_ = value;
}
inline void CSODOTAGameAccountClient::set_shutdownlawterminatetimestamp(uint32_t value) {
  _internal_set_shutdownlawterminatetimestamp(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
}

// optional uint32 low_priority_games_remaining = 48;
inline bool CSODOTAGameAccountClient::_internal_has_low_priority_games_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_low_priority_games_remaining() const {
  return _internal_has_low_priority_games_remaining();
}
inline void CSODOTAGameAccountClient::clear_low_priority_games_remaining() {
  _impl_.low_priority_games_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_low_priority_games_remaining() const {
  return _impl_.low_priority_games_remaining_;
}
inline uint32_t CSODOTAGameAccountClient::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.low_priority_games_remaining)
  return _internal_low_priority_games_remaining();
}
inline void CSODOTAGameAccountClient::_internal_set_low_priority_games_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.low_priority_games_remaining_ = value;
}
inline void CSODOTAGameAccountClient::set_low_priority_games_remaining(uint32_t value) {
  _internal_set_low_priority_games_remaining(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.low_priority_games_remaining)
}

// optional uint32 competitive_rank = 49;
inline bool CSODOTAGameAccountClient::_internal_has_competitive_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_competitive_rank() const {
  return _internal_has_competitive_rank();
}
inline void CSODOTAGameAccountClient::clear_competitive_rank() {
  _impl_.competitive_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_competitive_rank() const {
  return _impl_.competitive_rank_;
}
inline uint32_t CSODOTAGameAccountClient::competitive_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_rank)
  return _internal_competitive_rank();
}
inline void CSODOTAGameAccountClient::_internal_set_competitive_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.competitive_rank_ = value;
}
inline void CSODOTAGameAccountClient::set_competitive_rank(uint32_t value) {
  _internal_set_competitive_rank(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_rank)
}

// optional uint32 competitive_calibration_games_remaining = 51;
inline bool CSODOTAGameAccountClient::_internal_has_competitive_calibration_games_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_competitive_calibration_games_remaining() const {
  return _internal_has_competitive_calibration_games_remaining();
}
inline void CSODOTAGameAccountClient::clear_competitive_calibration_games_remaining() {
  _impl_.competitive_calibration_games_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_competitive_calibration_games_remaining() const {
  return _impl_.competitive_calibration_games_remaining_;
}
inline uint32_t CSODOTAGameAccountClient::competitive_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.competitive_calibration_games_remaining)
  return _internal_competitive_calibration_games_remaining();
}
inline void CSODOTAGameAccountClient::_internal_set_competitive_calibration_games_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.competitive_calibration_games_remaining_ = value;
}
inline void CSODOTAGameAccountClient::set_competitive_calibration_games_remaining(uint32_t value) {
  _internal_set_competitive_calibration_games_remaining(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.competitive_calibration_games_remaining)
}

// optional uint32 recruitment_level = 55;
inline bool CSODOTAGameAccountClient::_internal_has_recruitment_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recruitment_level() const {
  return _internal_has_recruitment_level();
}
inline void CSODOTAGameAccountClient::clear_recruitment_level() {
  _impl_.recruitment_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recruitment_level() const {
  return _impl_.recruitment_level_;
}
inline uint32_t CSODOTAGameAccountClient::recruitment_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recruitment_level)
  return _internal_recruitment_level();
}
inline void CSODOTAGameAccountClient::_internal_set_recruitment_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.recruitment_level_ = value;
}
inline void CSODOTAGameAccountClient::set_recruitment_level(uint32_t value) {
  _internal_set_recruitment_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recruitment_level)
}

// optional bool has_new_notifications = 56;
inline bool CSODOTAGameAccountClient::_internal_has_has_new_notifications() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_has_new_notifications() const {
  return _internal_has_has_new_notifications();
}
inline void CSODOTAGameAccountClient::clear_has_new_notifications() {
  _impl_.has_new_notifications_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool CSODOTAGameAccountClient::_internal_has_new_notifications() const {
  return _impl_.has_new_notifications_;
}
inline bool CSODOTAGameAccountClient::has_new_notifications() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.has_new_notifications)
  return _internal_has_new_notifications();
}
inline void CSODOTAGameAccountClient::_internal_set_has_new_notifications(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.has_new_notifications_ = value;
}
inline void CSODOTAGameAccountClient::set_has_new_notifications(bool value) {
  _internal_set_has_new_notifications(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.has_new_notifications)
}

// optional bool is_league_admin = 57;
inline bool CSODOTAGameAccountClient::_internal_has_is_league_admin() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_is_league_admin() const {
  return _internal_has_is_league_admin();
}
inline void CSODOTAGameAccountClient::clear_is_league_admin() {
  _impl_.is_league_admin_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool CSODOTAGameAccountClient::_internal_is_league_admin() const {
  return _impl_.is_league_admin_;
}
inline bool CSODOTAGameAccountClient::is_league_admin() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.is_league_admin)
  return _internal_is_league_admin();
}
inline void CSODOTAGameAccountClient::_internal_set_is_league_admin(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.is_league_admin_ = value;
}
inline void CSODOTAGameAccountClient::set_is_league_admin(bool value) {
  _internal_set_is_league_admin(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.is_league_admin)
}

// optional uint32 casual_games_played = 60;
inline bool CSODOTAGameAccountClient::_internal_has_casual_games_played() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_casual_games_played() const {
  return _internal_has_casual_games_played();
}
inline void CSODOTAGameAccountClient::clear_casual_games_played() {
  _impl_.casual_games_played_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_casual_games_played() const {
  return _impl_.casual_games_played_;
}
inline uint32_t CSODOTAGameAccountClient::casual_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_games_played)
  return _internal_casual_games_played();
}
inline void CSODOTAGameAccountClient::_internal_set_casual_games_played(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.casual_games_played_ = value;
}
inline void CSODOTAGameAccountClient::set_casual_games_played(uint32_t value) {
  _internal_set_casual_games_played(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_games_played)
}

// optional uint32 solo_competitive_games_played = 61;
inline bool CSODOTAGameAccountClient::_internal_has_solo_competitive_games_played() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_solo_competitive_games_played() const {
  return _internal_has_solo_competitive_games_played();
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_games_played() {
  _impl_.solo_competitive_games_played_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_solo_competitive_games_played() const {
  return _impl_.solo_competitive_games_played_;
}
inline uint32_t CSODOTAGameAccountClient::solo_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.solo_competitive_games_played)
  return _internal_solo_competitive_games_played();
}
inline void CSODOTAGameAccountClient::_internal_set_solo_competitive_games_played(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.solo_competitive_games_played_ = value;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_games_played(uint32_t value) {
  _internal_set_solo_competitive_games_played(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.solo_competitive_games_played)
}

// optional uint32 party_competitive_games_played = 62;
inline bool CSODOTAGameAccountClient::_internal_has_party_competitive_games_played() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_party_competitive_games_played() const {
  return _internal_has_party_competitive_games_played();
}
inline void CSODOTAGameAccountClient::clear_party_competitive_games_played() {
  _impl_.party_competitive_games_played_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_party_competitive_games_played() const {
  return _impl_.party_competitive_games_played_;
}
inline uint32_t CSODOTAGameAccountClient::party_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.party_competitive_games_played)
  return _internal_party_competitive_games_played();
}
inline void CSODOTAGameAccountClient::_internal_set_party_competitive_games_played(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.party_competitive_games_played_ = value;
}
inline void CSODOTAGameAccountClient::set_party_competitive_games_played(uint32_t value) {
  _internal_set_party_competitive_games_played(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.party_competitive_games_played)
}

// optional uint32 casual_1v1_games_played = 65;
inline bool CSODOTAGameAccountClient::_internal_has_casual_1v1_games_played() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_casual_1v1_games_played() const {
  return _internal_has_casual_1v1_games_played();
}
inline void CSODOTAGameAccountClient::clear_casual_1v1_games_played() {
  _impl_.casual_1v1_games_played_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_casual_1v1_games_played() const {
  return _impl_.casual_1v1_games_played_;
}
inline uint32_t CSODOTAGameAccountClient::casual_1v1_games_played() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.casual_1v1_games_played)
  return _internal_casual_1v1_games_played();
}
inline void CSODOTAGameAccountClient::_internal_set_casual_1v1_games_played(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.casual_1v1_games_played_ = value;
}
inline void CSODOTAGameAccountClient::set_casual_1v1_games_played(uint32_t value) {
  _internal_set_casual_1v1_games_played(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.casual_1v1_games_played)
}

// optional uint32 curr_all_hero_challenge_id = 67;
inline bool CSODOTAGameAccountClient::_internal_has_curr_all_hero_challenge_id() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_curr_all_hero_challenge_id() const {
  return _internal_has_curr_all_hero_challenge_id();
}
inline void CSODOTAGameAccountClient::clear_curr_all_hero_challenge_id() {
  _impl_.curr_all_hero_challenge_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_curr_all_hero_challenge_id() const {
  return _impl_.curr_all_hero_challenge_id_;
}
inline uint32_t CSODOTAGameAccountClient::curr_all_hero_challenge_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
  return _internal_curr_all_hero_challenge_id();
}
inline void CSODOTAGameAccountClient::_internal_set_curr_all_hero_challenge_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.curr_all_hero_challenge_id_ = value;
}
inline void CSODOTAGameAccountClient::set_curr_all_hero_challenge_id(uint32_t value) {
  _internal_set_curr_all_hero_challenge_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.curr_all_hero_challenge_id)
}

// optional uint32 play_time_points = 68;
inline bool CSODOTAGameAccountClient::_internal_has_play_time_points() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_play_time_points() const {
  return _internal_has_play_time_points();
}
inline void CSODOTAGameAccountClient::clear_play_time_points() {
  _impl_.play_time_points_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_play_time_points() const {
  return _impl_.play_time_points_;
}
inline uint32_t CSODOTAGameAccountClient::play_time_points() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_points)
  return _internal_play_time_points();
}
inline void CSODOTAGameAccountClient::_internal_set_play_time_points(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.play_time_points_ = value;
}
inline void CSODOTAGameAccountClient::set_play_time_points(uint32_t value) {
  _internal_set_play_time_points(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_points)
}

// optional uint32 account_flags = 69;
inline bool CSODOTAGameAccountClient::_internal_has_account_flags() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_account_flags() const {
  return _internal_has_account_flags();
}
inline void CSODOTAGameAccountClient::clear_account_flags() {
  _impl_.account_flags_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_account_flags() const {
  return _impl_.account_flags_;
}
inline uint32_t CSODOTAGameAccountClient::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.account_flags)
  return _internal_account_flags();
}
inline void CSODOTAGameAccountClient::_internal_set_account_flags(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.account_flags_ = value;
}
inline void CSODOTAGameAccountClient::set_account_flags(uint32_t value) {
  _internal_set_account_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.account_flags)
}

// optional uint32 play_time_level = 70;
inline bool CSODOTAGameAccountClient::_internal_has_play_time_level() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_play_time_level() const {
  return _internal_has_play_time_level();
}
inline void CSODOTAGameAccountClient::clear_play_time_level() {
  _impl_.play_time_level_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_play_time_level() const {
  return _impl_.play_time_level_;
}
inline uint32_t CSODOTAGameAccountClient::play_time_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.play_time_level)
  return _internal_play_time_level();
}
inline void CSODOTAGameAccountClient::_internal_set_play_time_level(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.play_time_level_ = value;
}
inline void CSODOTAGameAccountClient::set_play_time_level(uint32_t value) {
  _internal_set_play_time_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.play_time_level)
}

// optional uint32 player_behavior_seq_num_last_report = 71;
inline bool CSODOTAGameAccountClient::_internal_has_player_behavior_seq_num_last_report() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_player_behavior_seq_num_last_report() const {
  return _internal_has_player_behavior_seq_num_last_report();
}
inline void CSODOTAGameAccountClient::clear_player_behavior_seq_num_last_report() {
  _impl_.player_behavior_seq_num_last_report_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_player_behavior_seq_num_last_report() const {
  return _impl_.player_behavior_seq_num_last_report_;
}
inline uint32_t CSODOTAGameAccountClient::player_behavior_seq_num_last_report() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
  return _internal_player_behavior_seq_num_last_report();
}
inline void CSODOTAGameAccountClient::_internal_set_player_behavior_seq_num_last_report(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.player_behavior_seq_num_last_report_ = value;
}
inline void CSODOTAGameAccountClient::set_player_behavior_seq_num_last_report(uint32_t value) {
  _internal_set_player_behavior_seq_num_last_report(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
}

// optional uint32 player_behavior_score_last_report = 72;
inline bool CSODOTAGameAccountClient::_internal_has_player_behavior_score_last_report() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_player_behavior_score_last_report() const {
  return _internal_has_player_behavior_score_last_report();
}
inline void CSODOTAGameAccountClient::clear_player_behavior_score_last_report() {
  _impl_.player_behavior_score_last_report_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_player_behavior_score_last_report() const {
  return _impl_.player_behavior_score_last_report_;
}
inline uint32_t CSODOTAGameAccountClient::player_behavior_score_last_report() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.player_behavior_score_last_report)
  return _internal_player_behavior_score_last_report();
}
inline void CSODOTAGameAccountClient::_internal_set_player_behavior_score_last_report(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.player_behavior_score_last_report_ = value;
}
inline void CSODOTAGameAccountClient::set_player_behavior_score_last_report(uint32_t value) {
  _internal_set_player_behavior_score_last_report(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.player_behavior_score_last_report)
}

// optional bool player_behavior_report_old_data = 73;
inline bool CSODOTAGameAccountClient::_internal_has_player_behavior_report_old_data() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_player_behavior_report_old_data() const {
  return _internal_has_player_behavior_report_old_data();
}
inline void CSODOTAGameAccountClient::clear_player_behavior_report_old_data() {
  _impl_.player_behavior_report_old_data_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool CSODOTAGameAccountClient::_internal_player_behavior_report_old_data() const {
  return _impl_.player_behavior_report_old_data_;
}
inline bool CSODOTAGameAccountClient::player_behavior_report_old_data() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.player_behavior_report_old_data)
  return _internal_player_behavior_report_old_data();
}
inline void CSODOTAGameAccountClient::_internal_set_player_behavior_report_old_data(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.player_behavior_report_old_data_ = value;
}
inline void CSODOTAGameAccountClient::set_player_behavior_report_old_data(bool value) {
  _internal_set_player_behavior_report_old_data(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.player_behavior_report_old_data)
}

// optional uint32 tourney_skill_level = 74;
inline bool CSODOTAGameAccountClient::_internal_has_tourney_skill_level() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_tourney_skill_level() const {
  return _internal_has_tourney_skill_level();
}
inline void CSODOTAGameAccountClient::clear_tourney_skill_level() {
  _impl_.tourney_skill_level_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_tourney_skill_level() const {
  return _impl_.tourney_skill_level_;
}
inline uint32_t CSODOTAGameAccountClient::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.tourney_skill_level)
  return _internal_tourney_skill_level();
}
inline void CSODOTAGameAccountClient::_internal_set_tourney_skill_level(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.tourney_skill_level_ = value;
}
inline void CSODOTAGameAccountClient::set_tourney_skill_level(uint32_t value) {
  _internal_set_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.tourney_skill_level)
}

// optional uint32 tourney_recent_participation_date = 85;
inline bool CSODOTAGameAccountClient::_internal_has_tourney_recent_participation_date() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_tourney_recent_participation_date() const {
  return _internal_has_tourney_recent_participation_date();
}
inline void CSODOTAGameAccountClient::clear_tourney_recent_participation_date() {
  _impl_.tourney_recent_participation_date_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_tourney_recent_participation_date() const {
  return _impl_.tourney_recent_participation_date_;
}
inline uint32_t CSODOTAGameAccountClient::tourney_recent_participation_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.tourney_recent_participation_date)
  return _internal_tourney_recent_participation_date();
}
inline void CSODOTAGameAccountClient::_internal_set_tourney_recent_participation_date(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.tourney_recent_participation_date_ = value;
}
inline void CSODOTAGameAccountClient::set_tourney_recent_participation_date(uint32_t value) {
  _internal_set_tourney_recent_participation_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.tourney_recent_participation_date)
}

// optional uint64 anchored_phone_number_id = 88;
inline bool CSODOTAGameAccountClient::_internal_has_anchored_phone_number_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_anchored_phone_number_id() const {
  return _internal_has_anchored_phone_number_id();
}
inline void CSODOTAGameAccountClient::clear_anchored_phone_number_id() {
  _impl_.anchored_phone_number_id_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline uint64_t CSODOTAGameAccountClient::_internal_anchored_phone_number_id() const {
  return _impl_.anchored_phone_number_id_;
}
inline uint64_t CSODOTAGameAccountClient::anchored_phone_number_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.anchored_phone_number_id)
  return _internal_anchored_phone_number_id();
}
inline void CSODOTAGameAccountClient::_internal_set_anchored_phone_number_id(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.anchored_phone_number_id_ = value;
}
inline void CSODOTAGameAccountClient::set_anchored_phone_number_id(uint64_t value) {
  _internal_set_anchored_phone_number_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.anchored_phone_number_id)
}

// optional uint32 ranked_matchmaking_ban_until_date = 89;
inline bool CSODOTAGameAccountClient::_internal_has_ranked_matchmaking_ban_until_date() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_ranked_matchmaking_ban_until_date() const {
  return _internal_has_ranked_matchmaking_ban_until_date();
}
inline void CSODOTAGameAccountClient::clear_ranked_matchmaking_ban_until_date() {
  _impl_.ranked_matchmaking_ban_until_date_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_ranked_matchmaking_ban_until_date() const {
  return _impl_.ranked_matchmaking_ban_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::ranked_matchmaking_ban_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.ranked_matchmaking_ban_until_date)
  return _internal_ranked_matchmaking_ban_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_ranked_matchmaking_ban_until_date(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.ranked_matchmaking_ban_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_ranked_matchmaking_ban_until_date(uint32_t value) {
  _internal_set_ranked_matchmaking_ban_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.ranked_matchmaking_ban_until_date)
}

// optional uint32 recent_game_time_1 = 90;
inline bool CSODOTAGameAccountClient::_internal_has_recent_game_time_1() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recent_game_time_1() const {
  return _internal_has_recent_game_time_1();
}
inline void CSODOTAGameAccountClient::clear_recent_game_time_1() {
  _impl_.recent_game_time_1_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recent_game_time_1() const {
  return _impl_.recent_game_time_1_;
}
inline uint32_t CSODOTAGameAccountClient::recent_game_time_1() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recent_game_time_1)
  return _internal_recent_game_time_1();
}
inline void CSODOTAGameAccountClient::_internal_set_recent_game_time_1(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.recent_game_time_1_ = value;
}
inline void CSODOTAGameAccountClient::set_recent_game_time_1(uint32_t value) {
  _internal_set_recent_game_time_1(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recent_game_time_1)
}

// optional uint32 recent_game_time_2 = 91;
inline bool CSODOTAGameAccountClient::_internal_has_recent_game_time_2() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recent_game_time_2() const {
  return _internal_has_recent_game_time_2();
}
inline void CSODOTAGameAccountClient::clear_recent_game_time_2() {
  _impl_.recent_game_time_2_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recent_game_time_2() const {
  return _impl_.recent_game_time_2_;
}
inline uint32_t CSODOTAGameAccountClient::recent_game_time_2() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recent_game_time_2)
  return _internal_recent_game_time_2();
}
inline void CSODOTAGameAccountClient::_internal_set_recent_game_time_2(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.recent_game_time_2_ = value;
}
inline void CSODOTAGameAccountClient::set_recent_game_time_2(uint32_t value) {
  _internal_set_recent_game_time_2(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recent_game_time_2)
}

// optional uint32 recent_game_time_3 = 92;
inline bool CSODOTAGameAccountClient::_internal_has_recent_game_time_3() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recent_game_time_3() const {
  return _internal_has_recent_game_time_3();
}
inline void CSODOTAGameAccountClient::clear_recent_game_time_3() {
  _impl_.recent_game_time_3_ = 0u;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recent_game_time_3() const {
  return _impl_.recent_game_time_3_;
}
inline uint32_t CSODOTAGameAccountClient::recent_game_time_3() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recent_game_time_3)
  return _internal_recent_game_time_3();
}
inline void CSODOTAGameAccountClient::_internal_set_recent_game_time_3(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.recent_game_time_3_ = value;
}
inline void CSODOTAGameAccountClient::set_recent_game_time_3(uint32_t value) {
  _internal_set_recent_game_time_3(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recent_game_time_3)
}

// optional uint64 favorite_team_packed = 103;
inline bool CSODOTAGameAccountClient::_internal_has_favorite_team_packed() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_favorite_team_packed() const {
  return _internal_has_favorite_team_packed();
}
inline void CSODOTAGameAccountClient::clear_favorite_team_packed() {
  _impl_.favorite_team_packed_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline uint64_t CSODOTAGameAccountClient::_internal_favorite_team_packed() const {
  return _impl_.favorite_team_packed_;
}
inline uint64_t CSODOTAGameAccountClient::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.favorite_team_packed)
  return _internal_favorite_team_packed();
}
inline void CSODOTAGameAccountClient::_internal_set_favorite_team_packed(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.favorite_team_packed_ = value;
}
inline void CSODOTAGameAccountClient::set_favorite_team_packed(uint64_t value) {
  _internal_set_favorite_team_packed(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.favorite_team_packed)
}

// optional uint32 recent_report_time = 104;
inline bool CSODOTAGameAccountClient::_internal_has_recent_report_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recent_report_time() const {
  return _internal_has_recent_report_time();
}
inline void CSODOTAGameAccountClient::clear_recent_report_time() {
  _impl_.recent_report_time_ = 0u;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recent_report_time() const {
  return _impl_.recent_report_time_;
}
inline uint32_t CSODOTAGameAccountClient::recent_report_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recent_report_time)
  return _internal_recent_report_time();
}
inline void CSODOTAGameAccountClient::_internal_set_recent_report_time(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.recent_report_time_ = value;
}
inline void CSODOTAGameAccountClient::set_recent_report_time(uint32_t value) {
  _internal_set_recent_report_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recent_report_time)
}

// optional uint32 custom_game_disabled_until_date = 105;
inline bool CSODOTAGameAccountClient::_internal_has_custom_game_disabled_until_date() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_custom_game_disabled_until_date() const {
  return _internal_has_custom_game_disabled_until_date();
}
inline void CSODOTAGameAccountClient::clear_custom_game_disabled_until_date() {
  _impl_.custom_game_disabled_until_date_ = 0u;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_custom_game_disabled_until_date() const {
  return _impl_.custom_game_disabled_until_date_;
}
inline uint32_t CSODOTAGameAccountClient::custom_game_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.custom_game_disabled_until_date)
  return _internal_custom_game_disabled_until_date();
}
inline void CSODOTAGameAccountClient::_internal_set_custom_game_disabled_until_date(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.custom_game_disabled_until_date_ = value;
}
inline void CSODOTAGameAccountClient::set_custom_game_disabled_until_date(uint32_t value) {
  _internal_set_custom_game_disabled_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.custom_game_disabled_until_date)
}

// optional uint32 recent_win_time_1 = 106;
inline bool CSODOTAGameAccountClient::_internal_has_recent_win_time_1() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recent_win_time_1() const {
  return _internal_has_recent_win_time_1();
}
inline void CSODOTAGameAccountClient::clear_recent_win_time_1() {
  _impl_.recent_win_time_1_ = 0u;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recent_win_time_1() const {
  return _impl_.recent_win_time_1_;
}
inline uint32_t CSODOTAGameAccountClient::recent_win_time_1() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recent_win_time_1)
  return _internal_recent_win_time_1();
}
inline void CSODOTAGameAccountClient::_internal_set_recent_win_time_1(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.recent_win_time_1_ = value;
}
inline void CSODOTAGameAccountClient::set_recent_win_time_1(uint32_t value) {
  _internal_set_recent_win_time_1(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recent_win_time_1)
}

// optional uint32 recent_win_time_2 = 107;
inline bool CSODOTAGameAccountClient::_internal_has_recent_win_time_2() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recent_win_time_2() const {
  return _internal_has_recent_win_time_2();
}
inline void CSODOTAGameAccountClient::clear_recent_win_time_2() {
  _impl_.recent_win_time_2_ = 0u;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recent_win_time_2() const {
  return _impl_.recent_win_time_2_;
}
inline uint32_t CSODOTAGameAccountClient::recent_win_time_2() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recent_win_time_2)
  return _internal_recent_win_time_2();
}
inline void CSODOTAGameAccountClient::_internal_set_recent_win_time_2(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.recent_win_time_2_ = value;
}
inline void CSODOTAGameAccountClient::set_recent_win_time_2(uint32_t value) {
  _internal_set_recent_win_time_2(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recent_win_time_2)
}

// optional uint32 recent_win_time_3 = 108;
inline bool CSODOTAGameAccountClient::_internal_has_recent_win_time_3() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_recent_win_time_3() const {
  return _internal_has_recent_win_time_3();
}
inline void CSODOTAGameAccountClient::clear_recent_win_time_3() {
  _impl_.recent_win_time_3_ = 0u;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_recent_win_time_3() const {
  return _impl_.recent_win_time_3_;
}
inline uint32_t CSODOTAGameAccountClient::recent_win_time_3() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.recent_win_time_3)
  return _internal_recent_win_time_3();
}
inline void CSODOTAGameAccountClient::_internal_set_recent_win_time_3(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.recent_win_time_3_ = value;
}
inline void CSODOTAGameAccountClient::set_recent_win_time_3(uint32_t value) {
  _internal_set_recent_win_time_3(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.recent_win_time_3)
}

// optional uint32 coach_rating = 109;
inline bool CSODOTAGameAccountClient::_internal_has_coach_rating() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_coach_rating() const {
  return _internal_has_coach_rating();
}
inline void CSODOTAGameAccountClient::clear_coach_rating() {
  _impl_.coach_rating_ = 0u;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_coach_rating() const {
  return _impl_.coach_rating_;
}
inline uint32_t CSODOTAGameAccountClient::coach_rating() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.coach_rating)
  return _internal_coach_rating();
}
inline void CSODOTAGameAccountClient::_internal_set_coach_rating(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.coach_rating_ = value;
}
inline void CSODOTAGameAccountClient::set_coach_rating(uint32_t value) {
  _internal_set_coach_rating(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.coach_rating)
}

// optional uint32 queue_points = 114;
inline bool CSODOTAGameAccountClient::_internal_has_queue_points() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_queue_points() const {
  return _internal_has_queue_points();
}
inline void CSODOTAGameAccountClient::clear_queue_points() {
  _impl_.queue_points_ = 0u;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_queue_points() const {
  return _impl_.queue_points_;
}
inline uint32_t CSODOTAGameAccountClient::queue_points() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.queue_points)
  return _internal_queue_points();
}
inline void CSODOTAGameAccountClient::_internal_set_queue_points(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.queue_points_ = value;
}
inline void CSODOTAGameAccountClient::set_queue_points(uint32_t value) {
  _internal_set_queue_points(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.queue_points)
}

// repeated .CSODOTAGameAccountClient.RoleHandicap role_handicaps = 115;
inline int CSODOTAGameAccountClient::_internal_role_handicaps_size() const {
  return _impl_.role_handicaps_.size();
}
inline int CSODOTAGameAccountClient::role_handicaps_size() const {
  return _internal_role_handicaps_size();
}
inline void CSODOTAGameAccountClient::clear_role_handicaps() {
  _impl_.role_handicaps_.Clear();
}
inline ::CSODOTAGameAccountClient_RoleHandicap* CSODOTAGameAccountClient::mutable_role_handicaps(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAGameAccountClient.role_handicaps)
  return _impl_.role_handicaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAGameAccountClient_RoleHandicap >*
CSODOTAGameAccountClient::mutable_role_handicaps() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAGameAccountClient.role_handicaps)
  return &_impl_.role_handicaps_;
}
inline const ::CSODOTAGameAccountClient_RoleHandicap& CSODOTAGameAccountClient::_internal_role_handicaps(int index) const {
  return _impl_.role_handicaps_.Get(index);
}
inline const ::CSODOTAGameAccountClient_RoleHandicap& CSODOTAGameAccountClient::role_handicaps(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.role_handicaps)
  return _internal_role_handicaps(index);
}
inline ::CSODOTAGameAccountClient_RoleHandicap* CSODOTAGameAccountClient::_internal_add_role_handicaps() {
  return _impl_.role_handicaps_.Add();
}
inline ::CSODOTAGameAccountClient_RoleHandicap* CSODOTAGameAccountClient::add_role_handicaps() {
  ::CSODOTAGameAccountClient_RoleHandicap* _add = _internal_add_role_handicaps();
  // @@protoc_insertion_point(field_add:CSODOTAGameAccountClient.role_handicaps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAGameAccountClient_RoleHandicap >&
CSODOTAGameAccountClient::role_handicaps() const {
  // @@protoc_insertion_point(field_list:CSODOTAGameAccountClient.role_handicaps)
  return _impl_.role_handicaps_;
}

// optional uint32 event_mode_recent_time = 120;
inline bool CSODOTAGameAccountClient::_internal_has_event_mode_recent_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_event_mode_recent_time() const {
  return _internal_has_event_mode_recent_time();
}
inline void CSODOTAGameAccountClient::clear_event_mode_recent_time() {
  _impl_.event_mode_recent_time_ = 0u;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_event_mode_recent_time() const {
  return _impl_.event_mode_recent_time_;
}
inline uint32_t CSODOTAGameAccountClient::event_mode_recent_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.event_mode_recent_time)
  return _internal_event_mode_recent_time();
}
inline void CSODOTAGameAccountClient::_internal_set_event_mode_recent_time(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.event_mode_recent_time_ = value;
}
inline void CSODOTAGameAccountClient::set_event_mode_recent_time(uint32_t value) {
  _internal_set_event_mode_recent_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.event_mode_recent_time)
}

// optional uint32 mmr_recalibration_time = 121;
inline bool CSODOTAGameAccountClient::_internal_has_mmr_recalibration_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTAGameAccountClient::has_mmr_recalibration_time() const {
  return _internal_has_mmr_recalibration_time();
}
inline void CSODOTAGameAccountClient::clear_mmr_recalibration_time() {
  _impl_.mmr_recalibration_time_ = 0u;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline uint32_t CSODOTAGameAccountClient::_internal_mmr_recalibration_time() const {
  return _impl_.mmr_recalibration_time_;
}
inline uint32_t CSODOTAGameAccountClient::mmr_recalibration_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountClient.mmr_recalibration_time)
  return _internal_mmr_recalibration_time();
}
inline void CSODOTAGameAccountClient::_internal_set_mmr_recalibration_time(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.mmr_recalibration_time_ = value;
}
inline void CSODOTAGameAccountClient::set_mmr_recalibration_time(uint32_t value) {
  _internal_set_mmr_recalibration_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountClient.mmr_recalibration_time)
}

// -------------------------------------------------------------------

// CSODOTAGameAccountPlus

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSODOTAGameAccountPlus::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSODOTAGameAccountPlus::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSODOTAGameAccountPlus::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CSODOTAGameAccountPlus::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.account_id)
  return _internal_account_id();
}
inline void CSODOTAGameAccountPlus::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CSODOTAGameAccountPlus::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.account_id)
}

// optional uint32 original_start_date = 2;
inline bool CSODOTAGameAccountPlus::_internal_has_original_start_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_original_start_date() const {
  return _internal_has_original_start_date();
}
inline void CSODOTAGameAccountPlus::clear_original_start_date() {
  _impl_.original_start_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSODOTAGameAccountPlus::_internal_original_start_date() const {
  return _impl_.original_start_date_;
}
inline uint32_t CSODOTAGameAccountPlus::original_start_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.original_start_date)
  return _internal_original_start_date();
}
inline void CSODOTAGameAccountPlus::_internal_set_original_start_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.original_start_date_ = value;
}
inline void CSODOTAGameAccountPlus::set_original_start_date(uint32_t value) {
  _internal_set_original_start_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.original_start_date)
}

// optional uint32 plus_flags = 3;
inline bool CSODOTAGameAccountPlus::_internal_has_plus_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_plus_flags() const {
  return _internal_has_plus_flags();
}
inline void CSODOTAGameAccountPlus::clear_plus_flags() {
  _impl_.plus_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSODOTAGameAccountPlus::_internal_plus_flags() const {
  return _impl_.plus_flags_;
}
inline uint32_t CSODOTAGameAccountPlus::plus_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.plus_flags)
  return _internal_plus_flags();
}
inline void CSODOTAGameAccountPlus::_internal_set_plus_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.plus_flags_ = value;
}
inline void CSODOTAGameAccountPlus::set_plus_flags(uint32_t value) {
  _internal_set_plus_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.plus_flags)
}

// optional uint32 plus_status = 4;
inline bool CSODOTAGameAccountPlus::_internal_has_plus_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_plus_status() const {
  return _internal_has_plus_status();
}
inline void CSODOTAGameAccountPlus::clear_plus_status() {
  _impl_.plus_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSODOTAGameAccountPlus::_internal_plus_status() const {
  return _impl_.plus_status_;
}
inline uint32_t CSODOTAGameAccountPlus::plus_status() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.plus_status)
  return _internal_plus_status();
}
inline void CSODOTAGameAccountPlus::_internal_set_plus_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.plus_status_ = value;
}
inline void CSODOTAGameAccountPlus::set_plus_status(uint32_t value) {
  _internal_set_plus_status(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.plus_status)
}

// optional uint32 prepaid_time_start = 5;
inline bool CSODOTAGameAccountPlus::_internal_has_prepaid_time_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_prepaid_time_start() const {
  return _internal_has_prepaid_time_start();
}
inline void CSODOTAGameAccountPlus::clear_prepaid_time_start() {
  _impl_.prepaid_time_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CSODOTAGameAccountPlus::_internal_prepaid_time_start() const {
  return _impl_.prepaid_time_start_;
}
inline uint32_t CSODOTAGameAccountPlus::prepaid_time_start() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.prepaid_time_start)
  return _internal_prepaid_time_start();
}
inline void CSODOTAGameAccountPlus::_internal_set_prepaid_time_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.prepaid_time_start_ = value;
}
inline void CSODOTAGameAccountPlus::set_prepaid_time_start(uint32_t value) {
  _internal_set_prepaid_time_start(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.prepaid_time_start)
}

// optional uint32 prepaid_time_balance = 6;
inline bool CSODOTAGameAccountPlus::_internal_has_prepaid_time_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_prepaid_time_balance() const {
  return _internal_has_prepaid_time_balance();
}
inline void CSODOTAGameAccountPlus::clear_prepaid_time_balance() {
  _impl_.prepaid_time_balance_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CSODOTAGameAccountPlus::_internal_prepaid_time_balance() const {
  return _impl_.prepaid_time_balance_;
}
inline uint32_t CSODOTAGameAccountPlus::prepaid_time_balance() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.prepaid_time_balance)
  return _internal_prepaid_time_balance();
}
inline void CSODOTAGameAccountPlus::_internal_set_prepaid_time_balance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.prepaid_time_balance_ = value;
}
inline void CSODOTAGameAccountPlus::set_prepaid_time_balance(uint32_t value) {
  _internal_set_prepaid_time_balance(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.prepaid_time_balance)
}

// optional fixed32 next_payment_date = 7;
inline bool CSODOTAGameAccountPlus::_internal_has_next_payment_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_next_payment_date() const {
  return _internal_has_next_payment_date();
}
inline void CSODOTAGameAccountPlus::clear_next_payment_date() {
  _impl_.next_payment_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSODOTAGameAccountPlus::_internal_next_payment_date() const {
  return _impl_.next_payment_date_;
}
inline uint32_t CSODOTAGameAccountPlus::next_payment_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.next_payment_date)
  return _internal_next_payment_date();
}
inline void CSODOTAGameAccountPlus::_internal_set_next_payment_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.next_payment_date_ = value;
}
inline void CSODOTAGameAccountPlus::set_next_payment_date(uint32_t value) {
  _internal_set_next_payment_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.next_payment_date)
}

// optional fixed64 steam_agreement_id = 8;
inline bool CSODOTAGameAccountPlus::_internal_has_steam_agreement_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAGameAccountPlus::has_steam_agreement_id() const {
  return _internal_has_steam_agreement_id();
}
inline void CSODOTAGameAccountPlus::clear_steam_agreement_id() {
  _impl_.steam_agreement_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CSODOTAGameAccountPlus::_internal_steam_agreement_id() const {
  return _impl_.steam_agreement_id_;
}
inline uint64_t CSODOTAGameAccountPlus::steam_agreement_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAGameAccountPlus.steam_agreement_id)
  return _internal_steam_agreement_id();
}
inline void CSODOTAGameAccountPlus::_internal_set_steam_agreement_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.steam_agreement_id_ = value;
}
inline void CSODOTAGameAccountPlus::set_steam_agreement_id(uint64_t value) {
  _internal_set_steam_agreement_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAGameAccountPlus.steam_agreement_id)
}

// -------------------------------------------------------------------

// CMsgLobbyFeaturedGamemodeProgress_AccountProgress

// optional uint32 account_id = 1;
inline bool CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyFeaturedGamemodeProgress_AccountProgress::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgLobbyFeaturedGamemodeProgress_AccountProgress::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyFeaturedGamemodeProgress.AccountProgress.account_id)
  return _internal_account_id();
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyFeaturedGamemodeProgress.AccountProgress.account_id)
}

// optional uint32 current_value = 2;
inline bool CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_has_current_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyFeaturedGamemodeProgress_AccountProgress::has_current_value() const {
  return _internal_has_current_value();
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::clear_current_value() {
  _impl_.current_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_current_value() const {
  return _impl_.current_value_;
}
inline uint32_t CMsgLobbyFeaturedGamemodeProgress_AccountProgress::current_value() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyFeaturedGamemodeProgress.AccountProgress.current_value)
  return _internal_current_value();
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_set_current_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_value_ = value;
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::set_current_value(uint32_t value) {
  _internal_set_current_value(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyFeaturedGamemodeProgress.AccountProgress.current_value)
}

// optional uint32 max_value = 3;
inline bool CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_has_max_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLobbyFeaturedGamemodeProgress_AccountProgress::has_max_value() const {
  return _internal_has_max_value();
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::clear_max_value() {
  _impl_.max_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_max_value() const {
  return _impl_.max_value_;
}
inline uint32_t CMsgLobbyFeaturedGamemodeProgress_AccountProgress::max_value() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyFeaturedGamemodeProgress.AccountProgress.max_value)
  return _internal_max_value();
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::_internal_set_max_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_value_ = value;
}
inline void CMsgLobbyFeaturedGamemodeProgress_AccountProgress::set_max_value(uint32_t value) {
  _internal_set_max_value(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyFeaturedGamemodeProgress.AccountProgress.max_value)
}

// -------------------------------------------------------------------

// CMsgLobbyFeaturedGamemodeProgress

// repeated .CMsgLobbyFeaturedGamemodeProgress.AccountProgress accounts = 1;
inline int CMsgLobbyFeaturedGamemodeProgress::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int CMsgLobbyFeaturedGamemodeProgress::accounts_size() const {
  return _internal_accounts_size();
}
inline void CMsgLobbyFeaturedGamemodeProgress::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* CMsgLobbyFeaturedGamemodeProgress::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyFeaturedGamemodeProgress.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress >*
CMsgLobbyFeaturedGamemodeProgress::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyFeaturedGamemodeProgress.accounts)
  return &_impl_.accounts_;
}
inline const ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress& CMsgLobbyFeaturedGamemodeProgress::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress& CMsgLobbyFeaturedGamemodeProgress::accounts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyFeaturedGamemodeProgress.accounts)
  return _internal_accounts(index);
}
inline ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* CMsgLobbyFeaturedGamemodeProgress::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* CMsgLobbyFeaturedGamemodeProgress::add_accounts() {
  ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:CMsgLobbyFeaturedGamemodeProgress.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyFeaturedGamemodeProgress_AccountProgress >&
CMsgLobbyFeaturedGamemodeProgress::accounts() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyFeaturedGamemodeProgress.accounts)
  return _impl_.accounts_;
}

// -------------------------------------------------------------------

// CMsgBattleCupVictory

// optional uint32 account_id = 1;
inline bool CMsgBattleCupVictory::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgBattleCupVictory::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBattleCupVictory::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgBattleCupVictory::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.account_id)
  return _internal_account_id();
}
inline void CMsgBattleCupVictory::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgBattleCupVictory::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.account_id)
}

// optional uint32 win_date = 2;
inline bool CMsgBattleCupVictory::_internal_has_win_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_win_date() const {
  return _internal_has_win_date();
}
inline void CMsgBattleCupVictory::clear_win_date() {
  _impl_.win_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBattleCupVictory::_internal_win_date() const {
  return _impl_.win_date_;
}
inline uint32_t CMsgBattleCupVictory::win_date() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.win_date)
  return _internal_win_date();
}
inline void CMsgBattleCupVictory::_internal_set_win_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.win_date_ = value;
}
inline void CMsgBattleCupVictory::set_win_date(uint32_t value) {
  _internal_set_win_date(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.win_date)
}

// optional uint32 valid_until = 3;
inline bool CMsgBattleCupVictory::_internal_has_valid_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_valid_until() const {
  return _internal_has_valid_until();
}
inline void CMsgBattleCupVictory::clear_valid_until() {
  _impl_.valid_until_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBattleCupVictory::_internal_valid_until() const {
  return _impl_.valid_until_;
}
inline uint32_t CMsgBattleCupVictory::valid_until() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.valid_until)
  return _internal_valid_until();
}
inline void CMsgBattleCupVictory::_internal_set_valid_until(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.valid_until_ = value;
}
inline void CMsgBattleCupVictory::set_valid_until(uint32_t value) {
  _internal_set_valid_until(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.valid_until)
}

// optional uint32 skill_level = 4;
inline bool CMsgBattleCupVictory::_internal_has_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_skill_level() const {
  return _internal_has_skill_level();
}
inline void CMsgBattleCupVictory::clear_skill_level() {
  _impl_.skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBattleCupVictory::_internal_skill_level() const {
  return _impl_.skill_level_;
}
inline uint32_t CMsgBattleCupVictory::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.skill_level)
  return _internal_skill_level();
}
inline void CMsgBattleCupVictory::_internal_set_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.skill_level_ = value;
}
inline void CMsgBattleCupVictory::set_skill_level(uint32_t value) {
  _internal_set_skill_level(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.skill_level)
}

// optional uint32 tournament_id = 5;
inline bool CMsgBattleCupVictory::_internal_has_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CMsgBattleCupVictory::clear_tournament_id() {
  _impl_.tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBattleCupVictory::_internal_tournament_id() const {
  return _impl_.tournament_id_;
}
inline uint32_t CMsgBattleCupVictory::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.tournament_id)
  return _internal_tournament_id();
}
inline void CMsgBattleCupVictory::_internal_set_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tournament_id_ = value;
}
inline void CMsgBattleCupVictory::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.tournament_id)
}

// optional uint32 division_id = 6;
inline bool CMsgBattleCupVictory::_internal_has_division_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_division_id() const {
  return _internal_has_division_id();
}
inline void CMsgBattleCupVictory::clear_division_id() {
  _impl_.division_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBattleCupVictory::_internal_division_id() const {
  return _impl_.division_id_;
}
inline uint32_t CMsgBattleCupVictory::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.division_id)
  return _internal_division_id();
}
inline void CMsgBattleCupVictory::_internal_set_division_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.division_id_ = value;
}
inline void CMsgBattleCupVictory::set_division_id(uint32_t value) {
  _internal_set_division_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.division_id)
}

// optional uint32 team_id = 7;
inline bool CMsgBattleCupVictory::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgBattleCupVictory::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgBattleCupVictory::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgBattleCupVictory::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.team_id)
  return _internal_team_id();
}
inline void CMsgBattleCupVictory::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.team_id_ = value;
}
inline void CMsgBattleCupVictory::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.team_id)
}

// optional uint32 streak = 8;
inline bool CMsgBattleCupVictory::_internal_has_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_streak() const {
  return _internal_has_streak();
}
inline void CMsgBattleCupVictory::clear_streak() {
  _impl_.streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBattleCupVictory::_internal_streak() const {
  return _impl_.streak_;
}
inline uint32_t CMsgBattleCupVictory::streak() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.streak)
  return _internal_streak();
}
inline void CMsgBattleCupVictory::_internal_set_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.streak_ = value;
}
inline void CMsgBattleCupVictory::set_streak(uint32_t value) {
  _internal_set_streak(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.streak)
}

// optional uint32 trophy_id = 9;
inline bool CMsgBattleCupVictory::_internal_has_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgBattleCupVictory::clear_trophy_id() {
  _impl_.trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgBattleCupVictory::_internal_trophy_id() const {
  return _impl_.trophy_id_;
}
inline uint32_t CMsgBattleCupVictory::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgBattleCupVictory::_internal_set_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.trophy_id_ = value;
}
inline void CMsgBattleCupVictory::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.trophy_id)
}

// -------------------------------------------------------------------

// CMsgLobbyBattleCupVictoryList

// repeated .CMsgBattleCupVictory winners = 1;
inline int CMsgLobbyBattleCupVictoryList::_internal_winners_size() const {
  return _impl_.winners_.size();
}
inline int CMsgLobbyBattleCupVictoryList::winners_size() const {
  return _internal_winners_size();
}
inline void CMsgLobbyBattleCupVictoryList::clear_winners() {
  _impl_.winners_.Clear();
}
inline ::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::mutable_winners(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyBattleCupVictoryList.winners)
  return _impl_.winners_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleCupVictory >*
CMsgLobbyBattleCupVictoryList::mutable_winners() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyBattleCupVictoryList.winners)
  return &_impl_.winners_;
}
inline const ::CMsgBattleCupVictory& CMsgLobbyBattleCupVictoryList::_internal_winners(int index) const {
  return _impl_.winners_.Get(index);
}
inline const ::CMsgBattleCupVictory& CMsgLobbyBattleCupVictoryList::winners(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyBattleCupVictoryList.winners)
  return _internal_winners(index);
}
inline ::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::_internal_add_winners() {
  return _impl_.winners_.Add();
}
inline ::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::add_winners() {
  ::CMsgBattleCupVictory* _add = _internal_add_winners();
  // @@protoc_insertion_point(field_add:CMsgLobbyBattleCupVictoryList.winners)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleCupVictory >&
CMsgLobbyBattleCupVictoryList::winners() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyBattleCupVictoryList.winners)
  return _impl_.winners_;
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastNotification

// optional string message = 1;
inline bool CMsgDOTABroadcastNotification::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTABroadcastNotification::has_message() const {
  return _internal_has_message();
}
inline void CMsgDOTABroadcastNotification::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTABroadcastNotification::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastNotification.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTABroadcastNotification::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastNotification.message)
}
inline std::string* CMsgDOTABroadcastNotification::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTABroadcastNotification.message)
  return _s;
}
inline const std::string& CMsgDOTABroadcastNotification::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CMsgDOTABroadcastNotification::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTABroadcastNotification::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTABroadcastNotification::release_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTABroadcastNotification.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTABroadcastNotification::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABroadcastNotification.message)
}

// -------------------------------------------------------------------

// CProtoItemHeroStatue

// optional uint32 hero_id = 1;
inline bool CProtoItemHeroStatue::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CProtoItemHeroStatue::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CProtoItemHeroStatue::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CProtoItemHeroStatue::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CProtoItemHeroStatue::hero_id() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.hero_id)
  return _internal_hero_id();
}
inline void CProtoItemHeroStatue::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CProtoItemHeroStatue::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.hero_id)
}

// optional uint32 status_effect_index = 2;
inline bool CProtoItemHeroStatue::_internal_has_status_effect_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CProtoItemHeroStatue::has_status_effect_index() const {
  return _internal_has_status_effect_index();
}
inline void CProtoItemHeroStatue::clear_status_effect_index() {
  _impl_.status_effect_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CProtoItemHeroStatue::_internal_status_effect_index() const {
  return _impl_.status_effect_index_;
}
inline uint32_t CProtoItemHeroStatue::status_effect_index() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.status_effect_index)
  return _internal_status_effect_index();
}
inline void CProtoItemHeroStatue::_internal_set_status_effect_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.status_effect_index_ = value;
}
inline void CProtoItemHeroStatue::set_status_effect_index(uint32_t value) {
  _internal_set_status_effect_index(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.status_effect_index)
}

// optional string sequence_name = 3;
inline bool CProtoItemHeroStatue::_internal_has_sequence_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CProtoItemHeroStatue::has_sequence_name() const {
  return _internal_has_sequence_name();
}
inline void CProtoItemHeroStatue::clear_sequence_name() {
  _impl_.sequence_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CProtoItemHeroStatue::sequence_name() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.sequence_name)
  return _internal_sequence_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CProtoItemHeroStatue::set_sequence_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sequence_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.sequence_name)
}
inline std::string* CProtoItemHeroStatue::mutable_sequence_name() {
  std::string* _s = _internal_mutable_sequence_name();
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.sequence_name)
  return _s;
}
inline const std::string& CProtoItemHeroStatue::_internal_sequence_name() const {
  return _impl_.sequence_name_.Get();
}
inline void CProtoItemHeroStatue::_internal_set_sequence_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sequence_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CProtoItemHeroStatue::_internal_mutable_sequence_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sequence_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CProtoItemHeroStatue::release_sequence_name() {
  // @@protoc_insertion_point(field_release:CProtoItemHeroStatue.sequence_name)
  if (!_internal_has_sequence_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sequence_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sequence_name_.IsDefault()) {
    _impl_.sequence_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CProtoItemHeroStatue::set_allocated_sequence_name(std::string* sequence_name) {
  if (sequence_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sequence_name_.SetAllocated(sequence_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sequence_name_.IsDefault()) {
    _impl_.sequence_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.sequence_name)
}

// optional float cycle = 4;
inline bool CProtoItemHeroStatue::_internal_has_cycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CProtoItemHeroStatue::has_cycle() const {
  return _internal_has_cycle();
}
inline void CProtoItemHeroStatue::clear_cycle() {
  _impl_.cycle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CProtoItemHeroStatue::_internal_cycle() const {
  return _impl_.cycle_;
}
inline float CProtoItemHeroStatue::cycle() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.cycle)
  return _internal_cycle();
}
inline void CProtoItemHeroStatue::_internal_set_cycle(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cycle_ = value;
}
inline void CProtoItemHeroStatue::set_cycle(float value) {
  _internal_set_cycle(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.cycle)
}

// repeated uint32 wearable = 5;
inline int CProtoItemHeroStatue::_internal_wearable_size() const {
  return _impl_.wearable_.size();
}
inline int CProtoItemHeroStatue::wearable_size() const {
  return _internal_wearable_size();
}
inline void CProtoItemHeroStatue::clear_wearable() {
  _impl_.wearable_.Clear();
}
inline uint32_t CProtoItemHeroStatue::_internal_wearable(int index) const {
  return _impl_.wearable_.Get(index);
}
inline uint32_t CProtoItemHeroStatue::wearable(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.wearable)
  return _internal_wearable(index);
}
inline void CProtoItemHeroStatue::set_wearable(int index, uint32_t value) {
  _impl_.wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.wearable)
}
inline void CProtoItemHeroStatue::_internal_add_wearable(uint32_t value) {
  _impl_.wearable_.Add(value);
}
inline void CProtoItemHeroStatue::add_wearable(uint32_t value) {
  _internal_add_wearable(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.wearable)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CProtoItemHeroStatue::_internal_wearable() const {
  return _impl_.wearable_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CProtoItemHeroStatue::wearable() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.wearable)
  return _internal_wearable();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CProtoItemHeroStatue::_internal_mutable_wearable() {
  return &_impl_.wearable_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CProtoItemHeroStatue::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.wearable)
  return _internal_mutable_wearable();
}

// optional string inscription = 6;
inline bool CProtoItemHeroStatue::_internal_has_inscription() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CProtoItemHeroStatue::has_inscription() const {
  return _internal_has_inscription();
}
inline void CProtoItemHeroStatue::clear_inscription() {
  _impl_.inscription_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CProtoItemHeroStatue::inscription() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.inscription)
  return _internal_inscription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CProtoItemHeroStatue::set_inscription(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.inscription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.inscription)
}
inline std::string* CProtoItemHeroStatue::mutable_inscription() {
  std::string* _s = _internal_mutable_inscription();
  // @@protoc_insertion_point(field_mutable:CProtoItemHeroStatue.inscription)
  return _s;
}
inline const std::string& CProtoItemHeroStatue::_internal_inscription() const {
  return _impl_.inscription_.Get();
}
inline void CProtoItemHeroStatue::_internal_set_inscription(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.inscription_.Set(value, GetArenaForAllocation());
}
inline std::string* CProtoItemHeroStatue::_internal_mutable_inscription() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.inscription_.Mutable(GetArenaForAllocation());
}
inline std::string* CProtoItemHeroStatue::release_inscription() {
  // @@protoc_insertion_point(field_release:CProtoItemHeroStatue.inscription)
  if (!_internal_has_inscription()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.inscription_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inscription_.IsDefault()) {
    _impl_.inscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CProtoItemHeroStatue::set_allocated_inscription(std::string* inscription) {
  if (inscription != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.inscription_.SetAllocated(inscription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inscription_.IsDefault()) {
    _impl_.inscription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CProtoItemHeroStatue.inscription)
}

// repeated uint32 style = 7;
inline int CProtoItemHeroStatue::_internal_style_size() const {
  return _impl_.style_.size();
}
inline int CProtoItemHeroStatue::style_size() const {
  return _internal_style_size();
}
inline void CProtoItemHeroStatue::clear_style() {
  _impl_.style_.Clear();
}
inline uint32_t CProtoItemHeroStatue::_internal_style(int index) const {
  return _impl_.style_.Get(index);
}
inline uint32_t CProtoItemHeroStatue::style(int index) const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.style)
  return _internal_style(index);
}
inline void CProtoItemHeroStatue::set_style(int index, uint32_t value) {
  _impl_.style_.Set(index, value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.style)
}
inline void CProtoItemHeroStatue::_internal_add_style(uint32_t value) {
  _impl_.style_.Add(value);
}
inline void CProtoItemHeroStatue::add_style(uint32_t value) {
  _internal_add_style(value);
  // @@protoc_insertion_point(field_add:CProtoItemHeroStatue.style)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CProtoItemHeroStatue::_internal_style() const {
  return _impl_.style_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CProtoItemHeroStatue::style() const {
  // @@protoc_insertion_point(field_list:CProtoItemHeroStatue.style)
  return _internal_style();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CProtoItemHeroStatue::_internal_mutable_style() {
  return &_impl_.style_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CProtoItemHeroStatue::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:CProtoItemHeroStatue.style)
  return _internal_mutable_style();
}

// optional bool tournament_drop = 8;
inline bool CProtoItemHeroStatue::_internal_has_tournament_drop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CProtoItemHeroStatue::has_tournament_drop() const {
  return _internal_has_tournament_drop();
}
inline void CProtoItemHeroStatue::clear_tournament_drop() {
  _impl_.tournament_drop_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CProtoItemHeroStatue::_internal_tournament_drop() const {
  return _impl_.tournament_drop_;
}
inline bool CProtoItemHeroStatue::tournament_drop() const {
  // @@protoc_insertion_point(field_get:CProtoItemHeroStatue.tournament_drop)
  return _internal_tournament_drop();
}
inline void CProtoItemHeroStatue::_internal_set_tournament_drop(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tournament_drop_ = value;
}
inline void CProtoItemHeroStatue::set_tournament_drop(bool value) {
  _internal_set_tournament_drop(value);
  // @@protoc_insertion_point(field_set:CProtoItemHeroStatue.tournament_drop)
}

// -------------------------------------------------------------------

// CMatchPlayerAbilityUpgrade

// optional int32 ability = 1 [default = -1];
inline bool CMatchPlayerAbilityUpgrade::_internal_has_ability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return _internal_has_ability();
}
inline void CMatchPlayerAbilityUpgrade::clear_ability() {
  _impl_.ability_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMatchPlayerAbilityUpgrade::_internal_ability() const {
  return _impl_.ability_;
}
inline int32_t CMatchPlayerAbilityUpgrade::ability() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.ability)
  return _internal_ability();
}
inline void CMatchPlayerAbilityUpgrade::_internal_set_ability(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ability_ = value;
}
inline void CMatchPlayerAbilityUpgrade::set_ability(int32_t value) {
  _internal_set_ability(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.ability)
}

// optional uint32 time = 2;
inline bool CMatchPlayerAbilityUpgrade::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchPlayerAbilityUpgrade::has_time() const {
  return _internal_has_time();
}
inline void CMatchPlayerAbilityUpgrade::clear_time() {
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMatchPlayerAbilityUpgrade::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t CMatchPlayerAbilityUpgrade::time() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerAbilityUpgrade.time)
  return _internal_time();
}
inline void CMatchPlayerAbilityUpgrade::_internal_set_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}
inline void CMatchPlayerAbilityUpgrade::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerAbilityUpgrade.time)
}

// -------------------------------------------------------------------

// CMatchPlayerTimedStats

// optional uint32 time = 1;
inline bool CMatchPlayerTimedStats::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_time() const {
  return _internal_has_time();
}
inline void CMatchPlayerTimedStats::clear_time() {
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t CMatchPlayerTimedStats::time() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.time)
  return _internal_time();
}
inline void CMatchPlayerTimedStats::_internal_set_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}
inline void CMatchPlayerTimedStats::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.time)
}

// optional uint32 kills = 2;
inline bool CMatchPlayerTimedStats::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_kills() const {
  return _internal_has_kills();
}
inline void CMatchPlayerTimedStats::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMatchPlayerTimedStats::kills() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.kills)
  return _internal_kills();
}
inline void CMatchPlayerTimedStats::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kills_ = value;
}
inline void CMatchPlayerTimedStats::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.kills)
}

// optional uint32 deaths = 3;
inline bool CMatchPlayerTimedStats::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMatchPlayerTimedStats::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMatchPlayerTimedStats::deaths() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.deaths)
  return _internal_deaths();
}
inline void CMatchPlayerTimedStats::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.deaths_ = value;
}
inline void CMatchPlayerTimedStats::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.deaths)
}

// optional uint32 assists = 4;
inline bool CMatchPlayerTimedStats::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_assists() const {
  return _internal_has_assists();
}
inline void CMatchPlayerTimedStats::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMatchPlayerTimedStats::assists() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.assists)
  return _internal_assists();
}
inline void CMatchPlayerTimedStats::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.assists_ = value;
}
inline void CMatchPlayerTimedStats::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.assists)
}

// optional uint32 net_worth = 5;
inline bool CMatchPlayerTimedStats::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMatchPlayerTimedStats::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMatchPlayerTimedStats::net_worth() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.net_worth)
  return _internal_net_worth();
}
inline void CMatchPlayerTimedStats::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.net_worth_ = value;
}
inline void CMatchPlayerTimedStats::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.net_worth)
}

// optional uint32 xp = 6;
inline bool CMatchPlayerTimedStats::_internal_has_xp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_xp() const {
  return _internal_has_xp();
}
inline void CMatchPlayerTimedStats::clear_xp() {
  _impl_.xp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_xp() const {
  return _impl_.xp_;
}
inline uint32_t CMatchPlayerTimedStats::xp() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.xp)
  return _internal_xp();
}
inline void CMatchPlayerTimedStats::_internal_set_xp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.xp_ = value;
}
inline void CMatchPlayerTimedStats::set_xp(uint32_t value) {
  _internal_set_xp(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.xp)
}

// optional uint32 last_hits = 7;
inline bool CMatchPlayerTimedStats::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMatchPlayerTimedStats::clear_last_hits() {
  _impl_.last_hits_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline uint32_t CMatchPlayerTimedStats::last_hits() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.last_hits)
  return _internal_last_hits();
}
inline void CMatchPlayerTimedStats::_internal_set_last_hits(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.last_hits_ = value;
}
inline void CMatchPlayerTimedStats::set_last_hits(uint32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.last_hits)
}

// optional uint32 denies = 8;
inline bool CMatchPlayerTimedStats::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_denies() const {
  return _internal_has_denies();
}
inline void CMatchPlayerTimedStats::clear_denies() {
  _impl_.denies_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_denies() const {
  return _impl_.denies_;
}
inline uint32_t CMatchPlayerTimedStats::denies() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.denies)
  return _internal_denies();
}
inline void CMatchPlayerTimedStats::_internal_set_denies(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.denies_ = value;
}
inline void CMatchPlayerTimedStats::set_denies(uint32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.denies)
}

// optional uint32 bounty_rune_gold = 9;
inline bool CMatchPlayerTimedStats::_internal_has_bounty_rune_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_bounty_rune_gold() const {
  return _internal_has_bounty_rune_gold();
}
inline void CMatchPlayerTimedStats::clear_bounty_rune_gold() {
  _impl_.bounty_rune_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_bounty_rune_gold() const {
  return _impl_.bounty_rune_gold_;
}
inline uint32_t CMatchPlayerTimedStats::bounty_rune_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.bounty_rune_gold)
  return _internal_bounty_rune_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_bounty_rune_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bounty_rune_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_bounty_rune_gold(uint32_t value) {
  _internal_set_bounty_rune_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.bounty_rune_gold)
}

// optional uint32 range_creep_upgrade_gold = 10;
inline bool CMatchPlayerTimedStats::_internal_has_range_creep_upgrade_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_range_creep_upgrade_gold() const {
  return _internal_has_range_creep_upgrade_gold();
}
inline void CMatchPlayerTimedStats::clear_range_creep_upgrade_gold() {
  _impl_.range_creep_upgrade_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_range_creep_upgrade_gold() const {
  return _impl_.range_creep_upgrade_gold_;
}
inline uint32_t CMatchPlayerTimedStats::range_creep_upgrade_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.range_creep_upgrade_gold)
  return _internal_range_creep_upgrade_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_range_creep_upgrade_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.range_creep_upgrade_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_range_creep_upgrade_gold(uint32_t value) {
  _internal_set_range_creep_upgrade_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.range_creep_upgrade_gold)
}

// optional uint32 observer_wards_dewarded = 11;
inline bool CMatchPlayerTimedStats::_internal_has_observer_wards_dewarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_observer_wards_dewarded() const {
  return _internal_has_observer_wards_dewarded();
}
inline void CMatchPlayerTimedStats::clear_observer_wards_dewarded() {
  _impl_.observer_wards_dewarded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_observer_wards_dewarded() const {
  return _impl_.observer_wards_dewarded_;
}
inline uint32_t CMatchPlayerTimedStats::observer_wards_dewarded() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.observer_wards_dewarded)
  return _internal_observer_wards_dewarded();
}
inline void CMatchPlayerTimedStats::_internal_set_observer_wards_dewarded(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.observer_wards_dewarded_ = value;
}
inline void CMatchPlayerTimedStats::set_observer_wards_dewarded(uint32_t value) {
  _internal_set_observer_wards_dewarded(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.observer_wards_dewarded)
}

// optional uint32 reliable_gold_earned = 12;
inline bool CMatchPlayerTimedStats::_internal_has_reliable_gold_earned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_reliable_gold_earned() const {
  return _internal_has_reliable_gold_earned();
}
inline void CMatchPlayerTimedStats::clear_reliable_gold_earned() {
  _impl_.reliable_gold_earned_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_reliable_gold_earned() const {
  return _impl_.reliable_gold_earned_;
}
inline uint32_t CMatchPlayerTimedStats::reliable_gold_earned() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.reliable_gold_earned)
  return _internal_reliable_gold_earned();
}
inline void CMatchPlayerTimedStats::_internal_set_reliable_gold_earned(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.reliable_gold_earned_ = value;
}
inline void CMatchPlayerTimedStats::set_reliable_gold_earned(uint32_t value) {
  _internal_set_reliable_gold_earned(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.reliable_gold_earned)
}

// optional uint32 gold_loss_prevented = 13;
inline bool CMatchPlayerTimedStats::_internal_has_gold_loss_prevented() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_gold_loss_prevented() const {
  return _internal_has_gold_loss_prevented();
}
inline void CMatchPlayerTimedStats::clear_gold_loss_prevented() {
  _impl_.gold_loss_prevented_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_gold_loss_prevented() const {
  return _impl_.gold_loss_prevented_;
}
inline uint32_t CMatchPlayerTimedStats::gold_loss_prevented() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.gold_loss_prevented)
  return _internal_gold_loss_prevented();
}
inline void CMatchPlayerTimedStats::_internal_set_gold_loss_prevented(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.gold_loss_prevented_ = value;
}
inline void CMatchPlayerTimedStats::set_gold_loss_prevented(uint32_t value) {
  _internal_set_gold_loss_prevented(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.gold_loss_prevented)
}

// optional uint32 hero_kill_gold = 14;
inline bool CMatchPlayerTimedStats::_internal_has_hero_kill_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_hero_kill_gold() const {
  return _internal_has_hero_kill_gold();
}
inline void CMatchPlayerTimedStats::clear_hero_kill_gold() {
  _impl_.hero_kill_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_hero_kill_gold() const {
  return _impl_.hero_kill_gold_;
}
inline uint32_t CMatchPlayerTimedStats::hero_kill_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.hero_kill_gold)
  return _internal_hero_kill_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_hero_kill_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.hero_kill_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_hero_kill_gold(uint32_t value) {
  _internal_set_hero_kill_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.hero_kill_gold)
}

// optional uint32 creep_kill_gold = 15;
inline bool CMatchPlayerTimedStats::_internal_has_creep_kill_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_creep_kill_gold() const {
  return _internal_has_creep_kill_gold();
}
inline void CMatchPlayerTimedStats::clear_creep_kill_gold() {
  _impl_.creep_kill_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_creep_kill_gold() const {
  return _impl_.creep_kill_gold_;
}
inline uint32_t CMatchPlayerTimedStats::creep_kill_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.creep_kill_gold)
  return _internal_creep_kill_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_creep_kill_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.creep_kill_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_creep_kill_gold(uint32_t value) {
  _internal_set_creep_kill_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.creep_kill_gold)
}

// optional uint32 building_gold = 16;
inline bool CMatchPlayerTimedStats::_internal_has_building_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_building_gold() const {
  return _internal_has_building_gold();
}
inline void CMatchPlayerTimedStats::clear_building_gold() {
  _impl_.building_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_building_gold() const {
  return _impl_.building_gold_;
}
inline uint32_t CMatchPlayerTimedStats::building_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.building_gold)
  return _internal_building_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_building_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.building_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_building_gold(uint32_t value) {
  _internal_set_building_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.building_gold)
}

// optional uint32 other_gold = 17;
inline bool CMatchPlayerTimedStats::_internal_has_other_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_other_gold() const {
  return _internal_has_other_gold();
}
inline void CMatchPlayerTimedStats::clear_other_gold() {
  _impl_.other_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_other_gold() const {
  return _impl_.other_gold_;
}
inline uint32_t CMatchPlayerTimedStats::other_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.other_gold)
  return _internal_other_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_other_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.other_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_other_gold(uint32_t value) {
  _internal_set_other_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.other_gold)
}

// optional uint32 comeback_gold = 18;
inline bool CMatchPlayerTimedStats::_internal_has_comeback_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_comeback_gold() const {
  return _internal_has_comeback_gold();
}
inline void CMatchPlayerTimedStats::clear_comeback_gold() {
  _impl_.comeback_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_comeback_gold() const {
  return _impl_.comeback_gold_;
}
inline uint32_t CMatchPlayerTimedStats::comeback_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.comeback_gold)
  return _internal_comeback_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_comeback_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.comeback_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_comeback_gold(uint32_t value) {
  _internal_set_comeback_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.comeback_gold)
}

// optional uint32 experimental_gold = 19;
inline bool CMatchPlayerTimedStats::_internal_has_experimental_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_experimental_gold() const {
  return _internal_has_experimental_gold();
}
inline void CMatchPlayerTimedStats::clear_experimental_gold() {
  _impl_.experimental_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_experimental_gold() const {
  return _impl_.experimental_gold_;
}
inline uint32_t CMatchPlayerTimedStats::experimental_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.experimental_gold)
  return _internal_experimental_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_experimental_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.experimental_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_experimental_gold(uint32_t value) {
  _internal_set_experimental_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.experimental_gold)
}

// optional uint32 experimental2_gold = 20;
inline bool CMatchPlayerTimedStats::_internal_has_experimental2_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_experimental2_gold() const {
  return _internal_has_experimental2_gold();
}
inline void CMatchPlayerTimedStats::clear_experimental2_gold() {
  _impl_.experimental2_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_experimental2_gold() const {
  return _impl_.experimental2_gold_;
}
inline uint32_t CMatchPlayerTimedStats::experimental2_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.experimental2_gold)
  return _internal_experimental2_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_experimental2_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.experimental2_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_experimental2_gold(uint32_t value) {
  _internal_set_experimental2_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.experimental2_gold)
}

// optional uint32 creep_deny_gold = 21;
inline bool CMatchPlayerTimedStats::_internal_has_creep_deny_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_creep_deny_gold() const {
  return _internal_has_creep_deny_gold();
}
inline void CMatchPlayerTimedStats::clear_creep_deny_gold() {
  _impl_.creep_deny_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_creep_deny_gold() const {
  return _impl_.creep_deny_gold_;
}
inline uint32_t CMatchPlayerTimedStats::creep_deny_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.creep_deny_gold)
  return _internal_creep_deny_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_creep_deny_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.creep_deny_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_creep_deny_gold(uint32_t value) {
  _internal_set_creep_deny_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.creep_deny_gold)
}

// optional uint32 tp_scrolls_purchased_1 = 22;
inline bool CMatchPlayerTimedStats::_internal_has_tp_scrolls_purchased_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_tp_scrolls_purchased_1() const {
  return _internal_has_tp_scrolls_purchased_1();
}
inline void CMatchPlayerTimedStats::clear_tp_scrolls_purchased_1() {
  _impl_.tp_scrolls_purchased_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_tp_scrolls_purchased_1() const {
  return _impl_.tp_scrolls_purchased_1_;
}
inline uint32_t CMatchPlayerTimedStats::tp_scrolls_purchased_1() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.tp_scrolls_purchased_1)
  return _internal_tp_scrolls_purchased_1();
}
inline void CMatchPlayerTimedStats::_internal_set_tp_scrolls_purchased_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.tp_scrolls_purchased_1_ = value;
}
inline void CMatchPlayerTimedStats::set_tp_scrolls_purchased_1(uint32_t value) {
  _internal_set_tp_scrolls_purchased_1(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.tp_scrolls_purchased_1)
}

// optional uint32 tp_scrolls_purchased_2 = 23;
inline bool CMatchPlayerTimedStats::_internal_has_tp_scrolls_purchased_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_tp_scrolls_purchased_2() const {
  return _internal_has_tp_scrolls_purchased_2();
}
inline void CMatchPlayerTimedStats::clear_tp_scrolls_purchased_2() {
  _impl_.tp_scrolls_purchased_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_tp_scrolls_purchased_2() const {
  return _impl_.tp_scrolls_purchased_2_;
}
inline uint32_t CMatchPlayerTimedStats::tp_scrolls_purchased_2() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.tp_scrolls_purchased_2)
  return _internal_tp_scrolls_purchased_2();
}
inline void CMatchPlayerTimedStats::_internal_set_tp_scrolls_purchased_2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.tp_scrolls_purchased_2_ = value;
}
inline void CMatchPlayerTimedStats::set_tp_scrolls_purchased_2(uint32_t value) {
  _internal_set_tp_scrolls_purchased_2(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.tp_scrolls_purchased_2)
}

// optional uint32 tp_scrolls_purchased_3 = 24;
inline bool CMatchPlayerTimedStats::_internal_has_tp_scrolls_purchased_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_tp_scrolls_purchased_3() const {
  return _internal_has_tp_scrolls_purchased_3();
}
inline void CMatchPlayerTimedStats::clear_tp_scrolls_purchased_3() {
  _impl_.tp_scrolls_purchased_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_tp_scrolls_purchased_3() const {
  return _impl_.tp_scrolls_purchased_3_;
}
inline uint32_t CMatchPlayerTimedStats::tp_scrolls_purchased_3() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.tp_scrolls_purchased_3)
  return _internal_tp_scrolls_purchased_3();
}
inline void CMatchPlayerTimedStats::_internal_set_tp_scrolls_purchased_3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.tp_scrolls_purchased_3_ = value;
}
inline void CMatchPlayerTimedStats::set_tp_scrolls_purchased_3(uint32_t value) {
  _internal_set_tp_scrolls_purchased_3(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.tp_scrolls_purchased_3)
}

// optional uint32 tp_scrolls_purchased_4 = 25;
inline bool CMatchPlayerTimedStats::_internal_has_tp_scrolls_purchased_4() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_tp_scrolls_purchased_4() const {
  return _internal_has_tp_scrolls_purchased_4();
}
inline void CMatchPlayerTimedStats::clear_tp_scrolls_purchased_4() {
  _impl_.tp_scrolls_purchased_4_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_tp_scrolls_purchased_4() const {
  return _impl_.tp_scrolls_purchased_4_;
}
inline uint32_t CMatchPlayerTimedStats::tp_scrolls_purchased_4() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.tp_scrolls_purchased_4)
  return _internal_tp_scrolls_purchased_4();
}
inline void CMatchPlayerTimedStats::_internal_set_tp_scrolls_purchased_4(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.tp_scrolls_purchased_4_ = value;
}
inline void CMatchPlayerTimedStats::set_tp_scrolls_purchased_4(uint32_t value) {
  _internal_set_tp_scrolls_purchased_4(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.tp_scrolls_purchased_4)
}

// optional uint32 tp_scrolls_purchased_5 = 26;
inline bool CMatchPlayerTimedStats::_internal_has_tp_scrolls_purchased_5() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_tp_scrolls_purchased_5() const {
  return _internal_has_tp_scrolls_purchased_5();
}
inline void CMatchPlayerTimedStats::clear_tp_scrolls_purchased_5() {
  _impl_.tp_scrolls_purchased_5_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_tp_scrolls_purchased_5() const {
  return _impl_.tp_scrolls_purchased_5_;
}
inline uint32_t CMatchPlayerTimedStats::tp_scrolls_purchased_5() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.tp_scrolls_purchased_5)
  return _internal_tp_scrolls_purchased_5();
}
inline void CMatchPlayerTimedStats::_internal_set_tp_scrolls_purchased_5(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.tp_scrolls_purchased_5_ = value;
}
inline void CMatchPlayerTimedStats::set_tp_scrolls_purchased_5(uint32_t value) {
  _internal_set_tp_scrolls_purchased_5(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.tp_scrolls_purchased_5)
}

// optional uint32 neutral_gold = 27;
inline bool CMatchPlayerTimedStats::_internal_has_neutral_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_neutral_gold() const {
  return _internal_has_neutral_gold();
}
inline void CMatchPlayerTimedStats::clear_neutral_gold() {
  _impl_.neutral_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_neutral_gold() const {
  return _impl_.neutral_gold_;
}
inline uint32_t CMatchPlayerTimedStats::neutral_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.neutral_gold)
  return _internal_neutral_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_neutral_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.neutral_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_neutral_gold(uint32_t value) {
  _internal_set_neutral_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.neutral_gold)
}

// optional uint32 courier_gold = 28;
inline bool CMatchPlayerTimedStats::_internal_has_courier_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_courier_gold() const {
  return _internal_has_courier_gold();
}
inline void CMatchPlayerTimedStats::clear_courier_gold() {
  _impl_.courier_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_courier_gold() const {
  return _impl_.courier_gold_;
}
inline uint32_t CMatchPlayerTimedStats::courier_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.courier_gold)
  return _internal_courier_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_courier_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.courier_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_courier_gold(uint32_t value) {
  _internal_set_courier_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.courier_gold)
}

// optional uint32 roshan_gold = 29;
inline bool CMatchPlayerTimedStats::_internal_has_roshan_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_roshan_gold() const {
  return _internal_has_roshan_gold();
}
inline void CMatchPlayerTimedStats::clear_roshan_gold() {
  _impl_.roshan_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_roshan_gold() const {
  return _impl_.roshan_gold_;
}
inline uint32_t CMatchPlayerTimedStats::roshan_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.roshan_gold)
  return _internal_roshan_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_roshan_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.roshan_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_roshan_gold(uint32_t value) {
  _internal_set_roshan_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.roshan_gold)
}

// optional uint32 income_gold = 30;
inline bool CMatchPlayerTimedStats::_internal_has_income_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_income_gold() const {
  return _internal_has_income_gold();
}
inline void CMatchPlayerTimedStats::clear_income_gold() {
  _impl_.income_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_income_gold() const {
  return _impl_.income_gold_;
}
inline uint32_t CMatchPlayerTimedStats::income_gold() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.income_gold)
  return _internal_income_gold();
}
inline void CMatchPlayerTimedStats::_internal_set_income_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.income_gold_ = value;
}
inline void CMatchPlayerTimedStats::set_income_gold(uint32_t value) {
  _internal_set_income_gold(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.income_gold)
}

// optional uint32 custom_stats_1 = 31;
inline bool CMatchPlayerTimedStats::_internal_has_custom_stats_1() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_custom_stats_1() const {
  return _internal_has_custom_stats_1();
}
inline void CMatchPlayerTimedStats::clear_custom_stats_1() {
  _impl_.custom_stats_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_custom_stats_1() const {
  return _impl_.custom_stats_1_;
}
inline uint32_t CMatchPlayerTimedStats::custom_stats_1() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.custom_stats_1)
  return _internal_custom_stats_1();
}
inline void CMatchPlayerTimedStats::_internal_set_custom_stats_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.custom_stats_1_ = value;
}
inline void CMatchPlayerTimedStats::set_custom_stats_1(uint32_t value) {
  _internal_set_custom_stats_1(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.custom_stats_1)
}

// optional uint32 custom_stats_2 = 32;
inline bool CMatchPlayerTimedStats::_internal_has_custom_stats_2() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_custom_stats_2() const {
  return _internal_has_custom_stats_2();
}
inline void CMatchPlayerTimedStats::clear_custom_stats_2() {
  _impl_.custom_stats_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_custom_stats_2() const {
  return _impl_.custom_stats_2_;
}
inline uint32_t CMatchPlayerTimedStats::custom_stats_2() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.custom_stats_2)
  return _internal_custom_stats_2();
}
inline void CMatchPlayerTimedStats::_internal_set_custom_stats_2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.custom_stats_2_ = value;
}
inline void CMatchPlayerTimedStats::set_custom_stats_2(uint32_t value) {
  _internal_set_custom_stats_2(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.custom_stats_2)
}

// optional uint32 custom_stats_3 = 33;
inline bool CMatchPlayerTimedStats::_internal_has_custom_stats_3() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_custom_stats_3() const {
  return _internal_has_custom_stats_3();
}
inline void CMatchPlayerTimedStats::clear_custom_stats_3() {
  _impl_.custom_stats_3_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_custom_stats_3() const {
  return _impl_.custom_stats_3_;
}
inline uint32_t CMatchPlayerTimedStats::custom_stats_3() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.custom_stats_3)
  return _internal_custom_stats_3();
}
inline void CMatchPlayerTimedStats::_internal_set_custom_stats_3(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.custom_stats_3_ = value;
}
inline void CMatchPlayerTimedStats::set_custom_stats_3(uint32_t value) {
  _internal_set_custom_stats_3(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.custom_stats_3)
}

// optional uint32 custom_stats_4 = 34;
inline bool CMatchPlayerTimedStats::_internal_has_custom_stats_4() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_custom_stats_4() const {
  return _internal_has_custom_stats_4();
}
inline void CMatchPlayerTimedStats::clear_custom_stats_4() {
  _impl_.custom_stats_4_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_custom_stats_4() const {
  return _impl_.custom_stats_4_;
}
inline uint32_t CMatchPlayerTimedStats::custom_stats_4() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.custom_stats_4)
  return _internal_custom_stats_4();
}
inline void CMatchPlayerTimedStats::_internal_set_custom_stats_4(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.custom_stats_4_ = value;
}
inline void CMatchPlayerTimedStats::set_custom_stats_4(uint32_t value) {
  _internal_set_custom_stats_4(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.custom_stats_4)
}

// optional uint32 custom_stats_5 = 35;
inline bool CMatchPlayerTimedStats::_internal_has_custom_stats_5() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_custom_stats_5() const {
  return _internal_has_custom_stats_5();
}
inline void CMatchPlayerTimedStats::clear_custom_stats_5() {
  _impl_.custom_stats_5_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_custom_stats_5() const {
  return _impl_.custom_stats_5_;
}
inline uint32_t CMatchPlayerTimedStats::custom_stats_5() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.custom_stats_5)
  return _internal_custom_stats_5();
}
inline void CMatchPlayerTimedStats::_internal_set_custom_stats_5(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.custom_stats_5_ = value;
}
inline void CMatchPlayerTimedStats::set_custom_stats_5(uint32_t value) {
  _internal_set_custom_stats_5(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.custom_stats_5)
}

// optional uint32 item_value = 36;
inline bool CMatchPlayerTimedStats::_internal_has_item_value() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_item_value() const {
  return _internal_has_item_value();
}
inline void CMatchPlayerTimedStats::clear_item_value() {
  _impl_.item_value_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_item_value() const {
  return _impl_.item_value_;
}
inline uint32_t CMatchPlayerTimedStats::item_value() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.item_value)
  return _internal_item_value();
}
inline void CMatchPlayerTimedStats::_internal_set_item_value(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.item_value_ = value;
}
inline void CMatchPlayerTimedStats::set_item_value(uint32_t value) {
  _internal_set_item_value(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.item_value)
}

// optional uint32 support_gold_spent = 37;
inline bool CMatchPlayerTimedStats::_internal_has_support_gold_spent() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_support_gold_spent() const {
  return _internal_has_support_gold_spent();
}
inline void CMatchPlayerTimedStats::clear_support_gold_spent() {
  _impl_.support_gold_spent_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_support_gold_spent() const {
  return _impl_.support_gold_spent_;
}
inline uint32_t CMatchPlayerTimedStats::support_gold_spent() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.support_gold_spent)
  return _internal_support_gold_spent();
}
inline void CMatchPlayerTimedStats::_internal_set_support_gold_spent(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.support_gold_spent_ = value;
}
inline void CMatchPlayerTimedStats::set_support_gold_spent(uint32_t value) {
  _internal_set_support_gold_spent(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.support_gold_spent)
}

// optional uint32 camps_stacked = 38;
inline bool CMatchPlayerTimedStats::_internal_has_camps_stacked() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CMatchPlayerTimedStats::clear_camps_stacked() {
  _impl_.camps_stacked_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_camps_stacked() const {
  return _impl_.camps_stacked_;
}
inline uint32_t CMatchPlayerTimedStats::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.camps_stacked)
  return _internal_camps_stacked();
}
inline void CMatchPlayerTimedStats::_internal_set_camps_stacked(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.camps_stacked_ = value;
}
inline void CMatchPlayerTimedStats::set_camps_stacked(uint32_t value) {
  _internal_set_camps_stacked(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.camps_stacked)
}

// optional uint32 wards_placed = 39;
inline bool CMatchPlayerTimedStats::_internal_has_wards_placed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_wards_placed() const {
  return _internal_has_wards_placed();
}
inline void CMatchPlayerTimedStats::clear_wards_placed() {
  _impl_.wards_placed_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_wards_placed() const {
  return _impl_.wards_placed_;
}
inline uint32_t CMatchPlayerTimedStats::wards_placed() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.wards_placed)
  return _internal_wards_placed();
}
inline void CMatchPlayerTimedStats::_internal_set_wards_placed(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.wards_placed_ = value;
}
inline void CMatchPlayerTimedStats::set_wards_placed(uint32_t value) {
  _internal_set_wards_placed(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.wards_placed)
}

// optional uint32 triple_kills = 40;
inline bool CMatchPlayerTimedStats::_internal_has_triple_kills() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_triple_kills() const {
  return _internal_has_triple_kills();
}
inline void CMatchPlayerTimedStats::clear_triple_kills() {
  _impl_.triple_kills_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_triple_kills() const {
  return _impl_.triple_kills_;
}
inline uint32_t CMatchPlayerTimedStats::triple_kills() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.triple_kills)
  return _internal_triple_kills();
}
inline void CMatchPlayerTimedStats::_internal_set_triple_kills(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.triple_kills_ = value;
}
inline void CMatchPlayerTimedStats::set_triple_kills(uint32_t value) {
  _internal_set_triple_kills(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.triple_kills)
}

// optional uint32 rampages = 41;
inline bool CMatchPlayerTimedStats::_internal_has_rampages() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMatchPlayerTimedStats::has_rampages() const {
  return _internal_has_rampages();
}
inline void CMatchPlayerTimedStats::clear_rampages() {
  _impl_.rampages_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline uint32_t CMatchPlayerTimedStats::_internal_rampages() const {
  return _impl_.rampages_;
}
inline uint32_t CMatchPlayerTimedStats::rampages() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerTimedStats.rampages)
  return _internal_rampages();
}
inline void CMatchPlayerTimedStats::_internal_set_rampages(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.rampages_ = value;
}
inline void CMatchPlayerTimedStats::set_rampages(uint32_t value) {
  _internal_set_rampages(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerTimedStats.rampages)
}

// -------------------------------------------------------------------

// CMatchTeamTimedStats

// optional uint32 time = 1;
inline bool CMatchTeamTimedStats::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchTeamTimedStats::has_time() const {
  return _internal_has_time();
}
inline void CMatchTeamTimedStats::clear_time() {
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMatchTeamTimedStats::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t CMatchTeamTimedStats::time() const {
  // @@protoc_insertion_point(field_get:CMatchTeamTimedStats.time)
  return _internal_time();
}
inline void CMatchTeamTimedStats::_internal_set_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}
inline void CMatchTeamTimedStats::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CMatchTeamTimedStats.time)
}

// optional uint32 enemy_towers_killed = 2;
inline bool CMatchTeamTimedStats::_internal_has_enemy_towers_killed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMatchTeamTimedStats::has_enemy_towers_killed() const {
  return _internal_has_enemy_towers_killed();
}
inline void CMatchTeamTimedStats::clear_enemy_towers_killed() {
  _impl_.enemy_towers_killed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMatchTeamTimedStats::_internal_enemy_towers_killed() const {
  return _impl_.enemy_towers_killed_;
}
inline uint32_t CMatchTeamTimedStats::enemy_towers_killed() const {
  // @@protoc_insertion_point(field_get:CMatchTeamTimedStats.enemy_towers_killed)
  return _internal_enemy_towers_killed();
}
inline void CMatchTeamTimedStats::_internal_set_enemy_towers_killed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enemy_towers_killed_ = value;
}
inline void CMatchTeamTimedStats::set_enemy_towers_killed(uint32_t value) {
  _internal_set_enemy_towers_killed(value);
  // @@protoc_insertion_point(field_set:CMatchTeamTimedStats.enemy_towers_killed)
}

// optional uint32 enemy_barracks_killed = 3;
inline bool CMatchTeamTimedStats::_internal_has_enemy_barracks_killed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMatchTeamTimedStats::has_enemy_barracks_killed() const {
  return _internal_has_enemy_barracks_killed();
}
inline void CMatchTeamTimedStats::clear_enemy_barracks_killed() {
  _impl_.enemy_barracks_killed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMatchTeamTimedStats::_internal_enemy_barracks_killed() const {
  return _impl_.enemy_barracks_killed_;
}
inline uint32_t CMatchTeamTimedStats::enemy_barracks_killed() const {
  // @@protoc_insertion_point(field_get:CMatchTeamTimedStats.enemy_barracks_killed)
  return _internal_enemy_barracks_killed();
}
inline void CMatchTeamTimedStats::_internal_set_enemy_barracks_killed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.enemy_barracks_killed_ = value;
}
inline void CMatchTeamTimedStats::set_enemy_barracks_killed(uint32_t value) {
  _internal_set_enemy_barracks_killed(value);
  // @@protoc_insertion_point(field_set:CMatchTeamTimedStats.enemy_barracks_killed)
}

// optional uint32 enemy_towers_status = 4;
inline bool CMatchTeamTimedStats::_internal_has_enemy_towers_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMatchTeamTimedStats::has_enemy_towers_status() const {
  return _internal_has_enemy_towers_status();
}
inline void CMatchTeamTimedStats::clear_enemy_towers_status() {
  _impl_.enemy_towers_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMatchTeamTimedStats::_internal_enemy_towers_status() const {
  return _impl_.enemy_towers_status_;
}
inline uint32_t CMatchTeamTimedStats::enemy_towers_status() const {
  // @@protoc_insertion_point(field_get:CMatchTeamTimedStats.enemy_towers_status)
  return _internal_enemy_towers_status();
}
inline void CMatchTeamTimedStats::_internal_set_enemy_towers_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.enemy_towers_status_ = value;
}
inline void CMatchTeamTimedStats::set_enemy_towers_status(uint32_t value) {
  _internal_set_enemy_towers_status(value);
  // @@protoc_insertion_point(field_set:CMatchTeamTimedStats.enemy_towers_status)
}

// optional uint32 enemy_barracks_status = 5;
inline bool CMatchTeamTimedStats::_internal_has_enemy_barracks_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMatchTeamTimedStats::has_enemy_barracks_status() const {
  return _internal_has_enemy_barracks_status();
}
inline void CMatchTeamTimedStats::clear_enemy_barracks_status() {
  _impl_.enemy_barracks_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMatchTeamTimedStats::_internal_enemy_barracks_status() const {
  return _impl_.enemy_barracks_status_;
}
inline uint32_t CMatchTeamTimedStats::enemy_barracks_status() const {
  // @@protoc_insertion_point(field_get:CMatchTeamTimedStats.enemy_barracks_status)
  return _internal_enemy_barracks_status();
}
inline void CMatchTeamTimedStats::_internal_set_enemy_barracks_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.enemy_barracks_status_ = value;
}
inline void CMatchTeamTimedStats::set_enemy_barracks_status(uint32_t value) {
  _internal_set_enemy_barracks_status(value);
  // @@protoc_insertion_point(field_set:CMatchTeamTimedStats.enemy_barracks_status)
}

// -------------------------------------------------------------------

// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
inline bool CMatchAdditionalUnitInventory::_internal_has_unit_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return _internal_has_unit_name();
}
inline void CMatchAdditionalUnitInventory::clear_unit_name() {
  _impl_.unit_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMatchAdditionalUnitInventory::unit_name() const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.unit_name)
  return _internal_unit_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMatchAdditionalUnitInventory::set_unit_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.unit_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.unit_name)
}
inline std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  std::string* _s = _internal_mutable_unit_name();
  // @@protoc_insertion_point(field_mutable:CMatchAdditionalUnitInventory.unit_name)
  return _s;
}
inline const std::string& CMatchAdditionalUnitInventory::_internal_unit_name() const {
  return _impl_.unit_name_.Get();
}
inline void CMatchAdditionalUnitInventory::_internal_set_unit_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMatchAdditionalUnitInventory::_internal_mutable_unit_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  // @@protoc_insertion_point(field_release:CMatchAdditionalUnitInventory.unit_name)
  if (!_internal_has_unit_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.unit_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_name_.IsDefault()) {
    _impl_.unit_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMatchAdditionalUnitInventory::set_allocated_unit_name(std::string* unit_name) {
  if (unit_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_name_.SetAllocated(unit_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_name_.IsDefault()) {
    _impl_.unit_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMatchAdditionalUnitInventory.unit_name)
}

// repeated int32 items = 2;
inline int CMatchAdditionalUnitInventory::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMatchAdditionalUnitInventory::items_size() const {
  return _internal_items_size();
}
inline void CMatchAdditionalUnitInventory::clear_items() {
  _impl_.items_.Clear();
}
inline int32_t CMatchAdditionalUnitInventory::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline int32_t CMatchAdditionalUnitInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:CMatchAdditionalUnitInventory.items)
  return _internal_items(index);
}
inline void CMatchAdditionalUnitInventory::set_items(int index, int32_t value) {
  _impl_.items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMatchAdditionalUnitInventory.items)
}
inline void CMatchAdditionalUnitInventory::_internal_add_items(int32_t value) {
  _impl_.items_.Add(value);
}
inline void CMatchAdditionalUnitInventory::add_items(int32_t value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:CMatchAdditionalUnitInventory.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMatchAdditionalUnitInventory::_internal_items() const {
  return _impl_.items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMatchAdditionalUnitInventory::items() const {
  // @@protoc_insertion_point(field_list:CMatchAdditionalUnitInventory.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMatchAdditionalUnitInventory::_internal_mutable_items() {
  return &_impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMatchAdditionalUnitInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMatchAdditionalUnitInventory.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// CMatchPlayerPermanentBuff

// optional uint32 permanent_buff = 1;
inline bool CMatchPlayerPermanentBuff::_internal_has_permanent_buff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchPlayerPermanentBuff::has_permanent_buff() const {
  return _internal_has_permanent_buff();
}
inline void CMatchPlayerPermanentBuff::clear_permanent_buff() {
  _impl_.permanent_buff_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMatchPlayerPermanentBuff::_internal_permanent_buff() const {
  return _impl_.permanent_buff_;
}
inline uint32_t CMatchPlayerPermanentBuff::permanent_buff() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerPermanentBuff.permanent_buff)
  return _internal_permanent_buff();
}
inline void CMatchPlayerPermanentBuff::_internal_set_permanent_buff(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.permanent_buff_ = value;
}
inline void CMatchPlayerPermanentBuff::set_permanent_buff(uint32_t value) {
  _internal_set_permanent_buff(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerPermanentBuff.permanent_buff)
}

// optional uint32 stack_count = 2;
inline bool CMatchPlayerPermanentBuff::_internal_has_stack_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMatchPlayerPermanentBuff::has_stack_count() const {
  return _internal_has_stack_count();
}
inline void CMatchPlayerPermanentBuff::clear_stack_count() {
  _impl_.stack_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMatchPlayerPermanentBuff::_internal_stack_count() const {
  return _impl_.stack_count_;
}
inline uint32_t CMatchPlayerPermanentBuff::stack_count() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerPermanentBuff.stack_count)
  return _internal_stack_count();
}
inline void CMatchPlayerPermanentBuff::_internal_set_stack_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stack_count_ = value;
}
inline void CMatchPlayerPermanentBuff::set_stack_count(uint32_t value) {
  _internal_set_stack_count(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerPermanentBuff.stack_count)
}

// optional uint32 grant_time = 3;
inline bool CMatchPlayerPermanentBuff::_internal_has_grant_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMatchPlayerPermanentBuff::has_grant_time() const {
  return _internal_has_grant_time();
}
inline void CMatchPlayerPermanentBuff::clear_grant_time() {
  _impl_.grant_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMatchPlayerPermanentBuff::_internal_grant_time() const {
  return _impl_.grant_time_;
}
inline uint32_t CMatchPlayerPermanentBuff::grant_time() const {
  // @@protoc_insertion_point(field_get:CMatchPlayerPermanentBuff.grant_time)
  return _internal_grant_time();
}
inline void CMatchPlayerPermanentBuff::_internal_set_grant_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.grant_time_ = value;
}
inline void CMatchPlayerPermanentBuff::set_grant_time(uint32_t value) {
  _internal_set_grant_time(value);
  // @@protoc_insertion_point(field_set:CMatchPlayerPermanentBuff.grant_time)
}

// -------------------------------------------------------------------

// CMatchHeroSelectEvent

// optional bool is_pick = 1;
inline bool CMatchHeroSelectEvent::_internal_has_is_pick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchHeroSelectEvent::has_is_pick() const {
  return _internal_has_is_pick();
}
inline void CMatchHeroSelectEvent::clear_is_pick() {
  _impl_.is_pick_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMatchHeroSelectEvent::_internal_is_pick() const {
  return _impl_.is_pick_;
}
inline bool CMatchHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.is_pick)
  return _internal_is_pick();
}
inline void CMatchHeroSelectEvent::_internal_set_is_pick(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_pick_ = value;
}
inline void CMatchHeroSelectEvent::set_is_pick(bool value) {
  _internal_set_is_pick(value);
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
inline bool CMatchHeroSelectEvent::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMatchHeroSelectEvent::has_team() const {
  return _internal_has_team();
}
inline void CMatchHeroSelectEvent::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMatchHeroSelectEvent::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMatchHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.team)
  return _internal_team();
}
inline void CMatchHeroSelectEvent::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_ = value;
}
inline void CMatchHeroSelectEvent::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
inline bool CMatchHeroSelectEvent::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMatchHeroSelectEvent::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMatchHeroSelectEvent::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMatchHeroSelectEvent::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMatchHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:CMatchHeroSelectEvent.hero_id)
  return _internal_hero_id();
}
inline void CMatchHeroSelectEvent::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMatchHeroSelectEvent::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMatchHeroSelectEvent.hero_id)
}

// -------------------------------------------------------------------

// CMatchClip

// optional uint64 match_id = 1;
inline bool CMatchClip::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMatchClip::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMatchClip::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMatchClip::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMatchClip::match_id() const {
  // @@protoc_insertion_point(field_get:CMatchClip.match_id)
  return _internal_match_id();
}
inline void CMatchClip::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_id_ = value;
}
inline void CMatchClip::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMatchClip.match_id)
}

// optional uint32 player_account_id = 2;
inline bool CMatchClip::_internal_has_player_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMatchClip::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMatchClip::clear_player_account_id() {
  _impl_.player_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMatchClip::_internal_player_account_id() const {
  return _impl_.player_account_id_;
}
inline uint32_t CMatchClip::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMatchClip.player_account_id)
  return _internal_player_account_id();
}
inline void CMatchClip::_internal_set_player_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_account_id_ = value;
}
inline void CMatchClip::set_player_account_id(uint32_t value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMatchClip.player_account_id)
}

// optional uint32 game_time_seconds = 3;
inline bool CMatchClip::_internal_has_game_time_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMatchClip::has_game_time_seconds() const {
  return _internal_has_game_time_seconds();
}
inline void CMatchClip::clear_game_time_seconds() {
  _impl_.game_time_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMatchClip::_internal_game_time_seconds() const {
  return _impl_.game_time_seconds_;
}
inline uint32_t CMatchClip::game_time_seconds() const {
  // @@protoc_insertion_point(field_get:CMatchClip.game_time_seconds)
  return _internal_game_time_seconds();
}
inline void CMatchClip::_internal_set_game_time_seconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_time_seconds_ = value;
}
inline void CMatchClip::set_game_time_seconds(uint32_t value) {
  _internal_set_game_time_seconds(value);
  // @@protoc_insertion_point(field_set:CMatchClip.game_time_seconds)
}

// optional uint32 duration_seconds = 4;
inline bool CMatchClip::_internal_has_duration_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMatchClip::has_duration_seconds() const {
  return _internal_has_duration_seconds();
}
inline void CMatchClip::clear_duration_seconds() {
  _impl_.duration_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMatchClip::_internal_duration_seconds() const {
  return _impl_.duration_seconds_;
}
inline uint32_t CMatchClip::duration_seconds() const {
  // @@protoc_insertion_point(field_get:CMatchClip.duration_seconds)
  return _internal_duration_seconds();
}
inline void CMatchClip::_internal_set_duration_seconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.duration_seconds_ = value;
}
inline void CMatchClip::set_duration_seconds(uint32_t value) {
  _internal_set_duration_seconds(value);
  // @@protoc_insertion_point(field_set:CMatchClip.duration_seconds)
}

// optional uint32 player_id = 5;
inline bool CMatchClip::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMatchClip::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMatchClip::clear_player_id() {
  _impl_.player_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMatchClip::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t CMatchClip::player_id() const {
  // @@protoc_insertion_point(field_get:CMatchClip.player_id)
  return _internal_player_id();
}
inline void CMatchClip::_internal_set_player_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.player_id_ = value;
}
inline void CMatchClip::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMatchClip.player_id)
}

// optional uint32 hero_id = 6;
inline bool CMatchClip::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMatchClip::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMatchClip::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMatchClip::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMatchClip::hero_id() const {
  // @@protoc_insertion_point(field_get:CMatchClip.hero_id)
  return _internal_hero_id();
}
inline void CMatchClip::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.hero_id_ = value;
}
inline void CMatchClip::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMatchClip.hero_id)
}

// optional int32 ability_id = 7 [default = -1];
inline bool CMatchClip::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMatchClip::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMatchClip::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMatchClip::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMatchClip::ability_id() const {
  // @@protoc_insertion_point(field_get:CMatchClip.ability_id)
  return _internal_ability_id();
}
inline void CMatchClip::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ability_id_ = value;
}
inline void CMatchClip::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMatchClip.ability_id)
}

// optional uint32 camera_mode = 8;
inline bool CMatchClip::_internal_has_camera_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMatchClip::has_camera_mode() const {
  return _internal_has_camera_mode();
}
inline void CMatchClip::clear_camera_mode() {
  _impl_.camera_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMatchClip::_internal_camera_mode() const {
  return _impl_.camera_mode_;
}
inline uint32_t CMatchClip::camera_mode() const {
  // @@protoc_insertion_point(field_get:CMatchClip.camera_mode)
  return _internal_camera_mode();
}
inline void CMatchClip::_internal_set_camera_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.camera_mode_ = value;
}
inline void CMatchClip::set_camera_mode(uint32_t value) {
  _internal_set_camera_mode(value);
  // @@protoc_insertion_point(field_set:CMatchClip.camera_mode)
}

// optional string comment = 9;
inline bool CMatchClip::_internal_has_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMatchClip::has_comment() const {
  return _internal_has_comment();
}
inline void CMatchClip::clear_comment() {
  _impl_.comment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMatchClip::comment() const {
  // @@protoc_insertion_point(field_get:CMatchClip.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMatchClip::set_comment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMatchClip.comment)
}
inline std::string* CMatchClip::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:CMatchClip.comment)
  return _s;
}
inline const std::string& CMatchClip::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void CMatchClip::_internal_set_comment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* CMatchClip::_internal_mutable_comment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* CMatchClip::release_comment() {
  // @@protoc_insertion_point(field_release:CMatchClip.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMatchClip::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMatchClip.comment)
}

// -------------------------------------------------------------------

// CPartySearchClientParty

// optional fixed64 party_id = 1;
inline bool CPartySearchClientParty::_internal_has_party_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPartySearchClientParty::has_party_id() const {
  return _internal_has_party_id();
}
inline void CPartySearchClientParty::clear_party_id() {
  _impl_.party_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPartySearchClientParty::_internal_party_id() const {
  return _impl_.party_id_;
}
inline uint64_t CPartySearchClientParty::party_id() const {
  // @@protoc_insertion_point(field_get:CPartySearchClientParty.party_id)
  return _internal_party_id();
}
inline void CPartySearchClientParty::_internal_set_party_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.party_id_ = value;
}
inline void CPartySearchClientParty::set_party_id(uint64_t value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CPartySearchClientParty.party_id)
}

// optional int32 beacon_type = 2;
inline bool CPartySearchClientParty::_internal_has_beacon_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPartySearchClientParty::has_beacon_type() const {
  return _internal_has_beacon_type();
}
inline void CPartySearchClientParty::clear_beacon_type() {
  _impl_.beacon_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CPartySearchClientParty::_internal_beacon_type() const {
  return _impl_.beacon_type_;
}
inline int32_t CPartySearchClientParty::beacon_type() const {
  // @@protoc_insertion_point(field_get:CPartySearchClientParty.beacon_type)
  return _internal_beacon_type();
}
inline void CPartySearchClientParty::_internal_set_beacon_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.beacon_type_ = value;
}
inline void CPartySearchClientParty::set_beacon_type(int32_t value) {
  _internal_set_beacon_type(value);
  // @@protoc_insertion_point(field_set:CPartySearchClientParty.beacon_type)
}

// repeated fixed32 party_members = 3;
inline int CPartySearchClientParty::_internal_party_members_size() const {
  return _impl_.party_members_.size();
}
inline int CPartySearchClientParty::party_members_size() const {
  return _internal_party_members_size();
}
inline void CPartySearchClientParty::clear_party_members() {
  _impl_.party_members_.Clear();
}
inline uint32_t CPartySearchClientParty::_internal_party_members(int index) const {
  return _impl_.party_members_.Get(index);
}
inline uint32_t CPartySearchClientParty::party_members(int index) const {
  // @@protoc_insertion_point(field_get:CPartySearchClientParty.party_members)
  return _internal_party_members(index);
}
inline void CPartySearchClientParty::set_party_members(int index, uint32_t value) {
  _impl_.party_members_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPartySearchClientParty.party_members)
}
inline void CPartySearchClientParty::_internal_add_party_members(uint32_t value) {
  _impl_.party_members_.Add(value);
}
inline void CPartySearchClientParty::add_party_members(uint32_t value) {
  _internal_add_party_members(value);
  // @@protoc_insertion_point(field_add:CPartySearchClientParty.party_members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPartySearchClientParty::_internal_party_members() const {
  return _impl_.party_members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPartySearchClientParty::party_members() const {
  // @@protoc_insertion_point(field_list:CPartySearchClientParty.party_members)
  return _internal_party_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPartySearchClientParty::_internal_mutable_party_members() {
  return &_impl_.party_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPartySearchClientParty::mutable_party_members() {
  // @@protoc_insertion_point(field_mutable_list:CPartySearchClientParty.party_members)
  return _internal_mutable_party_members();
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemQuery

// optional uint32 account_id = 1;
inline bool CMsgDOTAHasItemQuery::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAHasItemQuery::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAHasItemQuery::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAHasItemQuery::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAHasItemQuery::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAHasItemQuery::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAHasItemQuery::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAHasItemQuery::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAHasItemQuery::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgDOTAHasItemQuery::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTAHasItemQuery::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CMsgDOTAHasItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemQuery.item_id)
  return _internal_item_id();
}
inline void CMsgDOTAHasItemQuery::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_id_ = value;
}
inline void CMsgDOTAHasItemQuery::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemQuery.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAHasItemResponse

// optional bool has_item = 1;
inline bool CMsgDOTAHasItemResponse::_internal_has_has_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAHasItemResponse::has_has_item() const {
  return _internal_has_has_item();
}
inline void CMsgDOTAHasItemResponse::clear_has_item() {
  _impl_.has_item_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTAHasItemResponse::_internal_has_item() const {
  return _impl_.has_item_;
}
inline bool CMsgDOTAHasItemResponse::has_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAHasItemResponse.has_item)
  return _internal_has_item();
}
inline void CMsgDOTAHasItemResponse::_internal_set_has_item(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.has_item_ = value;
}
inline void CMsgDOTAHasItemResponse::set_has_item(bool value) {
  _internal_set_has_item(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAHasItemResponse.has_item)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfo

// optional uint32 account_id = 1;
inline bool CMsgGCGetPlayerCardItemInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetPlayerCardItemInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCGetPlayerCardItemInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCGetPlayerCardItemInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGCGetPlayerCardItemInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfo.account_id)
  return _internal_account_id();
}
inline void CMsgGCGetPlayerCardItemInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgGCGetPlayerCardItemInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfo.account_id)
}

// repeated uint64 player_card_item_ids = 2;
inline int CMsgGCGetPlayerCardItemInfo::_internal_player_card_item_ids_size() const {
  return _impl_.player_card_item_ids_.size();
}
inline int CMsgGCGetPlayerCardItemInfo::player_card_item_ids_size() const {
  return _internal_player_card_item_ids_size();
}
inline void CMsgGCGetPlayerCardItemInfo::clear_player_card_item_ids() {
  _impl_.player_card_item_ids_.Clear();
}
inline uint64_t CMsgGCGetPlayerCardItemInfo::_internal_player_card_item_ids(int index) const {
  return _impl_.player_card_item_ids_.Get(index);
}
inline uint64_t CMsgGCGetPlayerCardItemInfo::player_card_item_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return _internal_player_card_item_ids(index);
}
inline void CMsgGCGetPlayerCardItemInfo::set_player_card_item_ids(int index, uint64_t value) {
  _impl_.player_card_item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
inline void CMsgGCGetPlayerCardItemInfo::_internal_add_player_card_item_ids(uint64_t value) {
  _impl_.player_card_item_ids_.Add(value);
}
inline void CMsgGCGetPlayerCardItemInfo::add_player_card_item_ids(uint64_t value) {
  _internal_add_player_card_item_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetPlayerCardItemInfo::_internal_player_card_item_ids() const {
  return _impl_.player_card_item_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetPlayerCardItemInfo::player_card_item_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return _internal_player_card_item_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetPlayerCardItemInfo::_internal_mutable_player_card_item_ids() {
  return &_impl_.player_card_item_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetPlayerCardItemInfo::mutable_player_card_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return _internal_mutable_player_card_item_ids();
}

// optional uint32 all_for_event = 3;
inline bool CMsgGCGetPlayerCardItemInfo::_internal_has_all_for_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetPlayerCardItemInfo::has_all_for_event() const {
  return _internal_has_all_for_event();
}
inline void CMsgGCGetPlayerCardItemInfo::clear_all_for_event() {
  _impl_.all_for_event_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCGetPlayerCardItemInfo::_internal_all_for_event() const {
  return _impl_.all_for_event_;
}
inline uint32_t CMsgGCGetPlayerCardItemInfo::all_for_event() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfo.all_for_event)
  return _internal_all_for_event();
}
inline void CMsgGCGetPlayerCardItemInfo::_internal_set_all_for_event(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.all_for_event_ = value;
}
inline void CMsgGCGetPlayerCardItemInfo::set_all_for_event(uint32_t value) {
  _internal_set_all_for_event(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfo.all_for_event)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo

// optional uint64 player_card_item_id = 1;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_has_player_card_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_player_card_item_id() const {
  return _internal_has_player_card_item_id();
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_player_card_item_id() {
  _impl_.player_card_item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_player_card_item_id() const {
  return _impl_.player_card_item_id_;
}
inline uint64_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::player_card_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
  return _internal_player_card_item_id();
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_set_player_card_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_card_item_id_ = value;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_player_card_item_id(uint64_t value) {
  _internal_set_player_card_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
}

// optional uint32 account_id = 2;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
  return _internal_account_id();
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.account_id_ = value;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
}

// optional uint64 packed_bonuses = 3;
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_has_packed_bonuses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_packed_bonuses() const {
  return _internal_has_packed_bonuses();
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_packed_bonuses() {
  _impl_.packed_bonuses_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_packed_bonuses() const {
  return _impl_.packed_bonuses_;
}
inline uint64_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::packed_bonuses() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
  return _internal_packed_bonuses();
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_internal_set_packed_bonuses(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.packed_bonuses_ = value;
}
inline void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_packed_bonuses(uint64_t value) {
  _internal_set_packed_bonuses(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
}

// -------------------------------------------------------------------

// CMsgGCGetPlayerCardItemInfoResponse

// repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
inline int CMsgGCGetPlayerCardItemInfoResponse::_internal_player_card_infos_size() const {
  return _impl_.player_card_infos_.size();
}
inline int CMsgGCGetPlayerCardItemInfoResponse::player_card_infos_size() const {
  return _internal_player_card_infos_size();
}
inline void CMsgGCGetPlayerCardItemInfoResponse::clear_player_card_infos() {
  _impl_.player_card_infos_.Clear();
}
inline ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return _impl_.player_card_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >*
CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return &_impl_.player_card_infos_;
}
inline const ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse::_internal_player_card_infos(int index) const {
  return _impl_.player_card_infos_.Get(index);
}
inline const ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse::player_card_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return _internal_player_card_infos(index);
}
inline ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::_internal_add_player_card_infos() {
  return _impl_.player_card_infos_.Add();
}
inline ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::add_player_card_infos() {
  ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* _add = _internal_add_player_card_infos();
  // @@protoc_insertion_point(field_add:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >&
CMsgGCGetPlayerCardItemInfoResponse::player_card_infos() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return _impl_.player_card_infos_;
}

// -------------------------------------------------------------------

// CSODOTAMapLocationState

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSODOTAMapLocationState::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAMapLocationState::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSODOTAMapLocationState::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSODOTAMapLocationState::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CSODOTAMapLocationState::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.account_id)
  return _internal_account_id();
}
inline void CSODOTAMapLocationState::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CSODOTAMapLocationState::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.account_id)
}

// optional int32 location_id = 2 [(.key_field) = true];
inline bool CSODOTAMapLocationState::_internal_has_location_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAMapLocationState::has_location_id() const {
  return _internal_has_location_id();
}
inline void CSODOTAMapLocationState::clear_location_id() {
  _impl_.location_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CSODOTAMapLocationState::_internal_location_id() const {
  return _impl_.location_id_;
}
inline int32_t CSODOTAMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.location_id)
  return _internal_location_id();
}
inline void CSODOTAMapLocationState::_internal_set_location_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_id_ = value;
}
inline void CSODOTAMapLocationState::set_location_id(int32_t value) {
  _internal_set_location_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.location_id)
}

// optional bool completed = 3;
inline bool CSODOTAMapLocationState::_internal_has_completed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAMapLocationState::has_completed() const {
  return _internal_has_completed();
}
inline void CSODOTAMapLocationState::clear_completed() {
  _impl_.completed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CSODOTAMapLocationState::_internal_completed() const {
  return _impl_.completed_;
}
inline bool CSODOTAMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAMapLocationState.completed)
  return _internal_completed();
}
inline void CSODOTAMapLocationState::_internal_set_completed(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.completed_ = value;
}
inline void CSODOTAMapLocationState::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:CSODOTAMapLocationState.completed)
}

// -------------------------------------------------------------------

// CMsgLeagueAdminList

// repeated uint32 account_ids = 1;
inline int CMsgLeagueAdminList::_internal_account_ids_size() const {
  return _impl_.account_ids_.size();
}
inline int CMsgLeagueAdminList::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgLeagueAdminList::clear_account_ids() {
  _impl_.account_ids_.Clear();
}
inline uint32_t CMsgLeagueAdminList::_internal_account_ids(int index) const {
  return _impl_.account_ids_.Get(index);
}
inline uint32_t CMsgLeagueAdminList::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueAdminList.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgLeagueAdminList::set_account_ids(int index, uint32_t value) {
  _impl_.account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgLeagueAdminList.account_ids)
}
inline void CMsgLeagueAdminList::_internal_add_account_ids(uint32_t value) {
  _impl_.account_ids_.Add(value);
}
inline void CMsgLeagueAdminList::add_account_ids(uint32_t value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgLeagueAdminList.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLeagueAdminList::_internal_account_ids() const {
  return _impl_.account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLeagueAdminList::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueAdminList.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLeagueAdminList::_internal_mutable_account_ids() {
  return &_impl_.account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLeagueAdminList::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueAdminList.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Trophy

// optional uint32 trophy_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Trophy::_internal_has_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_id() {
  _impl_.trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::_internal_trophy_id() const {
  return _impl_.trophy_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::_internal_set_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trophy_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Trophy::_internal_has_trophy_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_score() const {
  return _internal_has_trophy_score();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_score() {
  _impl_.trophy_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::_internal_trophy_score() const {
  return _impl_.trophy_score_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
  return _internal_trophy_score();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::_internal_set_trophy_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trophy_score_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_score(uint32_t value) {
  _internal_set_trophy_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Stat

// optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
inline bool CMsgDOTAProfileCard_Slot_Stat::_internal_has_stat_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_id() const {
  return _internal_has_stat_id();
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_id() {
  _impl_.stat_id_ = 3;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::_internal_stat_id() const {
  return static_cast< ::CMsgDOTAProfileCard_EStatID >(_impl_.stat_id_);
}
inline ::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_id)
  return _internal_stat_id();
}
inline void CMsgDOTAProfileCard_Slot_Stat::_internal_set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  assert(::CMsgDOTAProfileCard_EStatID_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stat_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  _internal_set_stat_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_id)
}

// optional uint32 stat_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Stat::_internal_has_stat_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_score() const {
  return _internal_has_stat_score();
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_score() {
  _impl_.stat_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Stat::_internal_stat_score() const {
  return _impl_.stat_score_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Stat::stat_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_score)
  return _internal_stat_score();
}
inline void CMsgDOTAProfileCard_Slot_Stat::_internal_set_stat_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stat_score_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_score(uint32_t value) {
  _internal_set_stat_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Item

// optional bytes serialized_item = 1;
inline bool CMsgDOTAProfileCard_Slot_Item::_internal_has_serialized_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Item::has_serialized_item() const {
  return _internal_has_serialized_item();
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_serialized_item() {
  _impl_.serialized_item_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAProfileCard_Slot_Item::serialized_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return _internal_serialized_item();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.serialized_item_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline std::string* CMsgDOTAProfileCard_Slot_Item::mutable_serialized_item() {
  std::string* _s = _internal_mutable_serialized_item();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return _s;
}
inline const std::string& CMsgDOTAProfileCard_Slot_Item::_internal_serialized_item() const {
  return _impl_.serialized_item_.Get();
}
inline void CMsgDOTAProfileCard_Slot_Item::_internal_set_serialized_item(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.serialized_item_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAProfileCard_Slot_Item::_internal_mutable_serialized_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.serialized_item_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAProfileCard_Slot_Item::release_serialized_item() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  if (!_internal_has_serialized_item()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.serialized_item_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialized_item_.IsDefault()) {
    _impl_.serialized_item_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_allocated_serialized_item(std::string* serialized_item) {
  if (serialized_item != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.serialized_item_.SetAllocated(serialized_item, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialized_item_.IsDefault()) {
    _impl_.serialized_item_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAProfileCard_Slot_Item::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Item::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAProfileCard_Slot_Item::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CMsgDOTAProfileCard_Slot_Item::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.item_id)
  return _internal_item_id();
}
inline void CMsgDOTAProfileCard_Slot_Item::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Hero

// optional uint32 hero_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Hero::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_id)
  return _internal_hero_id();
}
inline void CMsgDOTAProfileCard_Slot_Hero::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_id)
}

// optional uint32 hero_wins = 2;
inline bool CMsgDOTAProfileCard_Slot_Hero::_internal_has_hero_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_wins() const {
  return _internal_has_hero_wins();
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_wins() {
  _impl_.hero_wins_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::_internal_hero_wins() const {
  return _impl_.hero_wins_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::hero_wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
  return _internal_hero_wins();
}
inline void CMsgDOTAProfileCard_Slot_Hero::_internal_set_hero_wins(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_wins_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_wins(uint32_t value) {
  _internal_set_hero_wins(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
}

// optional uint32 hero_losses = 3;
inline bool CMsgDOTAProfileCard_Slot_Hero::_internal_has_hero_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_losses() const {
  return _internal_has_hero_losses();
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_losses() {
  _impl_.hero_losses_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::_internal_hero_losses() const {
  return _impl_.hero_losses_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::hero_losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
  return _internal_hero_losses();
}
inline void CMsgDOTAProfileCard_Slot_Hero::_internal_set_hero_losses(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_losses_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_losses(uint32_t value) {
  _internal_set_hero_losses(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Emoticon

// optional uint32 emoticon_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Emoticon::_internal_has_emoticon_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Emoticon::has_emoticon_id() const {
  return _internal_has_emoticon_id();
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::clear_emoticon_id() {
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Emoticon::_internal_emoticon_id() const {
  return _impl_.emoticon_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
  return _internal_emoticon_id();
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::_internal_set_emoticon_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.emoticon_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::set_emoticon_id(uint32_t value) {
  _internal_set_emoticon_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Team

// optional uint32 team_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Team::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Team::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAProfileCard_Slot_Team::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Team::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Team.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAProfileCard_Slot_Team::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Team::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Team.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot

// optional uint32 slot_id = 1;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_slot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CMsgDOTAProfileCard_Slot::clear_slot_id() {
  _impl_.slot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAProfileCard_Slot::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.slot_id)
  return _internal_slot_id();
}
inline void CMsgDOTAProfileCard_Slot::_internal_set_slot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.slot_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.slot_id)
}

// optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_trophy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trophy_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_trophy() const {
  return _internal_has_trophy();
}
inline void CMsgDOTAProfileCard_Slot::clear_trophy() {
  if (_impl_.trophy_ != nullptr) _impl_.trophy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::_internal_trophy() const {
  const ::CMsgDOTAProfileCard_Slot_Trophy* p = _impl_.trophy_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Trophy&>(
      ::_CMsgDOTAProfileCard_Slot_Trophy_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::trophy() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.trophy)
  return _internal_trophy();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_trophy(
    ::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trophy_);
  }
  _impl_.trophy_ = trophy;
  if (trophy) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.trophy)
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::release_trophy() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAProfileCard_Slot_Trophy* temp = _impl_.trophy_;
  _impl_.trophy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::unsafe_arena_release_trophy() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.trophy)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAProfileCard_Slot_Trophy* temp = _impl_.trophy_;
  _impl_.trophy_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::_internal_mutable_trophy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trophy_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Trophy>(GetArenaForAllocation());
    _impl_.trophy_ = p;
  }
  return _impl_.trophy_;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::mutable_trophy() {
  ::CMsgDOTAProfileCard_Slot_Trophy* _msg = _internal_mutable_trophy();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.trophy)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trophy_;
  }
  if (trophy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trophy);
    if (message_arena != submessage_arena) {
      trophy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trophy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trophy_ = trophy;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.trophy)
}

// optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stat_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_stat() const {
  return _internal_has_stat();
}
inline void CMsgDOTAProfileCard_Slot::clear_stat() {
  if (_impl_.stat_ != nullptr) _impl_.stat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::_internal_stat() const {
  const ::CMsgDOTAProfileCard_Slot_Stat* p = _impl_.stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Stat&>(
      ::_CMsgDOTAProfileCard_Slot_Stat_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::stat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.stat)
  return _internal_stat();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_stat(
    ::CMsgDOTAProfileCard_Slot_Stat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  _impl_.stat_ = stat;
  if (stat) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.stat)
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::release_stat() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTAProfileCard_Slot_Stat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.stat)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTAProfileCard_Slot_Stat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::_internal_mutable_stat() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Stat>(GetArenaForAllocation());
    _impl_.stat_ = p;
  }
  return _impl_.stat_;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::mutable_stat() {
  ::CMsgDOTAProfileCard_Slot_Stat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.stat)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.stat)
}

// optional .CMsgDOTAProfileCard.Slot.Item item = 4;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_item() const {
  return _internal_has_item();
}
inline void CMsgDOTAProfileCard_Slot::clear_item() {
  if (_impl_.item_ != nullptr) _impl_.item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::_internal_item() const {
  const ::CMsgDOTAProfileCard_Slot_Item* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Item&>(
      ::_CMsgDOTAProfileCard_Slot_Item_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.item)
  return _internal_item();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_item(
    ::CMsgDOTAProfileCard_Slot_Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.item)
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::release_item() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTAProfileCard_Slot_Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.item)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTAProfileCard_Slot_Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::_internal_mutable_item() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Item>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::mutable_item() {
  ::CMsgDOTAProfileCard_Slot_Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.item)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.item)
}

// optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_hero() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hero_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_hero() const {
  return _internal_has_hero();
}
inline void CMsgDOTAProfileCard_Slot::clear_hero() {
  if (_impl_.hero_ != nullptr) _impl_.hero_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::_internal_hero() const {
  const ::CMsgDOTAProfileCard_Slot_Hero* p = _impl_.hero_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Hero&>(
      ::_CMsgDOTAProfileCard_Slot_Hero_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.hero)
  return _internal_hero();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_hero(
    ::CMsgDOTAProfileCard_Slot_Hero* hero) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hero_);
  }
  _impl_.hero_ = hero;
  if (hero) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.hero)
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::release_hero() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgDOTAProfileCard_Slot_Hero* temp = _impl_.hero_;
  _impl_.hero_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::unsafe_arena_release_hero() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.hero)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgDOTAProfileCard_Slot_Hero* temp = _impl_.hero_;
  _impl_.hero_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::_internal_mutable_hero() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.hero_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Hero>(GetArenaForAllocation());
    _impl_.hero_ = p;
  }
  return _impl_.hero_;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::mutable_hero() {
  ::CMsgDOTAProfileCard_Slot_Hero* _msg = _internal_mutable_hero();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.hero)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hero_;
  }
  if (hero) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hero);
    if (message_arena != submessage_arena) {
      hero = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hero_ = hero;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.hero)
}

// optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_emoticon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emoticon_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_emoticon() const {
  return _internal_has_emoticon();
}
inline void CMsgDOTAProfileCard_Slot::clear_emoticon() {
  if (_impl_.emoticon_ != nullptr) _impl_.emoticon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::_internal_emoticon() const {
  const ::CMsgDOTAProfileCard_Slot_Emoticon* p = _impl_.emoticon_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Emoticon&>(
      ::_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::emoticon() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.emoticon)
  return _internal_emoticon();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_emoticon(
    ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emoticon_);
  }
  _impl_.emoticon_ = emoticon;
  if (emoticon) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.emoticon)
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::release_emoticon() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgDOTAProfileCard_Slot_Emoticon* temp = _impl_.emoticon_;
  _impl_.emoticon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::unsafe_arena_release_emoticon() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.emoticon)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgDOTAProfileCard_Slot_Emoticon* temp = _impl_.emoticon_;
  _impl_.emoticon_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::_internal_mutable_emoticon() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.emoticon_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Emoticon>(GetArenaForAllocation());
    _impl_.emoticon_ = p;
  }
  return _impl_.emoticon_;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::mutable_emoticon() {
  ::CMsgDOTAProfileCard_Slot_Emoticon* _msg = _internal_mutable_emoticon();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.emoticon)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.emoticon_;
  }
  if (emoticon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emoticon);
    if (message_arena != submessage_arena) {
      emoticon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emoticon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.emoticon_ = emoticon;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.emoticon)
}

// optional .CMsgDOTAProfileCard.Slot.Team team = 7;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTAProfileCard_Slot::clear_team() {
  if (_impl_.team_ != nullptr) _impl_.team_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot::_internal_team() const {
  const ::CMsgDOTAProfileCard_Slot_Team* p = _impl_.team_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Team&>(
      ::_CMsgDOTAProfileCard_Slot_Team_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.team)
  return _internal_team();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_team(
    ::CMsgDOTAProfileCard_Slot_Team* team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_);
  }
  _impl_.team_ = team;
  if (team) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.team)
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::release_team() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgDOTAProfileCard_Slot_Team* temp = _impl_.team_;
  _impl_.team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.team)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgDOTAProfileCard_Slot_Team* temp = _impl_.team_;
  _impl_.team_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::_internal_mutable_team() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.team_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Team>(GetArenaForAllocation());
    _impl_.team_ = p;
  }
  return _impl_.team_;
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::mutable_team() {
  ::CMsgDOTAProfileCard_Slot_Team* _msg = _internal_mutable_team();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.team)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_team(::CMsgDOTAProfileCard_Slot_Team* team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_;
  }
  if (team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team);
    if (message_arena != submessage_arena) {
      team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.team_ = team;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.team)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard

// optional uint32 account_id = 1;
inline bool CMsgDOTAProfileCard::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAProfileCard::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAProfileCard::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAProfileCard::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.account_id)
}

// repeated .CMsgDOTAProfileCard.Slot slots = 3;
inline int CMsgDOTAProfileCard::_internal_slots_size() const {
  return _impl_.slots_.size();
}
inline int CMsgDOTAProfileCard::slots_size() const {
  return _internal_slots_size();
}
inline void CMsgDOTAProfileCard::clear_slots() {
  _impl_.slots_.Clear();
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.slots)
  return _impl_.slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
CMsgDOTAProfileCard::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileCard.slots)
  return &_impl_.slots_;
}
inline const ::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::_internal_slots(int index) const {
  return _impl_.slots_.Get(index);
}
inline const ::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.slots)
  return _internal_slots(index);
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::_internal_add_slots() {
  return _impl_.slots_.Add();
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::add_slots() {
  ::CMsgDOTAProfileCard_Slot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileCard.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
CMsgDOTAProfileCard::slots() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileCard.slots)
  return _impl_.slots_;
}

// optional uint32 badge_points = 4;
inline bool CMsgDOTAProfileCard::_internal_has_badge_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_badge_points() const {
  return _internal_has_badge_points();
}
inline void CMsgDOTAProfileCard::clear_badge_points() {
  _impl_.badge_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_badge_points() const {
  return _impl_.badge_points_;
}
inline uint32_t CMsgDOTAProfileCard::badge_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.badge_points)
  return _internal_badge_points();
}
inline void CMsgDOTAProfileCard::_internal_set_badge_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.badge_points_ = value;
}
inline void CMsgDOTAProfileCard::set_badge_points(uint32_t value) {
  _internal_set_badge_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.badge_points)
}

// optional uint32 event_points = 5;
inline bool CMsgDOTAProfileCard::_internal_has_event_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_event_points() const {
  return _internal_has_event_points();
}
inline void CMsgDOTAProfileCard::clear_event_points() {
  _impl_.event_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_event_points() const {
  return _impl_.event_points_;
}
inline uint32_t CMsgDOTAProfileCard::event_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_points)
  return _internal_event_points();
}
inline void CMsgDOTAProfileCard::_internal_set_event_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.event_points_ = value;
}
inline void CMsgDOTAProfileCard::set_event_points(uint32_t value) {
  _internal_set_event_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_points)
}

// optional uint32 event_id = 6;
inline bool CMsgDOTAProfileCard::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgDOTAProfileCard::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgDOTAProfileCard::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_id)
  return _internal_event_id();
}
inline void CMsgDOTAProfileCard::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.event_id_ = value;
}
inline void CMsgDOTAProfileCard::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_id)
}

// optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
inline bool CMsgDOTAProfileCard::_internal_has_recent_battle_cup_victory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recent_battle_cup_victory_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard::has_recent_battle_cup_victory() const {
  return _internal_has_recent_battle_cup_victory();
}
inline void CMsgDOTAProfileCard::clear_recent_battle_cup_victory() {
  if (_impl_.recent_battle_cup_victory_ != nullptr) _impl_.recent_battle_cup_victory_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleCupVictory& CMsgDOTAProfileCard::_internal_recent_battle_cup_victory() const {
  const ::CMsgBattleCupVictory* p = _impl_.recent_battle_cup_victory_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleCupVictory&>(
      ::_CMsgBattleCupVictory_default_instance_);
}
inline const ::CMsgBattleCupVictory& CMsgDOTAProfileCard::recent_battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.recent_battle_cup_victory)
  return _internal_recent_battle_cup_victory();
}
inline void CMsgDOTAProfileCard::unsafe_arena_set_allocated_recent_battle_cup_victory(
    ::CMsgBattleCupVictory* recent_battle_cup_victory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recent_battle_cup_victory_);
  }
  _impl_.recent_battle_cup_victory_ = recent_battle_cup_victory;
  if (recent_battle_cup_victory) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.recent_battle_cup_victory)
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::release_recent_battle_cup_victory() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleCupVictory* temp = _impl_.recent_battle_cup_victory_;
  _impl_.recent_battle_cup_victory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::unsafe_arena_release_recent_battle_cup_victory() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.recent_battle_cup_victory)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleCupVictory* temp = _impl_.recent_battle_cup_victory_;
  _impl_.recent_battle_cup_victory_ = nullptr;
  return temp;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::_internal_mutable_recent_battle_cup_victory() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.recent_battle_cup_victory_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleCupVictory>(GetArenaForAllocation());
    _impl_.recent_battle_cup_victory_ = p;
  }
  return _impl_.recent_battle_cup_victory_;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::mutable_recent_battle_cup_victory() {
  ::CMsgBattleCupVictory* _msg = _internal_mutable_recent_battle_cup_victory();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.recent_battle_cup_victory)
  return _msg;
}
inline void CMsgDOTAProfileCard::set_allocated_recent_battle_cup_victory(::CMsgBattleCupVictory* recent_battle_cup_victory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recent_battle_cup_victory_;
  }
  if (recent_battle_cup_victory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recent_battle_cup_victory);
    if (message_arena != submessage_arena) {
      recent_battle_cup_victory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recent_battle_cup_victory, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.recent_battle_cup_victory_ = recent_battle_cup_victory;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.recent_battle_cup_victory)
}

// optional uint32 rank_tier = 8;
inline bool CMsgDOTAProfileCard::_internal_has_rank_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_rank_tier() const {
  return _internal_has_rank_tier();
}
inline void CMsgDOTAProfileCard::clear_rank_tier() {
  _impl_.rank_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_rank_tier() const {
  return _impl_.rank_tier_;
}
inline uint32_t CMsgDOTAProfileCard::rank_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.rank_tier)
  return _internal_rank_tier();
}
inline void CMsgDOTAProfileCard::_internal_set_rank_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rank_tier_ = value;
}
inline void CMsgDOTAProfileCard::set_rank_tier(uint32_t value) {
  _internal_set_rank_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.rank_tier)
}

// optional uint32 leaderboard_rank = 9;
inline bool CMsgDOTAProfileCard::_internal_has_leaderboard_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_leaderboard_rank() const {
  return _internal_has_leaderboard_rank();
}
inline void CMsgDOTAProfileCard::clear_leaderboard_rank() {
  _impl_.leaderboard_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_leaderboard_rank() const {
  return _impl_.leaderboard_rank_;
}
inline uint32_t CMsgDOTAProfileCard::leaderboard_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.leaderboard_rank)
  return _internal_leaderboard_rank();
}
inline void CMsgDOTAProfileCard::_internal_set_leaderboard_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.leaderboard_rank_ = value;
}
inline void CMsgDOTAProfileCard::set_leaderboard_rank(uint32_t value) {
  _internal_set_leaderboard_rank(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.leaderboard_rank)
}

// optional bool is_plus_subscriber = 10;
inline bool CMsgDOTAProfileCard::_internal_has_is_plus_subscriber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CMsgDOTAProfileCard::clear_is_plus_subscriber() {
  _impl_.is_plus_subscriber_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTAProfileCard::_internal_is_plus_subscriber() const {
  return _impl_.is_plus_subscriber_;
}
inline bool CMsgDOTAProfileCard::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CMsgDOTAProfileCard::_internal_set_is_plus_subscriber(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_plus_subscriber_ = value;
}
inline void CMsgDOTAProfileCard::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.is_plus_subscriber)
}

// optional uint32 plus_original_start_date = 11;
inline bool CMsgDOTAProfileCard::_internal_has_plus_original_start_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_plus_original_start_date() const {
  return _internal_has_plus_original_start_date();
}
inline void CMsgDOTAProfileCard::clear_plus_original_start_date() {
  _impl_.plus_original_start_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_plus_original_start_date() const {
  return _impl_.plus_original_start_date_;
}
inline uint32_t CMsgDOTAProfileCard::plus_original_start_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.plus_original_start_date)
  return _internal_plus_original_start_date();
}
inline void CMsgDOTAProfileCard::_internal_set_plus_original_start_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.plus_original_start_date_ = value;
}
inline void CMsgDOTAProfileCard::set_plus_original_start_date(uint32_t value) {
  _internal_set_plus_original_start_date(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.plus_original_start_date)
}

// optional uint32 rank_tier_score = 12;
inline bool CMsgDOTAProfileCard::_internal_has_rank_tier_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_rank_tier_score() const {
  return _internal_has_rank_tier_score();
}
inline void CMsgDOTAProfileCard::clear_rank_tier_score() {
  _impl_.rank_tier_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_rank_tier_score() const {
  return _impl_.rank_tier_score_;
}
inline uint32_t CMsgDOTAProfileCard::rank_tier_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.rank_tier_score)
  return _internal_rank_tier_score();
}
inline void CMsgDOTAProfileCard::_internal_set_rank_tier_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.rank_tier_score_ = value;
}
inline void CMsgDOTAProfileCard::set_rank_tier_score(uint32_t value) {
  _internal_set_rank_tier_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.rank_tier_score)
}

// optional uint32 leaderboard_rank_core = 17;
inline bool CMsgDOTAProfileCard::_internal_has_leaderboard_rank_core() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_leaderboard_rank_core() const {
  return _internal_has_leaderboard_rank_core();
}
inline void CMsgDOTAProfileCard::clear_leaderboard_rank_core() {
  _impl_.leaderboard_rank_core_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_leaderboard_rank_core() const {
  return _impl_.leaderboard_rank_core_;
}
inline uint32_t CMsgDOTAProfileCard::leaderboard_rank_core() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.leaderboard_rank_core)
  return _internal_leaderboard_rank_core();
}
inline void CMsgDOTAProfileCard::_internal_set_leaderboard_rank_core(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.leaderboard_rank_core_ = value;
}
inline void CMsgDOTAProfileCard::set_leaderboard_rank_core(uint32_t value) {
  _internal_set_leaderboard_rank_core(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.leaderboard_rank_core)
}

// optional uint32 title = 23;
inline bool CMsgDOTAProfileCard::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_title() const {
  return _internal_has_title();
}
inline void CMsgDOTAProfileCard::clear_title() {
  _impl_.title_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_title() const {
  return _impl_.title_;
}
inline uint32_t CMsgDOTAProfileCard::title() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.title)
  return _internal_title();
}
inline void CMsgDOTAProfileCard::_internal_set_title(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.title_ = value;
}
inline void CMsgDOTAProfileCard::set_title(uint32_t value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.title)
}

// optional uint64 favorite_team_packed = 24;
inline bool CMsgDOTAProfileCard::_internal_has_favorite_team_packed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_favorite_team_packed() const {
  return _internal_has_favorite_team_packed();
}
inline void CMsgDOTAProfileCard::clear_favorite_team_packed() {
  _impl_.favorite_team_packed_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CMsgDOTAProfileCard::_internal_favorite_team_packed() const {
  return _impl_.favorite_team_packed_;
}
inline uint64_t CMsgDOTAProfileCard::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.favorite_team_packed)
  return _internal_favorite_team_packed();
}
inline void CMsgDOTAProfileCard::_internal_set_favorite_team_packed(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.favorite_team_packed_ = value;
}
inline void CMsgDOTAProfileCard::set_favorite_team_packed(uint64_t value) {
  _internal_set_favorite_team_packed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.favorite_team_packed)
}

// optional uint32 lifetime_games = 25;
inline bool CMsgDOTAProfileCard::_internal_has_lifetime_games() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_lifetime_games() const {
  return _internal_has_lifetime_games();
}
inline void CMsgDOTAProfileCard::clear_lifetime_games() {
  _impl_.lifetime_games_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_lifetime_games() const {
  return _impl_.lifetime_games_;
}
inline uint32_t CMsgDOTAProfileCard::lifetime_games() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.lifetime_games)
  return _internal_lifetime_games();
}
inline void CMsgDOTAProfileCard::_internal_set_lifetime_games(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.lifetime_games_ = value;
}
inline void CMsgDOTAProfileCard::set_lifetime_games(uint32_t value) {
  _internal_set_lifetime_games(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.lifetime_games)
}

// -------------------------------------------------------------------

// CSODOTAPlayerChallenge

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSODOTAPlayerChallenge::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSODOTAPlayerChallenge::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CSODOTAPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.account_id)
  return _internal_account_id();
}
inline void CSODOTAPlayerChallenge::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CSODOTAPlayerChallenge::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.account_id)
}

// optional uint32 event_id = 2 [(.key_field) = true];
inline bool CSODOTAPlayerChallenge::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_event_id() const {
  return _internal_has_event_id();
}
inline void CSODOTAPlayerChallenge::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CSODOTAPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.event_id)
  return _internal_event_id();
}
inline void CSODOTAPlayerChallenge::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CSODOTAPlayerChallenge::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.event_id)
}

// optional uint32 slot_id = 3 [(.key_field) = true];
inline bool CSODOTAPlayerChallenge::_internal_has_slot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CSODOTAPlayerChallenge::clear_slot_id() {
  _impl_.slot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t CSODOTAPlayerChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.slot_id)
  return _internal_slot_id();
}
inline void CSODOTAPlayerChallenge::_internal_set_slot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.slot_id_ = value;
}
inline void CSODOTAPlayerChallenge::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.slot_id)
}

// optional uint32 int_param_0 = 5;
inline bool CSODOTAPlayerChallenge::_internal_has_int_param_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_int_param_0() const {
  return _internal_has_int_param_0();
}
inline void CSODOTAPlayerChallenge::clear_int_param_0() {
  _impl_.int_param_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_int_param_0() const {
  return _impl_.int_param_0_;
}
inline uint32_t CSODOTAPlayerChallenge::int_param_0() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_0)
  return _internal_int_param_0();
}
inline void CSODOTAPlayerChallenge::_internal_set_int_param_0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.int_param_0_ = value;
}
inline void CSODOTAPlayerChallenge::set_int_param_0(uint32_t value) {
  _internal_set_int_param_0(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_0)
}

// optional uint32 int_param_1 = 6;
inline bool CSODOTAPlayerChallenge::_internal_has_int_param_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_int_param_1() const {
  return _internal_has_int_param_1();
}
inline void CSODOTAPlayerChallenge::clear_int_param_1() {
  _impl_.int_param_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_int_param_1() const {
  return _impl_.int_param_1_;
}
inline uint32_t CSODOTAPlayerChallenge::int_param_1() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.int_param_1)
  return _internal_int_param_1();
}
inline void CSODOTAPlayerChallenge::_internal_set_int_param_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.int_param_1_ = value;
}
inline void CSODOTAPlayerChallenge::set_int_param_1(uint32_t value) {
  _internal_set_int_param_1(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.int_param_1)
}

// optional uint32 created_time = 7;
inline bool CSODOTAPlayerChallenge::_internal_has_created_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_created_time() const {
  return _internal_has_created_time();
}
inline void CSODOTAPlayerChallenge::clear_created_time() {
  _impl_.created_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_created_time() const {
  return _impl_.created_time_;
}
inline uint32_t CSODOTAPlayerChallenge::created_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.created_time)
  return _internal_created_time();
}
inline void CSODOTAPlayerChallenge::_internal_set_created_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.created_time_ = value;
}
inline void CSODOTAPlayerChallenge::set_created_time(uint32_t value) {
  _internal_set_created_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.created_time)
}

// optional uint32 completed = 8;
inline bool CSODOTAPlayerChallenge::_internal_has_completed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_completed() const {
  return _internal_has_completed();
}
inline void CSODOTAPlayerChallenge::clear_completed() {
  _impl_.completed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_completed() const {
  return _impl_.completed_;
}
inline uint32_t CSODOTAPlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.completed)
  return _internal_completed();
}
inline void CSODOTAPlayerChallenge::_internal_set_completed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.completed_ = value;
}
inline void CSODOTAPlayerChallenge::set_completed(uint32_t value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.completed)
}

// optional uint32 sequence_id = 9;
inline bool CSODOTAPlayerChallenge::_internal_has_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_sequence_id() const {
  return _internal_has_sequence_id();
}
inline void CSODOTAPlayerChallenge::clear_sequence_id() {
  _impl_.sequence_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline uint32_t CSODOTAPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.sequence_id)
  return _internal_sequence_id();
}
inline void CSODOTAPlayerChallenge::_internal_set_sequence_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.sequence_id_ = value;
}
inline void CSODOTAPlayerChallenge::set_sequence_id(uint32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.sequence_id)
}

// optional uint32 challenge_tier = 10;
inline bool CSODOTAPlayerChallenge::_internal_has_challenge_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_challenge_tier() const {
  return _internal_has_challenge_tier();
}
inline void CSODOTAPlayerChallenge::clear_challenge_tier() {
  _impl_.challenge_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_challenge_tier() const {
  return _impl_.challenge_tier_;
}
inline uint32_t CSODOTAPlayerChallenge::challenge_tier() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.challenge_tier)
  return _internal_challenge_tier();
}
inline void CSODOTAPlayerChallenge::_internal_set_challenge_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.challenge_tier_ = value;
}
inline void CSODOTAPlayerChallenge::set_challenge_tier(uint32_t value) {
  _internal_set_challenge_tier(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.challenge_tier)
}

// optional uint32 flags = 11;
inline bool CSODOTAPlayerChallenge::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_flags() const {
  return _internal_has_flags();
}
inline void CSODOTAPlayerChallenge::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t CSODOTAPlayerChallenge::flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.flags)
  return _internal_flags();
}
inline void CSODOTAPlayerChallenge::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.flags_ = value;
}
inline void CSODOTAPlayerChallenge::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.flags)
}

// optional uint32 attempts = 12;
inline bool CSODOTAPlayerChallenge::_internal_has_attempts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_attempts() const {
  return _internal_has_attempts();
}
inline void CSODOTAPlayerChallenge::clear_attempts() {
  _impl_.attempts_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_attempts() const {
  return _impl_.attempts_;
}
inline uint32_t CSODOTAPlayerChallenge::attempts() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.attempts)
  return _internal_attempts();
}
inline void CSODOTAPlayerChallenge::_internal_set_attempts(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.attempts_ = value;
}
inline void CSODOTAPlayerChallenge::set_attempts(uint32_t value) {
  _internal_set_attempts(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.attempts)
}

// optional uint32 complete_limit = 13;
inline bool CSODOTAPlayerChallenge::_internal_has_complete_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_complete_limit() const {
  return _internal_has_complete_limit();
}
inline void CSODOTAPlayerChallenge::clear_complete_limit() {
  _impl_.complete_limit_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_complete_limit() const {
  return _impl_.complete_limit_;
}
inline uint32_t CSODOTAPlayerChallenge::complete_limit() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.complete_limit)
  return _internal_complete_limit();
}
inline void CSODOTAPlayerChallenge::_internal_set_complete_limit(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.complete_limit_ = value;
}
inline void CSODOTAPlayerChallenge::set_complete_limit(uint32_t value) {
  _internal_set_complete_limit(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.complete_limit)
}

// optional uint32 quest_rank = 14;
inline bool CSODOTAPlayerChallenge::_internal_has_quest_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_quest_rank() const {
  return _internal_has_quest_rank();
}
inline void CSODOTAPlayerChallenge::clear_quest_rank() {
  _impl_.quest_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_quest_rank() const {
  return _impl_.quest_rank_;
}
inline uint32_t CSODOTAPlayerChallenge::quest_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.quest_rank)
  return _internal_quest_rank();
}
inline void CSODOTAPlayerChallenge::_internal_set_quest_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.quest_rank_ = value;
}
inline void CSODOTAPlayerChallenge::set_quest_rank(uint32_t value) {
  _internal_set_quest_rank(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.quest_rank)
}

// optional uint32 max_quest_rank = 15;
inline bool CSODOTAPlayerChallenge::_internal_has_max_quest_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_max_quest_rank() const {
  return _internal_has_max_quest_rank();
}
inline void CSODOTAPlayerChallenge::clear_max_quest_rank() {
  _impl_.max_quest_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_max_quest_rank() const {
  return _impl_.max_quest_rank_;
}
inline uint32_t CSODOTAPlayerChallenge::max_quest_rank() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.max_quest_rank)
  return _internal_max_quest_rank();
}
inline void CSODOTAPlayerChallenge::_internal_set_max_quest_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.max_quest_rank_ = value;
}
inline void CSODOTAPlayerChallenge::set_max_quest_rank(uint32_t value) {
  _internal_set_max_quest_rank(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.max_quest_rank)
}

// optional uint32 instance_id = 16;
inline bool CSODOTAPlayerChallenge::_internal_has_instance_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_instance_id() const {
  return _internal_has_instance_id();
}
inline void CSODOTAPlayerChallenge::clear_instance_id() {
  _impl_.instance_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_instance_id() const {
  return _impl_.instance_id_;
}
inline uint32_t CSODOTAPlayerChallenge::instance_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.instance_id)
  return _internal_instance_id();
}
inline void CSODOTAPlayerChallenge::_internal_set_instance_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.instance_id_ = value;
}
inline void CSODOTAPlayerChallenge::set_instance_id(uint32_t value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.instance_id)
}

// optional uint32 hero_id = 17;
inline bool CSODOTAPlayerChallenge::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CSODOTAPlayerChallenge::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CSODOTAPlayerChallenge::hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.hero_id)
  return _internal_hero_id();
}
inline void CSODOTAPlayerChallenge::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.hero_id_ = value;
}
inline void CSODOTAPlayerChallenge::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.hero_id)
}

// optional uint32 template_id = 18;
inline bool CSODOTAPlayerChallenge::_internal_has_template_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTAPlayerChallenge::has_template_id() const {
  return _internal_has_template_id();
}
inline void CSODOTAPlayerChallenge::clear_template_id() {
  _impl_.template_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CSODOTAPlayerChallenge::_internal_template_id() const {
  return _impl_.template_id_;
}
inline uint32_t CSODOTAPlayerChallenge::template_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPlayerChallenge.template_id)
  return _internal_template_id();
}
inline void CSODOTAPlayerChallenge::_internal_set_template_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.template_id_ = value;
}
inline void CSODOTAPlayerChallenge::set_template_id(uint32_t value) {
  _internal_set_template_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPlayerChallenge.template_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCRerollPlayerChallenge

// optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
inline bool CMsgClientToGCRerollPlayerChallenge::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCRerollPlayerChallenge::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EEvent CMsgClientToGCRerollPlayerChallenge::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgClientToGCRerollPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.event_id)
  return _internal_event_id();
}
inline void CMsgClientToGCRerollPlayerChallenge::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.event_id)
}

// optional uint32 sequence_id = 3;
inline bool CMsgClientToGCRerollPlayerChallenge::_internal_has_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCRerollPlayerChallenge::has_sequence_id() const {
  return _internal_has_sequence_id();
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_sequence_id() {
  _impl_.sequence_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCRerollPlayerChallenge::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline uint32_t CMsgClientToGCRerollPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.sequence_id)
  return _internal_sequence_id();
}
inline void CMsgClientToGCRerollPlayerChallenge::_internal_set_sequence_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sequence_id_ = value;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_sequence_id(uint32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.sequence_id)
}

// optional uint32 hero_id = 4;
inline bool CMsgClientToGCRerollPlayerChallenge::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCRerollPlayerChallenge::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgClientToGCRerollPlayerChallenge::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCRerollPlayerChallenge::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgClientToGCRerollPlayerChallenge::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRerollPlayerChallenge.hero_id)
  return _internal_hero_id();
}
inline void CMsgClientToGCRerollPlayerChallenge::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgClientToGCRerollPlayerChallenge::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRerollPlayerChallenge.hero_id)
}

// -------------------------------------------------------------------

// CMsgGCRerollPlayerChallengeResponse

// optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
inline bool CMsgGCRerollPlayerChallengeResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCRerollPlayerChallengeResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgGCRerollPlayerChallengeResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::_internal_result() const {
  return static_cast< ::CMsgGCRerollPlayerChallengeResponse_EResult >(_impl_.result_);
}
inline ::CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCRerollPlayerChallengeResponse.result)
  return _internal_result();
}
inline void CMsgGCRerollPlayerChallengeResponse::_internal_set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value) {
  assert(::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgGCRerollPlayerChallengeResponse::set_result(::CMsgGCRerollPlayerChallengeResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgGCRerollPlayerChallengeResponse.result)
}

// -------------------------------------------------------------------

// CMsgGCTopCustomGamesList

// repeated uint64 top_custom_games = 1;
inline int CMsgGCTopCustomGamesList::_internal_top_custom_games_size() const {
  return _impl_.top_custom_games_.size();
}
inline int CMsgGCTopCustomGamesList::top_custom_games_size() const {
  return _internal_top_custom_games_size();
}
inline void CMsgGCTopCustomGamesList::clear_top_custom_games() {
  _impl_.top_custom_games_.Clear();
}
inline uint64_t CMsgGCTopCustomGamesList::_internal_top_custom_games(int index) const {
  return _impl_.top_custom_games_.Get(index);
}
inline uint64_t CMsgGCTopCustomGamesList::top_custom_games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCTopCustomGamesList.top_custom_games)
  return _internal_top_custom_games(index);
}
inline void CMsgGCTopCustomGamesList::set_top_custom_games(int index, uint64_t value) {
  _impl_.top_custom_games_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCTopCustomGamesList.top_custom_games)
}
inline void CMsgGCTopCustomGamesList::_internal_add_top_custom_games(uint64_t value) {
  _impl_.top_custom_games_.Add(value);
}
inline void CMsgGCTopCustomGamesList::add_top_custom_games(uint64_t value) {
  _internal_add_top_custom_games(value);
  // @@protoc_insertion_point(field_add:CMsgGCTopCustomGamesList.top_custom_games)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCTopCustomGamesList::_internal_top_custom_games() const {
  return _impl_.top_custom_games_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCTopCustomGamesList::top_custom_games() const {
  // @@protoc_insertion_point(field_list:CMsgGCTopCustomGamesList.top_custom_games)
  return _internal_top_custom_games();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCTopCustomGamesList::_internal_mutable_top_custom_games() {
  return &_impl_.top_custom_games_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCTopCustomGamesList::mutable_top_custom_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCTopCustomGamesList.top_custom_games)
  return _internal_mutable_top_custom_games();
}

// optional uint64 game_of_the_day = 2;
inline bool CMsgGCTopCustomGamesList::_internal_has_game_of_the_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCTopCustomGamesList::has_game_of_the_day() const {
  return _internal_has_game_of_the_day();
}
inline void CMsgGCTopCustomGamesList::clear_game_of_the_day() {
  _impl_.game_of_the_day_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCTopCustomGamesList::_internal_game_of_the_day() const {
  return _impl_.game_of_the_day_;
}
inline uint64_t CMsgGCTopCustomGamesList::game_of_the_day() const {
  // @@protoc_insertion_point(field_get:CMsgGCTopCustomGamesList.game_of_the_day)
  return _internal_game_of_the_day();
}
inline void CMsgGCTopCustomGamesList::_internal_set_game_of_the_day(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.game_of_the_day_ = value;
}
inline void CMsgGCTopCustomGamesList::set_game_of_the_day(uint64_t value) {
  _internal_set_game_of_the_day(value);
  // @@protoc_insertion_point(field_set:CMsgGCTopCustomGamesList.game_of_the_day)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_team_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_number() const {
  return _internal_has_team_number();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_number() {
  _impl_.team_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::_internal_team_number() const {
  return _impl_.team_number_;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
  return _internal_team_number();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_team_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_number_ = value;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_number(uint32_t value) {
  _internal_set_team_number(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
  return _internal_team_id();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStats_TeamDetails::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo() const {
  return _internal_has_team_logo();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo() {
  _impl_.team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgDOTARealtimeGameStats_TeamDetails::_internal_team_logo() const {
  return _impl_.team_logo_;
}
inline uint64_t CMsgDOTARealtimeGameStats_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
  return _internal_team_logo();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_logo_ = value;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo(uint64_t value) {
  _internal_set_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
}

// optional string team_tag = 10;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_team_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_tag() {
  _impl_.team_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
  return _internal_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_tag() {
  std::string* _s = _internal_mutable_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStats_TeamDetails::_internal_team_tag() const {
  return _impl_.team_tag_.Get();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_team_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::_internal_mutable_team_tag() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_tag_.SetAllocated(team_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.TeamDetails.team_tag)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_score() {
  _impl_.score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.score)
  return _internal_score();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.score_ = value;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.score)
}

// optional uint32 net_worth = 9;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.net_worth)
  return _internal_net_worth();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.net_worth_ = value;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.net_worth)
}

// repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStats_TeamDetails::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgDOTARealtimeGameStats_TeamDetails::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >*
CMsgDOTARealtimeGameStats_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return &_impl_.players_;
}
inline const ::CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_TeamDetails::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return _internal_players(index);
}
inline ::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::add_players() {
  ::CMsgDOTARealtimeGameStats_PlayerDetails* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PlayerDetails >&
CMsgDOTARealtimeGameStats_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.TeamDetails.players)
  return _impl_.players_;
}

// optional bool only_team = 7;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_only_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_only_team() const {
  return _internal_has_only_team();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_only_team() {
  _impl_.only_team_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_only_team() const {
  return _impl_.only_team_;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::only_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
  return _internal_only_team();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_only_team(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.only_team_ = value;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_only_team(bool value) {
  _internal_set_only_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.only_team)
}

// optional uint32 cheers = 8;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_cheers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_cheers() const {
  return _internal_has_cheers();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_cheers() {
  _impl_.cheers_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::_internal_cheers() const {
  return _impl_.cheers_;
}
inline uint32_t CMsgDOTARealtimeGameStats_TeamDetails::cheers() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
  return _internal_cheers();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_cheers(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.cheers_ = value;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_cheers(uint32_t value) {
  _internal_set_cheers(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.cheers)
}

// optional string team_logo_url = 11;
inline bool CMsgDOTARealtimeGameStats_TeamDetails::_internal_has_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo_url() const {
  return _internal_has_team_logo_url();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo_url() {
  _impl_.team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
  return _internal_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_logo_url() {
  std::string* _s = _internal_mutable_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStats_TeamDetails::_internal_team_logo_url() const {
  return _impl_.team_logo_url_.Get();
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::_internal_set_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::_internal_mutable_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
  if (!_internal_has_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_logo_url(std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.team_logo_url_.SetAllocated(team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_ItemDetails

// optional int32 item_ability_id = 1 [default = -1];
inline bool CMsgDOTARealtimeGameStats_ItemDetails::_internal_has_item_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_item_ability_id() const {
  return _internal_has_item_ability_id();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_item_ability_id() {
  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgDOTARealtimeGameStats_ItemDetails::_internal_item_ability_id() const {
  return _impl_.item_ability_id_;
}
inline int32_t CMsgDOTARealtimeGameStats_ItemDetails::item_ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.item_ability_id)
  return _internal_item_ability_id();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::_internal_set_item_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.item_ability_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_item_ability_id(int32_t value) {
  _internal_set_item_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.item_ability_id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTARealtimeGameStats_ItemDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStats_ItemDetails::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.name)
}
inline std::string* CMsgDOTARealtimeGameStats_ItemDetails::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.ItemDetails.name)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStats_ItemDetails::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_ItemDetails::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_ItemDetails::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.ItemDetails.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.ItemDetails.name)
}

// optional int32 time = 3;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_time() const {
  return _internal_has_time();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_time() {
  _impl_.time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDOTARealtimeGameStats_ItemDetails::_internal_time() const {
  return _impl_.time_;
}
inline int32_t CMsgDOTARealtimeGameStats_ItemDetails::time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.time)
  return _internal_time();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::_internal_set_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.time_ = value;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.time)
}

// optional bool sold = 4;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::_internal_has_sold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_sold() const {
  return _internal_has_sold();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_sold() {
  _impl_.sold_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::_internal_sold() const {
  return _impl_.sold_;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::sold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.sold)
  return _internal_sold();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::_internal_set_sold(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sold_ = value;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_sold(bool value) {
  _internal_set_sold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.sold)
}

// optional uint32 stackcount = 5;
inline bool CMsgDOTARealtimeGameStats_ItemDetails::_internal_has_stackcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_ItemDetails::has_stackcount() const {
  return _internal_has_stackcount();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::clear_stackcount() {
  _impl_.stackcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTARealtimeGameStats_ItemDetails::_internal_stackcount() const {
  return _impl_.stackcount_;
}
inline uint32_t CMsgDOTARealtimeGameStats_ItemDetails::stackcount() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
  return _internal_stackcount();
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::_internal_set_stackcount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.stackcount_ = value;
}
inline void CMsgDOTARealtimeGameStats_ItemDetails::set_stackcount(uint32_t value) {
  _internal_set_stackcount(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityDetails

// optional int32 id = 1 [default = -1];
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_id() const {
  return _internal_has_id();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_id() {
  _impl_.id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgDOTARealtimeGameStats_AbilityDetails::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CMsgDOTARealtimeGameStats_AbilityDetails::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.id)
  return _internal_id();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.id)
}

// optional string name = 2;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTARealtimeGameStats_AbilityDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
inline std::string* CMsgDOTARealtimeGameStats_AbilityDetails::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStats_AbilityDetails::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_AbilityDetails::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_AbilityDetails::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.AbilityDetails.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.AbilityDetails.name)
}

// optional uint32 level = 3;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_level() const {
  return _internal_has_level();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARealtimeGameStats_AbilityDetails::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgDOTARealtimeGameStats_AbilityDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.level)
  return _internal_level();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.level_ = value;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.level)
}

// optional float cooldown = 4;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::_internal_has_cooldown() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown() const {
  return _internal_has_cooldown();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown() {
  _impl_.cooldown_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::_internal_cooldown() const {
  return _impl_.cooldown_;
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
  return _internal_cooldown();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::_internal_set_cooldown(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cooldown_ = value;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown(float value) {
  _internal_set_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
}

// optional float cooldown_max = 5;
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::_internal_has_cooldown_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown_max() const {
  return _internal_has_cooldown_max();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown_max() {
  _impl_.cooldown_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::_internal_cooldown_max() const {
  return _impl_.cooldown_max_;
}
inline float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
  return _internal_cooldown_max();
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::_internal_set_cooldown_max(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cooldown_max_ = value;
}
inline void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown_max(float value) {
  _internal_set_cooldown_max(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_HeroToHeroStats

// optional int32 victimid = 1 [default = -1];
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_has_victimid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_victimid() const {
  return _internal_has_victimid();
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_victimid() {
  _impl_.victimid_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_victimid() const {
  return _impl_.victimid_;
}
inline int32_t CMsgDOTARealtimeGameStats_HeroToHeroStats::victimid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
  return _internal_victimid();
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_set_victimid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.victimid_ = value;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_victimid(int32_t value) {
  _internal_set_victimid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
}

// optional uint32 kills = 2;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgDOTARealtimeGameStats_HeroToHeroStats::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
  return _internal_kills();
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kills_ = value;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
}

// optional uint32 assists = 3;
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgDOTARealtimeGameStats_HeroToHeroStats::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
  return _internal_assists();
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.assists_ = value;
}
inline void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_AbilityList

// repeated int32 id = 1;
inline int CMsgDOTARealtimeGameStats_AbilityList::_internal_id_size() const {
  return _impl_.id_.size();
}
inline int CMsgDOTARealtimeGameStats_AbilityList::id_size() const {
  return _internal_id_size();
}
inline void CMsgDOTARealtimeGameStats_AbilityList::clear_id() {
  _impl_.id_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStats_AbilityList::_internal_id(int index) const {
  return _impl_.id_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStats_AbilityList::id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.AbilityList.id)
  return _internal_id(index);
}
inline void CMsgDOTARealtimeGameStats_AbilityList::set_id(int index, int32_t value) {
  _impl_.id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline void CMsgDOTARealtimeGameStats_AbilityList::_internal_add_id(int32_t value) {
  _impl_.id_.Add(value);
}
inline void CMsgDOTARealtimeGameStats_AbilityList::add_id(int32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.AbilityList.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_AbilityList::_internal_id() const {
  return _impl_.id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_AbilityList::id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_AbilityList::_internal_mutable_id() {
  return &_impl_.id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_AbilityList::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.AbilityList.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_accountid() {
  _impl_.accountid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
  return _internal_accountid();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_accountid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.accountid_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
}

// optional int32 playerid = 2 [default = -1];
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_playerid() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_playerid() const {
  return _internal_has_playerid();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_playerid() {
  _impl_.playerid_ = -1;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
  return _internal_playerid();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_playerid(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.playerid_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTARealtimeGameStats_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
inline std::string* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStats_PlayerDetails::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_PlayerDetails::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStats_PlayerDetails::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.PlayerDetails.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.team)
  return _internal_team();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_heroid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_heroid() const {
  return _internal_has_heroid();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_heroid() {
  _impl_.heroid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_heroid() const {
  return _impl_.heroid_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
  return _internal_heroid();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_heroid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.heroid_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_heroid(uint32_t value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
}

// optional uint32 healthpoints = 6;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_healthpoints() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthpoints() const {
  return _internal_has_healthpoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthpoints() {
  _impl_.healthpoints_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_healthpoints() const {
  return _impl_.healthpoints_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::healthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
  return _internal_healthpoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_healthpoints(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.healthpoints_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthpoints(uint32_t value) {
  _internal_set_healthpoints(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
}

// optional uint32 maxhealthpoints = 7;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_maxhealthpoints() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxhealthpoints() const {
  return _internal_has_maxhealthpoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxhealthpoints() {
  _impl_.maxhealthpoints_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_maxhealthpoints() const {
  return _impl_.maxhealthpoints_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::maxhealthpoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
  return _internal_maxhealthpoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_maxhealthpoints(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.maxhealthpoints_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxhealthpoints(uint32_t value) {
  _internal_set_maxhealthpoints(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
}

// optional float healthregenrate = 8;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_healthregenrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthregenrate() const {
  return _internal_has_healthregenrate();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthregenrate() {
  _impl_.healthregenrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::_internal_healthregenrate() const {
  return _impl_.healthregenrate_;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::healthregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
  return _internal_healthregenrate();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_healthregenrate(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.healthregenrate_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthregenrate(float value) {
  _internal_set_healthregenrate(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
}

// optional uint32 manapoints = 9;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_manapoints() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manapoints() const {
  return _internal_has_manapoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manapoints() {
  _impl_.manapoints_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_manapoints() const {
  return _impl_.manapoints_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::manapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
  return _internal_manapoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_manapoints(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.manapoints_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manapoints(uint32_t value) {
  _internal_set_manapoints(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
}

// optional uint32 maxmanapoints = 10;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_maxmanapoints() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxmanapoints() const {
  return _internal_has_maxmanapoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxmanapoints() {
  _impl_.maxmanapoints_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_maxmanapoints() const {
  return _impl_.maxmanapoints_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::maxmanapoints() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
  return _internal_maxmanapoints();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_maxmanapoints(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.maxmanapoints_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxmanapoints(uint32_t value) {
  _internal_set_maxmanapoints(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
}

// optional float manaregenrate = 11;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_manaregenrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manaregenrate() const {
  return _internal_has_manaregenrate();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manaregenrate() {
  _impl_.manaregenrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::_internal_manaregenrate() const {
  return _impl_.manaregenrate_;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::manaregenrate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
  return _internal_manaregenrate();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_manaregenrate(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.manaregenrate_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_manaregenrate(float value) {
  _internal_set_manaregenrate(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
}

// optional uint32 base_strength = 12;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_base_strength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_strength() const {
  return _internal_has_base_strength();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_strength() {
  _impl_.base_strength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_base_strength() const {
  return _impl_.base_strength_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::base_strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
  return _internal_base_strength();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_base_strength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.base_strength_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_strength(uint32_t value) {
  _internal_set_base_strength(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
}

// optional uint32 base_agility = 13;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_base_agility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_agility() const {
  return _internal_has_base_agility();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_agility() {
  _impl_.base_agility_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_base_agility() const {
  return _impl_.base_agility_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::base_agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
  return _internal_base_agility();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_base_agility(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.base_agility_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_agility(uint32_t value) {
  _internal_set_base_agility(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
}

// optional uint32 base_intelligence = 14;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_base_intelligence() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_intelligence() const {
  return _internal_has_base_intelligence();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_intelligence() {
  _impl_.base_intelligence_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_base_intelligence() const {
  return _impl_.base_intelligence_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::base_intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
  return _internal_base_intelligence();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_base_intelligence(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.base_intelligence_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_intelligence(uint32_t value) {
  _internal_set_base_intelligence(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
}

// optional int32 base_armor = 15;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_base_armor() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_armor() const {
  return _internal_has_base_armor();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_armor() {
  _impl_.base_armor_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_base_armor() const {
  return _impl_.base_armor_;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::base_armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
  return _internal_base_armor();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_base_armor(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.base_armor_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_armor(int32_t value) {
  _internal_set_base_armor(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
}

// optional uint32 base_movespeed = 16;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_base_movespeed() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_movespeed() const {
  return _internal_has_base_movespeed();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_movespeed() {
  _impl_.base_movespeed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_base_movespeed() const {
  return _impl_.base_movespeed_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::base_movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
  return _internal_base_movespeed();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_base_movespeed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.base_movespeed_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_movespeed(uint32_t value) {
  _internal_set_base_movespeed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
}

// optional uint32 base_damage = 17;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_base_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_damage() const {
  return _internal_has_base_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_damage() {
  _impl_.base_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_base_damage() const {
  return _impl_.base_damage_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::base_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
  return _internal_base_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_base_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.base_damage_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_damage(uint32_t value) {
  _internal_set_base_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
}

// optional uint32 strength = 18;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_strength() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_strength() const {
  return _internal_has_strength();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_strength() {
  _impl_.strength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_strength() const {
  return _impl_.strength_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::strength() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
  return _internal_strength();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_strength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.strength_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_strength(uint32_t value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.strength)
}

// optional uint32 agility = 19;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_agility() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_agility() const {
  return _internal_has_agility();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_agility() {
  _impl_.agility_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_agility() const {
  return _impl_.agility_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::agility() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
  return _internal_agility();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_agility(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.agility_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_agility(uint32_t value) {
  _internal_set_agility(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.agility)
}

// optional uint32 intelligence = 20;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_intelligence() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_intelligence() const {
  return _internal_has_intelligence();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_intelligence() {
  _impl_.intelligence_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_intelligence() const {
  return _impl_.intelligence_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
  return _internal_intelligence();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_intelligence(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.intelligence_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_intelligence(uint32_t value) {
  _internal_set_intelligence(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
}

// optional int32 armor = 21;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_armor() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_armor() const {
  return _internal_has_armor();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_armor() {
  _impl_.armor_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_armor() const {
  return _impl_.armor_;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::armor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
  return _internal_armor();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_armor(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.armor_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_armor(int32_t value) {
  _internal_set_armor(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.armor)
}

// optional uint32 movespeed = 22;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_movespeed() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_movespeed() const {
  return _internal_has_movespeed();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_movespeed() {
  _impl_.movespeed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_movespeed() const {
  return _impl_.movespeed_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::movespeed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
  return _internal_movespeed();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_movespeed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.movespeed_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_movespeed(uint32_t value) {
  _internal_set_movespeed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
}

// optional uint32 damage = 23;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_damage() const {
  return _internal_has_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_damage() {
  _impl_.damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
  return _internal_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.damage_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.damage)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_hero_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_damage() const {
  return _internal_has_hero_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_damage() {
  _impl_.hero_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_hero_damage() const {
  return _impl_.hero_damage_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
  return _internal_hero_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_hero_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.hero_damage_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_damage(uint32_t value) {
  _internal_set_hero_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_tower_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_tower_damage() const {
  return _internal_has_tower_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_tower_damage() {
  _impl_.tower_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_tower_damage() const {
  return _impl_.tower_damage_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
  return _internal_tower_damage();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_tower_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.tower_damage_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_tower_damage(uint32_t value) {
  _internal_set_tower_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
}

// repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int CMsgDOTARealtimeGameStats_PlayerDetails::abilities_size() const {
  return _internal_abilities_size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return &_impl_.abilities_;
}
inline const ::CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_PlayerDetails::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_PlayerDetails::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return _internal_abilities(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_abilities() {
  ::CMsgDOTARealtimeGameStats_AbilityDetails* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return _impl_.abilities_;
}

// optional uint32 level = 27;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_level() const {
  return _internal_has_level();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.level)
  return _internal_level();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.level_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.level)
}

// optional uint32 kill_count = 28;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_kill_count() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_kill_count() const {
  return _internal_has_kill_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_kill_count() {
  _impl_.kill_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_kill_count() const {
  return _impl_.kill_count_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
  return _internal_kill_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_kill_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.kill_count_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_kill_count(uint32_t value) {
  _internal_set_kill_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
}

// optional uint32 death_count = 29;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_death_count() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_death_count() const {
  return _internal_has_death_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_death_count() {
  _impl_.death_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_death_count() const {
  return _impl_.death_count_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
  return _internal_death_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_death_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.death_count_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_death_count(uint32_t value) {
  _internal_set_death_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
}

// optional uint32 assists_count = 30;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_assists_count() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_assists_count() const {
  return _internal_has_assists_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_assists_count() {
  _impl_.assists_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_assists_count() const {
  return _impl_.assists_count_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
  return _internal_assists_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_assists_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.assists_count_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_assists_count(uint32_t value) {
  _internal_set_assists_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 31;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_denies_count() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_denies_count() const {
  return _internal_has_denies_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_denies_count() {
  _impl_.denies_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_denies_count() const {
  return _impl_.denies_count_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
  return _internal_denies_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_denies_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.denies_count_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_denies_count(uint32_t value) {
  _internal_set_denies_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 32;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_lh_count() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_lh_count() const {
  return _internal_has_lh_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_lh_count() {
  _impl_.lh_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_lh_count() const {
  return _impl_.lh_count_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
  return _internal_lh_count();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_lh_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.lh_count_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_lh_count(uint32_t value) {
  _internal_set_lh_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
}

// optional uint32 hero_healing = 33;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_hero_healing() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_healing() const {
  return _internal_has_hero_healing();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_healing() {
  _impl_.hero_healing_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_hero_healing() const {
  return _impl_.hero_healing_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
  return _internal_hero_healing();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_hero_healing(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.hero_healing_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_healing(uint32_t value) {
  _internal_set_hero_healing(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
}

// optional uint32 gold_per_min = 34;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_gold_per_min() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold_per_min() const {
  return _internal_has_gold_per_min();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold_per_min() {
  _impl_.gold_per_min_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_gold_per_min() const {
  return _impl_.gold_per_min_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
  return _internal_gold_per_min();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_gold_per_min(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.gold_per_min_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold_per_min(uint32_t value) {
  _internal_set_gold_per_min(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
}

// optional uint32 xp_per_min = 35;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_xp_per_min() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_xp_per_min() const {
  return _internal_has_xp_per_min();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_xp_per_min() {
  _impl_.xp_per_min_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_xp_per_min() const {
  return _impl_.xp_per_min_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
  return _internal_xp_per_min();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_xp_per_min(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.xp_per_min_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_xp_per_min(uint32_t value) {
  _internal_set_xp_per_min(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
}

// optional uint32 net_gold = 36;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_net_gold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_net_gold() const {
  return _internal_has_net_gold();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_net_gold() {
  _impl_.net_gold_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_net_gold() const {
  return _impl_.net_gold_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::net_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
  return _internal_net_gold();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_net_gold(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.net_gold_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_net_gold(uint32_t value) {
  _internal_set_net_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
}

// optional uint32 gold = 37;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
  return _internal_gold();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.gold_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.gold)
}

// optional float x = 38;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_x() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_x() const {
  return _internal_has_x();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::_internal_x() const {
  return _impl_.x_;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.x)
  return _internal_x();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_x(float value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.x_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.x)
}

// optional float y = 39;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_y() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_y() const {
  return _internal_has_y();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::_internal_y() const {
  return _impl_.y_;
}
inline float CMsgDOTARealtimeGameStats_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.y)
  return _internal_y();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_y(float value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.y_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.y)
}

// optional int32 respawn_time = 40;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_respawn_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_respawn_time() const {
  return _internal_has_respawn_time();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_respawn_time() {
  _impl_.respawn_time_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_respawn_time() const {
  return _impl_.respawn_time_;
}
inline int32_t CMsgDOTARealtimeGameStats_PlayerDetails::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
  return _internal_respawn_time();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_respawn_time(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.respawn_time_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_respawn_time(int32_t value) {
  _internal_set_respawn_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
}

// optional uint32 ultimate_cooldown = 41;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_ultimate_cooldown() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_cooldown() const {
  return _internal_has_ultimate_cooldown();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_ultimate_cooldown() {
  _impl_.ultimate_cooldown_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::_internal_ultimate_cooldown() const {
  return _impl_.ultimate_cooldown_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PlayerDetails::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
  return _internal_ultimate_cooldown();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_ultimate_cooldown(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.ultimate_cooldown_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_ultimate_cooldown(uint32_t value) {
  _internal_set_ultimate_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
}

// optional bool has_buyback = 42;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_has_buyback() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_buyback() const {
  return _internal_has_has_buyback();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_buyback() {
  _impl_.has_buyback_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_buyback() const {
  return _impl_.has_buyback_;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_buyback() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
  return _internal_has_buyback();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_has_buyback(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.has_buyback_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_buyback(bool value) {
  _internal_set_has_buyback(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgDOTARealtimeGameStats_PlayerDetails::items_size() const {
  return _internal_items_size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_items() {
  _impl_.items_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return &_impl_.items_;
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return _internal_items(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_items() {
  ::CMsgDOTARealtimeGameStats_ItemDetails* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::items() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return _impl_.items_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::_internal_stashitems_size() const {
  return _impl_.stashitems_.size();
}
inline int CMsgDOTARealtimeGameStats_PlayerDetails::stashitems_size() const {
  return _internal_stashitems_size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_stashitems() {
  _impl_.stashitems_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return _impl_.stashitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return &_impl_.stashitems_;
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::_internal_stashitems(int index) const {
  return _impl_.stashitems_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::stashitems(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return _internal_stashitems(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::_internal_add_stashitems() {
  return _impl_.stashitems_.Add();
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_stashitems() {
  ::CMsgDOTARealtimeGameStats_ItemDetails* _add = _internal_add_stashitems();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::stashitems() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return _impl_.stashitems_;
}

// repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::_internal_itemshoppinglist_size() const {
  return _impl_.itemshoppinglist_.size();
}
inline int CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist_size() const {
  return _internal_itemshoppinglist_size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_itemshoppinglist() {
  _impl_.itemshoppinglist_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return _impl_.itemshoppinglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return &_impl_.itemshoppinglist_;
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::_internal_itemshoppinglist(int index) const {
  return _impl_.itemshoppinglist_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return _internal_itemshoppinglist(index);
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::_internal_add_itemshoppinglist() {
  return _impl_.itemshoppinglist_.Add();
}
inline ::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_itemshoppinglist() {
  ::CMsgDOTARealtimeGameStats_ItemDetails* _add = _internal_add_itemshoppinglist();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return _impl_.itemshoppinglist_;
}

// repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::_internal_levelpoints_size() const {
  return _impl_.levelpoints_.size();
}
inline int CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints_size() const {
  return _internal_levelpoints_size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_levelpoints() {
  _impl_.levelpoints_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return _impl_.levelpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return &_impl_.levelpoints_;
}
inline const ::CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_PlayerDetails::_internal_levelpoints(int index) const {
  return _impl_.levelpoints_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return _internal_levelpoints(index);
}
inline ::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::_internal_add_levelpoints() {
  return _impl_.levelpoints_.Add();
}
inline ::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::add_levelpoints() {
  ::CMsgDOTARealtimeGameStats_AbilityList* _add = _internal_add_levelpoints();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_AbilityList >&
CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return _impl_.levelpoints_;
}

// repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
inline int CMsgDOTARealtimeGameStats_PlayerDetails::_internal_hero_to_hero_stats_size() const {
  return _impl_.hero_to_hero_stats_.size();
}
inline int CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats_size() const {
  return _internal_hero_to_hero_stats_size();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_to_hero_stats() {
  _impl_.hero_to_hero_stats_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return _impl_.hero_to_hero_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return &_impl_.hero_to_hero_stats_;
}
inline const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_PlayerDetails::_internal_hero_to_hero_stats(int index) const {
  return _impl_.hero_to_hero_stats_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return _internal_hero_to_hero_stats(index);
}
inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::_internal_add_hero_to_hero_stats() {
  return _impl_.hero_to_hero_stats_.Add();
}
inline ::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::add_hero_to_hero_stats() {
  ::CMsgDOTARealtimeGameStats_HeroToHeroStats* _add = _internal_add_hero_to_hero_stats();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return _impl_.hero_to_hero_stats_;
}

// optional bool has_ultimate = 48;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_has_ultimate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate() const {
  return _internal_has_has_ultimate();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate() {
  _impl_.has_ultimate_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_ultimate() const {
  return _impl_.has_ultimate_;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
  return _internal_has_ultimate();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_has_ultimate(bool value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.has_ultimate_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate(bool value) {
  _internal_set_has_ultimate(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
}

// optional bool has_ultimate_mana = 49;
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_has_ultimate_mana() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate_mana() const {
  return _internal_has_has_ultimate_mana();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_mana() {
  _impl_.has_ultimate_mana_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::_internal_has_ultimate_mana() const {
  return _impl_.has_ultimate_mana_;
}
inline bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_mana() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
  return _internal_has_ultimate_mana();
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::_internal_set_has_ultimate_mana(bool value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.has_ultimate_mana_ = value;
}
inline void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_mana(bool value) {
  _internal_set_has_ultimate_mana(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BuildingDetails

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.team)
  return _internal_team();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.team)
}

// optional float heading = 3;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_heading() const {
  return _internal_has_heading();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::_internal_heading() const {
  return _impl_.heading_;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
  return _internal_heading();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_heading(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.heading_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.heading)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
  return _internal_lane();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lane_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_tier() const {
  return _internal_has_tier();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_tier() {
  _impl_.tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::_internal_tier() const {
  return _impl_.tier_;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
  return _internal_tier();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tier_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_tier(uint32_t value) {
  _internal_set_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.tier)
}

// optional uint32 type = 6;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_type() const {
  return _internal_has_type();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t CMsgDOTARealtimeGameStats_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.type)
  return _internal_type();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.type)
}

// optional float x = 7;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_x() const {
  return _internal_has_x();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::_internal_x() const {
  return _impl_.x_;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.x)
  return _internal_x();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.x_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.x)
}

// optional float y = 8;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_y() const {
  return _internal_has_y();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::_internal_y() const {
  return _impl_.y_;
}
inline float CMsgDOTARealtimeGameStats_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.y)
  return _internal_y();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.y_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.y)
}

// optional bool destroyed = 9;
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_has_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::has_destroyed() const {
  return _internal_has_destroyed();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::clear_destroyed() {
  _impl_.destroyed_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::_internal_destroyed() const {
  return _impl_.destroyed_;
}
inline bool CMsgDOTARealtimeGameStats_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
  return _internal_destroyed();
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::_internal_set_destroyed(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.destroyed_ = value;
}
inline void CMsgDOTARealtimeGameStats_BuildingDetails::set_destroyed(bool value) {
  _internal_set_destroyed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_KillDetails

// optional int32 player_id = 1 [default = -1];
inline bool CMsgDOTARealtimeGameStats_KillDetails::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDOTARealtimeGameStats_KillDetails::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgDOTARealtimeGameStats_KillDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.player_id)
  return _internal_player_id();
}
inline void CMsgDOTARealtimeGameStats_KillDetails::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.player_id)
}

// optional int32 death_time = 2;
inline bool CMsgDOTARealtimeGameStats_KillDetails::_internal_has_death_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_death_time() const {
  return _internal_has_death_time();
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_death_time() {
  _impl_.death_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgDOTARealtimeGameStats_KillDetails::_internal_death_time() const {
  return _impl_.death_time_;
}
inline int32_t CMsgDOTARealtimeGameStats_KillDetails::death_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.death_time)
  return _internal_death_time();
}
inline void CMsgDOTARealtimeGameStats_KillDetails::_internal_set_death_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.death_time_ = value;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_death_time(int32_t value) {
  _internal_set_death_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.death_time)
}

// optional int32 killer_player_id = 3 [default = -1];
inline bool CMsgDOTARealtimeGameStats_KillDetails::_internal_has_killer_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_KillDetails::has_killer_player_id() const {
  return _internal_has_killer_player_id();
}
inline void CMsgDOTARealtimeGameStats_KillDetails::clear_killer_player_id() {
  _impl_.killer_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgDOTARealtimeGameStats_KillDetails::_internal_killer_player_id() const {
  return _impl_.killer_player_id_;
}
inline int32_t CMsgDOTARealtimeGameStats_KillDetails::killer_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
  return _internal_killer_player_id();
}
inline void CMsgDOTARealtimeGameStats_KillDetails::_internal_set_killer_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.killer_player_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_KillDetails::set_killer_player_id(int32_t value) {
  _internal_set_killer_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_BroadcasterDetails

// optional int32 player_id = 1 [default = -1];
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgDOTARealtimeGameStats_BroadcasterDetails::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgDOTARealtimeGameStats_BroadcasterDetails::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
  return _internal_player_id();
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_PickBanDetails

// optional uint32 hero = 1;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::_internal_has_hero() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_hero() const {
  return _internal_has_hero();
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_hero() {
  _impl_.hero_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PickBanDetails::_internal_hero() const {
  return _impl_.hero_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
  return _internal_hero();
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::_internal_set_hero(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_ = value;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_hero(uint32_t value) {
  _internal_set_hero(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.hero)
}

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_PickBanDetails::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARealtimeGameStats_PickBanDetails::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgDOTARealtimeGameStats_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.PickBanDetails.team)
  return _internal_team();
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_ = value;
}
inline void CMsgDOTARealtimeGameStats_PickBanDetails::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.PickBanDetails.team)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CMsgDOTARealtimeGameStats_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_steam_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
}

// optional uint64 match_id = 2;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTARealtimeGameStats_MatchDetails::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.match_id)
  return _internal_match_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.match_id)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
}

// optional float time_of_day = 4;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_time_of_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_time_of_day() const {
  return _internal_has_time_of_day();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_time_of_day() {
  _impl_.time_of_day_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTARealtimeGameStats_MatchDetails::_internal_time_of_day() const {
  return _impl_.time_of_day_;
}
inline float CMsgDOTARealtimeGameStats_MatchDetails::time_of_day() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
  return _internal_time_of_day();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_time_of_day(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_of_day_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_time_of_day(float value) {
  _internal_set_time_of_day(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
}

// optional bool is_nightstalker_night = 5;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_is_nightstalker_night() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_is_nightstalker_night() const {
  return _internal_has_is_nightstalker_night();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_is_nightstalker_night() {
  _impl_.is_nightstalker_night_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_is_nightstalker_night() const {
  return _impl_.is_nightstalker_night_;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::is_nightstalker_night() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
  return _internal_is_nightstalker_night();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_is_nightstalker_night(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_nightstalker_night_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_is_nightstalker_night(bool value) {
  _internal_set_is_nightstalker_night(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
}

// optional int32 game_time = 6;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_game_time() const {
  return _impl_.game_time_;
}
inline int32_t CMsgDOTARealtimeGameStats_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
  return _internal_game_time();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_game_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.game_time_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_time(int32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_time)
}

// optional uint32 game_state = 19;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_state() {
  _impl_.game_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_game_state() const {
  return _impl_.game_state_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_state)
  return _internal_game_state();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_game_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.game_state_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_state(uint32_t value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_state)
}

// optional uint32 teamid_radiant = 8;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_teamid_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_radiant() const {
  return _internal_has_teamid_radiant();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_radiant() {
  _impl_.teamid_radiant_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_teamid_radiant() const {
  return _impl_.teamid_radiant_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::teamid_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
  return _internal_teamid_radiant();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_teamid_radiant(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.teamid_radiant_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_radiant(uint32_t value) {
  _internal_set_teamid_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
}

// optional uint32 teamid_dire = 9;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_teamid_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_dire() const {
  return _internal_has_teamid_dire();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_dire() {
  _impl_.teamid_dire_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_teamid_dire() const {
  return _impl_.teamid_dire_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::teamid_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
  return _internal_teamid_dire();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_teamid_dire(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.teamid_dire_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_dire(uint32_t value) {
  _internal_set_teamid_dire(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
inline int CMsgDOTARealtimeGameStats_MatchDetails::_internal_picks_size() const {
  return _impl_.picks_.size();
}
inline int CMsgDOTARealtimeGameStats_MatchDetails::picks_size() const {
  return _internal_picks_size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_picks() {
  _impl_.picks_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return _impl_.picks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return &_impl_.picks_;
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::_internal_picks(int index) const {
  return _impl_.picks_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return _internal_picks(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::_internal_add_picks() {
  return _impl_.picks_.Add();
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_picks() {
  ::CMsgDOTARealtimeGameStats_PickBanDetails* _add = _internal_add_picks();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return _impl_.picks_;
}

// repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
inline int CMsgDOTARealtimeGameStats_MatchDetails::_internal_bans_size() const {
  return _impl_.bans_.size();
}
inline int CMsgDOTARealtimeGameStats_MatchDetails::bans_size() const {
  return _internal_bans_size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_bans() {
  _impl_.bans_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return _impl_.bans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return &_impl_.bans_;
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::_internal_bans(int index) const {
  return _impl_.bans_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return _internal_bans(index);
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::_internal_add_bans() {
  return _impl_.bans_.Add();
}
inline ::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_bans() {
  ::CMsgDOTARealtimeGameStats_PickBanDetails* _add = _internal_add_bans();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return _impl_.bans_;
}

// repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
inline int CMsgDOTARealtimeGameStats_MatchDetails::_internal_kills_size() const {
  return _impl_.kills_.size();
}
inline int CMsgDOTARealtimeGameStats_MatchDetails::kills_size() const {
  return _internal_kills_size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_kills() {
  _impl_.kills_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return _impl_.kills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return &_impl_.kills_;
}
inline const ::CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_MatchDetails::_internal_kills(int index) const {
  return _impl_.kills_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_MatchDetails::kills(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return _internal_kills(index);
}
inline ::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::_internal_add_kills() {
  return _impl_.kills_.Add();
}
inline ::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_kills() {
  ::CMsgDOTARealtimeGameStats_KillDetails* _add = _internal_add_kills();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_KillDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::kills() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return _impl_.kills_;
}

// repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
inline int CMsgDOTARealtimeGameStats_MatchDetails::_internal_broadcasters_size() const {
  return _impl_.broadcasters_.size();
}
inline int CMsgDOTARealtimeGameStats_MatchDetails::broadcasters_size() const {
  return _internal_broadcasters_size();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_broadcasters() {
  _impl_.broadcasters_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return _impl_.broadcasters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return &_impl_.broadcasters_;
}
inline const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_MatchDetails::_internal_broadcasters(int index) const {
  return _impl_.broadcasters_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_MatchDetails::broadcasters(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return _internal_broadcasters(index);
}
inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::_internal_add_broadcasters() {
  return _impl_.broadcasters_.Add();
}
inline ::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_broadcasters() {
  ::CMsgDOTARealtimeGameStats_BroadcasterDetails* _add = _internal_add_broadcasters();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::broadcasters() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return _impl_.broadcasters_;
}

// optional uint32 game_mode = 14;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
  return _internal_game_mode();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.game_mode_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
}

// optional uint32 league_id = 15;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
  return _internal_league_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.league_id)
}

// optional uint32 league_node_id = 18;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_league_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_node_id() const {
  return _internal_has_league_node_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_node_id() {
  _impl_.league_node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_league_node_id() const {
  return _impl_.league_node_id_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::league_node_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.league_node_id)
  return _internal_league_node_id();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_league_node_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.league_node_id_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_league_node_id(uint32_t value) {
  _internal_set_league_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.league_node_id)
}

// optional bool single_team = 16;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_single_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_single_team() const {
  return _internal_has_single_team();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_single_team() {
  _impl_.single_team_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_single_team() const {
  return _impl_.single_team_;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::single_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
  return _internal_single_team();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_single_team(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.single_team_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_single_team(bool value) {
  _internal_set_single_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.single_team)
}

// optional uint32 cheers_peak = 17;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_cheers_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_cheers_peak() const {
  return _internal_has_cheers_peak();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_cheers_peak() {
  _impl_.cheers_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_cheers_peak() const {
  return _impl_.cheers_peak_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::cheers_peak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
  return _internal_cheers_peak();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_cheers_peak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.cheers_peak_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_cheers_peak(uint32_t value) {
  _internal_set_cheers_peak(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
}

// optional uint32 lobby_type = 20;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.lobby_type_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.lobby_type)
}

// optional uint32 start_timestamp = 21;
inline bool CMsgDOTARealtimeGameStats_MatchDetails::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats_MatchDetails::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgDOTARealtimeGameStats_MatchDetails::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.MatchDetails.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgDOTARealtimeGameStats_MatchDetails::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.MatchDetails.start_timestamp)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_LocationStats

// repeated int32 stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_LocationStats::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats_size() const {
  return _internal_stats_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::clear_stats() {
  _impl_.stats_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData_LocationStats::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return _internal_stats(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::set_stats(int index, int32_t value) {
  _impl_.stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::_internal_add_stats(int32_t value) {
  _impl_.stats_.Add(value);
}
inline void CMsgDOTARealtimeGameStats_GraphData_LocationStats::add_stats(int32_t value) {
  _internal_add_stats(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData_LocationStats::_internal_stats() const {
  return _impl_.stats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return _internal_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData_LocationStats::_internal_mutable_stats() {
  return &_impl_.stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData_LocationStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return _internal_mutable_stats();
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats

// repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
inline int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_internal_loc_stats_size() const {
  return _impl_.loc_stats_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats_size() const {
  return _internal_loc_stats_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::clear_loc_stats() {
  _impl_.loc_stats_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return _impl_.loc_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return &_impl_.loc_stats_;
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_internal_loc_stats(int index) const {
  return _impl_.loc_stats_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return _internal_loc_stats(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_internal_add_loc_stats() {
  return _impl_.loc_stats_.Add();
}
inline ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::add_loc_stats() {
  ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* _add = _internal_add_loc_stats();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return _impl_.loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStats_GraphData::_internal_graph_gold_size() const {
  return _impl_.graph_gold_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData::graph_gold_size() const {
  return _internal_graph_gold_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_gold() {
  _impl_.graph_gold_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::_internal_graph_gold(int index) const {
  return _impl_.graph_gold_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return _internal_graph_gold(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_gold(int index, int32_t value) {
  _impl_.graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStats_GraphData::_internal_add_graph_gold(int32_t value) {
  _impl_.graph_gold_.Add(value);
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_gold(int32_t value) {
  _internal_add_graph_gold(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::_internal_graph_gold() const {
  return _impl_.graph_gold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return _internal_graph_gold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::_internal_mutable_graph_gold() {
  return &_impl_.graph_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return _internal_mutable_graph_gold();
}

// repeated int32 graph_xp = 2;
inline int CMsgDOTARealtimeGameStats_GraphData::_internal_graph_xp_size() const {
  return _impl_.graph_xp_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData::graph_xp_size() const {
  return _internal_graph_xp_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_xp() {
  _impl_.graph_xp_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::_internal_graph_xp(int index) const {
  return _impl_.graph_xp_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::graph_xp(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return _internal_graph_xp(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_xp(int index, int32_t value) {
  _impl_.graph_xp_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline void CMsgDOTARealtimeGameStats_GraphData::_internal_add_graph_xp(int32_t value) {
  _impl_.graph_xp_.Add(value);
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_xp(int32_t value) {
  _internal_add_graph_xp(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::_internal_graph_xp() const {
  return _impl_.graph_xp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::graph_xp() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return _internal_graph_xp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::_internal_mutable_graph_xp() {
  return &_impl_.graph_xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_xp() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return _internal_mutable_graph_xp();
}

// repeated int32 graph_kill = 3;
inline int CMsgDOTARealtimeGameStats_GraphData::_internal_graph_kill_size() const {
  return _impl_.graph_kill_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData::graph_kill_size() const {
  return _internal_graph_kill_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_kill() {
  _impl_.graph_kill_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::_internal_graph_kill(int index) const {
  return _impl_.graph_kill_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::graph_kill(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return _internal_graph_kill(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_kill(int index, int32_t value) {
  _impl_.graph_kill_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline void CMsgDOTARealtimeGameStats_GraphData::_internal_add_graph_kill(int32_t value) {
  _impl_.graph_kill_.Add(value);
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_kill(int32_t value) {
  _internal_add_graph_kill(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::_internal_graph_kill() const {
  return _impl_.graph_kill_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::graph_kill() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return _internal_graph_kill();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::_internal_mutable_graph_kill() {
  return &_impl_.graph_kill_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_kill() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return _internal_mutable_graph_kill();
}

// repeated int32 graph_tower = 4;
inline int CMsgDOTARealtimeGameStats_GraphData::_internal_graph_tower_size() const {
  return _impl_.graph_tower_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData::graph_tower_size() const {
  return _internal_graph_tower_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_tower() {
  _impl_.graph_tower_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::_internal_graph_tower(int index) const {
  return _impl_.graph_tower_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::graph_tower(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return _internal_graph_tower(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_tower(int index, int32_t value) {
  _impl_.graph_tower_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline void CMsgDOTARealtimeGameStats_GraphData::_internal_add_graph_tower(int32_t value) {
  _impl_.graph_tower_.Add(value);
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_tower(int32_t value) {
  _internal_add_graph_tower(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::_internal_graph_tower() const {
  return _impl_.graph_tower_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::graph_tower() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return _internal_graph_tower();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::_internal_mutable_graph_tower() {
  return &_impl_.graph_tower_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_tower() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return _internal_mutable_graph_tower();
}

// repeated int32 graph_rax = 5;
inline int CMsgDOTARealtimeGameStats_GraphData::_internal_graph_rax_size() const {
  return _impl_.graph_rax_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData::graph_rax_size() const {
  return _internal_graph_rax_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_graph_rax() {
  _impl_.graph_rax_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::_internal_graph_rax(int index) const {
  return _impl_.graph_rax_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStats_GraphData::graph_rax(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return _internal_graph_rax(index);
}
inline void CMsgDOTARealtimeGameStats_GraphData::set_graph_rax(int index, int32_t value) {
  _impl_.graph_rax_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline void CMsgDOTARealtimeGameStats_GraphData::_internal_add_graph_rax(int32_t value) {
  _impl_.graph_rax_.Add(value);
}
inline void CMsgDOTARealtimeGameStats_GraphData::add_graph_rax(int32_t value) {
  _internal_add_graph_rax(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::_internal_graph_rax() const {
  return _impl_.graph_rax_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStats_GraphData::graph_rax() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return _internal_graph_rax();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::_internal_mutable_graph_rax() {
  return &_impl_.graph_rax_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_rax() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return _internal_mutable_graph_rax();
}

// repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
inline int CMsgDOTARealtimeGameStats_GraphData::_internal_team_loc_stats_size() const {
  return _impl_.team_loc_stats_.size();
}
inline int CMsgDOTARealtimeGameStats_GraphData::team_loc_stats_size() const {
  return _internal_team_loc_stats_size();
}
inline void CMsgDOTARealtimeGameStats_GraphData::clear_team_loc_stats() {
  _impl_.team_loc_stats_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return _impl_.team_loc_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return &_impl_.team_loc_stats_;
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData::_internal_team_loc_stats(int index) const {
  return _impl_.team_loc_stats_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData::team_loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return _internal_team_loc_stats(index);
}
inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::_internal_add_team_loc_stats() {
  return _impl_.team_loc_stats_.Add();
}
inline ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::add_team_loc_stats() {
  ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* _add = _internal_add_team_loc_stats();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
CMsgDOTARealtimeGameStats_GraphData::team_loc_stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return _impl_.team_loc_stats_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStats

// optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStats::_internal_has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_ != nullptr);
  return value;
}
inline bool CMsgDOTARealtimeGameStats::has_match() const {
  return _internal_has_match();
}
inline void CMsgDOTARealtimeGameStats::clear_match() {
  if (_impl_.match_ != nullptr) _impl_.match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats::_internal_match() const {
  const ::CMsgDOTARealtimeGameStats_MatchDetails* p = _impl_.match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTARealtimeGameStats_MatchDetails&>(
      ::_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_);
}
inline const ::CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.match)
  return _internal_match();
}
inline void CMsgDOTARealtimeGameStats::unsafe_arena_set_allocated_match(
    ::CMsgDOTARealtimeGameStats_MatchDetails* match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_);
  }
  _impl_.match_ = match;
  if (match) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTARealtimeGameStats.match)
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::release_match() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTARealtimeGameStats_MatchDetails* temp = _impl_.match_;
  _impl_.match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.match)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTARealtimeGameStats_MatchDetails* temp = _impl_.match_;
  _impl_.match_ = nullptr;
  return temp;
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::_internal_mutable_match() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTARealtimeGameStats_MatchDetails>(GetArenaForAllocation());
    _impl_.match_ = p;
  }
  return _impl_.match_;
}
inline ::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::mutable_match() {
  ::CMsgDOTARealtimeGameStats_MatchDetails* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.match)
  return _msg;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_match(::CMsgDOTARealtimeGameStats_MatchDetails* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.match_;
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match);
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_ = match;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.match)
}

// repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStats::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int CMsgDOTARealtimeGameStats::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgDOTARealtimeGameStats::clear_teams() {
  _impl_.teams_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >*
CMsgDOTARealtimeGameStats::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.teams)
  return &_impl_.teams_;
}
inline const ::CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.teams)
  return _internal_teams(index);
}
inline ::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::add_teams() {
  ::CMsgDOTARealtimeGameStats_TeamDetails* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_TeamDetails >&
CMsgDOTARealtimeGameStats::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.teams)
  return _impl_.teams_;
}

// repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStats::_internal_buildings_size() const {
  return _impl_.buildings_.size();
}
inline int CMsgDOTARealtimeGameStats::buildings_size() const {
  return _internal_buildings_size();
}
inline void CMsgDOTARealtimeGameStats::clear_buildings() {
  _impl_.buildings_.Clear();
}
inline ::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.buildings)
  return _impl_.buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >*
CMsgDOTARealtimeGameStats::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStats.buildings)
  return &_impl_.buildings_;
}
inline const ::CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats::_internal_buildings(int index) const {
  return _impl_.buildings_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.buildings)
  return _internal_buildings(index);
}
inline ::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::_internal_add_buildings() {
  return _impl_.buildings_.Add();
}
inline ::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::add_buildings() {
  ::CMsgDOTARealtimeGameStats_BuildingDetails* _add = _internal_add_buildings();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStats.buildings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStats_BuildingDetails >&
CMsgDOTARealtimeGameStats::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStats.buildings)
  return _impl_.buildings_;
}

// optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStats::_internal_has_graph_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.graph_data_ != nullptr);
  return value;
}
inline bool CMsgDOTARealtimeGameStats::has_graph_data() const {
  return _internal_has_graph_data();
}
inline void CMsgDOTARealtimeGameStats::clear_graph_data() {
  if (_impl_.graph_data_ != nullptr) _impl_.graph_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats::_internal_graph_data() const {
  const ::CMsgDOTARealtimeGameStats_GraphData* p = _impl_.graph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTARealtimeGameStats_GraphData&>(
      ::_CMsgDOTARealtimeGameStats_GraphData_default_instance_);
}
inline const ::CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.graph_data)
  return _internal_graph_data();
}
inline void CMsgDOTARealtimeGameStats::unsafe_arena_set_allocated_graph_data(
    ::CMsgDOTARealtimeGameStats_GraphData* graph_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_data_);
  }
  _impl_.graph_data_ = graph_data;
  if (graph_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTARealtimeGameStats.graph_data)
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::release_graph_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTARealtimeGameStats_GraphData* temp = _impl_.graph_data_;
  _impl_.graph_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::unsafe_arena_release_graph_data() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStats.graph_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTARealtimeGameStats_GraphData* temp = _impl_.graph_data_;
  _impl_.graph_data_ = nullptr;
  return temp;
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::_internal_mutable_graph_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.graph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTARealtimeGameStats_GraphData>(GetArenaForAllocation());
    _impl_.graph_data_ = p;
  }
  return _impl_.graph_data_;
}
inline ::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::mutable_graph_data() {
  ::CMsgDOTARealtimeGameStats_GraphData* _msg = _internal_mutable_graph_data();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStats.graph_data)
  return _msg;
}
inline void CMsgDOTARealtimeGameStats::set_allocated_graph_data(::CMsgDOTARealtimeGameStats_GraphData* graph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.graph_data_;
  }
  if (graph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph_data);
    if (message_arena != submessage_arena) {
      graph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.graph_data_ = graph_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStats.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStats::_internal_has_delta_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStats::has_delta_frame() const {
  return _internal_has_delta_frame();
}
inline void CMsgDOTARealtimeGameStats::clear_delta_frame() {
  _impl_.delta_frame_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTARealtimeGameStats::_internal_delta_frame() const {
  return _impl_.delta_frame_;
}
inline bool CMsgDOTARealtimeGameStats::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStats.delta_frame)
  return _internal_delta_frame();
}
inline void CMsgDOTARealtimeGameStats::_internal_set_delta_frame(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delta_frame_ = value;
}
inline void CMsgDOTARealtimeGameStats::set_delta_frame(bool value) {
  _internal_set_delta_frame(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStats.delta_frame)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_TeamDetails

// optional uint32 team_number = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_team_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_number() const {
  return _internal_has_team_number();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_number() {
  _impl_.team_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_team_number() const {
  return _impl_.team_number_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
  return _internal_team_number();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_team_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_number_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_number(uint32_t value) {
  _internal_set_team_number(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
  return _internal_team_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
}

// optional string team_name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}

// optional string team_tag = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_team_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_tag() {
  _impl_.team_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
  return _internal_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_tag() {
  std::string* _s = _internal_mutable_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_team_tag() const {
  return _impl_.team_tag_.Get();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_team_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_mutable_team_tag() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_tag_.SetAllocated(team_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag)
}

// optional fixed64 team_logo = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo() const {
  return _internal_has_team_logo();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo() {
  _impl_.team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_team_logo() const {
  return _impl_.team_logo_;
}
inline uint64_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
  return _internal_team_logo();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_logo_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo(uint64_t value) {
  _internal_set_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
}

// optional uint32 score = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_score() {
  _impl_.score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
  return _internal_score();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.score_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
}

// optional uint32 net_worth = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.net_worth)
  return _internal_net_worth();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.net_worth_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.net_worth)
}

// optional string team_logo_url = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_has_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo_url() const {
  return _internal_has_team_logo_url();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo_url() {
  _impl_.team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
  return _internal_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_logo_url() {
  std::string* _s = _internal_mutable_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_team_logo_url() const {
  return _impl_.team_logo_url_.Get();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_set_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_mutable_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
  if (!_internal_has_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_logo_url(std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.team_logo_url_.SetAllocated(team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
inline int CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse_TeamDetails::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return &_impl_.players_;
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return _internal_players(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::add_players() {
  ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
CMsgDOTARealtimeGameStatsTerse_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_PlayerDetails

// optional uint32 accountid = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_accountid() {
  _impl_.accountid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
  return _internal_accountid();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_accountid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.accountid_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
}

// optional int32 playerid = 2 [default = -1];
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_playerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_playerid() const {
  return _internal_has_playerid();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_playerid() {
  _impl_.playerid_ = -1;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
  return _internal_playerid();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_playerid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.playerid_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
}

// optional string name = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return _s;
}
inline const std::string& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}

// optional uint32 team = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
  return _internal_team();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
}

// optional uint32 heroid = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_heroid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_heroid() const {
  return _internal_has_heroid();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_heroid() {
  _impl_.heroid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_heroid() const {
  return _impl_.heroid_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
  return _internal_heroid();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_heroid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.heroid_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_heroid(uint32_t value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
}

// optional uint32 level = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_level() const {
  return _internal_has_level();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
  return _internal_level();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
}

// optional uint32 kill_count = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_kill_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_kill_count() const {
  return _internal_has_kill_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_kill_count() {
  _impl_.kill_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_kill_count() const {
  return _impl_.kill_count_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
  return _internal_kill_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_kill_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kill_count_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_kill_count(uint32_t value) {
  _internal_set_kill_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
}

// optional uint32 death_count = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_death_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_death_count() const {
  return _internal_has_death_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_death_count() {
  _impl_.death_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_death_count() const {
  return _impl_.death_count_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
  return _internal_death_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_death_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.death_count_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_death_count(uint32_t value) {
  _internal_set_death_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
}

// optional uint32 assists_count = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_assists_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_assists_count() const {
  return _internal_has_assists_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_assists_count() {
  _impl_.assists_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_assists_count() const {
  return _impl_.assists_count_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
  return _internal_assists_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_assists_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.assists_count_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_assists_count(uint32_t value) {
  _internal_set_assists_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 10;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_denies_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_denies_count() const {
  return _internal_has_denies_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_denies_count() {
  _impl_.denies_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_denies_count() const {
  return _impl_.denies_count_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
  return _internal_denies_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_denies_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.denies_count_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_denies_count(uint32_t value) {
  _internal_set_denies_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 11;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_lh_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_lh_count() const {
  return _internal_has_lh_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_lh_count() {
  _impl_.lh_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_lh_count() const {
  return _impl_.lh_count_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
  return _internal_lh_count();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_lh_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lh_count_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_lh_count(uint32_t value) {
  _internal_set_lh_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
}

// optional uint32 gold = 12;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
  return _internal_gold();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.gold_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
}

// optional float x = 13;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_x() const {
  return _internal_has_x();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_x() const {
  return _impl_.x_;
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
  return _internal_x();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.x_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
}

// optional float y = 14;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_y() const {
  return _internal_has_y();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_y() const {
  return _impl_.y_;
}
inline float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
  return _internal_y();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.y_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
}

// optional uint32 net_worth = 15;
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.net_worth)
  return _internal_net_worth();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.net_worth_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.net_worth)
}

// repeated int32 abilities = 16;
inline int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::abilities_size() const {
  return _internal_abilities_size();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.abilities)
  return _internal_abilities(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_abilities(int index, int32_t value) {
  _impl_.abilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.abilities)
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_add_abilities(int32_t value) {
  _impl_.abilities_.Add(value);
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::add_abilities(int32_t value) {
  _internal_add_abilities(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.abilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_abilities() const {
  return _impl_.abilities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.abilities)
  return _internal_abilities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_mutable_abilities() {
  return &_impl_.abilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.abilities)
  return _internal_mutable_abilities();
}

// repeated int32 items = 17;
inline int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::items_size() const {
  return _internal_items_size();
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_items() {
  _impl_.items_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.items)
  return _internal_items(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_items(int index, int32_t value) {
  _impl_.items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.items)
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_add_items(int32_t value) {
  _impl_.items_.Add(value);
}
inline void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::add_items(int32_t value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_items() const {
  return _impl_.items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::items() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_internal_mutable_items() {
  return &_impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.PlayerDetails.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_BuildingDetails

// optional uint32 team = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
  return _internal_team();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
}

// optional float heading = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_heading() const {
  return _internal_has_heading();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_heading() const {
  return _impl_.heading_;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
  return _internal_heading();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_heading(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.heading_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
}

// optional uint32 type = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_type() const {
  return _internal_has_type();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
  return _internal_type();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
}

// optional uint32 lane = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
  return _internal_lane();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lane_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
}

// optional uint32 tier = 5;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_tier() const {
  return _internal_has_tier();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_tier() {
  _impl_.tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_tier() const {
  return _impl_.tier_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
  return _internal_tier();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tier_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_tier(uint32_t value) {
  _internal_set_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
}

// optional float x = 6;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_x() const {
  return _internal_has_x();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_x() const {
  return _impl_.x_;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
  return _internal_x();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.x_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
}

// optional float y = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_y() const {
  return _internal_has_y();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_y() const {
  return _impl_.y_;
}
inline float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
  return _internal_y();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.y_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
}

// optional bool destroyed = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_has_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_destroyed() const {
  return _internal_has_destroyed();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_destroyed() {
  _impl_.destroyed_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_destroyed() const {
  return _impl_.destroyed_;
}
inline bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
  return _internal_destroyed();
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_internal_set_destroyed(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.destroyed_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_destroyed(bool value) {
  _internal_set_destroyed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_PickBanDetails

// optional uint32 hero = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_internal_has_hero() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::has_hero() const {
  return _internal_has_hero();
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::clear_hero() {
  _impl_.hero_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_internal_hero() const {
  return _impl_.hero_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PickBanDetails.hero)
  return _internal_hero();
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_internal_set_hero(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::set_hero(uint32_t value) {
  _internal_set_hero(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PickBanDetails.hero)
}

// optional uint32 team = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.PickBanDetails.team)
  return _internal_team();
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.PickBanDetails.team)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_MatchDetails

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_steam_id_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
}

// optional uint64 match_id = 2;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.match_id)
  return _internal_match_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.match_id)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
}

// optional int32 game_time = 4;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_game_time() const {
  return _impl_.game_time_;
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
  return _internal_game_time();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_game_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_time_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_time(int32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
}

// repeated uint32 steam_broadcaster_account_ids = 6;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_steam_broadcaster_account_ids_size() const {
  return _impl_.steam_broadcaster_account_ids_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids_size() const {
  return _internal_steam_broadcaster_account_ids_size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_steam_broadcaster_account_ids() {
  _impl_.steam_broadcaster_account_ids_.Clear();
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_steam_broadcaster_account_ids(int index) const {
  return _impl_.steam_broadcaster_account_ids_.Get(index);
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return _internal_steam_broadcaster_account_ids(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_steam_broadcaster_account_ids(int index, uint32_t value) {
  _impl_.steam_broadcaster_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_add_steam_broadcaster_account_ids(uint32_t value) {
  _impl_.steam_broadcaster_account_ids_.Add(value);
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_steam_broadcaster_account_ids(uint32_t value) {
  _internal_add_steam_broadcaster_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_steam_broadcaster_account_ids() const {
  return _impl_.steam_broadcaster_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return _internal_steam_broadcaster_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_mutable_steam_broadcaster_account_ids() {
  return &_impl_.steam_broadcaster_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_steam_broadcaster_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return _internal_mutable_steam_broadcaster_account_ids();
}

// optional uint32 game_mode = 7;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
  return _internal_game_mode();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.game_mode_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
}

// optional uint32 league_id = 8;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
  return _internal_league_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
}

// optional uint32 league_node_id = 9;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_league_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_node_id() const {
  return _internal_has_league_node_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_node_id() {
  _impl_.league_node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_league_node_id() const {
  return _impl_.league_node_id_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_node_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_node_id)
  return _internal_league_node_id();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_league_node_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.league_node_id_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_node_id(uint32_t value) {
  _internal_set_league_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_node_id)
}

// optional uint32 game_state = 10;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_state() {
  _impl_.game_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_game_state() const {
  return _impl_.game_state_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_state)
  return _internal_game_state();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_game_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.game_state_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_state(uint32_t value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_state)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_picks_size() const {
  return _impl_.picks_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::picks_size() const {
  return _internal_picks_size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_picks() {
  _impl_.picks_.Clear();
}
inline ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return _impl_.picks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return &_impl_.picks_;
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_picks(int index) const {
  return _impl_.picks_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return _internal_picks(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_add_picks() {
  return _impl_.picks_.Add();
}
inline ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_picks() {
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* _add = _internal_add_picks();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks)
  return _impl_.picks_;
}

// repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_bans_size() const {
  return _impl_.bans_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse_MatchDetails::bans_size() const {
  return _internal_bans_size();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_bans() {
  _impl_.bans_.Clear();
}
inline ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return _impl_.bans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return &_impl_.bans_;
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_bans(int index) const {
  return _impl_.bans_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return _internal_bans(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_add_bans() {
  return _impl_.bans_.Add();
}
inline ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_bans() {
  ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* _add = _internal_add_bans();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans)
  return _impl_.bans_;
}

// optional uint32 lobby_type = 13;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lobby_type_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.lobby_type)
}

// optional uint32 start_timestamp = 14;
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.MatchDetails.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.MatchDetails.start_timestamp)
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse_GraphData

// repeated int32 graph_gold = 1;
inline int CMsgDOTARealtimeGameStatsTerse_GraphData::_internal_graph_gold_size() const {
  return _impl_.graph_gold_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold_size() const {
  return _internal_graph_gold_size();
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::clear_graph_gold() {
  _impl_.graph_gold_.Clear();
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_GraphData::_internal_graph_gold(int index) const {
  return _impl_.graph_gold_.Get(index);
}
inline int32_t CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return _internal_graph_gold(index);
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::set_graph_gold(int index, int32_t value) {
  _impl_.graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::_internal_add_graph_gold(int32_t value) {
  _impl_.graph_gold_.Add(value);
}
inline void CMsgDOTARealtimeGameStatsTerse_GraphData::add_graph_gold(int32_t value) {
  _internal_add_graph_gold(value);
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStatsTerse_GraphData::_internal_graph_gold() const {
  return _impl_.graph_gold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return _internal_graph_gold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStatsTerse_GraphData::_internal_mutable_graph_gold() {
  return &_impl_.graph_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTARealtimeGameStatsTerse_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return _internal_mutable_graph_gold();
}

// -------------------------------------------------------------------

// CMsgDOTARealtimeGameStatsTerse

// optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
inline bool CMsgDOTARealtimeGameStatsTerse::_internal_has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_ != nullptr);
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse::has_match() const {
  return _internal_has_match();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_match() {
  if (_impl_.match_ != nullptr) _impl_.match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse::_internal_match() const {
  const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* p = _impl_.match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails&>(
      ::_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_);
}
inline const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.match)
  return _internal_match();
}
inline void CMsgDOTARealtimeGameStatsTerse::unsafe_arena_set_allocated_match(
    ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_);
  }
  _impl_.match_ = match;
  if (match) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTARealtimeGameStatsTerse.match)
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::release_match() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* temp = _impl_.match_;
  _impl_.match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStatsTerse.match)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* temp = _impl_.match_;
  _impl_.match_ = nullptr;
  return temp;
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::_internal_mutable_match() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_MatchDetails>(GetArenaForAllocation());
    _impl_.match_ = p;
  }
  return _impl_.match_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::mutable_match() {
  ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.match)
  return _msg;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_match(::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.match_;
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match);
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_ = match;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.match)
}

// repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
inline int CMsgDOTARealtimeGameStatsTerse::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_teams() {
  _impl_.teams_.Clear();
}
inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return &_impl_.teams_;
}
inline const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.teams)
  return _internal_teams(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::add_teams() {
  ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
CMsgDOTARealtimeGameStatsTerse::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.teams)
  return _impl_.teams_;
}

// repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
inline int CMsgDOTARealtimeGameStatsTerse::_internal_buildings_size() const {
  return _impl_.buildings_.size();
}
inline int CMsgDOTARealtimeGameStatsTerse::buildings_size() const {
  return _internal_buildings_size();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_buildings() {
  _impl_.buildings_.Clear();
}
inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.buildings)
  return _impl_.buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return &_impl_.buildings_;
}
inline const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse::_internal_buildings(int index) const {
  return _impl_.buildings_.Get(index);
}
inline const ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse::buildings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.buildings)
  return _internal_buildings(index);
}
inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::_internal_add_buildings() {
  return _impl_.buildings_.Add();
}
inline ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::add_buildings() {
  ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* _add = _internal_add_buildings();
  // @@protoc_insertion_point(field_add:CMsgDOTARealtimeGameStatsTerse.buildings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
CMsgDOTARealtimeGameStatsTerse::buildings() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARealtimeGameStatsTerse.buildings)
  return _impl_.buildings_;
}

// optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
inline bool CMsgDOTARealtimeGameStatsTerse::_internal_has_graph_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.graph_data_ != nullptr);
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse::has_graph_data() const {
  return _internal_has_graph_data();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_graph_data() {
  if (_impl_.graph_data_ != nullptr) _impl_.graph_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse::_internal_graph_data() const {
  const ::CMsgDOTARealtimeGameStatsTerse_GraphData* p = _impl_.graph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTARealtimeGameStatsTerse_GraphData&>(
      ::_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_);
}
inline const ::CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse::graph_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return _internal_graph_data();
}
inline void CMsgDOTARealtimeGameStatsTerse::unsafe_arena_set_allocated_graph_data(
    ::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_data_);
  }
  _impl_.graph_data_ = graph_data;
  if (graph_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTARealtimeGameStatsTerse.graph_data)
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::release_graph_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* temp = _impl_.graph_data_;
  _impl_.graph_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::unsafe_arena_release_graph_data() {
  // @@protoc_insertion_point(field_release:CMsgDOTARealtimeGameStatsTerse.graph_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* temp = _impl_.graph_data_;
  _impl_.graph_data_ = nullptr;
  return temp;
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::_internal_mutable_graph_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.graph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse_GraphData>(GetArenaForAllocation());
    _impl_.graph_data_ = p;
  }
  return _impl_.graph_data_;
}
inline ::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::mutable_graph_data() {
  ::CMsgDOTARealtimeGameStatsTerse_GraphData* _msg = _internal_mutable_graph_data();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARealtimeGameStatsTerse.graph_data)
  return _msg;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_allocated_graph_data(::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.graph_data_;
  }
  if (graph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph_data);
    if (message_arena != submessage_arena) {
      graph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.graph_data_ = graph_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARealtimeGameStatsTerse.graph_data)
}

// optional bool delta_frame = 5;
inline bool CMsgDOTARealtimeGameStatsTerse::_internal_has_delta_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARealtimeGameStatsTerse::has_delta_frame() const {
  return _internal_has_delta_frame();
}
inline void CMsgDOTARealtimeGameStatsTerse::clear_delta_frame() {
  _impl_.delta_frame_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTARealtimeGameStatsTerse::_internal_delta_frame() const {
  return _impl_.delta_frame_;
}
inline bool CMsgDOTARealtimeGameStatsTerse::delta_frame() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARealtimeGameStatsTerse.delta_frame)
  return _internal_delta_frame();
}
inline void CMsgDOTARealtimeGameStatsTerse::_internal_set_delta_frame(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delta_frame_ = value;
}
inline void CMsgDOTARealtimeGameStatsTerse::set_delta_frame(bool value) {
  _internal_set_delta_frame(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARealtimeGameStatsTerse.delta_frame)
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastTimelineEvent

// optional .EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
inline bool CMsgDOTABroadcastTimelineEvent::_internal_has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTABroadcastTimelineEvent::has_event() const {
  return _internal_has_event();
}
inline void CMsgDOTABroadcastTimelineEvent::clear_event() {
  _impl_.event_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EBroadcastTimelineEvent CMsgDOTABroadcastTimelineEvent::_internal_event() const {
  return static_cast< ::EBroadcastTimelineEvent >(_impl_.event_);
}
inline ::EBroadcastTimelineEvent CMsgDOTABroadcastTimelineEvent::event() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastTimelineEvent.event)
  return _internal_event();
}
inline void CMsgDOTABroadcastTimelineEvent::_internal_set_event(::EBroadcastTimelineEvent value) {
  assert(::EBroadcastTimelineEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.event_ = value;
}
inline void CMsgDOTABroadcastTimelineEvent::set_event(::EBroadcastTimelineEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastTimelineEvent.event)
}

// optional fixed32 timestamp = 2;
inline bool CMsgDOTABroadcastTimelineEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTABroadcastTimelineEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTABroadcastTimelineEvent::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTABroadcastTimelineEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTABroadcastTimelineEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastTimelineEvent.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTABroadcastTimelineEvent::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTABroadcastTimelineEvent::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastTimelineEvent.timestamp)
}

// optional uint32 data = 3;
inline bool CMsgDOTABroadcastTimelineEvent::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTABroadcastTimelineEvent::has_data() const {
  return _internal_has_data();
}
inline void CMsgDOTABroadcastTimelineEvent::clear_data() {
  _impl_.data_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTABroadcastTimelineEvent::_internal_data() const {
  return _impl_.data_;
}
inline uint32_t CMsgDOTABroadcastTimelineEvent::data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastTimelineEvent.data)
  return _internal_data();
}
inline void CMsgDOTABroadcastTimelineEvent::_internal_set_data(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_ = value;
}
inline void CMsgDOTABroadcastTimelineEvent::set_data(uint32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastTimelineEvent.data)
}

// optional string string_data = 4;
inline bool CMsgDOTABroadcastTimelineEvent::_internal_has_string_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTABroadcastTimelineEvent::has_string_data() const {
  return _internal_has_string_data();
}
inline void CMsgDOTABroadcastTimelineEvent::clear_string_data() {
  _impl_.string_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTABroadcastTimelineEvent::string_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABroadcastTimelineEvent.string_data)
  return _internal_string_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTABroadcastTimelineEvent::set_string_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.string_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTABroadcastTimelineEvent.string_data)
}
inline std::string* CMsgDOTABroadcastTimelineEvent::mutable_string_data() {
  std::string* _s = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:CMsgDOTABroadcastTimelineEvent.string_data)
  return _s;
}
inline const std::string& CMsgDOTABroadcastTimelineEvent::_internal_string_data() const {
  return _impl_.string_data_.Get();
}
inline void CMsgDOTABroadcastTimelineEvent::_internal_set_string_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTABroadcastTimelineEvent::_internal_mutable_string_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTABroadcastTimelineEvent::release_string_data() {
  // @@protoc_insertion_point(field_release:CMsgDOTABroadcastTimelineEvent.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.string_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTABroadcastTimelineEvent::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_data_.SetAllocated(string_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_data_.IsDefault()) {
    _impl_.string_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABroadcastTimelineEvent.string_data)
}

// -------------------------------------------------------------------

// CMsgGCToClientMatchGroupsVersion

// optional uint32 matchgroups_version = 1;
inline bool CMsgGCToClientMatchGroupsVersion::_internal_has_matchgroups_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientMatchGroupsVersion::has_matchgroups_version() const {
  return _internal_has_matchgroups_version();
}
inline void CMsgGCToClientMatchGroupsVersion::clear_matchgroups_version() {
  _impl_.matchgroups_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToClientMatchGroupsVersion::_internal_matchgroups_version() const {
  return _impl_.matchgroups_version_;
}
inline uint32_t CMsgGCToClientMatchGroupsVersion::matchgroups_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientMatchGroupsVersion.matchgroups_version)
  return _internal_matchgroups_version();
}
inline void CMsgGCToClientMatchGroupsVersion::_internal_set_matchgroups_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.matchgroups_version_ = value;
}
inline void CMsgGCToClientMatchGroupsVersion::set_matchgroups_version(uint32_t value) {
  _internal_set_matchgroups_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientMatchGroupsVersion.matchgroups_version)
}

// -------------------------------------------------------------------

// CMsgDOTASDOHeroStatsHistory

// optional uint64 match_id = 1;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTASDOHeroStatsHistory::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTASDOHeroStatsHistory::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.match_id)
  return _internal_match_id();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.match_id)
}

// optional uint32 game_mode = 2;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.game_mode)
  return _internal_game_mode();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_mode_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.game_mode)
}

// optional uint32 lobby_type = 3;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lobby_type_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.lobby_type)
}

// optional uint32 start_time = 4;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_start_time() {
  _impl_.start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.start_time)
  return _internal_start_time();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_time_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.start_time)
}

// optional bool won = 5;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_won() const {
  return _internal_has_won();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_won() {
  _impl_.won_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgDOTASDOHeroStatsHistory::_internal_won() const {
  return _impl_.won_;
}
inline bool CMsgDOTASDOHeroStatsHistory::won() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.won)
  return _internal_won();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_won(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.won_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_won(bool value) {
  _internal_set_won(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.won)
}

// optional uint32 gpm = 6;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_gpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_gpm() const {
  return _internal_has_gpm();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_gpm() {
  _impl_.gpm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_gpm() const {
  return _impl_.gpm_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.gpm)
  return _internal_gpm();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_gpm(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.gpm_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_gpm(uint32_t value) {
  _internal_set_gpm(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.gpm)
}

// optional uint32 xpm = 7;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_xpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_xpm() const {
  return _internal_has_xpm();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_xpm() {
  _impl_.xpm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_xpm() const {
  return _impl_.xpm_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::xpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.xpm)
  return _internal_xpm();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_xpm(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.xpm_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_xpm(uint32_t value) {
  _internal_set_xpm(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.xpm)
}

// optional uint32 kills = 8;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.kills)
  return _internal_kills();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.kills_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.kills)
}

// optional uint32 deaths = 9;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.deaths)
  return _internal_deaths();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.deaths_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.deaths)
}

// optional uint32 assists = 10;
inline bool CMsgDOTASDOHeroStatsHistory::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTASDOHeroStatsHistory::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgDOTASDOHeroStatsHistory::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgDOTASDOHeroStatsHistory::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASDOHeroStatsHistory.assists)
  return _internal_assists();
}
inline void CMsgDOTASDOHeroStatsHistory::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.assists_ = value;
}
inline void CMsgDOTASDOHeroStatsHistory::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASDOHeroStatsHistory.assists)
}

// -------------------------------------------------------------------

// CMsgPredictionChoice

// optional uint32 value = 1;
inline bool CMsgPredictionChoice::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPredictionChoice::has_value() const {
  return _internal_has_value();
}
inline void CMsgPredictionChoice::clear_value() {
  _impl_.value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPredictionChoice::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t CMsgPredictionChoice::value() const {
  // @@protoc_insertion_point(field_get:CMsgPredictionChoice.value)
  return _internal_value();
}
inline void CMsgPredictionChoice::_internal_set_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void CMsgPredictionChoice::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CMsgPredictionChoice.value)
}

// optional string name = 2;
inline bool CMsgPredictionChoice::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPredictionChoice::has_name() const {
  return _internal_has_name();
}
inline void CMsgPredictionChoice::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPredictionChoice::name() const {
  // @@protoc_insertion_point(field_get:CMsgPredictionChoice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPredictionChoice::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPredictionChoice.name)
}
inline std::string* CMsgPredictionChoice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgPredictionChoice.name)
  return _s;
}
inline const std::string& CMsgPredictionChoice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgPredictionChoice::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgPredictionChoice::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgPredictionChoice::release_name() {
  // @@protoc_insertion_point(field_release:CMsgPredictionChoice.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgPredictionChoice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgPredictionChoice.name)
}

// optional uint32 min_raw_value = 3;
inline bool CMsgPredictionChoice::_internal_has_min_raw_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPredictionChoice::has_min_raw_value() const {
  return _internal_has_min_raw_value();
}
inline void CMsgPredictionChoice::clear_min_raw_value() {
  _impl_.min_raw_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPredictionChoice::_internal_min_raw_value() const {
  return _impl_.min_raw_value_;
}
inline uint32_t CMsgPredictionChoice::min_raw_value() const {
  // @@protoc_insertion_point(field_get:CMsgPredictionChoice.min_raw_value)
  return _internal_min_raw_value();
}
inline void CMsgPredictionChoice::_internal_set_min_raw_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_raw_value_ = value;
}
inline void CMsgPredictionChoice::set_min_raw_value(uint32_t value) {
  _internal_set_min_raw_value(value);
  // @@protoc_insertion_point(field_set:CMsgPredictionChoice.min_raw_value)
}

// optional uint32 max_raw_value = 4;
inline bool CMsgPredictionChoice::_internal_has_max_raw_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPredictionChoice::has_max_raw_value() const {
  return _internal_has_max_raw_value();
}
inline void CMsgPredictionChoice::clear_max_raw_value() {
  _impl_.max_raw_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgPredictionChoice::_internal_max_raw_value() const {
  return _impl_.max_raw_value_;
}
inline uint32_t CMsgPredictionChoice::max_raw_value() const {
  // @@protoc_insertion_point(field_get:CMsgPredictionChoice.max_raw_value)
  return _internal_max_raw_value();
}
inline void CMsgPredictionChoice::_internal_set_max_raw_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_raw_value_ = value;
}
inline void CMsgPredictionChoice::set_max_raw_value(uint32_t value) {
  _internal_set_max_raw_value(value);
  // @@protoc_insertion_point(field_set:CMsgPredictionChoice.max_raw_value)
}

// -------------------------------------------------------------------

// CMsgInGamePrediction_QueryKeyValues

// optional string name = 1;
inline bool CMsgInGamePrediction_QueryKeyValues::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgInGamePrediction_QueryKeyValues::has_name() const {
  return _internal_has_name();
}
inline void CMsgInGamePrediction_QueryKeyValues::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgInGamePrediction_QueryKeyValues::name() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.QueryKeyValues.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgInGamePrediction_QueryKeyValues::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.QueryKeyValues.name)
}
inline std::string* CMsgInGamePrediction_QueryKeyValues::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.QueryKeyValues.name)
  return _s;
}
inline const std::string& CMsgInGamePrediction_QueryKeyValues::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgInGamePrediction_QueryKeyValues::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction_QueryKeyValues::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction_QueryKeyValues::release_name() {
  // @@protoc_insertion_point(field_release:CMsgInGamePrediction.QueryKeyValues.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgInGamePrediction_QueryKeyValues::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgInGamePrediction.QueryKeyValues.name)
}

// optional string value = 2;
inline bool CMsgInGamePrediction_QueryKeyValues::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgInGamePrediction_QueryKeyValues::has_value() const {
  return _internal_has_value();
}
inline void CMsgInGamePrediction_QueryKeyValues::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgInGamePrediction_QueryKeyValues::value() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.QueryKeyValues.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgInGamePrediction_QueryKeyValues::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.QueryKeyValues.value)
}
inline std::string* CMsgInGamePrediction_QueryKeyValues::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.QueryKeyValues.value)
  return _s;
}
inline const std::string& CMsgInGamePrediction_QueryKeyValues::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CMsgInGamePrediction_QueryKeyValues::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction_QueryKeyValues::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction_QueryKeyValues::release_value() {
  // @@protoc_insertion_point(field_release:CMsgInGamePrediction.QueryKeyValues.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgInGamePrediction_QueryKeyValues::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgInGamePrediction.QueryKeyValues.value)
}

// -------------------------------------------------------------------

// CMsgInGamePrediction

// optional uint32 id = 1;
inline bool CMsgInGamePrediction::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_id() const {
  return _internal_has_id();
}
inline void CMsgInGamePrediction::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgInGamePrediction::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgInGamePrediction::id() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.id)
  return _internal_id();
}
inline void CMsgInGamePrediction::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void CMsgInGamePrediction::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.id)
}

// optional string name = 2;
inline bool CMsgInGamePrediction::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_name() const {
  return _internal_has_name();
}
inline void CMsgInGamePrediction::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgInGamePrediction::name() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgInGamePrediction::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.name)
}
inline std::string* CMsgInGamePrediction::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.name)
  return _s;
}
inline const std::string& CMsgInGamePrediction::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgInGamePrediction::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction::release_name() {
  // @@protoc_insertion_point(field_release:CMsgInGamePrediction.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgInGamePrediction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgInGamePrediction.name)
}

// optional .CMsgInGamePrediction.EPredictionType type = 3 [default = Generic];
inline bool CMsgInGamePrediction::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_type() const {
  return _internal_has_type();
}
inline void CMsgInGamePrediction::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::_internal_type() const {
  return static_cast< ::CMsgInGamePrediction_EPredictionType >(_impl_.type_);
}
inline ::CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::type() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.type)
  return _internal_type();
}
inline void CMsgInGamePrediction::_internal_set_type(::CMsgInGamePrediction_EPredictionType value) {
  assert(::CMsgInGamePrediction_EPredictionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}
inline void CMsgInGamePrediction::set_type(::CMsgInGamePrediction_EPredictionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.type)
}

// optional .CMsgInGamePrediction.ERandomSelectionGroup_t group = 4 [default = EarlyGame];
inline bool CMsgInGamePrediction::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_group() const {
  return _internal_has_group();
}
inline void CMsgInGamePrediction::clear_group() {
  _impl_.group_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::_internal_group() const {
  return static_cast< ::CMsgInGamePrediction_ERandomSelectionGroup_t >(_impl_.group_);
}
inline ::CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::group() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.group)
  return _internal_group();
}
inline void CMsgInGamePrediction::_internal_set_group(::CMsgInGamePrediction_ERandomSelectionGroup_t value) {
  assert(::CMsgInGamePrediction_ERandomSelectionGroup_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.group_ = value;
}
inline void CMsgInGamePrediction::set_group(::CMsgInGamePrediction_ERandomSelectionGroup_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.group)
}

// optional string question = 5;
inline bool CMsgInGamePrediction::_internal_has_question() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_question() const {
  return _internal_has_question();
}
inline void CMsgInGamePrediction::clear_question() {
  _impl_.question_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgInGamePrediction::question() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.question)
  return _internal_question();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgInGamePrediction::set_question(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.question_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.question)
}
inline std::string* CMsgInGamePrediction::mutable_question() {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.question)
  return _s;
}
inline const std::string& CMsgInGamePrediction::_internal_question() const {
  return _impl_.question_.Get();
}
inline void CMsgInGamePrediction::_internal_set_question(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.question_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction::_internal_mutable_question() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.question_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction::release_question() {
  // @@protoc_insertion_point(field_release:CMsgInGamePrediction.question)
  if (!_internal_has_question()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.question_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgInGamePrediction::set_allocated_question(std::string* question) {
  if (question != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.question_.SetAllocated(question, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgInGamePrediction.question)
}

// repeated .CMsgPredictionChoice choices = 6;
inline int CMsgInGamePrediction::_internal_choices_size() const {
  return _impl_.choices_.size();
}
inline int CMsgInGamePrediction::choices_size() const {
  return _internal_choices_size();
}
inline void CMsgInGamePrediction::clear_choices() {
  _impl_.choices_.Clear();
}
inline ::CMsgPredictionChoice* CMsgInGamePrediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.choices)
  return _impl_.choices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >*
CMsgInGamePrediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgInGamePrediction.choices)
  return &_impl_.choices_;
}
inline const ::CMsgPredictionChoice& CMsgInGamePrediction::_internal_choices(int index) const {
  return _impl_.choices_.Get(index);
}
inline const ::CMsgPredictionChoice& CMsgInGamePrediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.choices)
  return _internal_choices(index);
}
inline ::CMsgPredictionChoice* CMsgInGamePrediction::_internal_add_choices() {
  return _impl_.choices_.Add();
}
inline ::CMsgPredictionChoice* CMsgInGamePrediction::add_choices() {
  ::CMsgPredictionChoice* _add = _internal_add_choices();
  // @@protoc_insertion_point(field_add:CMsgInGamePrediction.choices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >&
CMsgInGamePrediction::choices() const {
  // @@protoc_insertion_point(field_list:CMsgInGamePrediction.choices)
  return _impl_.choices_;
}

// repeated string required_heroes = 7;
inline int CMsgInGamePrediction::_internal_required_heroes_size() const {
  return _impl_.required_heroes_.size();
}
inline int CMsgInGamePrediction::required_heroes_size() const {
  return _internal_required_heroes_size();
}
inline void CMsgInGamePrediction::clear_required_heroes() {
  _impl_.required_heroes_.Clear();
}
inline std::string* CMsgInGamePrediction::add_required_heroes() {
  std::string* _s = _internal_add_required_heroes();
  // @@protoc_insertion_point(field_add_mutable:CMsgInGamePrediction.required_heroes)
  return _s;
}
inline const std::string& CMsgInGamePrediction::_internal_required_heroes(int index) const {
  return _impl_.required_heroes_.Get(index);
}
inline const std::string& CMsgInGamePrediction::required_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.required_heroes)
  return _internal_required_heroes(index);
}
inline std::string* CMsgInGamePrediction::mutable_required_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.required_heroes)
  return _impl_.required_heroes_.Mutable(index);
}
inline void CMsgInGamePrediction::set_required_heroes(int index, const std::string& value) {
  _impl_.required_heroes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.required_heroes)
}
inline void CMsgInGamePrediction::set_required_heroes(int index, std::string&& value) {
  _impl_.required_heroes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.required_heroes)
}
inline void CMsgInGamePrediction::set_required_heroes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.required_heroes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgInGamePrediction.required_heroes)
}
inline void CMsgInGamePrediction::set_required_heroes(int index, const char* value, size_t size) {
  _impl_.required_heroes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgInGamePrediction.required_heroes)
}
inline std::string* CMsgInGamePrediction::_internal_add_required_heroes() {
  return _impl_.required_heroes_.Add();
}
inline void CMsgInGamePrediction::add_required_heroes(const std::string& value) {
  _impl_.required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgInGamePrediction.required_heroes)
}
inline void CMsgInGamePrediction::add_required_heroes(std::string&& value) {
  _impl_.required_heroes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgInGamePrediction.required_heroes)
}
inline void CMsgInGamePrediction::add_required_heroes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgInGamePrediction.required_heroes)
}
inline void CMsgInGamePrediction::add_required_heroes(const char* value, size_t size) {
  _impl_.required_heroes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgInGamePrediction.required_heroes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgInGamePrediction::required_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgInGamePrediction.required_heroes)
  return _impl_.required_heroes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgInGamePrediction::mutable_required_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgInGamePrediction.required_heroes)
  return &_impl_.required_heroes_;
}

// optional string query_name = 8;
inline bool CMsgInGamePrediction::_internal_has_query_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_query_name() const {
  return _internal_has_query_name();
}
inline void CMsgInGamePrediction::clear_query_name() {
  _impl_.query_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgInGamePrediction::query_name() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.query_name)
  return _internal_query_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgInGamePrediction::set_query_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.query_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.query_name)
}
inline std::string* CMsgInGamePrediction::mutable_query_name() {
  std::string* _s = _internal_mutable_query_name();
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.query_name)
  return _s;
}
inline const std::string& CMsgInGamePrediction::_internal_query_name() const {
  return _impl_.query_name_.Get();
}
inline void CMsgInGamePrediction::_internal_set_query_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.query_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction::_internal_mutable_query_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.query_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgInGamePrediction::release_query_name() {
  // @@protoc_insertion_point(field_release:CMsgInGamePrediction.query_name)
  if (!_internal_has_query_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.query_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_name_.IsDefault()) {
    _impl_.query_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgInGamePrediction::set_allocated_query_name(std::string* query_name) {
  if (query_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.query_name_.SetAllocated(query_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_name_.IsDefault()) {
    _impl_.query_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgInGamePrediction.query_name)
}

// repeated .CMsgInGamePrediction.QueryKeyValues query_values = 9;
inline int CMsgInGamePrediction::_internal_query_values_size() const {
  return _impl_.query_values_.size();
}
inline int CMsgInGamePrediction::query_values_size() const {
  return _internal_query_values_size();
}
inline void CMsgInGamePrediction::clear_query_values() {
  _impl_.query_values_.Clear();
}
inline ::CMsgInGamePrediction_QueryKeyValues* CMsgInGamePrediction::mutable_query_values(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgInGamePrediction.query_values)
  return _impl_.query_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction_QueryKeyValues >*
CMsgInGamePrediction::mutable_query_values() {
  // @@protoc_insertion_point(field_mutable_list:CMsgInGamePrediction.query_values)
  return &_impl_.query_values_;
}
inline const ::CMsgInGamePrediction_QueryKeyValues& CMsgInGamePrediction::_internal_query_values(int index) const {
  return _impl_.query_values_.Get(index);
}
inline const ::CMsgInGamePrediction_QueryKeyValues& CMsgInGamePrediction::query_values(int index) const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.query_values)
  return _internal_query_values(index);
}
inline ::CMsgInGamePrediction_QueryKeyValues* CMsgInGamePrediction::_internal_add_query_values() {
  return _impl_.query_values_.Add();
}
inline ::CMsgInGamePrediction_QueryKeyValues* CMsgInGamePrediction::add_query_values() {
  ::CMsgInGamePrediction_QueryKeyValues* _add = _internal_add_query_values();
  // @@protoc_insertion_point(field_add:CMsgInGamePrediction.query_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction_QueryKeyValues >&
CMsgInGamePrediction::query_values() const {
  // @@protoc_insertion_point(field_list:CMsgInGamePrediction.query_values)
  return _impl_.query_values_;
}

// optional .CMsgInGamePrediction.EResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
inline bool CMsgInGamePrediction::_internal_has_answer_resolution_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_answer_resolution_type() const {
  return _internal_has_answer_resolution_type();
}
inline void CMsgInGamePrediction::clear_answer_resolution_type() {
  _impl_.answer_resolution_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::_internal_answer_resolution_type() const {
  return static_cast< ::CMsgInGamePrediction_EResolutionType_t >(_impl_.answer_resolution_type_);
}
inline ::CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::answer_resolution_type() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.answer_resolution_type)
  return _internal_answer_resolution_type();
}
inline void CMsgInGamePrediction::_internal_set_answer_resolution_type(::CMsgInGamePrediction_EResolutionType_t value) {
  assert(::CMsgInGamePrediction_EResolutionType_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.answer_resolution_type_ = value;
}
inline void CMsgInGamePrediction::set_answer_resolution_type(::CMsgInGamePrediction_EResolutionType_t value) {
  _internal_set_answer_resolution_type(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.answer_resolution_type)
}

// optional uint32 points_to_grant = 11;
inline bool CMsgInGamePrediction::_internal_has_points_to_grant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_points_to_grant() const {
  return _internal_has_points_to_grant();
}
inline void CMsgInGamePrediction::clear_points_to_grant() {
  _impl_.points_to_grant_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgInGamePrediction::_internal_points_to_grant() const {
  return _impl_.points_to_grant_;
}
inline uint32_t CMsgInGamePrediction::points_to_grant() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.points_to_grant)
  return _internal_points_to_grant();
}
inline void CMsgInGamePrediction::_internal_set_points_to_grant(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.points_to_grant_ = value;
}
inline void CMsgInGamePrediction::set_points_to_grant(uint32_t value) {
  _internal_set_points_to_grant(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.points_to_grant)
}

// optional uint32 reward_action = 12;
inline bool CMsgInGamePrediction::_internal_has_reward_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_reward_action() const {
  return _internal_has_reward_action();
}
inline void CMsgInGamePrediction::clear_reward_action() {
  _impl_.reward_action_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgInGamePrediction::_internal_reward_action() const {
  return _impl_.reward_action_;
}
inline uint32_t CMsgInGamePrediction::reward_action() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.reward_action)
  return _internal_reward_action();
}
inline void CMsgInGamePrediction::_internal_set_reward_action(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.reward_action_ = value;
}
inline void CMsgInGamePrediction::set_reward_action(uint32_t value) {
  _internal_set_reward_action(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.reward_action)
}

// optional uint32 debug_force_selection = 13;
inline bool CMsgInGamePrediction::_internal_has_debug_force_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_debug_force_selection() const {
  return _internal_has_debug_force_selection();
}
inline void CMsgInGamePrediction::clear_debug_force_selection() {
  _impl_.debug_force_selection_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgInGamePrediction::_internal_debug_force_selection() const {
  return _impl_.debug_force_selection_;
}
inline uint32_t CMsgInGamePrediction::debug_force_selection() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.debug_force_selection)
  return _internal_debug_force_selection();
}
inline void CMsgInGamePrediction::_internal_set_debug_force_selection(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.debug_force_selection_ = value;
}
inline void CMsgInGamePrediction::set_debug_force_selection(uint32_t value) {
  _internal_set_debug_force_selection(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.debug_force_selection)
}

// optional .CMsgInGamePrediction.ERawValueType_t raw_value_type = 14 [default = Number];
inline bool CMsgInGamePrediction::_internal_has_raw_value_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgInGamePrediction::has_raw_value_type() const {
  return _internal_has_raw_value_type();
}
inline void CMsgInGamePrediction::clear_raw_value_type() {
  _impl_.raw_value_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction::_internal_raw_value_type() const {
  return static_cast< ::CMsgInGamePrediction_ERawValueType_t >(_impl_.raw_value_type_);
}
inline ::CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction::raw_value_type() const {
  // @@protoc_insertion_point(field_get:CMsgInGamePrediction.raw_value_type)
  return _internal_raw_value_type();
}
inline void CMsgInGamePrediction::_internal_set_raw_value_type(::CMsgInGamePrediction_ERawValueType_t value) {
  assert(::CMsgInGamePrediction_ERawValueType_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.raw_value_type_ = value;
}
inline void CMsgInGamePrediction::set_raw_value_type(::CMsgInGamePrediction_ERawValueType_t value) {
  _internal_set_raw_value_type(value);
  // @@protoc_insertion_point(field_set:CMsgInGamePrediction.raw_value_type)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Prediction_Answers

// optional uint32 answer_id = 1;
inline bool CMsgDOTASeasonPredictions_Prediction_Answers::_internal_has_answer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction_Answers::has_answer_id() const {
  return _internal_has_answer_id();
}
inline void CMsgDOTASeasonPredictions_Prediction_Answers::clear_answer_id() {
  _impl_.answer_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction_Answers::_internal_answer_id() const {
  return _impl_.answer_id_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction_Answers::answer_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.Answers.answer_id)
  return _internal_answer_id();
}
inline void CMsgDOTASeasonPredictions_Prediction_Answers::_internal_set_answer_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.answer_id_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction_Answers::set_answer_id(uint32_t value) {
  _internal_set_answer_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.Answers.answer_id)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions_Prediction

// optional .CMsgDOTASeasonPredictions.Prediction.EPredictionType type = 1 [default = Generic];
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_type() const {
  return _internal_has_type();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::_internal_type() const {
  return static_cast< ::CMsgDOTASeasonPredictions_Prediction_EPredictionType >(_impl_.type_);
}
inline ::CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.type)
  return _internal_type();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_type(::CMsgDOTASeasonPredictions_Prediction_EPredictionType value) {
  assert(::CMsgDOTASeasonPredictions_Prediction_EPredictionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_type(::CMsgDOTASeasonPredictions_Prediction_EPredictionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.type)
}

// optional string question = 2;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_question() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_question() const {
  return _internal_has_question();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_question() {
  _impl_.question_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTASeasonPredictions_Prediction::question() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.question)
  return _internal_question();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTASeasonPredictions_Prediction::set_question(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.question_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.question)
}
inline std::string* CMsgDOTASeasonPredictions_Prediction::mutable_question() {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.question)
  return _s;
}
inline const std::string& CMsgDOTASeasonPredictions_Prediction::_internal_question() const {
  return _impl_.question_.Get();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_question(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.question_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTASeasonPredictions_Prediction::_internal_mutable_question() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.question_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTASeasonPredictions_Prediction::release_question() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeasonPredictions.Prediction.question)
  if (!_internal_has_question()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.question_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_allocated_question(std::string* question) {
  if (question != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.question_.SetAllocated(question, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.Prediction.question)
}

// repeated .CMsgPredictionChoice choices = 3;
inline int CMsgDOTASeasonPredictions_Prediction::_internal_choices_size() const {
  return _impl_.choices_.size();
}
inline int CMsgDOTASeasonPredictions_Prediction::choices_size() const {
  return _internal_choices_size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_choices() {
  _impl_.choices_.Clear();
}
inline ::CMsgPredictionChoice* CMsgDOTASeasonPredictions_Prediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.choices)
  return _impl_.choices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >*
CMsgDOTASeasonPredictions_Prediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.Prediction.choices)
  return &_impl_.choices_;
}
inline const ::CMsgPredictionChoice& CMsgDOTASeasonPredictions_Prediction::_internal_choices(int index) const {
  return _impl_.choices_.Get(index);
}
inline const ::CMsgPredictionChoice& CMsgDOTASeasonPredictions_Prediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.choices)
  return _internal_choices(index);
}
inline ::CMsgPredictionChoice* CMsgDOTASeasonPredictions_Prediction::_internal_add_choices() {
  return _impl_.choices_.Add();
}
inline ::CMsgPredictionChoice* CMsgDOTASeasonPredictions_Prediction::add_choices() {
  ::CMsgPredictionChoice* _add = _internal_add_choices();
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.Prediction.choices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPredictionChoice >&
CMsgDOTASeasonPredictions_Prediction::choices() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.Prediction.choices)
  return _impl_.choices_;
}

// optional uint32 selection_id = 4;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_selection_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_selection_id() const {
  return _internal_has_selection_id();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_selection_id() {
  _impl_.selection_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::_internal_selection_id() const {
  return _impl_.selection_id_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::selection_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.selection_id)
  return _internal_selection_id();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_selection_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.selection_id_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_selection_id(uint32_t value) {
  _internal_set_selection_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.selection_id)
}

// optional uint32 start_date = 5;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_start_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_start_date() const {
  return _internal_has_start_date();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_start_date() {
  _impl_.start_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::_internal_start_date() const {
  return _impl_.start_date_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::start_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.start_date)
  return _internal_start_date();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_start_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_date_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_start_date(uint32_t value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.start_date)
}

// optional uint32 lock_date = 6;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_lock_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_date() const {
  return _internal_has_lock_date();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_date() {
  _impl_.lock_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::_internal_lock_date() const {
  return _impl_.lock_date_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::lock_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_date)
  return _internal_lock_date();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_lock_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lock_date_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_date(uint32_t value) {
  _internal_set_lock_date(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_date)
}

// optional uint32 reward = 7;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_reward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_reward() const {
  return _internal_has_reward();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_reward() {
  _impl_.reward_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::_internal_reward() const {
  return _impl_.reward_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::reward() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.reward)
  return _internal_reward();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_reward(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.reward_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_reward(uint32_t value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.reward)
}

// optional .CMsgDOTASeasonPredictions.Prediction.EAnswerType answer_type = 8 [default = SingleInt];
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_answer_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_answer_type() const {
  return _internal_has_answer_type();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answer_type() {
  _impl_.answer_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::_internal_answer_type() const {
  return static_cast< ::CMsgDOTASeasonPredictions_Prediction_EAnswerType >(_impl_.answer_type_);
}
inline ::CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::answer_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.answer_type)
  return _internal_answer_type();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_answer_type(::CMsgDOTASeasonPredictions_Prediction_EAnswerType value) {
  assert(::CMsgDOTASeasonPredictions_Prediction_EAnswerType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.answer_type_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_answer_type(::CMsgDOTASeasonPredictions_Prediction_EAnswerType value) {
  _internal_set_answer_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.answer_type)
}

// optional uint32 answer_id = 9;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_answer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_answer_id() const {
  return _internal_has_answer_id();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answer_id() {
  _impl_.answer_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::_internal_answer_id() const {
  return _impl_.answer_id_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::answer_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.answer_id)
  return _internal_answer_id();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_answer_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.answer_id_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_answer_id(uint32_t value) {
  _internal_set_answer_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.answer_id)
}

// repeated .CMsgDOTASeasonPredictions.Prediction.Answers answers = 10;
inline int CMsgDOTASeasonPredictions_Prediction::_internal_answers_size() const {
  return _impl_.answers_.size();
}
inline int CMsgDOTASeasonPredictions_Prediction::answers_size() const {
  return _internal_answers_size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_answers() {
  _impl_.answers_.Clear();
}
inline ::CMsgDOTASeasonPredictions_Prediction_Answers* CMsgDOTASeasonPredictions_Prediction::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.answers)
  return _impl_.answers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction_Answers >*
CMsgDOTASeasonPredictions_Prediction::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.Prediction.answers)
  return &_impl_.answers_;
}
inline const ::CMsgDOTASeasonPredictions_Prediction_Answers& CMsgDOTASeasonPredictions_Prediction::_internal_answers(int index) const {
  return _impl_.answers_.Get(index);
}
inline const ::CMsgDOTASeasonPredictions_Prediction_Answers& CMsgDOTASeasonPredictions_Prediction::answers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.answers)
  return _internal_answers(index);
}
inline ::CMsgDOTASeasonPredictions_Prediction_Answers* CMsgDOTASeasonPredictions_Prediction::_internal_add_answers() {
  return _impl_.answers_.Add();
}
inline ::CMsgDOTASeasonPredictions_Prediction_Answers* CMsgDOTASeasonPredictions_Prediction::add_answers() {
  ::CMsgDOTASeasonPredictions_Prediction_Answers* _add = _internal_add_answers();
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.Prediction.answers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction_Answers >&
CMsgDOTASeasonPredictions_Prediction::answers() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.Prediction.answers)
  return _impl_.answers_;
}

// optional string query_name = 11;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_query_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_query_name() const {
  return _internal_has_query_name();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_query_name() {
  _impl_.query_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTASeasonPredictions_Prediction::query_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.query_name)
  return _internal_query_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTASeasonPredictions_Prediction::set_query_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.query_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.query_name)
}
inline std::string* CMsgDOTASeasonPredictions_Prediction::mutable_query_name() {
  std::string* _s = _internal_mutable_query_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.Prediction.query_name)
  return _s;
}
inline const std::string& CMsgDOTASeasonPredictions_Prediction::_internal_query_name() const {
  return _impl_.query_name_.Get();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_query_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.query_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTASeasonPredictions_Prediction::_internal_mutable_query_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.query_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTASeasonPredictions_Prediction::release_query_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeasonPredictions.Prediction.query_name)
  if (!_internal_has_query_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.query_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_name_.IsDefault()) {
    _impl_.query_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_allocated_query_name(std::string* query_name) {
  if (query_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.query_name_.SetAllocated(query_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_name_.IsDefault()) {
    _impl_.query_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeasonPredictions.Prediction.query_name)
}

// optional uint32 lock_on_selection_id = 13;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_lock_on_selection_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_id() const {
  return _internal_has_lock_on_selection_id();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_id() {
  _impl_.lock_on_selection_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::_internal_lock_on_selection_id() const {
  return _impl_.lock_on_selection_id_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::lock_on_selection_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
  return _internal_lock_on_selection_id();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_lock_on_selection_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lock_on_selection_id_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_id(uint32_t value) {
  _internal_set_lock_on_selection_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
}

// optional uint32 lock_on_selection_value = 14;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_lock_on_selection_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_value() const {
  return _internal_has_lock_on_selection_value();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_value() {
  _impl_.lock_on_selection_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::_internal_lock_on_selection_value() const {
  return _impl_.lock_on_selection_value_;
}
inline uint32_t CMsgDOTASeasonPredictions_Prediction::lock_on_selection_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
  return _internal_lock_on_selection_value();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_lock_on_selection_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.lock_on_selection_value_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_value(uint32_t value) {
  _internal_set_lock_on_selection_value(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
}

// optional bool lock_on_selection_set = 15;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_lock_on_selection_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_set() const {
  return _internal_has_lock_on_selection_set();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_set() {
  _impl_.lock_on_selection_set_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_lock_on_selection_set() const {
  return _impl_.lock_on_selection_set_;
}
inline bool CMsgDOTASeasonPredictions_Prediction::lock_on_selection_set() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
  return _internal_lock_on_selection_set();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_lock_on_selection_set(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.lock_on_selection_set_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_set(bool value) {
  _internal_set_lock_on_selection_set(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
}

// optional bool use_answer_value_ranges = 16;
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_use_answer_value_ranges() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_use_answer_value_ranges() const {
  return _internal_has_use_answer_value_ranges();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_use_answer_value_ranges() {
  _impl_.use_answer_value_ranges_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_use_answer_value_ranges() const {
  return _impl_.use_answer_value_ranges_;
}
inline bool CMsgDOTASeasonPredictions_Prediction::use_answer_value_ranges() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.use_answer_value_ranges)
  return _internal_use_answer_value_ranges();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_use_answer_value_ranges(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.use_answer_value_ranges_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_use_answer_value_ranges(bool value) {
  _internal_set_use_answer_value_ranges(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.use_answer_value_ranges)
}

// optional .ELeagueRegion region = 17 [default = LEAGUE_REGION_UNSET];
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_region() const {
  return _internal_has_region();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_region() {
  _impl_.region_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::ELeagueRegion CMsgDOTASeasonPredictions_Prediction::_internal_region() const {
  return static_cast< ::ELeagueRegion >(_impl_.region_);
}
inline ::ELeagueRegion CMsgDOTASeasonPredictions_Prediction::region() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.region)
  return _internal_region();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_region(::ELeagueRegion value) {
  assert(::ELeagueRegion_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.region_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_region(::ELeagueRegion value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.region)
}

// repeated .ELeaguePhase phases = 18;
inline int CMsgDOTASeasonPredictions_Prediction::_internal_phases_size() const {
  return _impl_.phases_.size();
}
inline int CMsgDOTASeasonPredictions_Prediction::phases_size() const {
  return _internal_phases_size();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_phases() {
  _impl_.phases_.Clear();
}
inline ::ELeaguePhase CMsgDOTASeasonPredictions_Prediction::_internal_phases(int index) const {
  return static_cast< ::ELeaguePhase >(_impl_.phases_.Get(index));
}
inline ::ELeaguePhase CMsgDOTASeasonPredictions_Prediction::phases(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.phases)
  return _internal_phases(index);
}
inline void CMsgDOTASeasonPredictions_Prediction::set_phases(int index, ::ELeaguePhase value) {
  assert(::ELeaguePhase_IsValid(value));
  _impl_.phases_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.phases)
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_add_phases(::ELeaguePhase value) {
  assert(::ELeaguePhase_IsValid(value));
  _impl_.phases_.Add(value);
}
inline void CMsgDOTASeasonPredictions_Prediction::add_phases(::ELeaguePhase value) {
  _internal_add_phases(value);
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.Prediction.phases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgDOTASeasonPredictions_Prediction::phases() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.Prediction.phases)
  return _impl_.phases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgDOTASeasonPredictions_Prediction::_internal_mutable_phases() {
  return &_impl_.phases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgDOTASeasonPredictions_Prediction::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.Prediction.phases)
  return _internal_mutable_phases();
}

// optional .EEvent reward_event = 19 [default = EVENT_ID_NONE];
inline bool CMsgDOTASeasonPredictions_Prediction::_internal_has_reward_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions_Prediction::has_reward_event() const {
  return _internal_has_reward_event();
}
inline void CMsgDOTASeasonPredictions_Prediction::clear_reward_event() {
  _impl_.reward_event_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::EEvent CMsgDOTASeasonPredictions_Prediction::_internal_reward_event() const {
  return static_cast< ::EEvent >(_impl_.reward_event_);
}
inline ::EEvent CMsgDOTASeasonPredictions_Prediction::reward_event() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.Prediction.reward_event)
  return _internal_reward_event();
}
inline void CMsgDOTASeasonPredictions_Prediction::_internal_set_reward_event(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.reward_event_ = value;
}
inline void CMsgDOTASeasonPredictions_Prediction::set_reward_event(::EEvent value) {
  _internal_set_reward_event(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.Prediction.reward_event)
}

// -------------------------------------------------------------------

// CMsgDOTASeasonPredictions

// repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
inline int CMsgDOTASeasonPredictions::_internal_predictions_size() const {
  return _impl_.predictions_.size();
}
inline int CMsgDOTASeasonPredictions::predictions_size() const {
  return _internal_predictions_size();
}
inline void CMsgDOTASeasonPredictions::clear_predictions() {
  _impl_.predictions_.Clear();
}
inline ::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.predictions)
  return _impl_.predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >*
CMsgDOTASeasonPredictions::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.predictions)
  return &_impl_.predictions_;
}
inline const ::CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions::_internal_predictions(int index) const {
  return _impl_.predictions_.Get(index);
}
inline const ::CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions::predictions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.predictions)
  return _internal_predictions(index);
}
inline ::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::_internal_add_predictions() {
  return _impl_.predictions_.Add();
}
inline ::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::add_predictions() {
  ::CMsgDOTASeasonPredictions_Prediction* _add = _internal_add_predictions();
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTASeasonPredictions_Prediction >&
CMsgDOTASeasonPredictions::predictions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.predictions)
  return _impl_.predictions_;
}

// repeated .CMsgInGamePrediction in_game_predictions = 2;
inline int CMsgDOTASeasonPredictions::_internal_in_game_predictions_size() const {
  return _impl_.in_game_predictions_.size();
}
inline int CMsgDOTASeasonPredictions::in_game_predictions_size() const {
  return _internal_in_game_predictions_size();
}
inline void CMsgDOTASeasonPredictions::clear_in_game_predictions() {
  _impl_.in_game_predictions_.Clear();
}
inline ::CMsgInGamePrediction* CMsgDOTASeasonPredictions::mutable_in_game_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeasonPredictions.in_game_predictions)
  return _impl_.in_game_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >*
CMsgDOTASeasonPredictions::mutable_in_game_predictions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeasonPredictions.in_game_predictions)
  return &_impl_.in_game_predictions_;
}
inline const ::CMsgInGamePrediction& CMsgDOTASeasonPredictions::_internal_in_game_predictions(int index) const {
  return _impl_.in_game_predictions_.Get(index);
}
inline const ::CMsgInGamePrediction& CMsgDOTASeasonPredictions::in_game_predictions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.in_game_predictions)
  return _internal_in_game_predictions(index);
}
inline ::CMsgInGamePrediction* CMsgDOTASeasonPredictions::_internal_add_in_game_predictions() {
  return _impl_.in_game_predictions_.Add();
}
inline ::CMsgInGamePrediction* CMsgDOTASeasonPredictions::add_in_game_predictions() {
  ::CMsgInGamePrediction* _add = _internal_add_in_game_predictions();
  // @@protoc_insertion_point(field_add:CMsgDOTASeasonPredictions.in_game_predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >&
CMsgDOTASeasonPredictions::in_game_predictions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeasonPredictions.in_game_predictions)
  return _impl_.in_game_predictions_;
}

// optional uint32 in_game_prediction_count_per_game = 3;
inline bool CMsgDOTASeasonPredictions::_internal_has_in_game_prediction_count_per_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions::has_in_game_prediction_count_per_game() const {
  return _internal_has_in_game_prediction_count_per_game();
}
inline void CMsgDOTASeasonPredictions::clear_in_game_prediction_count_per_game() {
  _impl_.in_game_prediction_count_per_game_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTASeasonPredictions::_internal_in_game_prediction_count_per_game() const {
  return _impl_.in_game_prediction_count_per_game_;
}
inline uint32_t CMsgDOTASeasonPredictions::in_game_prediction_count_per_game() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
  return _internal_in_game_prediction_count_per_game();
}
inline void CMsgDOTASeasonPredictions::_internal_set_in_game_prediction_count_per_game(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.in_game_prediction_count_per_game_ = value;
}
inline void CMsgDOTASeasonPredictions::set_in_game_prediction_count_per_game(uint32_t value) {
  _internal_set_in_game_prediction_count_per_game(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
}

// optional uint32 in_game_prediction_voting_period_minutes = 4;
inline bool CMsgDOTASeasonPredictions::_internal_has_in_game_prediction_voting_period_minutes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTASeasonPredictions::has_in_game_prediction_voting_period_minutes() const {
  return _internal_has_in_game_prediction_voting_period_minutes();
}
inline void CMsgDOTASeasonPredictions::clear_in_game_prediction_voting_period_minutes() {
  _impl_.in_game_prediction_voting_period_minutes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTASeasonPredictions::_internal_in_game_prediction_voting_period_minutes() const {
  return _impl_.in_game_prediction_voting_period_minutes_;
}
inline uint32_t CMsgDOTASeasonPredictions::in_game_prediction_voting_period_minutes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
  return _internal_in_game_prediction_voting_period_minutes();
}
inline void CMsgDOTASeasonPredictions::_internal_set_in_game_prediction_voting_period_minutes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.in_game_prediction_voting_period_minutes_ = value;
}
inline void CMsgDOTASeasonPredictions::set_in_game_prediction_voting_period_minutes(uint32_t value) {
  _internal_set_in_game_prediction_voting_period_minutes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
}

// -------------------------------------------------------------------

// CMsgAvailablePredictions_MatchPrediction

// optional uint64 match_id = 1;
inline bool CMsgAvailablePredictions_MatchPrediction::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAvailablePredictions_MatchPrediction::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgAvailablePredictions_MatchPrediction::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAvailablePredictions_MatchPrediction::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgAvailablePredictions_MatchPrediction::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgAvailablePredictions.MatchPrediction.match_id)
  return _internal_match_id();
}
inline void CMsgAvailablePredictions_MatchPrediction::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgAvailablePredictions_MatchPrediction::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgAvailablePredictions.MatchPrediction.match_id)
}

// repeated .CMsgInGamePrediction predictions = 2;
inline int CMsgAvailablePredictions_MatchPrediction::_internal_predictions_size() const {
  return _impl_.predictions_.size();
}
inline int CMsgAvailablePredictions_MatchPrediction::predictions_size() const {
  return _internal_predictions_size();
}
inline void CMsgAvailablePredictions_MatchPrediction::clear_predictions() {
  _impl_.predictions_.Clear();
}
inline ::CMsgInGamePrediction* CMsgAvailablePredictions_MatchPrediction::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAvailablePredictions.MatchPrediction.predictions)
  return _impl_.predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >*
CMsgAvailablePredictions_MatchPrediction::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAvailablePredictions.MatchPrediction.predictions)
  return &_impl_.predictions_;
}
inline const ::CMsgInGamePrediction& CMsgAvailablePredictions_MatchPrediction::_internal_predictions(int index) const {
  return _impl_.predictions_.Get(index);
}
inline const ::CMsgInGamePrediction& CMsgAvailablePredictions_MatchPrediction::predictions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAvailablePredictions.MatchPrediction.predictions)
  return _internal_predictions(index);
}
inline ::CMsgInGamePrediction* CMsgAvailablePredictions_MatchPrediction::_internal_add_predictions() {
  return _impl_.predictions_.Add();
}
inline ::CMsgInGamePrediction* CMsgAvailablePredictions_MatchPrediction::add_predictions() {
  ::CMsgInGamePrediction* _add = _internal_add_predictions();
  // @@protoc_insertion_point(field_add:CMsgAvailablePredictions.MatchPrediction.predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgInGamePrediction >&
CMsgAvailablePredictions_MatchPrediction::predictions() const {
  // @@protoc_insertion_point(field_list:CMsgAvailablePredictions.MatchPrediction.predictions)
  return _impl_.predictions_;
}

// -------------------------------------------------------------------

// CMsgAvailablePredictions

// repeated .CMsgAvailablePredictions.MatchPrediction match_predictions = 1;
inline int CMsgAvailablePredictions::_internal_match_predictions_size() const {
  return _impl_.match_predictions_.size();
}
inline int CMsgAvailablePredictions::match_predictions_size() const {
  return _internal_match_predictions_size();
}
inline void CMsgAvailablePredictions::clear_match_predictions() {
  _impl_.match_predictions_.Clear();
}
inline ::CMsgAvailablePredictions_MatchPrediction* CMsgAvailablePredictions::mutable_match_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAvailablePredictions.match_predictions)
  return _impl_.match_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailablePredictions_MatchPrediction >*
CMsgAvailablePredictions::mutable_match_predictions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAvailablePredictions.match_predictions)
  return &_impl_.match_predictions_;
}
inline const ::CMsgAvailablePredictions_MatchPrediction& CMsgAvailablePredictions::_internal_match_predictions(int index) const {
  return _impl_.match_predictions_.Get(index);
}
inline const ::CMsgAvailablePredictions_MatchPrediction& CMsgAvailablePredictions::match_predictions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAvailablePredictions.match_predictions)
  return _internal_match_predictions(index);
}
inline ::CMsgAvailablePredictions_MatchPrediction* CMsgAvailablePredictions::_internal_add_match_predictions() {
  return _impl_.match_predictions_.Add();
}
inline ::CMsgAvailablePredictions_MatchPrediction* CMsgAvailablePredictions::add_match_predictions() {
  ::CMsgAvailablePredictions_MatchPrediction* _add = _internal_add_match_predictions();
  // @@protoc_insertion_point(field_add:CMsgAvailablePredictions.match_predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAvailablePredictions_MatchPrediction >&
CMsgAvailablePredictions::match_predictions() const {
  // @@protoc_insertion_point(field_list:CMsgAvailablePredictions.match_predictions)
  return _impl_.match_predictions_;
}

// -------------------------------------------------------------------

// CMsgLeagueWatchedGames_Series

// optional uint32 node_id = 1;
inline bool CMsgLeagueWatchedGames_Series::_internal_has_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLeagueWatchedGames_Series::has_node_id() const {
  return _internal_has_node_id();
}
inline void CMsgLeagueWatchedGames_Series::clear_node_id() {
  _impl_.node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLeagueWatchedGames_Series::_internal_node_id() const {
  return _impl_.node_id_;
}
inline uint32_t CMsgLeagueWatchedGames_Series::node_id() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueWatchedGames.Series.node_id)
  return _internal_node_id();
}
inline void CMsgLeagueWatchedGames_Series::_internal_set_node_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_id_ = value;
}
inline void CMsgLeagueWatchedGames_Series::set_node_id(uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgLeagueWatchedGames.Series.node_id)
}

// repeated uint32 game = 2;
inline int CMsgLeagueWatchedGames_Series::_internal_game_size() const {
  return _impl_.game_.size();
}
inline int CMsgLeagueWatchedGames_Series::game_size() const {
  return _internal_game_size();
}
inline void CMsgLeagueWatchedGames_Series::clear_game() {
  _impl_.game_.Clear();
}
inline uint32_t CMsgLeagueWatchedGames_Series::_internal_game(int index) const {
  return _impl_.game_.Get(index);
}
inline uint32_t CMsgLeagueWatchedGames_Series::game(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueWatchedGames.Series.game)
  return _internal_game(index);
}
inline void CMsgLeagueWatchedGames_Series::set_game(int index, uint32_t value) {
  _impl_.game_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgLeagueWatchedGames.Series.game)
}
inline void CMsgLeagueWatchedGames_Series::_internal_add_game(uint32_t value) {
  _impl_.game_.Add(value);
}
inline void CMsgLeagueWatchedGames_Series::add_game(uint32_t value) {
  _internal_add_game(value);
  // @@protoc_insertion_point(field_add:CMsgLeagueWatchedGames.Series.game)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLeagueWatchedGames_Series::_internal_game() const {
  return _impl_.game_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLeagueWatchedGames_Series::game() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueWatchedGames.Series.game)
  return _internal_game();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLeagueWatchedGames_Series::_internal_mutable_game() {
  return &_impl_.game_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLeagueWatchedGames_Series::mutable_game() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueWatchedGames.Series.game)
  return _internal_mutable_game();
}

// -------------------------------------------------------------------

// CMsgLeagueWatchedGames_League

// optional uint32 league_id = 1;
inline bool CMsgLeagueWatchedGames_League::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLeagueWatchedGames_League::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgLeagueWatchedGames_League::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLeagueWatchedGames_League::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgLeagueWatchedGames_League::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgLeagueWatchedGames.League.league_id)
  return _internal_league_id();
}
inline void CMsgLeagueWatchedGames_League::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgLeagueWatchedGames_League::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgLeagueWatchedGames.League.league_id)
}

// repeated .CMsgLeagueWatchedGames.Series series = 2;
inline int CMsgLeagueWatchedGames_League::_internal_series_size() const {
  return _impl_.series_.size();
}
inline int CMsgLeagueWatchedGames_League::series_size() const {
  return _internal_series_size();
}
inline void CMsgLeagueWatchedGames_League::clear_series() {
  _impl_.series_.Clear();
}
inline ::CMsgLeagueWatchedGames_Series* CMsgLeagueWatchedGames_League::mutable_series(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLeagueWatchedGames.League.series)
  return _impl_.series_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_Series >*
CMsgLeagueWatchedGames_League::mutable_series() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueWatchedGames.League.series)
  return &_impl_.series_;
}
inline const ::CMsgLeagueWatchedGames_Series& CMsgLeagueWatchedGames_League::_internal_series(int index) const {
  return _impl_.series_.Get(index);
}
inline const ::CMsgLeagueWatchedGames_Series& CMsgLeagueWatchedGames_League::series(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueWatchedGames.League.series)
  return _internal_series(index);
}
inline ::CMsgLeagueWatchedGames_Series* CMsgLeagueWatchedGames_League::_internal_add_series() {
  return _impl_.series_.Add();
}
inline ::CMsgLeagueWatchedGames_Series* CMsgLeagueWatchedGames_League::add_series() {
  ::CMsgLeagueWatchedGames_Series* _add = _internal_add_series();
  // @@protoc_insertion_point(field_add:CMsgLeagueWatchedGames.League.series)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_Series >&
CMsgLeagueWatchedGames_League::series() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueWatchedGames.League.series)
  return _impl_.series_;
}

// -------------------------------------------------------------------

// CMsgLeagueWatchedGames

// repeated .CMsgLeagueWatchedGames.League leagues = 1;
inline int CMsgLeagueWatchedGames::_internal_leagues_size() const {
  return _impl_.leagues_.size();
}
inline int CMsgLeagueWatchedGames::leagues_size() const {
  return _internal_leagues_size();
}
inline void CMsgLeagueWatchedGames::clear_leagues() {
  _impl_.leagues_.Clear();
}
inline ::CMsgLeagueWatchedGames_League* CMsgLeagueWatchedGames::mutable_leagues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLeagueWatchedGames.leagues)
  return _impl_.leagues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_League >*
CMsgLeagueWatchedGames::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLeagueWatchedGames.leagues)
  return &_impl_.leagues_;
}
inline const ::CMsgLeagueWatchedGames_League& CMsgLeagueWatchedGames::_internal_leagues(int index) const {
  return _impl_.leagues_.Get(index);
}
inline const ::CMsgLeagueWatchedGames_League& CMsgLeagueWatchedGames::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLeagueWatchedGames.leagues)
  return _internal_leagues(index);
}
inline ::CMsgLeagueWatchedGames_League* CMsgLeagueWatchedGames::_internal_add_leagues() {
  return _impl_.leagues_.Add();
}
inline ::CMsgLeagueWatchedGames_League* CMsgLeagueWatchedGames::add_leagues() {
  ::CMsgLeagueWatchedGames_League* _add = _internal_add_leagues();
  // @@protoc_insertion_point(field_add:CMsgLeagueWatchedGames.leagues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLeagueWatchedGames_League >&
CMsgLeagueWatchedGames::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgLeagueWatchedGames.leagues)
  return _impl_.leagues_;
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player_CustomGameData

// optional uint32 dota_team = 1;
inline bool CMsgDOTAMatch_Player_CustomGameData::_internal_has_dota_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player_CustomGameData::has_dota_team() const {
  return _internal_has_dota_team();
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_dota_team() {
  _impl_.dota_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAMatch_Player_CustomGameData::_internal_dota_team() const {
  return _impl_.dota_team_;
}
inline uint32_t CMsgDOTAMatch_Player_CustomGameData::dota_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.CustomGameData.dota_team)
  return _internal_dota_team();
}
inline void CMsgDOTAMatch_Player_CustomGameData::_internal_set_dota_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dota_team_ = value;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_dota_team(uint32_t value) {
  _internal_set_dota_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.CustomGameData.dota_team)
}

// optional bool winner = 2;
inline bool CMsgDOTAMatch_Player_CustomGameData::_internal_has_winner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player_CustomGameData::has_winner() const {
  return _internal_has_winner();
}
inline void CMsgDOTAMatch_Player_CustomGameData::clear_winner() {
  _impl_.winner_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgDOTAMatch_Player_CustomGameData::_internal_winner() const {
  return _impl_.winner_;
}
inline bool CMsgDOTAMatch_Player_CustomGameData::winner() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.CustomGameData.winner)
  return _internal_winner();
}
inline void CMsgDOTAMatch_Player_CustomGameData::_internal_set_winner(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.winner_ = value;
}
inline void CMsgDOTAMatch_Player_CustomGameData::set_winner(bool value) {
  _internal_set_winner(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.CustomGameData.winner)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player_HeroDamageReceived

// optional uint32 pre_reduction = 1;
inline bool CMsgDOTAMatch_Player_HeroDamageReceived::_internal_has_pre_reduction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player_HeroDamageReceived::has_pre_reduction() const {
  return _internal_has_pre_reduction();
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::clear_pre_reduction() {
  _impl_.pre_reduction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAMatch_Player_HeroDamageReceived::_internal_pre_reduction() const {
  return _impl_.pre_reduction_;
}
inline uint32_t CMsgDOTAMatch_Player_HeroDamageReceived::pre_reduction() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.HeroDamageReceived.pre_reduction)
  return _internal_pre_reduction();
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::_internal_set_pre_reduction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pre_reduction_ = value;
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::set_pre_reduction(uint32_t value) {
  _internal_set_pre_reduction(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.HeroDamageReceived.pre_reduction)
}

// optional uint32 post_reduction = 2;
inline bool CMsgDOTAMatch_Player_HeroDamageReceived::_internal_has_post_reduction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player_HeroDamageReceived::has_post_reduction() const {
  return _internal_has_post_reduction();
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::clear_post_reduction() {
  _impl_.post_reduction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAMatch_Player_HeroDamageReceived::_internal_post_reduction() const {
  return _impl_.post_reduction_;
}
inline uint32_t CMsgDOTAMatch_Player_HeroDamageReceived::post_reduction() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.HeroDamageReceived.post_reduction)
  return _internal_post_reduction();
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::_internal_set_post_reduction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.post_reduction_ = value;
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::set_post_reduction(uint32_t value) {
  _internal_set_post_reduction(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.HeroDamageReceived.post_reduction)
}

// optional .CMsgDOTAMatch.Player.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
inline bool CMsgDOTAMatch_Player_HeroDamageReceived::_internal_has_damage_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player_HeroDamageReceived::has_damage_type() const {
  return _internal_has_damage_type();
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::clear_damage_type() {
  _impl_.damage_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player_HeroDamageReceived::_internal_damage_type() const {
  return static_cast< ::CMsgDOTAMatch_Player_HeroDamageType >(_impl_.damage_type_);
}
inline ::CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player_HeroDamageReceived::damage_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.HeroDamageReceived.damage_type)
  return _internal_damage_type();
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::_internal_set_damage_type(::CMsgDOTAMatch_Player_HeroDamageType value) {
  assert(::CMsgDOTAMatch_Player_HeroDamageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.damage_type_ = value;
}
inline void CMsgDOTAMatch_Player_HeroDamageReceived::set_damage_type(::CMsgDOTAMatch_Player_HeroDamageType value) {
  _internal_set_damage_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.HeroDamageReceived.damage_type)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAMatch_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAMatch_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAMatch_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAMatch_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.account_id)
}

// optional uint32 player_slot = 2;
inline bool CMsgDOTAMatch_Player::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgDOTAMatch_Player::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgDOTAMatch_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.player_slot)
  return _internal_player_slot();
}
inline void CMsgDOTAMatch_Player::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.player_slot_ = value;
}
inline void CMsgDOTAMatch_Player::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.player_slot)
}

// optional uint32 hero_id = 3;
inline bool CMsgDOTAMatch_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDOTAMatch_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgDOTAMatch_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_id)
  return _internal_hero_id();
}
inline void CMsgDOTAMatch_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.hero_id_ = value;
}
inline void CMsgDOTAMatch_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_id)
}

// optional int32 item_0 = 4 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_0() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_0() const {
  return _internal_has_item_0();
}
inline void CMsgDOTAMatch_Player::clear_item_0() {
  _impl_.item_0_ = -1;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_0() const {
  return _impl_.item_0_;
}
inline int32_t CMsgDOTAMatch_Player::item_0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_0)
  return _internal_item_0();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_0(int32_t value) {
  _impl_._has_bits_[1] |= 0x04000000u;
  _impl_.item_0_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_0(int32_t value) {
  _internal_set_item_0(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_0)
}

// optional int32 item_1 = 5 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_1() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_1() const {
  return _internal_has_item_1();
}
inline void CMsgDOTAMatch_Player::clear_item_1() {
  _impl_.item_1_ = -1;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_1() const {
  return _impl_.item_1_;
}
inline int32_t CMsgDOTAMatch_Player::item_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_1)
  return _internal_item_1();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_1(int32_t value) {
  _impl_._has_bits_[1] |= 0x08000000u;
  _impl_.item_1_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_1(int32_t value) {
  _internal_set_item_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_1)
}

// optional int32 item_2 = 6 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_2() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_2() const {
  return _internal_has_item_2();
}
inline void CMsgDOTAMatch_Player::clear_item_2() {
  _impl_.item_2_ = -1;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_2() const {
  return _impl_.item_2_;
}
inline int32_t CMsgDOTAMatch_Player::item_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_2)
  return _internal_item_2();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_2(int32_t value) {
  _impl_._has_bits_[1] |= 0x10000000u;
  _impl_.item_2_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_2(int32_t value) {
  _internal_set_item_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_2)
}

// optional int32 item_3 = 7 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_3() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_3() const {
  return _internal_has_item_3();
}
inline void CMsgDOTAMatch_Player::clear_item_3() {
  _impl_.item_3_ = -1;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_3() const {
  return _impl_.item_3_;
}
inline int32_t CMsgDOTAMatch_Player::item_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_3)
  return _internal_item_3();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_3(int32_t value) {
  _impl_._has_bits_[1] |= 0x20000000u;
  _impl_.item_3_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_3(int32_t value) {
  _internal_set_item_3(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_3)
}

// optional int32 item_4 = 8 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_4() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_4() const {
  return _internal_has_item_4();
}
inline void CMsgDOTAMatch_Player::clear_item_4() {
  _impl_.item_4_ = -1;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_4() const {
  return _impl_.item_4_;
}
inline int32_t CMsgDOTAMatch_Player::item_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_4)
  return _internal_item_4();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_4(int32_t value) {
  _impl_._has_bits_[1] |= 0x40000000u;
  _impl_.item_4_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_4(int32_t value) {
  _internal_set_item_4(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_4)
}

// optional int32 item_5 = 9 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_5() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_5() const {
  return _internal_has_item_5();
}
inline void CMsgDOTAMatch_Player::clear_item_5() {
  _impl_.item_5_ = -1;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_5() const {
  return _impl_.item_5_;
}
inline int32_t CMsgDOTAMatch_Player::item_5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_5)
  return _internal_item_5();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_5(int32_t value) {
  _impl_._has_bits_[1] |= 0x80000000u;
  _impl_.item_5_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_5(int32_t value) {
  _internal_set_item_5(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_5)
}

// optional int32 item_6 = 59 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_6() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_6() const {
  return _internal_has_item_6();
}
inline void CMsgDOTAMatch_Player::clear_item_6() {
  _impl_.item_6_ = -1;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_6() const {
  return _impl_.item_6_;
}
inline int32_t CMsgDOTAMatch_Player::item_6() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_6)
  return _internal_item_6();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_6(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000001u;
  _impl_.item_6_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_6(int32_t value) {
  _internal_set_item_6(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_6)
}

// optional int32 item_7 = 60 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_7() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_7() const {
  return _internal_has_item_7();
}
inline void CMsgDOTAMatch_Player::clear_item_7() {
  _impl_.item_7_ = -1;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_7() const {
  return _impl_.item_7_;
}
inline int32_t CMsgDOTAMatch_Player::item_7() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_7)
  return _internal_item_7();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_7(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000002u;
  _impl_.item_7_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_7(int32_t value) {
  _internal_set_item_7(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_7)
}

// optional int32 item_8 = 61 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_8() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_8() const {
  return _internal_has_item_8();
}
inline void CMsgDOTAMatch_Player::clear_item_8() {
  _impl_.item_8_ = -1;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_8() const {
  return _impl_.item_8_;
}
inline int32_t CMsgDOTAMatch_Player::item_8() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_8)
  return _internal_item_8();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_8(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000004u;
  _impl_.item_8_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_8(int32_t value) {
  _internal_set_item_8(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_8)
}

// optional int32 item_9 = 76 [default = -1];
inline bool CMsgDOTAMatch_Player::_internal_has_item_9() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_item_9() const {
  return _internal_has_item_9();
}
inline void CMsgDOTAMatch_Player::clear_item_9() {
  _impl_.item_9_ = -1;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_item_9() const {
  return _impl_.item_9_;
}
inline int32_t CMsgDOTAMatch_Player::item_9() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.item_9)
  return _internal_item_9();
}
inline void CMsgDOTAMatch_Player::_internal_set_item_9(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000008u;
  _impl_.item_9_ = value;
}
inline void CMsgDOTAMatch_Player::set_item_9(int32_t value) {
  _internal_set_item_9(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.item_9)
}

// optional float expected_team_contribution = 10;
inline bool CMsgDOTAMatch_Player::_internal_has_expected_team_contribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_expected_team_contribution() const {
  return _internal_has_expected_team_contribution();
}
inline void CMsgDOTAMatch_Player::clear_expected_team_contribution() {
  _impl_.expected_team_contribution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CMsgDOTAMatch_Player::_internal_expected_team_contribution() const {
  return _impl_.expected_team_contribution_;
}
inline float CMsgDOTAMatch_Player::expected_team_contribution() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.expected_team_contribution)
  return _internal_expected_team_contribution();
}
inline void CMsgDOTAMatch_Player::_internal_set_expected_team_contribution(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.expected_team_contribution_ = value;
}
inline void CMsgDOTAMatch_Player::set_expected_team_contribution(float value) {
  _internal_set_expected_team_contribution(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.expected_team_contribution)
}

// optional float scaled_metric = 11;
inline bool CMsgDOTAMatch_Player::_internal_has_scaled_metric() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_scaled_metric() const {
  return _internal_has_scaled_metric();
}
inline void CMsgDOTAMatch_Player::clear_scaled_metric() {
  _impl_.scaled_metric_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float CMsgDOTAMatch_Player::_internal_scaled_metric() const {
  return _impl_.scaled_metric_;
}
inline float CMsgDOTAMatch_Player::scaled_metric() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_metric)
  return _internal_scaled_metric();
}
inline void CMsgDOTAMatch_Player::_internal_set_scaled_metric(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.scaled_metric_ = value;
}
inline void CMsgDOTAMatch_Player::set_scaled_metric(float value) {
  _internal_set_scaled_metric(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_metric)
}

// optional uint32 previous_rank = 12;
inline bool CMsgDOTAMatch_Player::_internal_has_previous_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_previous_rank() const {
  return _internal_has_previous_rank();
}
inline void CMsgDOTAMatch_Player::clear_previous_rank() {
  _impl_.previous_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_previous_rank() const {
  return _impl_.previous_rank_;
}
inline uint32_t CMsgDOTAMatch_Player::previous_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.previous_rank)
  return _internal_previous_rank();
}
inline void CMsgDOTAMatch_Player::_internal_set_previous_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.previous_rank_ = value;
}
inline void CMsgDOTAMatch_Player::set_previous_rank(uint32_t value) {
  _internal_set_previous_rank(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.previous_rank)
}

// optional sint32 rank_change = 13;
inline bool CMsgDOTAMatch_Player::_internal_has_rank_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void CMsgDOTAMatch_Player::clear_rank_change() {
  _impl_.rank_change_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_rank_change() const {
  return _impl_.rank_change_;
}
inline int32_t CMsgDOTAMatch_Player::rank_change() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.rank_change)
  return _internal_rank_change();
}
inline void CMsgDOTAMatch_Player::_internal_set_rank_change(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.rank_change_ = value;
}
inline void CMsgDOTAMatch_Player::set_rank_change(int32_t value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.rank_change)
}

// optional uint32 mmr_type = 74;
inline bool CMsgDOTAMatch_Player::_internal_has_mmr_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_mmr_type() const {
  return _internal_has_mmr_type();
}
inline void CMsgDOTAMatch_Player::clear_mmr_type() {
  _impl_.mmr_type_ = 0u;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_mmr_type() const {
  return _impl_.mmr_type_;
}
inline uint32_t CMsgDOTAMatch_Player::mmr_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.mmr_type)
  return _internal_mmr_type();
}
inline void CMsgDOTAMatch_Player::_internal_set_mmr_type(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.mmr_type_ = value;
}
inline void CMsgDOTAMatch_Player::set_mmr_type(uint32_t value) {
  _internal_set_mmr_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.mmr_type)
}

// optional uint32 kills = 14;
inline bool CMsgDOTAMatch_Player::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDOTAMatch_Player::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgDOTAMatch_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.kills)
  return _internal_kills();
}
inline void CMsgDOTAMatch_Player::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.kills_ = value;
}
inline void CMsgDOTAMatch_Player::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.kills)
}

// optional uint32 deaths = 15;
inline bool CMsgDOTAMatch_Player::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgDOTAMatch_Player::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgDOTAMatch_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.deaths)
  return _internal_deaths();
}
inline void CMsgDOTAMatch_Player::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.deaths_ = value;
}
inline void CMsgDOTAMatch_Player::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.deaths)
}

// optional uint32 assists = 16;
inline bool CMsgDOTAMatch_Player::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgDOTAMatch_Player::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgDOTAMatch_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.assists)
  return _internal_assists();
}
inline void CMsgDOTAMatch_Player::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.assists_ = value;
}
inline void CMsgDOTAMatch_Player::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.assists)
}

// optional uint32 leaver_status = 17;
inline bool CMsgDOTAMatch_Player::_internal_has_leaver_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_leaver_status() const {
  return _internal_has_leaver_status();
}
inline void CMsgDOTAMatch_Player::clear_leaver_status() {
  _impl_.leaver_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_leaver_status() const {
  return _impl_.leaver_status_;
}
inline uint32_t CMsgDOTAMatch_Player::leaver_status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.leaver_status)
  return _internal_leaver_status();
}
inline void CMsgDOTAMatch_Player::_internal_set_leaver_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.leaver_status_ = value;
}
inline void CMsgDOTAMatch_Player::set_leaver_status(uint32_t value) {
  _internal_set_leaver_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.leaver_status)
}

// optional uint32 gold = 18;
inline bool CMsgDOTAMatch_Player::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgDOTAMatch_Player::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgDOTAMatch_Player::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold)
  return _internal_gold();
}
inline void CMsgDOTAMatch_Player::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.gold_ = value;
}
inline void CMsgDOTAMatch_Player::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold)
}

// optional uint32 last_hits = 19;
inline bool CMsgDOTAMatch_Player::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgDOTAMatch_Player::clear_last_hits() {
  _impl_.last_hits_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline uint32_t CMsgDOTAMatch_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.last_hits)
  return _internal_last_hits();
}
inline void CMsgDOTAMatch_Player::_internal_set_last_hits(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.last_hits_ = value;
}
inline void CMsgDOTAMatch_Player::set_last_hits(uint32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.last_hits)
}

// optional uint32 denies = 20;
inline bool CMsgDOTAMatch_Player::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgDOTAMatch_Player::clear_denies() {
  _impl_.denies_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_denies() const {
  return _impl_.denies_;
}
inline uint32_t CMsgDOTAMatch_Player::denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.denies)
  return _internal_denies();
}
inline void CMsgDOTAMatch_Player::_internal_set_denies(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.denies_ = value;
}
inline void CMsgDOTAMatch_Player::set_denies(uint32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.denies)
}

// optional uint32 gold_per_min = 21;
inline bool CMsgDOTAMatch_Player::_internal_has_gold_per_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_gold_per_min() const {
  return _internal_has_gold_per_min();
}
inline void CMsgDOTAMatch_Player::clear_gold_per_min() {
  _impl_.gold_per_min_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_gold_per_min() const {
  return _impl_.gold_per_min_;
}
inline uint32_t CMsgDOTAMatch_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold_per_min)
  return _internal_gold_per_min();
}
inline void CMsgDOTAMatch_Player::_internal_set_gold_per_min(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.gold_per_min_ = value;
}
inline void CMsgDOTAMatch_Player::set_gold_per_min(uint32_t value) {
  _internal_set_gold_per_min(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold_per_min)
}

// optional uint32 xp_per_min = 22;
inline bool CMsgDOTAMatch_Player::_internal_has_xp_per_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_xp_per_min() const {
  return _internal_has_xp_per_min();
}
inline void CMsgDOTAMatch_Player::clear_xp_per_min() {
  _impl_.xp_per_min_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_xp_per_min() const {
  return _impl_.xp_per_min_;
}
inline uint32_t CMsgDOTAMatch_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.xp_per_min)
  return _internal_xp_per_min();
}
inline void CMsgDOTAMatch_Player::_internal_set_xp_per_min(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.xp_per_min_ = value;
}
inline void CMsgDOTAMatch_Player::set_xp_per_min(uint32_t value) {
  _internal_set_xp_per_min(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.xp_per_min)
}

// optional uint32 gold_spent = 23;
inline bool CMsgDOTAMatch_Player::_internal_has_gold_spent() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_gold_spent() const {
  return _internal_has_gold_spent();
}
inline void CMsgDOTAMatch_Player::clear_gold_spent() {
  _impl_.gold_spent_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_gold_spent() const {
  return _impl_.gold_spent_;
}
inline uint32_t CMsgDOTAMatch_Player::gold_spent() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold_spent)
  return _internal_gold_spent();
}
inline void CMsgDOTAMatch_Player::_internal_set_gold_spent(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.gold_spent_ = value;
}
inline void CMsgDOTAMatch_Player::set_gold_spent(uint32_t value) {
  _internal_set_gold_spent(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold_spent)
}

// optional uint32 hero_damage = 24;
inline bool CMsgDOTAMatch_Player::_internal_has_hero_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_hero_damage() const {
  return _internal_has_hero_damage();
}
inline void CMsgDOTAMatch_Player::clear_hero_damage() {
  _impl_.hero_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_hero_damage() const {
  return _impl_.hero_damage_;
}
inline uint32_t CMsgDOTAMatch_Player::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_damage)
  return _internal_hero_damage();
}
inline void CMsgDOTAMatch_Player::_internal_set_hero_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.hero_damage_ = value;
}
inline void CMsgDOTAMatch_Player::set_hero_damage(uint32_t value) {
  _internal_set_hero_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_damage)
}

// optional uint32 tower_damage = 25;
inline bool CMsgDOTAMatch_Player::_internal_has_tower_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_tower_damage() const {
  return _internal_has_tower_damage();
}
inline void CMsgDOTAMatch_Player::clear_tower_damage() {
  _impl_.tower_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_tower_damage() const {
  return _impl_.tower_damage_;
}
inline uint32_t CMsgDOTAMatch_Player::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.tower_damage)
  return _internal_tower_damage();
}
inline void CMsgDOTAMatch_Player::_internal_set_tower_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.tower_damage_ = value;
}
inline void CMsgDOTAMatch_Player::set_tower_damage(uint32_t value) {
  _internal_set_tower_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.tower_damage)
}

// optional uint32 hero_healing = 26;
inline bool CMsgDOTAMatch_Player::_internal_has_hero_healing() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_hero_healing() const {
  return _internal_has_hero_healing();
}
inline void CMsgDOTAMatch_Player::clear_hero_healing() {
  _impl_.hero_healing_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_hero_healing() const {
  return _impl_.hero_healing_;
}
inline uint32_t CMsgDOTAMatch_Player::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_healing)
  return _internal_hero_healing();
}
inline void CMsgDOTAMatch_Player::_internal_set_hero_healing(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.hero_healing_ = value;
}
inline void CMsgDOTAMatch_Player::set_hero_healing(uint32_t value) {
  _internal_set_hero_healing(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_healing)
}

// optional uint32 level = 27;
inline bool CMsgDOTAMatch_Player::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_level() const {
  return _internal_has_level();
}
inline void CMsgDOTAMatch_Player::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgDOTAMatch_Player::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.level)
  return _internal_level();
}
inline void CMsgDOTAMatch_Player::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.level_ = value;
}
inline void CMsgDOTAMatch_Player::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.level)
}

// optional uint32 time_last_seen = 28;
inline bool CMsgDOTAMatch_Player::_internal_has_time_last_seen() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_time_last_seen() const {
  return _internal_has_time_last_seen();
}
inline void CMsgDOTAMatch_Player::clear_time_last_seen() {
  _impl_.time_last_seen_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_time_last_seen() const {
  return _impl_.time_last_seen_;
}
inline uint32_t CMsgDOTAMatch_Player::time_last_seen() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.time_last_seen)
  return _internal_time_last_seen();
}
inline void CMsgDOTAMatch_Player::_internal_set_time_last_seen(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.time_last_seen_ = value;
}
inline void CMsgDOTAMatch_Player::set_time_last_seen(uint32_t value) {
  _internal_set_time_last_seen(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.time_last_seen)
}

// optional string player_name = 29;
inline bool CMsgDOTAMatch_Player::_internal_has_player_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgDOTAMatch_Player::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatch_Player::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_Player::set_player_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.player_name)
}
inline std::string* CMsgDOTAMatch_Player::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.player_name)
  return _s;
}
inline const std::string& CMsgDOTAMatch_Player::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void CMsgDOTAMatch_Player::_internal_set_player_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Player::_internal_mutable_player_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Player::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.Player.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.player_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_Player::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Player.player_name)
}

// optional uint32 support_ability_value = 30;
inline bool CMsgDOTAMatch_Player::_internal_has_support_ability_value() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_support_ability_value() const {
  return _internal_has_support_ability_value();
}
inline void CMsgDOTAMatch_Player::clear_support_ability_value() {
  _impl_.support_ability_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_support_ability_value() const {
  return _impl_.support_ability_value_;
}
inline uint32_t CMsgDOTAMatch_Player::support_ability_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.support_ability_value)
  return _internal_support_ability_value();
}
inline void CMsgDOTAMatch_Player::_internal_set_support_ability_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.support_ability_value_ = value;
}
inline void CMsgDOTAMatch_Player::set_support_ability_value(uint32_t value) {
  _internal_set_support_ability_value(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.support_ability_value)
}

// optional bool feeding_detected = 32;
inline bool CMsgDOTAMatch_Player::_internal_has_feeding_detected() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_feeding_detected() const {
  return _internal_has_feeding_detected();
}
inline void CMsgDOTAMatch_Player::clear_feeding_detected() {
  _impl_.feeding_detected_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool CMsgDOTAMatch_Player::_internal_feeding_detected() const {
  return _impl_.feeding_detected_;
}
inline bool CMsgDOTAMatch_Player::feeding_detected() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.feeding_detected)
  return _internal_feeding_detected();
}
inline void CMsgDOTAMatch_Player::_internal_set_feeding_detected(bool value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.feeding_detected_ = value;
}
inline void CMsgDOTAMatch_Player::set_feeding_detected(bool value) {
  _internal_set_feeding_detected(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.feeding_detected)
}

// optional uint32 search_rank = 34;
inline bool CMsgDOTAMatch_Player::_internal_has_search_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_search_rank() const {
  return _internal_has_search_rank();
}
inline void CMsgDOTAMatch_Player::clear_search_rank() {
  _impl_.search_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_search_rank() const {
  return _impl_.search_rank_;
}
inline uint32_t CMsgDOTAMatch_Player::search_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.search_rank)
  return _internal_search_rank();
}
inline void CMsgDOTAMatch_Player::_internal_set_search_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.search_rank_ = value;
}
inline void CMsgDOTAMatch_Player::set_search_rank(uint32_t value) {
  _internal_set_search_rank(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.search_rank)
}

// optional uint32 search_rank_uncertainty = 35;
inline bool CMsgDOTAMatch_Player::_internal_has_search_rank_uncertainty() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_search_rank_uncertainty() const {
  return _internal_has_search_rank_uncertainty();
}
inline void CMsgDOTAMatch_Player::clear_search_rank_uncertainty() {
  _impl_.search_rank_uncertainty_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_search_rank_uncertainty() const {
  return _impl_.search_rank_uncertainty_;
}
inline uint32_t CMsgDOTAMatch_Player::search_rank_uncertainty() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.search_rank_uncertainty)
  return _internal_search_rank_uncertainty();
}
inline void CMsgDOTAMatch_Player::_internal_set_search_rank_uncertainty(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.search_rank_uncertainty_ = value;
}
inline void CMsgDOTAMatch_Player::set_search_rank_uncertainty(uint32_t value) {
  _internal_set_search_rank_uncertainty(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.search_rank_uncertainty)
}

// optional int32 rank_uncertainty_change = 36;
inline bool CMsgDOTAMatch_Player::_internal_has_rank_uncertainty_change() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_rank_uncertainty_change() const {
  return _internal_has_rank_uncertainty_change();
}
inline void CMsgDOTAMatch_Player::clear_rank_uncertainty_change() {
  _impl_.rank_uncertainty_change_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline int32_t CMsgDOTAMatch_Player::_internal_rank_uncertainty_change() const {
  return _impl_.rank_uncertainty_change_;
}
inline int32_t CMsgDOTAMatch_Player::rank_uncertainty_change() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.rank_uncertainty_change)
  return _internal_rank_uncertainty_change();
}
inline void CMsgDOTAMatch_Player::_internal_set_rank_uncertainty_change(int32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.rank_uncertainty_change_ = value;
}
inline void CMsgDOTAMatch_Player::set_rank_uncertainty_change(int32_t value) {
  _internal_set_rank_uncertainty_change(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.rank_uncertainty_change)
}

// optional uint32 hero_play_count = 37;
inline bool CMsgDOTAMatch_Player::_internal_has_hero_play_count() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_hero_play_count() const {
  return _internal_has_hero_play_count();
}
inline void CMsgDOTAMatch_Player::clear_hero_play_count() {
  _impl_.hero_play_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_hero_play_count() const {
  return _impl_.hero_play_count_;
}
inline uint32_t CMsgDOTAMatch_Player::hero_play_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_play_count)
  return _internal_hero_play_count();
}
inline void CMsgDOTAMatch_Player::_internal_set_hero_play_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.hero_play_count_ = value;
}
inline void CMsgDOTAMatch_Player::set_hero_play_count(uint32_t value) {
  _internal_set_hero_play_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_play_count)
}

// optional fixed64 party_id = 38;
inline bool CMsgDOTAMatch_Player::_internal_has_party_id() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgDOTAMatch_Player::clear_party_id() {
  _impl_.party_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint64_t CMsgDOTAMatch_Player::_internal_party_id() const {
  return _impl_.party_id_;
}
inline uint64_t CMsgDOTAMatch_Player::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.party_id)
  return _internal_party_id();
}
inline void CMsgDOTAMatch_Player::_internal_set_party_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.party_id_ = value;
}
inline void CMsgDOTAMatch_Player::set_party_id(uint64_t value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.party_id)
}

// optional uint32 scaled_hero_damage = 54;
inline bool CMsgDOTAMatch_Player::_internal_has_scaled_hero_damage() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_scaled_hero_damage() const {
  return _internal_has_scaled_hero_damage();
}
inline void CMsgDOTAMatch_Player::clear_scaled_hero_damage() {
  _impl_.scaled_hero_damage_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_scaled_hero_damage() const {
  return _impl_.scaled_hero_damage_;
}
inline uint32_t CMsgDOTAMatch_Player::scaled_hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_hero_damage)
  return _internal_scaled_hero_damage();
}
inline void CMsgDOTAMatch_Player::_internal_set_scaled_hero_damage(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.scaled_hero_damage_ = value;
}
inline void CMsgDOTAMatch_Player::set_scaled_hero_damage(uint32_t value) {
  _internal_set_scaled_hero_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_hero_damage)
}

// optional uint32 scaled_tower_damage = 55;
inline bool CMsgDOTAMatch_Player::_internal_has_scaled_tower_damage() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_scaled_tower_damage() const {
  return _internal_has_scaled_tower_damage();
}
inline void CMsgDOTAMatch_Player::clear_scaled_tower_damage() {
  _impl_.scaled_tower_damage_ = 0u;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_scaled_tower_damage() const {
  return _impl_.scaled_tower_damage_;
}
inline uint32_t CMsgDOTAMatch_Player::scaled_tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_tower_damage)
  return _internal_scaled_tower_damage();
}
inline void CMsgDOTAMatch_Player::_internal_set_scaled_tower_damage(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.scaled_tower_damage_ = value;
}
inline void CMsgDOTAMatch_Player::set_scaled_tower_damage(uint32_t value) {
  _internal_set_scaled_tower_damage(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_tower_damage)
}

// optional uint32 scaled_hero_healing = 56;
inline bool CMsgDOTAMatch_Player::_internal_has_scaled_hero_healing() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_scaled_hero_healing() const {
  return _internal_has_scaled_hero_healing();
}
inline void CMsgDOTAMatch_Player::clear_scaled_hero_healing() {
  _impl_.scaled_hero_healing_ = 0u;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_scaled_hero_healing() const {
  return _impl_.scaled_hero_healing_;
}
inline uint32_t CMsgDOTAMatch_Player::scaled_hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_hero_healing)
  return _internal_scaled_hero_healing();
}
inline void CMsgDOTAMatch_Player::_internal_set_scaled_hero_healing(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.scaled_hero_healing_ = value;
}
inline void CMsgDOTAMatch_Player::set_scaled_hero_healing(uint32_t value) {
  _internal_set_scaled_hero_healing(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_hero_healing)
}

// optional float scaled_kills = 39;
inline bool CMsgDOTAMatch_Player::_internal_has_scaled_kills() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_scaled_kills() const {
  return _internal_has_scaled_kills();
}
inline void CMsgDOTAMatch_Player::clear_scaled_kills() {
  _impl_.scaled_kills_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float CMsgDOTAMatch_Player::_internal_scaled_kills() const {
  return _impl_.scaled_kills_;
}
inline float CMsgDOTAMatch_Player::scaled_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_kills)
  return _internal_scaled_kills();
}
inline void CMsgDOTAMatch_Player::_internal_set_scaled_kills(float value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.scaled_kills_ = value;
}
inline void CMsgDOTAMatch_Player::set_scaled_kills(float value) {
  _internal_set_scaled_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_kills)
}

// optional float scaled_deaths = 40;
inline bool CMsgDOTAMatch_Player::_internal_has_scaled_deaths() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_scaled_deaths() const {
  return _internal_has_scaled_deaths();
}
inline void CMsgDOTAMatch_Player::clear_scaled_deaths() {
  _impl_.scaled_deaths_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline float CMsgDOTAMatch_Player::_internal_scaled_deaths() const {
  return _impl_.scaled_deaths_;
}
inline float CMsgDOTAMatch_Player::scaled_deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_deaths)
  return _internal_scaled_deaths();
}
inline void CMsgDOTAMatch_Player::_internal_set_scaled_deaths(float value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.scaled_deaths_ = value;
}
inline void CMsgDOTAMatch_Player::set_scaled_deaths(float value) {
  _internal_set_scaled_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_deaths)
}

// optional float scaled_assists = 41;
inline bool CMsgDOTAMatch_Player::_internal_has_scaled_assists() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_scaled_assists() const {
  return _internal_has_scaled_assists();
}
inline void CMsgDOTAMatch_Player::clear_scaled_assists() {
  _impl_.scaled_assists_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline float CMsgDOTAMatch_Player::_internal_scaled_assists() const {
  return _impl_.scaled_assists_;
}
inline float CMsgDOTAMatch_Player::scaled_assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.scaled_assists)
  return _internal_scaled_assists();
}
inline void CMsgDOTAMatch_Player::_internal_set_scaled_assists(float value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.scaled_assists_ = value;
}
inline void CMsgDOTAMatch_Player::set_scaled_assists(float value) {
  _internal_set_scaled_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.scaled_assists)
}

// optional uint32 claimed_farm_gold = 42;
inline bool CMsgDOTAMatch_Player::_internal_has_claimed_farm_gold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_claimed_farm_gold() const {
  return _internal_has_claimed_farm_gold();
}
inline void CMsgDOTAMatch_Player::clear_claimed_farm_gold() {
  _impl_.claimed_farm_gold_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_claimed_farm_gold() const {
  return _impl_.claimed_farm_gold_;
}
inline uint32_t CMsgDOTAMatch_Player::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_farm_gold)
  return _internal_claimed_farm_gold();
}
inline void CMsgDOTAMatch_Player::_internal_set_claimed_farm_gold(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.claimed_farm_gold_ = value;
}
inline void CMsgDOTAMatch_Player::set_claimed_farm_gold(uint32_t value) {
  _internal_set_claimed_farm_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_farm_gold)
}

// optional uint32 support_gold = 43;
inline bool CMsgDOTAMatch_Player::_internal_has_support_gold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_support_gold() const {
  return _internal_has_support_gold();
}
inline void CMsgDOTAMatch_Player::clear_support_gold() {
  _impl_.support_gold_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_support_gold() const {
  return _impl_.support_gold_;
}
inline uint32_t CMsgDOTAMatch_Player::support_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.support_gold)
  return _internal_support_gold();
}
inline void CMsgDOTAMatch_Player::_internal_set_support_gold(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.support_gold_ = value;
}
inline void CMsgDOTAMatch_Player::set_support_gold(uint32_t value) {
  _internal_set_support_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.support_gold)
}

// optional uint32 claimed_denies = 44;
inline bool CMsgDOTAMatch_Player::_internal_has_claimed_denies() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_claimed_denies() const {
  return _internal_has_claimed_denies();
}
inline void CMsgDOTAMatch_Player::clear_claimed_denies() {
  _impl_.claimed_denies_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_claimed_denies() const {
  return _impl_.claimed_denies_;
}
inline uint32_t CMsgDOTAMatch_Player::claimed_denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_denies)
  return _internal_claimed_denies();
}
inline void CMsgDOTAMatch_Player::_internal_set_claimed_denies(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.claimed_denies_ = value;
}
inline void CMsgDOTAMatch_Player::set_claimed_denies(uint32_t value) {
  _internal_set_claimed_denies(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_denies)
}

// optional uint32 claimed_misses = 45;
inline bool CMsgDOTAMatch_Player::_internal_has_claimed_misses() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_claimed_misses() const {
  return _internal_has_claimed_misses();
}
inline void CMsgDOTAMatch_Player::clear_claimed_misses() {
  _impl_.claimed_misses_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_claimed_misses() const {
  return _impl_.claimed_misses_;
}
inline uint32_t CMsgDOTAMatch_Player::claimed_misses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.claimed_misses)
  return _internal_claimed_misses();
}
inline void CMsgDOTAMatch_Player::_internal_set_claimed_misses(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.claimed_misses_ = value;
}
inline void CMsgDOTAMatch_Player::set_claimed_misses(uint32_t value) {
  _internal_set_claimed_misses(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.claimed_misses)
}

// optional uint32 misses = 46;
inline bool CMsgDOTAMatch_Player::_internal_has_misses() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_misses() const {
  return _internal_has_misses();
}
inline void CMsgDOTAMatch_Player::clear_misses() {
  _impl_.misses_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_misses() const {
  return _impl_.misses_;
}
inline uint32_t CMsgDOTAMatch_Player::misses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.misses)
  return _internal_misses();
}
inline void CMsgDOTAMatch_Player::_internal_set_misses(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.misses_ = value;
}
inline void CMsgDOTAMatch_Player::set_misses(uint32_t value) {
  _internal_set_misses(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.misses)
}

// repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
inline int CMsgDOTAMatch_Player::_internal_ability_upgrades_size() const {
  return _impl_.ability_upgrades_.size();
}
inline int CMsgDOTAMatch_Player::ability_upgrades_size() const {
  return _internal_ability_upgrades_size();
}
inline void CMsgDOTAMatch_Player::clear_ability_upgrades() {
  _impl_.ability_upgrades_.Clear();
}
inline ::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.ability_upgrades)
  return _impl_.ability_upgrades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
CMsgDOTAMatch_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.ability_upgrades)
  return &_impl_.ability_upgrades_;
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgDOTAMatch_Player::_internal_ability_upgrades(int index) const {
  return _impl_.ability_upgrades_.Get(index);
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgDOTAMatch_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.ability_upgrades)
  return _internal_ability_upgrades(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::_internal_add_ability_upgrades() {
  return _impl_.ability_upgrades_.Add();
}
inline ::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::add_ability_upgrades() {
  ::CMatchPlayerAbilityUpgrade* _add = _internal_add_ability_upgrades();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.ability_upgrades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
CMsgDOTAMatch_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.ability_upgrades)
  return _impl_.ability_upgrades_;
}

// repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
inline int CMsgDOTAMatch_Player::_internal_additional_units_inventory_size() const {
  return _impl_.additional_units_inventory_.size();
}
inline int CMsgDOTAMatch_Player::additional_units_inventory_size() const {
  return _internal_additional_units_inventory_size();
}
inline void CMsgDOTAMatch_Player::clear_additional_units_inventory() {
  _impl_.additional_units_inventory_.Clear();
}
inline ::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.additional_units_inventory)
  return _impl_.additional_units_inventory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
CMsgDOTAMatch_Player::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.additional_units_inventory)
  return &_impl_.additional_units_inventory_;
}
inline const ::CMatchAdditionalUnitInventory& CMsgDOTAMatch_Player::_internal_additional_units_inventory(int index) const {
  return _impl_.additional_units_inventory_.Get(index);
}
inline const ::CMatchAdditionalUnitInventory& CMsgDOTAMatch_Player::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.additional_units_inventory)
  return _internal_additional_units_inventory(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::_internal_add_additional_units_inventory() {
  return _impl_.additional_units_inventory_.Add();
}
inline ::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::add_additional_units_inventory() {
  ::CMatchAdditionalUnitInventory* _add = _internal_add_additional_units_inventory();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.additional_units_inventory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
CMsgDOTAMatch_Player::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.additional_units_inventory)
  return _impl_.additional_units_inventory_;
}

// repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
inline int CMsgDOTAMatch_Player::_internal_permanent_buffs_size() const {
  return _impl_.permanent_buffs_.size();
}
inline int CMsgDOTAMatch_Player::permanent_buffs_size() const {
  return _internal_permanent_buffs_size();
}
inline void CMsgDOTAMatch_Player::clear_permanent_buffs() {
  _impl_.permanent_buffs_.Clear();
}
inline ::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::mutable_permanent_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.permanent_buffs)
  return _impl_.permanent_buffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >*
CMsgDOTAMatch_Player::mutable_permanent_buffs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.permanent_buffs)
  return &_impl_.permanent_buffs_;
}
inline const ::CMatchPlayerPermanentBuff& CMsgDOTAMatch_Player::_internal_permanent_buffs(int index) const {
  return _impl_.permanent_buffs_.Get(index);
}
inline const ::CMatchPlayerPermanentBuff& CMsgDOTAMatch_Player::permanent_buffs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.permanent_buffs)
  return _internal_permanent_buffs(index);
}
inline ::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::_internal_add_permanent_buffs() {
  return _impl_.permanent_buffs_.Add();
}
inline ::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::add_permanent_buffs() {
  ::CMatchPlayerPermanentBuff* _add = _internal_add_permanent_buffs();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.permanent_buffs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >&
CMsgDOTAMatch_Player::permanent_buffs() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.permanent_buffs)
  return _impl_.permanent_buffs_;
}

// optional string pro_name = 72;
inline bool CMsgDOTAMatch_Player::_internal_has_pro_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_pro_name() const {
  return _internal_has_pro_name();
}
inline void CMsgDOTAMatch_Player::clear_pro_name() {
  _impl_.pro_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAMatch_Player::pro_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.pro_name)
  return _internal_pro_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_Player::set_pro_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pro_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.pro_name)
}
inline std::string* CMsgDOTAMatch_Player::mutable_pro_name() {
  std::string* _s = _internal_mutable_pro_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.pro_name)
  return _s;
}
inline const std::string& CMsgDOTAMatch_Player::_internal_pro_name() const {
  return _impl_.pro_name_.Get();
}
inline void CMsgDOTAMatch_Player::_internal_set_pro_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pro_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Player::_internal_mutable_pro_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pro_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Player::release_pro_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.Player.pro_name)
  if (!_internal_has_pro_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pro_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pro_name_.IsDefault()) {
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_Player::set_allocated_pro_name(std::string* pro_name) {
  if (pro_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pro_name_.SetAllocated(pro_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pro_name_.IsDefault()) {
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Player.pro_name)
}

// optional string real_name = 73;
inline bool CMsgDOTAMatch_Player::_internal_has_real_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_real_name() const {
  return _internal_has_real_name();
}
inline void CMsgDOTAMatch_Player::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAMatch_Player::real_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.real_name)
  return _internal_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_Player::set_real_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.real_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.real_name)
}
inline std::string* CMsgDOTAMatch_Player::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.real_name)
  return _s;
}
inline const std::string& CMsgDOTAMatch_Player::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void CMsgDOTAMatch_Player::_internal_set_real_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Player::_internal_mutable_real_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.real_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Player::release_real_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.Player.real_name)
  if (!_internal_has_real_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.real_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.real_name_.IsDefault()) {
    _impl_.real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_Player::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.real_name_.SetAllocated(real_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.real_name_.IsDefault()) {
    _impl_.real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Player.real_name)
}

// optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
inline bool CMsgDOTAMatch_Player::_internal_has_custom_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_game_data_ != nullptr);
  return value;
}
inline bool CMsgDOTAMatch_Player::has_custom_game_data() const {
  return _internal_has_custom_game_data();
}
inline void CMsgDOTAMatch_Player::clear_custom_game_data() {
  if (_impl_.custom_game_data_ != nullptr) _impl_.custom_game_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player::_internal_custom_game_data() const {
  const ::CMsgDOTAMatch_Player_CustomGameData* p = _impl_.custom_game_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAMatch_Player_CustomGameData&>(
      ::_CMsgDOTAMatch_Player_CustomGameData_default_instance_);
}
inline const ::CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player::custom_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.custom_game_data)
  return _internal_custom_game_data();
}
inline void CMsgDOTAMatch_Player::unsafe_arena_set_allocated_custom_game_data(
    ::CMsgDOTAMatch_Player_CustomGameData* custom_game_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_game_data_);
  }
  _impl_.custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAMatch.Player.custom_game_data)
}
inline ::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::release_custom_game_data() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgDOTAMatch_Player_CustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::unsafe_arena_release_custom_game_data() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.Player.custom_game_data)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgDOTAMatch_Player_CustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
  return temp;
}
inline ::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::_internal_mutable_custom_game_data() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.custom_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAMatch_Player_CustomGameData>(GetArenaForAllocation());
    _impl_.custom_game_data_ = p;
  }
  return _impl_.custom_game_data_;
}
inline ::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::mutable_custom_game_data() {
  ::CMsgDOTAMatch_Player_CustomGameData* _msg = _internal_mutable_custom_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.custom_game_data)
  return _msg;
}
inline void CMsgDOTAMatch_Player::set_allocated_custom_game_data(::CMsgDOTAMatch_Player_CustomGameData* custom_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_game_data_;
  }
  if (custom_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_game_data);
    if (message_arena != submessage_arena) {
      custom_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_game_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.custom_game_data_ = custom_game_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Player.custom_game_data)
}

// optional bool active_plus_subscription = 51;
inline bool CMsgDOTAMatch_Player::_internal_has_active_plus_subscription() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_active_plus_subscription() const {
  return _internal_has_active_plus_subscription();
}
inline void CMsgDOTAMatch_Player::clear_active_plus_subscription() {
  _impl_.active_plus_subscription_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool CMsgDOTAMatch_Player::_internal_active_plus_subscription() const {
  return _impl_.active_plus_subscription_;
}
inline bool CMsgDOTAMatch_Player::active_plus_subscription() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.active_plus_subscription)
  return _internal_active_plus_subscription();
}
inline void CMsgDOTAMatch_Player::_internal_set_active_plus_subscription(bool value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.active_plus_subscription_ = value;
}
inline void CMsgDOTAMatch_Player::set_active_plus_subscription(bool value) {
  _internal_set_active_plus_subscription(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.active_plus_subscription)
}

// optional uint32 net_worth = 52;
inline bool CMsgDOTAMatch_Player::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgDOTAMatch_Player::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgDOTAMatch_Player::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.net_worth)
  return _internal_net_worth();
}
inline void CMsgDOTAMatch_Player::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.net_worth_ = value;
}
inline void CMsgDOTAMatch_Player::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.net_worth)
}

// optional uint32 bot_difficulty = 58;
inline bool CMsgDOTAMatch_Player::_internal_has_bot_difficulty() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_bot_difficulty() const {
  return _internal_has_bot_difficulty();
}
inline void CMsgDOTAMatch_Player::clear_bot_difficulty() {
  _impl_.bot_difficulty_ = 0u;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_bot_difficulty() const {
  return _impl_.bot_difficulty_;
}
inline uint32_t CMsgDOTAMatch_Player::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.bot_difficulty)
  return _internal_bot_difficulty();
}
inline void CMsgDOTAMatch_Player::_internal_set_bot_difficulty(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.bot_difficulty_ = value;
}
inline void CMsgDOTAMatch_Player::set_bot_difficulty(uint32_t value) {
  _internal_set_bot_difficulty(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.bot_difficulty)
}

// optional uint32 hero_pick_order = 63;
inline bool CMsgDOTAMatch_Player::_internal_has_hero_pick_order() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_hero_pick_order() const {
  return _internal_has_hero_pick_order();
}
inline void CMsgDOTAMatch_Player::clear_hero_pick_order() {
  _impl_.hero_pick_order_ = 0u;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_hero_pick_order() const {
  return _impl_.hero_pick_order_;
}
inline uint32_t CMsgDOTAMatch_Player::hero_pick_order() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_pick_order)
  return _internal_hero_pick_order();
}
inline void CMsgDOTAMatch_Player::_internal_set_hero_pick_order(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.hero_pick_order_ = value;
}
inline void CMsgDOTAMatch_Player::set_hero_pick_order(uint32_t value) {
  _internal_set_hero_pick_order(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_pick_order)
}

// optional bool hero_was_randomed = 64;
inline bool CMsgDOTAMatch_Player::_internal_has_hero_was_randomed() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_hero_was_randomed() const {
  return _internal_has_hero_was_randomed();
}
inline void CMsgDOTAMatch_Player::clear_hero_was_randomed() {
  _impl_.hero_was_randomed_ = false;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline bool CMsgDOTAMatch_Player::_internal_hero_was_randomed() const {
  return _impl_.hero_was_randomed_;
}
inline bool CMsgDOTAMatch_Player::hero_was_randomed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_was_randomed)
  return _internal_hero_was_randomed();
}
inline void CMsgDOTAMatch_Player::_internal_set_hero_was_randomed(bool value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.hero_was_randomed_ = value;
}
inline void CMsgDOTAMatch_Player::set_hero_was_randomed(bool value) {
  _internal_set_hero_was_randomed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_was_randomed)
}

// optional bool hero_was_dota_plus_suggestion = 69;
inline bool CMsgDOTAMatch_Player::_internal_has_hero_was_dota_plus_suggestion() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_hero_was_dota_plus_suggestion() const {
  return _internal_has_hero_was_dota_plus_suggestion();
}
inline void CMsgDOTAMatch_Player::clear_hero_was_dota_plus_suggestion() {
  _impl_.hero_was_dota_plus_suggestion_ = false;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline bool CMsgDOTAMatch_Player::_internal_hero_was_dota_plus_suggestion() const {
  return _impl_.hero_was_dota_plus_suggestion_;
}
inline bool CMsgDOTAMatch_Player::hero_was_dota_plus_suggestion() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_was_dota_plus_suggestion)
  return _internal_hero_was_dota_plus_suggestion();
}
inline void CMsgDOTAMatch_Player::_internal_set_hero_was_dota_plus_suggestion(bool value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.hero_was_dota_plus_suggestion_ = value;
}
inline void CMsgDOTAMatch_Player::set_hero_was_dota_plus_suggestion(bool value) {
  _internal_set_hero_was_dota_plus_suggestion(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.hero_was_dota_plus_suggestion)
}

// repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_received = 67;
inline int CMsgDOTAMatch_Player::_internal_hero_damage_received_size() const {
  return _impl_.hero_damage_received_.size();
}
inline int CMsgDOTAMatch_Player::hero_damage_received_size() const {
  return _internal_hero_damage_received_size();
}
inline void CMsgDOTAMatch_Player::clear_hero_damage_received() {
  _impl_.hero_damage_received_.Clear();
}
inline ::CMsgDOTAMatch_Player_HeroDamageReceived* CMsgDOTAMatch_Player::mutable_hero_damage_received(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.hero_damage_received)
  return _impl_.hero_damage_received_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >*
CMsgDOTAMatch_Player::mutable_hero_damage_received() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.hero_damage_received)
  return &_impl_.hero_damage_received_;
}
inline const ::CMsgDOTAMatch_Player_HeroDamageReceived& CMsgDOTAMatch_Player::_internal_hero_damage_received(int index) const {
  return _impl_.hero_damage_received_.Get(index);
}
inline const ::CMsgDOTAMatch_Player_HeroDamageReceived& CMsgDOTAMatch_Player::hero_damage_received(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_damage_received)
  return _internal_hero_damage_received(index);
}
inline ::CMsgDOTAMatch_Player_HeroDamageReceived* CMsgDOTAMatch_Player::_internal_add_hero_damage_received() {
  return _impl_.hero_damage_received_.Add();
}
inline ::CMsgDOTAMatch_Player_HeroDamageReceived* CMsgDOTAMatch_Player::add_hero_damage_received() {
  ::CMsgDOTAMatch_Player_HeroDamageReceived* _add = _internal_add_hero_damage_received();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.hero_damage_received)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >&
CMsgDOTAMatch_Player::hero_damage_received() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.hero_damage_received)
  return _impl_.hero_damage_received_;
}

// repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_dealt = 79;
inline int CMsgDOTAMatch_Player::_internal_hero_damage_dealt_size() const {
  return _impl_.hero_damage_dealt_.size();
}
inline int CMsgDOTAMatch_Player::hero_damage_dealt_size() const {
  return _internal_hero_damage_dealt_size();
}
inline void CMsgDOTAMatch_Player::clear_hero_damage_dealt() {
  _impl_.hero_damage_dealt_.Clear();
}
inline ::CMsgDOTAMatch_Player_HeroDamageReceived* CMsgDOTAMatch_Player::mutable_hero_damage_dealt(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Player.hero_damage_dealt)
  return _impl_.hero_damage_dealt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >*
CMsgDOTAMatch_Player::mutable_hero_damage_dealt() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.Player.hero_damage_dealt)
  return &_impl_.hero_damage_dealt_;
}
inline const ::CMsgDOTAMatch_Player_HeroDamageReceived& CMsgDOTAMatch_Player::_internal_hero_damage_dealt(int index) const {
  return _impl_.hero_damage_dealt_.Get(index);
}
inline const ::CMsgDOTAMatch_Player_HeroDamageReceived& CMsgDOTAMatch_Player::hero_damage_dealt(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.hero_damage_dealt)
  return _internal_hero_damage_dealt(index);
}
inline ::CMsgDOTAMatch_Player_HeroDamageReceived* CMsgDOTAMatch_Player::_internal_add_hero_damage_dealt() {
  return _impl_.hero_damage_dealt_.Add();
}
inline ::CMsgDOTAMatch_Player_HeroDamageReceived* CMsgDOTAMatch_Player::add_hero_damage_dealt() {
  ::CMsgDOTAMatch_Player_HeroDamageReceived* _add = _internal_add_hero_damage_dealt();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.Player.hero_damage_dealt)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player_HeroDamageReceived >&
CMsgDOTAMatch_Player::hero_damage_dealt() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.Player.hero_damage_dealt)
  return _impl_.hero_damage_dealt_;
}

// optional uint32 seconds_dead = 70;
inline bool CMsgDOTAMatch_Player::_internal_has_seconds_dead() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_seconds_dead() const {
  return _internal_has_seconds_dead();
}
inline void CMsgDOTAMatch_Player::clear_seconds_dead() {
  _impl_.seconds_dead_ = 0u;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_seconds_dead() const {
  return _impl_.seconds_dead_;
}
inline uint32_t CMsgDOTAMatch_Player::seconds_dead() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.seconds_dead)
  return _internal_seconds_dead();
}
inline void CMsgDOTAMatch_Player::_internal_set_seconds_dead(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.seconds_dead_ = value;
}
inline void CMsgDOTAMatch_Player::set_seconds_dead(uint32_t value) {
  _internal_set_seconds_dead(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.seconds_dead)
}

// optional uint32 gold_lost_to_death = 71;
inline bool CMsgDOTAMatch_Player::_internal_has_gold_lost_to_death() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_gold_lost_to_death() const {
  return _internal_has_gold_lost_to_death();
}
inline void CMsgDOTAMatch_Player::clear_gold_lost_to_death() {
  _impl_.gold_lost_to_death_ = 0u;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_gold_lost_to_death() const {
  return _impl_.gold_lost_to_death_;
}
inline uint32_t CMsgDOTAMatch_Player::gold_lost_to_death() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.gold_lost_to_death)
  return _internal_gold_lost_to_death();
}
inline void CMsgDOTAMatch_Player::_internal_set_gold_lost_to_death(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.gold_lost_to_death_ = value;
}
inline void CMsgDOTAMatch_Player::set_gold_lost_to_death(uint32_t value) {
  _internal_set_gold_lost_to_death(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.gold_lost_to_death)
}

// optional uint32 lane_selection_flags = 75;
inline bool CMsgDOTAMatch_Player::_internal_has_lane_selection_flags() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CMsgDOTAMatch_Player::clear_lane_selection_flags() {
  _impl_.lane_selection_flags_ = 0u;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_lane_selection_flags() const {
  return _impl_.lane_selection_flags_;
}
inline uint32_t CMsgDOTAMatch_Player::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CMsgDOTAMatch_Player::_internal_set_lane_selection_flags(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.lane_selection_flags_ = value;
}
inline void CMsgDOTAMatch_Player::set_lane_selection_flags(uint32_t value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.lane_selection_flags)
}

// optional uint32 bounty_runes = 77;
inline bool CMsgDOTAMatch_Player::_internal_has_bounty_runes() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_bounty_runes() const {
  return _internal_has_bounty_runes();
}
inline void CMsgDOTAMatch_Player::clear_bounty_runes() {
  _impl_.bounty_runes_ = 0u;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_bounty_runes() const {
  return _impl_.bounty_runes_;
}
inline uint32_t CMsgDOTAMatch_Player::bounty_runes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.bounty_runes)
  return _internal_bounty_runes();
}
inline void CMsgDOTAMatch_Player::_internal_set_bounty_runes(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.bounty_runes_ = value;
}
inline void CMsgDOTAMatch_Player::set_bounty_runes(uint32_t value) {
  _internal_set_bounty_runes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.bounty_runes)
}

// optional uint32 outposts_captured = 78;
inline bool CMsgDOTAMatch_Player::_internal_has_outposts_captured() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_outposts_captured() const {
  return _internal_has_outposts_captured();
}
inline void CMsgDOTAMatch_Player::clear_outposts_captured() {
  _impl_.outposts_captured_ = 0u;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_outposts_captured() const {
  return _impl_.outposts_captured_;
}
inline uint32_t CMsgDOTAMatch_Player::outposts_captured() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.outposts_captured)
  return _internal_outposts_captured();
}
inline void CMsgDOTAMatch_Player::_internal_set_outposts_captured(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.outposts_captured_ = value;
}
inline void CMsgDOTAMatch_Player::set_outposts_captured(uint32_t value) {
  _internal_set_outposts_captured(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.outposts_captured)
}

// optional .DOTA_GC_TEAM team_number = 80 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgDOTAMatch_Player::_internal_has_team_number() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_team_number() const {
  return _internal_has_team_number();
}
inline void CMsgDOTAMatch_Player::clear_team_number() {
  _impl_.team_number_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::DOTA_GC_TEAM CMsgDOTAMatch_Player::_internal_team_number() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.team_number_);
}
inline ::DOTA_GC_TEAM CMsgDOTAMatch_Player::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.team_number)
  return _internal_team_number();
}
inline void CMsgDOTAMatch_Player::_internal_set_team_number(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.team_number_ = value;
}
inline void CMsgDOTAMatch_Player::set_team_number(::DOTA_GC_TEAM value) {
  _internal_set_team_number(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.team_number)
}

// optional uint32 team_slot = 81;
inline bool CMsgDOTAMatch_Player::_internal_has_team_slot() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Player::has_team_slot() const {
  return _internal_has_team_slot();
}
inline void CMsgDOTAMatch_Player::clear_team_slot() {
  _impl_.team_slot_ = 0u;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline uint32_t CMsgDOTAMatch_Player::_internal_team_slot() const {
  return _impl_.team_slot_;
}
inline uint32_t CMsgDOTAMatch_Player::team_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Player.team_slot)
  return _internal_team_slot();
}
inline void CMsgDOTAMatch_Player::_internal_set_team_slot(uint32_t value) {
  _impl_._has_bits_[1] |= 0x02000000u;
  _impl_.team_slot_ = value;
}
inline void CMsgDOTAMatch_Player::set_team_slot(uint32_t value) {
  _internal_set_team_slot(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Player.team_slot)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_BroadcasterInfo

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_BroadcasterInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_BroadcasterInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAMatch_BroadcasterInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAMatch_BroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterInfo.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAMatch_BroadcasterInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterInfo.account_id)
}

// optional string name = 2;
inline bool CMsgDOTAMatch_BroadcasterInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_BroadcasterInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTAMatch_BroadcasterInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatch_BroadcasterInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_BroadcasterInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterInfo.name)
}
inline std::string* CMsgDOTAMatch_BroadcasterInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterInfo.name)
  return _s;
}
inline const std::string& CMsgDOTAMatch_BroadcasterInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTAMatch_BroadcasterInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.BroadcasterInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_BroadcasterInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterInfo.name)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_BroadcasterChannel

// optional string country_code = 1;
inline bool CMsgDOTAMatch_BroadcasterChannel::_internal_has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_BroadcasterChannel::has_country_code() const {
  return _internal_has_country_code();
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatch_BroadcasterChannel::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_BroadcasterChannel::set_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterChannel.country_code)
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.country_code)
  return _s;
}
inline const std::string& CMsgDOTAMatch_BroadcasterChannel::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void CMsgDOTAMatch_BroadcasterChannel::_internal_set_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::_internal_mutable_country_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.BroadcasterChannel.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterChannel.country_code)
}

// optional string description = 2;
inline bool CMsgDOTAMatch_BroadcasterChannel::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_BroadcasterChannel::has_description() const {
  return _internal_has_description();
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAMatch_BroadcasterChannel::description() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_BroadcasterChannel::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterChannel.description)
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.description)
  return _s;
}
inline const std::string& CMsgDOTAMatch_BroadcasterChannel::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CMsgDOTAMatch_BroadcasterChannel::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::release_description() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.BroadcasterChannel.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterChannel.description)
}

// repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
inline int CMsgDOTAMatch_BroadcasterChannel::_internal_broadcaster_infos_size() const {
  return _impl_.broadcaster_infos_.size();
}
inline int CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos_size() const {
  return _internal_broadcaster_infos_size();
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_broadcaster_infos() {
  _impl_.broadcaster_infos_.Clear();
}
inline ::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return _impl_.broadcaster_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >*
CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return &_impl_.broadcaster_infos_;
}
inline const ::CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterChannel::_internal_broadcaster_infos(int index) const {
  return _impl_.broadcaster_infos_.Get(index);
}
inline const ::CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return _internal_broadcaster_infos(index);
}
inline ::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::_internal_add_broadcaster_infos() {
  return _impl_.broadcaster_infos_.Add();
}
inline ::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::add_broadcaster_infos() {
  ::CMsgDOTAMatch_BroadcasterInfo* _add = _internal_add_broadcaster_infos();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterInfo >&
CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return _impl_.broadcaster_infos_;
}

// optional string language_code = 4;
inline bool CMsgDOTAMatch_BroadcasterChannel::_internal_has_language_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_BroadcasterChannel::has_language_code() const {
  return _internal_has_language_code();
}
inline void CMsgDOTAMatch_BroadcasterChannel::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAMatch_BroadcasterChannel::language_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.BroadcasterChannel.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_BroadcasterChannel::set_language_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.BroadcasterChannel.language_code)
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.BroadcasterChannel.language_code)
  return _s;
}
inline const std::string& CMsgDOTAMatch_BroadcasterChannel::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void CMsgDOTAMatch_BroadcasterChannel::_internal_set_language_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::_internal_mutable_language_code() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_BroadcasterChannel::release_language_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.BroadcasterChannel.language_code)
  if (!_internal_has_language_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_BroadcasterChannel::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.BroadcasterChannel.language_code)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_Coach

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatch_Coach::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Coach::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAMatch_Coach::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAMatch_Coach::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAMatch_Coach::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Coach.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAMatch_Coach::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAMatch_Coach::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Coach.account_id)
}

// optional string coach_name = 2;
inline bool CMsgDOTAMatch_Coach::_internal_has_coach_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Coach::has_coach_name() const {
  return _internal_has_coach_name();
}
inline void CMsgDOTAMatch_Coach::clear_coach_name() {
  _impl_.coach_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatch_Coach::coach_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Coach.coach_name)
  return _internal_coach_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_Coach::set_coach_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.coach_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Coach.coach_name)
}
inline std::string* CMsgDOTAMatch_Coach::mutable_coach_name() {
  std::string* _s = _internal_mutable_coach_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.Coach.coach_name)
  return _s;
}
inline const std::string& CMsgDOTAMatch_Coach::_internal_coach_name() const {
  return _impl_.coach_name_.Get();
}
inline void CMsgDOTAMatch_Coach::_internal_set_coach_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.coach_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Coach::_internal_mutable_coach_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.coach_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_Coach::release_coach_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.Coach.coach_name)
  if (!_internal_has_coach_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.coach_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coach_name_.IsDefault()) {
    _impl_.coach_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_Coach::set_allocated_coach_name(std::string* coach_name) {
  if (coach_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.coach_name_.SetAllocated(coach_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coach_name_.IsDefault()) {
    _impl_.coach_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.Coach.coach_name)
}

// optional uint32 coach_rating = 3;
inline bool CMsgDOTAMatch_Coach::_internal_has_coach_rating() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Coach::has_coach_rating() const {
  return _internal_has_coach_rating();
}
inline void CMsgDOTAMatch_Coach::clear_coach_rating() {
  _impl_.coach_rating_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAMatch_Coach::_internal_coach_rating() const {
  return _impl_.coach_rating_;
}
inline uint32_t CMsgDOTAMatch_Coach::coach_rating() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Coach.coach_rating)
  return _internal_coach_rating();
}
inline void CMsgDOTAMatch_Coach::_internal_set_coach_rating(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.coach_rating_ = value;
}
inline void CMsgDOTAMatch_Coach::set_coach_rating(uint32_t value) {
  _internal_set_coach_rating(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Coach.coach_rating)
}

// optional uint32 coach_team = 4;
inline bool CMsgDOTAMatch_Coach::_internal_has_coach_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Coach::has_coach_team() const {
  return _internal_has_coach_team();
}
inline void CMsgDOTAMatch_Coach::clear_coach_team() {
  _impl_.coach_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAMatch_Coach::_internal_coach_team() const {
  return _impl_.coach_team_;
}
inline uint32_t CMsgDOTAMatch_Coach::coach_team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Coach.coach_team)
  return _internal_coach_team();
}
inline void CMsgDOTAMatch_Coach::_internal_set_coach_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.coach_team_ = value;
}
inline void CMsgDOTAMatch_Coach::set_coach_team(uint32_t value) {
  _internal_set_coach_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Coach.coach_team)
}

// optional uint64 coach_party_id = 5;
inline bool CMsgDOTAMatch_Coach::_internal_has_coach_party_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Coach::has_coach_party_id() const {
  return _internal_has_coach_party_id();
}
inline void CMsgDOTAMatch_Coach::clear_coach_party_id() {
  _impl_.coach_party_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgDOTAMatch_Coach::_internal_coach_party_id() const {
  return _impl_.coach_party_id_;
}
inline uint64_t CMsgDOTAMatch_Coach::coach_party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Coach.coach_party_id)
  return _internal_coach_party_id();
}
inline void CMsgDOTAMatch_Coach::_internal_set_coach_party_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.coach_party_id_ = value;
}
inline void CMsgDOTAMatch_Coach::set_coach_party_id(uint64_t value) {
  _internal_set_coach_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Coach.coach_party_id)
}

// optional bool is_private_coach = 6;
inline bool CMsgDOTAMatch_Coach::_internal_has_is_private_coach() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_Coach::has_is_private_coach() const {
  return _internal_has_is_private_coach();
}
inline void CMsgDOTAMatch_Coach::clear_is_private_coach() {
  _impl_.is_private_coach_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgDOTAMatch_Coach::_internal_is_private_coach() const {
  return _impl_.is_private_coach_;
}
inline bool CMsgDOTAMatch_Coach::is_private_coach() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.Coach.is_private_coach)
  return _internal_is_private_coach();
}
inline void CMsgDOTAMatch_Coach::_internal_set_is_private_coach(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_private_coach_ = value;
}
inline void CMsgDOTAMatch_Coach::set_is_private_coach(bool value) {
  _internal_set_is_private_coach(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.Coach.is_private_coach)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch_CustomGameData

// optional uint64 custom_game_id = 1;
inline bool CMsgDOTAMatch_CustomGameData::_internal_has_custom_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_CustomGameData::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgDOTAMatch_CustomGameData::clear_custom_game_id() {
  _impl_.custom_game_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAMatch_CustomGameData::_internal_custom_game_id() const {
  return _impl_.custom_game_id_;
}
inline uint64_t CMsgDOTAMatch_CustomGameData::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.CustomGameData.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgDOTAMatch_CustomGameData::_internal_set_custom_game_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.custom_game_id_ = value;
}
inline void CMsgDOTAMatch_CustomGameData::set_custom_game_id(uint64_t value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.CustomGameData.custom_game_id)
}

// optional string map_name = 2;
inline bool CMsgDOTAMatch_CustomGameData::_internal_has_map_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch_CustomGameData::has_map_name() const {
  return _internal_has_map_name();
}
inline void CMsgDOTAMatch_CustomGameData::clear_map_name() {
  _impl_.map_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatch_CustomGameData::map_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.CustomGameData.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch_CustomGameData::set_map_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.CustomGameData.map_name)
}
inline std::string* CMsgDOTAMatch_CustomGameData::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.CustomGameData.map_name)
  return _s;
}
inline const std::string& CMsgDOTAMatch_CustomGameData::_internal_map_name() const {
  return _impl_.map_name_.Get();
}
inline void CMsgDOTAMatch_CustomGameData::_internal_set_map_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_CustomGameData::_internal_mutable_map_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch_CustomGameData::release_map_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.CustomGameData.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.map_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch_CustomGameData::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.map_name_.SetAllocated(map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.CustomGameData.map_name)
}

// -------------------------------------------------------------------

// CMsgDOTAMatch

// optional uint32 duration = 3;
inline bool CMsgDOTAMatch::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgDOTAMatch::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAMatch::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgDOTAMatch::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.duration)
  return _internal_duration();
}
inline void CMsgDOTAMatch::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.duration_ = value;
}
inline void CMsgDOTAMatch::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.duration)
}

// optional fixed32 starttime = 4;
inline bool CMsgDOTAMatch::_internal_has_starttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_starttime() const {
  return _internal_has_starttime();
}
inline void CMsgDOTAMatch::clear_starttime() {
  _impl_.starttime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAMatch::_internal_starttime() const {
  return _impl_.starttime_;
}
inline uint32_t CMsgDOTAMatch::starttime() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.starttime)
  return _internal_starttime();
}
inline void CMsgDOTAMatch::_internal_set_starttime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.starttime_ = value;
}
inline void CMsgDOTAMatch::set_starttime(uint32_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.starttime)
}

// repeated .CMsgDOTAMatch.Player players = 5;
inline int CMsgDOTAMatch::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgDOTAMatch::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTAMatch::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgDOTAMatch_Player* CMsgDOTAMatch::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player >*
CMsgDOTAMatch::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.players)
  return &_impl_.players_;
}
inline const ::CMsgDOTAMatch_Player& CMsgDOTAMatch::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgDOTAMatch_Player& CMsgDOTAMatch::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.players)
  return _internal_players(index);
}
inline ::CMsgDOTAMatch_Player* CMsgDOTAMatch::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgDOTAMatch_Player* CMsgDOTAMatch::add_players() {
  ::CMsgDOTAMatch_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Player >&
CMsgDOTAMatch::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.players)
  return _impl_.players_;
}

// optional uint64 match_id = 6;
inline bool CMsgDOTAMatch::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTAMatch::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgDOTAMatch::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTAMatch::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_id)
  return _internal_match_id();
}
inline void CMsgDOTAMatch::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTAMatch::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_id)
}

// repeated uint32 tower_status = 8;
inline int CMsgDOTAMatch::_internal_tower_status_size() const {
  return _impl_.tower_status_.size();
}
inline int CMsgDOTAMatch::tower_status_size() const {
  return _internal_tower_status_size();
}
inline void CMsgDOTAMatch::clear_tower_status() {
  _impl_.tower_status_.Clear();
}
inline uint32_t CMsgDOTAMatch::_internal_tower_status(int index) const {
  return _impl_.tower_status_.Get(index);
}
inline uint32_t CMsgDOTAMatch::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.tower_status)
  return _internal_tower_status(index);
}
inline void CMsgDOTAMatch::set_tower_status(int index, uint32_t value) {
  _impl_.tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.tower_status)
}
inline void CMsgDOTAMatch::_internal_add_tower_status(uint32_t value) {
  _impl_.tower_status_.Add(value);
}
inline void CMsgDOTAMatch::add_tower_status(uint32_t value) {
  _internal_add_tower_status(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.tower_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAMatch::_internal_tower_status() const {
  return _impl_.tower_status_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAMatch::tower_status() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.tower_status)
  return _internal_tower_status();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAMatch::_internal_mutable_tower_status() {
  return &_impl_.tower_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAMatch::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.tower_status)
  return _internal_mutable_tower_status();
}

// repeated uint32 barracks_status = 9;
inline int CMsgDOTAMatch::_internal_barracks_status_size() const {
  return _impl_.barracks_status_.size();
}
inline int CMsgDOTAMatch::barracks_status_size() const {
  return _internal_barracks_status_size();
}
inline void CMsgDOTAMatch::clear_barracks_status() {
  _impl_.barracks_status_.Clear();
}
inline uint32_t CMsgDOTAMatch::_internal_barracks_status(int index) const {
  return _impl_.barracks_status_.Get(index);
}
inline uint32_t CMsgDOTAMatch::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.barracks_status)
  return _internal_barracks_status(index);
}
inline void CMsgDOTAMatch::set_barracks_status(int index, uint32_t value) {
  _impl_.barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.barracks_status)
}
inline void CMsgDOTAMatch::_internal_add_barracks_status(uint32_t value) {
  _impl_.barracks_status_.Add(value);
}
inline void CMsgDOTAMatch::add_barracks_status(uint32_t value) {
  _internal_add_barracks_status(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.barracks_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAMatch::_internal_barracks_status() const {
  return _impl_.barracks_status_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAMatch::barracks_status() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.barracks_status)
  return _internal_barracks_status();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAMatch::_internal_mutable_barracks_status() {
  return &_impl_.barracks_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAMatch::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.barracks_status)
  return _internal_mutable_barracks_status();
}

// optional uint32 cluster = 10;
inline bool CMsgDOTAMatch::_internal_has_cluster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_cluster() const {
  return _internal_has_cluster();
}
inline void CMsgDOTAMatch::clear_cluster() {
  _impl_.cluster_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAMatch::_internal_cluster() const {
  return _impl_.cluster_;
}
inline uint32_t CMsgDOTAMatch::cluster() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.cluster)
  return _internal_cluster();
}
inline void CMsgDOTAMatch::_internal_set_cluster(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.cluster_ = value;
}
inline void CMsgDOTAMatch::set_cluster(uint32_t value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.cluster)
}

// optional uint32 first_blood_time = 12;
inline bool CMsgDOTAMatch::_internal_has_first_blood_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_first_blood_time() const {
  return _internal_has_first_blood_time();
}
inline void CMsgDOTAMatch::clear_first_blood_time() {
  _impl_.first_blood_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDOTAMatch::_internal_first_blood_time() const {
  return _impl_.first_blood_time_;
}
inline uint32_t CMsgDOTAMatch::first_blood_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.first_blood_time)
  return _internal_first_blood_time();
}
inline void CMsgDOTAMatch::_internal_set_first_blood_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.first_blood_time_ = value;
}
inline void CMsgDOTAMatch::set_first_blood_time(uint32_t value) {
  _internal_set_first_blood_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.first_blood_time)
}

// optional fixed32 replay_salt = 13;
inline bool CMsgDOTAMatch::_internal_has_replay_salt() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_replay_salt() const {
  return _internal_has_replay_salt();
}
inline void CMsgDOTAMatch::clear_replay_salt() {
  _impl_.replay_salt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTAMatch::_internal_replay_salt() const {
  return _impl_.replay_salt_;
}
inline uint32_t CMsgDOTAMatch::replay_salt() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.replay_salt)
  return _internal_replay_salt();
}
inline void CMsgDOTAMatch::_internal_set_replay_salt(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.replay_salt_ = value;
}
inline void CMsgDOTAMatch::set_replay_salt(uint32_t value) {
  _internal_set_replay_salt(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.replay_salt)
}

// optional fixed32 server_ip = 14;
inline bool CMsgDOTAMatch::_internal_has_server_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_server_ip() const {
  return _internal_has_server_ip();
}
inline void CMsgDOTAMatch::clear_server_ip() {
  _impl_.server_ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAMatch::_internal_server_ip() const {
  return _impl_.server_ip_;
}
inline uint32_t CMsgDOTAMatch::server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.server_ip)
  return _internal_server_ip();
}
inline void CMsgDOTAMatch::_internal_set_server_ip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.server_ip_ = value;
}
inline void CMsgDOTAMatch::set_server_ip(uint32_t value) {
  _internal_set_server_ip(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.server_ip)
}

// optional uint32 server_port = 15;
inline bool CMsgDOTAMatch::_internal_has_server_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgDOTAMatch::clear_server_port() {
  _impl_.server_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDOTAMatch::_internal_server_port() const {
  return _impl_.server_port_;
}
inline uint32_t CMsgDOTAMatch::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.server_port)
  return _internal_server_port();
}
inline void CMsgDOTAMatch::_internal_set_server_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.server_port_ = value;
}
inline void CMsgDOTAMatch::set_server_port(uint32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.server_port)
}

// optional uint32 lobby_type = 16;
inline bool CMsgDOTAMatch::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgDOTAMatch::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDOTAMatch::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgDOTAMatch::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgDOTAMatch::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.lobby_type_ = value;
}
inline void CMsgDOTAMatch::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.lobby_type)
}

// optional uint32 human_players = 17;
inline bool CMsgDOTAMatch::_internal_has_human_players() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_human_players() const {
  return _internal_has_human_players();
}
inline void CMsgDOTAMatch::clear_human_players() {
  _impl_.human_players_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgDOTAMatch::_internal_human_players() const {
  return _impl_.human_players_;
}
inline uint32_t CMsgDOTAMatch::human_players() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.human_players)
  return _internal_human_players();
}
inline void CMsgDOTAMatch::_internal_set_human_players(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.human_players_ = value;
}
inline void CMsgDOTAMatch::set_human_players(uint32_t value) {
  _internal_set_human_players(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.human_players)
}

// optional uint32 average_skill = 18;
inline bool CMsgDOTAMatch::_internal_has_average_skill() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_average_skill() const {
  return _internal_has_average_skill();
}
inline void CMsgDOTAMatch::clear_average_skill() {
  _impl_.average_skill_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgDOTAMatch::_internal_average_skill() const {
  return _impl_.average_skill_;
}
inline uint32_t CMsgDOTAMatch::average_skill() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.average_skill)
  return _internal_average_skill();
}
inline void CMsgDOTAMatch::_internal_set_average_skill(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.average_skill_ = value;
}
inline void CMsgDOTAMatch::set_average_skill(uint32_t value) {
  _internal_set_average_skill(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.average_skill)
}

// optional float game_balance = 19;
inline bool CMsgDOTAMatch::_internal_has_game_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_game_balance() const {
  return _internal_has_game_balance();
}
inline void CMsgDOTAMatch::clear_game_balance() {
  _impl_.game_balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float CMsgDOTAMatch::_internal_game_balance() const {
  return _impl_.game_balance_;
}
inline float CMsgDOTAMatch::game_balance() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.game_balance)
  return _internal_game_balance();
}
inline void CMsgDOTAMatch::_internal_set_game_balance(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.game_balance_ = value;
}
inline void CMsgDOTAMatch::set_game_balance(float value) {
  _internal_set_game_balance(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.game_balance)
}

// optional uint32 radiant_team_id = 20;
inline bool CMsgDOTAMatch::_internal_has_radiant_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_team_id() const {
  return _internal_has_radiant_team_id();
}
inline void CMsgDOTAMatch::clear_radiant_team_id() {
  _impl_.radiant_team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgDOTAMatch::_internal_radiant_team_id() const {
  return _impl_.radiant_team_id_;
}
inline uint32_t CMsgDOTAMatch::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_id)
  return _internal_radiant_team_id();
}
inline void CMsgDOTAMatch::_internal_set_radiant_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.radiant_team_id_ = value;
}
inline void CMsgDOTAMatch::set_radiant_team_id(uint32_t value) {
  _internal_set_radiant_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_id)
}

// optional uint32 dire_team_id = 21;
inline bool CMsgDOTAMatch::_internal_has_dire_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_team_id() const {
  return _internal_has_dire_team_id();
}
inline void CMsgDOTAMatch::clear_dire_team_id() {
  _impl_.dire_team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgDOTAMatch::_internal_dire_team_id() const {
  return _impl_.dire_team_id_;
}
inline uint32_t CMsgDOTAMatch::dire_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_id)
  return _internal_dire_team_id();
}
inline void CMsgDOTAMatch::_internal_set_dire_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.dire_team_id_ = value;
}
inline void CMsgDOTAMatch::set_dire_team_id(uint32_t value) {
  _internal_set_dire_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_id)
}

// optional uint32 leagueid = 22;
inline bool CMsgDOTAMatch::_internal_has_leagueid() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_leagueid() const {
  return _internal_has_leagueid();
}
inline void CMsgDOTAMatch::clear_leagueid() {
  _impl_.leagueid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgDOTAMatch::_internal_leagueid() const {
  return _impl_.leagueid_;
}
inline uint32_t CMsgDOTAMatch::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.leagueid)
  return _internal_leagueid();
}
inline void CMsgDOTAMatch::_internal_set_leagueid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.leagueid_ = value;
}
inline void CMsgDOTAMatch::set_leagueid(uint32_t value) {
  _internal_set_leagueid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.leagueid)
}

// optional string radiant_team_name = 23;
inline bool CMsgDOTAMatch::_internal_has_radiant_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_team_name() const {
  return _internal_has_radiant_team_name();
}
inline void CMsgDOTAMatch::clear_radiant_team_name() {
  _impl_.radiant_team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatch::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_name)
  return _internal_radiant_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch::set_radiant_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.radiant_team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_name)
}
inline std::string* CMsgDOTAMatch::mutable_radiant_team_name() {
  std::string* _s = _internal_mutable_radiant_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.radiant_team_name)
  return _s;
}
inline const std::string& CMsgDOTAMatch::_internal_radiant_team_name() const {
  return _impl_.radiant_team_name_.Get();
}
inline void CMsgDOTAMatch::_internal_set_radiant_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.radiant_team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::_internal_mutable_radiant_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.radiant_team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.radiant_team_name)
  if (!_internal_has_radiant_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.radiant_team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_name_.IsDefault()) {
    _impl_.radiant_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_name(std::string* radiant_team_name) {
  if (radiant_team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.radiant_team_name_.SetAllocated(radiant_team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_name_.IsDefault()) {
    _impl_.radiant_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.radiant_team_name)
}

// optional string dire_team_name = 24;
inline bool CMsgDOTAMatch::_internal_has_dire_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_team_name() const {
  return _internal_has_dire_team_name();
}
inline void CMsgDOTAMatch::clear_dire_team_name() {
  _impl_.dire_team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAMatch::dire_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_name)
  return _internal_dire_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch::set_dire_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.dire_team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_name)
}
inline std::string* CMsgDOTAMatch::mutable_dire_team_name() {
  std::string* _s = _internal_mutable_dire_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.dire_team_name)
  return _s;
}
inline const std::string& CMsgDOTAMatch::_internal_dire_team_name() const {
  return _impl_.dire_team_name_.Get();
}
inline void CMsgDOTAMatch::_internal_set_dire_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dire_team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::_internal_mutable_dire_team_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.dire_team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.dire_team_name)
  if (!_internal_has_dire_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.dire_team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_name_.IsDefault()) {
    _impl_.dire_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch::set_allocated_dire_team_name(std::string* dire_team_name) {
  if (dire_team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dire_team_name_.SetAllocated(dire_team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_name_.IsDefault()) {
    _impl_.dire_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.dire_team_name)
}

// optional uint64 radiant_team_logo = 25;
inline bool CMsgDOTAMatch::_internal_has_radiant_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_team_logo() const {
  return _internal_has_radiant_team_logo();
}
inline void CMsgDOTAMatch::clear_radiant_team_logo() {
  _impl_.radiant_team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint64_t CMsgDOTAMatch::_internal_radiant_team_logo() const {
  return _impl_.radiant_team_logo_;
}
inline uint64_t CMsgDOTAMatch::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_logo)
  return _internal_radiant_team_logo();
}
inline void CMsgDOTAMatch::_internal_set_radiant_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.radiant_team_logo_ = value;
}
inline void CMsgDOTAMatch::set_radiant_team_logo(uint64_t value) {
  _internal_set_radiant_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_logo)
}

// optional uint64 dire_team_logo = 26;
inline bool CMsgDOTAMatch::_internal_has_dire_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_team_logo() const {
  return _internal_has_dire_team_logo();
}
inline void CMsgDOTAMatch::clear_dire_team_logo() {
  _impl_.dire_team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint64_t CMsgDOTAMatch::_internal_dire_team_logo() const {
  return _impl_.dire_team_logo_;
}
inline uint64_t CMsgDOTAMatch::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_logo)
  return _internal_dire_team_logo();
}
inline void CMsgDOTAMatch::_internal_set_dire_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.dire_team_logo_ = value;
}
inline void CMsgDOTAMatch::set_dire_team_logo(uint64_t value) {
  _internal_set_dire_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_logo)
}

// optional string radiant_team_logo_url = 54;
inline bool CMsgDOTAMatch::_internal_has_radiant_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_team_logo_url() const {
  return _internal_has_radiant_team_logo_url();
}
inline void CMsgDOTAMatch::clear_radiant_team_logo_url() {
  _impl_.radiant_team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgDOTAMatch::radiant_team_logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_logo_url)
  return _internal_radiant_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch::set_radiant_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.radiant_team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_logo_url)
}
inline std::string* CMsgDOTAMatch::mutable_radiant_team_logo_url() {
  std::string* _s = _internal_mutable_radiant_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.radiant_team_logo_url)
  return _s;
}
inline const std::string& CMsgDOTAMatch::_internal_radiant_team_logo_url() const {
  return _impl_.radiant_team_logo_url_.Get();
}
inline void CMsgDOTAMatch::_internal_set_radiant_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.radiant_team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::_internal_mutable_radiant_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.radiant_team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::release_radiant_team_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.radiant_team_logo_url)
  if (!_internal_has_radiant_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.radiant_team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_logo_url_.IsDefault()) {
    _impl_.radiant_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_logo_url(std::string* radiant_team_logo_url) {
  if (radiant_team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.radiant_team_logo_url_.SetAllocated(radiant_team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_logo_url_.IsDefault()) {
    _impl_.radiant_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.radiant_team_logo_url)
}

// optional string dire_team_logo_url = 55;
inline bool CMsgDOTAMatch::_internal_has_dire_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_team_logo_url() const {
  return _internal_has_dire_team_logo_url();
}
inline void CMsgDOTAMatch::clear_dire_team_logo_url() {
  _impl_.dire_team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgDOTAMatch::dire_team_logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_logo_url)
  return _internal_dire_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch::set_dire_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.dire_team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_logo_url)
}
inline std::string* CMsgDOTAMatch::mutable_dire_team_logo_url() {
  std::string* _s = _internal_mutable_dire_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.dire_team_logo_url)
  return _s;
}
inline const std::string& CMsgDOTAMatch::_internal_dire_team_logo_url() const {
  return _impl_.dire_team_logo_url_.Get();
}
inline void CMsgDOTAMatch::_internal_set_dire_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dire_team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::_internal_mutable_dire_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.dire_team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::release_dire_team_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.dire_team_logo_url)
  if (!_internal_has_dire_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.dire_team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_logo_url_.IsDefault()) {
    _impl_.dire_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch::set_allocated_dire_team_logo_url(std::string* dire_team_logo_url) {
  if (dire_team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.dire_team_logo_url_.SetAllocated(dire_team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_logo_url_.IsDefault()) {
    _impl_.dire_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.dire_team_logo_url)
}

// optional uint32 radiant_team_complete = 27;
inline bool CMsgDOTAMatch::_internal_has_radiant_team_complete() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_team_complete() const {
  return _internal_has_radiant_team_complete();
}
inline void CMsgDOTAMatch::clear_radiant_team_complete() {
  _impl_.radiant_team_complete_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMsgDOTAMatch::_internal_radiant_team_complete() const {
  return _impl_.radiant_team_complete_;
}
inline uint32_t CMsgDOTAMatch::radiant_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_complete)
  return _internal_radiant_team_complete();
}
inline void CMsgDOTAMatch::_internal_set_radiant_team_complete(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.radiant_team_complete_ = value;
}
inline void CMsgDOTAMatch::set_radiant_team_complete(uint32_t value) {
  _internal_set_radiant_team_complete(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_complete)
}

// optional uint32 dire_team_complete = 28;
inline bool CMsgDOTAMatch::_internal_has_dire_team_complete() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_team_complete() const {
  return _internal_has_dire_team_complete();
}
inline void CMsgDOTAMatch::clear_dire_team_complete() {
  _impl_.dire_team_complete_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgDOTAMatch::_internal_dire_team_complete() const {
  return _impl_.dire_team_complete_;
}
inline uint32_t CMsgDOTAMatch::dire_team_complete() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_complete)
  return _internal_dire_team_complete();
}
inline void CMsgDOTAMatch::_internal_set_dire_team_complete(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.dire_team_complete_ = value;
}
inline void CMsgDOTAMatch::set_dire_team_complete(uint32_t value) {
  _internal_set_dire_team_complete(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_complete)
}

// optional uint32 positive_votes = 29;
inline bool CMsgDOTAMatch::_internal_has_positive_votes() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_positive_votes() const {
  return _internal_has_positive_votes();
}
inline void CMsgDOTAMatch::clear_positive_votes() {
  _impl_.positive_votes_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgDOTAMatch::_internal_positive_votes() const {
  return _impl_.positive_votes_;
}
inline uint32_t CMsgDOTAMatch::positive_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.positive_votes)
  return _internal_positive_votes();
}
inline void CMsgDOTAMatch::_internal_set_positive_votes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.positive_votes_ = value;
}
inline void CMsgDOTAMatch::set_positive_votes(uint32_t value) {
  _internal_set_positive_votes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.positive_votes)
}

// optional uint32 negative_votes = 30;
inline bool CMsgDOTAMatch::_internal_has_negative_votes() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_negative_votes() const {
  return _internal_has_negative_votes();
}
inline void CMsgDOTAMatch::clear_negative_votes() {
  _impl_.negative_votes_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgDOTAMatch::_internal_negative_votes() const {
  return _impl_.negative_votes_;
}
inline uint32_t CMsgDOTAMatch::negative_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.negative_votes)
  return _internal_negative_votes();
}
inline void CMsgDOTAMatch::_internal_set_negative_votes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.negative_votes_ = value;
}
inline void CMsgDOTAMatch::set_negative_votes(uint32_t value) {
  _internal_set_negative_votes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.negative_votes)
}

// optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatch::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgDOTAMatch::clear_game_mode() {
  _impl_.game_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::DOTA_GameMode CMsgDOTAMatch::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(_impl_.game_mode_);
}
inline ::DOTA_GameMode CMsgDOTAMatch::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.game_mode)
  return _internal_game_mode();
}
inline void CMsgDOTAMatch::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.game_mode_ = value;
}
inline void CMsgDOTAMatch::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.game_mode)
}

// repeated .CMatchHeroSelectEvent picks_bans = 32;
inline int CMsgDOTAMatch::_internal_picks_bans_size() const {
  return _impl_.picks_bans_.size();
}
inline int CMsgDOTAMatch::picks_bans_size() const {
  return _internal_picks_bans_size();
}
inline void CMsgDOTAMatch::clear_picks_bans() {
  _impl_.picks_bans_.Clear();
}
inline ::CMatchHeroSelectEvent* CMsgDOTAMatch::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.picks_bans)
  return _impl_.picks_bans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >*
CMsgDOTAMatch::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.picks_bans)
  return &_impl_.picks_bans_;
}
inline const ::CMatchHeroSelectEvent& CMsgDOTAMatch::_internal_picks_bans(int index) const {
  return _impl_.picks_bans_.Get(index);
}
inline const ::CMatchHeroSelectEvent& CMsgDOTAMatch::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.picks_bans)
  return _internal_picks_bans(index);
}
inline ::CMatchHeroSelectEvent* CMsgDOTAMatch::_internal_add_picks_bans() {
  return _impl_.picks_bans_.Add();
}
inline ::CMatchHeroSelectEvent* CMsgDOTAMatch::add_picks_bans() {
  ::CMatchHeroSelectEvent* _add = _internal_add_picks_bans();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.picks_bans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >&
CMsgDOTAMatch::picks_bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.picks_bans)
  return _impl_.picks_bans_;
}

// optional uint64 match_seq_num = 33;
inline bool CMsgDOTAMatch::_internal_has_match_seq_num() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_match_seq_num() const {
  return _internal_has_match_seq_num();
}
inline void CMsgDOTAMatch::clear_match_seq_num() {
  _impl_.match_seq_num_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint64_t CMsgDOTAMatch::_internal_match_seq_num() const {
  return _impl_.match_seq_num_;
}
inline uint64_t CMsgDOTAMatch::match_seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_seq_num)
  return _internal_match_seq_num();
}
inline void CMsgDOTAMatch::_internal_set_match_seq_num(uint64_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.match_seq_num_ = value;
}
inline void CMsgDOTAMatch::set_match_seq_num(uint64_t value) {
  _internal_set_match_seq_num(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_seq_num)
}

// optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
inline bool CMsgDOTAMatch::_internal_has_replay_state() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_replay_state() const {
  return _internal_has_replay_state();
}
inline void CMsgDOTAMatch::clear_replay_state() {
  _impl_.replay_state_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::CMsgDOTAMatch_ReplayState CMsgDOTAMatch::_internal_replay_state() const {
  return static_cast< ::CMsgDOTAMatch_ReplayState >(_impl_.replay_state_);
}
inline ::CMsgDOTAMatch_ReplayState CMsgDOTAMatch::replay_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.replay_state)
  return _internal_replay_state();
}
inline void CMsgDOTAMatch::_internal_set_replay_state(::CMsgDOTAMatch_ReplayState value) {
  assert(::CMsgDOTAMatch_ReplayState_IsValid(value));
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.replay_state_ = value;
}
inline void CMsgDOTAMatch::set_replay_state(::CMsgDOTAMatch_ReplayState value) {
  _internal_set_replay_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.replay_state)
}

// optional uint32 radiant_guild_id = 35;
inline bool CMsgDOTAMatch::_internal_has_radiant_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_guild_id() const {
  return _internal_has_radiant_guild_id();
}
inline void CMsgDOTAMatch::clear_radiant_guild_id() {
  _impl_.radiant_guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CMsgDOTAMatch::_internal_radiant_guild_id() const {
  return _impl_.radiant_guild_id_;
}
inline uint32_t CMsgDOTAMatch::radiant_guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_guild_id)
  return _internal_radiant_guild_id();
}
inline void CMsgDOTAMatch::_internal_set_radiant_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.radiant_guild_id_ = value;
}
inline void CMsgDOTAMatch::set_radiant_guild_id(uint32_t value) {
  _internal_set_radiant_guild_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_guild_id)
}

// optional uint32 dire_guild_id = 36;
inline bool CMsgDOTAMatch::_internal_has_dire_guild_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_guild_id() const {
  return _internal_has_dire_guild_id();
}
inline void CMsgDOTAMatch::clear_dire_guild_id() {
  _impl_.dire_guild_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAMatch::_internal_dire_guild_id() const {
  return _impl_.dire_guild_id_;
}
inline uint32_t CMsgDOTAMatch::dire_guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_guild_id)
  return _internal_dire_guild_id();
}
inline void CMsgDOTAMatch::_internal_set_dire_guild_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.dire_guild_id_ = value;
}
inline void CMsgDOTAMatch::set_dire_guild_id(uint32_t value) {
  _internal_set_dire_guild_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_guild_id)
}

// optional string radiant_team_tag = 37;
inline bool CMsgDOTAMatch::_internal_has_radiant_team_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_team_tag() const {
  return _internal_has_radiant_team_tag();
}
inline void CMsgDOTAMatch::clear_radiant_team_tag() {
  _impl_.radiant_team_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAMatch::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_tag)
  return _internal_radiant_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch::set_radiant_team_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.radiant_team_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_tag)
}
inline std::string* CMsgDOTAMatch::mutable_radiant_team_tag() {
  std::string* _s = _internal_mutable_radiant_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.radiant_team_tag)
  return _s;
}
inline const std::string& CMsgDOTAMatch::_internal_radiant_team_tag() const {
  return _impl_.radiant_team_tag_.Get();
}
inline void CMsgDOTAMatch::_internal_set_radiant_team_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.radiant_team_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::_internal_mutable_radiant_team_tag() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.radiant_team_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::release_radiant_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.radiant_team_tag)
  if (!_internal_has_radiant_team_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.radiant_team_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_tag_.IsDefault()) {
    _impl_.radiant_team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch::set_allocated_radiant_team_tag(std::string* radiant_team_tag) {
  if (radiant_team_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.radiant_team_tag_.SetAllocated(radiant_team_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_tag_.IsDefault()) {
    _impl_.radiant_team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.radiant_team_tag)
}

// optional string dire_team_tag = 38;
inline bool CMsgDOTAMatch::_internal_has_dire_team_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_team_tag() const {
  return _internal_has_dire_team_tag();
}
inline void CMsgDOTAMatch::clear_dire_team_tag() {
  _impl_.dire_team_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgDOTAMatch::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_tag)
  return _internal_dire_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatch::set_dire_team_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.dire_team_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_tag)
}
inline std::string* CMsgDOTAMatch::mutable_dire_team_tag() {
  std::string* _s = _internal_mutable_dire_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.dire_team_tag)
  return _s;
}
inline const std::string& CMsgDOTAMatch::_internal_dire_team_tag() const {
  return _impl_.dire_team_tag_.Get();
}
inline void CMsgDOTAMatch::_internal_set_dire_team_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dire_team_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::_internal_mutable_dire_team_tag() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.dire_team_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatch::release_dire_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.dire_team_tag)
  if (!_internal_has_dire_team_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.dire_team_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_tag_.IsDefault()) {
    _impl_.dire_team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatch::set_allocated_dire_team_tag(std::string* dire_team_tag) {
  if (dire_team_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.dire_team_tag_.SetAllocated(dire_team_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_tag_.IsDefault()) {
    _impl_.dire_team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.dire_team_tag)
}

// optional uint32 series_id = 39;
inline bool CMsgDOTAMatch::_internal_has_series_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_series_id() const {
  return _internal_has_series_id();
}
inline void CMsgDOTAMatch::clear_series_id() {
  _impl_.series_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAMatch::_internal_series_id() const {
  return _impl_.series_id_;
}
inline uint32_t CMsgDOTAMatch::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.series_id)
  return _internal_series_id();
}
inline void CMsgDOTAMatch::_internal_set_series_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.series_id_ = value;
}
inline void CMsgDOTAMatch::set_series_id(uint32_t value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.series_id)
}

// optional uint32 series_type = 40;
inline bool CMsgDOTAMatch::_internal_has_series_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_series_type() const {
  return _internal_has_series_type();
}
inline void CMsgDOTAMatch::clear_series_type() {
  _impl_.series_type_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAMatch::_internal_series_type() const {
  return _impl_.series_type_;
}
inline uint32_t CMsgDOTAMatch::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.series_type)
  return _internal_series_type();
}
inline void CMsgDOTAMatch::_internal_set_series_type(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.series_type_ = value;
}
inline void CMsgDOTAMatch::set_series_type(uint32_t value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.series_type)
}

// repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
inline int CMsgDOTAMatch::_internal_broadcaster_channels_size() const {
  return _impl_.broadcaster_channels_.size();
}
inline int CMsgDOTAMatch::broadcaster_channels_size() const {
  return _internal_broadcaster_channels_size();
}
inline void CMsgDOTAMatch::clear_broadcaster_channels() {
  _impl_.broadcaster_channels_.Clear();
}
inline ::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::mutable_broadcaster_channels(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.broadcaster_channels)
  return _impl_.broadcaster_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >*
CMsgDOTAMatch::mutable_broadcaster_channels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.broadcaster_channels)
  return &_impl_.broadcaster_channels_;
}
inline const ::CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch::_internal_broadcaster_channels(int index) const {
  return _impl_.broadcaster_channels_.Get(index);
}
inline const ::CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch::broadcaster_channels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.broadcaster_channels)
  return _internal_broadcaster_channels(index);
}
inline ::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::_internal_add_broadcaster_channels() {
  return _impl_.broadcaster_channels_.Add();
}
inline ::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::add_broadcaster_channels() {
  ::CMsgDOTAMatch_BroadcasterChannel* _add = _internal_add_broadcaster_channels();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.broadcaster_channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_BroadcasterChannel >&
CMsgDOTAMatch::broadcaster_channels() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.broadcaster_channels)
  return _impl_.broadcaster_channels_;
}

// optional uint32 engine = 44;
inline bool CMsgDOTAMatch::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_engine() const {
  return _internal_has_engine();
}
inline void CMsgDOTAMatch::clear_engine() {
  _impl_.engine_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAMatch::_internal_engine() const {
  return _impl_.engine_;
}
inline uint32_t CMsgDOTAMatch::engine() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.engine)
  return _internal_engine();
}
inline void CMsgDOTAMatch::_internal_set_engine(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.engine_ = value;
}
inline void CMsgDOTAMatch::set_engine(uint32_t value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.engine)
}

// optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
inline bool CMsgDOTAMatch::_internal_has_custom_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_game_data_ != nullptr);
  return value;
}
inline bool CMsgDOTAMatch::has_custom_game_data() const {
  return _internal_has_custom_game_data();
}
inline void CMsgDOTAMatch::clear_custom_game_data() {
  if (_impl_.custom_game_data_ != nullptr) _impl_.custom_game_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch::_internal_custom_game_data() const {
  const ::CMsgDOTAMatch_CustomGameData* p = _impl_.custom_game_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAMatch_CustomGameData&>(
      ::_CMsgDOTAMatch_CustomGameData_default_instance_);
}
inline const ::CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch::custom_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.custom_game_data)
  return _internal_custom_game_data();
}
inline void CMsgDOTAMatch::unsafe_arena_set_allocated_custom_game_data(
    ::CMsgDOTAMatch_CustomGameData* custom_game_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_game_data_);
  }
  _impl_.custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAMatch.custom_game_data)
}
inline ::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::release_custom_game_data() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgDOTAMatch_CustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::unsafe_arena_release_custom_game_data() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatch.custom_game_data)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgDOTAMatch_CustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
  return temp;
}
inline ::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::_internal_mutable_custom_game_data() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.custom_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAMatch_CustomGameData>(GetArenaForAllocation());
    _impl_.custom_game_data_ = p;
  }
  return _impl_.custom_game_data_;
}
inline ::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::mutable_custom_game_data() {
  ::CMsgDOTAMatch_CustomGameData* _msg = _internal_mutable_custom_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.custom_game_data)
  return _msg;
}
inline void CMsgDOTAMatch::set_allocated_custom_game_data(::CMsgDOTAMatch_CustomGameData* custom_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_game_data_;
  }
  if (custom_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_game_data);
    if (message_arena != submessage_arena) {
      custom_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_game_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.custom_game_data_ = custom_game_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatch.custom_game_data)
}

// optional uint32 match_flags = 46;
inline bool CMsgDOTAMatch::_internal_has_match_flags() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_match_flags() const {
  return _internal_has_match_flags();
}
inline void CMsgDOTAMatch::clear_match_flags() {
  _impl_.match_flags_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAMatch::_internal_match_flags() const {
  return _impl_.match_flags_;
}
inline uint32_t CMsgDOTAMatch::match_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_flags)
  return _internal_match_flags();
}
inline void CMsgDOTAMatch::_internal_set_match_flags(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.match_flags_ = value;
}
inline void CMsgDOTAMatch::set_match_flags(uint32_t value) {
  _internal_set_match_flags(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_flags)
}

// optional fixed32 private_metadata_key = 47;
inline bool CMsgDOTAMatch::_internal_has_private_metadata_key() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_private_metadata_key() const {
  return _internal_has_private_metadata_key();
}
inline void CMsgDOTAMatch::clear_private_metadata_key() {
  _impl_.private_metadata_key_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAMatch::_internal_private_metadata_key() const {
  return _impl_.private_metadata_key_;
}
inline uint32_t CMsgDOTAMatch::private_metadata_key() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.private_metadata_key)
  return _internal_private_metadata_key();
}
inline void CMsgDOTAMatch::_internal_set_private_metadata_key(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.private_metadata_key_ = value;
}
inline void CMsgDOTAMatch::set_private_metadata_key(uint32_t value) {
  _internal_set_private_metadata_key(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.private_metadata_key)
}

// optional uint32 radiant_team_score = 48;
inline bool CMsgDOTAMatch::_internal_has_radiant_team_score() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_radiant_team_score() const {
  return _internal_has_radiant_team_score();
}
inline void CMsgDOTAMatch::clear_radiant_team_score() {
  _impl_.radiant_team_score_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAMatch::_internal_radiant_team_score() const {
  return _impl_.radiant_team_score_;
}
inline uint32_t CMsgDOTAMatch::radiant_team_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.radiant_team_score)
  return _internal_radiant_team_score();
}
inline void CMsgDOTAMatch::_internal_set_radiant_team_score(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.radiant_team_score_ = value;
}
inline void CMsgDOTAMatch::set_radiant_team_score(uint32_t value) {
  _internal_set_radiant_team_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.radiant_team_score)
}

// optional uint32 dire_team_score = 49;
inline bool CMsgDOTAMatch::_internal_has_dire_team_score() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_dire_team_score() const {
  return _internal_has_dire_team_score();
}
inline void CMsgDOTAMatch::clear_dire_team_score() {
  _impl_.dire_team_score_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAMatch::_internal_dire_team_score() const {
  return _impl_.dire_team_score_;
}
inline uint32_t CMsgDOTAMatch::dire_team_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.dire_team_score)
  return _internal_dire_team_score();
}
inline void CMsgDOTAMatch::_internal_set_dire_team_score(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.dire_team_score_ = value;
}
inline void CMsgDOTAMatch::set_dire_team_score(uint32_t value) {
  _internal_set_dire_team_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.dire_team_score)
}

// optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
inline bool CMsgDOTAMatch::_internal_has_match_outcome() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_match_outcome() const {
  return _internal_has_match_outcome();
}
inline void CMsgDOTAMatch::clear_match_outcome() {
  _impl_.match_outcome_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::EMatchOutcome CMsgDOTAMatch::_internal_match_outcome() const {
  return static_cast< ::EMatchOutcome >(_impl_.match_outcome_);
}
inline ::EMatchOutcome CMsgDOTAMatch::match_outcome() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.match_outcome)
  return _internal_match_outcome();
}
inline void CMsgDOTAMatch::_internal_set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.match_outcome_ = value;
}
inline void CMsgDOTAMatch::set_match_outcome(::EMatchOutcome value) {
  _internal_set_match_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.match_outcome)
}

// optional uint32 tournament_id = 51;
inline bool CMsgDOTAMatch::_internal_has_tournament_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CMsgDOTAMatch::clear_tournament_id() {
  _impl_.tournament_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline uint32_t CMsgDOTAMatch::_internal_tournament_id() const {
  return _impl_.tournament_id_;
}
inline uint32_t CMsgDOTAMatch::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.tournament_id)
  return _internal_tournament_id();
}
inline void CMsgDOTAMatch::_internal_set_tournament_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.tournament_id_ = value;
}
inline void CMsgDOTAMatch::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.tournament_id)
}

// optional uint32 tournament_round = 52;
inline bool CMsgDOTAMatch::_internal_has_tournament_round() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_tournament_round() const {
  return _internal_has_tournament_round();
}
inline void CMsgDOTAMatch::clear_tournament_round() {
  _impl_.tournament_round_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAMatch::_internal_tournament_round() const {
  return _impl_.tournament_round_;
}
inline uint32_t CMsgDOTAMatch::tournament_round() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.tournament_round)
  return _internal_tournament_round();
}
inline void CMsgDOTAMatch::_internal_set_tournament_round(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.tournament_round_ = value;
}
inline void CMsgDOTAMatch::set_tournament_round(uint32_t value) {
  _internal_set_tournament_round(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.tournament_round)
}

// optional uint32 pre_game_duration = 53;
inline bool CMsgDOTAMatch::_internal_has_pre_game_duration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAMatch::has_pre_game_duration() const {
  return _internal_has_pre_game_duration();
}
inline void CMsgDOTAMatch::clear_pre_game_duration() {
  _impl_.pre_game_duration_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline uint32_t CMsgDOTAMatch::_internal_pre_game_duration() const {
  return _impl_.pre_game_duration_;
}
inline uint32_t CMsgDOTAMatch::pre_game_duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.pre_game_duration)
  return _internal_pre_game_duration();
}
inline void CMsgDOTAMatch::_internal_set_pre_game_duration(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.pre_game_duration_ = value;
}
inline void CMsgDOTAMatch::set_pre_game_duration(uint32_t value) {
  _internal_set_pre_game_duration(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatch.pre_game_duration)
}

// repeated .CMsgDOTAMatch.Coach coaches = 57;
inline int CMsgDOTAMatch::_internal_coaches_size() const {
  return _impl_.coaches_.size();
}
inline int CMsgDOTAMatch::coaches_size() const {
  return _internal_coaches_size();
}
inline void CMsgDOTAMatch::clear_coaches() {
  _impl_.coaches_.Clear();
}
inline ::CMsgDOTAMatch_Coach* CMsgDOTAMatch::mutable_coaches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatch.coaches)
  return _impl_.coaches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Coach >*
CMsgDOTAMatch::mutable_coaches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatch.coaches)
  return &_impl_.coaches_;
}
inline const ::CMsgDOTAMatch_Coach& CMsgDOTAMatch::_internal_coaches(int index) const {
  return _impl_.coaches_.Get(index);
}
inline const ::CMsgDOTAMatch_Coach& CMsgDOTAMatch::coaches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatch.coaches)
  return _internal_coaches(index);
}
inline ::CMsgDOTAMatch_Coach* CMsgDOTAMatch::_internal_add_coaches() {
  return _impl_.coaches_.Add();
}
inline ::CMsgDOTAMatch_Coach* CMsgDOTAMatch::add_coaches() {
  ::CMsgDOTAMatch_Coach* _add = _internal_add_coaches();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatch.coaches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatch_Coach >&
CMsgDOTAMatch::coaches() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatch.coaches)
  return _impl_.coaches_;
}

// -------------------------------------------------------------------

// CMsgPlayerCard_StatModifier

// optional uint32 stat = 1;
inline bool CMsgPlayerCard_StatModifier::_internal_has_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerCard_StatModifier::has_stat() const {
  return _internal_has_stat();
}
inline void CMsgPlayerCard_StatModifier::clear_stat() {
  _impl_.stat_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPlayerCard_StatModifier::_internal_stat() const {
  return _impl_.stat_;
}
inline uint32_t CMsgPlayerCard_StatModifier::stat() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.StatModifier.stat)
  return _internal_stat();
}
inline void CMsgPlayerCard_StatModifier::_internal_set_stat(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stat_ = value;
}
inline void CMsgPlayerCard_StatModifier::set_stat(uint32_t value) {
  _internal_set_stat(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerCard.StatModifier.stat)
}

// optional uint32 value = 2;
inline bool CMsgPlayerCard_StatModifier::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPlayerCard_StatModifier::has_value() const {
  return _internal_has_value();
}
inline void CMsgPlayerCard_StatModifier::clear_value() {
  _impl_.value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPlayerCard_StatModifier::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t CMsgPlayerCard_StatModifier::value() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.StatModifier.value)
  return _internal_value();
}
inline void CMsgPlayerCard_StatModifier::_internal_set_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void CMsgPlayerCard_StatModifier::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerCard.StatModifier.value)
}

// -------------------------------------------------------------------

// CMsgPlayerCard

// optional uint32 account_id = 1;
inline bool CMsgPlayerCard::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerCard::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgPlayerCard::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPlayerCard::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgPlayerCard::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.account_id)
  return _internal_account_id();
}
inline void CMsgPlayerCard::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgPlayerCard::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerCard.account_id)
}

// repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
inline int CMsgPlayerCard::_internal_stat_modifier_size() const {
  return _impl_.stat_modifier_.size();
}
inline int CMsgPlayerCard::stat_modifier_size() const {
  return _internal_stat_modifier_size();
}
inline void CMsgPlayerCard::clear_stat_modifier() {
  _impl_.stat_modifier_.Clear();
}
inline ::CMsgPlayerCard_StatModifier* CMsgPlayerCard::mutable_stat_modifier(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPlayerCard.stat_modifier)
  return _impl_.stat_modifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >*
CMsgPlayerCard::mutable_stat_modifier() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPlayerCard.stat_modifier)
  return &_impl_.stat_modifier_;
}
inline const ::CMsgPlayerCard_StatModifier& CMsgPlayerCard::_internal_stat_modifier(int index) const {
  return _impl_.stat_modifier_.Get(index);
}
inline const ::CMsgPlayerCard_StatModifier& CMsgPlayerCard::stat_modifier(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPlayerCard.stat_modifier)
  return _internal_stat_modifier(index);
}
inline ::CMsgPlayerCard_StatModifier* CMsgPlayerCard::_internal_add_stat_modifier() {
  return _impl_.stat_modifier_.Add();
}
inline ::CMsgPlayerCard_StatModifier* CMsgPlayerCard::add_stat_modifier() {
  ::CMsgPlayerCard_StatModifier* _add = _internal_add_stat_modifier();
  // @@protoc_insertion_point(field_add:CMsgPlayerCard.stat_modifier)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPlayerCard_StatModifier >&
CMsgPlayerCard::stat_modifier() const {
  // @@protoc_insertion_point(field_list:CMsgPlayerCard.stat_modifier)
  return _impl_.stat_modifier_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStats

// optional uint32 player_account_id = 1;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_player_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyPlayerStats::clear_player_account_id() {
  _impl_.player_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_player_account_id() const {
  return _impl_.player_account_id_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_player_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_account_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_player_account_id(uint32_t value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.player_account_id)
}

// optional uint64 match_id = 2;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTAFantasyPlayerStats::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTAFantasyPlayerStats::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.match_id)
  return _internal_match_id();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.match_id)
}

// optional bool match_completed = 3;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_match_completed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_match_completed() const {
  return _internal_has_match_completed();
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_completed() {
  _impl_.match_completed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTAFantasyPlayerStats::_internal_match_completed() const {
  return _impl_.match_completed_;
}
inline bool CMsgDOTAFantasyPlayerStats::match_completed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.match_completed)
  return _internal_match_completed();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_match_completed(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_completed_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_completed(bool value) {
  _internal_set_match_completed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.match_completed)
}

// optional uint32 team_id = 4;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAFantasyPlayerStats::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.team_id)
}

// optional uint32 league_id = 5;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAFantasyPlayerStats::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.league_id)
}

// optional uint32 delay = 6;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_delay() const {
  return _internal_has_delay();
}
inline void CMsgDOTAFantasyPlayerStats::clear_delay() {
  _impl_.delay_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_delay() const {
  return _impl_.delay_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::delay() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.delay)
  return _internal_delay();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_delay(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.delay_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_delay(uint32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.delay)
}

// optional uint32 series_id = 7;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_series_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_series_id() const {
  return _internal_has_series_id();
}
inline void CMsgDOTAFantasyPlayerStats::clear_series_id() {
  _impl_.series_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_series_id() const {
  return _impl_.series_id_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.series_id)
  return _internal_series_id();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_series_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.series_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_series_id(uint32_t value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.series_id)
}

// optional uint32 series_type = 8;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_series_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_series_type() const {
  return _internal_has_series_type();
}
inline void CMsgDOTAFantasyPlayerStats::clear_series_type() {
  _impl_.series_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_series_type() const {
  return _impl_.series_type_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.series_type)
  return _internal_series_type();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_series_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.series_type_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_series_type(uint32_t value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.series_type)
}

// optional uint32 kills = 10;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDOTAFantasyPlayerStats::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.kills)
  return _internal_kills();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.kills_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.kills)
}

// optional uint32 deaths = 11;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgDOTAFantasyPlayerStats::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.deaths)
  return _internal_deaths();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.deaths_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.deaths)
}

// optional uint32 cs = 12;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_cs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_cs() const {
  return _internal_has_cs();
}
inline void CMsgDOTAFantasyPlayerStats::clear_cs() {
  _impl_.cs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_cs() const {
  return _impl_.cs_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::cs() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.cs)
  return _internal_cs();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_cs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.cs_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_cs(uint32_t value) {
  _internal_set_cs(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.cs)
}

// optional float gpm = 13;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_gpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_gpm() const {
  return _internal_has_gpm();
}
inline void CMsgDOTAFantasyPlayerStats::clear_gpm() {
  _impl_.gpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CMsgDOTAFantasyPlayerStats::_internal_gpm() const {
  return _impl_.gpm_;
}
inline float CMsgDOTAFantasyPlayerStats::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.gpm)
  return _internal_gpm();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_gpm(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.gpm_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_gpm(float value) {
  _internal_set_gpm(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.gpm)
}

// optional uint32 tower_kills = 14;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_tower_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_tower_kills() const {
  return _internal_has_tower_kills();
}
inline void CMsgDOTAFantasyPlayerStats::clear_tower_kills() {
  _impl_.tower_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_tower_kills() const {
  return _impl_.tower_kills_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::tower_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.tower_kills)
  return _internal_tower_kills();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_tower_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tower_kills_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_tower_kills(uint32_t value) {
  _internal_set_tower_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.tower_kills)
}

// optional uint32 roshan_kills = 15;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_roshan_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_roshan_kills() const {
  return _internal_has_roshan_kills();
}
inline void CMsgDOTAFantasyPlayerStats::clear_roshan_kills() {
  _impl_.roshan_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_roshan_kills() const {
  return _impl_.roshan_kills_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.roshan_kills)
  return _internal_roshan_kills();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_roshan_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.roshan_kills_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_roshan_kills(uint32_t value) {
  _internal_set_roshan_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.roshan_kills)
}

// optional float teamfight_participation = 16;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_teamfight_participation() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_teamfight_participation() const {
  return _internal_has_teamfight_participation();
}
inline void CMsgDOTAFantasyPlayerStats::clear_teamfight_participation() {
  _impl_.teamfight_participation_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float CMsgDOTAFantasyPlayerStats::_internal_teamfight_participation() const {
  return _impl_.teamfight_participation_;
}
inline float CMsgDOTAFantasyPlayerStats::teamfight_participation() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.teamfight_participation)
  return _internal_teamfight_participation();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_teamfight_participation(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.teamfight_participation_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_teamfight_participation(float value) {
  _internal_set_teamfight_participation(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.teamfight_participation)
}

// optional uint32 wards_placed = 17;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_wards_placed() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_wards_placed() const {
  return _internal_has_wards_placed();
}
inline void CMsgDOTAFantasyPlayerStats::clear_wards_placed() {
  _impl_.wards_placed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_wards_placed() const {
  return _impl_.wards_placed_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.wards_placed)
  return _internal_wards_placed();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_wards_placed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.wards_placed_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_wards_placed(uint32_t value) {
  _internal_set_wards_placed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.wards_placed)
}

// optional uint32 camps_stacked = 18;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_camps_stacked() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CMsgDOTAFantasyPlayerStats::clear_camps_stacked() {
  _impl_.camps_stacked_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_camps_stacked() const {
  return _impl_.camps_stacked_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.camps_stacked)
  return _internal_camps_stacked();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_camps_stacked(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.camps_stacked_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_camps_stacked(uint32_t value) {
  _internal_set_camps_stacked(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.camps_stacked)
}

// optional uint32 runes_grabbed = 19;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_runes_grabbed() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_runes_grabbed() const {
  return _internal_has_runes_grabbed();
}
inline void CMsgDOTAFantasyPlayerStats::clear_runes_grabbed() {
  _impl_.runes_grabbed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_runes_grabbed() const {
  return _impl_.runes_grabbed_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::runes_grabbed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.runes_grabbed)
  return _internal_runes_grabbed();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_runes_grabbed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.runes_grabbed_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_runes_grabbed(uint32_t value) {
  _internal_set_runes_grabbed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.runes_grabbed)
}

// optional uint32 first_blood = 20;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_first_blood() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_first_blood() const {
  return _internal_has_first_blood();
}
inline void CMsgDOTAFantasyPlayerStats::clear_first_blood() {
  _impl_.first_blood_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::_internal_first_blood() const {
  return _impl_.first_blood_;
}
inline uint32_t CMsgDOTAFantasyPlayerStats::first_blood() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.first_blood)
  return _internal_first_blood();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_first_blood(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.first_blood_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_first_blood(uint32_t value) {
  _internal_set_first_blood(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.first_blood)
}

// optional float stuns = 21;
inline bool CMsgDOTAFantasyPlayerStats::_internal_has_stuns() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStats::has_stuns() const {
  return _internal_has_stuns();
}
inline void CMsgDOTAFantasyPlayerStats::clear_stuns() {
  _impl_.stuns_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float CMsgDOTAFantasyPlayerStats::_internal_stuns() const {
  return _impl_.stuns_;
}
inline float CMsgDOTAFantasyPlayerStats::stuns() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStats.stuns)
  return _internal_stuns();
}
inline void CMsgDOTAFantasyPlayerStats::_internal_set_stuns(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.stuns_ = value;
}
inline void CMsgDOTAFantasyPlayerStats::set_stuns(float value) {
  _internal_set_stuns(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStats.stuns)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerMatchStats

// repeated .CMsgDOTAFantasyPlayerStats matches = 1;
inline int CMsgDOTAFantasyPlayerMatchStats::_internal_matches_size() const {
  return _impl_.matches_.size();
}
inline int CMsgDOTAFantasyPlayerMatchStats::matches_size() const {
  return _internal_matches_size();
}
inline void CMsgDOTAFantasyPlayerMatchStats::clear_matches() {
  _impl_.matches_.Clear();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerMatchStats.matches)
  return _impl_.matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyPlayerMatchStats::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerMatchStats.matches)
  return &_impl_.matches_;
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerMatchStats::_internal_matches(int index) const {
  return _impl_.matches_.Get(index);
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerMatchStats::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerMatchStats.matches)
  return _internal_matches(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::_internal_add_matches() {
  return _impl_.matches_.Add();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::add_matches() {
  ::CMsgDOTAFantasyPlayerStats* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerMatchStats.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyPlayerMatchStats::matches() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerMatchStats.matches)
  return _impl_.matches_;
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot_Mode

// optional uint32 mode_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::_internal_has_mode_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_mode_id() const {
  return _internal_has_mode_id();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_mode_id() {
  _impl_.mode_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::_internal_mode_id() const {
  return _impl_.mode_id_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::mode_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
  return _internal_mode_id();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::_internal_set_mode_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_id_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_mode_id(uint32_t value) {
  _internal_set_mode_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
}

// optional float desire = 2;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::_internal_has_desire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_desire() const {
  return _internal_has_desire();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_desire() {
  _impl_.desire_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTABotDebugInfo_Bot_Mode::_internal_desire() const {
  return _impl_.desire_;
}
inline float CMsgDOTABotDebugInfo_Bot_Mode::desire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.desire)
  return _internal_desire();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::_internal_set_desire(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.desire_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_desire(float value) {
  _internal_set_desire(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.desire)
}

// optional int32 target_entity = 3 [default = -1];
inline bool CMsgDOTABotDebugInfo_Bot_Mode::_internal_has_target_entity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_entity() const {
  return _internal_has_target_entity();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_entity() {
  _impl_.target_entity_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgDOTABotDebugInfo_Bot_Mode::_internal_target_entity() const {
  return _impl_.target_entity_;
}
inline int32_t CMsgDOTABotDebugInfo_Bot_Mode::target_entity() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
  return _internal_target_entity();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::_internal_set_target_entity(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.target_entity_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_entity(int32_t value) {
  _internal_set_target_entity(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
}

// optional uint32 target_x = 4;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::_internal_has_target_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_x() const {
  return _internal_has_target_x();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_x() {
  _impl_.target_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::_internal_target_x() const {
  return _impl_.target_x_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::target_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_x)
  return _internal_target_x();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::_internal_set_target_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_x_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_x(uint32_t value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_x)
}

// optional uint32 target_y = 5;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::_internal_has_target_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_y() const {
  return _internal_has_target_y();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_y() {
  _impl_.target_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::_internal_target_y() const {
  return _impl_.target_y_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::target_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_y)
  return _internal_target_y();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::_internal_set_target_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.target_y_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_y(uint32_t value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_y)
}

// optional uint32 target_z = 6;
inline bool CMsgDOTABotDebugInfo_Bot_Mode::_internal_has_target_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_z() const {
  return _internal_has_target_z();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_z() {
  _impl_.target_z_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::_internal_target_z() const {
  return _impl_.target_z_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Mode::target_z() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Mode.target_z)
  return _internal_target_z();
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::_internal_set_target_z(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.target_z_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot_Mode::set_target_z(uint32_t value) {
  _internal_set_target_z(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Mode.target_z)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot_Action

// optional uint32 action_id = 1;
inline bool CMsgDOTABotDebugInfo_Bot_Action::_internal_has_action_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Action::has_action_id() const {
  return _internal_has_action_id();
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_action_id() {
  _impl_.action_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Action::_internal_action_id() const {
  return _impl_.action_id_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot_Action::action_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Action.action_id)
  return _internal_action_id();
}
inline void CMsgDOTABotDebugInfo_Bot_Action::_internal_set_action_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.action_id_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_action_id(uint32_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Action.action_id)
}

// optional string action_target = 2;
inline bool CMsgDOTABotDebugInfo_Bot_Action::_internal_has_action_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot_Action::has_action_target() const {
  return _internal_has_action_target();
}
inline void CMsgDOTABotDebugInfo_Bot_Action::clear_action_target() {
  _impl_.action_target_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTABotDebugInfo_Bot_Action::action_target() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return _internal_action_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.action_target_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
inline std::string* CMsgDOTABotDebugInfo_Bot_Action::mutable_action_target() {
  std::string* _s = _internal_mutable_action_target();
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return _s;
}
inline const std::string& CMsgDOTABotDebugInfo_Bot_Action::_internal_action_target() const {
  return _impl_.action_target_.Get();
}
inline void CMsgDOTABotDebugInfo_Bot_Action::_internal_set_action_target(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.action_target_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTABotDebugInfo_Bot_Action::_internal_mutable_action_target() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.action_target_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTABotDebugInfo_Bot_Action::release_action_target() {
  // @@protoc_insertion_point(field_release:CMsgDOTABotDebugInfo.Bot.Action.action_target)
  if (!_internal_has_action_target()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.action_target_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_target_.IsDefault()) {
    _impl_.action_target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTABotDebugInfo_Bot_Action::set_allocated_action_target(std::string* action_target) {
  if (action_target != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.action_target_.SetAllocated(action_target, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_target_.IsDefault()) {
    _impl_.action_target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABotDebugInfo.Bot.Action.action_target)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo_Bot

// optional int32 player_owner_id = 1 [default = -1];
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_player_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_player_owner_id() const {
  return _internal_has_player_owner_id();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_player_owner_id() {
  _impl_.player_owner_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgDOTABotDebugInfo_Bot::_internal_player_owner_id() const {
  return _impl_.player_owner_id_;
}
inline int32_t CMsgDOTABotDebugInfo_Bot::player_owner_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.player_owner_id)
  return _internal_player_owner_id();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_player_owner_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.player_owner_id_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_player_owner_id(int32_t value) {
  _internal_set_player_owner_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.player_owner_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.hero_id)
  return _internal_hero_id();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.hero_id)
}

// optional uint32 difficulty = 3;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_difficulty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_difficulty() const {
  return _internal_has_difficulty();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_difficulty() {
  _impl_.difficulty_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_difficulty() const {
  return _impl_.difficulty_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.difficulty)
  return _internal_difficulty();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_difficulty(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.difficulty_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_difficulty(uint32_t value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.difficulty)
}

// optional uint32 power_current = 4;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_power_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_power_current() const {
  return _internal_has_power_current();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_power_current() {
  _impl_.power_current_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_power_current() const {
  return _impl_.power_current_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::power_current() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.power_current)
  return _internal_power_current();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_power_current(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.power_current_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_power_current(uint32_t value) {
  _internal_set_power_current(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.power_current)
}

// optional uint32 power_max = 5;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_power_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_power_max() const {
  return _internal_has_power_max();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_power_max() {
  _impl_.power_max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_power_max() const {
  return _impl_.power_max_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::power_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.power_max)
  return _internal_power_max();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_power_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.power_max_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_power_max(uint32_t value) {
  _internal_set_power_max(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.power_max)
}

// optional uint32 move_target_x = 6;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_move_target_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_x() const {
  return _internal_has_move_target_x();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_x() {
  _impl_.move_target_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_move_target_x() const {
  return _impl_.move_target_x_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::move_target_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.move_target_x)
  return _internal_move_target_x();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_move_target_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.move_target_x_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_x(uint32_t value) {
  _internal_set_move_target_x(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.move_target_x)
}

// optional uint32 move_target_y = 7;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_move_target_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_y() const {
  return _internal_has_move_target_y();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_y() {
  _impl_.move_target_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_move_target_y() const {
  return _impl_.move_target_y_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::move_target_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.move_target_y)
  return _internal_move_target_y();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_move_target_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.move_target_y_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_y(uint32_t value) {
  _internal_set_move_target_y(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.move_target_y)
}

// optional uint32 move_target_z = 8;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_move_target_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_move_target_z() const {
  return _internal_has_move_target_z();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_move_target_z() {
  _impl_.move_target_z_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_move_target_z() const {
  return _impl_.move_target_z_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::move_target_z() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.move_target_z)
  return _internal_move_target_z();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_move_target_z(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.move_target_z_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_move_target_z(uint32_t value) {
  _internal_set_move_target_z(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.move_target_z)
}

// optional uint32 active_mode_id = 9;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_active_mode_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_active_mode_id() const {
  return _internal_has_active_mode_id();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_active_mode_id() {
  _impl_.active_mode_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::_internal_active_mode_id() const {
  return _impl_.active_mode_id_;
}
inline uint32_t CMsgDOTABotDebugInfo_Bot::active_mode_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.active_mode_id)
  return _internal_active_mode_id();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_active_mode_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.active_mode_id_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_active_mode_id(uint32_t value) {
  _internal_set_active_mode_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.active_mode_id)
}

// optional float execution_time = 10;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_execution_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_execution_time() const {
  return _internal_has_execution_time();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_execution_time() {
  _impl_.execution_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CMsgDOTABotDebugInfo_Bot::_internal_execution_time() const {
  return _impl_.execution_time_;
}
inline float CMsgDOTABotDebugInfo_Bot::execution_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.execution_time)
  return _internal_execution_time();
}
inline void CMsgDOTABotDebugInfo_Bot::_internal_set_execution_time(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.execution_time_ = value;
}
inline void CMsgDOTABotDebugInfo_Bot::set_execution_time(float value) {
  _internal_set_execution_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.Bot.execution_time)
}

// repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
inline int CMsgDOTABotDebugInfo_Bot::_internal_modes_size() const {
  return _impl_.modes_.size();
}
inline int CMsgDOTABotDebugInfo_Bot::modes_size() const {
  return _internal_modes_size();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_modes() {
  _impl_.modes_.Clear();
}
inline ::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.Bot.modes)
  return _impl_.modes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >*
CMsgDOTABotDebugInfo_Bot::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTABotDebugInfo.Bot.modes)
  return &_impl_.modes_;
}
inline const ::CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot::_internal_modes(int index) const {
  return _impl_.modes_.Get(index);
}
inline const ::CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot::modes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.modes)
  return _internal_modes(index);
}
inline ::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::_internal_add_modes() {
  return _impl_.modes_.Add();
}
inline ::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::add_modes() {
  ::CMsgDOTABotDebugInfo_Bot_Mode* _add = _internal_add_modes();
  // @@protoc_insertion_point(field_add:CMsgDOTABotDebugInfo.Bot.modes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot_Mode >&
CMsgDOTABotDebugInfo_Bot::modes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTABotDebugInfo.Bot.modes)
  return _impl_.modes_;
}

// optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
inline bool CMsgDOTABotDebugInfo_Bot::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.action_ != nullptr);
  return value;
}
inline bool CMsgDOTABotDebugInfo_Bot::has_action() const {
  return _internal_has_action();
}
inline void CMsgDOTABotDebugInfo_Bot::clear_action() {
  if (_impl_.action_ != nullptr) _impl_.action_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot::_internal_action() const {
  const ::CMsgDOTABotDebugInfo_Bot_Action* p = _impl_.action_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTABotDebugInfo_Bot_Action&>(
      ::_CMsgDOTABotDebugInfo_Bot_Action_default_instance_);
}
inline const ::CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot::action() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.Bot.action)
  return _internal_action();
}
inline void CMsgDOTABotDebugInfo_Bot::unsafe_arena_set_allocated_action(
    ::CMsgDOTABotDebugInfo_Bot_Action* action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_);
  }
  _impl_.action_ = action;
  if (action) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTABotDebugInfo.Bot.action)
}
inline ::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::release_action() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTABotDebugInfo_Bot_Action* temp = _impl_.action_;
  _impl_.action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:CMsgDOTABotDebugInfo.Bot.action)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTABotDebugInfo_Bot_Action* temp = _impl_.action_;
  _impl_.action_ = nullptr;
  return temp;
}
inline ::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::_internal_mutable_action() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.action_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTABotDebugInfo_Bot_Action>(GetArenaForAllocation());
    _impl_.action_ = p;
  }
  return _impl_.action_;
}
inline ::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::mutable_action() {
  ::CMsgDOTABotDebugInfo_Bot_Action* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.Bot.action)
  return _msg;
}
inline void CMsgDOTABotDebugInfo_Bot::set_allocated_action(::CMsgDOTABotDebugInfo_Bot_Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.action_ = action;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTABotDebugInfo.Bot.action)
}

// -------------------------------------------------------------------

// CMsgDOTABotDebugInfo

// repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
inline int CMsgDOTABotDebugInfo::_internal_bots_size() const {
  return _impl_.bots_.size();
}
inline int CMsgDOTABotDebugInfo::bots_size() const {
  return _internal_bots_size();
}
inline void CMsgDOTABotDebugInfo::clear_bots() {
  _impl_.bots_.Clear();
}
inline ::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::mutable_bots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTABotDebugInfo.bots)
  return _impl_.bots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >*
CMsgDOTABotDebugInfo::mutable_bots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTABotDebugInfo.bots)
  return &_impl_.bots_;
}
inline const ::CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo::_internal_bots(int index) const {
  return _impl_.bots_.Get(index);
}
inline const ::CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo::bots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.bots)
  return _internal_bots(index);
}
inline ::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::_internal_add_bots() {
  return _impl_.bots_.Add();
}
inline ::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::add_bots() {
  ::CMsgDOTABotDebugInfo_Bot* _add = _internal_add_bots();
  // @@protoc_insertion_point(field_add:CMsgDOTABotDebugInfo.bots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTABotDebugInfo_Bot >&
CMsgDOTABotDebugInfo::bots() const {
  // @@protoc_insertion_point(field_list:CMsgDOTABotDebugInfo.bots)
  return _impl_.bots_;
}

// optional float desire_push_lane_top = 2;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_push_lane_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_top() const {
  return _internal_has_desire_push_lane_top();
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_top() {
  _impl_.desire_push_lane_top_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_push_lane_top() const {
  return _impl_.desire_push_lane_top_;
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_top() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_push_lane_top)
  return _internal_desire_push_lane_top();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_push_lane_top(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.desire_push_lane_top_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_top(float value) {
  _internal_set_desire_push_lane_top(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_push_lane_top)
}

// optional float desire_push_lane_mid = 3;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_push_lane_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_mid() const {
  return _internal_has_desire_push_lane_mid();
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_mid() {
  _impl_.desire_push_lane_mid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_push_lane_mid() const {
  return _impl_.desire_push_lane_mid_;
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_mid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_push_lane_mid)
  return _internal_desire_push_lane_mid();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_push_lane_mid(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.desire_push_lane_mid_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_mid(float value) {
  _internal_set_desire_push_lane_mid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_push_lane_mid)
}

// optional float desire_push_lane_bot = 4;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_push_lane_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_push_lane_bot() const {
  return _internal_has_desire_push_lane_bot();
}
inline void CMsgDOTABotDebugInfo::clear_desire_push_lane_bot() {
  _impl_.desire_push_lane_bot_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_push_lane_bot() const {
  return _impl_.desire_push_lane_bot_;
}
inline float CMsgDOTABotDebugInfo::desire_push_lane_bot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_push_lane_bot)
  return _internal_desire_push_lane_bot();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_push_lane_bot(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.desire_push_lane_bot_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_push_lane_bot(float value) {
  _internal_set_desire_push_lane_bot(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_push_lane_bot)
}

// optional float desire_defend_lane_top = 5;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_defend_lane_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_top() const {
  return _internal_has_desire_defend_lane_top();
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_top() {
  _impl_.desire_defend_lane_top_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_defend_lane_top() const {
  return _impl_.desire_defend_lane_top_;
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_top() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_defend_lane_top)
  return _internal_desire_defend_lane_top();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_defend_lane_top(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.desire_defend_lane_top_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_top(float value) {
  _internal_set_desire_defend_lane_top(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_defend_lane_top)
}

// optional float desire_defend_lane_mid = 6;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_defend_lane_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_mid() const {
  return _internal_has_desire_defend_lane_mid();
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_mid() {
  _impl_.desire_defend_lane_mid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_defend_lane_mid() const {
  return _impl_.desire_defend_lane_mid_;
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_mid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_defend_lane_mid)
  return _internal_desire_defend_lane_mid();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_defend_lane_mid(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.desire_defend_lane_mid_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_mid(float value) {
  _internal_set_desire_defend_lane_mid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_defend_lane_mid)
}

// optional float desire_defend_lane_bot = 7;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_defend_lane_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_defend_lane_bot() const {
  return _internal_has_desire_defend_lane_bot();
}
inline void CMsgDOTABotDebugInfo::clear_desire_defend_lane_bot() {
  _impl_.desire_defend_lane_bot_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_defend_lane_bot() const {
  return _impl_.desire_defend_lane_bot_;
}
inline float CMsgDOTABotDebugInfo::desire_defend_lane_bot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_defend_lane_bot)
  return _internal_desire_defend_lane_bot();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_defend_lane_bot(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.desire_defend_lane_bot_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_defend_lane_bot(float value) {
  _internal_set_desire_defend_lane_bot(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_defend_lane_bot)
}

// optional float desire_farm_lane_top = 8;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_farm_lane_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_top() const {
  return _internal_has_desire_farm_lane_top();
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_top() {
  _impl_.desire_farm_lane_top_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_farm_lane_top() const {
  return _impl_.desire_farm_lane_top_;
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_top() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_lane_top)
  return _internal_desire_farm_lane_top();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_farm_lane_top(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.desire_farm_lane_top_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_top(float value) {
  _internal_set_desire_farm_lane_top(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_lane_top)
}

// optional float desire_farm_lane_mid = 9;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_farm_lane_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_mid() const {
  return _internal_has_desire_farm_lane_mid();
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_mid() {
  _impl_.desire_farm_lane_mid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_farm_lane_mid() const {
  return _impl_.desire_farm_lane_mid_;
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_mid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_lane_mid)
  return _internal_desire_farm_lane_mid();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_farm_lane_mid(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.desire_farm_lane_mid_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_mid(float value) {
  _internal_set_desire_farm_lane_mid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_lane_mid)
}

// optional float desire_farm_lane_bot = 10;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_farm_lane_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_farm_lane_bot() const {
  return _internal_has_desire_farm_lane_bot();
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_lane_bot() {
  _impl_.desire_farm_lane_bot_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_farm_lane_bot() const {
  return _impl_.desire_farm_lane_bot_;
}
inline float CMsgDOTABotDebugInfo::desire_farm_lane_bot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_lane_bot)
  return _internal_desire_farm_lane_bot();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_farm_lane_bot(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.desire_farm_lane_bot_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_lane_bot(float value) {
  _internal_set_desire_farm_lane_bot(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_lane_bot)
}

// optional float desire_farm_roshan = 11;
inline bool CMsgDOTABotDebugInfo::_internal_has_desire_farm_roshan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_desire_farm_roshan() const {
  return _internal_has_desire_farm_roshan();
}
inline void CMsgDOTABotDebugInfo::clear_desire_farm_roshan() {
  _impl_.desire_farm_roshan_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CMsgDOTABotDebugInfo::_internal_desire_farm_roshan() const {
  return _impl_.desire_farm_roshan_;
}
inline float CMsgDOTABotDebugInfo::desire_farm_roshan() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.desire_farm_roshan)
  return _internal_desire_farm_roshan();
}
inline void CMsgDOTABotDebugInfo::_internal_set_desire_farm_roshan(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.desire_farm_roshan_ = value;
}
inline void CMsgDOTABotDebugInfo::set_desire_farm_roshan(float value) {
  _internal_set_desire_farm_roshan(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.desire_farm_roshan)
}

// optional float execution_time = 12;
inline bool CMsgDOTABotDebugInfo::_internal_has_execution_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTABotDebugInfo::has_execution_time() const {
  return _internal_has_execution_time();
}
inline void CMsgDOTABotDebugInfo::clear_execution_time() {
  _impl_.execution_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CMsgDOTABotDebugInfo::_internal_execution_time() const {
  return _impl_.execution_time_;
}
inline float CMsgDOTABotDebugInfo::execution_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.execution_time)
  return _internal_execution_time();
}
inline void CMsgDOTABotDebugInfo::_internal_set_execution_time(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.execution_time_ = value;
}
inline void CMsgDOTABotDebugInfo::set_execution_time(float value) {
  _internal_set_execution_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.execution_time)
}

// repeated uint32 rune_status = 13;
inline int CMsgDOTABotDebugInfo::_internal_rune_status_size() const {
  return _impl_.rune_status_.size();
}
inline int CMsgDOTABotDebugInfo::rune_status_size() const {
  return _internal_rune_status_size();
}
inline void CMsgDOTABotDebugInfo::clear_rune_status() {
  _impl_.rune_status_.Clear();
}
inline uint32_t CMsgDOTABotDebugInfo::_internal_rune_status(int index) const {
  return _impl_.rune_status_.Get(index);
}
inline uint32_t CMsgDOTABotDebugInfo::rune_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTABotDebugInfo.rune_status)
  return _internal_rune_status(index);
}
inline void CMsgDOTABotDebugInfo::set_rune_status(int index, uint32_t value) {
  _impl_.rune_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTABotDebugInfo.rune_status)
}
inline void CMsgDOTABotDebugInfo::_internal_add_rune_status(uint32_t value) {
  _impl_.rune_status_.Add(value);
}
inline void CMsgDOTABotDebugInfo::add_rune_status(uint32_t value) {
  _internal_add_rune_status(value);
  // @@protoc_insertion_point(field_add:CMsgDOTABotDebugInfo.rune_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTABotDebugInfo::_internal_rune_status() const {
  return _impl_.rune_status_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTABotDebugInfo::rune_status() const {
  // @@protoc_insertion_point(field_list:CMsgDOTABotDebugInfo.rune_status)
  return _internal_rune_status();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTABotDebugInfo::_internal_mutable_rune_status() {
  return &_impl_.rune_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTABotDebugInfo::mutable_rune_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTABotDebugInfo.rune_status)
  return _internal_mutable_rune_status();
}

// -------------------------------------------------------------------

// CMsgSuccessfulHero

// optional uint32 hero_id = 1;
inline bool CMsgSuccessfulHero::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSuccessfulHero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSuccessfulHero::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSuccessfulHero::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgSuccessfulHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSuccessfulHero.hero_id)
  return _internal_hero_id();
}
inline void CMsgSuccessfulHero::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgSuccessfulHero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSuccessfulHero.hero_id)
}

// optional float win_percent = 2;
inline bool CMsgSuccessfulHero::_internal_has_win_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSuccessfulHero::has_win_percent() const {
  return _internal_has_win_percent();
}
inline void CMsgSuccessfulHero::clear_win_percent() {
  _impl_.win_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgSuccessfulHero::_internal_win_percent() const {
  return _impl_.win_percent_;
}
inline float CMsgSuccessfulHero::win_percent() const {
  // @@protoc_insertion_point(field_get:CMsgSuccessfulHero.win_percent)
  return _internal_win_percent();
}
inline void CMsgSuccessfulHero::_internal_set_win_percent(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.win_percent_ = value;
}
inline void CMsgSuccessfulHero::set_win_percent(float value) {
  _internal_set_win_percent(value);
  // @@protoc_insertion_point(field_set:CMsgSuccessfulHero.win_percent)
}

// optional uint32 longest_streak = 3;
inline bool CMsgSuccessfulHero::_internal_has_longest_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSuccessfulHero::has_longest_streak() const {
  return _internal_has_longest_streak();
}
inline void CMsgSuccessfulHero::clear_longest_streak() {
  _impl_.longest_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSuccessfulHero::_internal_longest_streak() const {
  return _impl_.longest_streak_;
}
inline uint32_t CMsgSuccessfulHero::longest_streak() const {
  // @@protoc_insertion_point(field_get:CMsgSuccessfulHero.longest_streak)
  return _internal_longest_streak();
}
inline void CMsgSuccessfulHero::_internal_set_longest_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.longest_streak_ = value;
}
inline void CMsgSuccessfulHero::set_longest_streak(uint32_t value) {
  _internal_set_longest_streak(value);
  // @@protoc_insertion_point(field_set:CMsgSuccessfulHero.longest_streak)
}

// -------------------------------------------------------------------

// CMsgRecentMatchInfo

// optional uint64 match_id = 1;
inline bool CMsgRecentMatchInfo::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgRecentMatchInfo::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgRecentMatchInfo::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgRecentMatchInfo::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.match_id)
  return _internal_match_id();
}
inline void CMsgRecentMatchInfo::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgRecentMatchInfo::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.match_id)
}

// optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgRecentMatchInfo::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgRecentMatchInfo::clear_game_mode() {
  _impl_.game_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::DOTA_GameMode CMsgRecentMatchInfo::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(_impl_.game_mode_);
}
inline ::DOTA_GameMode CMsgRecentMatchInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.game_mode)
  return _internal_game_mode();
}
inline void CMsgRecentMatchInfo::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_mode_ = value;
}
inline void CMsgRecentMatchInfo::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.game_mode)
}

// optional uint32 kills = 3;
inline bool CMsgRecentMatchInfo::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgRecentMatchInfo::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgRecentMatchInfo::kills() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.kills)
  return _internal_kills();
}
inline void CMsgRecentMatchInfo::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.kills_ = value;
}
inline void CMsgRecentMatchInfo::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.kills)
}

// optional uint32 deaths = 4;
inline bool CMsgRecentMatchInfo::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgRecentMatchInfo::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgRecentMatchInfo::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.deaths)
  return _internal_deaths();
}
inline void CMsgRecentMatchInfo::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deaths_ = value;
}
inline void CMsgRecentMatchInfo::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.deaths)
}

// optional uint32 assists = 5;
inline bool CMsgRecentMatchInfo::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgRecentMatchInfo::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgRecentMatchInfo::assists() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.assists)
  return _internal_assists();
}
inline void CMsgRecentMatchInfo::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.assists_ = value;
}
inline void CMsgRecentMatchInfo::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.assists)
}

// optional uint32 duration = 6;
inline bool CMsgRecentMatchInfo::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgRecentMatchInfo::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgRecentMatchInfo::duration() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.duration)
  return _internal_duration();
}
inline void CMsgRecentMatchInfo::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.duration_ = value;
}
inline void CMsgRecentMatchInfo::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.duration)
}

// optional uint32 player_slot = 7;
inline bool CMsgRecentMatchInfo::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgRecentMatchInfo::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgRecentMatchInfo::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.player_slot)
  return _internal_player_slot();
}
inline void CMsgRecentMatchInfo::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.player_slot_ = value;
}
inline void CMsgRecentMatchInfo::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.player_slot)
}

// optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
inline bool CMsgRecentMatchInfo::_internal_has_match_outcome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_match_outcome() const {
  return _internal_has_match_outcome();
}
inline void CMsgRecentMatchInfo::clear_match_outcome() {
  _impl_.match_outcome_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::EMatchOutcome CMsgRecentMatchInfo::_internal_match_outcome() const {
  return static_cast< ::EMatchOutcome >(_impl_.match_outcome_);
}
inline ::EMatchOutcome CMsgRecentMatchInfo::match_outcome() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.match_outcome)
  return _internal_match_outcome();
}
inline void CMsgRecentMatchInfo::_internal_set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.match_outcome_ = value;
}
inline void CMsgRecentMatchInfo::set_match_outcome(::EMatchOutcome value) {
  _internal_set_match_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.match_outcome)
}

// optional uint32 timestamp = 9;
inline bool CMsgRecentMatchInfo::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgRecentMatchInfo::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgRecentMatchInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.timestamp)
  return _internal_timestamp();
}
inline void CMsgRecentMatchInfo::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.timestamp_ = value;
}
inline void CMsgRecentMatchInfo::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.timestamp)
}

// optional uint32 lobby_type = 10;
inline bool CMsgRecentMatchInfo::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgRecentMatchInfo::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgRecentMatchInfo::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgRecentMatchInfo::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lobby_type_ = value;
}
inline void CMsgRecentMatchInfo::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.lobby_type)
}

// optional uint32 team_number = 11;
inline bool CMsgRecentMatchInfo::_internal_has_team_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_team_number() const {
  return _internal_has_team_number();
}
inline void CMsgRecentMatchInfo::clear_team_number() {
  _impl_.team_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_team_number() const {
  return _impl_.team_number_;
}
inline uint32_t CMsgRecentMatchInfo::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.team_number)
  return _internal_team_number();
}
inline void CMsgRecentMatchInfo::_internal_set_team_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.team_number_ = value;
}
inline void CMsgRecentMatchInfo::set_team_number(uint32_t value) {
  _internal_set_team_number(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.team_number)
}

// -------------------------------------------------------------------

// CMsgMatchTips_SingleTip

// optional uint32 source_account_id = 1;
inline bool CMsgMatchTips_SingleTip::_internal_has_source_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_source_account_id() const {
  return _internal_has_source_account_id();
}
inline void CMsgMatchTips_SingleTip::clear_source_account_id() {
  _impl_.source_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchTips_SingleTip::_internal_source_account_id() const {
  return _impl_.source_account_id_;
}
inline uint32_t CMsgMatchTips_SingleTip::source_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.source_account_id)
  return _internal_source_account_id();
}
inline void CMsgMatchTips_SingleTip::_internal_set_source_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_account_id_ = value;
}
inline void CMsgMatchTips_SingleTip::set_source_account_id(uint32_t value) {
  _internal_set_source_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.source_account_id)
}

// optional uint32 target_account_id = 2;
inline bool CMsgMatchTips_SingleTip::_internal_has_target_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgMatchTips_SingleTip::clear_target_account_id() {
  _impl_.target_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMatchTips_SingleTip::_internal_target_account_id() const {
  return _impl_.target_account_id_;
}
inline uint32_t CMsgMatchTips_SingleTip::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgMatchTips_SingleTip::_internal_set_target_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_account_id_ = value;
}
inline void CMsgMatchTips_SingleTip::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.target_account_id)
}

// optional uint32 tip_amount = 3;
inline bool CMsgMatchTips_SingleTip::_internal_has_tip_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_tip_amount() const {
  return _internal_has_tip_amount();
}
inline void CMsgMatchTips_SingleTip::clear_tip_amount() {
  _impl_.tip_amount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgMatchTips_SingleTip::_internal_tip_amount() const {
  return _impl_.tip_amount_;
}
inline uint32_t CMsgMatchTips_SingleTip::tip_amount() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.tip_amount)
  return _internal_tip_amount();
}
inline void CMsgMatchTips_SingleTip::_internal_set_tip_amount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tip_amount_ = value;
}
inline void CMsgMatchTips_SingleTip::set_tip_amount(uint32_t value) {
  _internal_set_tip_amount(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.tip_amount)
}

// optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
inline bool CMsgMatchTips_SingleTip::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgMatchTips_SingleTip::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EEvent CMsgMatchTips_SingleTip::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgMatchTips_SingleTip::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.event_id)
  return _internal_event_id();
}
inline void CMsgMatchTips_SingleTip::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.event_id_ = value;
}
inline void CMsgMatchTips_SingleTip::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.event_id)
}

// -------------------------------------------------------------------

// CMsgMatchTips

// repeated .CMsgMatchTips.SingleTip tips = 2;
inline int CMsgMatchTips::_internal_tips_size() const {
  return _impl_.tips_.size();
}
inline int CMsgMatchTips::tips_size() const {
  return _internal_tips_size();
}
inline void CMsgMatchTips::clear_tips() {
  _impl_.tips_.Clear();
}
inline ::CMsgMatchTips_SingleTip* CMsgMatchTips::mutable_tips(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchTips.tips)
  return _impl_.tips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >*
CMsgMatchTips::mutable_tips() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchTips.tips)
  return &_impl_.tips_;
}
inline const ::CMsgMatchTips_SingleTip& CMsgMatchTips::_internal_tips(int index) const {
  return _impl_.tips_.Get(index);
}
inline const ::CMsgMatchTips_SingleTip& CMsgMatchTips::tips(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.tips)
  return _internal_tips(index);
}
inline ::CMsgMatchTips_SingleTip* CMsgMatchTips::_internal_add_tips() {
  return _impl_.tips_.Add();
}
inline ::CMsgMatchTips_SingleTip* CMsgMatchTips::add_tips() {
  ::CMsgMatchTips_SingleTip* _add = _internal_add_tips();
  // @@protoc_insertion_point(field_add:CMsgMatchTips.tips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >&
CMsgMatchTips::tips() const {
  // @@protoc_insertion_point(field_list:CMsgMatchTips.tips)
  return _impl_.tips_;
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAMatchMinimal_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDOTAMatchMinimal_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.hero_id)
  return _internal_hero_id();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.hero_id)
}

// optional uint32 kills = 3;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDOTAMatchMinimal_Player::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.kills)
  return _internal_kills();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kills_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.kills)
}

// optional uint32 deaths = 4;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgDOTAMatchMinimal_Player::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.deaths)
  return _internal_deaths();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.deaths_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.deaths)
}

// optional uint32 assists = 5;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgDOTAMatchMinimal_Player::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.assists)
  return _internal_assists();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.assists_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.assists)
}

// repeated int32 items = 6;
inline int CMsgDOTAMatchMinimal_Player::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgDOTAMatchMinimal_Player::items_size() const {
  return _internal_items_size();
}
inline void CMsgDOTAMatchMinimal_Player::clear_items() {
  _impl_.items_.Clear();
}
inline int32_t CMsgDOTAMatchMinimal_Player::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline int32_t CMsgDOTAMatchMinimal_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.items)
  return _internal_items(index);
}
inline void CMsgDOTAMatchMinimal_Player::set_items(int index, int32_t value) {
  _impl_.items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.items)
}
inline void CMsgDOTAMatchMinimal_Player::_internal_add_items(int32_t value) {
  _impl_.items_.Add(value);
}
inline void CMsgDOTAMatchMinimal_Player::add_items(int32_t value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchMinimal.Player.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTAMatchMinimal_Player::_internal_items() const {
  return _impl_.items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgDOTAMatchMinimal_Player::items() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchMinimal.Player.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTAMatchMinimal_Player::_internal_mutable_items() {
  return &_impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgDOTAMatchMinimal_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchMinimal.Player.items)
  return _internal_mutable_items();
}

// optional uint32 player_slot = 7;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgDOTAMatchMinimal_Player::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.player_slot)
  return _internal_player_slot();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.player_slot_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.player_slot)
}

// optional string pro_name = 8;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_pro_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_pro_name() const {
  return _internal_has_pro_name();
}
inline void CMsgDOTAMatchMinimal_Player::clear_pro_name() {
  _impl_.pro_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatchMinimal_Player::pro_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.pro_name)
  return _internal_pro_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatchMinimal_Player::set_pro_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pro_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.pro_name)
}
inline std::string* CMsgDOTAMatchMinimal_Player::mutable_pro_name() {
  std::string* _s = _internal_mutable_pro_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.Player.pro_name)
  return _s;
}
inline const std::string& CMsgDOTAMatchMinimal_Player::_internal_pro_name() const {
  return _impl_.pro_name_.Get();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_pro_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pro_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Player::_internal_mutable_pro_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pro_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Player::release_pro_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatchMinimal.Player.pro_name)
  if (!_internal_has_pro_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pro_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pro_name_.IsDefault()) {
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatchMinimal_Player::set_allocated_pro_name(std::string* pro_name) {
  if (pro_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pro_name_.SetAllocated(pro_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pro_name_.IsDefault()) {
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.Player.pro_name)
}

// optional uint32 level = 9;
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_level() const {
  return _internal_has_level();
}
inline void CMsgDOTAMatchMinimal_Player::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgDOTAMatchMinimal_Player::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.level)
  return _internal_level();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.level_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.level)
}

// optional .DOTA_GC_TEAM team_number = 10 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgDOTAMatchMinimal_Player::_internal_has_team_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Player::has_team_number() const {
  return _internal_has_team_number();
}
inline void CMsgDOTAMatchMinimal_Player::clear_team_number() {
  _impl_.team_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::DOTA_GC_TEAM CMsgDOTAMatchMinimal_Player::_internal_team_number() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.team_number_);
}
inline ::DOTA_GC_TEAM CMsgDOTAMatchMinimal_Player::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.team_number)
  return _internal_team_number();
}
inline void CMsgDOTAMatchMinimal_Player::_internal_set_team_number(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.team_number_ = value;
}
inline void CMsgDOTAMatchMinimal_Player::set_team_number(::DOTA_GC_TEAM value) {
  _internal_set_team_number(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.team_number)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Tourney

// optional uint32 league_id = 1;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.league_id)
}

// optional uint32 series_type = 8;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_series_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_type() const {
  return _internal_has_series_type();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_type() {
  _impl_.series_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_series_type() const {
  return _impl_.series_type_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.series_type)
  return _internal_series_type();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_series_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.series_type_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_type(uint32_t value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.series_type)
}

// optional uint32 series_game = 9;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_series_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_game() const {
  return _internal_has_series_game();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_game() {
  _impl_.series_game_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_series_game() const {
  return _impl_.series_game_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::series_game() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.series_game)
  return _internal_series_game();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_series_game(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.series_game_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_game(uint32_t value) {
  _internal_set_series_game(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.series_game)
}

// optional uint32 weekend_tourney_tournament_id = 10;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_weekend_tourney_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_tournament_id() const {
  return _internal_has_weekend_tourney_tournament_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_tournament_id() {
  _impl_.weekend_tourney_tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_weekend_tourney_tournament_id() const {
  return _impl_.weekend_tourney_tournament_id_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
  return _internal_weekend_tourney_tournament_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_weekend_tourney_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.weekend_tourney_tournament_id_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_tournament_id(uint32_t value) {
  _internal_set_weekend_tourney_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_season_trophy_id = 11;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_weekend_tourney_season_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_season_trophy_id() const {
  return _internal_has_weekend_tourney_season_trophy_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_season_trophy_id() {
  _impl_.weekend_tourney_season_trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_weekend_tourney_season_trophy_id() const {
  return _impl_.weekend_tourney_season_trophy_id_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::weekend_tourney_season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
  return _internal_weekend_tourney_season_trophy_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_weekend_tourney_season_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.weekend_tourney_season_trophy_id_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_season_trophy_id(uint32_t value) {
  _internal_set_weekend_tourney_season_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
}

// optional uint32 weekend_tourney_division = 12;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_weekend_tourney_division() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_division() const {
  return _internal_has_weekend_tourney_division();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_division() {
  _impl_.weekend_tourney_division_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_weekend_tourney_division() const {
  return _impl_.weekend_tourney_division_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
  return _internal_weekend_tourney_division();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_weekend_tourney_division(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.weekend_tourney_division_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_division(uint32_t value) {
  _internal_set_weekend_tourney_division(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 13;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_weekend_tourney_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_skill_level() const {
  return _internal_has_weekend_tourney_skill_level();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_skill_level() {
  _impl_.weekend_tourney_skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_weekend_tourney_skill_level() const {
  return _impl_.weekend_tourney_skill_level_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
  return _internal_weekend_tourney_skill_level();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_weekend_tourney_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.weekend_tourney_skill_level_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_skill_level(uint32_t value) {
  _internal_set_weekend_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
}

// optional uint32 radiant_team_id = 2;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_radiant_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_id() const {
  return _internal_has_radiant_team_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_id() {
  _impl_.radiant_team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_radiant_team_id() const {
  return _impl_.radiant_team_id_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
  return _internal_radiant_team_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_radiant_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.radiant_team_id_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_id(uint32_t value) {
  _internal_set_radiant_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
}

// optional string radiant_team_name = 3;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_radiant_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_name() const {
  return _internal_has_radiant_team_name();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_name() {
  _impl_.radiant_team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return _internal_radiant_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.radiant_team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::mutable_radiant_team_name() {
  std::string* _s = _internal_mutable_radiant_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return _s;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::_internal_radiant_team_name() const {
  return _impl_.radiant_team_name_.Get();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_radiant_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.radiant_team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::_internal_mutable_radiant_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.radiant_team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  if (!_internal_has_radiant_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.radiant_team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_name_.IsDefault()) {
    _impl_.radiant_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_radiant_team_name(std::string* radiant_team_name) {
  if (radiant_team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.radiant_team_name_.SetAllocated(radiant_team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_name_.IsDefault()) {
    _impl_.radiant_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}

// optional fixed64 radiant_team_logo = 4;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_radiant_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_logo() const {
  return _internal_has_radiant_team_logo();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_logo() {
  _impl_.radiant_team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgDOTAMatchMinimal_Tourney::_internal_radiant_team_logo() const {
  return _impl_.radiant_team_logo_;
}
inline uint64_t CMsgDOTAMatchMinimal_Tourney::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
  return _internal_radiant_team_logo();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_radiant_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.radiant_team_logo_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo(uint64_t value) {
  _internal_set_radiant_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
}

// optional string radiant_team_logo_url = 14;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_radiant_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_logo_url() const {
  return _internal_has_radiant_team_logo_url();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_logo_url() {
  _impl_.radiant_team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::radiant_team_logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
  return _internal_radiant_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.radiant_team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::mutable_radiant_team_logo_url() {
  std::string* _s = _internal_mutable_radiant_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
  return _s;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::_internal_radiant_team_logo_url() const {
  return _impl_.radiant_team_logo_url_.Get();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_radiant_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.radiant_team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::_internal_mutable_radiant_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.radiant_team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::release_radiant_team_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
  if (!_internal_has_radiant_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.radiant_team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_logo_url_.IsDefault()) {
    _impl_.radiant_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_radiant_team_logo_url(std::string* radiant_team_logo_url) {
  if (radiant_team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.radiant_team_logo_url_.SetAllocated(radiant_team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.radiant_team_logo_url_.IsDefault()) {
    _impl_.radiant_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url)
}

// optional uint32 dire_team_id = 5;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_dire_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_id() const {
  return _internal_has_dire_team_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_id() {
  _impl_.dire_team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::_internal_dire_team_id() const {
  return _impl_.dire_team_id_;
}
inline uint32_t CMsgDOTAMatchMinimal_Tourney::dire_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.dire_team_id)
  return _internal_dire_team_id();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_dire_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.dire_team_id_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_id(uint32_t value) {
  _internal_set_dire_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.dire_team_id)
}

// optional string dire_team_name = 6;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_dire_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_name() const {
  return _internal_has_dire_team_name();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_name() {
  _impl_.dire_team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::dire_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return _internal_dire_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.dire_team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::mutable_dire_team_name() {
  std::string* _s = _internal_mutable_dire_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return _s;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::_internal_dire_team_name() const {
  return _impl_.dire_team_name_.Get();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_dire_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dire_team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::_internal_mutable_dire_team_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.dire_team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  if (!_internal_has_dire_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.dire_team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_name_.IsDefault()) {
    _impl_.dire_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_dire_team_name(std::string* dire_team_name) {
  if (dire_team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dire_team_name_.SetAllocated(dire_team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_name_.IsDefault()) {
    _impl_.dire_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}

// optional fixed64 dire_team_logo = 7;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_dire_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_logo() const {
  return _internal_has_dire_team_logo();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_logo() {
  _impl_.dire_team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgDOTAMatchMinimal_Tourney::_internal_dire_team_logo() const {
  return _impl_.dire_team_logo_;
}
inline uint64_t CMsgDOTAMatchMinimal_Tourney::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
  return _internal_dire_team_logo();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_dire_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.dire_team_logo_ = value;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo(uint64_t value) {
  _internal_set_dire_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
}

// optional string dire_team_logo_url = 15;
inline bool CMsgDOTAMatchMinimal_Tourney::_internal_has_dire_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_logo_url() const {
  return _internal_has_dire_team_logo_url();
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_logo_url() {
  _impl_.dire_team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::dire_team_logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
  return _internal_dire_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.dire_team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::mutable_dire_team_logo_url() {
  std::string* _s = _internal_mutable_dire_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
  return _s;
}
inline const std::string& CMsgDOTAMatchMinimal_Tourney::_internal_dire_team_logo_url() const {
  return _impl_.dire_team_logo_url_.Get();
}
inline void CMsgDOTAMatchMinimal_Tourney::_internal_set_dire_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dire_team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::_internal_mutable_dire_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.dire_team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAMatchMinimal_Tourney::release_dire_team_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
  if (!_internal_has_dire_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.dire_team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_logo_url_.IsDefault()) {
    _impl_.dire_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_dire_team_logo_url(std::string* dire_team_logo_url) {
  if (dire_team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.dire_team_logo_url_.SetAllocated(dire_team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dire_team_logo_url_.IsDefault()) {
    _impl_.dire_team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal

// optional uint64 match_id = 1;
inline bool CMsgDOTAMatchMinimal::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTAMatchMinimal::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAMatchMinimal::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTAMatchMinimal::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.match_id)
  return _internal_match_id();
}
inline void CMsgDOTAMatchMinimal::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTAMatchMinimal::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.match_id)
}

// optional fixed32 start_time = 2;
inline bool CMsgDOTAMatchMinimal::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgDOTAMatchMinimal::clear_start_time() {
  _impl_.start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAMatchMinimal::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t CMsgDOTAMatchMinimal::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.start_time)
  return _internal_start_time();
}
inline void CMsgDOTAMatchMinimal::_internal_set_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_time_ = value;
}
inline void CMsgDOTAMatchMinimal::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.start_time)
}

// optional uint32 duration = 3;
inline bool CMsgDOTAMatchMinimal::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgDOTAMatchMinimal::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAMatchMinimal::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgDOTAMatchMinimal::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.duration)
  return _internal_duration();
}
inline void CMsgDOTAMatchMinimal::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.duration_ = value;
}
inline void CMsgDOTAMatchMinimal::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.duration)
}

// optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatchMinimal::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgDOTAMatchMinimal::clear_game_mode() {
  _impl_.game_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::DOTA_GameMode CMsgDOTAMatchMinimal::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(_impl_.game_mode_);
}
inline ::DOTA_GameMode CMsgDOTAMatchMinimal::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.game_mode)
  return _internal_game_mode();
}
inline void CMsgDOTAMatchMinimal::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.game_mode_ = value;
}
inline void CMsgDOTAMatchMinimal::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.game_mode)
}

// repeated .CMsgDOTAMatchMinimal.Player players = 6;
inline int CMsgDOTAMatchMinimal::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgDOTAMatchMinimal::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTAMatchMinimal::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >*
CMsgDOTAMatchMinimal::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchMinimal.players)
  return &_impl_.players_;
}
inline const ::CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.players)
  return _internal_players(index);
}
inline ::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::add_players() {
  ::CMsgDOTAMatchMinimal_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchMinimal.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >&
CMsgDOTAMatchMinimal::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchMinimal.players)
  return _impl_.players_;
}

// optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
inline bool CMsgDOTAMatchMinimal::_internal_has_tourney() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tourney_ != nullptr);
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_tourney() const {
  return _internal_has_tourney();
}
inline void CMsgDOTAMatchMinimal::clear_tourney() {
  if (_impl_.tourney_ != nullptr) _impl_.tourney_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal::_internal_tourney() const {
  const ::CMsgDOTAMatchMinimal_Tourney* p = _impl_.tourney_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAMatchMinimal_Tourney&>(
      ::_CMsgDOTAMatchMinimal_Tourney_default_instance_);
}
inline const ::CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal::tourney() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.tourney)
  return _internal_tourney();
}
inline void CMsgDOTAMatchMinimal::unsafe_arena_set_allocated_tourney(
    ::CMsgDOTAMatchMinimal_Tourney* tourney) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tourney_);
  }
  _impl_.tourney_ = tourney;
  if (tourney) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAMatchMinimal.tourney)
}
inline ::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::release_tourney() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatchMinimal_Tourney* temp = _impl_.tourney_;
  _impl_.tourney_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::unsafe_arena_release_tourney() {
  // @@protoc_insertion_point(field_release:CMsgDOTAMatchMinimal.tourney)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatchMinimal_Tourney* temp = _impl_.tourney_;
  _impl_.tourney_ = nullptr;
  return temp;
}
inline ::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::_internal_mutable_tourney() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tourney_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAMatchMinimal_Tourney>(GetArenaForAllocation());
    _impl_.tourney_ = p;
  }
  return _impl_.tourney_;
}
inline ::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::mutable_tourney() {
  ::CMsgDOTAMatchMinimal_Tourney* _msg = _internal_mutable_tourney();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.tourney)
  return _msg;
}
inline void CMsgDOTAMatchMinimal::set_allocated_tourney(::CMsgDOTAMatchMinimal_Tourney* tourney) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tourney_;
  }
  if (tourney) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tourney);
    if (message_arena != submessage_arena) {
      tourney = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tourney, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tourney_ = tourney;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.tourney)
}

// optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
inline bool CMsgDOTAMatchMinimal::_internal_has_match_outcome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_match_outcome() const {
  return _internal_has_match_outcome();
}
inline void CMsgDOTAMatchMinimal::clear_match_outcome() {
  _impl_.match_outcome_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::EMatchOutcome CMsgDOTAMatchMinimal::_internal_match_outcome() const {
  return static_cast< ::EMatchOutcome >(_impl_.match_outcome_);
}
inline ::EMatchOutcome CMsgDOTAMatchMinimal::match_outcome() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.match_outcome)
  return _internal_match_outcome();
}
inline void CMsgDOTAMatchMinimal::_internal_set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.match_outcome_ = value;
}
inline void CMsgDOTAMatchMinimal::set_match_outcome(::EMatchOutcome value) {
  _internal_set_match_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.match_outcome)
}

// optional uint32 radiant_score = 9;
inline bool CMsgDOTAMatchMinimal::_internal_has_radiant_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_radiant_score() const {
  return _internal_has_radiant_score();
}
inline void CMsgDOTAMatchMinimal::clear_radiant_score() {
  _impl_.radiant_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAMatchMinimal::_internal_radiant_score() const {
  return _impl_.radiant_score_;
}
inline uint32_t CMsgDOTAMatchMinimal::radiant_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.radiant_score)
  return _internal_radiant_score();
}
inline void CMsgDOTAMatchMinimal::_internal_set_radiant_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.radiant_score_ = value;
}
inline void CMsgDOTAMatchMinimal::set_radiant_score(uint32_t value) {
  _internal_set_radiant_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.radiant_score)
}

// optional uint32 dire_score = 10;
inline bool CMsgDOTAMatchMinimal::_internal_has_dire_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_dire_score() const {
  return _internal_has_dire_score();
}
inline void CMsgDOTAMatchMinimal::clear_dire_score() {
  _impl_.dire_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAMatchMinimal::_internal_dire_score() const {
  return _impl_.dire_score_;
}
inline uint32_t CMsgDOTAMatchMinimal::dire_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.dire_score)
  return _internal_dire_score();
}
inline void CMsgDOTAMatchMinimal::_internal_set_dire_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.dire_score_ = value;
}
inline void CMsgDOTAMatchMinimal::set_dire_score(uint32_t value) {
  _internal_set_dire_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.dire_score)
}

// optional uint32 lobby_type = 11;
inline bool CMsgDOTAMatchMinimal::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAMatchMinimal::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgDOTAMatchMinimal::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAMatchMinimal::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgDOTAMatchMinimal::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgDOTAMatchMinimal::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lobby_type_ = value;
}
inline void CMsgDOTAMatchMinimal::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.lobby_type)
}

// -------------------------------------------------------------------

// CMsgConsumableUsage

// optional uint32 item_def = 1;
inline bool CMsgConsumableUsage::_internal_has_item_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgConsumableUsage::has_item_def() const {
  return _internal_has_item_def();
}
inline void CMsgConsumableUsage::clear_item_def() {
  _impl_.item_def_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgConsumableUsage::_internal_item_def() const {
  return _impl_.item_def_;
}
inline uint32_t CMsgConsumableUsage::item_def() const {
  // @@protoc_insertion_point(field_get:CMsgConsumableUsage.item_def)
  return _internal_item_def();
}
inline void CMsgConsumableUsage::_internal_set_item_def(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_def_ = value;
}
inline void CMsgConsumableUsage::set_item_def(uint32_t value) {
  _internal_set_item_def(value);
  // @@protoc_insertion_point(field_set:CMsgConsumableUsage.item_def)
}

// optional int32 quantity_change = 2;
inline bool CMsgConsumableUsage::_internal_has_quantity_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgConsumableUsage::has_quantity_change() const {
  return _internal_has_quantity_change();
}
inline void CMsgConsumableUsage::clear_quantity_change() {
  _impl_.quantity_change_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgConsumableUsage::_internal_quantity_change() const {
  return _impl_.quantity_change_;
}
inline int32_t CMsgConsumableUsage::quantity_change() const {
  // @@protoc_insertion_point(field_get:CMsgConsumableUsage.quantity_change)
  return _internal_quantity_change();
}
inline void CMsgConsumableUsage::_internal_set_quantity_change(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.quantity_change_ = value;
}
inline void CMsgConsumableUsage::set_quantity_change(int32_t value) {
  _internal_set_quantity_change(value);
  // @@protoc_insertion_point(field_set:CMsgConsumableUsage.quantity_change)
}

// -------------------------------------------------------------------

// CMsgMatchConsumableUsage_PlayerUsage

// optional uint32 account_id = 1;
inline bool CMsgMatchConsumableUsage_PlayerUsage::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchConsumableUsage_PlayerUsage::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgMatchConsumableUsage_PlayerUsage::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchConsumableUsage_PlayerUsage::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgMatchConsumableUsage_PlayerUsage::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchConsumableUsage.PlayerUsage.account_id)
  return _internal_account_id();
}
inline void CMsgMatchConsumableUsage_PlayerUsage::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgMatchConsumableUsage_PlayerUsage::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchConsumableUsage.PlayerUsage.account_id)
}

// repeated .CMsgConsumableUsage consumables_used = 2;
inline int CMsgMatchConsumableUsage_PlayerUsage::_internal_consumables_used_size() const {
  return _impl_.consumables_used_.size();
}
inline int CMsgMatchConsumableUsage_PlayerUsage::consumables_used_size() const {
  return _internal_consumables_used_size();
}
inline void CMsgMatchConsumableUsage_PlayerUsage::clear_consumables_used() {
  _impl_.consumables_used_.Clear();
}
inline ::CMsgConsumableUsage* CMsgMatchConsumableUsage_PlayerUsage::mutable_consumables_used(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return _impl_.consumables_used_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConsumableUsage >*
CMsgMatchConsumableUsage_PlayerUsage::mutable_consumables_used() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return &_impl_.consumables_used_;
}
inline const ::CMsgConsumableUsage& CMsgMatchConsumableUsage_PlayerUsage::_internal_consumables_used(int index) const {
  return _impl_.consumables_used_.Get(index);
}
inline const ::CMsgConsumableUsage& CMsgMatchConsumableUsage_PlayerUsage::consumables_used(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return _internal_consumables_used(index);
}
inline ::CMsgConsumableUsage* CMsgMatchConsumableUsage_PlayerUsage::_internal_add_consumables_used() {
  return _impl_.consumables_used_.Add();
}
inline ::CMsgConsumableUsage* CMsgMatchConsumableUsage_PlayerUsage::add_consumables_used() {
  ::CMsgConsumableUsage* _add = _internal_add_consumables_used();
  // @@protoc_insertion_point(field_add:CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConsumableUsage >&
CMsgMatchConsumableUsage_PlayerUsage::consumables_used() const {
  // @@protoc_insertion_point(field_list:CMsgMatchConsumableUsage.PlayerUsage.consumables_used)
  return _impl_.consumables_used_;
}

// -------------------------------------------------------------------

// CMsgMatchConsumableUsage

// repeated .CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
inline int CMsgMatchConsumableUsage::_internal_player_consumables_used_size() const {
  return _impl_.player_consumables_used_.size();
}
inline int CMsgMatchConsumableUsage::player_consumables_used_size() const {
  return _internal_player_consumables_used_size();
}
inline void CMsgMatchConsumableUsage::clear_player_consumables_used() {
  _impl_.player_consumables_used_.Clear();
}
inline ::CMsgMatchConsumableUsage_PlayerUsage* CMsgMatchConsumableUsage::mutable_player_consumables_used(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchConsumableUsage.player_consumables_used)
  return _impl_.player_consumables_used_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchConsumableUsage_PlayerUsage >*
CMsgMatchConsumableUsage::mutable_player_consumables_used() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchConsumableUsage.player_consumables_used)
  return &_impl_.player_consumables_used_;
}
inline const ::CMsgMatchConsumableUsage_PlayerUsage& CMsgMatchConsumableUsage::_internal_player_consumables_used(int index) const {
  return _impl_.player_consumables_used_.Get(index);
}
inline const ::CMsgMatchConsumableUsage_PlayerUsage& CMsgMatchConsumableUsage::player_consumables_used(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchConsumableUsage.player_consumables_used)
  return _internal_player_consumables_used(index);
}
inline ::CMsgMatchConsumableUsage_PlayerUsage* CMsgMatchConsumableUsage::_internal_add_player_consumables_used() {
  return _impl_.player_consumables_used_.Add();
}
inline ::CMsgMatchConsumableUsage_PlayerUsage* CMsgMatchConsumableUsage::add_player_consumables_used() {
  ::CMsgMatchConsumableUsage_PlayerUsage* _add = _internal_add_player_consumables_used();
  // @@protoc_insertion_point(field_add:CMsgMatchConsumableUsage.player_consumables_used)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchConsumableUsage_PlayerUsage >&
CMsgMatchConsumableUsage::player_consumables_used() const {
  // @@protoc_insertion_point(field_list:CMsgMatchConsumableUsage.player_consumables_used)
  return _impl_.player_consumables_used_;
}

// -------------------------------------------------------------------

// CMsgMatchEventActionGrants_PlayerGrants

// optional uint32 account_id = 1;
inline bool CMsgMatchEventActionGrants_PlayerGrants::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchEventActionGrants_PlayerGrants::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgMatchEventActionGrants_PlayerGrants::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchEventActionGrants_PlayerGrants::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgMatchEventActionGrants_PlayerGrants::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchEventActionGrants.PlayerGrants.account_id)
  return _internal_account_id();
}
inline void CMsgMatchEventActionGrants_PlayerGrants::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgMatchEventActionGrants_PlayerGrants::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchEventActionGrants.PlayerGrants.account_id)
}

// repeated .CMsgPendingEventAward actions_granted = 3;
inline int CMsgMatchEventActionGrants_PlayerGrants::_internal_actions_granted_size() const {
  return _impl_.actions_granted_.size();
}
inline int CMsgMatchEventActionGrants_PlayerGrants::actions_granted_size() const {
  return _internal_actions_granted_size();
}
inline ::CMsgPendingEventAward* CMsgMatchEventActionGrants_PlayerGrants::mutable_actions_granted(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchEventActionGrants.PlayerGrants.actions_granted)
  return _impl_.actions_granted_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
CMsgMatchEventActionGrants_PlayerGrants::mutable_actions_granted() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchEventActionGrants.PlayerGrants.actions_granted)
  return &_impl_.actions_granted_;
}
inline const ::CMsgPendingEventAward& CMsgMatchEventActionGrants_PlayerGrants::_internal_actions_granted(int index) const {
  return _impl_.actions_granted_.Get(index);
}
inline const ::CMsgPendingEventAward& CMsgMatchEventActionGrants_PlayerGrants::actions_granted(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchEventActionGrants.PlayerGrants.actions_granted)
  return _internal_actions_granted(index);
}
inline ::CMsgPendingEventAward* CMsgMatchEventActionGrants_PlayerGrants::_internal_add_actions_granted() {
  return _impl_.actions_granted_.Add();
}
inline ::CMsgPendingEventAward* CMsgMatchEventActionGrants_PlayerGrants::add_actions_granted() {
  ::CMsgPendingEventAward* _add = _internal_add_actions_granted();
  // @@protoc_insertion_point(field_add:CMsgMatchEventActionGrants.PlayerGrants.actions_granted)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
CMsgMatchEventActionGrants_PlayerGrants::actions_granted() const {
  // @@protoc_insertion_point(field_list:CMsgMatchEventActionGrants.PlayerGrants.actions_granted)
  return _impl_.actions_granted_;
}

// -------------------------------------------------------------------

// CMsgMatchEventActionGrants

// repeated .CMsgMatchEventActionGrants.PlayerGrants player_grants = 1;
inline int CMsgMatchEventActionGrants::_internal_player_grants_size() const {
  return _impl_.player_grants_.size();
}
inline int CMsgMatchEventActionGrants::player_grants_size() const {
  return _internal_player_grants_size();
}
inline void CMsgMatchEventActionGrants::clear_player_grants() {
  _impl_.player_grants_.Clear();
}
inline ::CMsgMatchEventActionGrants_PlayerGrants* CMsgMatchEventActionGrants::mutable_player_grants(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchEventActionGrants.player_grants)
  return _impl_.player_grants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchEventActionGrants_PlayerGrants >*
CMsgMatchEventActionGrants::mutable_player_grants() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchEventActionGrants.player_grants)
  return &_impl_.player_grants_;
}
inline const ::CMsgMatchEventActionGrants_PlayerGrants& CMsgMatchEventActionGrants::_internal_player_grants(int index) const {
  return _impl_.player_grants_.Get(index);
}
inline const ::CMsgMatchEventActionGrants_PlayerGrants& CMsgMatchEventActionGrants::player_grants(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchEventActionGrants.player_grants)
  return _internal_player_grants(index);
}
inline ::CMsgMatchEventActionGrants_PlayerGrants* CMsgMatchEventActionGrants::_internal_add_player_grants() {
  return _impl_.player_grants_.Add();
}
inline ::CMsgMatchEventActionGrants_PlayerGrants* CMsgMatchEventActionGrants::add_player_grants() {
  ::CMsgMatchEventActionGrants_PlayerGrants* _add = _internal_add_player_grants();
  // @@protoc_insertion_point(field_add:CMsgMatchEventActionGrants.player_grants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchEventActionGrants_PlayerGrants >&
CMsgMatchEventActionGrants::player_grants() const {
  // @@protoc_insertion_point(field_list:CMsgMatchEventActionGrants.player_grants)
  return _impl_.player_grants_;
}

// -------------------------------------------------------------------

// CMsgCustomGameWhitelist

// optional uint32 version = 1;
inline bool CMsgCustomGameWhitelist::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCustomGameWhitelist::has_version() const {
  return _internal_has_version();
}
inline void CMsgCustomGameWhitelist::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgCustomGameWhitelist::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CMsgCustomGameWhitelist::version() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameWhitelist.version)
  return _internal_version();
}
inline void CMsgCustomGameWhitelist::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_ = value;
}
inline void CMsgCustomGameWhitelist::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameWhitelist.version)
}

// repeated uint64 custom_games_whitelist = 2;
inline int CMsgCustomGameWhitelist::_internal_custom_games_whitelist_size() const {
  return _impl_.custom_games_whitelist_.size();
}
inline int CMsgCustomGameWhitelist::custom_games_whitelist_size() const {
  return _internal_custom_games_whitelist_size();
}
inline void CMsgCustomGameWhitelist::clear_custom_games_whitelist() {
  _impl_.custom_games_whitelist_.Clear();
}
inline uint64_t CMsgCustomGameWhitelist::_internal_custom_games_whitelist(int index) const {
  return _impl_.custom_games_whitelist_.Get(index);
}
inline uint64_t CMsgCustomGameWhitelist::custom_games_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameWhitelist.custom_games_whitelist)
  return _internal_custom_games_whitelist(index);
}
inline void CMsgCustomGameWhitelist::set_custom_games_whitelist(int index, uint64_t value) {
  _impl_.custom_games_whitelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameWhitelist.custom_games_whitelist)
}
inline void CMsgCustomGameWhitelist::_internal_add_custom_games_whitelist(uint64_t value) {
  _impl_.custom_games_whitelist_.Add(value);
}
inline void CMsgCustomGameWhitelist::add_custom_games_whitelist(uint64_t value) {
  _internal_add_custom_games_whitelist(value);
  // @@protoc_insertion_point(field_add:CMsgCustomGameWhitelist.custom_games_whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgCustomGameWhitelist::_internal_custom_games_whitelist() const {
  return _impl_.custom_games_whitelist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgCustomGameWhitelist::custom_games_whitelist() const {
  // @@protoc_insertion_point(field_list:CMsgCustomGameWhitelist.custom_games_whitelist)
  return _internal_custom_games_whitelist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgCustomGameWhitelist::_internal_mutable_custom_games_whitelist() {
  return &_impl_.custom_games_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgCustomGameWhitelist::mutable_custom_games_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:CMsgCustomGameWhitelist.custom_games_whitelist)
  return _internal_mutable_custom_games_whitelist();
}

// optional bool disable_whitelist = 3;
inline bool CMsgCustomGameWhitelist::_internal_has_disable_whitelist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCustomGameWhitelist::has_disable_whitelist() const {
  return _internal_has_disable_whitelist();
}
inline void CMsgCustomGameWhitelist::clear_disable_whitelist() {
  _impl_.disable_whitelist_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgCustomGameWhitelist::_internal_disable_whitelist() const {
  return _impl_.disable_whitelist_;
}
inline bool CMsgCustomGameWhitelist::disable_whitelist() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameWhitelist.disable_whitelist)
  return _internal_disable_whitelist();
}
inline void CMsgCustomGameWhitelist::_internal_set_disable_whitelist(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.disable_whitelist_ = value;
}
inline void CMsgCustomGameWhitelist::set_disable_whitelist(bool value) {
  _internal_set_disable_whitelist(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameWhitelist.disable_whitelist)
}

// -------------------------------------------------------------------

// CMsgCustomGameWhitelistForEdit_WhitelistEntry

// optional uint64 custom_game_id = 1;
inline bool CMsgCustomGameWhitelistForEdit_WhitelistEntry::_internal_has_custom_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCustomGameWhitelistForEdit_WhitelistEntry::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgCustomGameWhitelistForEdit_WhitelistEntry::clear_custom_game_id() {
  _impl_.custom_game_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgCustomGameWhitelistForEdit_WhitelistEntry::_internal_custom_game_id() const {
  return _impl_.custom_game_id_;
}
inline uint64_t CMsgCustomGameWhitelistForEdit_WhitelistEntry::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameWhitelistForEdit.WhitelistEntry.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgCustomGameWhitelistForEdit_WhitelistEntry::_internal_set_custom_game_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.custom_game_id_ = value;
}
inline void CMsgCustomGameWhitelistForEdit_WhitelistEntry::set_custom_game_id(uint64_t value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameWhitelistForEdit.WhitelistEntry.custom_game_id)
}

// optional .ECustomGameWhitelistState whitelist_state = 2 [default = CUSTOM_GAME_WHITELIST_STATE_UNKNOWN];
inline bool CMsgCustomGameWhitelistForEdit_WhitelistEntry::_internal_has_whitelist_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCustomGameWhitelistForEdit_WhitelistEntry::has_whitelist_state() const {
  return _internal_has_whitelist_state();
}
inline void CMsgCustomGameWhitelistForEdit_WhitelistEntry::clear_whitelist_state() {
  _impl_.whitelist_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ECustomGameWhitelistState CMsgCustomGameWhitelistForEdit_WhitelistEntry::_internal_whitelist_state() const {
  return static_cast< ::ECustomGameWhitelistState >(_impl_.whitelist_state_);
}
inline ::ECustomGameWhitelistState CMsgCustomGameWhitelistForEdit_WhitelistEntry::whitelist_state() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameWhitelistForEdit.WhitelistEntry.whitelist_state)
  return _internal_whitelist_state();
}
inline void CMsgCustomGameWhitelistForEdit_WhitelistEntry::_internal_set_whitelist_state(::ECustomGameWhitelistState value) {
  assert(::ECustomGameWhitelistState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.whitelist_state_ = value;
}
inline void CMsgCustomGameWhitelistForEdit_WhitelistEntry::set_whitelist_state(::ECustomGameWhitelistState value) {
  _internal_set_whitelist_state(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameWhitelistForEdit.WhitelistEntry.whitelist_state)
}

// -------------------------------------------------------------------

// CMsgCustomGameWhitelistForEdit

// repeated .CMsgCustomGameWhitelistForEdit.WhitelistEntry whitelist_entries = 1;
inline int CMsgCustomGameWhitelistForEdit::_internal_whitelist_entries_size() const {
  return _impl_.whitelist_entries_.size();
}
inline int CMsgCustomGameWhitelistForEdit::whitelist_entries_size() const {
  return _internal_whitelist_entries_size();
}
inline void CMsgCustomGameWhitelistForEdit::clear_whitelist_entries() {
  _impl_.whitelist_entries_.Clear();
}
inline ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* CMsgCustomGameWhitelistForEdit::mutable_whitelist_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgCustomGameWhitelistForEdit.whitelist_entries)
  return _impl_.whitelist_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCustomGameWhitelistForEdit_WhitelistEntry >*
CMsgCustomGameWhitelistForEdit::mutable_whitelist_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgCustomGameWhitelistForEdit.whitelist_entries)
  return &_impl_.whitelist_entries_;
}
inline const ::CMsgCustomGameWhitelistForEdit_WhitelistEntry& CMsgCustomGameWhitelistForEdit::_internal_whitelist_entries(int index) const {
  return _impl_.whitelist_entries_.Get(index);
}
inline const ::CMsgCustomGameWhitelistForEdit_WhitelistEntry& CMsgCustomGameWhitelistForEdit::whitelist_entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameWhitelistForEdit.whitelist_entries)
  return _internal_whitelist_entries(index);
}
inline ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* CMsgCustomGameWhitelistForEdit::_internal_add_whitelist_entries() {
  return _impl_.whitelist_entries_.Add();
}
inline ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* CMsgCustomGameWhitelistForEdit::add_whitelist_entries() {
  ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* _add = _internal_add_whitelist_entries();
  // @@protoc_insertion_point(field_add:CMsgCustomGameWhitelistForEdit.whitelist_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCustomGameWhitelistForEdit_WhitelistEntry >&
CMsgCustomGameWhitelistForEdit::whitelist_entries() const {
  // @@protoc_insertion_point(field_list:CMsgCustomGameWhitelistForEdit.whitelist_entries)
  return _impl_.whitelist_entries_;
}

// -------------------------------------------------------------------

// CMsgPlayerRecentMatchInfo

// optional uint64 match_id = 1;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgPlayerRecentMatchInfo::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgPlayerRecentMatchInfo::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgPlayerRecentMatchInfo::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.match_id)
  return _internal_match_id();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.match_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgPlayerRecentMatchInfo::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPlayerRecentMatchInfo::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgPlayerRecentMatchInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.timestamp)
  return _internal_timestamp();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.timestamp)
}

// optional uint32 duration = 3;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgPlayerRecentMatchInfo::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPlayerRecentMatchInfo::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgPlayerRecentMatchInfo::duration() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.duration)
  return _internal_duration();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.duration)
}

// optional bool win = 4;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_win() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_win() const {
  return _internal_has_win();
}
inline void CMsgPlayerRecentMatchInfo::clear_win() {
  _impl_.win_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgPlayerRecentMatchInfo::_internal_win() const {
  return _impl_.win_;
}
inline bool CMsgPlayerRecentMatchInfo::win() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.win)
  return _internal_win();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_win(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.win_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_win(bool value) {
  _internal_set_win(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.win)
}

// optional uint32 hero_id = 5;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgPlayerRecentMatchInfo::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgPlayerRecentMatchInfo::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgPlayerRecentMatchInfo::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.hero_id)
  return _internal_hero_id();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hero_id_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.hero_id)
}

// optional uint32 kills = 6;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgPlayerRecentMatchInfo::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgPlayerRecentMatchInfo::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgPlayerRecentMatchInfo::kills() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.kills)
  return _internal_kills();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kills_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.kills)
}

// optional uint32 deaths = 7;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgPlayerRecentMatchInfo::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgPlayerRecentMatchInfo::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgPlayerRecentMatchInfo::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.deaths)
  return _internal_deaths();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deaths_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.deaths)
}

// optional uint32 assists = 8;
inline bool CMsgPlayerRecentMatchInfo::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchInfo::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgPlayerRecentMatchInfo::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgPlayerRecentMatchInfo::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgPlayerRecentMatchInfo::assists() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchInfo.assists)
  return _internal_assists();
}
inline void CMsgPlayerRecentMatchInfo::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.assists_ = value;
}
inline void CMsgPlayerRecentMatchInfo::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchInfo.assists)
}

// -------------------------------------------------------------------

// CMsgPlayerMatchRecord

// optional uint32 wins = 1;
inline bool CMsgPlayerMatchRecord::_internal_has_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerMatchRecord::has_wins() const {
  return _internal_has_wins();
}
inline void CMsgPlayerMatchRecord::clear_wins() {
  _impl_.wins_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPlayerMatchRecord::_internal_wins() const {
  return _impl_.wins_;
}
inline uint32_t CMsgPlayerMatchRecord::wins() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerMatchRecord.wins)
  return _internal_wins();
}
inline void CMsgPlayerMatchRecord::_internal_set_wins(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wins_ = value;
}
inline void CMsgPlayerMatchRecord::set_wins(uint32_t value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerMatchRecord.wins)
}

// optional uint32 losses = 2;
inline bool CMsgPlayerMatchRecord::_internal_has_losses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPlayerMatchRecord::has_losses() const {
  return _internal_has_losses();
}
inline void CMsgPlayerMatchRecord::clear_losses() {
  _impl_.losses_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPlayerMatchRecord::_internal_losses() const {
  return _impl_.losses_;
}
inline uint32_t CMsgPlayerMatchRecord::losses() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerMatchRecord.losses)
  return _internal_losses();
}
inline void CMsgPlayerMatchRecord::_internal_set_losses(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.losses_ = value;
}
inline void CMsgPlayerMatchRecord::set_losses(uint32_t value) {
  _internal_set_losses(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerMatchRecord.losses)
}

// -------------------------------------------------------------------

// CMsgPlayerRecentMatchOutcomes

// optional uint32 outcomes = 1;
inline bool CMsgPlayerRecentMatchOutcomes::_internal_has_outcomes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchOutcomes::has_outcomes() const {
  return _internal_has_outcomes();
}
inline void CMsgPlayerRecentMatchOutcomes::clear_outcomes() {
  _impl_.outcomes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPlayerRecentMatchOutcomes::_internal_outcomes() const {
  return _impl_.outcomes_;
}
inline uint32_t CMsgPlayerRecentMatchOutcomes::outcomes() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchOutcomes.outcomes)
  return _internal_outcomes();
}
inline void CMsgPlayerRecentMatchOutcomes::_internal_set_outcomes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.outcomes_ = value;
}
inline void CMsgPlayerRecentMatchOutcomes::set_outcomes(uint32_t value) {
  _internal_set_outcomes(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchOutcomes.outcomes)
}

// optional uint32 match_count = 2;
inline bool CMsgPlayerRecentMatchOutcomes::_internal_has_match_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPlayerRecentMatchOutcomes::has_match_count() const {
  return _internal_has_match_count();
}
inline void CMsgPlayerRecentMatchOutcomes::clear_match_count() {
  _impl_.match_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPlayerRecentMatchOutcomes::_internal_match_count() const {
  return _impl_.match_count_;
}
inline uint32_t CMsgPlayerRecentMatchOutcomes::match_count() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentMatchOutcomes.match_count)
  return _internal_match_count();
}
inline void CMsgPlayerRecentMatchOutcomes::_internal_set_match_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_count_ = value;
}
inline void CMsgPlayerRecentMatchOutcomes::set_match_count(uint32_t value) {
  _internal_set_match_count(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentMatchOutcomes.match_count)
}

// -------------------------------------------------------------------

// CMsgPlayerRecentCommends

// optional uint32 commends = 1;
inline bool CMsgPlayerRecentCommends::_internal_has_commends() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerRecentCommends::has_commends() const {
  return _internal_has_commends();
}
inline void CMsgPlayerRecentCommends::clear_commends() {
  _impl_.commends_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPlayerRecentCommends::_internal_commends() const {
  return _impl_.commends_;
}
inline uint32_t CMsgPlayerRecentCommends::commends() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentCommends.commends)
  return _internal_commends();
}
inline void CMsgPlayerRecentCommends::_internal_set_commends(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.commends_ = value;
}
inline void CMsgPlayerRecentCommends::set_commends(uint32_t value) {
  _internal_set_commends(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentCommends.commends)
}

// optional uint32 match_count = 2;
inline bool CMsgPlayerRecentCommends::_internal_has_match_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPlayerRecentCommends::has_match_count() const {
  return _internal_has_match_count();
}
inline void CMsgPlayerRecentCommends::clear_match_count() {
  _impl_.match_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPlayerRecentCommends::_internal_match_count() const {
  return _impl_.match_count_;
}
inline uint32_t CMsgPlayerRecentCommends::match_count() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentCommends.match_count)
  return _internal_match_count();
}
inline void CMsgPlayerRecentCommends::_internal_set_match_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_count_ = value;
}
inline void CMsgPlayerRecentCommends::set_match_count(uint32_t value) {
  _internal_set_match_count(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentCommends.match_count)
}

// -------------------------------------------------------------------

// CMsgPlayerRecentAccomplishments

// optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_recent_outcomes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recent_outcomes_ != nullptr);
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_recent_outcomes() const {
  return _internal_has_recent_outcomes();
}
inline void CMsgPlayerRecentAccomplishments::clear_recent_outcomes() {
  if (_impl_.recent_outcomes_ != nullptr) _impl_.recent_outcomes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgPlayerRecentMatchOutcomes& CMsgPlayerRecentAccomplishments::_internal_recent_outcomes() const {
  const ::CMsgPlayerRecentMatchOutcomes* p = _impl_.recent_outcomes_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerRecentMatchOutcomes&>(
      ::_CMsgPlayerRecentMatchOutcomes_default_instance_);
}
inline const ::CMsgPlayerRecentMatchOutcomes& CMsgPlayerRecentAccomplishments::recent_outcomes() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.recent_outcomes)
  return _internal_recent_outcomes();
}
inline void CMsgPlayerRecentAccomplishments::unsafe_arena_set_allocated_recent_outcomes(
    ::CMsgPlayerRecentMatchOutcomes* recent_outcomes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recent_outcomes_);
  }
  _impl_.recent_outcomes_ = recent_outcomes;
  if (recent_outcomes) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerRecentAccomplishments.recent_outcomes)
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::release_recent_outcomes() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPlayerRecentMatchOutcomes* temp = _impl_.recent_outcomes_;
  _impl_.recent_outcomes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::unsafe_arena_release_recent_outcomes() {
  // @@protoc_insertion_point(field_release:CMsgPlayerRecentAccomplishments.recent_outcomes)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPlayerRecentMatchOutcomes* temp = _impl_.recent_outcomes_;
  _impl_.recent_outcomes_ = nullptr;
  return temp;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::_internal_mutable_recent_outcomes() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.recent_outcomes_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerRecentMatchOutcomes>(GetArenaForAllocation());
    _impl_.recent_outcomes_ = p;
  }
  return _impl_.recent_outcomes_;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::mutable_recent_outcomes() {
  ::CMsgPlayerRecentMatchOutcomes* _msg = _internal_mutable_recent_outcomes();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerRecentAccomplishments.recent_outcomes)
  return _msg;
}
inline void CMsgPlayerRecentAccomplishments::set_allocated_recent_outcomes(::CMsgPlayerRecentMatchOutcomes* recent_outcomes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recent_outcomes_;
  }
  if (recent_outcomes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recent_outcomes);
    if (message_arena != submessage_arena) {
      recent_outcomes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recent_outcomes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.recent_outcomes_ = recent_outcomes;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerRecentAccomplishments.recent_outcomes)
}

// optional .CMsgPlayerMatchRecord total_record = 2;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_total_record() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_record_ != nullptr);
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_total_record() const {
  return _internal_has_total_record();
}
inline void CMsgPlayerRecentAccomplishments::clear_total_record() {
  if (_impl_.total_record_ != nullptr) _impl_.total_record_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgPlayerMatchRecord& CMsgPlayerRecentAccomplishments::_internal_total_record() const {
  const ::CMsgPlayerMatchRecord* p = _impl_.total_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerMatchRecord&>(
      ::_CMsgPlayerMatchRecord_default_instance_);
}
inline const ::CMsgPlayerMatchRecord& CMsgPlayerRecentAccomplishments::total_record() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.total_record)
  return _internal_total_record();
}
inline void CMsgPlayerRecentAccomplishments::unsafe_arena_set_allocated_total_record(
    ::CMsgPlayerMatchRecord* total_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_record_);
  }
  _impl_.total_record_ = total_record;
  if (total_record) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerRecentAccomplishments.total_record)
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerRecentAccomplishments::release_total_record() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPlayerMatchRecord* temp = _impl_.total_record_;
  _impl_.total_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerRecentAccomplishments::unsafe_arena_release_total_record() {
  // @@protoc_insertion_point(field_release:CMsgPlayerRecentAccomplishments.total_record)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPlayerMatchRecord* temp = _impl_.total_record_;
  _impl_.total_record_ = nullptr;
  return temp;
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerRecentAccomplishments::_internal_mutable_total_record() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.total_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerMatchRecord>(GetArenaForAllocation());
    _impl_.total_record_ = p;
  }
  return _impl_.total_record_;
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerRecentAccomplishments::mutable_total_record() {
  ::CMsgPlayerMatchRecord* _msg = _internal_mutable_total_record();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerRecentAccomplishments.total_record)
  return _msg;
}
inline void CMsgPlayerRecentAccomplishments::set_allocated_total_record(::CMsgPlayerMatchRecord* total_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_record_;
  }
  if (total_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_record);
    if (message_arena != submessage_arena) {
      total_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_record, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.total_record_ = total_record;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerRecentAccomplishments.total_record)
}

// optional uint32 prediction_streak = 3;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_prediction_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_prediction_streak() const {
  return _internal_has_prediction_streak();
}
inline void CMsgPlayerRecentAccomplishments::clear_prediction_streak() {
  _impl_.prediction_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgPlayerRecentAccomplishments::_internal_prediction_streak() const {
  return _impl_.prediction_streak_;
}
inline uint32_t CMsgPlayerRecentAccomplishments::prediction_streak() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.prediction_streak)
  return _internal_prediction_streak();
}
inline void CMsgPlayerRecentAccomplishments::_internal_set_prediction_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.prediction_streak_ = value;
}
inline void CMsgPlayerRecentAccomplishments::set_prediction_streak(uint32_t value) {
  _internal_set_prediction_streak(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentAccomplishments.prediction_streak)
}

// optional uint32 plus_prediction_streak = 4;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_plus_prediction_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_plus_prediction_streak() const {
  return _internal_has_plus_prediction_streak();
}
inline void CMsgPlayerRecentAccomplishments::clear_plus_prediction_streak() {
  _impl_.plus_prediction_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgPlayerRecentAccomplishments::_internal_plus_prediction_streak() const {
  return _impl_.plus_prediction_streak_;
}
inline uint32_t CMsgPlayerRecentAccomplishments::plus_prediction_streak() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.plus_prediction_streak)
  return _internal_plus_prediction_streak();
}
inline void CMsgPlayerRecentAccomplishments::_internal_set_plus_prediction_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.plus_prediction_streak_ = value;
}
inline void CMsgPlayerRecentAccomplishments::set_plus_prediction_streak(uint32_t value) {
  _internal_set_plus_prediction_streak(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentAccomplishments.plus_prediction_streak)
}

// optional .CMsgPlayerRecentCommends recent_commends = 5;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_recent_commends() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recent_commends_ != nullptr);
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_recent_commends() const {
  return _internal_has_recent_commends();
}
inline void CMsgPlayerRecentAccomplishments::clear_recent_commends() {
  if (_impl_.recent_commends_ != nullptr) _impl_.recent_commends_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgPlayerRecentCommends& CMsgPlayerRecentAccomplishments::_internal_recent_commends() const {
  const ::CMsgPlayerRecentCommends* p = _impl_.recent_commends_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerRecentCommends&>(
      ::_CMsgPlayerRecentCommends_default_instance_);
}
inline const ::CMsgPlayerRecentCommends& CMsgPlayerRecentAccomplishments::recent_commends() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.recent_commends)
  return _internal_recent_commends();
}
inline void CMsgPlayerRecentAccomplishments::unsafe_arena_set_allocated_recent_commends(
    ::CMsgPlayerRecentCommends* recent_commends) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recent_commends_);
  }
  _impl_.recent_commends_ = recent_commends;
  if (recent_commends) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerRecentAccomplishments.recent_commends)
}
inline ::CMsgPlayerRecentCommends* CMsgPlayerRecentAccomplishments::release_recent_commends() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgPlayerRecentCommends* temp = _impl_.recent_commends_;
  _impl_.recent_commends_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerRecentCommends* CMsgPlayerRecentAccomplishments::unsafe_arena_release_recent_commends() {
  // @@protoc_insertion_point(field_release:CMsgPlayerRecentAccomplishments.recent_commends)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgPlayerRecentCommends* temp = _impl_.recent_commends_;
  _impl_.recent_commends_ = nullptr;
  return temp;
}
inline ::CMsgPlayerRecentCommends* CMsgPlayerRecentAccomplishments::_internal_mutable_recent_commends() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.recent_commends_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerRecentCommends>(GetArenaForAllocation());
    _impl_.recent_commends_ = p;
  }
  return _impl_.recent_commends_;
}
inline ::CMsgPlayerRecentCommends* CMsgPlayerRecentAccomplishments::mutable_recent_commends() {
  ::CMsgPlayerRecentCommends* _msg = _internal_mutable_recent_commends();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerRecentAccomplishments.recent_commends)
  return _msg;
}
inline void CMsgPlayerRecentAccomplishments::set_allocated_recent_commends(::CMsgPlayerRecentCommends* recent_commends) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recent_commends_;
  }
  if (recent_commends) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recent_commends);
    if (message_arena != submessage_arena) {
      recent_commends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recent_commends, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.recent_commends_ = recent_commends;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerRecentAccomplishments.recent_commends)
}

// optional uint32 first_match_timestamp = 6;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_first_match_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_first_match_timestamp() const {
  return _internal_has_first_match_timestamp();
}
inline void CMsgPlayerRecentAccomplishments::clear_first_match_timestamp() {
  _impl_.first_match_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgPlayerRecentAccomplishments::_internal_first_match_timestamp() const {
  return _impl_.first_match_timestamp_;
}
inline uint32_t CMsgPlayerRecentAccomplishments::first_match_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.first_match_timestamp)
  return _internal_first_match_timestamp();
}
inline void CMsgPlayerRecentAccomplishments::_internal_set_first_match_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.first_match_timestamp_ = value;
}
inline void CMsgPlayerRecentAccomplishments::set_first_match_timestamp(uint32_t value) {
  _internal_set_first_match_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerRecentAccomplishments.first_match_timestamp)
}

// optional .CMsgPlayerRecentMatchInfo last_match = 7;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_last_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_match_ != nullptr);
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_last_match() const {
  return _internal_has_last_match();
}
inline void CMsgPlayerRecentAccomplishments::clear_last_match() {
  if (_impl_.last_match_ != nullptr) _impl_.last_match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgPlayerRecentMatchInfo& CMsgPlayerRecentAccomplishments::_internal_last_match() const {
  const ::CMsgPlayerRecentMatchInfo* p = _impl_.last_match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerRecentMatchInfo&>(
      ::_CMsgPlayerRecentMatchInfo_default_instance_);
}
inline const ::CMsgPlayerRecentMatchInfo& CMsgPlayerRecentAccomplishments::last_match() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.last_match)
  return _internal_last_match();
}
inline void CMsgPlayerRecentAccomplishments::unsafe_arena_set_allocated_last_match(
    ::CMsgPlayerRecentMatchInfo* last_match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_match_);
  }
  _impl_.last_match_ = last_match;
  if (last_match) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerRecentAccomplishments.last_match)
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerRecentAccomplishments::release_last_match() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgPlayerRecentMatchInfo* temp = _impl_.last_match_;
  _impl_.last_match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerRecentAccomplishments::unsafe_arena_release_last_match() {
  // @@protoc_insertion_point(field_release:CMsgPlayerRecentAccomplishments.last_match)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgPlayerRecentMatchInfo* temp = _impl_.last_match_;
  _impl_.last_match_ = nullptr;
  return temp;
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerRecentAccomplishments::_internal_mutable_last_match() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.last_match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerRecentMatchInfo>(GetArenaForAllocation());
    _impl_.last_match_ = p;
  }
  return _impl_.last_match_;
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerRecentAccomplishments::mutable_last_match() {
  ::CMsgPlayerRecentMatchInfo* _msg = _internal_mutable_last_match();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerRecentAccomplishments.last_match)
  return _msg;
}
inline void CMsgPlayerRecentAccomplishments::set_allocated_last_match(::CMsgPlayerRecentMatchInfo* last_match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_match_;
  }
  if (last_match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_match);
    if (message_arena != submessage_arena) {
      last_match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_match, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.last_match_ = last_match;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerRecentAccomplishments.last_match)
}

// optional .CMsgPlayerRecentMatchOutcomes recent_mvps = 8;
inline bool CMsgPlayerRecentAccomplishments::_internal_has_recent_mvps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recent_mvps_ != nullptr);
  return value;
}
inline bool CMsgPlayerRecentAccomplishments::has_recent_mvps() const {
  return _internal_has_recent_mvps();
}
inline void CMsgPlayerRecentAccomplishments::clear_recent_mvps() {
  if (_impl_.recent_mvps_ != nullptr) _impl_.recent_mvps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgPlayerRecentMatchOutcomes& CMsgPlayerRecentAccomplishments::_internal_recent_mvps() const {
  const ::CMsgPlayerRecentMatchOutcomes* p = _impl_.recent_mvps_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerRecentMatchOutcomes&>(
      ::_CMsgPlayerRecentMatchOutcomes_default_instance_);
}
inline const ::CMsgPlayerRecentMatchOutcomes& CMsgPlayerRecentAccomplishments::recent_mvps() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerRecentAccomplishments.recent_mvps)
  return _internal_recent_mvps();
}
inline void CMsgPlayerRecentAccomplishments::unsafe_arena_set_allocated_recent_mvps(
    ::CMsgPlayerRecentMatchOutcomes* recent_mvps) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recent_mvps_);
  }
  _impl_.recent_mvps_ = recent_mvps;
  if (recent_mvps) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerRecentAccomplishments.recent_mvps)
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::release_recent_mvps() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgPlayerRecentMatchOutcomes* temp = _impl_.recent_mvps_;
  _impl_.recent_mvps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::unsafe_arena_release_recent_mvps() {
  // @@protoc_insertion_point(field_release:CMsgPlayerRecentAccomplishments.recent_mvps)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgPlayerRecentMatchOutcomes* temp = _impl_.recent_mvps_;
  _impl_.recent_mvps_ = nullptr;
  return temp;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::_internal_mutable_recent_mvps() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.recent_mvps_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerRecentMatchOutcomes>(GetArenaForAllocation());
    _impl_.recent_mvps_ = p;
  }
  return _impl_.recent_mvps_;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerRecentAccomplishments::mutable_recent_mvps() {
  ::CMsgPlayerRecentMatchOutcomes* _msg = _internal_mutable_recent_mvps();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerRecentAccomplishments.recent_mvps)
  return _msg;
}
inline void CMsgPlayerRecentAccomplishments::set_allocated_recent_mvps(::CMsgPlayerRecentMatchOutcomes* recent_mvps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recent_mvps_;
  }
  if (recent_mvps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recent_mvps);
    if (message_arena != submessage_arena) {
      recent_mvps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recent_mvps, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.recent_mvps_ = recent_mvps;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerRecentAccomplishments.recent_mvps)
}

// -------------------------------------------------------------------

// CMsgPlayerHeroRecentAccomplishments

// optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
inline bool CMsgPlayerHeroRecentAccomplishments::_internal_has_recent_outcomes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recent_outcomes_ != nullptr);
  return value;
}
inline bool CMsgPlayerHeroRecentAccomplishments::has_recent_outcomes() const {
  return _internal_has_recent_outcomes();
}
inline void CMsgPlayerHeroRecentAccomplishments::clear_recent_outcomes() {
  if (_impl_.recent_outcomes_ != nullptr) _impl_.recent_outcomes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgPlayerRecentMatchOutcomes& CMsgPlayerHeroRecentAccomplishments::_internal_recent_outcomes() const {
  const ::CMsgPlayerRecentMatchOutcomes* p = _impl_.recent_outcomes_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerRecentMatchOutcomes&>(
      ::_CMsgPlayerRecentMatchOutcomes_default_instance_);
}
inline const ::CMsgPlayerRecentMatchOutcomes& CMsgPlayerHeroRecentAccomplishments::recent_outcomes() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerHeroRecentAccomplishments.recent_outcomes)
  return _internal_recent_outcomes();
}
inline void CMsgPlayerHeroRecentAccomplishments::unsafe_arena_set_allocated_recent_outcomes(
    ::CMsgPlayerRecentMatchOutcomes* recent_outcomes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recent_outcomes_);
  }
  _impl_.recent_outcomes_ = recent_outcomes;
  if (recent_outcomes) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerHeroRecentAccomplishments.recent_outcomes)
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerHeroRecentAccomplishments::release_recent_outcomes() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPlayerRecentMatchOutcomes* temp = _impl_.recent_outcomes_;
  _impl_.recent_outcomes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerHeroRecentAccomplishments::unsafe_arena_release_recent_outcomes() {
  // @@protoc_insertion_point(field_release:CMsgPlayerHeroRecentAccomplishments.recent_outcomes)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPlayerRecentMatchOutcomes* temp = _impl_.recent_outcomes_;
  _impl_.recent_outcomes_ = nullptr;
  return temp;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerHeroRecentAccomplishments::_internal_mutable_recent_outcomes() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.recent_outcomes_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerRecentMatchOutcomes>(GetArenaForAllocation());
    _impl_.recent_outcomes_ = p;
  }
  return _impl_.recent_outcomes_;
}
inline ::CMsgPlayerRecentMatchOutcomes* CMsgPlayerHeroRecentAccomplishments::mutable_recent_outcomes() {
  ::CMsgPlayerRecentMatchOutcomes* _msg = _internal_mutable_recent_outcomes();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerHeroRecentAccomplishments.recent_outcomes)
  return _msg;
}
inline void CMsgPlayerHeroRecentAccomplishments::set_allocated_recent_outcomes(::CMsgPlayerRecentMatchOutcomes* recent_outcomes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recent_outcomes_;
  }
  if (recent_outcomes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recent_outcomes);
    if (message_arena != submessage_arena) {
      recent_outcomes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recent_outcomes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.recent_outcomes_ = recent_outcomes;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerHeroRecentAccomplishments.recent_outcomes)
}

// optional .CMsgPlayerMatchRecord total_record = 2;
inline bool CMsgPlayerHeroRecentAccomplishments::_internal_has_total_record() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_record_ != nullptr);
  return value;
}
inline bool CMsgPlayerHeroRecentAccomplishments::has_total_record() const {
  return _internal_has_total_record();
}
inline void CMsgPlayerHeroRecentAccomplishments::clear_total_record() {
  if (_impl_.total_record_ != nullptr) _impl_.total_record_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgPlayerMatchRecord& CMsgPlayerHeroRecentAccomplishments::_internal_total_record() const {
  const ::CMsgPlayerMatchRecord* p = _impl_.total_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerMatchRecord&>(
      ::_CMsgPlayerMatchRecord_default_instance_);
}
inline const ::CMsgPlayerMatchRecord& CMsgPlayerHeroRecentAccomplishments::total_record() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerHeroRecentAccomplishments.total_record)
  return _internal_total_record();
}
inline void CMsgPlayerHeroRecentAccomplishments::unsafe_arena_set_allocated_total_record(
    ::CMsgPlayerMatchRecord* total_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_record_);
  }
  _impl_.total_record_ = total_record;
  if (total_record) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerHeroRecentAccomplishments.total_record)
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerHeroRecentAccomplishments::release_total_record() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPlayerMatchRecord* temp = _impl_.total_record_;
  _impl_.total_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerHeroRecentAccomplishments::unsafe_arena_release_total_record() {
  // @@protoc_insertion_point(field_release:CMsgPlayerHeroRecentAccomplishments.total_record)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPlayerMatchRecord* temp = _impl_.total_record_;
  _impl_.total_record_ = nullptr;
  return temp;
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerHeroRecentAccomplishments::_internal_mutable_total_record() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.total_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerMatchRecord>(GetArenaForAllocation());
    _impl_.total_record_ = p;
  }
  return _impl_.total_record_;
}
inline ::CMsgPlayerMatchRecord* CMsgPlayerHeroRecentAccomplishments::mutable_total_record() {
  ::CMsgPlayerMatchRecord* _msg = _internal_mutable_total_record();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerHeroRecentAccomplishments.total_record)
  return _msg;
}
inline void CMsgPlayerHeroRecentAccomplishments::set_allocated_total_record(::CMsgPlayerMatchRecord* total_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_record_;
  }
  if (total_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_record);
    if (message_arena != submessage_arena) {
      total_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_record, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.total_record_ = total_record;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerHeroRecentAccomplishments.total_record)
}

// optional .CMsgPlayerRecentMatchInfo last_match = 3;
inline bool CMsgPlayerHeroRecentAccomplishments::_internal_has_last_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_match_ != nullptr);
  return value;
}
inline bool CMsgPlayerHeroRecentAccomplishments::has_last_match() const {
  return _internal_has_last_match();
}
inline void CMsgPlayerHeroRecentAccomplishments::clear_last_match() {
  if (_impl_.last_match_ != nullptr) _impl_.last_match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgPlayerRecentMatchInfo& CMsgPlayerHeroRecentAccomplishments::_internal_last_match() const {
  const ::CMsgPlayerRecentMatchInfo* p = _impl_.last_match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerRecentMatchInfo&>(
      ::_CMsgPlayerRecentMatchInfo_default_instance_);
}
inline const ::CMsgPlayerRecentMatchInfo& CMsgPlayerHeroRecentAccomplishments::last_match() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerHeroRecentAccomplishments.last_match)
  return _internal_last_match();
}
inline void CMsgPlayerHeroRecentAccomplishments::unsafe_arena_set_allocated_last_match(
    ::CMsgPlayerRecentMatchInfo* last_match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_match_);
  }
  _impl_.last_match_ = last_match;
  if (last_match) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPlayerHeroRecentAccomplishments.last_match)
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerHeroRecentAccomplishments::release_last_match() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgPlayerRecentMatchInfo* temp = _impl_.last_match_;
  _impl_.last_match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerHeroRecentAccomplishments::unsafe_arena_release_last_match() {
  // @@protoc_insertion_point(field_release:CMsgPlayerHeroRecentAccomplishments.last_match)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgPlayerRecentMatchInfo* temp = _impl_.last_match_;
  _impl_.last_match_ = nullptr;
  return temp;
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerHeroRecentAccomplishments::_internal_mutable_last_match() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.last_match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerRecentMatchInfo>(GetArenaForAllocation());
    _impl_.last_match_ = p;
  }
  return _impl_.last_match_;
}
inline ::CMsgPlayerRecentMatchInfo* CMsgPlayerHeroRecentAccomplishments::mutable_last_match() {
  ::CMsgPlayerRecentMatchInfo* _msg = _internal_mutable_last_match();
  // @@protoc_insertion_point(field_mutable:CMsgPlayerHeroRecentAccomplishments.last_match)
  return _msg;
}
inline void CMsgPlayerHeroRecentAccomplishments::set_allocated_last_match(::CMsgPlayerRecentMatchInfo* last_match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_match_;
  }
  if (last_match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_match);
    if (message_arena != submessage_arena) {
      last_match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_match, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.last_match_ = last_match;
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerHeroRecentAccomplishments.last_match)
}

// -------------------------------------------------------------------

// CMsgRecentAccomplishments

// optional .CMsgPlayerRecentAccomplishments player_accomplishments = 1;
inline bool CMsgRecentAccomplishments::_internal_has_player_accomplishments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_accomplishments_ != nullptr);
  return value;
}
inline bool CMsgRecentAccomplishments::has_player_accomplishments() const {
  return _internal_has_player_accomplishments();
}
inline void CMsgRecentAccomplishments::clear_player_accomplishments() {
  if (_impl_.player_accomplishments_ != nullptr) _impl_.player_accomplishments_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgPlayerRecentAccomplishments& CMsgRecentAccomplishments::_internal_player_accomplishments() const {
  const ::CMsgPlayerRecentAccomplishments* p = _impl_.player_accomplishments_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerRecentAccomplishments&>(
      ::_CMsgPlayerRecentAccomplishments_default_instance_);
}
inline const ::CMsgPlayerRecentAccomplishments& CMsgRecentAccomplishments::player_accomplishments() const {
  // @@protoc_insertion_point(field_get:CMsgRecentAccomplishments.player_accomplishments)
  return _internal_player_accomplishments();
}
inline void CMsgRecentAccomplishments::unsafe_arena_set_allocated_player_accomplishments(
    ::CMsgPlayerRecentAccomplishments* player_accomplishments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_accomplishments_);
  }
  _impl_.player_accomplishments_ = player_accomplishments;
  if (player_accomplishments) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgRecentAccomplishments.player_accomplishments)
}
inline ::CMsgPlayerRecentAccomplishments* CMsgRecentAccomplishments::release_player_accomplishments() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPlayerRecentAccomplishments* temp = _impl_.player_accomplishments_;
  _impl_.player_accomplishments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerRecentAccomplishments* CMsgRecentAccomplishments::unsafe_arena_release_player_accomplishments() {
  // @@protoc_insertion_point(field_release:CMsgRecentAccomplishments.player_accomplishments)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPlayerRecentAccomplishments* temp = _impl_.player_accomplishments_;
  _impl_.player_accomplishments_ = nullptr;
  return temp;
}
inline ::CMsgPlayerRecentAccomplishments* CMsgRecentAccomplishments::_internal_mutable_player_accomplishments() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.player_accomplishments_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerRecentAccomplishments>(GetArenaForAllocation());
    _impl_.player_accomplishments_ = p;
  }
  return _impl_.player_accomplishments_;
}
inline ::CMsgPlayerRecentAccomplishments* CMsgRecentAccomplishments::mutable_player_accomplishments() {
  ::CMsgPlayerRecentAccomplishments* _msg = _internal_mutable_player_accomplishments();
  // @@protoc_insertion_point(field_mutable:CMsgRecentAccomplishments.player_accomplishments)
  return _msg;
}
inline void CMsgRecentAccomplishments::set_allocated_player_accomplishments(::CMsgPlayerRecentAccomplishments* player_accomplishments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_accomplishments_;
  }
  if (player_accomplishments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_accomplishments);
    if (message_arena != submessage_arena) {
      player_accomplishments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_accomplishments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_accomplishments_ = player_accomplishments;
  // @@protoc_insertion_point(field_set_allocated:CMsgRecentAccomplishments.player_accomplishments)
}

// optional .CMsgPlayerHeroRecentAccomplishments hero_accomplishments = 2;
inline bool CMsgRecentAccomplishments::_internal_has_hero_accomplishments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hero_accomplishments_ != nullptr);
  return value;
}
inline bool CMsgRecentAccomplishments::has_hero_accomplishments() const {
  return _internal_has_hero_accomplishments();
}
inline void CMsgRecentAccomplishments::clear_hero_accomplishments() {
  if (_impl_.hero_accomplishments_ != nullptr) _impl_.hero_accomplishments_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgPlayerHeroRecentAccomplishments& CMsgRecentAccomplishments::_internal_hero_accomplishments() const {
  const ::CMsgPlayerHeroRecentAccomplishments* p = _impl_.hero_accomplishments_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPlayerHeroRecentAccomplishments&>(
      ::_CMsgPlayerHeroRecentAccomplishments_default_instance_);
}
inline const ::CMsgPlayerHeroRecentAccomplishments& CMsgRecentAccomplishments::hero_accomplishments() const {
  // @@protoc_insertion_point(field_get:CMsgRecentAccomplishments.hero_accomplishments)
  return _internal_hero_accomplishments();
}
inline void CMsgRecentAccomplishments::unsafe_arena_set_allocated_hero_accomplishments(
    ::CMsgPlayerHeroRecentAccomplishments* hero_accomplishments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hero_accomplishments_);
  }
  _impl_.hero_accomplishments_ = hero_accomplishments;
  if (hero_accomplishments) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgRecentAccomplishments.hero_accomplishments)
}
inline ::CMsgPlayerHeroRecentAccomplishments* CMsgRecentAccomplishments::release_hero_accomplishments() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPlayerHeroRecentAccomplishments* temp = _impl_.hero_accomplishments_;
  _impl_.hero_accomplishments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPlayerHeroRecentAccomplishments* CMsgRecentAccomplishments::unsafe_arena_release_hero_accomplishments() {
  // @@protoc_insertion_point(field_release:CMsgRecentAccomplishments.hero_accomplishments)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPlayerHeroRecentAccomplishments* temp = _impl_.hero_accomplishments_;
  _impl_.hero_accomplishments_ = nullptr;
  return temp;
}
inline ::CMsgPlayerHeroRecentAccomplishments* CMsgRecentAccomplishments::_internal_mutable_hero_accomplishments() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.hero_accomplishments_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPlayerHeroRecentAccomplishments>(GetArenaForAllocation());
    _impl_.hero_accomplishments_ = p;
  }
  return _impl_.hero_accomplishments_;
}
inline ::CMsgPlayerHeroRecentAccomplishments* CMsgRecentAccomplishments::mutable_hero_accomplishments() {
  ::CMsgPlayerHeroRecentAccomplishments* _msg = _internal_mutable_hero_accomplishments();
  // @@protoc_insertion_point(field_mutable:CMsgRecentAccomplishments.hero_accomplishments)
  return _msg;
}
inline void CMsgRecentAccomplishments::set_allocated_hero_accomplishments(::CMsgPlayerHeroRecentAccomplishments* hero_accomplishments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hero_accomplishments_;
  }
  if (hero_accomplishments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hero_accomplishments);
    if (message_arena != submessage_arena) {
      hero_accomplishments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero_accomplishments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hero_accomplishments_ = hero_accomplishments;
  // @@protoc_insertion_point(field_set_allocated:CMsgRecentAccomplishments.hero_accomplishments)
}

// -------------------------------------------------------------------

// CMsgServerToGCRequestPlayerRecentAccomplishments

// optional uint32 account_id = 1;
inline bool CMsgServerToGCRequestPlayerRecentAccomplishments::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestPlayerRecentAccomplishments::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishments::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCRequestPlayerRecentAccomplishments::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCRequestPlayerRecentAccomplishments::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestPlayerRecentAccomplishments.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishments::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishments::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestPlayerRecentAccomplishments.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgServerToGCRequestPlayerRecentAccomplishments::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestPlayerRecentAccomplishments::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishments::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCRequestPlayerRecentAccomplishments::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgServerToGCRequestPlayerRecentAccomplishments::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestPlayerRecentAccomplishments.hero_id)
  return _internal_hero_id();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishments::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishments::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestPlayerRecentAccomplishments.hero_id)
}

// -------------------------------------------------------------------

// CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse

// optional .CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
inline bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_internal_result() const {
  return static_cast< ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse >(_impl_.result_);
}
inline ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.result)
  return _internal_result();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_internal_set_result(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse value) {
  assert(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.result_ = value;
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::set_result(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.result)
}

// optional .CMsgRecentAccomplishments player_accomplishments = 2;
inline bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_internal_has_player_accomplishments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_accomplishments_ != nullptr);
  return value;
}
inline bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::has_player_accomplishments() const {
  return _internal_has_player_accomplishments();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::clear_player_accomplishments() {
  if (_impl_.player_accomplishments_ != nullptr) _impl_.player_accomplishments_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgRecentAccomplishments& CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_internal_player_accomplishments() const {
  const ::CMsgRecentAccomplishments* p = _impl_.player_accomplishments_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgRecentAccomplishments&>(
      ::_CMsgRecentAccomplishments_default_instance_);
}
inline const ::CMsgRecentAccomplishments& CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::player_accomplishments() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.player_accomplishments)
  return _internal_player_accomplishments();
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::unsafe_arena_set_allocated_player_accomplishments(
    ::CMsgRecentAccomplishments* player_accomplishments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_accomplishments_);
  }
  _impl_.player_accomplishments_ = player_accomplishments;
  if (player_accomplishments) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.player_accomplishments)
}
inline ::CMsgRecentAccomplishments* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::release_player_accomplishments() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgRecentAccomplishments* temp = _impl_.player_accomplishments_;
  _impl_.player_accomplishments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgRecentAccomplishments* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::unsafe_arena_release_player_accomplishments() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.player_accomplishments)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgRecentAccomplishments* temp = _impl_.player_accomplishments_;
  _impl_.player_accomplishments_ = nullptr;
  return temp;
}
inline ::CMsgRecentAccomplishments* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_internal_mutable_player_accomplishments() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.player_accomplishments_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgRecentAccomplishments>(GetArenaForAllocation());
    _impl_.player_accomplishments_ = p;
  }
  return _impl_.player_accomplishments_;
}
inline ::CMsgRecentAccomplishments* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::mutable_player_accomplishments() {
  ::CMsgRecentAccomplishments* _msg = _internal_mutable_player_accomplishments();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.player_accomplishments)
  return _msg;
}
inline void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::set_allocated_player_accomplishments(::CMsgRecentAccomplishments* player_accomplishments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_accomplishments_;
  }
  if (player_accomplishments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_accomplishments);
    if (message_arena != submessage_arena) {
      player_accomplishments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_accomplishments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_accomplishments_ = player_accomplishments;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.player_accomplishments)
}

// -------------------------------------------------------------------

// CMsgArcanaVoteMatchVotes

// optional uint32 match_id = 1;
inline bool CMsgArcanaVoteMatchVotes::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgArcanaVoteMatchVotes::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgArcanaVoteMatchVotes::clear_match_id() {
  _impl_.match_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgArcanaVoteMatchVotes::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint32_t CMsgArcanaVoteMatchVotes::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVoteMatchVotes.match_id)
  return _internal_match_id();
}
inline void CMsgArcanaVoteMatchVotes::_internal_set_match_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgArcanaVoteMatchVotes::set_match_id(uint32_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVoteMatchVotes.match_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgArcanaVoteMatchVotes::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgArcanaVoteMatchVotes::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgArcanaVoteMatchVotes::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgArcanaVoteMatchVotes::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgArcanaVoteMatchVotes::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVoteMatchVotes.hero_id)
  return _internal_hero_id();
}
inline void CMsgArcanaVoteMatchVotes::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgArcanaVoteMatchVotes::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVoteMatchVotes.hero_id)
}

// optional uint32 vote_count = 3;
inline bool CMsgArcanaVoteMatchVotes::_internal_has_vote_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgArcanaVoteMatchVotes::has_vote_count() const {
  return _internal_has_vote_count();
}
inline void CMsgArcanaVoteMatchVotes::clear_vote_count() {
  _impl_.vote_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgArcanaVoteMatchVotes::_internal_vote_count() const {
  return _impl_.vote_count_;
}
inline uint32_t CMsgArcanaVoteMatchVotes::vote_count() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVoteMatchVotes.vote_count)
  return _internal_vote_count();
}
inline void CMsgArcanaVoteMatchVotes::_internal_set_vote_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vote_count_ = value;
}
inline void CMsgArcanaVoteMatchVotes::set_vote_count(uint32_t value) {
  _internal_set_vote_count(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVoteMatchVotes.vote_count)
}

// -------------------------------------------------------------------

// CMsgGCtoGCAssociatedExploiterAccountInfo

// optional uint32 account_id = 1;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfo.account_id)
  return _internal_account_id();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfo.account_id)
}

// optional uint32 num_matches_to_search = 2;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_has_num_matches_to_search() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::has_num_matches_to_search() const {
  return _internal_has_num_matches_to_search();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::clear_num_matches_to_search() {
  _impl_.num_matches_to_search_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_num_matches_to_search() const {
  return _impl_.num_matches_to_search_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::num_matches_to_search() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfo.num_matches_to_search)
  return _internal_num_matches_to_search();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_set_num_matches_to_search(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_matches_to_search_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::set_num_matches_to_search(uint32_t value) {
  _internal_set_num_matches_to_search(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfo.num_matches_to_search)
}

// optional uint32 min_shared_match_count = 3;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_has_min_shared_match_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::has_min_shared_match_count() const {
  return _internal_has_min_shared_match_count();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::clear_min_shared_match_count() {
  _impl_.min_shared_match_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_min_shared_match_count() const {
  return _impl_.min_shared_match_count_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::min_shared_match_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfo.min_shared_match_count)
  return _internal_min_shared_match_count();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_set_min_shared_match_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_shared_match_count_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::set_min_shared_match_count(uint32_t value) {
  _internal_set_min_shared_match_count(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfo.min_shared_match_count)
}

// optional uint32 num_additional_players = 4;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_has_num_additional_players() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfo::has_num_additional_players() const {
  return _internal_has_num_additional_players();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::clear_num_additional_players() {
  _impl_.num_additional_players_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_num_additional_players() const {
  return _impl_.num_additional_players_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfo::num_additional_players() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfo.num_additional_players)
  return _internal_num_additional_players();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::_internal_set_num_additional_players(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_additional_players_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfo::set_num_additional_players(uint32_t value) {
  _internal_set_num_additional_players(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfo.num_additional_players)
}

// -------------------------------------------------------------------

// CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account

// optional uint32 account_id = 1;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.account_id)
  return _internal_account_id();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.account_id)
}

// optional uint32 num_common_matches = 2;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_has_num_common_matches() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::has_num_common_matches() const {
  return _internal_has_num_common_matches();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::clear_num_common_matches() {
  _impl_.num_common_matches_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_num_common_matches() const {
  return _impl_.num_common_matches_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::num_common_matches() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.num_common_matches)
  return _internal_num_common_matches();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_set_num_common_matches(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_common_matches_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_num_common_matches(uint32_t value) {
  _internal_set_num_common_matches(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.num_common_matches)
}

// optional uint32 earliest_common_match = 3;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_has_earliest_common_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::has_earliest_common_match() const {
  return _internal_has_earliest_common_match();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::clear_earliest_common_match() {
  _impl_.earliest_common_match_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_earliest_common_match() const {
  return _impl_.earliest_common_match_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::earliest_common_match() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.earliest_common_match)
  return _internal_earliest_common_match();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_set_earliest_common_match(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.earliest_common_match_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_earliest_common_match(uint32_t value) {
  _internal_set_earliest_common_match(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.earliest_common_match)
}

// optional uint32 latest_common_match = 4;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_has_latest_common_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::has_latest_common_match() const {
  return _internal_has_latest_common_match();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::clear_latest_common_match() {
  _impl_.latest_common_match_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_latest_common_match() const {
  return _impl_.latest_common_match_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::latest_common_match() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.latest_common_match)
  return _internal_latest_common_match();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_set_latest_common_match(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.latest_common_match_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_latest_common_match(uint32_t value) {
  _internal_set_latest_common_match(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.latest_common_match)
}

// optional uint32 generation = 5;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_has_generation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::has_generation() const {
  return _internal_has_generation();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::clear_generation() {
  _impl_.generation_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_generation() const {
  return _impl_.generation_;
}
inline uint32_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::generation() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.generation)
  return _internal_generation();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_set_generation(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.generation_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_generation(uint32_t value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.generation)
}

// optional string persona = 6;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_has_persona() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::has_persona() const {
  return _internal_has_persona();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::clear_persona() {
  _impl_.persona_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::persona() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.persona)
  return _internal_persona();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_persona(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.persona_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.persona)
}
inline std::string* CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::mutable_persona() {
  std::string* _s = _internal_mutable_persona();
  // @@protoc_insertion_point(field_mutable:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.persona)
  return _s;
}
inline const std::string& CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_persona() const {
  return _impl_.persona_.Get();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_set_persona(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.persona_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_mutable_persona() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.persona_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::release_persona() {
  // @@protoc_insertion_point(field_release:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.persona)
  if (!_internal_has_persona()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.persona_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_.IsDefault()) {
    _impl_.persona_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_allocated_persona(std::string* persona) {
  if (persona != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.persona_.SetAllocated(persona, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_.IsDefault()) {
    _impl_.persona_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.persona)
}

// optional bool already_banned = 7;
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_has_already_banned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::has_already_banned() const {
  return _internal_has_already_banned();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::clear_already_banned() {
  _impl_.already_banned_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_already_banned() const {
  return _impl_.already_banned_;
}
inline bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::already_banned() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.already_banned)
  return _internal_already_banned();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_internal_set_already_banned(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.already_banned_ = value;
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::set_already_banned(bool value) {
  _internal_set_already_banned(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.already_banned)
}

// -------------------------------------------------------------------

// CMsgGCtoGCAssociatedExploiterAccountInfoResponse

// repeated .CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account accounts = 1;
inline int CMsgGCtoGCAssociatedExploiterAccountInfoResponse::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int CMsgGCtoGCAssociatedExploiterAccountInfoResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* CMsgGCtoGCAssociatedExploiterAccountInfoResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account >*
CMsgGCtoGCAssociatedExploiterAccountInfoResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.accounts)
  return &_impl_.accounts_;
}
inline const ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& CMsgGCtoGCAssociatedExploiterAccountInfoResponse::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& CMsgGCtoGCAssociatedExploiterAccountInfoResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.accounts)
  return _internal_accounts(index);
}
inline ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* CMsgGCtoGCAssociatedExploiterAccountInfoResponse::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* CMsgGCtoGCAssociatedExploiterAccountInfoResponse::add_accounts() {
  ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account >&
CMsgGCtoGCAssociatedExploiterAccountInfoResponse::accounts() const {
  // @@protoc_insertion_point(field_list:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.accounts)
  return _impl_.accounts_;
}

// -------------------------------------------------------------------

// CMsgPullTabsData_Slot

// optional uint32 event_id = 1;
inline bool CMsgPullTabsData_Slot::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Slot::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgPullTabsData_Slot::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPullTabsData_Slot::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgPullTabsData_Slot::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Slot.event_id)
  return _internal_event_id();
}
inline void CMsgPullTabsData_Slot::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgPullTabsData_Slot::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Slot.event_id)
}

// optional uint32 board_id = 2;
inline bool CMsgPullTabsData_Slot::_internal_has_board_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Slot::has_board_id() const {
  return _internal_has_board_id();
}
inline void CMsgPullTabsData_Slot::clear_board_id() {
  _impl_.board_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPullTabsData_Slot::_internal_board_id() const {
  return _impl_.board_id_;
}
inline uint32_t CMsgPullTabsData_Slot::board_id() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Slot.board_id)
  return _internal_board_id();
}
inline void CMsgPullTabsData_Slot::_internal_set_board_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.board_id_ = value;
}
inline void CMsgPullTabsData_Slot::set_board_id(uint32_t value) {
  _internal_set_board_id(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Slot.board_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgPullTabsData_Slot::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Slot::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgPullTabsData_Slot::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPullTabsData_Slot::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgPullTabsData_Slot::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Slot.hero_id)
  return _internal_hero_id();
}
inline void CMsgPullTabsData_Slot::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgPullTabsData_Slot::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Slot.hero_id)
}

// optional uint32 action_id = 4;
inline bool CMsgPullTabsData_Slot::_internal_has_action_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Slot::has_action_id() const {
  return _internal_has_action_id();
}
inline void CMsgPullTabsData_Slot::clear_action_id() {
  _impl_.action_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgPullTabsData_Slot::_internal_action_id() const {
  return _impl_.action_id_;
}
inline uint32_t CMsgPullTabsData_Slot::action_id() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Slot.action_id)
  return _internal_action_id();
}
inline void CMsgPullTabsData_Slot::_internal_set_action_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.action_id_ = value;
}
inline void CMsgPullTabsData_Slot::set_action_id(uint32_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Slot.action_id)
}

// optional bool redeemed = 5;
inline bool CMsgPullTabsData_Slot::_internal_has_redeemed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Slot::has_redeemed() const {
  return _internal_has_redeemed();
}
inline void CMsgPullTabsData_Slot::clear_redeemed() {
  _impl_.redeemed_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgPullTabsData_Slot::_internal_redeemed() const {
  return _impl_.redeemed_;
}
inline bool CMsgPullTabsData_Slot::redeemed() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Slot.redeemed)
  return _internal_redeemed();
}
inline void CMsgPullTabsData_Slot::_internal_set_redeemed(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.redeemed_ = value;
}
inline void CMsgPullTabsData_Slot::set_redeemed(bool value) {
  _internal_set_redeemed(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Slot.redeemed)
}

// -------------------------------------------------------------------

// CMsgPullTabsData_Jackpot

// optional uint32 board_id = 1;
inline bool CMsgPullTabsData_Jackpot::_internal_has_board_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Jackpot::has_board_id() const {
  return _internal_has_board_id();
}
inline void CMsgPullTabsData_Jackpot::clear_board_id() {
  _impl_.board_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPullTabsData_Jackpot::_internal_board_id() const {
  return _impl_.board_id_;
}
inline uint32_t CMsgPullTabsData_Jackpot::board_id() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Jackpot.board_id)
  return _internal_board_id();
}
inline void CMsgPullTabsData_Jackpot::_internal_set_board_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.board_id_ = value;
}
inline void CMsgPullTabsData_Jackpot::set_board_id(uint32_t value) {
  _internal_set_board_id(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Jackpot.board_id)
}

// optional uint32 action_id = 2;
inline bool CMsgPullTabsData_Jackpot::_internal_has_action_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Jackpot::has_action_id() const {
  return _internal_has_action_id();
}
inline void CMsgPullTabsData_Jackpot::clear_action_id() {
  _impl_.action_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPullTabsData_Jackpot::_internal_action_id() const {
  return _impl_.action_id_;
}
inline uint32_t CMsgPullTabsData_Jackpot::action_id() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Jackpot.action_id)
  return _internal_action_id();
}
inline void CMsgPullTabsData_Jackpot::_internal_set_action_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.action_id_ = value;
}
inline void CMsgPullTabsData_Jackpot::set_action_id(uint32_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Jackpot.action_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgPullTabsData_Jackpot::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPullTabsData_Jackpot::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgPullTabsData_Jackpot::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPullTabsData_Jackpot::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgPullTabsData_Jackpot::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.Jackpot.hero_id)
  return _internal_hero_id();
}
inline void CMsgPullTabsData_Jackpot::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgPullTabsData_Jackpot::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.Jackpot.hero_id)
}

// -------------------------------------------------------------------

// CMsgPullTabsData

// repeated .CMsgPullTabsData.Slot slots = 1;
inline int CMsgPullTabsData::_internal_slots_size() const {
  return _impl_.slots_.size();
}
inline int CMsgPullTabsData::slots_size() const {
  return _internal_slots_size();
}
inline void CMsgPullTabsData::clear_slots() {
  _impl_.slots_.Clear();
}
inline ::CMsgPullTabsData_Slot* CMsgPullTabsData::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPullTabsData.slots)
  return _impl_.slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Slot >*
CMsgPullTabsData::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPullTabsData.slots)
  return &_impl_.slots_;
}
inline const ::CMsgPullTabsData_Slot& CMsgPullTabsData::_internal_slots(int index) const {
  return _impl_.slots_.Get(index);
}
inline const ::CMsgPullTabsData_Slot& CMsgPullTabsData::slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.slots)
  return _internal_slots(index);
}
inline ::CMsgPullTabsData_Slot* CMsgPullTabsData::_internal_add_slots() {
  return _impl_.slots_.Add();
}
inline ::CMsgPullTabsData_Slot* CMsgPullTabsData::add_slots() {
  ::CMsgPullTabsData_Slot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:CMsgPullTabsData.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Slot >&
CMsgPullTabsData::slots() const {
  // @@protoc_insertion_point(field_list:CMsgPullTabsData.slots)
  return _impl_.slots_;
}

// repeated .CMsgPullTabsData.Jackpot jackpots = 2;
inline int CMsgPullTabsData::_internal_jackpots_size() const {
  return _impl_.jackpots_.size();
}
inline int CMsgPullTabsData::jackpots_size() const {
  return _internal_jackpots_size();
}
inline void CMsgPullTabsData::clear_jackpots() {
  _impl_.jackpots_.Clear();
}
inline ::CMsgPullTabsData_Jackpot* CMsgPullTabsData::mutable_jackpots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPullTabsData.jackpots)
  return _impl_.jackpots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Jackpot >*
CMsgPullTabsData::mutable_jackpots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPullTabsData.jackpots)
  return &_impl_.jackpots_;
}
inline const ::CMsgPullTabsData_Jackpot& CMsgPullTabsData::_internal_jackpots(int index) const {
  return _impl_.jackpots_.Get(index);
}
inline const ::CMsgPullTabsData_Jackpot& CMsgPullTabsData::jackpots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.jackpots)
  return _internal_jackpots(index);
}
inline ::CMsgPullTabsData_Jackpot* CMsgPullTabsData::_internal_add_jackpots() {
  return _impl_.jackpots_.Add();
}
inline ::CMsgPullTabsData_Jackpot* CMsgPullTabsData::add_jackpots() {
  ::CMsgPullTabsData_Jackpot* _add = _internal_add_jackpots();
  // @@protoc_insertion_point(field_add:CMsgPullTabsData.jackpots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPullTabsData_Jackpot >&
CMsgPullTabsData::jackpots() const {
  // @@protoc_insertion_point(field_list:CMsgPullTabsData.jackpots)
  return _impl_.jackpots_;
}

// optional uint32 last_board = 3;
inline bool CMsgPullTabsData::_internal_has_last_board() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPullTabsData::has_last_board() const {
  return _internal_has_last_board();
}
inline void CMsgPullTabsData::clear_last_board() {
  _impl_.last_board_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPullTabsData::_internal_last_board() const {
  return _impl_.last_board_;
}
inline uint32_t CMsgPullTabsData::last_board() const {
  // @@protoc_insertion_point(field_get:CMsgPullTabsData.last_board)
  return _internal_last_board();
}
inline void CMsgPullTabsData::_internal_set_last_board(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_board_ = value;
}
inline void CMsgPullTabsData::set_last_board(uint32_t value) {
  _internal_set_last_board(value);
  // @@protoc_insertion_point(field_set:CMsgPullTabsData.last_board)
}

// -------------------------------------------------------------------

// CMsgUnderDraftData_BenchSlot

// optional uint32 slot_id = 1;
inline bool CMsgUnderDraftData_BenchSlot::_internal_has_slot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgUnderDraftData_BenchSlot::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CMsgUnderDraftData_BenchSlot::clear_slot_id() {
  _impl_.slot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgUnderDraftData_BenchSlot::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t CMsgUnderDraftData_BenchSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.BenchSlot.slot_id)
  return _internal_slot_id();
}
inline void CMsgUnderDraftData_BenchSlot::_internal_set_slot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slot_id_ = value;
}
inline void CMsgUnderDraftData_BenchSlot::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.BenchSlot.slot_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgUnderDraftData_BenchSlot::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgUnderDraftData_BenchSlot::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgUnderDraftData_BenchSlot::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgUnderDraftData_BenchSlot::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgUnderDraftData_BenchSlot::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.BenchSlot.hero_id)
  return _internal_hero_id();
}
inline void CMsgUnderDraftData_BenchSlot::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgUnderDraftData_BenchSlot::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.BenchSlot.hero_id)
}

// optional uint32 stars = 3;
inline bool CMsgUnderDraftData_BenchSlot::_internal_has_stars() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgUnderDraftData_BenchSlot::has_stars() const {
  return _internal_has_stars();
}
inline void CMsgUnderDraftData_BenchSlot::clear_stars() {
  _impl_.stars_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgUnderDraftData_BenchSlot::_internal_stars() const {
  return _impl_.stars_;
}
inline uint32_t CMsgUnderDraftData_BenchSlot::stars() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.BenchSlot.stars)
  return _internal_stars();
}
inline void CMsgUnderDraftData_BenchSlot::_internal_set_stars(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stars_ = value;
}
inline void CMsgUnderDraftData_BenchSlot::set_stars(uint32_t value) {
  _internal_set_stars(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.BenchSlot.stars)
}

// -------------------------------------------------------------------

// CMsgUnderDraftData_ShopSlot

// optional uint32 slot_id = 1;
inline bool CMsgUnderDraftData_ShopSlot::_internal_has_slot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgUnderDraftData_ShopSlot::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CMsgUnderDraftData_ShopSlot::clear_slot_id() {
  _impl_.slot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgUnderDraftData_ShopSlot::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t CMsgUnderDraftData_ShopSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.ShopSlot.slot_id)
  return _internal_slot_id();
}
inline void CMsgUnderDraftData_ShopSlot::_internal_set_slot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slot_id_ = value;
}
inline void CMsgUnderDraftData_ShopSlot::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.ShopSlot.slot_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgUnderDraftData_ShopSlot::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgUnderDraftData_ShopSlot::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgUnderDraftData_ShopSlot::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgUnderDraftData_ShopSlot::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgUnderDraftData_ShopSlot::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.ShopSlot.hero_id)
  return _internal_hero_id();
}
inline void CMsgUnderDraftData_ShopSlot::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgUnderDraftData_ShopSlot::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.ShopSlot.hero_id)
}

// optional bool is_special_reward = 3;
inline bool CMsgUnderDraftData_ShopSlot::_internal_has_is_special_reward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgUnderDraftData_ShopSlot::has_is_special_reward() const {
  return _internal_has_is_special_reward();
}
inline void CMsgUnderDraftData_ShopSlot::clear_is_special_reward() {
  _impl_.is_special_reward_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgUnderDraftData_ShopSlot::_internal_is_special_reward() const {
  return _impl_.is_special_reward_;
}
inline bool CMsgUnderDraftData_ShopSlot::is_special_reward() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.ShopSlot.is_special_reward)
  return _internal_is_special_reward();
}
inline void CMsgUnderDraftData_ShopSlot::_internal_set_is_special_reward(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_special_reward_ = value;
}
inline void CMsgUnderDraftData_ShopSlot::set_is_special_reward(bool value) {
  _internal_set_is_special_reward(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.ShopSlot.is_special_reward)
}

// -------------------------------------------------------------------

// CMsgUnderDraftData

// repeated .CMsgUnderDraftData.BenchSlot bench_slots = 1;
inline int CMsgUnderDraftData::_internal_bench_slots_size() const {
  return _impl_.bench_slots_.size();
}
inline int CMsgUnderDraftData::bench_slots_size() const {
  return _internal_bench_slots_size();
}
inline void CMsgUnderDraftData::clear_bench_slots() {
  _impl_.bench_slots_.Clear();
}
inline ::CMsgUnderDraftData_BenchSlot* CMsgUnderDraftData::mutable_bench_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgUnderDraftData.bench_slots)
  return _impl_.bench_slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_BenchSlot >*
CMsgUnderDraftData::mutable_bench_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgUnderDraftData.bench_slots)
  return &_impl_.bench_slots_;
}
inline const ::CMsgUnderDraftData_BenchSlot& CMsgUnderDraftData::_internal_bench_slots(int index) const {
  return _impl_.bench_slots_.Get(index);
}
inline const ::CMsgUnderDraftData_BenchSlot& CMsgUnderDraftData::bench_slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.bench_slots)
  return _internal_bench_slots(index);
}
inline ::CMsgUnderDraftData_BenchSlot* CMsgUnderDraftData::_internal_add_bench_slots() {
  return _impl_.bench_slots_.Add();
}
inline ::CMsgUnderDraftData_BenchSlot* CMsgUnderDraftData::add_bench_slots() {
  ::CMsgUnderDraftData_BenchSlot* _add = _internal_add_bench_slots();
  // @@protoc_insertion_point(field_add:CMsgUnderDraftData.bench_slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_BenchSlot >&
CMsgUnderDraftData::bench_slots() const {
  // @@protoc_insertion_point(field_list:CMsgUnderDraftData.bench_slots)
  return _impl_.bench_slots_;
}

// repeated .CMsgUnderDraftData.ShopSlot shop_slots = 2;
inline int CMsgUnderDraftData::_internal_shop_slots_size() const {
  return _impl_.shop_slots_.size();
}
inline int CMsgUnderDraftData::shop_slots_size() const {
  return _internal_shop_slots_size();
}
inline void CMsgUnderDraftData::clear_shop_slots() {
  _impl_.shop_slots_.Clear();
}
inline ::CMsgUnderDraftData_ShopSlot* CMsgUnderDraftData::mutable_shop_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgUnderDraftData.shop_slots)
  return _impl_.shop_slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_ShopSlot >*
CMsgUnderDraftData::mutable_shop_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgUnderDraftData.shop_slots)
  return &_impl_.shop_slots_;
}
inline const ::CMsgUnderDraftData_ShopSlot& CMsgUnderDraftData::_internal_shop_slots(int index) const {
  return _impl_.shop_slots_.Get(index);
}
inline const ::CMsgUnderDraftData_ShopSlot& CMsgUnderDraftData::shop_slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.shop_slots)
  return _internal_shop_slots(index);
}
inline ::CMsgUnderDraftData_ShopSlot* CMsgUnderDraftData::_internal_add_shop_slots() {
  return _impl_.shop_slots_.Add();
}
inline ::CMsgUnderDraftData_ShopSlot* CMsgUnderDraftData::add_shop_slots() {
  ::CMsgUnderDraftData_ShopSlot* _add = _internal_add_shop_slots();
  // @@protoc_insertion_point(field_add:CMsgUnderDraftData.shop_slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUnderDraftData_ShopSlot >&
CMsgUnderDraftData::shop_slots() const {
  // @@protoc_insertion_point(field_list:CMsgUnderDraftData.shop_slots)
  return _impl_.shop_slots_;
}

// optional uint32 gold = 3;
inline bool CMsgUnderDraftData::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgUnderDraftData::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgUnderDraftData::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgUnderDraftData::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgUnderDraftData::gold() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.gold)
  return _internal_gold();
}
inline void CMsgUnderDraftData::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gold_ = value;
}
inline void CMsgUnderDraftData::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.gold)
}

// optional uint32 total_gold = 4;
inline bool CMsgUnderDraftData::_internal_has_total_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgUnderDraftData::has_total_gold() const {
  return _internal_has_total_gold();
}
inline void CMsgUnderDraftData::clear_total_gold() {
  _impl_.total_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgUnderDraftData::_internal_total_gold() const {
  return _impl_.total_gold_;
}
inline uint32_t CMsgUnderDraftData::total_gold() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.total_gold)
  return _internal_total_gold();
}
inline void CMsgUnderDraftData::_internal_set_total_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.total_gold_ = value;
}
inline void CMsgUnderDraftData::set_total_gold(uint32_t value) {
  _internal_set_total_gold(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.total_gold)
}

// optional bool not_restorable = 5;
inline bool CMsgUnderDraftData::_internal_has_not_restorable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgUnderDraftData::has_not_restorable() const {
  return _internal_has_not_restorable();
}
inline void CMsgUnderDraftData::clear_not_restorable() {
  _impl_.not_restorable_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgUnderDraftData::_internal_not_restorable() const {
  return _impl_.not_restorable_;
}
inline bool CMsgUnderDraftData::not_restorable() const {
  // @@protoc_insertion_point(field_get:CMsgUnderDraftData.not_restorable)
  return _internal_not_restorable();
}
inline void CMsgUnderDraftData::_internal_set_not_restorable(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.not_restorable_ = value;
}
inline void CMsgUnderDraftData::set_not_restorable(bool value) {
  _internal_set_not_restorable(value);
  // @@protoc_insertion_point(field_set:CMsgUnderDraftData.not_restorable)
}

// -------------------------------------------------------------------

// CMsgPlayerTitleData

// repeated uint32 title = 1;
inline int CMsgPlayerTitleData::_internal_title_size() const {
  return _impl_.title_.size();
}
inline int CMsgPlayerTitleData::title_size() const {
  return _internal_title_size();
}
inline void CMsgPlayerTitleData::clear_title() {
  _impl_.title_.Clear();
}
inline uint32_t CMsgPlayerTitleData::_internal_title(int index) const {
  return _impl_.title_.Get(index);
}
inline uint32_t CMsgPlayerTitleData::title(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPlayerTitleData.title)
  return _internal_title(index);
}
inline void CMsgPlayerTitleData::set_title(int index, uint32_t value) {
  _impl_.title_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgPlayerTitleData.title)
}
inline void CMsgPlayerTitleData::_internal_add_title(uint32_t value) {
  _impl_.title_.Add(value);
}
inline void CMsgPlayerTitleData::add_title(uint32_t value) {
  _internal_add_title(value);
  // @@protoc_insertion_point(field_add:CMsgPlayerTitleData.title)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgPlayerTitleData::_internal_title() const {
  return _impl_.title_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgPlayerTitleData::title() const {
  // @@protoc_insertion_point(field_list:CMsgPlayerTitleData.title)
  return _internal_title();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgPlayerTitleData::_internal_mutable_title() {
  return &_impl_.title_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgPlayerTitleData::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPlayerTitleData.title)
  return _internal_mutable_title();
}

// repeated uint32 event_id = 2;
inline int CMsgPlayerTitleData::_internal_event_id_size() const {
  return _impl_.event_id_.size();
}
inline int CMsgPlayerTitleData::event_id_size() const {
  return _internal_event_id_size();
}
inline void CMsgPlayerTitleData::clear_event_id() {
  _impl_.event_id_.Clear();
}
inline uint32_t CMsgPlayerTitleData::_internal_event_id(int index) const {
  return _impl_.event_id_.Get(index);
}
inline uint32_t CMsgPlayerTitleData::event_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPlayerTitleData.event_id)
  return _internal_event_id(index);
}
inline void CMsgPlayerTitleData::set_event_id(int index, uint32_t value) {
  _impl_.event_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgPlayerTitleData.event_id)
}
inline void CMsgPlayerTitleData::_internal_add_event_id(uint32_t value) {
  _impl_.event_id_.Add(value);
}
inline void CMsgPlayerTitleData::add_event_id(uint32_t value) {
  _internal_add_event_id(value);
  // @@protoc_insertion_point(field_add:CMsgPlayerTitleData.event_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgPlayerTitleData::_internal_event_id() const {
  return _impl_.event_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgPlayerTitleData::event_id() const {
  // @@protoc_insertion_point(field_list:CMsgPlayerTitleData.event_id)
  return _internal_event_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgPlayerTitleData::_internal_mutable_event_id() {
  return &_impl_.event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgPlayerTitleData::mutable_event_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPlayerTitleData.event_id)
  return _internal_mutable_event_id();
}

// optional uint32 active = 3;
inline bool CMsgPlayerTitleData::_internal_has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerTitleData::has_active() const {
  return _internal_has_active();
}
inline void CMsgPlayerTitleData::clear_active() {
  _impl_.active_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPlayerTitleData::_internal_active() const {
  return _impl_.active_;
}
inline uint32_t CMsgPlayerTitleData::active() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerTitleData.active)
  return _internal_active();
}
inline void CMsgPlayerTitleData::_internal_set_active(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.active_ = value;
}
inline void CMsgPlayerTitleData::set_active(uint32_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerTitleData.active)
}

// -------------------------------------------------------------------

// CMsgDOTATriviaQuestion

// optional uint32 question_id = 1;
inline bool CMsgDOTATriviaQuestion::_internal_has_question_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATriviaQuestion::has_question_id() const {
  return _internal_has_question_id();
}
inline void CMsgDOTATriviaQuestion::clear_question_id() {
  _impl_.question_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTATriviaQuestion::_internal_question_id() const {
  return _impl_.question_id_;
}
inline uint32_t CMsgDOTATriviaQuestion::question_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestion.question_id)
  return _internal_question_id();
}
inline void CMsgDOTATriviaQuestion::_internal_set_question_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.question_id_ = value;
}
inline void CMsgDOTATriviaQuestion::set_question_id(uint32_t value) {
  _internal_set_question_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestion.question_id)
}

// optional .EDOTATriviaQuestionCategory category = 2 [default = k_EDOTATriviaQuestionCategory_AbilityIcon];
inline bool CMsgDOTATriviaQuestion::_internal_has_category() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATriviaQuestion::has_category() const {
  return _internal_has_category();
}
inline void CMsgDOTATriviaQuestion::clear_category() {
  _impl_.category_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::EDOTATriviaQuestionCategory CMsgDOTATriviaQuestion::_internal_category() const {
  return static_cast< ::EDOTATriviaQuestionCategory >(_impl_.category_);
}
inline ::EDOTATriviaQuestionCategory CMsgDOTATriviaQuestion::category() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestion.category)
  return _internal_category();
}
inline void CMsgDOTATriviaQuestion::_internal_set_category(::EDOTATriviaQuestionCategory value) {
  assert(::EDOTATriviaQuestionCategory_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.category_ = value;
}
inline void CMsgDOTATriviaQuestion::set_category(::EDOTATriviaQuestionCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestion.category)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTATriviaQuestion::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTATriviaQuestion::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTATriviaQuestion::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTATriviaQuestion::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTATriviaQuestion::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestion.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTATriviaQuestion::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTATriviaQuestion::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestion.timestamp)
}

// optional string question_value = 4;
inline bool CMsgDOTATriviaQuestion::_internal_has_question_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATriviaQuestion::has_question_value() const {
  return _internal_has_question_value();
}
inline void CMsgDOTATriviaQuestion::clear_question_value() {
  _impl_.question_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTATriviaQuestion::question_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestion.question_value)
  return _internal_question_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTATriviaQuestion::set_question_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.question_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestion.question_value)
}
inline std::string* CMsgDOTATriviaQuestion::mutable_question_value() {
  std::string* _s = _internal_mutable_question_value();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATriviaQuestion.question_value)
  return _s;
}
inline const std::string& CMsgDOTATriviaQuestion::_internal_question_value() const {
  return _impl_.question_value_.Get();
}
inline void CMsgDOTATriviaQuestion::_internal_set_question_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.question_value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTATriviaQuestion::_internal_mutable_question_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.question_value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTATriviaQuestion::release_question_value() {
  // @@protoc_insertion_point(field_release:CMsgDOTATriviaQuestion.question_value)
  if (!_internal_has_question_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.question_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_value_.IsDefault()) {
    _impl_.question_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTATriviaQuestion::set_allocated_question_value(std::string* question_value) {
  if (question_value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.question_value_.SetAllocated(question_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_value_.IsDefault()) {
    _impl_.question_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATriviaQuestion.question_value)
}

// repeated string answer_values = 5;
inline int CMsgDOTATriviaQuestion::_internal_answer_values_size() const {
  return _impl_.answer_values_.size();
}
inline int CMsgDOTATriviaQuestion::answer_values_size() const {
  return _internal_answer_values_size();
}
inline void CMsgDOTATriviaQuestion::clear_answer_values() {
  _impl_.answer_values_.Clear();
}
inline std::string* CMsgDOTATriviaQuestion::add_answer_values() {
  std::string* _s = _internal_add_answer_values();
  // @@protoc_insertion_point(field_add_mutable:CMsgDOTATriviaQuestion.answer_values)
  return _s;
}
inline const std::string& CMsgDOTATriviaQuestion::_internal_answer_values(int index) const {
  return _impl_.answer_values_.Get(index);
}
inline const std::string& CMsgDOTATriviaQuestion::answer_values(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestion.answer_values)
  return _internal_answer_values(index);
}
inline std::string* CMsgDOTATriviaQuestion::mutable_answer_values(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATriviaQuestion.answer_values)
  return _impl_.answer_values_.Mutable(index);
}
inline void CMsgDOTATriviaQuestion::set_answer_values(int index, const std::string& value) {
  _impl_.answer_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestion.answer_values)
}
inline void CMsgDOTATriviaQuestion::set_answer_values(int index, std::string&& value) {
  _impl_.answer_values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestion.answer_values)
}
inline void CMsgDOTATriviaQuestion::set_answer_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.answer_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATriviaQuestion.answer_values)
}
inline void CMsgDOTATriviaQuestion::set_answer_values(int index, const char* value, size_t size) {
  _impl_.answer_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATriviaQuestion.answer_values)
}
inline std::string* CMsgDOTATriviaQuestion::_internal_add_answer_values() {
  return _impl_.answer_values_.Add();
}
inline void CMsgDOTATriviaQuestion::add_answer_values(const std::string& value) {
  _impl_.answer_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATriviaQuestion.answer_values)
}
inline void CMsgDOTATriviaQuestion::add_answer_values(std::string&& value) {
  _impl_.answer_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgDOTATriviaQuestion.answer_values)
}
inline void CMsgDOTATriviaQuestion::add_answer_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.answer_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgDOTATriviaQuestion.answer_values)
}
inline void CMsgDOTATriviaQuestion::add_answer_values(const char* value, size_t size) {
  _impl_.answer_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgDOTATriviaQuestion.answer_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgDOTATriviaQuestion::answer_values() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATriviaQuestion.answer_values)
  return _impl_.answer_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgDOTATriviaQuestion::mutable_answer_values() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATriviaQuestion.answer_values)
  return &_impl_.answer_values_;
}

// optional uint32 correct_answer_index = 6;
inline bool CMsgDOTATriviaQuestion::_internal_has_correct_answer_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTATriviaQuestion::has_correct_answer_index() const {
  return _internal_has_correct_answer_index();
}
inline void CMsgDOTATriviaQuestion::clear_correct_answer_index() {
  _impl_.correct_answer_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTATriviaQuestion::_internal_correct_answer_index() const {
  return _impl_.correct_answer_index_;
}
inline uint32_t CMsgDOTATriviaQuestion::correct_answer_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestion.correct_answer_index)
  return _internal_correct_answer_index();
}
inline void CMsgDOTATriviaQuestion::_internal_set_correct_answer_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.correct_answer_index_ = value;
}
inline void CMsgDOTATriviaQuestion::set_correct_answer_index(uint32_t value) {
  _internal_set_correct_answer_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestion.correct_answer_index)
}

// -------------------------------------------------------------------

// CMsgDOTATriviaQuestionAnswersSummary

// optional bool summary_available = 1;
inline bool CMsgDOTATriviaQuestionAnswersSummary::_internal_has_summary_available() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATriviaQuestionAnswersSummary::has_summary_available() const {
  return _internal_has_summary_available();
}
inline void CMsgDOTATriviaQuestionAnswersSummary::clear_summary_available() {
  _impl_.summary_available_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTATriviaQuestionAnswersSummary::_internal_summary_available() const {
  return _impl_.summary_available_;
}
inline bool CMsgDOTATriviaQuestionAnswersSummary::summary_available() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestionAnswersSummary.summary_available)
  return _internal_summary_available();
}
inline void CMsgDOTATriviaQuestionAnswersSummary::_internal_set_summary_available(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.summary_available_ = value;
}
inline void CMsgDOTATriviaQuestionAnswersSummary::set_summary_available(bool value) {
  _internal_set_summary_available(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestionAnswersSummary.summary_available)
}

// repeated uint32 picked_count = 2;
inline int CMsgDOTATriviaQuestionAnswersSummary::_internal_picked_count_size() const {
  return _impl_.picked_count_.size();
}
inline int CMsgDOTATriviaQuestionAnswersSummary::picked_count_size() const {
  return _internal_picked_count_size();
}
inline void CMsgDOTATriviaQuestionAnswersSummary::clear_picked_count() {
  _impl_.picked_count_.Clear();
}
inline uint32_t CMsgDOTATriviaQuestionAnswersSummary::_internal_picked_count(int index) const {
  return _impl_.picked_count_.Get(index);
}
inline uint32_t CMsgDOTATriviaQuestionAnswersSummary::picked_count(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATriviaQuestionAnswersSummary.picked_count)
  return _internal_picked_count(index);
}
inline void CMsgDOTATriviaQuestionAnswersSummary::set_picked_count(int index, uint32_t value) {
  _impl_.picked_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATriviaQuestionAnswersSummary.picked_count)
}
inline void CMsgDOTATriviaQuestionAnswersSummary::_internal_add_picked_count(uint32_t value) {
  _impl_.picked_count_.Add(value);
}
inline void CMsgDOTATriviaQuestionAnswersSummary::add_picked_count(uint32_t value) {
  _internal_add_picked_count(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATriviaQuestionAnswersSummary.picked_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATriviaQuestionAnswersSummary::_internal_picked_count() const {
  return _impl_.picked_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATriviaQuestionAnswersSummary::picked_count() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATriviaQuestionAnswersSummary.picked_count)
  return _internal_picked_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATriviaQuestionAnswersSummary::_internal_mutable_picked_count() {
  return &_impl_.picked_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATriviaQuestionAnswersSummary::mutable_picked_count() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATriviaQuestionAnswersSummary.picked_count)
  return _internal_mutable_picked_count();
}

// -------------------------------------------------------------------

// CMsgGameDataSpecialValueBonus

// optional string name = 1;
inline bool CMsgGameDataSpecialValueBonus::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameDataSpecialValueBonus::has_name() const {
  return _internal_has_name();
}
inline void CMsgGameDataSpecialValueBonus::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameDataSpecialValueBonus::name() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValueBonus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataSpecialValueBonus::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataSpecialValueBonus.name)
}
inline std::string* CMsgGameDataSpecialValueBonus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataSpecialValueBonus.name)
  return _s;
}
inline const std::string& CMsgGameDataSpecialValueBonus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGameDataSpecialValueBonus::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataSpecialValueBonus::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataSpecialValueBonus::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGameDataSpecialValueBonus.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataSpecialValueBonus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataSpecialValueBonus.name)
}

// optional float value = 2;
inline bool CMsgGameDataSpecialValueBonus::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameDataSpecialValueBonus::has_value() const {
  return _internal_has_value();
}
inline void CMsgGameDataSpecialValueBonus::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgGameDataSpecialValueBonus::_internal_value() const {
  return _impl_.value_;
}
inline float CMsgGameDataSpecialValueBonus::value() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValueBonus.value)
  return _internal_value();
}
inline void CMsgGameDataSpecialValueBonus::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void CMsgGameDataSpecialValueBonus::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataSpecialValueBonus.value)
}

// optional uint32 operation = 3;
inline bool CMsgGameDataSpecialValueBonus::_internal_has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameDataSpecialValueBonus::has_operation() const {
  return _internal_has_operation();
}
inline void CMsgGameDataSpecialValueBonus::clear_operation() {
  _impl_.operation_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameDataSpecialValueBonus::_internal_operation() const {
  return _impl_.operation_;
}
inline uint32_t CMsgGameDataSpecialValueBonus::operation() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValueBonus.operation)
  return _internal_operation();
}
inline void CMsgGameDataSpecialValueBonus::_internal_set_operation(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.operation_ = value;
}
inline void CMsgGameDataSpecialValueBonus::set_operation(uint32_t value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataSpecialValueBonus.operation)
}

// -------------------------------------------------------------------

// CMsgGameDataSpecialValues

// optional string name = 1;
inline bool CMsgGameDataSpecialValues::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameDataSpecialValues::has_name() const {
  return _internal_has_name();
}
inline void CMsgGameDataSpecialValues::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameDataSpecialValues::name() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValues.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataSpecialValues::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataSpecialValues.name)
}
inline std::string* CMsgGameDataSpecialValues::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataSpecialValues.name)
  return _s;
}
inline const std::string& CMsgGameDataSpecialValues::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGameDataSpecialValues::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataSpecialValues::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataSpecialValues::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGameDataSpecialValues.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataSpecialValues::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataSpecialValues.name)
}

// repeated float values_float = 2;
inline int CMsgGameDataSpecialValues::_internal_values_float_size() const {
  return _impl_.values_float_.size();
}
inline int CMsgGameDataSpecialValues::values_float_size() const {
  return _internal_values_float_size();
}
inline void CMsgGameDataSpecialValues::clear_values_float() {
  _impl_.values_float_.Clear();
}
inline float CMsgGameDataSpecialValues::_internal_values_float(int index) const {
  return _impl_.values_float_.Get(index);
}
inline float CMsgGameDataSpecialValues::values_float(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValues.values_float)
  return _internal_values_float(index);
}
inline void CMsgGameDataSpecialValues::set_values_float(int index, float value) {
  _impl_.values_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataSpecialValues.values_float)
}
inline void CMsgGameDataSpecialValues::_internal_add_values_float(float value) {
  _impl_.values_float_.Add(value);
}
inline void CMsgGameDataSpecialValues::add_values_float(float value) {
  _internal_add_values_float(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataSpecialValues.values_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataSpecialValues::_internal_values_float() const {
  return _impl_.values_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataSpecialValues::values_float() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataSpecialValues.values_float)
  return _internal_values_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataSpecialValues::_internal_mutable_values_float() {
  return &_impl_.values_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataSpecialValues::mutable_values_float() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataSpecialValues.values_float)
  return _internal_mutable_values_float();
}

// optional bool is_percentage = 4;
inline bool CMsgGameDataSpecialValues::_internal_has_is_percentage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameDataSpecialValues::has_is_percentage() const {
  return _internal_has_is_percentage();
}
inline void CMsgGameDataSpecialValues::clear_is_percentage() {
  _impl_.is_percentage_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGameDataSpecialValues::_internal_is_percentage() const {
  return _impl_.is_percentage_;
}
inline bool CMsgGameDataSpecialValues::is_percentage() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValues.is_percentage)
  return _internal_is_percentage();
}
inline void CMsgGameDataSpecialValues::_internal_set_is_percentage(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_percentage_ = value;
}
inline void CMsgGameDataSpecialValues::set_is_percentage(bool value) {
  _internal_set_is_percentage(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataSpecialValues.is_percentage)
}

// optional string heading_loc = 5;
inline bool CMsgGameDataSpecialValues::_internal_has_heading_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameDataSpecialValues::has_heading_loc() const {
  return _internal_has_heading_loc();
}
inline void CMsgGameDataSpecialValues::clear_heading_loc() {
  _impl_.heading_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameDataSpecialValues::heading_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValues.heading_loc)
  return _internal_heading_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataSpecialValues::set_heading_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.heading_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataSpecialValues.heading_loc)
}
inline std::string* CMsgGameDataSpecialValues::mutable_heading_loc() {
  std::string* _s = _internal_mutable_heading_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataSpecialValues.heading_loc)
  return _s;
}
inline const std::string& CMsgGameDataSpecialValues::_internal_heading_loc() const {
  return _impl_.heading_loc_.Get();
}
inline void CMsgGameDataSpecialValues::_internal_set_heading_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.heading_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataSpecialValues::_internal_mutable_heading_loc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.heading_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataSpecialValues::release_heading_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataSpecialValues.heading_loc)
  if (!_internal_has_heading_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.heading_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.heading_loc_.IsDefault()) {
    _impl_.heading_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataSpecialValues::set_allocated_heading_loc(std::string* heading_loc) {
  if (heading_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.heading_loc_.SetAllocated(heading_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.heading_loc_.IsDefault()) {
    _impl_.heading_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataSpecialValues.heading_loc)
}

// repeated .CMsgGameDataSpecialValueBonus bonuses = 6;
inline int CMsgGameDataSpecialValues::_internal_bonuses_size() const {
  return _impl_.bonuses_.size();
}
inline int CMsgGameDataSpecialValues::bonuses_size() const {
  return _internal_bonuses_size();
}
inline void CMsgGameDataSpecialValues::clear_bonuses() {
  _impl_.bonuses_.Clear();
}
inline ::CMsgGameDataSpecialValueBonus* CMsgGameDataSpecialValues::mutable_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataSpecialValues.bonuses)
  return _impl_.bonuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValueBonus >*
CMsgGameDataSpecialValues::mutable_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataSpecialValues.bonuses)
  return &_impl_.bonuses_;
}
inline const ::CMsgGameDataSpecialValueBonus& CMsgGameDataSpecialValues::_internal_bonuses(int index) const {
  return _impl_.bonuses_.Get(index);
}
inline const ::CMsgGameDataSpecialValueBonus& CMsgGameDataSpecialValues::bonuses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataSpecialValues.bonuses)
  return _internal_bonuses(index);
}
inline ::CMsgGameDataSpecialValueBonus* CMsgGameDataSpecialValues::_internal_add_bonuses() {
  return _impl_.bonuses_.Add();
}
inline ::CMsgGameDataSpecialValueBonus* CMsgGameDataSpecialValues::add_bonuses() {
  ::CMsgGameDataSpecialValueBonus* _add = _internal_add_bonuses();
  // @@protoc_insertion_point(field_add:CMsgGameDataSpecialValues.bonuses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValueBonus >&
CMsgGameDataSpecialValues::bonuses() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataSpecialValues.bonuses)
  return _impl_.bonuses_;
}

// -------------------------------------------------------------------

// CMsgGameDataAbilityOrItem

// optional int32 id = 1 [default = -1];
inline bool CMsgGameDataAbilityOrItem::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_id() const {
  return _internal_has_id();
}
inline void CMsgGameDataAbilityOrItem::clear_id() {
  _impl_.id_ = -1;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline int32_t CMsgGameDataAbilityOrItem::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CMsgGameDataAbilityOrItem::id() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.id)
  return _internal_id();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.id_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.id)
}

// optional string name = 2;
inline bool CMsgGameDataAbilityOrItem::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_name() const {
  return _internal_has_name();
}
inline void CMsgGameDataAbilityOrItem::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameDataAbilityOrItem::name() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataAbilityOrItem::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.name)
}
inline std::string* CMsgGameDataAbilityOrItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.name)
  return _s;
}
inline const std::string& CMsgGameDataAbilityOrItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGameDataAbilityOrItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataAbilityOrItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataAbilityOrItem.name)
}

// optional string name_loc = 5;
inline bool CMsgGameDataAbilityOrItem::_internal_has_name_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_name_loc() const {
  return _internal_has_name_loc();
}
inline void CMsgGameDataAbilityOrItem::clear_name_loc() {
  _impl_.name_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameDataAbilityOrItem::name_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.name_loc)
  return _internal_name_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataAbilityOrItem::set_name_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.name_loc)
}
inline std::string* CMsgGameDataAbilityOrItem::mutable_name_loc() {
  std::string* _s = _internal_mutable_name_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.name_loc)
  return _s;
}
inline const std::string& CMsgGameDataAbilityOrItem::_internal_name_loc() const {
  return _impl_.name_loc_.Get();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_name_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::_internal_mutable_name_loc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::release_name_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataAbilityOrItem.name_loc)
  if (!_internal_has_name_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataAbilityOrItem::set_allocated_name_loc(std::string* name_loc) {
  if (name_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_loc_.SetAllocated(name_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataAbilityOrItem.name_loc)
}

// optional string desc_loc = 6;
inline bool CMsgGameDataAbilityOrItem::_internal_has_desc_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_desc_loc() const {
  return _internal_has_desc_loc();
}
inline void CMsgGameDataAbilityOrItem::clear_desc_loc() {
  _impl_.desc_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgGameDataAbilityOrItem::desc_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.desc_loc)
  return _internal_desc_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataAbilityOrItem::set_desc_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.desc_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.desc_loc)
}
inline std::string* CMsgGameDataAbilityOrItem::mutable_desc_loc() {
  std::string* _s = _internal_mutable_desc_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.desc_loc)
  return _s;
}
inline const std::string& CMsgGameDataAbilityOrItem::_internal_desc_loc() const {
  return _impl_.desc_loc_.Get();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_desc_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.desc_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::_internal_mutable_desc_loc() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.desc_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::release_desc_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataAbilityOrItem.desc_loc)
  if (!_internal_has_desc_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.desc_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_loc_.IsDefault()) {
    _impl_.desc_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataAbilityOrItem::set_allocated_desc_loc(std::string* desc_loc) {
  if (desc_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.desc_loc_.SetAllocated(desc_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_loc_.IsDefault()) {
    _impl_.desc_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataAbilityOrItem.desc_loc)
}

// optional string lore_loc = 7;
inline bool CMsgGameDataAbilityOrItem::_internal_has_lore_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_lore_loc() const {
  return _internal_has_lore_loc();
}
inline void CMsgGameDataAbilityOrItem::clear_lore_loc() {
  _impl_.lore_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgGameDataAbilityOrItem::lore_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.lore_loc)
  return _internal_lore_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataAbilityOrItem::set_lore_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.lore_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.lore_loc)
}
inline std::string* CMsgGameDataAbilityOrItem::mutable_lore_loc() {
  std::string* _s = _internal_mutable_lore_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.lore_loc)
  return _s;
}
inline const std::string& CMsgGameDataAbilityOrItem::_internal_lore_loc() const {
  return _impl_.lore_loc_.Get();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_lore_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lore_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::_internal_mutable_lore_loc() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.lore_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::release_lore_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataAbilityOrItem.lore_loc)
  if (!_internal_has_lore_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.lore_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lore_loc_.IsDefault()) {
    _impl_.lore_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataAbilityOrItem::set_allocated_lore_loc(std::string* lore_loc) {
  if (lore_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.lore_loc_.SetAllocated(lore_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lore_loc_.IsDefault()) {
    _impl_.lore_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataAbilityOrItem.lore_loc)
}

// repeated string notes_loc = 8;
inline int CMsgGameDataAbilityOrItem::_internal_notes_loc_size() const {
  return _impl_.notes_loc_.size();
}
inline int CMsgGameDataAbilityOrItem::notes_loc_size() const {
  return _internal_notes_loc_size();
}
inline void CMsgGameDataAbilityOrItem::clear_notes_loc() {
  _impl_.notes_loc_.Clear();
}
inline std::string* CMsgGameDataAbilityOrItem::add_notes_loc() {
  std::string* _s = _internal_add_notes_loc();
  // @@protoc_insertion_point(field_add_mutable:CMsgGameDataAbilityOrItem.notes_loc)
  return _s;
}
inline const std::string& CMsgGameDataAbilityOrItem::_internal_notes_loc(int index) const {
  return _impl_.notes_loc_.Get(index);
}
inline const std::string& CMsgGameDataAbilityOrItem::notes_loc(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.notes_loc)
  return _internal_notes_loc(index);
}
inline std::string* CMsgGameDataAbilityOrItem::mutable_notes_loc(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.notes_loc)
  return _impl_.notes_loc_.Mutable(index);
}
inline void CMsgGameDataAbilityOrItem::set_notes_loc(int index, const std::string& value) {
  _impl_.notes_loc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.notes_loc)
}
inline void CMsgGameDataAbilityOrItem::set_notes_loc(int index, std::string&& value) {
  _impl_.notes_loc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.notes_loc)
}
inline void CMsgGameDataAbilityOrItem::set_notes_loc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.notes_loc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGameDataAbilityOrItem.notes_loc)
}
inline void CMsgGameDataAbilityOrItem::set_notes_loc(int index, const char* value, size_t size) {
  _impl_.notes_loc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGameDataAbilityOrItem.notes_loc)
}
inline std::string* CMsgGameDataAbilityOrItem::_internal_add_notes_loc() {
  return _impl_.notes_loc_.Add();
}
inline void CMsgGameDataAbilityOrItem::add_notes_loc(const std::string& value) {
  _impl_.notes_loc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.notes_loc)
}
inline void CMsgGameDataAbilityOrItem::add_notes_loc(std::string&& value) {
  _impl_.notes_loc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.notes_loc)
}
inline void CMsgGameDataAbilityOrItem::add_notes_loc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.notes_loc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgGameDataAbilityOrItem.notes_loc)
}
inline void CMsgGameDataAbilityOrItem::add_notes_loc(const char* value, size_t size) {
  _impl_.notes_loc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgGameDataAbilityOrItem.notes_loc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgGameDataAbilityOrItem::notes_loc() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.notes_loc)
  return _impl_.notes_loc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgGameDataAbilityOrItem::mutable_notes_loc() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.notes_loc)
  return &_impl_.notes_loc_;
}

// optional string shard_loc = 9;
inline bool CMsgGameDataAbilityOrItem::_internal_has_shard_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_shard_loc() const {
  return _internal_has_shard_loc();
}
inline void CMsgGameDataAbilityOrItem::clear_shard_loc() {
  _impl_.shard_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgGameDataAbilityOrItem::shard_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.shard_loc)
  return _internal_shard_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataAbilityOrItem::set_shard_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.shard_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.shard_loc)
}
inline std::string* CMsgGameDataAbilityOrItem::mutable_shard_loc() {
  std::string* _s = _internal_mutable_shard_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.shard_loc)
  return _s;
}
inline const std::string& CMsgGameDataAbilityOrItem::_internal_shard_loc() const {
  return _impl_.shard_loc_.Get();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_shard_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.shard_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::_internal_mutable_shard_loc() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.shard_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::release_shard_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataAbilityOrItem.shard_loc)
  if (!_internal_has_shard_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.shard_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shard_loc_.IsDefault()) {
    _impl_.shard_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataAbilityOrItem::set_allocated_shard_loc(std::string* shard_loc) {
  if (shard_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.shard_loc_.SetAllocated(shard_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shard_loc_.IsDefault()) {
    _impl_.shard_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataAbilityOrItem.shard_loc)
}

// optional string scepter_loc = 10;
inline bool CMsgGameDataAbilityOrItem::_internal_has_scepter_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_scepter_loc() const {
  return _internal_has_scepter_loc();
}
inline void CMsgGameDataAbilityOrItem::clear_scepter_loc() {
  _impl_.scepter_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgGameDataAbilityOrItem::scepter_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.scepter_loc)
  return _internal_scepter_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataAbilityOrItem::set_scepter_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.scepter_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.scepter_loc)
}
inline std::string* CMsgGameDataAbilityOrItem::mutable_scepter_loc() {
  std::string* _s = _internal_mutable_scepter_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.scepter_loc)
  return _s;
}
inline const std::string& CMsgGameDataAbilityOrItem::_internal_scepter_loc() const {
  return _impl_.scepter_loc_.Get();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_scepter_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scepter_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::_internal_mutable_scepter_loc() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.scepter_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataAbilityOrItem::release_scepter_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataAbilityOrItem.scepter_loc)
  if (!_internal_has_scepter_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.scepter_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scepter_loc_.IsDefault()) {
    _impl_.scepter_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataAbilityOrItem::set_allocated_scepter_loc(std::string* scepter_loc) {
  if (scepter_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.scepter_loc_.SetAllocated(scepter_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scepter_loc_.IsDefault()) {
    _impl_.scepter_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataAbilityOrItem.scepter_loc)
}

// optional uint32 type = 20;
inline bool CMsgGameDataAbilityOrItem::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_type() const {
  return _internal_has_type();
}
inline void CMsgGameDataAbilityOrItem::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t CMsgGameDataAbilityOrItem::type() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.type)
  return _internal_type();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.type_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.type)
}

// optional uint64 behavior = 21;
inline bool CMsgGameDataAbilityOrItem::_internal_has_behavior() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_behavior() const {
  return _internal_has_behavior();
}
inline void CMsgGameDataAbilityOrItem::clear_behavior() {
  _impl_.behavior_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgGameDataAbilityOrItem::_internal_behavior() const {
  return _impl_.behavior_;
}
inline uint64_t CMsgGameDataAbilityOrItem::behavior() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.behavior)
  return _internal_behavior();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_behavior(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.behavior_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_behavior(uint64_t value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.behavior)
}

// optional uint32 target_team = 22;
inline bool CMsgGameDataAbilityOrItem::_internal_has_target_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_target_team() const {
  return _internal_has_target_team();
}
inline void CMsgGameDataAbilityOrItem::clear_target_team() {
  _impl_.target_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_target_team() const {
  return _impl_.target_team_;
}
inline uint32_t CMsgGameDataAbilityOrItem::target_team() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.target_team)
  return _internal_target_team();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_target_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.target_team_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_target_team(uint32_t value) {
  _internal_set_target_team(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.target_team)
}

// optional uint32 target_type = 23;
inline bool CMsgGameDataAbilityOrItem::_internal_has_target_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_target_type() const {
  return _internal_has_target_type();
}
inline void CMsgGameDataAbilityOrItem::clear_target_type() {
  _impl_.target_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_target_type() const {
  return _impl_.target_type_;
}
inline uint32_t CMsgGameDataAbilityOrItem::target_type() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.target_type)
  return _internal_target_type();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_target_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.target_type_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_target_type(uint32_t value) {
  _internal_set_target_type(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.target_type)
}

// optional uint32 flags = 24;
inline bool CMsgGameDataAbilityOrItem::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_flags() const {
  return _internal_has_flags();
}
inline void CMsgGameDataAbilityOrItem::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t CMsgGameDataAbilityOrItem::flags() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.flags)
  return _internal_flags();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.flags_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.flags)
}

// optional uint32 damage = 25;
inline bool CMsgGameDataAbilityOrItem::_internal_has_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_damage() const {
  return _internal_has_damage();
}
inline void CMsgGameDataAbilityOrItem::clear_damage() {
  _impl_.damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t CMsgGameDataAbilityOrItem::damage() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.damage)
  return _internal_damage();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.damage_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.damage)
}

// optional uint32 immunity = 26;
inline bool CMsgGameDataAbilityOrItem::_internal_has_immunity() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_immunity() const {
  return _internal_has_immunity();
}
inline void CMsgGameDataAbilityOrItem::clear_immunity() {
  _impl_.immunity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_immunity() const {
  return _impl_.immunity_;
}
inline uint32_t CMsgGameDataAbilityOrItem::immunity() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.immunity)
  return _internal_immunity();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_immunity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.immunity_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_immunity(uint32_t value) {
  _internal_set_immunity(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.immunity)
}

// optional uint32 dispellable = 27;
inline bool CMsgGameDataAbilityOrItem::_internal_has_dispellable() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_dispellable() const {
  return _internal_has_dispellable();
}
inline void CMsgGameDataAbilityOrItem::clear_dispellable() {
  _impl_.dispellable_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_dispellable() const {
  return _impl_.dispellable_;
}
inline uint32_t CMsgGameDataAbilityOrItem::dispellable() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.dispellable)
  return _internal_dispellable();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_dispellable(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.dispellable_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_dispellable(uint32_t value) {
  _internal_set_dispellable(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.dispellable)
}

// optional uint32 max_level = 28;
inline bool CMsgGameDataAbilityOrItem::_internal_has_max_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_max_level() const {
  return _internal_has_max_level();
}
inline void CMsgGameDataAbilityOrItem::clear_max_level() {
  _impl_.max_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_max_level() const {
  return _impl_.max_level_;
}
inline uint32_t CMsgGameDataAbilityOrItem::max_level() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.max_level)
  return _internal_max_level();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_max_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.max_level_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_max_level(uint32_t value) {
  _internal_set_max_level(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.max_level)
}

// repeated uint32 cast_ranges = 30;
inline int CMsgGameDataAbilityOrItem::_internal_cast_ranges_size() const {
  return _impl_.cast_ranges_.size();
}
inline int CMsgGameDataAbilityOrItem::cast_ranges_size() const {
  return _internal_cast_ranges_size();
}
inline void CMsgGameDataAbilityOrItem::clear_cast_ranges() {
  _impl_.cast_ranges_.Clear();
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_cast_ranges(int index) const {
  return _impl_.cast_ranges_.Get(index);
}
inline uint32_t CMsgGameDataAbilityOrItem::cast_ranges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.cast_ranges)
  return _internal_cast_ranges(index);
}
inline void CMsgGameDataAbilityOrItem::set_cast_ranges(int index, uint32_t value) {
  _impl_.cast_ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.cast_ranges)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_cast_ranges(uint32_t value) {
  _impl_.cast_ranges_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_cast_ranges(uint32_t value) {
  _internal_add_cast_ranges(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.cast_ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::_internal_cast_ranges() const {
  return _impl_.cast_ranges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::cast_ranges() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.cast_ranges)
  return _internal_cast_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::_internal_mutable_cast_ranges() {
  return &_impl_.cast_ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::mutable_cast_ranges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.cast_ranges)
  return _internal_mutable_cast_ranges();
}

// repeated float cast_points = 31;
inline int CMsgGameDataAbilityOrItem::_internal_cast_points_size() const {
  return _impl_.cast_points_.size();
}
inline int CMsgGameDataAbilityOrItem::cast_points_size() const {
  return _internal_cast_points_size();
}
inline void CMsgGameDataAbilityOrItem::clear_cast_points() {
  _impl_.cast_points_.Clear();
}
inline float CMsgGameDataAbilityOrItem::_internal_cast_points(int index) const {
  return _impl_.cast_points_.Get(index);
}
inline float CMsgGameDataAbilityOrItem::cast_points(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.cast_points)
  return _internal_cast_points(index);
}
inline void CMsgGameDataAbilityOrItem::set_cast_points(int index, float value) {
  _impl_.cast_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.cast_points)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_cast_points(float value) {
  _impl_.cast_points_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_cast_points(float value) {
  _internal_add_cast_points(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.cast_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::_internal_cast_points() const {
  return _impl_.cast_points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::cast_points() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.cast_points)
  return _internal_cast_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::_internal_mutable_cast_points() {
  return &_impl_.cast_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::mutable_cast_points() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.cast_points)
  return _internal_mutable_cast_points();
}

// repeated float channel_times = 32;
inline int CMsgGameDataAbilityOrItem::_internal_channel_times_size() const {
  return _impl_.channel_times_.size();
}
inline int CMsgGameDataAbilityOrItem::channel_times_size() const {
  return _internal_channel_times_size();
}
inline void CMsgGameDataAbilityOrItem::clear_channel_times() {
  _impl_.channel_times_.Clear();
}
inline float CMsgGameDataAbilityOrItem::_internal_channel_times(int index) const {
  return _impl_.channel_times_.Get(index);
}
inline float CMsgGameDataAbilityOrItem::channel_times(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.channel_times)
  return _internal_channel_times(index);
}
inline void CMsgGameDataAbilityOrItem::set_channel_times(int index, float value) {
  _impl_.channel_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.channel_times)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_channel_times(float value) {
  _impl_.channel_times_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_channel_times(float value) {
  _internal_add_channel_times(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.channel_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::_internal_channel_times() const {
  return _impl_.channel_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::channel_times() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.channel_times)
  return _internal_channel_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::_internal_mutable_channel_times() {
  return &_impl_.channel_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::mutable_channel_times() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.channel_times)
  return _internal_mutable_channel_times();
}

// repeated float cooldowns = 33;
inline int CMsgGameDataAbilityOrItem::_internal_cooldowns_size() const {
  return _impl_.cooldowns_.size();
}
inline int CMsgGameDataAbilityOrItem::cooldowns_size() const {
  return _internal_cooldowns_size();
}
inline void CMsgGameDataAbilityOrItem::clear_cooldowns() {
  _impl_.cooldowns_.Clear();
}
inline float CMsgGameDataAbilityOrItem::_internal_cooldowns(int index) const {
  return _impl_.cooldowns_.Get(index);
}
inline float CMsgGameDataAbilityOrItem::cooldowns(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.cooldowns)
  return _internal_cooldowns(index);
}
inline void CMsgGameDataAbilityOrItem::set_cooldowns(int index, float value) {
  _impl_.cooldowns_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.cooldowns)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_cooldowns(float value) {
  _impl_.cooldowns_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_cooldowns(float value) {
  _internal_add_cooldowns(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.cooldowns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::_internal_cooldowns() const {
  return _impl_.cooldowns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::cooldowns() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.cooldowns)
  return _internal_cooldowns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::_internal_mutable_cooldowns() {
  return &_impl_.cooldowns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::mutable_cooldowns() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.cooldowns)
  return _internal_mutable_cooldowns();
}

// repeated float durations = 34;
inline int CMsgGameDataAbilityOrItem::_internal_durations_size() const {
  return _impl_.durations_.size();
}
inline int CMsgGameDataAbilityOrItem::durations_size() const {
  return _internal_durations_size();
}
inline void CMsgGameDataAbilityOrItem::clear_durations() {
  _impl_.durations_.Clear();
}
inline float CMsgGameDataAbilityOrItem::_internal_durations(int index) const {
  return _impl_.durations_.Get(index);
}
inline float CMsgGameDataAbilityOrItem::durations(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.durations)
  return _internal_durations(index);
}
inline void CMsgGameDataAbilityOrItem::set_durations(int index, float value) {
  _impl_.durations_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.durations)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_durations(float value) {
  _impl_.durations_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_durations(float value) {
  _internal_add_durations(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.durations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::_internal_durations() const {
  return _impl_.durations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameDataAbilityOrItem::durations() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.durations)
  return _internal_durations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::_internal_mutable_durations() {
  return &_impl_.durations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameDataAbilityOrItem::mutable_durations() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.durations)
  return _internal_mutable_durations();
}

// repeated uint32 damages = 35;
inline int CMsgGameDataAbilityOrItem::_internal_damages_size() const {
  return _impl_.damages_.size();
}
inline int CMsgGameDataAbilityOrItem::damages_size() const {
  return _internal_damages_size();
}
inline void CMsgGameDataAbilityOrItem::clear_damages() {
  _impl_.damages_.Clear();
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_damages(int index) const {
  return _impl_.damages_.Get(index);
}
inline uint32_t CMsgGameDataAbilityOrItem::damages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.damages)
  return _internal_damages(index);
}
inline void CMsgGameDataAbilityOrItem::set_damages(int index, uint32_t value) {
  _impl_.damages_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.damages)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_damages(uint32_t value) {
  _impl_.damages_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_damages(uint32_t value) {
  _internal_add_damages(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.damages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::_internal_damages() const {
  return _impl_.damages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::damages() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.damages)
  return _internal_damages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::_internal_mutable_damages() {
  return &_impl_.damages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::mutable_damages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.damages)
  return _internal_mutable_damages();
}

// repeated uint32 mana_costs = 36;
inline int CMsgGameDataAbilityOrItem::_internal_mana_costs_size() const {
  return _impl_.mana_costs_.size();
}
inline int CMsgGameDataAbilityOrItem::mana_costs_size() const {
  return _internal_mana_costs_size();
}
inline void CMsgGameDataAbilityOrItem::clear_mana_costs() {
  _impl_.mana_costs_.Clear();
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_mana_costs(int index) const {
  return _impl_.mana_costs_.Get(index);
}
inline uint32_t CMsgGameDataAbilityOrItem::mana_costs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.mana_costs)
  return _internal_mana_costs(index);
}
inline void CMsgGameDataAbilityOrItem::set_mana_costs(int index, uint32_t value) {
  _impl_.mana_costs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.mana_costs)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_mana_costs(uint32_t value) {
  _impl_.mana_costs_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_mana_costs(uint32_t value) {
  _internal_add_mana_costs(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.mana_costs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::_internal_mana_costs() const {
  return _impl_.mana_costs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::mana_costs() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.mana_costs)
  return _internal_mana_costs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::_internal_mutable_mana_costs() {
  return &_impl_.mana_costs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::mutable_mana_costs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.mana_costs)
  return _internal_mutable_mana_costs();
}

// repeated uint32 gold_costs = 37;
inline int CMsgGameDataAbilityOrItem::_internal_gold_costs_size() const {
  return _impl_.gold_costs_.size();
}
inline int CMsgGameDataAbilityOrItem::gold_costs_size() const {
  return _internal_gold_costs_size();
}
inline void CMsgGameDataAbilityOrItem::clear_gold_costs() {
  _impl_.gold_costs_.Clear();
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_gold_costs(int index) const {
  return _impl_.gold_costs_.Get(index);
}
inline uint32_t CMsgGameDataAbilityOrItem::gold_costs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.gold_costs)
  return _internal_gold_costs(index);
}
inline void CMsgGameDataAbilityOrItem::set_gold_costs(int index, uint32_t value) {
  _impl_.gold_costs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.gold_costs)
}
inline void CMsgGameDataAbilityOrItem::_internal_add_gold_costs(uint32_t value) {
  _impl_.gold_costs_.Add(value);
}
inline void CMsgGameDataAbilityOrItem::add_gold_costs(uint32_t value) {
  _internal_add_gold_costs(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.gold_costs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::_internal_gold_costs() const {
  return _impl_.gold_costs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataAbilityOrItem::gold_costs() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.gold_costs)
  return _internal_gold_costs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::_internal_mutable_gold_costs() {
  return &_impl_.gold_costs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataAbilityOrItem::mutable_gold_costs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.gold_costs)
  return _internal_mutable_gold_costs();
}

// repeated .CMsgGameDataSpecialValues special_values = 40;
inline int CMsgGameDataAbilityOrItem::_internal_special_values_size() const {
  return _impl_.special_values_.size();
}
inline int CMsgGameDataAbilityOrItem::special_values_size() const {
  return _internal_special_values_size();
}
inline void CMsgGameDataAbilityOrItem::clear_special_values() {
  _impl_.special_values_.Clear();
}
inline ::CMsgGameDataSpecialValues* CMsgGameDataAbilityOrItem::mutable_special_values(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilityOrItem.special_values)
  return _impl_.special_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValues >*
CMsgGameDataAbilityOrItem::mutable_special_values() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilityOrItem.special_values)
  return &_impl_.special_values_;
}
inline const ::CMsgGameDataSpecialValues& CMsgGameDataAbilityOrItem::_internal_special_values(int index) const {
  return _impl_.special_values_.Get(index);
}
inline const ::CMsgGameDataSpecialValues& CMsgGameDataAbilityOrItem::special_values(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.special_values)
  return _internal_special_values(index);
}
inline ::CMsgGameDataSpecialValues* CMsgGameDataAbilityOrItem::_internal_add_special_values() {
  return _impl_.special_values_.Add();
}
inline ::CMsgGameDataSpecialValues* CMsgGameDataAbilityOrItem::add_special_values() {
  ::CMsgGameDataSpecialValues* _add = _internal_add_special_values();
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilityOrItem.special_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataSpecialValues >&
CMsgGameDataAbilityOrItem::special_values() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilityOrItem.special_values)
  return _impl_.special_values_;
}

// optional bool is_item = 50;
inline bool CMsgGameDataAbilityOrItem::_internal_has_is_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_is_item() const {
  return _internal_has_is_item();
}
inline void CMsgGameDataAbilityOrItem::clear_is_item() {
  _impl_.is_item_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgGameDataAbilityOrItem::_internal_is_item() const {
  return _impl_.is_item_;
}
inline bool CMsgGameDataAbilityOrItem::is_item() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.is_item)
  return _internal_is_item();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_is_item(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.is_item_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_is_item(bool value) {
  _internal_set_is_item(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.is_item)
}

// optional bool ability_has_scepter = 60;
inline bool CMsgGameDataAbilityOrItem::_internal_has_ability_has_scepter() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_ability_has_scepter() const {
  return _internal_has_ability_has_scepter();
}
inline void CMsgGameDataAbilityOrItem::clear_ability_has_scepter() {
  _impl_.ability_has_scepter_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgGameDataAbilityOrItem::_internal_ability_has_scepter() const {
  return _impl_.ability_has_scepter_;
}
inline bool CMsgGameDataAbilityOrItem::ability_has_scepter() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.ability_has_scepter)
  return _internal_ability_has_scepter();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_ability_has_scepter(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.ability_has_scepter_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_ability_has_scepter(bool value) {
  _internal_set_ability_has_scepter(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.ability_has_scepter)
}

// optional bool ability_has_shard = 61;
inline bool CMsgGameDataAbilityOrItem::_internal_has_ability_has_shard() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_ability_has_shard() const {
  return _internal_has_ability_has_shard();
}
inline void CMsgGameDataAbilityOrItem::clear_ability_has_shard() {
  _impl_.ability_has_shard_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgGameDataAbilityOrItem::_internal_ability_has_shard() const {
  return _impl_.ability_has_shard_;
}
inline bool CMsgGameDataAbilityOrItem::ability_has_shard() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.ability_has_shard)
  return _internal_ability_has_shard();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_ability_has_shard(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.ability_has_shard_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_ability_has_shard(bool value) {
  _internal_set_ability_has_shard(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.ability_has_shard)
}

// optional bool ability_is_granted_by_scepter = 62;
inline bool CMsgGameDataAbilityOrItem::_internal_has_ability_is_granted_by_scepter() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_ability_is_granted_by_scepter() const {
  return _internal_has_ability_is_granted_by_scepter();
}
inline void CMsgGameDataAbilityOrItem::clear_ability_is_granted_by_scepter() {
  _impl_.ability_is_granted_by_scepter_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool CMsgGameDataAbilityOrItem::_internal_ability_is_granted_by_scepter() const {
  return _impl_.ability_is_granted_by_scepter_;
}
inline bool CMsgGameDataAbilityOrItem::ability_is_granted_by_scepter() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.ability_is_granted_by_scepter)
  return _internal_ability_is_granted_by_scepter();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_ability_is_granted_by_scepter(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.ability_is_granted_by_scepter_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_ability_is_granted_by_scepter(bool value) {
  _internal_set_ability_is_granted_by_scepter(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.ability_is_granted_by_scepter)
}

// optional bool ability_is_granted_by_shard = 63;
inline bool CMsgGameDataAbilityOrItem::_internal_has_ability_is_granted_by_shard() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_ability_is_granted_by_shard() const {
  return _internal_has_ability_is_granted_by_shard();
}
inline void CMsgGameDataAbilityOrItem::clear_ability_is_granted_by_shard() {
  _impl_.ability_is_granted_by_shard_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool CMsgGameDataAbilityOrItem::_internal_ability_is_granted_by_shard() const {
  return _impl_.ability_is_granted_by_shard_;
}
inline bool CMsgGameDataAbilityOrItem::ability_is_granted_by_shard() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.ability_is_granted_by_shard)
  return _internal_ability_is_granted_by_shard();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_ability_is_granted_by_shard(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.ability_is_granted_by_shard_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_ability_is_granted_by_shard(bool value) {
  _internal_set_ability_is_granted_by_shard(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.ability_is_granted_by_shard)
}

// optional uint32 item_cost = 70;
inline bool CMsgGameDataAbilityOrItem::_internal_has_item_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_item_cost() const {
  return _internal_has_item_cost();
}
inline void CMsgGameDataAbilityOrItem::clear_item_cost() {
  _impl_.item_cost_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_item_cost() const {
  return _impl_.item_cost_;
}
inline uint32_t CMsgGameDataAbilityOrItem::item_cost() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.item_cost)
  return _internal_item_cost();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_item_cost(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.item_cost_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_item_cost(uint32_t value) {
  _internal_set_item_cost(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.item_cost)
}

// optional uint32 item_initial_charges = 71;
inline bool CMsgGameDataAbilityOrItem::_internal_has_item_initial_charges() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_item_initial_charges() const {
  return _internal_has_item_initial_charges();
}
inline void CMsgGameDataAbilityOrItem::clear_item_initial_charges() {
  _impl_.item_initial_charges_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_item_initial_charges() const {
  return _impl_.item_initial_charges_;
}
inline uint32_t CMsgGameDataAbilityOrItem::item_initial_charges() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.item_initial_charges)
  return _internal_item_initial_charges();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_item_initial_charges(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.item_initial_charges_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_item_initial_charges(uint32_t value) {
  _internal_set_item_initial_charges(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.item_initial_charges)
}

// optional uint32 item_neutral_tier = 72;
inline bool CMsgGameDataAbilityOrItem::_internal_has_item_neutral_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_item_neutral_tier() const {
  return _internal_has_item_neutral_tier();
}
inline void CMsgGameDataAbilityOrItem::clear_item_neutral_tier() {
  _impl_.item_neutral_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_item_neutral_tier() const {
  return _impl_.item_neutral_tier_;
}
inline uint32_t CMsgGameDataAbilityOrItem::item_neutral_tier() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.item_neutral_tier)
  return _internal_item_neutral_tier();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_item_neutral_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.item_neutral_tier_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_item_neutral_tier(uint32_t value) {
  _internal_set_item_neutral_tier(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.item_neutral_tier)
}

// optional uint32 item_stock_max = 73;
inline bool CMsgGameDataAbilityOrItem::_internal_has_item_stock_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_item_stock_max() const {
  return _internal_has_item_stock_max();
}
inline void CMsgGameDataAbilityOrItem::clear_item_stock_max() {
  _impl_.item_stock_max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_item_stock_max() const {
  return _impl_.item_stock_max_;
}
inline uint32_t CMsgGameDataAbilityOrItem::item_stock_max() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.item_stock_max)
  return _internal_item_stock_max();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_item_stock_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.item_stock_max_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_item_stock_max(uint32_t value) {
  _internal_set_item_stock_max(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.item_stock_max)
}

// optional float item_stock_time = 74;
inline bool CMsgGameDataAbilityOrItem::_internal_has_item_stock_time() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_item_stock_time() const {
  return _internal_has_item_stock_time();
}
inline void CMsgGameDataAbilityOrItem::clear_item_stock_time() {
  _impl_.item_stock_time_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float CMsgGameDataAbilityOrItem::_internal_item_stock_time() const {
  return _impl_.item_stock_time_;
}
inline float CMsgGameDataAbilityOrItem::item_stock_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.item_stock_time)
  return _internal_item_stock_time();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_item_stock_time(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.item_stock_time_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_item_stock_time(float value) {
  _internal_set_item_stock_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.item_stock_time)
}

// optional uint32 item_quality = 85;
inline bool CMsgGameDataAbilityOrItem::_internal_has_item_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgGameDataAbilityOrItem::has_item_quality() const {
  return _internal_has_item_quality();
}
inline void CMsgGameDataAbilityOrItem::clear_item_quality() {
  _impl_.item_quality_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgGameDataAbilityOrItem::_internal_item_quality() const {
  return _impl_.item_quality_;
}
inline uint32_t CMsgGameDataAbilityOrItem::item_quality() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilityOrItem.item_quality)
  return _internal_item_quality();
}
inline void CMsgGameDataAbilityOrItem::_internal_set_item_quality(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.item_quality_ = value;
}
inline void CMsgGameDataAbilityOrItem::set_item_quality(uint32_t value) {
  _internal_set_item_quality(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataAbilityOrItem.item_quality)
}

// -------------------------------------------------------------------

// CMsgGameDataHero

// optional uint32 id = 1;
inline bool CMsgGameDataHero::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_id() const {
  return _internal_has_id();
}
inline void CMsgGameDataHero::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameDataHero::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgGameDataHero::id() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.id)
  return _internal_id();
}
inline void CMsgGameDataHero::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.id_ = value;
}
inline void CMsgGameDataHero::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.id)
}

// optional string name = 2;
inline bool CMsgGameDataHero::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_name() const {
  return _internal_has_name();
}
inline void CMsgGameDataHero::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameDataHero::name() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHero::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.name)
}
inline std::string* CMsgGameDataHero::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHero.name)
  return _s;
}
inline const std::string& CMsgGameDataHero::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGameDataHero::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHero.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHero::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHero.name)
}

// optional uint32 order_id = 3;
inline bool CMsgGameDataHero::_internal_has_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_order_id() const {
  return _internal_has_order_id();
}
inline void CMsgGameDataHero::clear_order_id() {
  _impl_.order_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameDataHero::_internal_order_id() const {
  return _impl_.order_id_;
}
inline uint32_t CMsgGameDataHero::order_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.order_id)
  return _internal_order_id();
}
inline void CMsgGameDataHero::_internal_set_order_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.order_id_ = value;
}
inline void CMsgGameDataHero::set_order_id(uint32_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.order_id)
}

// optional string name_loc = 5;
inline bool CMsgGameDataHero::_internal_has_name_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_name_loc() const {
  return _internal_has_name_loc();
}
inline void CMsgGameDataHero::clear_name_loc() {
  _impl_.name_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameDataHero::name_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.name_loc)
  return _internal_name_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHero::set_name_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.name_loc)
}
inline std::string* CMsgGameDataHero::mutable_name_loc() {
  std::string* _s = _internal_mutable_name_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHero.name_loc)
  return _s;
}
inline const std::string& CMsgGameDataHero::_internal_name_loc() const {
  return _impl_.name_loc_.Get();
}
inline void CMsgGameDataHero::_internal_set_name_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::_internal_mutable_name_loc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::release_name_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHero.name_loc)
  if (!_internal_has_name_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHero::set_allocated_name_loc(std::string* name_loc) {
  if (name_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_loc_.SetAllocated(name_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHero.name_loc)
}

// optional string bio_loc = 6;
inline bool CMsgGameDataHero::_internal_has_bio_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_bio_loc() const {
  return _internal_has_bio_loc();
}
inline void CMsgGameDataHero::clear_bio_loc() {
  _impl_.bio_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgGameDataHero::bio_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.bio_loc)
  return _internal_bio_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHero::set_bio_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.bio_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.bio_loc)
}
inline std::string* CMsgGameDataHero::mutable_bio_loc() {
  std::string* _s = _internal_mutable_bio_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHero.bio_loc)
  return _s;
}
inline const std::string& CMsgGameDataHero::_internal_bio_loc() const {
  return _impl_.bio_loc_.Get();
}
inline void CMsgGameDataHero::_internal_set_bio_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bio_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::_internal_mutable_bio_loc() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.bio_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::release_bio_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHero.bio_loc)
  if (!_internal_has_bio_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.bio_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bio_loc_.IsDefault()) {
    _impl_.bio_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHero::set_allocated_bio_loc(std::string* bio_loc) {
  if (bio_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.bio_loc_.SetAllocated(bio_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bio_loc_.IsDefault()) {
    _impl_.bio_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHero.bio_loc)
}

// optional string hype_loc = 7;
inline bool CMsgGameDataHero::_internal_has_hype_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_hype_loc() const {
  return _internal_has_hype_loc();
}
inline void CMsgGameDataHero::clear_hype_loc() {
  _impl_.hype_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgGameDataHero::hype_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.hype_loc)
  return _internal_hype_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHero::set_hype_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.hype_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.hype_loc)
}
inline std::string* CMsgGameDataHero::mutable_hype_loc() {
  std::string* _s = _internal_mutable_hype_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHero.hype_loc)
  return _s;
}
inline const std::string& CMsgGameDataHero::_internal_hype_loc() const {
  return _impl_.hype_loc_.Get();
}
inline void CMsgGameDataHero::_internal_set_hype_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hype_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::_internal_mutable_hype_loc() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hype_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::release_hype_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHero.hype_loc)
  if (!_internal_has_hype_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.hype_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hype_loc_.IsDefault()) {
    _impl_.hype_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHero::set_allocated_hype_loc(std::string* hype_loc) {
  if (hype_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hype_loc_.SetAllocated(hype_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hype_loc_.IsDefault()) {
    _impl_.hype_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHero.hype_loc)
}

// optional string npe_desc_loc = 8;
inline bool CMsgGameDataHero::_internal_has_npe_desc_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_npe_desc_loc() const {
  return _internal_has_npe_desc_loc();
}
inline void CMsgGameDataHero::clear_npe_desc_loc() {
  _impl_.npe_desc_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgGameDataHero::npe_desc_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.npe_desc_loc)
  return _internal_npe_desc_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHero::set_npe_desc_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.npe_desc_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.npe_desc_loc)
}
inline std::string* CMsgGameDataHero::mutable_npe_desc_loc() {
  std::string* _s = _internal_mutable_npe_desc_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHero.npe_desc_loc)
  return _s;
}
inline const std::string& CMsgGameDataHero::_internal_npe_desc_loc() const {
  return _impl_.npe_desc_loc_.Get();
}
inline void CMsgGameDataHero::_internal_set_npe_desc_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.npe_desc_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::_internal_mutable_npe_desc_loc() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.npe_desc_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHero::release_npe_desc_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHero.npe_desc_loc)
  if (!_internal_has_npe_desc_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.npe_desc_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.npe_desc_loc_.IsDefault()) {
    _impl_.npe_desc_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHero::set_allocated_npe_desc_loc(std::string* npe_desc_loc) {
  if (npe_desc_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.npe_desc_loc_.SetAllocated(npe_desc_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.npe_desc_loc_.IsDefault()) {
    _impl_.npe_desc_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHero.npe_desc_loc)
}

// optional uint32 str_base = 10;
inline bool CMsgGameDataHero::_internal_has_str_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_str_base() const {
  return _internal_has_str_base();
}
inline void CMsgGameDataHero::clear_str_base() {
  _impl_.str_base_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGameDataHero::_internal_str_base() const {
  return _impl_.str_base_;
}
inline uint32_t CMsgGameDataHero::str_base() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.str_base)
  return _internal_str_base();
}
inline void CMsgGameDataHero::_internal_set_str_base(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.str_base_ = value;
}
inline void CMsgGameDataHero::set_str_base(uint32_t value) {
  _internal_set_str_base(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.str_base)
}

// optional float str_gain = 11;
inline bool CMsgGameDataHero::_internal_has_str_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_str_gain() const {
  return _internal_has_str_gain();
}
inline void CMsgGameDataHero::clear_str_gain() {
  _impl_.str_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float CMsgGameDataHero::_internal_str_gain() const {
  return _impl_.str_gain_;
}
inline float CMsgGameDataHero::str_gain() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.str_gain)
  return _internal_str_gain();
}
inline void CMsgGameDataHero::_internal_set_str_gain(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.str_gain_ = value;
}
inline void CMsgGameDataHero::set_str_gain(float value) {
  _internal_set_str_gain(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.str_gain)
}

// optional uint32 agi_base = 12;
inline bool CMsgGameDataHero::_internal_has_agi_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_agi_base() const {
  return _internal_has_agi_base();
}
inline void CMsgGameDataHero::clear_agi_base() {
  _impl_.agi_base_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgGameDataHero::_internal_agi_base() const {
  return _impl_.agi_base_;
}
inline uint32_t CMsgGameDataHero::agi_base() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.agi_base)
  return _internal_agi_base();
}
inline void CMsgGameDataHero::_internal_set_agi_base(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.agi_base_ = value;
}
inline void CMsgGameDataHero::set_agi_base(uint32_t value) {
  _internal_set_agi_base(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.agi_base)
}

// optional float agi_gain = 13;
inline bool CMsgGameDataHero::_internal_has_agi_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_agi_gain() const {
  return _internal_has_agi_gain();
}
inline void CMsgGameDataHero::clear_agi_gain() {
  _impl_.agi_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CMsgGameDataHero::_internal_agi_gain() const {
  return _impl_.agi_gain_;
}
inline float CMsgGameDataHero::agi_gain() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.agi_gain)
  return _internal_agi_gain();
}
inline void CMsgGameDataHero::_internal_set_agi_gain(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.agi_gain_ = value;
}
inline void CMsgGameDataHero::set_agi_gain(float value) {
  _internal_set_agi_gain(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.agi_gain)
}

// optional uint32 int_base = 14;
inline bool CMsgGameDataHero::_internal_has_int_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_int_base() const {
  return _internal_has_int_base();
}
inline void CMsgGameDataHero::clear_int_base() {
  _impl_.int_base_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgGameDataHero::_internal_int_base() const {
  return _impl_.int_base_;
}
inline uint32_t CMsgGameDataHero::int_base() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.int_base)
  return _internal_int_base();
}
inline void CMsgGameDataHero::_internal_set_int_base(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.int_base_ = value;
}
inline void CMsgGameDataHero::set_int_base(uint32_t value) {
  _internal_set_int_base(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.int_base)
}

// optional float int_gain = 15;
inline bool CMsgGameDataHero::_internal_has_int_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_int_gain() const {
  return _internal_has_int_gain();
}
inline void CMsgGameDataHero::clear_int_gain() {
  _impl_.int_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CMsgGameDataHero::_internal_int_gain() const {
  return _impl_.int_gain_;
}
inline float CMsgGameDataHero::int_gain() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.int_gain)
  return _internal_int_gain();
}
inline void CMsgGameDataHero::_internal_set_int_gain(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.int_gain_ = value;
}
inline void CMsgGameDataHero::set_int_gain(float value) {
  _internal_set_int_gain(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.int_gain)
}

// optional uint32 primary_attr = 20;
inline bool CMsgGameDataHero::_internal_has_primary_attr() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_primary_attr() const {
  return _internal_has_primary_attr();
}
inline void CMsgGameDataHero::clear_primary_attr() {
  _impl_.primary_attr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgGameDataHero::_internal_primary_attr() const {
  return _impl_.primary_attr_;
}
inline uint32_t CMsgGameDataHero::primary_attr() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.primary_attr)
  return _internal_primary_attr();
}
inline void CMsgGameDataHero::_internal_set_primary_attr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.primary_attr_ = value;
}
inline void CMsgGameDataHero::set_primary_attr(uint32_t value) {
  _internal_set_primary_attr(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.primary_attr)
}

// optional uint32 complexity = 21;
inline bool CMsgGameDataHero::_internal_has_complexity() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_complexity() const {
  return _internal_has_complexity();
}
inline void CMsgGameDataHero::clear_complexity() {
  _impl_.complexity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgGameDataHero::_internal_complexity() const {
  return _impl_.complexity_;
}
inline uint32_t CMsgGameDataHero::complexity() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.complexity)
  return _internal_complexity();
}
inline void CMsgGameDataHero::_internal_set_complexity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.complexity_ = value;
}
inline void CMsgGameDataHero::set_complexity(uint32_t value) {
  _internal_set_complexity(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.complexity)
}

// optional uint32 attack_capability = 22;
inline bool CMsgGameDataHero::_internal_has_attack_capability() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_attack_capability() const {
  return _internal_has_attack_capability();
}
inline void CMsgGameDataHero::clear_attack_capability() {
  _impl_.attack_capability_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgGameDataHero::_internal_attack_capability() const {
  return _impl_.attack_capability_;
}
inline uint32_t CMsgGameDataHero::attack_capability() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.attack_capability)
  return _internal_attack_capability();
}
inline void CMsgGameDataHero::_internal_set_attack_capability(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.attack_capability_ = value;
}
inline void CMsgGameDataHero::set_attack_capability(uint32_t value) {
  _internal_set_attack_capability(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.attack_capability)
}

// repeated uint32 role_levels = 23;
inline int CMsgGameDataHero::_internal_role_levels_size() const {
  return _impl_.role_levels_.size();
}
inline int CMsgGameDataHero::role_levels_size() const {
  return _internal_role_levels_size();
}
inline void CMsgGameDataHero::clear_role_levels() {
  _impl_.role_levels_.Clear();
}
inline uint32_t CMsgGameDataHero::_internal_role_levels(int index) const {
  return _impl_.role_levels_.Get(index);
}
inline uint32_t CMsgGameDataHero::role_levels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.role_levels)
  return _internal_role_levels(index);
}
inline void CMsgGameDataHero::set_role_levels(int index, uint32_t value) {
  _impl_.role_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.role_levels)
}
inline void CMsgGameDataHero::_internal_add_role_levels(uint32_t value) {
  _impl_.role_levels_.Add(value);
}
inline void CMsgGameDataHero::add_role_levels(uint32_t value) {
  _internal_add_role_levels(value);
  // @@protoc_insertion_point(field_add:CMsgGameDataHero.role_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataHero::_internal_role_levels() const {
  return _impl_.role_levels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameDataHero::role_levels() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataHero.role_levels)
  return _internal_role_levels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataHero::_internal_mutable_role_levels() {
  return &_impl_.role_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameDataHero::mutable_role_levels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataHero.role_levels)
  return _internal_mutable_role_levels();
}

// optional uint32 damage_min = 24;
inline bool CMsgGameDataHero::_internal_has_damage_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_damage_min() const {
  return _internal_has_damage_min();
}
inline void CMsgGameDataHero::clear_damage_min() {
  _impl_.damage_min_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgGameDataHero::_internal_damage_min() const {
  return _impl_.damage_min_;
}
inline uint32_t CMsgGameDataHero::damage_min() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.damage_min)
  return _internal_damage_min();
}
inline void CMsgGameDataHero::_internal_set_damage_min(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.damage_min_ = value;
}
inline void CMsgGameDataHero::set_damage_min(uint32_t value) {
  _internal_set_damage_min(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.damage_min)
}

// optional uint32 damage_max = 25;
inline bool CMsgGameDataHero::_internal_has_damage_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_damage_max() const {
  return _internal_has_damage_max();
}
inline void CMsgGameDataHero::clear_damage_max() {
  _impl_.damage_max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgGameDataHero::_internal_damage_max() const {
  return _impl_.damage_max_;
}
inline uint32_t CMsgGameDataHero::damage_max() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.damage_max)
  return _internal_damage_max();
}
inline void CMsgGameDataHero::_internal_set_damage_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.damage_max_ = value;
}
inline void CMsgGameDataHero::set_damage_max(uint32_t value) {
  _internal_set_damage_max(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.damage_max)
}

// optional float attack_rate = 26;
inline bool CMsgGameDataHero::_internal_has_attack_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_attack_rate() const {
  return _internal_has_attack_rate();
}
inline void CMsgGameDataHero::clear_attack_rate() {
  _impl_.attack_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float CMsgGameDataHero::_internal_attack_rate() const {
  return _impl_.attack_rate_;
}
inline float CMsgGameDataHero::attack_rate() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.attack_rate)
  return _internal_attack_rate();
}
inline void CMsgGameDataHero::_internal_set_attack_rate(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.attack_rate_ = value;
}
inline void CMsgGameDataHero::set_attack_rate(float value) {
  _internal_set_attack_rate(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.attack_rate)
}

// optional uint32 attack_range = 27;
inline bool CMsgGameDataHero::_internal_has_attack_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_attack_range() const {
  return _internal_has_attack_range();
}
inline void CMsgGameDataHero::clear_attack_range() {
  _impl_.attack_range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgGameDataHero::_internal_attack_range() const {
  return _impl_.attack_range_;
}
inline uint32_t CMsgGameDataHero::attack_range() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.attack_range)
  return _internal_attack_range();
}
inline void CMsgGameDataHero::_internal_set_attack_range(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.attack_range_ = value;
}
inline void CMsgGameDataHero::set_attack_range(uint32_t value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.attack_range)
}

// optional uint32 projectile_speed = 28;
inline bool CMsgGameDataHero::_internal_has_projectile_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_projectile_speed() const {
  return _internal_has_projectile_speed();
}
inline void CMsgGameDataHero::clear_projectile_speed() {
  _impl_.projectile_speed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgGameDataHero::_internal_projectile_speed() const {
  return _impl_.projectile_speed_;
}
inline uint32_t CMsgGameDataHero::projectile_speed() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.projectile_speed)
  return _internal_projectile_speed();
}
inline void CMsgGameDataHero::_internal_set_projectile_speed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.projectile_speed_ = value;
}
inline void CMsgGameDataHero::set_projectile_speed(uint32_t value) {
  _internal_set_projectile_speed(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.projectile_speed)
}

// optional float armor = 29;
inline bool CMsgGameDataHero::_internal_has_armor() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_armor() const {
  return _internal_has_armor();
}
inline void CMsgGameDataHero::clear_armor() {
  _impl_.armor_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float CMsgGameDataHero::_internal_armor() const {
  return _impl_.armor_;
}
inline float CMsgGameDataHero::armor() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.armor)
  return _internal_armor();
}
inline void CMsgGameDataHero::_internal_set_armor(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.armor_ = value;
}
inline void CMsgGameDataHero::set_armor(float value) {
  _internal_set_armor(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.armor)
}

// optional uint32 magic_resistance = 30;
inline bool CMsgGameDataHero::_internal_has_magic_resistance() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_magic_resistance() const {
  return _internal_has_magic_resistance();
}
inline void CMsgGameDataHero::clear_magic_resistance() {
  _impl_.magic_resistance_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgGameDataHero::_internal_magic_resistance() const {
  return _impl_.magic_resistance_;
}
inline uint32_t CMsgGameDataHero::magic_resistance() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.magic_resistance)
  return _internal_magic_resistance();
}
inline void CMsgGameDataHero::_internal_set_magic_resistance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.magic_resistance_ = value;
}
inline void CMsgGameDataHero::set_magic_resistance(uint32_t value) {
  _internal_set_magic_resistance(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.magic_resistance)
}

// optional uint32 movement_speed = 31;
inline bool CMsgGameDataHero::_internal_has_movement_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_movement_speed() const {
  return _internal_has_movement_speed();
}
inline void CMsgGameDataHero::clear_movement_speed() {
  _impl_.movement_speed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgGameDataHero::_internal_movement_speed() const {
  return _impl_.movement_speed_;
}
inline uint32_t CMsgGameDataHero::movement_speed() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.movement_speed)
  return _internal_movement_speed();
}
inline void CMsgGameDataHero::_internal_set_movement_speed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.movement_speed_ = value;
}
inline void CMsgGameDataHero::set_movement_speed(uint32_t value) {
  _internal_set_movement_speed(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.movement_speed)
}

// optional float turn_rate = 32;
inline bool CMsgGameDataHero::_internal_has_turn_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_turn_rate() const {
  return _internal_has_turn_rate();
}
inline void CMsgGameDataHero::clear_turn_rate() {
  _impl_.turn_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float CMsgGameDataHero::_internal_turn_rate() const {
  return _impl_.turn_rate_;
}
inline float CMsgGameDataHero::turn_rate() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.turn_rate)
  return _internal_turn_rate();
}
inline void CMsgGameDataHero::_internal_set_turn_rate(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.turn_rate_ = value;
}
inline void CMsgGameDataHero::set_turn_rate(float value) {
  _internal_set_turn_rate(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.turn_rate)
}

// optional uint32 sight_range_day = 33;
inline bool CMsgGameDataHero::_internal_has_sight_range_day() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_sight_range_day() const {
  return _internal_has_sight_range_day();
}
inline void CMsgGameDataHero::clear_sight_range_day() {
  _impl_.sight_range_day_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgGameDataHero::_internal_sight_range_day() const {
  return _impl_.sight_range_day_;
}
inline uint32_t CMsgGameDataHero::sight_range_day() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.sight_range_day)
  return _internal_sight_range_day();
}
inline void CMsgGameDataHero::_internal_set_sight_range_day(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.sight_range_day_ = value;
}
inline void CMsgGameDataHero::set_sight_range_day(uint32_t value) {
  _internal_set_sight_range_day(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.sight_range_day)
}

// optional uint32 sight_range_night = 34;
inline bool CMsgGameDataHero::_internal_has_sight_range_night() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_sight_range_night() const {
  return _internal_has_sight_range_night();
}
inline void CMsgGameDataHero::clear_sight_range_night() {
  _impl_.sight_range_night_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgGameDataHero::_internal_sight_range_night() const {
  return _impl_.sight_range_night_;
}
inline uint32_t CMsgGameDataHero::sight_range_night() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.sight_range_night)
  return _internal_sight_range_night();
}
inline void CMsgGameDataHero::_internal_set_sight_range_night(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.sight_range_night_ = value;
}
inline void CMsgGameDataHero::set_sight_range_night(uint32_t value) {
  _internal_set_sight_range_night(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.sight_range_night)
}

// optional uint32 max_health = 35;
inline bool CMsgGameDataHero::_internal_has_max_health() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_max_health() const {
  return _internal_has_max_health();
}
inline void CMsgGameDataHero::clear_max_health() {
  _impl_.max_health_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgGameDataHero::_internal_max_health() const {
  return _impl_.max_health_;
}
inline uint32_t CMsgGameDataHero::max_health() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.max_health)
  return _internal_max_health();
}
inline void CMsgGameDataHero::_internal_set_max_health(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.max_health_ = value;
}
inline void CMsgGameDataHero::set_max_health(uint32_t value) {
  _internal_set_max_health(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.max_health)
}

// optional float health_regen = 36;
inline bool CMsgGameDataHero::_internal_has_health_regen() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_health_regen() const {
  return _internal_has_health_regen();
}
inline void CMsgGameDataHero::clear_health_regen() {
  _impl_.health_regen_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float CMsgGameDataHero::_internal_health_regen() const {
  return _impl_.health_regen_;
}
inline float CMsgGameDataHero::health_regen() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.health_regen)
  return _internal_health_regen();
}
inline void CMsgGameDataHero::_internal_set_health_regen(float value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.health_regen_ = value;
}
inline void CMsgGameDataHero::set_health_regen(float value) {
  _internal_set_health_regen(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.health_regen)
}

// optional uint32 max_mana = 37;
inline bool CMsgGameDataHero::_internal_has_max_mana() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_max_mana() const {
  return _internal_has_max_mana();
}
inline void CMsgGameDataHero::clear_max_mana() {
  _impl_.max_mana_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgGameDataHero::_internal_max_mana() const {
  return _impl_.max_mana_;
}
inline uint32_t CMsgGameDataHero::max_mana() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.max_mana)
  return _internal_max_mana();
}
inline void CMsgGameDataHero::_internal_set_max_mana(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.max_mana_ = value;
}
inline void CMsgGameDataHero::set_max_mana(uint32_t value) {
  _internal_set_max_mana(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.max_mana)
}

// optional float mana_regen = 38;
inline bool CMsgGameDataHero::_internal_has_mana_regen() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgGameDataHero::has_mana_regen() const {
  return _internal_has_mana_regen();
}
inline void CMsgGameDataHero::clear_mana_regen() {
  _impl_.mana_regen_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline float CMsgGameDataHero::_internal_mana_regen() const {
  return _impl_.mana_regen_;
}
inline float CMsgGameDataHero::mana_regen() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.mana_regen)
  return _internal_mana_regen();
}
inline void CMsgGameDataHero::_internal_set_mana_regen(float value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.mana_regen_ = value;
}
inline void CMsgGameDataHero::set_mana_regen(float value) {
  _internal_set_mana_regen(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHero.mana_regen)
}

// repeated .CMsgGameDataAbilityOrItem abilities = 40;
inline int CMsgGameDataHero::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int CMsgGameDataHero::abilities_size() const {
  return _internal_abilities_size();
}
inline void CMsgGameDataHero::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataHero::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHero.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
CMsgGameDataHero::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataHero.abilities)
  return &_impl_.abilities_;
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataHero::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataHero::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.abilities)
  return _internal_abilities(index);
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataHero::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataHero::add_abilities() {
  ::CMsgGameDataAbilityOrItem* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:CMsgGameDataHero.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
CMsgGameDataHero::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataHero.abilities)
  return _impl_.abilities_;
}

// repeated .CMsgGameDataAbilityOrItem talents = 41;
inline int CMsgGameDataHero::_internal_talents_size() const {
  return _impl_.talents_.size();
}
inline int CMsgGameDataHero::talents_size() const {
  return _internal_talents_size();
}
inline void CMsgGameDataHero::clear_talents() {
  _impl_.talents_.Clear();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataHero::mutable_talents(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHero.talents)
  return _impl_.talents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
CMsgGameDataHero::mutable_talents() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataHero.talents)
  return &_impl_.talents_;
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataHero::_internal_talents(int index) const {
  return _impl_.talents_.Get(index);
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataHero::talents(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHero.talents)
  return _internal_talents(index);
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataHero::_internal_add_talents() {
  return _impl_.talents_.Add();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataHero::add_talents() {
  ::CMsgGameDataAbilityOrItem* _add = _internal_add_talents();
  // @@protoc_insertion_point(field_add:CMsgGameDataHero.talents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
CMsgGameDataHero::talents() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataHero.talents)
  return _impl_.talents_;
}

// -------------------------------------------------------------------

// CMsgGameDataAbilities

// repeated .CMsgGameDataAbilityOrItem abilities = 1;
inline int CMsgGameDataAbilities::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int CMsgGameDataAbilities::abilities_size() const {
  return _internal_abilities_size();
}
inline void CMsgGameDataAbilities::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataAbilities::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataAbilities.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
CMsgGameDataAbilities::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataAbilities.abilities)
  return &_impl_.abilities_;
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataAbilities::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataAbilities::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataAbilities.abilities)
  return _internal_abilities(index);
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataAbilities::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataAbilities::add_abilities() {
  ::CMsgGameDataAbilityOrItem* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:CMsgGameDataAbilities.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
CMsgGameDataAbilities::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataAbilities.abilities)
  return _impl_.abilities_;
}

// -------------------------------------------------------------------

// CMsgGameDataItems

// repeated .CMsgGameDataAbilityOrItem items = 1;
inline int CMsgGameDataItems::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgGameDataItems::items_size() const {
  return _internal_items_size();
}
inline void CMsgGameDataItems::clear_items() {
  _impl_.items_.Clear();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataItems::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataItems.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >*
CMsgGameDataItems::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataItems.items)
  return &_impl_.items_;
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataItems::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::CMsgGameDataAbilityOrItem& CMsgGameDataItems::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataItems.items)
  return _internal_items(index);
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataItems::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::CMsgGameDataAbilityOrItem* CMsgGameDataItems::add_items() {
  ::CMsgGameDataAbilityOrItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CMsgGameDataItems.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataAbilityOrItem >&
CMsgGameDataItems::items() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataItems.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// CMsgGameDataHeroes

// repeated .CMsgGameDataHero heroes = 1;
inline int CMsgGameDataHeroes::_internal_heroes_size() const {
  return _impl_.heroes_.size();
}
inline int CMsgGameDataHeroes::heroes_size() const {
  return _internal_heroes_size();
}
inline void CMsgGameDataHeroes::clear_heroes() {
  _impl_.heroes_.Clear();
}
inline ::CMsgGameDataHero* CMsgGameDataHeroes::mutable_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHeroes.heroes)
  return _impl_.heroes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHero >*
CMsgGameDataHeroes::mutable_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataHeroes.heroes)
  return &_impl_.heroes_;
}
inline const ::CMsgGameDataHero& CMsgGameDataHeroes::_internal_heroes(int index) const {
  return _impl_.heroes_.Get(index);
}
inline const ::CMsgGameDataHero& CMsgGameDataHeroes::heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroes.heroes)
  return _internal_heroes(index);
}
inline ::CMsgGameDataHero* CMsgGameDataHeroes::_internal_add_heroes() {
  return _impl_.heroes_.Add();
}
inline ::CMsgGameDataHero* CMsgGameDataHeroes::add_heroes() {
  ::CMsgGameDataHero* _add = _internal_add_heroes();
  // @@protoc_insertion_point(field_add:CMsgGameDataHeroes.heroes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHero >&
CMsgGameDataHeroes::heroes() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataHeroes.heroes)
  return _impl_.heroes_;
}

// -------------------------------------------------------------------

// CMsgGameDataHeroList_HeroInfo

// optional uint32 id = 1;
inline bool CMsgGameDataHeroList_HeroInfo::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameDataHeroList_HeroInfo::has_id() const {
  return _internal_has_id();
}
inline void CMsgGameDataHeroList_HeroInfo::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameDataHeroList_HeroInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgGameDataHeroList_HeroInfo::id() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroList.HeroInfo.id)
  return _internal_id();
}
inline void CMsgGameDataHeroList_HeroInfo::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void CMsgGameDataHeroList_HeroInfo::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHeroList.HeroInfo.id)
}

// optional string name = 2;
inline bool CMsgGameDataHeroList_HeroInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameDataHeroList_HeroInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgGameDataHeroList_HeroInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameDataHeroList_HeroInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroList.HeroInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHeroList_HeroInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHeroList.HeroInfo.name)
}
inline std::string* CMsgGameDataHeroList_HeroInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHeroList.HeroInfo.name)
  return _s;
}
inline const std::string& CMsgGameDataHeroList_HeroInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGameDataHeroList_HeroInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHeroList_HeroInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHeroList_HeroInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHeroList.HeroInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHeroList_HeroInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHeroList.HeroInfo.name)
}

// optional string name_loc = 3;
inline bool CMsgGameDataHeroList_HeroInfo::_internal_has_name_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameDataHeroList_HeroInfo::has_name_loc() const {
  return _internal_has_name_loc();
}
inline void CMsgGameDataHeroList_HeroInfo::clear_name_loc() {
  _impl_.name_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameDataHeroList_HeroInfo::name_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroList.HeroInfo.name_loc)
  return _internal_name_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHeroList_HeroInfo::set_name_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHeroList.HeroInfo.name_loc)
}
inline std::string* CMsgGameDataHeroList_HeroInfo::mutable_name_loc() {
  std::string* _s = _internal_mutable_name_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHeroList.HeroInfo.name_loc)
  return _s;
}
inline const std::string& CMsgGameDataHeroList_HeroInfo::_internal_name_loc() const {
  return _impl_.name_loc_.Get();
}
inline void CMsgGameDataHeroList_HeroInfo::_internal_set_name_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHeroList_HeroInfo::_internal_mutable_name_loc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHeroList_HeroInfo::release_name_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHeroList.HeroInfo.name_loc)
  if (!_internal_has_name_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHeroList_HeroInfo::set_allocated_name_loc(std::string* name_loc) {
  if (name_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_loc_.SetAllocated(name_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHeroList.HeroInfo.name_loc)
}

// optional string name_english_loc = 4;
inline bool CMsgGameDataHeroList_HeroInfo::_internal_has_name_english_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameDataHeroList_HeroInfo::has_name_english_loc() const {
  return _internal_has_name_english_loc();
}
inline void CMsgGameDataHeroList_HeroInfo::clear_name_english_loc() {
  _impl_.name_english_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgGameDataHeroList_HeroInfo::name_english_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroList.HeroInfo.name_english_loc)
  return _internal_name_english_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataHeroList_HeroInfo::set_name_english_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.name_english_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataHeroList.HeroInfo.name_english_loc)
}
inline std::string* CMsgGameDataHeroList_HeroInfo::mutable_name_english_loc() {
  std::string* _s = _internal_mutable_name_english_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHeroList.HeroInfo.name_english_loc)
  return _s;
}
inline const std::string& CMsgGameDataHeroList_HeroInfo::_internal_name_english_loc() const {
  return _impl_.name_english_loc_.Get();
}
inline void CMsgGameDataHeroList_HeroInfo::_internal_set_name_english_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_english_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataHeroList_HeroInfo::_internal_mutable_name_english_loc() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_english_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataHeroList_HeroInfo::release_name_english_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataHeroList.HeroInfo.name_english_loc)
  if (!_internal_has_name_english_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.name_english_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_english_loc_.IsDefault()) {
    _impl_.name_english_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataHeroList_HeroInfo::set_allocated_name_english_loc(std::string* name_english_loc) {
  if (name_english_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_english_loc_.SetAllocated(name_english_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_english_loc_.IsDefault()) {
    _impl_.name_english_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataHeroList.HeroInfo.name_english_loc)
}

// optional uint32 primary_attr = 5;
inline bool CMsgGameDataHeroList_HeroInfo::_internal_has_primary_attr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameDataHeroList_HeroInfo::has_primary_attr() const {
  return _internal_has_primary_attr();
}
inline void CMsgGameDataHeroList_HeroInfo::clear_primary_attr() {
  _impl_.primary_attr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameDataHeroList_HeroInfo::_internal_primary_attr() const {
  return _impl_.primary_attr_;
}
inline uint32_t CMsgGameDataHeroList_HeroInfo::primary_attr() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroList.HeroInfo.primary_attr)
  return _internal_primary_attr();
}
inline void CMsgGameDataHeroList_HeroInfo::_internal_set_primary_attr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.primary_attr_ = value;
}
inline void CMsgGameDataHeroList_HeroInfo::set_primary_attr(uint32_t value) {
  _internal_set_primary_attr(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHeroList.HeroInfo.primary_attr)
}

// optional uint32 complexity = 6;
inline bool CMsgGameDataHeroList_HeroInfo::_internal_has_complexity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameDataHeroList_HeroInfo::has_complexity() const {
  return _internal_has_complexity();
}
inline void CMsgGameDataHeroList_HeroInfo::clear_complexity() {
  _impl_.complexity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameDataHeroList_HeroInfo::_internal_complexity() const {
  return _impl_.complexity_;
}
inline uint32_t CMsgGameDataHeroList_HeroInfo::complexity() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroList.HeroInfo.complexity)
  return _internal_complexity();
}
inline void CMsgGameDataHeroList_HeroInfo::_internal_set_complexity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.complexity_ = value;
}
inline void CMsgGameDataHeroList_HeroInfo::set_complexity(uint32_t value) {
  _internal_set_complexity(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataHeroList.HeroInfo.complexity)
}

// -------------------------------------------------------------------

// CMsgGameDataHeroList

// repeated .CMsgGameDataHeroList.HeroInfo heroes = 1;
inline int CMsgGameDataHeroList::_internal_heroes_size() const {
  return _impl_.heroes_.size();
}
inline int CMsgGameDataHeroList::heroes_size() const {
  return _internal_heroes_size();
}
inline void CMsgGameDataHeroList::clear_heroes() {
  _impl_.heroes_.Clear();
}
inline ::CMsgGameDataHeroList_HeroInfo* CMsgGameDataHeroList::mutable_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataHeroList.heroes)
  return _impl_.heroes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHeroList_HeroInfo >*
CMsgGameDataHeroList::mutable_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataHeroList.heroes)
  return &_impl_.heroes_;
}
inline const ::CMsgGameDataHeroList_HeroInfo& CMsgGameDataHeroList::_internal_heroes(int index) const {
  return _impl_.heroes_.Get(index);
}
inline const ::CMsgGameDataHeroList_HeroInfo& CMsgGameDataHeroList::heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataHeroList.heroes)
  return _internal_heroes(index);
}
inline ::CMsgGameDataHeroList_HeroInfo* CMsgGameDataHeroList::_internal_add_heroes() {
  return _impl_.heroes_.Add();
}
inline ::CMsgGameDataHeroList_HeroInfo* CMsgGameDataHeroList::add_heroes() {
  ::CMsgGameDataHeroList_HeroInfo* _add = _internal_add_heroes();
  // @@protoc_insertion_point(field_add:CMsgGameDataHeroList.heroes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataHeroList_HeroInfo >&
CMsgGameDataHeroList::heroes() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataHeroList.heroes)
  return _impl_.heroes_;
}

// -------------------------------------------------------------------

// CMsgGameDataItemAbilityList_ItemAbilityInfo

// optional int32 id = 1 [default = -1];
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::has_id() const {
  return _internal_has_id();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::clear_id() {
  _impl_.id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CMsgGameDataItemAbilityList_ItemAbilityInfo::id() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataItemAbilityList.ItemAbilityInfo.id)
  return _internal_id();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataItemAbilityList.ItemAbilityInfo.id)
}

// optional string name = 2;
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameDataItemAbilityList_ItemAbilityInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataItemAbilityList.ItemAbilityInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataItemAbilityList.ItemAbilityInfo.name)
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataItemAbilityList.ItemAbilityInfo.name)
  return _s;
}
inline const std::string& CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGameDataItemAbilityList.ItemAbilityInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataItemAbilityList.ItemAbilityInfo.name)
}

// optional string name_loc = 3;
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_has_name_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::has_name_loc() const {
  return _internal_has_name_loc();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::clear_name_loc() {
  _impl_.name_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameDataItemAbilityList_ItemAbilityInfo::name_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_loc)
  return _internal_name_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_name_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_loc)
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::mutable_name_loc() {
  std::string* _s = _internal_mutable_name_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_loc)
  return _s;
}
inline const std::string& CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_name_loc() const {
  return _impl_.name_loc_.Get();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_set_name_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_mutable_name_loc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::release_name_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_loc)
  if (!_internal_has_name_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_allocated_name_loc(std::string* name_loc) {
  if (name_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_loc_.SetAllocated(name_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_loc_.IsDefault()) {
    _impl_.name_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_loc)
}

// optional string name_english_loc = 4;
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_has_name_english_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::has_name_english_loc() const {
  return _internal_has_name_english_loc();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::clear_name_english_loc() {
  _impl_.name_english_loc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgGameDataItemAbilityList_ItemAbilityInfo::name_english_loc() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_english_loc)
  return _internal_name_english_loc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_name_english_loc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.name_english_loc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_english_loc)
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::mutable_name_english_loc() {
  std::string* _s = _internal_mutable_name_english_loc();
  // @@protoc_insertion_point(field_mutable:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_english_loc)
  return _s;
}
inline const std::string& CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_name_english_loc() const {
  return _impl_.name_english_loc_.Get();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_set_name_english_loc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_english_loc_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_mutable_name_english_loc() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_english_loc_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameDataItemAbilityList_ItemAbilityInfo::release_name_english_loc() {
  // @@protoc_insertion_point(field_release:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_english_loc)
  if (!_internal_has_name_english_loc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.name_english_loc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_english_loc_.IsDefault()) {
    _impl_.name_english_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_allocated_name_english_loc(std::string* name_english_loc) {
  if (name_english_loc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_english_loc_.SetAllocated(name_english_loc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_english_loc_.IsDefault()) {
    _impl_.name_english_loc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameDataItemAbilityList.ItemAbilityInfo.name_english_loc)
}

// optional int32 neutral_item_tier = 5;
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_has_neutral_item_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameDataItemAbilityList_ItemAbilityInfo::has_neutral_item_tier() const {
  return _internal_has_neutral_item_tier();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::clear_neutral_item_tier() {
  _impl_.neutral_item_tier_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_neutral_item_tier() const {
  return _impl_.neutral_item_tier_;
}
inline int32_t CMsgGameDataItemAbilityList_ItemAbilityInfo::neutral_item_tier() const {
  // @@protoc_insertion_point(field_get:CMsgGameDataItemAbilityList.ItemAbilityInfo.neutral_item_tier)
  return _internal_neutral_item_tier();
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::_internal_set_neutral_item_tier(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.neutral_item_tier_ = value;
}
inline void CMsgGameDataItemAbilityList_ItemAbilityInfo::set_neutral_item_tier(int32_t value) {
  _internal_set_neutral_item_tier(value);
  // @@protoc_insertion_point(field_set:CMsgGameDataItemAbilityList.ItemAbilityInfo.neutral_item_tier)
}

// -------------------------------------------------------------------

// CMsgGameDataItemAbilityList

// repeated .CMsgGameDataItemAbilityList.ItemAbilityInfo itemabilities = 1;
inline int CMsgGameDataItemAbilityList::_internal_itemabilities_size() const {
  return _impl_.itemabilities_.size();
}
inline int CMsgGameDataItemAbilityList::itemabilities_size() const {
  return _internal_itemabilities_size();
}
inline void CMsgGameDataItemAbilityList::clear_itemabilities() {
  _impl_.itemabilities_.Clear();
}
inline ::CMsgGameDataItemAbilityList_ItemAbilityInfo* CMsgGameDataItemAbilityList::mutable_itemabilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameDataItemAbilityList.itemabilities)
  return _impl_.itemabilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataItemAbilityList_ItemAbilityInfo >*
CMsgGameDataItemAbilityList::mutable_itemabilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameDataItemAbilityList.itemabilities)
  return &_impl_.itemabilities_;
}
inline const ::CMsgGameDataItemAbilityList_ItemAbilityInfo& CMsgGameDataItemAbilityList::_internal_itemabilities(int index) const {
  return _impl_.itemabilities_.Get(index);
}
inline const ::CMsgGameDataItemAbilityList_ItemAbilityInfo& CMsgGameDataItemAbilityList::itemabilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameDataItemAbilityList.itemabilities)
  return _internal_itemabilities(index);
}
inline ::CMsgGameDataItemAbilityList_ItemAbilityInfo* CMsgGameDataItemAbilityList::_internal_add_itemabilities() {
  return _impl_.itemabilities_.Add();
}
inline ::CMsgGameDataItemAbilityList_ItemAbilityInfo* CMsgGameDataItemAbilityList::add_itemabilities() {
  ::CMsgGameDataItemAbilityList_ItemAbilityInfo* _add = _internal_add_itemabilities();
  // @@protoc_insertion_point(field_add:CMsgGameDataItemAbilityList.itemabilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameDataItemAbilityList_ItemAbilityInfo >&
CMsgGameDataItemAbilityList::itemabilities() const {
  // @@protoc_insertion_point(field_list:CMsgGameDataItemAbilityList.itemabilities)
  return _impl_.itemabilities_;
}

// -------------------------------------------------------------------

// CMsgLobbyAbilityDraftData

// optional bool shuffle_draft_order = 1;
inline bool CMsgLobbyAbilityDraftData::_internal_has_shuffle_draft_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyAbilityDraftData::has_shuffle_draft_order() const {
  return _internal_has_shuffle_draft_order();
}
inline void CMsgLobbyAbilityDraftData::clear_shuffle_draft_order() {
  _impl_.shuffle_draft_order_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgLobbyAbilityDraftData::_internal_shuffle_draft_order() const {
  return _impl_.shuffle_draft_order_;
}
inline bool CMsgLobbyAbilityDraftData::shuffle_draft_order() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyAbilityDraftData.shuffle_draft_order)
  return _internal_shuffle_draft_order();
}
inline void CMsgLobbyAbilityDraftData::_internal_set_shuffle_draft_order(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shuffle_draft_order_ = value;
}
inline void CMsgLobbyAbilityDraftData::set_shuffle_draft_order(bool value) {
  _internal_set_shuffle_draft_order(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyAbilityDraftData.shuffle_draft_order)
}

// -------------------------------------------------------------------

// CSOEconItemDropRateBonus

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSOEconItemDropRateBonus::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOEconItemDropRateBonus::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSOEconItemDropRateBonus::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CSOEconItemDropRateBonus::account_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.account_id)
  return _internal_account_id();
}
inline void CSOEconItemDropRateBonus::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CSOEconItemDropRateBonus::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.account_id)
}

// optional fixed32 expiration_date = 2;
inline bool CSOEconItemDropRateBonus::_internal_has_expiration_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_expiration_date() const {
  return _internal_has_expiration_date();
}
inline void CSOEconItemDropRateBonus::clear_expiration_date() {
  _impl_.expiration_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSOEconItemDropRateBonus::_internal_expiration_date() const {
  return _impl_.expiration_date_;
}
inline uint32_t CSOEconItemDropRateBonus::expiration_date() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.expiration_date)
  return _internal_expiration_date();
}
inline void CSOEconItemDropRateBonus::_internal_set_expiration_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.expiration_date_ = value;
}
inline void CSOEconItemDropRateBonus::set_expiration_date(uint32_t value) {
  _internal_set_expiration_date(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.expiration_date)
}

// optional float bonus = 3 [(.key_field) = true];
inline bool CSOEconItemDropRateBonus::_internal_has_bonus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_bonus() const {
  return _internal_has_bonus();
}
inline void CSOEconItemDropRateBonus::clear_bonus() {
  _impl_.bonus_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CSOEconItemDropRateBonus::_internal_bonus() const {
  return _impl_.bonus_;
}
inline float CSOEconItemDropRateBonus::bonus() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.bonus)
  return _internal_bonus();
}
inline void CSOEconItemDropRateBonus::_internal_set_bonus(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bonus_ = value;
}
inline void CSOEconItemDropRateBonus::set_bonus(float value) {
  _internal_set_bonus(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.bonus)
}

// optional uint32 bonus_count = 4;
inline bool CSOEconItemDropRateBonus::_internal_has_bonus_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_bonus_count() const {
  return _internal_has_bonus_count();
}
inline void CSOEconItemDropRateBonus::clear_bonus_count() {
  _impl_.bonus_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSOEconItemDropRateBonus::_internal_bonus_count() const {
  return _impl_.bonus_count_;
}
inline uint32_t CSOEconItemDropRateBonus::bonus_count() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.bonus_count)
  return _internal_bonus_count();
}
inline void CSOEconItemDropRateBonus::_internal_set_bonus_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bonus_count_ = value;
}
inline void CSOEconItemDropRateBonus::set_bonus_count(uint32_t value) {
  _internal_set_bonus_count(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.bonus_count)
}

// optional uint64 item_id = 5;
inline bool CSOEconItemDropRateBonus::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_item_id() const {
  return _internal_has_item_id();
}
inline void CSOEconItemDropRateBonus::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CSOEconItemDropRateBonus::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CSOEconItemDropRateBonus::item_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.item_id)
  return _internal_item_id();
}
inline void CSOEconItemDropRateBonus::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.item_id_ = value;
}
inline void CSOEconItemDropRateBonus::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.item_id)
}

// optional uint32 def_index = 6;
inline bool CSOEconItemDropRateBonus::_internal_has_def_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_def_index() const {
  return _internal_has_def_index();
}
inline void CSOEconItemDropRateBonus::clear_def_index() {
  _impl_.def_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CSOEconItemDropRateBonus::_internal_def_index() const {
  return _impl_.def_index_;
}
inline uint32_t CSOEconItemDropRateBonus::def_index() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.def_index)
  return _internal_def_index();
}
inline void CSOEconItemDropRateBonus::_internal_set_def_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.def_index_ = value;
}
inline void CSOEconItemDropRateBonus::set_def_index(uint32_t value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.def_index)
}

// optional uint32 seconds_left = 7;
inline bool CSOEconItemDropRateBonus::_internal_has_seconds_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_seconds_left() const {
  return _internal_has_seconds_left();
}
inline void CSOEconItemDropRateBonus::clear_seconds_left() {
  _impl_.seconds_left_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSOEconItemDropRateBonus::_internal_seconds_left() const {
  return _impl_.seconds_left_;
}
inline uint32_t CSOEconItemDropRateBonus::seconds_left() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.seconds_left)
  return _internal_seconds_left();
}
inline void CSOEconItemDropRateBonus::_internal_set_seconds_left(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.seconds_left_ = value;
}
inline void CSOEconItemDropRateBonus::set_seconds_left(uint32_t value) {
  _internal_set_seconds_left(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.seconds_left)
}

// optional uint32 booster_type = 8 [(.key_field) = true];
inline bool CSOEconItemDropRateBonus::_internal_has_booster_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOEconItemDropRateBonus::has_booster_type() const {
  return _internal_has_booster_type();
}
inline void CSOEconItemDropRateBonus::clear_booster_type() {
  _impl_.booster_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSOEconItemDropRateBonus::_internal_booster_type() const {
  return _impl_.booster_type_;
}
inline uint32_t CSOEconItemDropRateBonus::booster_type() const {
  // @@protoc_insertion_point(field_get:CSOEconItemDropRateBonus.booster_type)
  return _internal_booster_type();
}
inline void CSOEconItemDropRateBonus::_internal_set_booster_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.booster_type_ = value;
}
inline void CSOEconItemDropRateBonus::set_booster_type(uint32_t value) {
  _internal_set_booster_type(value);
  // @@protoc_insertion_point(field_set:CSOEconItemDropRateBonus.booster_type)
}

// -------------------------------------------------------------------

// CSOEconItemTournamentPassport

// optional uint32 account_id = 1;
inline bool CSOEconItemTournamentPassport::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOEconItemTournamentPassport::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSOEconItemTournamentPassport::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CSOEconItemTournamentPassport::account_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.account_id)
  return _internal_account_id();
}
inline void CSOEconItemTournamentPassport::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CSOEconItemTournamentPassport::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.account_id)
}

// optional uint32 league_id = 2;
inline bool CSOEconItemTournamentPassport::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_league_id() const {
  return _internal_has_league_id();
}
inline void CSOEconItemTournamentPassport::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSOEconItemTournamentPassport::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CSOEconItemTournamentPassport::league_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.league_id)
  return _internal_league_id();
}
inline void CSOEconItemTournamentPassport::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.league_id_ = value;
}
inline void CSOEconItemTournamentPassport::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.league_id)
}

// optional uint64 item_id = 3;
inline bool CSOEconItemTournamentPassport::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_item_id() const {
  return _internal_has_item_id();
}
inline void CSOEconItemTournamentPassport::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CSOEconItemTournamentPassport::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CSOEconItemTournamentPassport::item_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.item_id)
  return _internal_item_id();
}
inline void CSOEconItemTournamentPassport::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.item_id_ = value;
}
inline void CSOEconItemTournamentPassport::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.item_id)
}

// optional uint32 original_purchaser_id = 4;
inline bool CSOEconItemTournamentPassport::_internal_has_original_purchaser_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_original_purchaser_id() const {
  return _internal_has_original_purchaser_id();
}
inline void CSOEconItemTournamentPassport::clear_original_purchaser_id() {
  _impl_.original_purchaser_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSOEconItemTournamentPassport::_internal_original_purchaser_id() const {
  return _impl_.original_purchaser_id_;
}
inline uint32_t CSOEconItemTournamentPassport::original_purchaser_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.original_purchaser_id)
  return _internal_original_purchaser_id();
}
inline void CSOEconItemTournamentPassport::_internal_set_original_purchaser_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.original_purchaser_id_ = value;
}
inline void CSOEconItemTournamentPassport::set_original_purchaser_id(uint32_t value) {
  _internal_set_original_purchaser_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.original_purchaser_id)
}

// optional uint32 passports_bought = 5;
inline bool CSOEconItemTournamentPassport::_internal_has_passports_bought() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_passports_bought() const {
  return _internal_has_passports_bought();
}
inline void CSOEconItemTournamentPassport::clear_passports_bought() {
  _impl_.passports_bought_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CSOEconItemTournamentPassport::_internal_passports_bought() const {
  return _impl_.passports_bought_;
}
inline uint32_t CSOEconItemTournamentPassport::passports_bought() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.passports_bought)
  return _internal_passports_bought();
}
inline void CSOEconItemTournamentPassport::_internal_set_passports_bought(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.passports_bought_ = value;
}
inline void CSOEconItemTournamentPassport::set_passports_bought(uint32_t value) {
  _internal_set_passports_bought(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.passports_bought)
}

// optional uint32 version = 6;
inline bool CSOEconItemTournamentPassport::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_version() const {
  return _internal_has_version();
}
inline void CSOEconItemTournamentPassport::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CSOEconItemTournamentPassport::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CSOEconItemTournamentPassport::version() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.version)
  return _internal_version();
}
inline void CSOEconItemTournamentPassport::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.version_ = value;
}
inline void CSOEconItemTournamentPassport::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.version)
}

// optional uint32 def_index = 7;
inline bool CSOEconItemTournamentPassport::_internal_has_def_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_def_index() const {
  return _internal_has_def_index();
}
inline void CSOEconItemTournamentPassport::clear_def_index() {
  _impl_.def_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSOEconItemTournamentPassport::_internal_def_index() const {
  return _impl_.def_index_;
}
inline uint32_t CSOEconItemTournamentPassport::def_index() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.def_index)
  return _internal_def_index();
}
inline void CSOEconItemTournamentPassport::_internal_set_def_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.def_index_ = value;
}
inline void CSOEconItemTournamentPassport::set_def_index(uint32_t value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.def_index)
}

// optional uint32 reward_flags = 8;
inline bool CSOEconItemTournamentPassport::_internal_has_reward_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOEconItemTournamentPassport::has_reward_flags() const {
  return _internal_has_reward_flags();
}
inline void CSOEconItemTournamentPassport::clear_reward_flags() {
  _impl_.reward_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSOEconItemTournamentPassport::_internal_reward_flags() const {
  return _impl_.reward_flags_;
}
inline uint32_t CSOEconItemTournamentPassport::reward_flags() const {
  // @@protoc_insertion_point(field_get:CSOEconItemTournamentPassport.reward_flags)
  return _internal_reward_flags();
}
inline void CSOEconItemTournamentPassport::_internal_set_reward_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.reward_flags_ = value;
}
inline void CSOEconItemTournamentPassport::set_reward_flags(uint32_t value) {
  _internal_set_reward_flags(value);
  // @@protoc_insertion_point(field_set:CSOEconItemTournamentPassport.reward_flags)
}

// -------------------------------------------------------------------

// CMsgStickerbookSticker

// optional uint32 item_def_id = 1;
inline bool CMsgStickerbookSticker::_internal_has_item_def_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_item_def_id() const {
  return _internal_has_item_def_id();
}
inline void CMsgStickerbookSticker::clear_item_def_id() {
  _impl_.item_def_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgStickerbookSticker::_internal_item_def_id() const {
  return _impl_.item_def_id_;
}
inline uint32_t CMsgStickerbookSticker::item_def_id() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.item_def_id)
  return _internal_item_def_id();
}
inline void CMsgStickerbookSticker::_internal_set_item_def_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_def_id_ = value;
}
inline void CMsgStickerbookSticker::set_item_def_id(uint32_t value) {
  _internal_set_item_def_id(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.item_def_id)
}

// optional uint32 sticker_num = 2;
inline bool CMsgStickerbookSticker::_internal_has_sticker_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_sticker_num() const {
  return _internal_has_sticker_num();
}
inline void CMsgStickerbookSticker::clear_sticker_num() {
  _impl_.sticker_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgStickerbookSticker::_internal_sticker_num() const {
  return _impl_.sticker_num_;
}
inline uint32_t CMsgStickerbookSticker::sticker_num() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.sticker_num)
  return _internal_sticker_num();
}
inline void CMsgStickerbookSticker::_internal_set_sticker_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sticker_num_ = value;
}
inline void CMsgStickerbookSticker::set_sticker_num(uint32_t value) {
  _internal_set_sticker_num(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.sticker_num)
}

// optional uint32 quality = 3;
inline bool CMsgStickerbookSticker::_internal_has_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_quality() const {
  return _internal_has_quality();
}
inline void CMsgStickerbookSticker::clear_quality() {
  _impl_.quality_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgStickerbookSticker::_internal_quality() const {
  return _impl_.quality_;
}
inline uint32_t CMsgStickerbookSticker::quality() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.quality)
  return _internal_quality();
}
inline void CMsgStickerbookSticker::_internal_set_quality(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.quality_ = value;
}
inline void CMsgStickerbookSticker::set_quality(uint32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.quality)
}

// optional float position_x = 4;
inline bool CMsgStickerbookSticker::_internal_has_position_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_position_x() const {
  return _internal_has_position_x();
}
inline void CMsgStickerbookSticker::clear_position_x() {
  _impl_.position_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgStickerbookSticker::_internal_position_x() const {
  return _impl_.position_x_;
}
inline float CMsgStickerbookSticker::position_x() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.position_x)
  return _internal_position_x();
}
inline void CMsgStickerbookSticker::_internal_set_position_x(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.position_x_ = value;
}
inline void CMsgStickerbookSticker::set_position_x(float value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.position_x)
}

// optional float position_y = 5;
inline bool CMsgStickerbookSticker::_internal_has_position_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_position_y() const {
  return _internal_has_position_y();
}
inline void CMsgStickerbookSticker::clear_position_y() {
  _impl_.position_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgStickerbookSticker::_internal_position_y() const {
  return _impl_.position_y_;
}
inline float CMsgStickerbookSticker::position_y() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.position_y)
  return _internal_position_y();
}
inline void CMsgStickerbookSticker::_internal_set_position_y(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.position_y_ = value;
}
inline void CMsgStickerbookSticker::set_position_y(float value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.position_y)
}

// optional float position_z = 8;
inline bool CMsgStickerbookSticker::_internal_has_position_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_position_z() const {
  return _internal_has_position_z();
}
inline void CMsgStickerbookSticker::clear_position_z() {
  _impl_.position_z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CMsgStickerbookSticker::_internal_position_z() const {
  return _impl_.position_z_;
}
inline float CMsgStickerbookSticker::position_z() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.position_z)
  return _internal_position_z();
}
inline void CMsgStickerbookSticker::_internal_set_position_z(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.position_z_ = value;
}
inline void CMsgStickerbookSticker::set_position_z(float value) {
  _internal_set_position_z(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.position_z)
}

// optional float rotation = 6;
inline bool CMsgStickerbookSticker::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_rotation() const {
  return _internal_has_rotation();
}
inline void CMsgStickerbookSticker::clear_rotation() {
  _impl_.rotation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgStickerbookSticker::_internal_rotation() const {
  return _impl_.rotation_;
}
inline float CMsgStickerbookSticker::rotation() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.rotation)
  return _internal_rotation();
}
inline void CMsgStickerbookSticker::_internal_set_rotation(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rotation_ = value;
}
inline void CMsgStickerbookSticker::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.rotation)
}

// optional float scale = 7;
inline bool CMsgStickerbookSticker::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_scale() const {
  return _internal_has_scale();
}
inline void CMsgStickerbookSticker::clear_scale() {
  _impl_.scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgStickerbookSticker::_internal_scale() const {
  return _impl_.scale_;
}
inline float CMsgStickerbookSticker::scale() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.scale)
  return _internal_scale();
}
inline void CMsgStickerbookSticker::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.scale_ = value;
}
inline void CMsgStickerbookSticker::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.scale)
}

// optional uint64 source_item_id = 9;
inline bool CMsgStickerbookSticker::_internal_has_source_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_source_item_id() const {
  return _internal_has_source_item_id();
}
inline void CMsgStickerbookSticker::clear_source_item_id() {
  _impl_.source_item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CMsgStickerbookSticker::_internal_source_item_id() const {
  return _impl_.source_item_id_;
}
inline uint64_t CMsgStickerbookSticker::source_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.source_item_id)
  return _internal_source_item_id();
}
inline void CMsgStickerbookSticker::_internal_set_source_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.source_item_id_ = value;
}
inline void CMsgStickerbookSticker::set_source_item_id(uint64_t value) {
  _internal_set_source_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.source_item_id)
}

// optional uint32 depth_bias = 10;
inline bool CMsgStickerbookSticker::_internal_has_depth_bias() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgStickerbookSticker::has_depth_bias() const {
  return _internal_has_depth_bias();
}
inline void CMsgStickerbookSticker::clear_depth_bias() {
  _impl_.depth_bias_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgStickerbookSticker::_internal_depth_bias() const {
  return _impl_.depth_bias_;
}
inline uint32_t CMsgStickerbookSticker::depth_bias() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookSticker.depth_bias)
  return _internal_depth_bias();
}
inline void CMsgStickerbookSticker::_internal_set_depth_bias(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.depth_bias_ = value;
}
inline void CMsgStickerbookSticker::set_depth_bias(uint32_t value) {
  _internal_set_depth_bias(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookSticker.depth_bias)
}

// -------------------------------------------------------------------

// CMsgStickerbookPage

// optional uint32 page_num = 1;
inline bool CMsgStickerbookPage::_internal_has_page_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStickerbookPage::has_page_num() const {
  return _internal_has_page_num();
}
inline void CMsgStickerbookPage::clear_page_num() {
  _impl_.page_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgStickerbookPage::_internal_page_num() const {
  return _impl_.page_num_;
}
inline uint32_t CMsgStickerbookPage::page_num() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookPage.page_num)
  return _internal_page_num();
}
inline void CMsgStickerbookPage::_internal_set_page_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.page_num_ = value;
}
inline void CMsgStickerbookPage::set_page_num(uint32_t value) {
  _internal_set_page_num(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookPage.page_num)
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CMsgStickerbookPage::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStickerbookPage::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgStickerbookPage::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CMsgStickerbookPage::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgStickerbookPage::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookPage.event_id)
  return _internal_event_id();
}
inline void CMsgStickerbookPage::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CMsgStickerbookPage::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookPage.event_id)
}

// optional uint32 team_id = 3;
inline bool CMsgStickerbookPage::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStickerbookPage::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgStickerbookPage::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgStickerbookPage::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgStickerbookPage::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookPage.team_id)
  return _internal_team_id();
}
inline void CMsgStickerbookPage::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_id_ = value;
}
inline void CMsgStickerbookPage::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookPage.team_id)
}

// repeated .CMsgStickerbookSticker stickers = 4;
inline int CMsgStickerbookPage::_internal_stickers_size() const {
  return _impl_.stickers_.size();
}
inline int CMsgStickerbookPage::stickers_size() const {
  return _internal_stickers_size();
}
inline void CMsgStickerbookPage::clear_stickers() {
  _impl_.stickers_.Clear();
}
inline ::CMsgStickerbookSticker* CMsgStickerbookPage::mutable_stickers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgStickerbookPage.stickers)
  return _impl_.stickers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookSticker >*
CMsgStickerbookPage::mutable_stickers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStickerbookPage.stickers)
  return &_impl_.stickers_;
}
inline const ::CMsgStickerbookSticker& CMsgStickerbookPage::_internal_stickers(int index) const {
  return _impl_.stickers_.Get(index);
}
inline const ::CMsgStickerbookSticker& CMsgStickerbookPage::stickers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookPage.stickers)
  return _internal_stickers(index);
}
inline ::CMsgStickerbookSticker* CMsgStickerbookPage::_internal_add_stickers() {
  return _impl_.stickers_.Add();
}
inline ::CMsgStickerbookSticker* CMsgStickerbookPage::add_stickers() {
  ::CMsgStickerbookSticker* _add = _internal_add_stickers();
  // @@protoc_insertion_point(field_add:CMsgStickerbookPage.stickers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookSticker >&
CMsgStickerbookPage::stickers() const {
  // @@protoc_insertion_point(field_list:CMsgStickerbookPage.stickers)
  return _impl_.stickers_;
}

// optional .EStickerbookPageType page_type = 5 [default = STICKER_PAGE_GENERIC];
inline bool CMsgStickerbookPage::_internal_has_page_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStickerbookPage::has_page_type() const {
  return _internal_has_page_type();
}
inline void CMsgStickerbookPage::clear_page_type() {
  _impl_.page_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EStickerbookPageType CMsgStickerbookPage::_internal_page_type() const {
  return static_cast< ::EStickerbookPageType >(_impl_.page_type_);
}
inline ::EStickerbookPageType CMsgStickerbookPage::page_type() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookPage.page_type)
  return _internal_page_type();
}
inline void CMsgStickerbookPage::_internal_set_page_type(::EStickerbookPageType value) {
  assert(::EStickerbookPageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.page_type_ = value;
}
inline void CMsgStickerbookPage::set_page_type(::EStickerbookPageType value) {
  _internal_set_page_type(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookPage.page_type)
}

// -------------------------------------------------------------------

// CMsgStickerbookTeamPageOrderSequence

// repeated uint32 page_numbers = 1;
inline int CMsgStickerbookTeamPageOrderSequence::_internal_page_numbers_size() const {
  return _impl_.page_numbers_.size();
}
inline int CMsgStickerbookTeamPageOrderSequence::page_numbers_size() const {
  return _internal_page_numbers_size();
}
inline void CMsgStickerbookTeamPageOrderSequence::clear_page_numbers() {
  _impl_.page_numbers_.Clear();
}
inline uint32_t CMsgStickerbookTeamPageOrderSequence::_internal_page_numbers(int index) const {
  return _impl_.page_numbers_.Get(index);
}
inline uint32_t CMsgStickerbookTeamPageOrderSequence::page_numbers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStickerbookTeamPageOrderSequence.page_numbers)
  return _internal_page_numbers(index);
}
inline void CMsgStickerbookTeamPageOrderSequence::set_page_numbers(int index, uint32_t value) {
  _impl_.page_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgStickerbookTeamPageOrderSequence.page_numbers)
}
inline void CMsgStickerbookTeamPageOrderSequence::_internal_add_page_numbers(uint32_t value) {
  _impl_.page_numbers_.Add(value);
}
inline void CMsgStickerbookTeamPageOrderSequence::add_page_numbers(uint32_t value) {
  _internal_add_page_numbers(value);
  // @@protoc_insertion_point(field_add:CMsgStickerbookTeamPageOrderSequence.page_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgStickerbookTeamPageOrderSequence::_internal_page_numbers() const {
  return _impl_.page_numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgStickerbookTeamPageOrderSequence::page_numbers() const {
  // @@protoc_insertion_point(field_list:CMsgStickerbookTeamPageOrderSequence.page_numbers)
  return _internal_page_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgStickerbookTeamPageOrderSequence::_internal_mutable_page_numbers() {
  return &_impl_.page_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgStickerbookTeamPageOrderSequence::mutable_page_numbers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStickerbookTeamPageOrderSequence.page_numbers)
  return _internal_mutable_page_numbers();
}

// -------------------------------------------------------------------

// CMsgStickerbook

// repeated .CMsgStickerbookPage pages = 1;
inline int CMsgStickerbook::_internal_pages_size() const {
  return _impl_.pages_.size();
}
inline int CMsgStickerbook::pages_size() const {
  return _internal_pages_size();
}
inline void CMsgStickerbook::clear_pages() {
  _impl_.pages_.Clear();
}
inline ::CMsgStickerbookPage* CMsgStickerbook::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgStickerbook.pages)
  return _impl_.pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookPage >*
CMsgStickerbook::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStickerbook.pages)
  return &_impl_.pages_;
}
inline const ::CMsgStickerbookPage& CMsgStickerbook::_internal_pages(int index) const {
  return _impl_.pages_.Get(index);
}
inline const ::CMsgStickerbookPage& CMsgStickerbook::pages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStickerbook.pages)
  return _internal_pages(index);
}
inline ::CMsgStickerbookPage* CMsgStickerbook::_internal_add_pages() {
  return _impl_.pages_.Add();
}
inline ::CMsgStickerbookPage* CMsgStickerbook::add_pages() {
  ::CMsgStickerbookPage* _add = _internal_add_pages();
  // @@protoc_insertion_point(field_add:CMsgStickerbook.pages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerbookPage >&
CMsgStickerbook::pages() const {
  // @@protoc_insertion_point(field_list:CMsgStickerbook.pages)
  return _impl_.pages_;
}

// optional .CMsgStickerbookTeamPageOrderSequence team_page_order_sequence = 2;
inline bool CMsgStickerbook::_internal_has_team_page_order_sequence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_page_order_sequence_ != nullptr);
  return value;
}
inline bool CMsgStickerbook::has_team_page_order_sequence() const {
  return _internal_has_team_page_order_sequence();
}
inline void CMsgStickerbook::clear_team_page_order_sequence() {
  if (_impl_.team_page_order_sequence_ != nullptr) _impl_.team_page_order_sequence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgStickerbookTeamPageOrderSequence& CMsgStickerbook::_internal_team_page_order_sequence() const {
  const ::CMsgStickerbookTeamPageOrderSequence* p = _impl_.team_page_order_sequence_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgStickerbookTeamPageOrderSequence&>(
      ::_CMsgStickerbookTeamPageOrderSequence_default_instance_);
}
inline const ::CMsgStickerbookTeamPageOrderSequence& CMsgStickerbook::team_page_order_sequence() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbook.team_page_order_sequence)
  return _internal_team_page_order_sequence();
}
inline void CMsgStickerbook::unsafe_arena_set_allocated_team_page_order_sequence(
    ::CMsgStickerbookTeamPageOrderSequence* team_page_order_sequence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_page_order_sequence_);
  }
  _impl_.team_page_order_sequence_ = team_page_order_sequence;
  if (team_page_order_sequence) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgStickerbook.team_page_order_sequence)
}
inline ::CMsgStickerbookTeamPageOrderSequence* CMsgStickerbook::release_team_page_order_sequence() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgStickerbookTeamPageOrderSequence* temp = _impl_.team_page_order_sequence_;
  _impl_.team_page_order_sequence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgStickerbookTeamPageOrderSequence* CMsgStickerbook::unsafe_arena_release_team_page_order_sequence() {
  // @@protoc_insertion_point(field_release:CMsgStickerbook.team_page_order_sequence)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgStickerbookTeamPageOrderSequence* temp = _impl_.team_page_order_sequence_;
  _impl_.team_page_order_sequence_ = nullptr;
  return temp;
}
inline ::CMsgStickerbookTeamPageOrderSequence* CMsgStickerbook::_internal_mutable_team_page_order_sequence() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.team_page_order_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgStickerbookTeamPageOrderSequence>(GetArenaForAllocation());
    _impl_.team_page_order_sequence_ = p;
  }
  return _impl_.team_page_order_sequence_;
}
inline ::CMsgStickerbookTeamPageOrderSequence* CMsgStickerbook::mutable_team_page_order_sequence() {
  ::CMsgStickerbookTeamPageOrderSequence* _msg = _internal_mutable_team_page_order_sequence();
  // @@protoc_insertion_point(field_mutable:CMsgStickerbook.team_page_order_sequence)
  return _msg;
}
inline void CMsgStickerbook::set_allocated_team_page_order_sequence(::CMsgStickerbookTeamPageOrderSequence* team_page_order_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_page_order_sequence_;
  }
  if (team_page_order_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_page_order_sequence);
    if (message_arena != submessage_arena) {
      team_page_order_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_page_order_sequence, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_page_order_sequence_ = team_page_order_sequence;
  // @@protoc_insertion_point(field_set_allocated:CMsgStickerbook.team_page_order_sequence)
}

// optional uint32 favorite_page_num = 3;
inline bool CMsgStickerbook::_internal_has_favorite_page_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStickerbook::has_favorite_page_num() const {
  return _internal_has_favorite_page_num();
}
inline void CMsgStickerbook::clear_favorite_page_num() {
  _impl_.favorite_page_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgStickerbook::_internal_favorite_page_num() const {
  return _impl_.favorite_page_num_;
}
inline uint32_t CMsgStickerbook::favorite_page_num() const {
  // @@protoc_insertion_point(field_get:CMsgStickerbook.favorite_page_num)
  return _internal_favorite_page_num();
}
inline void CMsgStickerbook::_internal_set_favorite_page_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.favorite_page_num_ = value;
}
inline void CMsgStickerbook::set_favorite_page_num(uint32_t value) {
  _internal_set_favorite_page_num(value);
  // @@protoc_insertion_point(field_set:CMsgStickerbook.favorite_page_num)
}

// -------------------------------------------------------------------

// CMsgStickerHero

// optional uint32 hero_id = 1;
inline bool CMsgStickerHero::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStickerHero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgStickerHero::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgStickerHero::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgStickerHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgStickerHero.hero_id)
  return _internal_hero_id();
}
inline void CMsgStickerHero::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgStickerHero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgStickerHero.hero_id)
}

// optional uint32 item_def_id = 2;
inline bool CMsgStickerHero::_internal_has_item_def_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStickerHero::has_item_def_id() const {
  return _internal_has_item_def_id();
}
inline void CMsgStickerHero::clear_item_def_id() {
  _impl_.item_def_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgStickerHero::_internal_item_def_id() const {
  return _impl_.item_def_id_;
}
inline uint32_t CMsgStickerHero::item_def_id() const {
  // @@protoc_insertion_point(field_get:CMsgStickerHero.item_def_id)
  return _internal_item_def_id();
}
inline void CMsgStickerHero::_internal_set_item_def_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_def_id_ = value;
}
inline void CMsgStickerHero::set_item_def_id(uint32_t value) {
  _internal_set_item_def_id(value);
  // @@protoc_insertion_point(field_set:CMsgStickerHero.item_def_id)
}

// optional uint32 quality = 3;
inline bool CMsgStickerHero::_internal_has_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStickerHero::has_quality() const {
  return _internal_has_quality();
}
inline void CMsgStickerHero::clear_quality() {
  _impl_.quality_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgStickerHero::_internal_quality() const {
  return _impl_.quality_;
}
inline uint32_t CMsgStickerHero::quality() const {
  // @@protoc_insertion_point(field_get:CMsgStickerHero.quality)
  return _internal_quality();
}
inline void CMsgStickerHero::_internal_set_quality(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.quality_ = value;
}
inline void CMsgStickerHero::set_quality(uint32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:CMsgStickerHero.quality)
}

// optional uint64 source_item_id = 4;
inline bool CMsgStickerHero::_internal_has_source_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStickerHero::has_source_item_id() const {
  return _internal_has_source_item_id();
}
inline void CMsgStickerHero::clear_source_item_id() {
  _impl_.source_item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgStickerHero::_internal_source_item_id() const {
  return _impl_.source_item_id_;
}
inline uint64_t CMsgStickerHero::source_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgStickerHero.source_item_id)
  return _internal_source_item_id();
}
inline void CMsgStickerHero::_internal_set_source_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_item_id_ = value;
}
inline void CMsgStickerHero::set_source_item_id(uint64_t value) {
  _internal_set_source_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgStickerHero.source_item_id)
}

// -------------------------------------------------------------------

// CMsgStickerHeroes

// repeated .CMsgStickerHero heroes = 1;
inline int CMsgStickerHeroes::_internal_heroes_size() const {
  return _impl_.heroes_.size();
}
inline int CMsgStickerHeroes::heroes_size() const {
  return _internal_heroes_size();
}
inline void CMsgStickerHeroes::clear_heroes() {
  _impl_.heroes_.Clear();
}
inline ::CMsgStickerHero* CMsgStickerHeroes::mutable_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgStickerHeroes.heroes)
  return _impl_.heroes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerHero >*
CMsgStickerHeroes::mutable_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStickerHeroes.heroes)
  return &_impl_.heroes_;
}
inline const ::CMsgStickerHero& CMsgStickerHeroes::_internal_heroes(int index) const {
  return _impl_.heroes_.Get(index);
}
inline const ::CMsgStickerHero& CMsgStickerHeroes::heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStickerHeroes.heroes)
  return _internal_heroes(index);
}
inline ::CMsgStickerHero* CMsgStickerHeroes::_internal_add_heroes() {
  return _impl_.heroes_.Add();
}
inline ::CMsgStickerHero* CMsgStickerHeroes::add_heroes() {
  ::CMsgStickerHero* _add = _internal_add_heroes();
  // @@protoc_insertion_point(field_add:CMsgStickerHeroes.heroes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStickerHero >&
CMsgStickerHeroes::heroes() const {
  // @@protoc_insertion_point(field_list:CMsgStickerHeroes.heroes)
  return _impl_.heroes_;
}

// -------------------------------------------------------------------

// CMsgHeroRoleStats

// optional uint32 lane_selection_flags = 1;
inline bool CMsgHeroRoleStats::_internal_has_lane_selection_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHeroRoleStats::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CMsgHeroRoleStats::clear_lane_selection_flags() {
  _impl_.lane_selection_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHeroRoleStats::_internal_lane_selection_flags() const {
  return _impl_.lane_selection_flags_;
}
inline uint32_t CMsgHeroRoleStats::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleStats.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CMsgHeroRoleStats::_internal_set_lane_selection_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lane_selection_flags_ = value;
}
inline void CMsgHeroRoleStats::set_lane_selection_flags(uint32_t value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CMsgHeroRoleStats.lane_selection_flags)
}

// optional uint32 match_count = 2;
inline bool CMsgHeroRoleStats::_internal_has_match_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHeroRoleStats::has_match_count() const {
  return _internal_has_match_count();
}
inline void CMsgHeroRoleStats::clear_match_count() {
  _impl_.match_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgHeroRoleStats::_internal_match_count() const {
  return _impl_.match_count_;
}
inline uint32_t CMsgHeroRoleStats::match_count() const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleStats.match_count)
  return _internal_match_count();
}
inline void CMsgHeroRoleStats::_internal_set_match_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_count_ = value;
}
inline void CMsgHeroRoleStats::set_match_count(uint32_t value) {
  _internal_set_match_count(value);
  // @@protoc_insertion_point(field_set:CMsgHeroRoleStats.match_count)
}

// optional uint32 win_count = 3;
inline bool CMsgHeroRoleStats::_internal_has_win_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgHeroRoleStats::has_win_count() const {
  return _internal_has_win_count();
}
inline void CMsgHeroRoleStats::clear_win_count() {
  _impl_.win_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgHeroRoleStats::_internal_win_count() const {
  return _impl_.win_count_;
}
inline uint32_t CMsgHeroRoleStats::win_count() const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleStats.win_count)
  return _internal_win_count();
}
inline void CMsgHeroRoleStats::_internal_set_win_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.win_count_ = value;
}
inline void CMsgHeroRoleStats::set_win_count(uint32_t value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:CMsgHeroRoleStats.win_count)
}

// -------------------------------------------------------------------

// CMsgHeroRoleHeroStats

// optional uint32 hero_id = 1;
inline bool CMsgHeroRoleHeroStats::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHeroRoleHeroStats::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgHeroRoleHeroStats::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHeroRoleHeroStats::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgHeroRoleHeroStats::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleHeroStats.hero_id)
  return _internal_hero_id();
}
inline void CMsgHeroRoleHeroStats::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgHeroRoleHeroStats::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgHeroRoleHeroStats.hero_id)
}

// repeated .CMsgHeroRoleStats role_stats = 2;
inline int CMsgHeroRoleHeroStats::_internal_role_stats_size() const {
  return _impl_.role_stats_.size();
}
inline int CMsgHeroRoleHeroStats::role_stats_size() const {
  return _internal_role_stats_size();
}
inline void CMsgHeroRoleHeroStats::clear_role_stats() {
  _impl_.role_stats_.Clear();
}
inline ::CMsgHeroRoleStats* CMsgHeroRoleHeroStats::mutable_role_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHeroRoleHeroStats.role_stats)
  return _impl_.role_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleStats >*
CMsgHeroRoleHeroStats::mutable_role_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHeroRoleHeroStats.role_stats)
  return &_impl_.role_stats_;
}
inline const ::CMsgHeroRoleStats& CMsgHeroRoleHeroStats::_internal_role_stats(int index) const {
  return _impl_.role_stats_.Get(index);
}
inline const ::CMsgHeroRoleStats& CMsgHeroRoleHeroStats::role_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleHeroStats.role_stats)
  return _internal_role_stats(index);
}
inline ::CMsgHeroRoleStats* CMsgHeroRoleHeroStats::_internal_add_role_stats() {
  return _impl_.role_stats_.Add();
}
inline ::CMsgHeroRoleStats* CMsgHeroRoleHeroStats::add_role_stats() {
  ::CMsgHeroRoleStats* _add = _internal_add_role_stats();
  // @@protoc_insertion_point(field_add:CMsgHeroRoleHeroStats.role_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleStats >&
CMsgHeroRoleHeroStats::role_stats() const {
  // @@protoc_insertion_point(field_list:CMsgHeroRoleHeroStats.role_stats)
  return _impl_.role_stats_;
}

// -------------------------------------------------------------------

// CMsgHeroRoleRankStats

// optional uint32 rank_tier = 1;
inline bool CMsgHeroRoleRankStats::_internal_has_rank_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHeroRoleRankStats::has_rank_tier() const {
  return _internal_has_rank_tier();
}
inline void CMsgHeroRoleRankStats::clear_rank_tier() {
  _impl_.rank_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHeroRoleRankStats::_internal_rank_tier() const {
  return _impl_.rank_tier_;
}
inline uint32_t CMsgHeroRoleRankStats::rank_tier() const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleRankStats.rank_tier)
  return _internal_rank_tier();
}
inline void CMsgHeroRoleRankStats::_internal_set_rank_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rank_tier_ = value;
}
inline void CMsgHeroRoleRankStats::set_rank_tier(uint32_t value) {
  _internal_set_rank_tier(value);
  // @@protoc_insertion_point(field_set:CMsgHeroRoleRankStats.rank_tier)
}

// repeated .CMsgHeroRoleHeroStats hero_stats = 2;
inline int CMsgHeroRoleRankStats::_internal_hero_stats_size() const {
  return _impl_.hero_stats_.size();
}
inline int CMsgHeroRoleRankStats::hero_stats_size() const {
  return _internal_hero_stats_size();
}
inline void CMsgHeroRoleRankStats::clear_hero_stats() {
  _impl_.hero_stats_.Clear();
}
inline ::CMsgHeroRoleHeroStats* CMsgHeroRoleRankStats::mutable_hero_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHeroRoleRankStats.hero_stats)
  return _impl_.hero_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleHeroStats >*
CMsgHeroRoleRankStats::mutable_hero_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHeroRoleRankStats.hero_stats)
  return &_impl_.hero_stats_;
}
inline const ::CMsgHeroRoleHeroStats& CMsgHeroRoleRankStats::_internal_hero_stats(int index) const {
  return _impl_.hero_stats_.Get(index);
}
inline const ::CMsgHeroRoleHeroStats& CMsgHeroRoleRankStats::hero_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleRankStats.hero_stats)
  return _internal_hero_stats(index);
}
inline ::CMsgHeroRoleHeroStats* CMsgHeroRoleRankStats::_internal_add_hero_stats() {
  return _impl_.hero_stats_.Add();
}
inline ::CMsgHeroRoleHeroStats* CMsgHeroRoleRankStats::add_hero_stats() {
  ::CMsgHeroRoleHeroStats* _add = _internal_add_hero_stats();
  // @@protoc_insertion_point(field_add:CMsgHeroRoleRankStats.hero_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleHeroStats >&
CMsgHeroRoleRankStats::hero_stats() const {
  // @@protoc_insertion_point(field_list:CMsgHeroRoleRankStats.hero_stats)
  return _impl_.hero_stats_;
}

// -------------------------------------------------------------------

// CMsgHeroRoleAllRanksStats

// optional uint32 start_timestamp = 1;
inline bool CMsgHeroRoleAllRanksStats::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHeroRoleAllRanksStats::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgHeroRoleAllRanksStats::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHeroRoleAllRanksStats::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgHeroRoleAllRanksStats::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleAllRanksStats.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgHeroRoleAllRanksStats::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgHeroRoleAllRanksStats::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgHeroRoleAllRanksStats.start_timestamp)
}

// optional uint32 end_timestamp = 2;
inline bool CMsgHeroRoleAllRanksStats::_internal_has_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHeroRoleAllRanksStats::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void CMsgHeroRoleAllRanksStats::clear_end_timestamp() {
  _impl_.end_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgHeroRoleAllRanksStats::_internal_end_timestamp() const {
  return _impl_.end_timestamp_;
}
inline uint32_t CMsgHeroRoleAllRanksStats::end_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleAllRanksStats.end_timestamp)
  return _internal_end_timestamp();
}
inline void CMsgHeroRoleAllRanksStats::_internal_set_end_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_timestamp_ = value;
}
inline void CMsgHeroRoleAllRanksStats::set_end_timestamp(uint32_t value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgHeroRoleAllRanksStats.end_timestamp)
}

// repeated .CMsgHeroRoleRankStats rank_stats = 3;
inline int CMsgHeroRoleAllRanksStats::_internal_rank_stats_size() const {
  return _impl_.rank_stats_.size();
}
inline int CMsgHeroRoleAllRanksStats::rank_stats_size() const {
  return _internal_rank_stats_size();
}
inline void CMsgHeroRoleAllRanksStats::clear_rank_stats() {
  _impl_.rank_stats_.Clear();
}
inline ::CMsgHeroRoleRankStats* CMsgHeroRoleAllRanksStats::mutable_rank_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHeroRoleAllRanksStats.rank_stats)
  return _impl_.rank_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleRankStats >*
CMsgHeroRoleAllRanksStats::mutable_rank_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHeroRoleAllRanksStats.rank_stats)
  return &_impl_.rank_stats_;
}
inline const ::CMsgHeroRoleRankStats& CMsgHeroRoleAllRanksStats::_internal_rank_stats(int index) const {
  return _impl_.rank_stats_.Get(index);
}
inline const ::CMsgHeroRoleRankStats& CMsgHeroRoleAllRanksStats::rank_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHeroRoleAllRanksStats.rank_stats)
  return _internal_rank_stats(index);
}
inline ::CMsgHeroRoleRankStats* CMsgHeroRoleAllRanksStats::_internal_add_rank_stats() {
  return _impl_.rank_stats_.Add();
}
inline ::CMsgHeroRoleRankStats* CMsgHeroRoleAllRanksStats::add_rank_stats() {
  ::CMsgHeroRoleRankStats* _add = _internal_add_rank_stats();
  // @@protoc_insertion_point(field_add:CMsgHeroRoleAllRanksStats.rank_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHeroRoleRankStats >&
CMsgHeroRoleAllRanksStats::rank_stats() const {
  // @@protoc_insertion_point(field_list:CMsgHeroRoleAllRanksStats.rank_stats)
  return _impl_.rank_stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgDOTAProfileCard_EStatID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAProfileCard_EStatID>() {
  return ::CMsgDOTAProfileCard_EStatID_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCRerollPlayerChallengeResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCRerollPlayerChallengeResponse_EResult>() {
  return ::CMsgGCRerollPlayerChallengeResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARealtimeGameStats_GraphData_eStat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARealtimeGameStats_GraphData_eStat>() {
  return ::CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTARealtimeGameStats_GraphData_eLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTARealtimeGameStats_GraphData_eLocation>() {
  return ::CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor();
}
template <> struct is_proto_enum< ::CMsgInGamePrediction_ERawValueType_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgInGamePrediction_ERawValueType_t>() {
  return ::CMsgInGamePrediction_ERawValueType_t_descriptor();
}
template <> struct is_proto_enum< ::CMsgInGamePrediction_EPredictionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgInGamePrediction_EPredictionType>() {
  return ::CMsgInGamePrediction_EPredictionType_descriptor();
}
template <> struct is_proto_enum< ::CMsgInGamePrediction_EResolutionType_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgInGamePrediction_EResolutionType_t>() {
  return ::CMsgInGamePrediction_EResolutionType_t_descriptor();
}
template <> struct is_proto_enum< ::CMsgInGamePrediction_ERandomSelectionGroup_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgInGamePrediction_ERandomSelectionGroup_t>() {
  return ::CMsgInGamePrediction_ERandomSelectionGroup_t_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonPredictions_Prediction_EPredictionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonPredictions_Prediction_EPredictionType>() {
  return ::CMsgDOTASeasonPredictions_Prediction_EPredictionType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTASeasonPredictions_Prediction_EAnswerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTASeasonPredictions_Prediction_EAnswerType>() {
  return ::CMsgDOTASeasonPredictions_Prediction_EAnswerType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAMatch_Player_HeroDamageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAMatch_Player_HeroDamageType>() {
  return ::CMsgDOTAMatch_Player_HeroDamageType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAMatch_ReplayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAMatch_ReplayState>() {
  return ::CMsgDOTAMatch_ReplayState_descriptor();
}
template <> struct is_proto_enum< ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse>() {
  return ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::ESpecialPingValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESpecialPingValue>() {
  return ::ESpecialPingValue_descriptor();
}
template <> struct is_proto_enum< ::EDOTAGCSessionNeed> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAGCSessionNeed>() {
  return ::EDOTAGCSessionNeed_descriptor();
}
template <> struct is_proto_enum< ::DOTA_TournamentEvents> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_TournamentEvents>() {
  return ::DOTA_TournamentEvents_descriptor();
}
template <> struct is_proto_enum< ::EBroadcastTimelineEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBroadcastTimelineEvent>() {
  return ::EBroadcastTimelineEvent_descriptor();
}
template <> struct is_proto_enum< ::ECustomGameWhitelistState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECustomGameWhitelistState>() {
  return ::ECustomGameWhitelistState_descriptor();
}
template <> struct is_proto_enum< ::EDOTATriviaQuestionCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTATriviaQuestionCategory>() {
  return ::EDOTATriviaQuestionCategory_descriptor();
}
template <> struct is_proto_enum< ::EOverwatchConviction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EOverwatchConviction>() {
  return ::EOverwatchConviction_descriptor();
}
template <> struct is_proto_enum< ::EHeroRelicRarity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EHeroRelicRarity>() {
  return ::EHeroRelicRarity_descriptor();
}
template <> struct is_proto_enum< ::EStickerbookAuditAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EStickerbookAuditAction>() {
  return ::EStickerbookAuditAction_descriptor();
}
template <> struct is_proto_enum< ::EStickerbookPageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EStickerbookPageType>() {
  return ::EStickerbookPageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_2eproto
