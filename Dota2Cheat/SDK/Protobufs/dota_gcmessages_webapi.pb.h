// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_webapi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fwebapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fwebapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "dota_match_metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fwebapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fwebapi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fwebapi_2eproto;
class CMsgArcanaVotes;
struct CMsgArcanaVotesDefaultTypeInternal;
extern CMsgArcanaVotesDefaultTypeInternal _CMsgArcanaVotes_default_instance_;
class CMsgArcanaVotes_Match;
struct CMsgArcanaVotes_MatchDefaultTypeInternal;
extern CMsgArcanaVotes_MatchDefaultTypeInternal _CMsgArcanaVotes_Match_default_instance_;
class CMsgChatToxicityReport;
struct CMsgChatToxicityReportDefaultTypeInternal;
extern CMsgChatToxicityReportDefaultTypeInternal _CMsgChatToxicityReport_default_instance_;
class CMsgDOTADPCFeed;
struct CMsgDOTADPCFeedDefaultTypeInternal;
extern CMsgDOTADPCFeedDefaultTypeInternal _CMsgDOTADPCFeed_default_instance_;
class CMsgDOTADPCFeed_Element;
struct CMsgDOTADPCFeed_ElementDefaultTypeInternal;
extern CMsgDOTADPCFeed_ElementDefaultTypeInternal _CMsgDOTADPCFeed_Element_default_instance_;
class CMsgDOTADPCMatch;
struct CMsgDOTADPCMatchDefaultTypeInternal;
extern CMsgDOTADPCMatchDefaultTypeInternal _CMsgDOTADPCMatch_default_instance_;
class CMsgDOTADPCUserInfo;
struct CMsgDOTADPCUserInfoDefaultTypeInternal;
extern CMsgDOTADPCUserInfoDefaultTypeInternal _CMsgDOTADPCUserInfo_default_instance_;
class CMsgDOTAFantasyCardLineup;
struct CMsgDOTAFantasyCardLineupDefaultTypeInternal;
extern CMsgDOTAFantasyCardLineupDefaultTypeInternal _CMsgDOTAFantasyCardLineup_default_instance_;
class CMsgDOTAFantasyCardLineup_Card;
struct CMsgDOTAFantasyCardLineup_CardDefaultTypeInternal;
extern CMsgDOTAFantasyCardLineup_CardDefaultTypeInternal _CMsgDOTAFantasyCardLineup_Card_default_instance_;
class CMsgDOTAFantasyCardLineup_CardBonus;
struct CMsgDOTAFantasyCardLineup_CardBonusDefaultTypeInternal;
extern CMsgDOTAFantasyCardLineup_CardBonusDefaultTypeInternal _CMsgDOTAFantasyCardLineup_CardBonus_default_instance_;
class CMsgDOTAFantasyCardLineup_League;
struct CMsgDOTAFantasyCardLineup_LeagueDefaultTypeInternal;
extern CMsgDOTAFantasyCardLineup_LeagueDefaultTypeInternal _CMsgDOTAFantasyCardLineup_League_default_instance_;
class CMsgDOTAFantasyCardLineup_Period;
struct CMsgDOTAFantasyCardLineup_PeriodDefaultTypeInternal;
extern CMsgDOTAFantasyCardLineup_PeriodDefaultTypeInternal _CMsgDOTAFantasyCardLineup_Period_default_instance_;
class CMsgDOTAFantasyCardList;
struct CMsgDOTAFantasyCardListDefaultTypeInternal;
extern CMsgDOTAFantasyCardListDefaultTypeInternal _CMsgDOTAFantasyCardList_default_instance_;
class CMsgDOTAFantasyCardList_Card;
struct CMsgDOTAFantasyCardList_CardDefaultTypeInternal;
extern CMsgDOTAFantasyCardList_CardDefaultTypeInternal _CMsgDOTAFantasyCardList_Card_default_instance_;
class CMsgDOTAFantasyCardList_CardBonus;
struct CMsgDOTAFantasyCardList_CardBonusDefaultTypeInternal;
extern CMsgDOTAFantasyCardList_CardBonusDefaultTypeInternal _CMsgDOTAFantasyCardList_CardBonus_default_instance_;
class CMsgDPCEvent;
struct CMsgDPCEventDefaultTypeInternal;
extern CMsgDPCEventDefaultTypeInternal _CMsgDPCEvent_default_instance_;
class CMsgDPCEventList;
struct CMsgDPCEventListDefaultTypeInternal;
extern CMsgDPCEventListDefaultTypeInternal _CMsgDPCEventList_default_instance_;
class CMsgDPCEvent_League;
struct CMsgDPCEvent_LeagueDefaultTypeInternal;
extern CMsgDPCEvent_LeagueDefaultTypeInternal _CMsgDPCEvent_League_default_instance_;
class CMsgDPCEvent_PhaseInfo;
struct CMsgDPCEvent_PhaseInfoDefaultTypeInternal;
extern CMsgDPCEvent_PhaseInfoDefaultTypeInternal _CMsgDPCEvent_PhaseInfo_default_instance_;
class CMsgDraftTrivia;
struct CMsgDraftTriviaDefaultTypeInternal;
extern CMsgDraftTriviaDefaultTypeInternal _CMsgDraftTrivia_default_instance_;
class CMsgDraftTrivia_DraftTriviaHeroInfo;
struct CMsgDraftTrivia_DraftTriviaHeroInfoDefaultTypeInternal;
extern CMsgDraftTrivia_DraftTriviaHeroInfoDefaultTypeInternal _CMsgDraftTrivia_DraftTriviaHeroInfo_default_instance_;
class CMsgDraftTrivia_DraftTriviaMatchInfo;
struct CMsgDraftTrivia_DraftTriviaMatchInfoDefaultTypeInternal;
extern CMsgDraftTrivia_DraftTriviaMatchInfoDefaultTypeInternal _CMsgDraftTrivia_DraftTriviaMatchInfo_default_instance_;
class CMsgDraftTrivia_PreviousResult;
struct CMsgDraftTrivia_PreviousResultDefaultTypeInternal;
extern CMsgDraftTrivia_PreviousResultDefaultTypeInternal _CMsgDraftTrivia_PreviousResult_default_instance_;
class CMsgGetTeamAuditInformation;
struct CMsgGetTeamAuditInformationDefaultTypeInternal;
extern CMsgGetTeamAuditInformationDefaultTypeInternal _CMsgGetTeamAuditInformation_default_instance_;
class CMsgGetTeamAuditInformation_Action;
struct CMsgGetTeamAuditInformation_ActionDefaultTypeInternal;
extern CMsgGetTeamAuditInformation_ActionDefaultTypeInternal _CMsgGetTeamAuditInformation_Action_default_instance_;
class CMsgTeamFanContentAssetStatus;
struct CMsgTeamFanContentAssetStatusDefaultTypeInternal;
extern CMsgTeamFanContentAssetStatusDefaultTypeInternal _CMsgTeamFanContentAssetStatus_default_instance_;
class CMsgTeamFanContentAssetStatusResponse;
struct CMsgTeamFanContentAssetStatusResponseDefaultTypeInternal;
extern CMsgTeamFanContentAssetStatusResponseDefaultTypeInternal _CMsgTeamFanContentAssetStatusResponse_default_instance_;
class CMsgTeamFanContentAutographStatus;
struct CMsgTeamFanContentAutographStatusDefaultTypeInternal;
extern CMsgTeamFanContentAutographStatusDefaultTypeInternal _CMsgTeamFanContentAutographStatus_default_instance_;
class CMsgTeamFanContentAutographStatus_AutographStatus;
struct CMsgTeamFanContentAutographStatus_AutographStatusDefaultTypeInternal;
extern CMsgTeamFanContentAutographStatus_AutographStatusDefaultTypeInternal _CMsgTeamFanContentAutographStatus_AutographStatus_default_instance_;
class CMsgTeamFanContentAutographStatus_TeamStatus;
struct CMsgTeamFanContentAutographStatus_TeamStatusDefaultTypeInternal;
extern CMsgTeamFanContentAutographStatus_TeamStatusDefaultTypeInternal _CMsgTeamFanContentAutographStatus_TeamStatus_default_instance_;
class CMsgTeamFanContentStatus;
struct CMsgTeamFanContentStatusDefaultTypeInternal;
extern CMsgTeamFanContentStatusDefaultTypeInternal _CMsgTeamFanContentStatus_default_instance_;
class CMsgTeamFanContentStatus_TeamStatus;
struct CMsgTeamFanContentStatus_TeamStatusDefaultTypeInternal;
extern CMsgTeamFanContentStatus_TeamStatusDefaultTypeInternal _CMsgTeamFanContentStatus_TeamStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgArcanaVotes* Arena::CreateMaybeMessage<::CMsgArcanaVotes>(Arena*);
template<> ::CMsgArcanaVotes_Match* Arena::CreateMaybeMessage<::CMsgArcanaVotes_Match>(Arena*);
template<> ::CMsgChatToxicityReport* Arena::CreateMaybeMessage<::CMsgChatToxicityReport>(Arena*);
template<> ::CMsgDOTADPCFeed* Arena::CreateMaybeMessage<::CMsgDOTADPCFeed>(Arena*);
template<> ::CMsgDOTADPCFeed_Element* Arena::CreateMaybeMessage<::CMsgDOTADPCFeed_Element>(Arena*);
template<> ::CMsgDOTADPCMatch* Arena::CreateMaybeMessage<::CMsgDOTADPCMatch>(Arena*);
template<> ::CMsgDOTADPCUserInfo* Arena::CreateMaybeMessage<::CMsgDOTADPCUserInfo>(Arena*);
template<> ::CMsgDOTAFantasyCardLineup* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardLineup>(Arena*);
template<> ::CMsgDOTAFantasyCardLineup_Card* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardLineup_Card>(Arena*);
template<> ::CMsgDOTAFantasyCardLineup_CardBonus* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardLineup_CardBonus>(Arena*);
template<> ::CMsgDOTAFantasyCardLineup_League* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardLineup_League>(Arena*);
template<> ::CMsgDOTAFantasyCardLineup_Period* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardLineup_Period>(Arena*);
template<> ::CMsgDOTAFantasyCardList* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardList>(Arena*);
template<> ::CMsgDOTAFantasyCardList_Card* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardList_Card>(Arena*);
template<> ::CMsgDOTAFantasyCardList_CardBonus* Arena::CreateMaybeMessage<::CMsgDOTAFantasyCardList_CardBonus>(Arena*);
template<> ::CMsgDPCEvent* Arena::CreateMaybeMessage<::CMsgDPCEvent>(Arena*);
template<> ::CMsgDPCEventList* Arena::CreateMaybeMessage<::CMsgDPCEventList>(Arena*);
template<> ::CMsgDPCEvent_League* Arena::CreateMaybeMessage<::CMsgDPCEvent_League>(Arena*);
template<> ::CMsgDPCEvent_PhaseInfo* Arena::CreateMaybeMessage<::CMsgDPCEvent_PhaseInfo>(Arena*);
template<> ::CMsgDraftTrivia* Arena::CreateMaybeMessage<::CMsgDraftTrivia>(Arena*);
template<> ::CMsgDraftTrivia_DraftTriviaHeroInfo* Arena::CreateMaybeMessage<::CMsgDraftTrivia_DraftTriviaHeroInfo>(Arena*);
template<> ::CMsgDraftTrivia_DraftTriviaMatchInfo* Arena::CreateMaybeMessage<::CMsgDraftTrivia_DraftTriviaMatchInfo>(Arena*);
template<> ::CMsgDraftTrivia_PreviousResult* Arena::CreateMaybeMessage<::CMsgDraftTrivia_PreviousResult>(Arena*);
template<> ::CMsgGetTeamAuditInformation* Arena::CreateMaybeMessage<::CMsgGetTeamAuditInformation>(Arena*);
template<> ::CMsgGetTeamAuditInformation_Action* Arena::CreateMaybeMessage<::CMsgGetTeamAuditInformation_Action>(Arena*);
template<> ::CMsgTeamFanContentAssetStatus* Arena::CreateMaybeMessage<::CMsgTeamFanContentAssetStatus>(Arena*);
template<> ::CMsgTeamFanContentAssetStatusResponse* Arena::CreateMaybeMessage<::CMsgTeamFanContentAssetStatusResponse>(Arena*);
template<> ::CMsgTeamFanContentAutographStatus* Arena::CreateMaybeMessage<::CMsgTeamFanContentAutographStatus>(Arena*);
template<> ::CMsgTeamFanContentAutographStatus_AutographStatus* Arena::CreateMaybeMessage<::CMsgTeamFanContentAutographStatus_AutographStatus>(Arena*);
template<> ::CMsgTeamFanContentAutographStatus_TeamStatus* Arena::CreateMaybeMessage<::CMsgTeamFanContentAutographStatus_TeamStatus>(Arena*);
template<> ::CMsgTeamFanContentStatus* Arena::CreateMaybeMessage<::CMsgTeamFanContentStatus>(Arena*);
template<> ::CMsgTeamFanContentStatus_TeamStatus* Arena::CreateMaybeMessage<::CMsgTeamFanContentStatus_TeamStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgArcanaVotes_VotingState : int {
  CMsgArcanaVotes_VotingState_FINISHED = 0,
  CMsgArcanaVotes_VotingState_IN_PROGRESS = 1,
  CMsgArcanaVotes_VotingState_IN_FUTURE = 2
};
bool CMsgArcanaVotes_VotingState_IsValid(int value);
constexpr CMsgArcanaVotes_VotingState CMsgArcanaVotes_VotingState_VotingState_MIN = CMsgArcanaVotes_VotingState_FINISHED;
constexpr CMsgArcanaVotes_VotingState CMsgArcanaVotes_VotingState_VotingState_MAX = CMsgArcanaVotes_VotingState_IN_FUTURE;
constexpr int CMsgArcanaVotes_VotingState_VotingState_ARRAYSIZE = CMsgArcanaVotes_VotingState_VotingState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgArcanaVotes_VotingState_descriptor();
template<typename T>
inline const std::string& CMsgArcanaVotes_VotingState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgArcanaVotes_VotingState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgArcanaVotes_VotingState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgArcanaVotes_VotingState_descriptor(), enum_t_value);
}
inline bool CMsgArcanaVotes_VotingState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgArcanaVotes_VotingState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgArcanaVotes_VotingState>(
    CMsgArcanaVotes_VotingState_descriptor(), name, value);
}
enum CMsgDOTADPCFeed_EFeedElementType : int {
  CMsgDOTADPCFeed_EFeedElementType_FEED_SERIES_RESULT = 1,
  CMsgDOTADPCFeed_EFeedElementType_FEED_MATCH_POPULAR = 2,
  CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_UPCOMING_MATCH = 3,
  CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_LEAGUE_RESULT = 4,
  CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_ADD_PLAYER = 5,
  CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_REMOVE_PLAYER = 6,
  CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_DISBAND = 7,
  CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_UPCOMING = 8,
  CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_CONCLUDED = 9,
  CMsgDOTADPCFeed_EFeedElementType_FEED_DPC_STANDINGS = 10,
  CMsgDOTADPCFeed_EFeedElementType_FEED_ALERT_PREDICTIONS = 11,
  CMsgDOTADPCFeed_EFeedElementType_FEED_ALERT_FANTASY = 12,
  CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_LIVE_MATCH = 13,
  CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_INPROGRESS_SERIES = 14
};
bool CMsgDOTADPCFeed_EFeedElementType_IsValid(int value);
constexpr CMsgDOTADPCFeed_EFeedElementType CMsgDOTADPCFeed_EFeedElementType_EFeedElementType_MIN = CMsgDOTADPCFeed_EFeedElementType_FEED_SERIES_RESULT;
constexpr CMsgDOTADPCFeed_EFeedElementType CMsgDOTADPCFeed_EFeedElementType_EFeedElementType_MAX = CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_INPROGRESS_SERIES;
constexpr int CMsgDOTADPCFeed_EFeedElementType_EFeedElementType_ARRAYSIZE = CMsgDOTADPCFeed_EFeedElementType_EFeedElementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTADPCFeed_EFeedElementType_descriptor();
template<typename T>
inline const std::string& CMsgDOTADPCFeed_EFeedElementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTADPCFeed_EFeedElementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTADPCFeed_EFeedElementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTADPCFeed_EFeedElementType_descriptor(), enum_t_value);
}
inline bool CMsgDOTADPCFeed_EFeedElementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTADPCFeed_EFeedElementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTADPCFeed_EFeedElementType>(
    CMsgDOTADPCFeed_EFeedElementType_descriptor(), name, value);
}
enum CMsgTeamFanContentAssetStatusResponse_EResult : int {
  CMsgTeamFanContentAssetStatusResponse_EResult_k_eSuccess = 0,
  CMsgTeamFanContentAssetStatusResponse_EResult_k_eInternalError = 1
};
bool CMsgTeamFanContentAssetStatusResponse_EResult_IsValid(int value);
constexpr CMsgTeamFanContentAssetStatusResponse_EResult CMsgTeamFanContentAssetStatusResponse_EResult_EResult_MIN = CMsgTeamFanContentAssetStatusResponse_EResult_k_eSuccess;
constexpr CMsgTeamFanContentAssetStatusResponse_EResult CMsgTeamFanContentAssetStatusResponse_EResult_EResult_MAX = CMsgTeamFanContentAssetStatusResponse_EResult_k_eInternalError;
constexpr int CMsgTeamFanContentAssetStatusResponse_EResult_EResult_ARRAYSIZE = CMsgTeamFanContentAssetStatusResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgTeamFanContentAssetStatusResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgTeamFanContentAssetStatusResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgTeamFanContentAssetStatusResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgTeamFanContentAssetStatusResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgTeamFanContentAssetStatusResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgTeamFanContentAssetStatusResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgTeamFanContentAssetStatusResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgTeamFanContentAssetStatusResponse_EResult>(
    CMsgTeamFanContentAssetStatusResponse_EResult_descriptor(), name, value);
}
enum CMsgDPCEvent_ELeagueEvent : int {
  CMsgDPCEvent_ELeagueEvent_EVENT_INVALID = 0,
  CMsgDPCEvent_ELeagueEvent_SPRING_2021_LEAGUE = 1,
  CMsgDPCEvent_ELeagueEvent_SPRING_2021_MAJOR = 2,
  CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2021_QUALIFIERS = 3,
  CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2021 = 4,
  CMsgDPCEvent_ELeagueEvent_WINTER_2021_LEAGUE = 5,
  CMsgDPCEvent_ELeagueEvent_WINTER_2021_LEAGUE_FINALS = 6,
  CMsgDPCEvent_ELeagueEvent_SPRING_2022_LEAGUE = 7,
  CMsgDPCEvent_ELeagueEvent_SPRING_2022_MAJOR = 8,
  CMsgDPCEvent_ELeagueEvent_SUMMER_2022_LEAGUE = 9,
  CMsgDPCEvent_ELeagueEvent_SUMMER_2022_MAJOR = 10,
  CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2022 = 11,
  CMsgDPCEvent_ELeagueEvent_CHINA_REGIONAL_FINALS = 12,
  CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2022_REGIONAL_QUALIFIERS = 13,
  CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2022_LAST_CHANCE_QUALIFIERS = 14,
  CMsgDPCEvent_ELeagueEvent_WINTER_2023_LEAGUE = 15,
  CMsgDPCEvent_ELeagueEvent_WINTER_2023_MAJOR = 16,
  CMsgDPCEvent_ELeagueEvent_SPRING_2023_LEAGUE = 17,
  CMsgDPCEvent_ELeagueEvent_SPRING_2023_MAJOR = 18,
  CMsgDPCEvent_ELeagueEvent_SUMMER_2023_LEAGUE = 19,
  CMsgDPCEvent_ELeagueEvent_SUMMER_2023_MAJOR = 20,
  CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2023 = 21
};
bool CMsgDPCEvent_ELeagueEvent_IsValid(int value);
constexpr CMsgDPCEvent_ELeagueEvent CMsgDPCEvent_ELeagueEvent_ELeagueEvent_MIN = CMsgDPCEvent_ELeagueEvent_EVENT_INVALID;
constexpr CMsgDPCEvent_ELeagueEvent CMsgDPCEvent_ELeagueEvent_ELeagueEvent_MAX = CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2023;
constexpr int CMsgDPCEvent_ELeagueEvent_ELeagueEvent_ARRAYSIZE = CMsgDPCEvent_ELeagueEvent_ELeagueEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDPCEvent_ELeagueEvent_descriptor();
template<typename T>
inline const std::string& CMsgDPCEvent_ELeagueEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDPCEvent_ELeagueEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDPCEvent_ELeagueEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDPCEvent_ELeagueEvent_descriptor(), enum_t_value);
}
inline bool CMsgDPCEvent_ELeagueEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDPCEvent_ELeagueEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDPCEvent_ELeagueEvent>(
    CMsgDPCEvent_ELeagueEvent_descriptor(), name, value);
}
enum CMsgDPCEvent_ELeagueEventPhase : int {
  CMsgDPCEvent_ELeagueEventPhase_PHASE_INVALID = 0,
  CMsgDPCEvent_ELeagueEventPhase_WILD_CARD = 1,
  CMsgDPCEvent_ELeagueEventPhase_GROUP_STAGE = 2,
  CMsgDPCEvent_ELeagueEventPhase_GROUP_A = 3,
  CMsgDPCEvent_ELeagueEventPhase_GROUP_B = 4,
  CMsgDPCEvent_ELeagueEventPhase_OVERALL = 5,
  CMsgDPCEvent_ELeagueEventPhase_PLAYOFF = 6,
  CMsgDPCEvent_ELeagueEventPhase_RESULTS = 7
};
bool CMsgDPCEvent_ELeagueEventPhase_IsValid(int value);
constexpr CMsgDPCEvent_ELeagueEventPhase CMsgDPCEvent_ELeagueEventPhase_ELeagueEventPhase_MIN = CMsgDPCEvent_ELeagueEventPhase_PHASE_INVALID;
constexpr CMsgDPCEvent_ELeagueEventPhase CMsgDPCEvent_ELeagueEventPhase_ELeagueEventPhase_MAX = CMsgDPCEvent_ELeagueEventPhase_RESULTS;
constexpr int CMsgDPCEvent_ELeagueEventPhase_ELeagueEventPhase_ARRAYSIZE = CMsgDPCEvent_ELeagueEventPhase_ELeagueEventPhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDPCEvent_ELeagueEventPhase_descriptor();
template<typename T>
inline const std::string& CMsgDPCEvent_ELeagueEventPhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDPCEvent_ELeagueEventPhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDPCEvent_ELeagueEventPhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDPCEvent_ELeagueEventPhase_descriptor(), enum_t_value);
}
inline bool CMsgDPCEvent_ELeagueEventPhase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDPCEvent_ELeagueEventPhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDPCEvent_ELeagueEventPhase>(
    CMsgDPCEvent_ELeagueEventPhase_descriptor(), name, value);
}
enum CMsgDPCEvent_ELeagueEventType : int {
  CMsgDPCEvent_ELeagueEventType_UNKNOWN = 0,
  CMsgDPCEvent_ELeagueEventType_LEAGUE = 1,
  CMsgDPCEvent_ELeagueEventType_MAJOR = 2,
  CMsgDPCEvent_ELeagueEventType_INTERNATIONAL_QUALIFIERS = 3,
  CMsgDPCEvent_ELeagueEventType_INTERNATIONAL = 4,
  CMsgDPCEvent_ELeagueEventType_LEAGUE_FINALS = 5
};
bool CMsgDPCEvent_ELeagueEventType_IsValid(int value);
constexpr CMsgDPCEvent_ELeagueEventType CMsgDPCEvent_ELeagueEventType_ELeagueEventType_MIN = CMsgDPCEvent_ELeagueEventType_UNKNOWN;
constexpr CMsgDPCEvent_ELeagueEventType CMsgDPCEvent_ELeagueEventType_ELeagueEventType_MAX = CMsgDPCEvent_ELeagueEventType_LEAGUE_FINALS;
constexpr int CMsgDPCEvent_ELeagueEventType_ELeagueEventType_ARRAYSIZE = CMsgDPCEvent_ELeagueEventType_ELeagueEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDPCEvent_ELeagueEventType_descriptor();
template<typename T>
inline const std::string& CMsgDPCEvent_ELeagueEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDPCEvent_ELeagueEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDPCEvent_ELeagueEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDPCEvent_ELeagueEventType_descriptor(), enum_t_value);
}
inline bool CMsgDPCEvent_ELeagueEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDPCEvent_ELeagueEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDPCEvent_ELeagueEventType>(
    CMsgDPCEvent_ELeagueEventType_descriptor(), name, value);
}
enum CMsgDPCEvent_ETour : int {
  CMsgDPCEvent_ETour_TOUR_NONE = 0,
  CMsgDPCEvent_ETour_TOUR_1 = 1,
  CMsgDPCEvent_ETour_TOUR_2 = 2,
  CMsgDPCEvent_ETour_TOUR_3 = 3
};
bool CMsgDPCEvent_ETour_IsValid(int value);
constexpr CMsgDPCEvent_ETour CMsgDPCEvent_ETour_ETour_MIN = CMsgDPCEvent_ETour_TOUR_NONE;
constexpr CMsgDPCEvent_ETour CMsgDPCEvent_ETour_ETour_MAX = CMsgDPCEvent_ETour_TOUR_3;
constexpr int CMsgDPCEvent_ETour_ETour_ARRAYSIZE = CMsgDPCEvent_ETour_ETour_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDPCEvent_ETour_descriptor();
template<typename T>
inline const std::string& CMsgDPCEvent_ETour_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDPCEvent_ETour>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDPCEvent_ETour_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDPCEvent_ETour_descriptor(), enum_t_value);
}
inline bool CMsgDPCEvent_ETour_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDPCEvent_ETour* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDPCEvent_ETour>(
    CMsgDPCEvent_ETour_descriptor(), name, value);
}
enum ETeamFanContentStatus : int {
  TEAM_FAN_CONTENT_STATUS_INVALID = 0,
  TEAM_FAN_CONTENT_STATUS_PENDING = 1,
  TEAM_FAN_CONTENT_STATUS_EVALUATED = 2
};
bool ETeamFanContentStatus_IsValid(int value);
constexpr ETeamFanContentStatus ETeamFanContentStatus_MIN = TEAM_FAN_CONTENT_STATUS_INVALID;
constexpr ETeamFanContentStatus ETeamFanContentStatus_MAX = TEAM_FAN_CONTENT_STATUS_EVALUATED;
constexpr int ETeamFanContentStatus_ARRAYSIZE = ETeamFanContentStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETeamFanContentStatus_descriptor();
template<typename T>
inline const std::string& ETeamFanContentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETeamFanContentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETeamFanContentStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETeamFanContentStatus_descriptor(), enum_t_value);
}
inline bool ETeamFanContentStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETeamFanContentStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETeamFanContentStatus>(
    ETeamFanContentStatus_descriptor(), name, value);
}
enum ETeamFanContentAssetType : int {
  k_eFanContentAssetType_LogoPNG = 1,
  k_eFanContentAssetType_LogoSVG = 2,
  k_eFanContentAssetType_Logo3D = 3,
  k_eFanContentAssetType_Players = 4,
  k_eFanContentAssetType_Sprays = 5,
  k_eFanContentAssetType_Wallpapers = 6,
  k_eFanContentAssetType_Emoticons = 7,
  k_eFanContentAssetType_VoiceLines = 8,
  k_eFanContentAssetType_Localization = 9
};
bool ETeamFanContentAssetType_IsValid(int value);
constexpr ETeamFanContentAssetType ETeamFanContentAssetType_MIN = k_eFanContentAssetType_LogoPNG;
constexpr ETeamFanContentAssetType ETeamFanContentAssetType_MAX = k_eFanContentAssetType_Localization;
constexpr int ETeamFanContentAssetType_ARRAYSIZE = ETeamFanContentAssetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETeamFanContentAssetType_descriptor();
template<typename T>
inline const std::string& ETeamFanContentAssetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETeamFanContentAssetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETeamFanContentAssetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETeamFanContentAssetType_descriptor(), enum_t_value);
}
inline bool ETeamFanContentAssetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETeamFanContentAssetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETeamFanContentAssetType>(
    ETeamFanContentAssetType_descriptor(), name, value);
}
enum ETeamFanContentAssetStatus : int {
  k_eFanContentAssetStatus_None = 0,
  k_eFanContentAssetStatus_Approved = 1,
  k_eFanContentAssetStatus_Rejected = 2
};
bool ETeamFanContentAssetStatus_IsValid(int value);
constexpr ETeamFanContentAssetStatus ETeamFanContentAssetStatus_MIN = k_eFanContentAssetStatus_None;
constexpr ETeamFanContentAssetStatus ETeamFanContentAssetStatus_MAX = k_eFanContentAssetStatus_Rejected;
constexpr int ETeamFanContentAssetStatus_ARRAYSIZE = ETeamFanContentAssetStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETeamFanContentAssetStatus_descriptor();
template<typename T>
inline const std::string& ETeamFanContentAssetStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETeamFanContentAssetStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETeamFanContentAssetStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETeamFanContentAssetStatus_descriptor(), enum_t_value);
}
inline bool ETeamFanContentAssetStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETeamFanContentAssetStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETeamFanContentAssetStatus>(
    ETeamFanContentAssetStatus_descriptor(), name, value);
}
// ===================================================================

class CMsgArcanaVotes_Match final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgArcanaVotes.Match) */ {
 public:
  inline CMsgArcanaVotes_Match() : CMsgArcanaVotes_Match(nullptr) {}
  ~CMsgArcanaVotes_Match() override;
  explicit PROTOBUF_CONSTEXPR CMsgArcanaVotes_Match(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgArcanaVotes_Match(const CMsgArcanaVotes_Match& from);
  CMsgArcanaVotes_Match(CMsgArcanaVotes_Match&& from) noexcept
    : CMsgArcanaVotes_Match() {
    *this = ::std::move(from);
  }

  inline CMsgArcanaVotes_Match& operator=(const CMsgArcanaVotes_Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgArcanaVotes_Match& operator=(CMsgArcanaVotes_Match&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgArcanaVotes_Match& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgArcanaVotes_Match* internal_default_instance() {
    return reinterpret_cast<const CMsgArcanaVotes_Match*>(
               &_CMsgArcanaVotes_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgArcanaVotes_Match& a, CMsgArcanaVotes_Match& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgArcanaVotes_Match* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgArcanaVotes_Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgArcanaVotes_Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgArcanaVotes_Match>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgArcanaVotes_Match& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgArcanaVotes_Match& from) {
    CMsgArcanaVotes_Match::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgArcanaVotes_Match* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgArcanaVotes.Match";
  }
  protected:
  explicit CMsgArcanaVotes_Match(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kHeroId0FieldNumber = 2,
    kHeroId1FieldNumber = 3,
    kHeroSeeding0FieldNumber = 4,
    kHeroSeeding1FieldNumber = 5,
    kVoteCount0FieldNumber = 6,
    kVoteCount1FieldNumber = 7,
    kVotingStateFieldNumber = 8,
    kRoundNumberFieldNumber = 9,
    kIsVotesHiddenFieldNumber = 10,
    kCalibrationTimeRemainingFieldNumber = 11,
  };
  // optional uint32 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint32_t match_id() const;
  void set_match_id(uint32_t value);
  private:
  uint32_t _internal_match_id() const;
  void _internal_set_match_id(uint32_t value);
  public:

  // optional uint32 hero_id_0 = 2;
  bool has_hero_id_0() const;
  private:
  bool _internal_has_hero_id_0() const;
  public:
  void clear_hero_id_0();
  uint32_t hero_id_0() const;
  void set_hero_id_0(uint32_t value);
  private:
  uint32_t _internal_hero_id_0() const;
  void _internal_set_hero_id_0(uint32_t value);
  public:

  // optional uint32 hero_id_1 = 3;
  bool has_hero_id_1() const;
  private:
  bool _internal_has_hero_id_1() const;
  public:
  void clear_hero_id_1();
  uint32_t hero_id_1() const;
  void set_hero_id_1(uint32_t value);
  private:
  uint32_t _internal_hero_id_1() const;
  void _internal_set_hero_id_1(uint32_t value);
  public:

  // optional uint32 hero_seeding_0 = 4;
  bool has_hero_seeding_0() const;
  private:
  bool _internal_has_hero_seeding_0() const;
  public:
  void clear_hero_seeding_0();
  uint32_t hero_seeding_0() const;
  void set_hero_seeding_0(uint32_t value);
  private:
  uint32_t _internal_hero_seeding_0() const;
  void _internal_set_hero_seeding_0(uint32_t value);
  public:

  // optional uint32 hero_seeding_1 = 5;
  bool has_hero_seeding_1() const;
  private:
  bool _internal_has_hero_seeding_1() const;
  public:
  void clear_hero_seeding_1();
  uint32_t hero_seeding_1() const;
  void set_hero_seeding_1(uint32_t value);
  private:
  uint32_t _internal_hero_seeding_1() const;
  void _internal_set_hero_seeding_1(uint32_t value);
  public:

  // optional uint32 vote_count_0 = 6;
  bool has_vote_count_0() const;
  private:
  bool _internal_has_vote_count_0() const;
  public:
  void clear_vote_count_0();
  uint32_t vote_count_0() const;
  void set_vote_count_0(uint32_t value);
  private:
  uint32_t _internal_vote_count_0() const;
  void _internal_set_vote_count_0(uint32_t value);
  public:

  // optional uint32 vote_count_1 = 7;
  bool has_vote_count_1() const;
  private:
  bool _internal_has_vote_count_1() const;
  public:
  void clear_vote_count_1();
  uint32_t vote_count_1() const;
  void set_vote_count_1(uint32_t value);
  private:
  uint32_t _internal_vote_count_1() const;
  void _internal_set_vote_count_1(uint32_t value);
  public:

  // optional uint32 voting_state = 8;
  bool has_voting_state() const;
  private:
  bool _internal_has_voting_state() const;
  public:
  void clear_voting_state();
  uint32_t voting_state() const;
  void set_voting_state(uint32_t value);
  private:
  uint32_t _internal_voting_state() const;
  void _internal_set_voting_state(uint32_t value);
  public:

  // optional uint32 round_number = 9;
  bool has_round_number() const;
  private:
  bool _internal_has_round_number() const;
  public:
  void clear_round_number();
  uint32_t round_number() const;
  void set_round_number(uint32_t value);
  private:
  uint32_t _internal_round_number() const;
  void _internal_set_round_number(uint32_t value);
  public:

  // optional bool is_votes_hidden = 10;
  bool has_is_votes_hidden() const;
  private:
  bool _internal_has_is_votes_hidden() const;
  public:
  void clear_is_votes_hidden();
  bool is_votes_hidden() const;
  void set_is_votes_hidden(bool value);
  private:
  bool _internal_is_votes_hidden() const;
  void _internal_set_is_votes_hidden(bool value);
  public:

  // optional uint32 calibration_time_remaining = 11;
  bool has_calibration_time_remaining() const;
  private:
  bool _internal_has_calibration_time_remaining() const;
  public:
  void clear_calibration_time_remaining();
  uint32_t calibration_time_remaining() const;
  void set_calibration_time_remaining(uint32_t value);
  private:
  uint32_t _internal_calibration_time_remaining() const;
  void _internal_set_calibration_time_remaining(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgArcanaVotes.Match)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t match_id_;
    uint32_t hero_id_0_;
    uint32_t hero_id_1_;
    uint32_t hero_seeding_0_;
    uint32_t hero_seeding_1_;
    uint32_t vote_count_0_;
    uint32_t vote_count_1_;
    uint32_t voting_state_;
    uint32_t round_number_;
    bool is_votes_hidden_;
    uint32_t calibration_time_remaining_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgArcanaVotes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgArcanaVotes) */ {
 public:
  inline CMsgArcanaVotes() : CMsgArcanaVotes(nullptr) {}
  ~CMsgArcanaVotes() override;
  explicit PROTOBUF_CONSTEXPR CMsgArcanaVotes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgArcanaVotes(const CMsgArcanaVotes& from);
  CMsgArcanaVotes(CMsgArcanaVotes&& from) noexcept
    : CMsgArcanaVotes() {
    *this = ::std::move(from);
  }

  inline CMsgArcanaVotes& operator=(const CMsgArcanaVotes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgArcanaVotes& operator=(CMsgArcanaVotes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgArcanaVotes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgArcanaVotes* internal_default_instance() {
    return reinterpret_cast<const CMsgArcanaVotes*>(
               &_CMsgArcanaVotes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgArcanaVotes& a, CMsgArcanaVotes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgArcanaVotes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgArcanaVotes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgArcanaVotes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgArcanaVotes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgArcanaVotes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgArcanaVotes& from) {
    CMsgArcanaVotes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgArcanaVotes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgArcanaVotes";
  }
  protected:
  explicit CMsgArcanaVotes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgArcanaVotes_Match Match;

  typedef CMsgArcanaVotes_VotingState VotingState;
  static constexpr VotingState FINISHED =
    CMsgArcanaVotes_VotingState_FINISHED;
  static constexpr VotingState IN_PROGRESS =
    CMsgArcanaVotes_VotingState_IN_PROGRESS;
  static constexpr VotingState IN_FUTURE =
    CMsgArcanaVotes_VotingState_IN_FUTURE;
  static inline bool VotingState_IsValid(int value) {
    return CMsgArcanaVotes_VotingState_IsValid(value);
  }
  static constexpr VotingState VotingState_MIN =
    CMsgArcanaVotes_VotingState_VotingState_MIN;
  static constexpr VotingState VotingState_MAX =
    CMsgArcanaVotes_VotingState_VotingState_MAX;
  static constexpr int VotingState_ARRAYSIZE =
    CMsgArcanaVotes_VotingState_VotingState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VotingState_descriptor() {
    return CMsgArcanaVotes_VotingState_descriptor();
  }
  template<typename T>
  static inline const std::string& VotingState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VotingState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VotingState_Name.");
    return CMsgArcanaVotes_VotingState_Name(enum_t_value);
  }
  static inline bool VotingState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VotingState* value) {
    return CMsgArcanaVotes_VotingState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kRoundTimeRemainingFieldNumber = 2,
    kRoundNumberFieldNumber = 3,
    kVotingStateFieldNumber = 4,
    kIsCurrentRoundCalibratingFieldNumber = 5,
    kClosestActiveMatchIdFieldNumber = 6,
    kEventIdFieldNumber = 7,
    kVotingStartTimeFieldNumber = 8,
  };
  // repeated .CMsgArcanaVotes.Match matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::CMsgArcanaVotes_Match* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgArcanaVotes_Match >*
      mutable_matches();
  private:
  const ::CMsgArcanaVotes_Match& _internal_matches(int index) const;
  ::CMsgArcanaVotes_Match* _internal_add_matches();
  public:
  const ::CMsgArcanaVotes_Match& matches(int index) const;
  ::CMsgArcanaVotes_Match* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgArcanaVotes_Match >&
      matches() const;

  // optional uint32 round_time_remaining = 2;
  bool has_round_time_remaining() const;
  private:
  bool _internal_has_round_time_remaining() const;
  public:
  void clear_round_time_remaining();
  uint32_t round_time_remaining() const;
  void set_round_time_remaining(uint32_t value);
  private:
  uint32_t _internal_round_time_remaining() const;
  void _internal_set_round_time_remaining(uint32_t value);
  public:

  // optional uint32 round_number = 3;
  bool has_round_number() const;
  private:
  bool _internal_has_round_number() const;
  public:
  void clear_round_number();
  uint32_t round_number() const;
  void set_round_number(uint32_t value);
  private:
  uint32_t _internal_round_number() const;
  void _internal_set_round_number(uint32_t value);
  public:

  // optional uint32 voting_state = 4;
  bool has_voting_state() const;
  private:
  bool _internal_has_voting_state() const;
  public:
  void clear_voting_state();
  uint32_t voting_state() const;
  void set_voting_state(uint32_t value);
  private:
  uint32_t _internal_voting_state() const;
  void _internal_set_voting_state(uint32_t value);
  public:

  // optional bool is_current_round_calibrating = 5;
  bool has_is_current_round_calibrating() const;
  private:
  bool _internal_has_is_current_round_calibrating() const;
  public:
  void clear_is_current_round_calibrating();
  bool is_current_round_calibrating() const;
  void set_is_current_round_calibrating(bool value);
  private:
  bool _internal_is_current_round_calibrating() const;
  void _internal_set_is_current_round_calibrating(bool value);
  public:

  // optional uint32 closest_active_match_id = 6;
  bool has_closest_active_match_id() const;
  private:
  bool _internal_has_closest_active_match_id() const;
  public:
  void clear_closest_active_match_id();
  uint32_t closest_active_match_id() const;
  void set_closest_active_match_id(uint32_t value);
  private:
  uint32_t _internal_closest_active_match_id() const;
  void _internal_set_closest_active_match_id(uint32_t value);
  public:

  // optional uint32 event_id = 7;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 voting_start_time = 8;
  bool has_voting_start_time() const;
  private:
  bool _internal_has_voting_start_time() const;
  public:
  void clear_voting_start_time();
  uint32_t voting_start_time() const;
  void set_voting_start_time(uint32_t value);
  private:
  uint32_t _internal_voting_start_time() const;
  void _internal_set_voting_start_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgArcanaVotes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgArcanaVotes_Match > matches_;
    uint32_t round_time_remaining_;
    uint32_t round_number_;
    uint32_t voting_state_;
    bool is_current_round_calibrating_;
    uint32_t closest_active_match_id_;
    uint32_t event_id_;
    uint32_t voting_start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCFeed_Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCFeed.Element) */ {
 public:
  inline CMsgDOTADPCFeed_Element() : CMsgDOTADPCFeed_Element(nullptr) {}
  ~CMsgDOTADPCFeed_Element() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCFeed_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCFeed_Element(const CMsgDOTADPCFeed_Element& from);
  CMsgDOTADPCFeed_Element(CMsgDOTADPCFeed_Element&& from) noexcept
    : CMsgDOTADPCFeed_Element() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCFeed_Element& operator=(const CMsgDOTADPCFeed_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCFeed_Element& operator=(CMsgDOTADPCFeed_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCFeed_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCFeed_Element* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCFeed_Element*>(
               &_CMsgDOTADPCFeed_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgDOTADPCFeed_Element& a, CMsgDOTADPCFeed_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCFeed_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCFeed_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCFeed_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCFeed_Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCFeed_Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCFeed_Element& from) {
    CMsgDOTADPCFeed_Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCFeed_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCFeed.Element";
  }
  protected:
  explicit CMsgDOTADPCFeed_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kSeriesIdFieldNumber = 3,
    kMatchIdFieldNumber = 4,
    kTeamIdFieldNumber = 5,
    kAccountIdFieldNumber = 6,
    kLeagueIdFieldNumber = 7,
    kNodeIdFieldNumber = 8,
    kData1FieldNumber = 9,
    kData2FieldNumber = 10,
    kData3FieldNumber = 11,
    kData4FieldNumber = 12,
    kServerSteamIdFieldNumber = 13,
    kTypeFieldNumber = 1,
  };
  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 series_id = 3;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  uint32_t series_id() const;
  void set_series_id(uint32_t value);
  private:
  uint32_t _internal_series_id() const;
  void _internal_set_series_id(uint32_t value);
  public:

  // optional uint64 match_id = 4;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 account_id = 6;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 league_id = 7;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 node_id = 8;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  uint32_t node_id() const;
  void set_node_id(uint32_t value);
  private:
  uint32_t _internal_node_id() const;
  void _internal_set_node_id(uint32_t value);
  public:

  // optional uint32 data_1 = 9;
  bool has_data_1() const;
  private:
  bool _internal_has_data_1() const;
  public:
  void clear_data_1();
  uint32_t data_1() const;
  void set_data_1(uint32_t value);
  private:
  uint32_t _internal_data_1() const;
  void _internal_set_data_1(uint32_t value);
  public:

  // optional uint32 data_2 = 10;
  bool has_data_2() const;
  private:
  bool _internal_has_data_2() const;
  public:
  void clear_data_2();
  uint32_t data_2() const;
  void set_data_2(uint32_t value);
  private:
  uint32_t _internal_data_2() const;
  void _internal_set_data_2(uint32_t value);
  public:

  // optional uint32 data_3 = 11;
  bool has_data_3() const;
  private:
  bool _internal_has_data_3() const;
  public:
  void clear_data_3();
  uint32_t data_3() const;
  void set_data_3(uint32_t value);
  private:
  uint32_t _internal_data_3() const;
  void _internal_set_data_3(uint32_t value);
  public:

  // optional uint32 data_4 = 12;
  bool has_data_4() const;
  private:
  bool _internal_has_data_4() const;
  public:
  void clear_data_4();
  uint32_t data_4() const;
  void set_data_4(uint32_t value);
  private:
  uint32_t _internal_data_4() const;
  void _internal_set_data_4(uint32_t value);
  public:

  // optional uint64 server_steam_id = 13;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional .CMsgDOTADPCFeed.EFeedElementType type = 1 [default = FEED_SERIES_RESULT];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CMsgDOTADPCFeed_EFeedElementType type() const;
  void set_type(::CMsgDOTADPCFeed_EFeedElementType value);
  private:
  ::CMsgDOTADPCFeed_EFeedElementType _internal_type() const;
  void _internal_set_type(::CMsgDOTADPCFeed_EFeedElementType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCFeed.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t timestamp_;
    uint32_t series_id_;
    uint64_t match_id_;
    uint32_t team_id_;
    uint32_t account_id_;
    uint32_t league_id_;
    uint32_t node_id_;
    uint32_t data_1_;
    uint32_t data_2_;
    uint32_t data_3_;
    uint32_t data_4_;
    uint64_t server_steam_id_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCFeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCFeed) */ {
 public:
  inline CMsgDOTADPCFeed() : CMsgDOTADPCFeed(nullptr) {}
  ~CMsgDOTADPCFeed() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCFeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCFeed(const CMsgDOTADPCFeed& from);
  CMsgDOTADPCFeed(CMsgDOTADPCFeed&& from) noexcept
    : CMsgDOTADPCFeed() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCFeed& operator=(const CMsgDOTADPCFeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCFeed& operator=(CMsgDOTADPCFeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCFeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCFeed* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCFeed*>(
               &_CMsgDOTADPCFeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgDOTADPCFeed& a, CMsgDOTADPCFeed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCFeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCFeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCFeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCFeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCFeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCFeed& from) {
    CMsgDOTADPCFeed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCFeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCFeed";
  }
  protected:
  explicit CMsgDOTADPCFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTADPCFeed_Element Element;

  typedef CMsgDOTADPCFeed_EFeedElementType EFeedElementType;
  static constexpr EFeedElementType FEED_SERIES_RESULT =
    CMsgDOTADPCFeed_EFeedElementType_FEED_SERIES_RESULT;
  static constexpr EFeedElementType FEED_MATCH_POPULAR =
    CMsgDOTADPCFeed_EFeedElementType_FEED_MATCH_POPULAR;
  static constexpr EFeedElementType FEED_TEAM_UPCOMING_MATCH =
    CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_UPCOMING_MATCH;
  static constexpr EFeedElementType FEED_TEAM_LEAGUE_RESULT =
    CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_LEAGUE_RESULT;
  static constexpr EFeedElementType FEED_TEAM_ADD_PLAYER =
    CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_ADD_PLAYER;
  static constexpr EFeedElementType FEED_TEAM_REMOVE_PLAYER =
    CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_REMOVE_PLAYER;
  static constexpr EFeedElementType FEED_TEAM_DISBAND =
    CMsgDOTADPCFeed_EFeedElementType_FEED_TEAM_DISBAND;
  static constexpr EFeedElementType FEED_LEAGUE_UPCOMING =
    CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_UPCOMING;
  static constexpr EFeedElementType FEED_LEAGUE_CONCLUDED =
    CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_CONCLUDED;
  static constexpr EFeedElementType FEED_DPC_STANDINGS =
    CMsgDOTADPCFeed_EFeedElementType_FEED_DPC_STANDINGS;
  static constexpr EFeedElementType FEED_ALERT_PREDICTIONS =
    CMsgDOTADPCFeed_EFeedElementType_FEED_ALERT_PREDICTIONS;
  static constexpr EFeedElementType FEED_ALERT_FANTASY =
    CMsgDOTADPCFeed_EFeedElementType_FEED_ALERT_FANTASY;
  static constexpr EFeedElementType FEED_LEAGUE_LIVE_MATCH =
    CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_LIVE_MATCH;
  static constexpr EFeedElementType FEED_LEAGUE_INPROGRESS_SERIES =
    CMsgDOTADPCFeed_EFeedElementType_FEED_LEAGUE_INPROGRESS_SERIES;
  static inline bool EFeedElementType_IsValid(int value) {
    return CMsgDOTADPCFeed_EFeedElementType_IsValid(value);
  }
  static constexpr EFeedElementType EFeedElementType_MIN =
    CMsgDOTADPCFeed_EFeedElementType_EFeedElementType_MIN;
  static constexpr EFeedElementType EFeedElementType_MAX =
    CMsgDOTADPCFeed_EFeedElementType_EFeedElementType_MAX;
  static constexpr int EFeedElementType_ARRAYSIZE =
    CMsgDOTADPCFeed_EFeedElementType_EFeedElementType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EFeedElementType_descriptor() {
    return CMsgDOTADPCFeed_EFeedElementType_descriptor();
  }
  template<typename T>
  static inline const std::string& EFeedElementType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EFeedElementType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EFeedElementType_Name.");
    return CMsgDOTADPCFeed_EFeedElementType_Name(enum_t_value);
  }
  static inline bool EFeedElementType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EFeedElementType* value) {
    return CMsgDOTADPCFeed_EFeedElementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .CMsgDOTADPCFeed.Element elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::CMsgDOTADPCFeed_Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCFeed_Element >*
      mutable_elements();
  private:
  const ::CMsgDOTADPCFeed_Element& _internal_elements(int index) const;
  ::CMsgDOTADPCFeed_Element* _internal_add_elements();
  public:
  const ::CMsgDOTADPCFeed_Element& elements(int index) const;
  ::CMsgDOTADPCFeed_Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCFeed_Element >&
      elements() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCFeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCFeed_Element > elements_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCUserInfo) */ {
 public:
  inline CMsgDOTADPCUserInfo() : CMsgDOTADPCUserInfo(nullptr) {}
  ~CMsgDOTADPCUserInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCUserInfo(const CMsgDOTADPCUserInfo& from);
  CMsgDOTADPCUserInfo(CMsgDOTADPCUserInfo&& from) noexcept
    : CMsgDOTADPCUserInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCUserInfo& operator=(const CMsgDOTADPCUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCUserInfo& operator=(CMsgDOTADPCUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCUserInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCUserInfo*>(
               &_CMsgDOTADPCUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgDOTADPCUserInfo& a, CMsgDOTADPCUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCUserInfo& from) {
    CMsgDOTADPCUserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCUserInfo";
  }
  protected:
  explicit CMsgDOTADPCUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPlusSubscriberFieldNumber = 1,
  };
  // optional bool is_plus_subscriber = 1;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool is_plus_subscriber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDraftTrivia_DraftTriviaHeroInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDraftTrivia.DraftTriviaHeroInfo) */ {
 public:
  inline CMsgDraftTrivia_DraftTriviaHeroInfo() : CMsgDraftTrivia_DraftTriviaHeroInfo(nullptr) {}
  ~CMsgDraftTrivia_DraftTriviaHeroInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDraftTrivia_DraftTriviaHeroInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDraftTrivia_DraftTriviaHeroInfo(const CMsgDraftTrivia_DraftTriviaHeroInfo& from);
  CMsgDraftTrivia_DraftTriviaHeroInfo(CMsgDraftTrivia_DraftTriviaHeroInfo&& from) noexcept
    : CMsgDraftTrivia_DraftTriviaHeroInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDraftTrivia_DraftTriviaHeroInfo& operator=(const CMsgDraftTrivia_DraftTriviaHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDraftTrivia_DraftTriviaHeroInfo& operator=(CMsgDraftTrivia_DraftTriviaHeroInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDraftTrivia_DraftTriviaHeroInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDraftTrivia_DraftTriviaHeroInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDraftTrivia_DraftTriviaHeroInfo*>(
               &_CMsgDraftTrivia_DraftTriviaHeroInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgDraftTrivia_DraftTriviaHeroInfo& a, CMsgDraftTrivia_DraftTriviaHeroInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDraftTrivia_DraftTriviaHeroInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDraftTrivia_DraftTriviaHeroInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDraftTrivia_DraftTriviaHeroInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDraftTrivia_DraftTriviaHeroInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDraftTrivia_DraftTriviaHeroInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDraftTrivia_DraftTriviaHeroInfo& from) {
    CMsgDraftTrivia_DraftTriviaHeroInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDraftTrivia_DraftTriviaHeroInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDraftTrivia.DraftTriviaHeroInfo";
  }
  protected:
  explicit CMsgDraftTrivia_DraftTriviaHeroInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kRoleFieldNumber = 2,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 role = 2;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDraftTrivia.DraftTriviaHeroInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t role_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDraftTrivia_DraftTriviaMatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDraftTrivia.DraftTriviaMatchInfo) */ {
 public:
  inline CMsgDraftTrivia_DraftTriviaMatchInfo() : CMsgDraftTrivia_DraftTriviaMatchInfo(nullptr) {}
  ~CMsgDraftTrivia_DraftTriviaMatchInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDraftTrivia_DraftTriviaMatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDraftTrivia_DraftTriviaMatchInfo(const CMsgDraftTrivia_DraftTriviaMatchInfo& from);
  CMsgDraftTrivia_DraftTriviaMatchInfo(CMsgDraftTrivia_DraftTriviaMatchInfo&& from) noexcept
    : CMsgDraftTrivia_DraftTriviaMatchInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDraftTrivia_DraftTriviaMatchInfo& operator=(const CMsgDraftTrivia_DraftTriviaMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDraftTrivia_DraftTriviaMatchInfo& operator=(CMsgDraftTrivia_DraftTriviaMatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDraftTrivia_DraftTriviaMatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDraftTrivia_DraftTriviaMatchInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDraftTrivia_DraftTriviaMatchInfo*>(
               &_CMsgDraftTrivia_DraftTriviaMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgDraftTrivia_DraftTriviaMatchInfo& a, CMsgDraftTrivia_DraftTriviaMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDraftTrivia_DraftTriviaMatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDraftTrivia_DraftTriviaMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDraftTrivia_DraftTriviaMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDraftTrivia_DraftTriviaMatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDraftTrivia_DraftTriviaMatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDraftTrivia_DraftTriviaMatchInfo& from) {
    CMsgDraftTrivia_DraftTriviaMatchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDraftTrivia_DraftTriviaMatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDraftTrivia.DraftTriviaMatchInfo";
  }
  protected:
  explicit CMsgDraftTrivia_DraftTriviaMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiantHeroesFieldNumber = 1,
    kDireHeroesFieldNumber = 2,
  };
  // repeated .CMsgDraftTrivia.DraftTriviaHeroInfo radiant_heroes = 1;
  int radiant_heroes_size() const;
  private:
  int _internal_radiant_heroes_size() const;
  public:
  void clear_radiant_heroes();
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* mutable_radiant_heroes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >*
      mutable_radiant_heroes();
  private:
  const ::CMsgDraftTrivia_DraftTriviaHeroInfo& _internal_radiant_heroes(int index) const;
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* _internal_add_radiant_heroes();
  public:
  const ::CMsgDraftTrivia_DraftTriviaHeroInfo& radiant_heroes(int index) const;
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* add_radiant_heroes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >&
      radiant_heroes() const;

  // repeated .CMsgDraftTrivia.DraftTriviaHeroInfo dire_heroes = 2;
  int dire_heroes_size() const;
  private:
  int _internal_dire_heroes_size() const;
  public:
  void clear_dire_heroes();
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* mutable_dire_heroes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >*
      mutable_dire_heroes();
  private:
  const ::CMsgDraftTrivia_DraftTriviaHeroInfo& _internal_dire_heroes(int index) const;
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* _internal_add_dire_heroes();
  public:
  const ::CMsgDraftTrivia_DraftTriviaHeroInfo& dire_heroes(int index) const;
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* add_dire_heroes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >&
      dire_heroes() const;

  // @@protoc_insertion_point(class_scope:CMsgDraftTrivia.DraftTriviaMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo > radiant_heroes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo > dire_heroes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDraftTrivia_PreviousResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDraftTrivia.PreviousResult) */ {
 public:
  inline CMsgDraftTrivia_PreviousResult() : CMsgDraftTrivia_PreviousResult(nullptr) {}
  ~CMsgDraftTrivia_PreviousResult() override;
  explicit PROTOBUF_CONSTEXPR CMsgDraftTrivia_PreviousResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDraftTrivia_PreviousResult(const CMsgDraftTrivia_PreviousResult& from);
  CMsgDraftTrivia_PreviousResult(CMsgDraftTrivia_PreviousResult&& from) noexcept
    : CMsgDraftTrivia_PreviousResult() {
    *this = ::std::move(from);
  }

  inline CMsgDraftTrivia_PreviousResult& operator=(const CMsgDraftTrivia_PreviousResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDraftTrivia_PreviousResult& operator=(CMsgDraftTrivia_PreviousResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDraftTrivia_PreviousResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDraftTrivia_PreviousResult* internal_default_instance() {
    return reinterpret_cast<const CMsgDraftTrivia_PreviousResult*>(
               &_CMsgDraftTrivia_PreviousResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgDraftTrivia_PreviousResult& a, CMsgDraftTrivia_PreviousResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDraftTrivia_PreviousResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDraftTrivia_PreviousResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDraftTrivia_PreviousResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDraftTrivia_PreviousResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDraftTrivia_PreviousResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDraftTrivia_PreviousResult& from) {
    CMsgDraftTrivia_PreviousResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDraftTrivia_PreviousResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDraftTrivia.PreviousResult";
  }
  protected:
  explicit CMsgDraftTrivia_PreviousResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchHeroInfoFieldNumber = 3,
    kVotedCorrectlyFieldNumber = 1,
    kVotedRadiantFieldNumber = 2,
    kMatchRankTierFieldNumber = 4,
    kMatchIdFieldNumber = 6,
    kEndTimeFieldNumber = 5,
  };
  // optional .CMsgDraftTrivia.DraftTriviaMatchInfo match_hero_info = 3;
  bool has_match_hero_info() const;
  private:
  bool _internal_has_match_hero_info() const;
  public:
  void clear_match_hero_info();
  const ::CMsgDraftTrivia_DraftTriviaMatchInfo& match_hero_info() const;
  PROTOBUF_NODISCARD ::CMsgDraftTrivia_DraftTriviaMatchInfo* release_match_hero_info();
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* mutable_match_hero_info();
  void set_allocated_match_hero_info(::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info);
  private:
  const ::CMsgDraftTrivia_DraftTriviaMatchInfo& _internal_match_hero_info() const;
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* _internal_mutable_match_hero_info();
  public:
  void unsafe_arena_set_allocated_match_hero_info(
      ::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info);
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* unsafe_arena_release_match_hero_info();

  // optional bool voted_correctly = 1;
  bool has_voted_correctly() const;
  private:
  bool _internal_has_voted_correctly() const;
  public:
  void clear_voted_correctly();
  bool voted_correctly() const;
  void set_voted_correctly(bool value);
  private:
  bool _internal_voted_correctly() const;
  void _internal_set_voted_correctly(bool value);
  public:

  // optional bool voted_radiant = 2;
  bool has_voted_radiant() const;
  private:
  bool _internal_has_voted_radiant() const;
  public:
  void clear_voted_radiant();
  bool voted_radiant() const;
  void set_voted_radiant(bool value);
  private:
  bool _internal_voted_radiant() const;
  void _internal_set_voted_radiant(bool value);
  public:

  // optional uint32 match_rank_tier = 4;
  bool has_match_rank_tier() const;
  private:
  bool _internal_has_match_rank_tier() const;
  public:
  void clear_match_rank_tier();
  uint32_t match_rank_tier() const;
  void set_match_rank_tier(uint32_t value);
  private:
  uint32_t _internal_match_rank_tier() const;
  void _internal_set_match_rank_tier(uint32_t value);
  public:

  // optional uint64 match_id = 6;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  uint32_t end_time() const;
  void set_end_time(uint32_t value);
  private:
  uint32_t _internal_end_time() const;
  void _internal_set_end_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDraftTrivia.PreviousResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info_;
    bool voted_correctly_;
    bool voted_radiant_;
    uint32_t match_rank_tier_;
    uint64_t match_id_;
    uint32_t end_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDraftTrivia final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDraftTrivia) */ {
 public:
  inline CMsgDraftTrivia() : CMsgDraftTrivia(nullptr) {}
  ~CMsgDraftTrivia() override;
  explicit PROTOBUF_CONSTEXPR CMsgDraftTrivia(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDraftTrivia(const CMsgDraftTrivia& from);
  CMsgDraftTrivia(CMsgDraftTrivia&& from) noexcept
    : CMsgDraftTrivia() {
    *this = ::std::move(from);
  }

  inline CMsgDraftTrivia& operator=(const CMsgDraftTrivia& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDraftTrivia& operator=(CMsgDraftTrivia&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDraftTrivia& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDraftTrivia* internal_default_instance() {
    return reinterpret_cast<const CMsgDraftTrivia*>(
               &_CMsgDraftTrivia_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgDraftTrivia& a, CMsgDraftTrivia& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDraftTrivia* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDraftTrivia* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDraftTrivia* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDraftTrivia>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDraftTrivia& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDraftTrivia& from) {
    CMsgDraftTrivia::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDraftTrivia* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDraftTrivia";
  }
  protected:
  explicit CMsgDraftTrivia(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDraftTrivia_DraftTriviaHeroInfo DraftTriviaHeroInfo;
  typedef CMsgDraftTrivia_DraftTriviaMatchInfo DraftTriviaMatchInfo;
  typedef CMsgDraftTrivia_PreviousResult PreviousResult;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchHeroInfoFieldNumber = 2,
    kPreviousResultFieldNumber = 7,
    kMatchRankTierFieldNumber = 3,
    kHasValidMatchFieldNumber = 1,
    kCurrentMatchVotedRadiantFieldNumber = 6,
    kEndTimeFieldNumber = 4,
    kEventIdFieldNumber = 5,
    kCurrentStreakFieldNumber = 8,
  };
  // optional .CMsgDraftTrivia.DraftTriviaMatchInfo match_hero_info = 2;
  bool has_match_hero_info() const;
  private:
  bool _internal_has_match_hero_info() const;
  public:
  void clear_match_hero_info();
  const ::CMsgDraftTrivia_DraftTriviaMatchInfo& match_hero_info() const;
  PROTOBUF_NODISCARD ::CMsgDraftTrivia_DraftTriviaMatchInfo* release_match_hero_info();
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* mutable_match_hero_info();
  void set_allocated_match_hero_info(::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info);
  private:
  const ::CMsgDraftTrivia_DraftTriviaMatchInfo& _internal_match_hero_info() const;
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* _internal_mutable_match_hero_info();
  public:
  void unsafe_arena_set_allocated_match_hero_info(
      ::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info);
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* unsafe_arena_release_match_hero_info();

  // optional .CMsgDraftTrivia.PreviousResult previous_result = 7;
  bool has_previous_result() const;
  private:
  bool _internal_has_previous_result() const;
  public:
  void clear_previous_result();
  const ::CMsgDraftTrivia_PreviousResult& previous_result() const;
  PROTOBUF_NODISCARD ::CMsgDraftTrivia_PreviousResult* release_previous_result();
  ::CMsgDraftTrivia_PreviousResult* mutable_previous_result();
  void set_allocated_previous_result(::CMsgDraftTrivia_PreviousResult* previous_result);
  private:
  const ::CMsgDraftTrivia_PreviousResult& _internal_previous_result() const;
  ::CMsgDraftTrivia_PreviousResult* _internal_mutable_previous_result();
  public:
  void unsafe_arena_set_allocated_previous_result(
      ::CMsgDraftTrivia_PreviousResult* previous_result);
  ::CMsgDraftTrivia_PreviousResult* unsafe_arena_release_previous_result();

  // optional uint32 match_rank_tier = 3;
  bool has_match_rank_tier() const;
  private:
  bool _internal_has_match_rank_tier() const;
  public:
  void clear_match_rank_tier();
  uint32_t match_rank_tier() const;
  void set_match_rank_tier(uint32_t value);
  private:
  uint32_t _internal_match_rank_tier() const;
  void _internal_set_match_rank_tier(uint32_t value);
  public:

  // optional bool has_valid_match = 1;
  bool has_has_valid_match() const;
  private:
  bool _internal_has_has_valid_match() const;
  public:
  void clear_has_valid_match();
  bool has_valid_match() const;
  void set_has_valid_match(bool value);
  private:
  bool _internal_has_valid_match() const;
  void _internal_set_has_valid_match(bool value);
  public:

  // optional bool current_match_voted_radiant = 6;
  bool has_current_match_voted_radiant() const;
  private:
  bool _internal_has_current_match_voted_radiant() const;
  public:
  void clear_current_match_voted_radiant();
  bool current_match_voted_radiant() const;
  void set_current_match_voted_radiant(bool value);
  private:
  bool _internal_current_match_voted_radiant() const;
  void _internal_set_current_match_voted_radiant(bool value);
  public:

  // optional uint32 end_time = 4;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  uint32_t end_time() const;
  void set_end_time(uint32_t value);
  private:
  uint32_t _internal_end_time() const;
  void _internal_set_end_time(uint32_t value);
  public:

  // optional uint32 event_id = 5;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 current_streak = 8;
  bool has_current_streak() const;
  private:
  bool _internal_has_current_streak() const;
  public:
  void clear_current_streak();
  uint32_t current_streak() const;
  void set_current_streak(uint32_t value);
  private:
  uint32_t _internal_current_streak() const;
  void _internal_set_current_streak(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDraftTrivia)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info_;
    ::CMsgDraftTrivia_PreviousResult* previous_result_;
    uint32_t match_rank_tier_;
    bool has_valid_match_;
    bool current_match_voted_radiant_;
    uint32_t end_time_;
    uint32_t event_id_;
    uint32_t current_streak_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanContentAssetStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanContentAssetStatus) */ {
 public:
  inline CMsgTeamFanContentAssetStatus() : CMsgTeamFanContentAssetStatus(nullptr) {}
  ~CMsgTeamFanContentAssetStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanContentAssetStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanContentAssetStatus(const CMsgTeamFanContentAssetStatus& from);
  CMsgTeamFanContentAssetStatus(CMsgTeamFanContentAssetStatus&& from) noexcept
    : CMsgTeamFanContentAssetStatus() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanContentAssetStatus& operator=(const CMsgTeamFanContentAssetStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanContentAssetStatus& operator=(CMsgTeamFanContentAssetStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanContentAssetStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanContentAssetStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanContentAssetStatus*>(
               &_CMsgTeamFanContentAssetStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgTeamFanContentAssetStatus& a, CMsgTeamFanContentAssetStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanContentAssetStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanContentAssetStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanContentAssetStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanContentAssetStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanContentAssetStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanContentAssetStatus& from) {
    CMsgTeamFanContentAssetStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanContentAssetStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanContentAssetStatus";
  }
  protected:
  explicit CMsgTeamFanContentAssetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIndexFieldNumber = 2,
    kAssetStatusFieldNumber = 3,
    kCrcFieldNumber = 4,
    kAssetTypeFieldNumber = 1,
  };
  // optional uint32 asset_index = 2;
  bool has_asset_index() const;
  private:
  bool _internal_has_asset_index() const;
  public:
  void clear_asset_index();
  uint32_t asset_index() const;
  void set_asset_index(uint32_t value);
  private:
  uint32_t _internal_asset_index() const;
  void _internal_set_asset_index(uint32_t value);
  public:

  // optional .ETeamFanContentAssetStatus asset_status = 3 [default = k_eFanContentAssetStatus_None];
  bool has_asset_status() const;
  private:
  bool _internal_has_asset_status() const;
  public:
  void clear_asset_status();
  ::ETeamFanContentAssetStatus asset_status() const;
  void set_asset_status(::ETeamFanContentAssetStatus value);
  private:
  ::ETeamFanContentAssetStatus _internal_asset_status() const;
  void _internal_set_asset_status(::ETeamFanContentAssetStatus value);
  public:

  // optional uint32 crc = 4;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  uint32_t crc() const;
  void set_crc(uint32_t value);
  private:
  uint32_t _internal_crc() const;
  void _internal_set_crc(uint32_t value);
  public:

  // optional .ETeamFanContentAssetType asset_type = 1 [default = k_eFanContentAssetType_LogoPNG];
  bool has_asset_type() const;
  private:
  bool _internal_has_asset_type() const;
  public:
  void clear_asset_type();
  ::ETeamFanContentAssetType asset_type() const;
  void set_asset_type(::ETeamFanContentAssetType value);
  private:
  ::ETeamFanContentAssetType _internal_asset_type() const;
  void _internal_set_asset_type(::ETeamFanContentAssetType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTeamFanContentAssetStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t asset_index_;
    int asset_status_;
    uint32_t crc_;
    int asset_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanContentAssetStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanContentAssetStatusResponse) */ {
 public:
  inline CMsgTeamFanContentAssetStatusResponse() : CMsgTeamFanContentAssetStatusResponse(nullptr) {}
  ~CMsgTeamFanContentAssetStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanContentAssetStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanContentAssetStatusResponse(const CMsgTeamFanContentAssetStatusResponse& from);
  CMsgTeamFanContentAssetStatusResponse(CMsgTeamFanContentAssetStatusResponse&& from) noexcept
    : CMsgTeamFanContentAssetStatusResponse() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanContentAssetStatusResponse& operator=(const CMsgTeamFanContentAssetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanContentAssetStatusResponse& operator=(CMsgTeamFanContentAssetStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanContentAssetStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanContentAssetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanContentAssetStatusResponse*>(
               &_CMsgTeamFanContentAssetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgTeamFanContentAssetStatusResponse& a, CMsgTeamFanContentAssetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanContentAssetStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanContentAssetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanContentAssetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanContentAssetStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanContentAssetStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanContentAssetStatusResponse& from) {
    CMsgTeamFanContentAssetStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanContentAssetStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanContentAssetStatusResponse";
  }
  protected:
  explicit CMsgTeamFanContentAssetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgTeamFanContentAssetStatusResponse_EResult EResult;
  static constexpr EResult k_eSuccess =
    CMsgTeamFanContentAssetStatusResponse_EResult_k_eSuccess;
  static constexpr EResult k_eInternalError =
    CMsgTeamFanContentAssetStatusResponse_EResult_k_eInternalError;
  static inline bool EResult_IsValid(int value) {
    return CMsgTeamFanContentAssetStatusResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgTeamFanContentAssetStatusResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgTeamFanContentAssetStatusResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgTeamFanContentAssetStatusResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgTeamFanContentAssetStatusResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgTeamFanContentAssetStatusResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgTeamFanContentAssetStatusResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgTeamFanContentAssetStatusResponse.EResult result = 1 [default = k_eSuccess];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgTeamFanContentAssetStatusResponse_EResult result() const;
  void set_result(::CMsgTeamFanContentAssetStatusResponse_EResult value);
  private:
  ::CMsgTeamFanContentAssetStatusResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgTeamFanContentAssetStatusResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTeamFanContentAssetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanContentStatus_TeamStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanContentStatus.TeamStatus) */ {
 public:
  inline CMsgTeamFanContentStatus_TeamStatus() : CMsgTeamFanContentStatus_TeamStatus(nullptr) {}
  ~CMsgTeamFanContentStatus_TeamStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanContentStatus_TeamStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanContentStatus_TeamStatus(const CMsgTeamFanContentStatus_TeamStatus& from);
  CMsgTeamFanContentStatus_TeamStatus(CMsgTeamFanContentStatus_TeamStatus&& from) noexcept
    : CMsgTeamFanContentStatus_TeamStatus() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanContentStatus_TeamStatus& operator=(const CMsgTeamFanContentStatus_TeamStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanContentStatus_TeamStatus& operator=(CMsgTeamFanContentStatus_TeamStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanContentStatus_TeamStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanContentStatus_TeamStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanContentStatus_TeamStatus*>(
               &_CMsgTeamFanContentStatus_TeamStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgTeamFanContentStatus_TeamStatus& a, CMsgTeamFanContentStatus_TeamStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanContentStatus_TeamStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanContentStatus_TeamStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanContentStatus_TeamStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanContentStatus_TeamStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanContentStatus_TeamStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanContentStatus_TeamStatus& from) {
    CMsgTeamFanContentStatus_TeamStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanContentStatus_TeamStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanContentStatus.TeamStatus";
  }
  protected:
  explicit CMsgTeamFanContentStatus_TeamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetStatusFieldNumber = 16,
    kNameFieldNumber = 1,
    kLogoUrlFieldNumber = 3,
    kAbbreviationFieldNumber = 9,
    kCommentFieldNumber = 14,
    kLanguagesFieldNumber = 19,
    kTeamIdFieldNumber = 2,
    kStatusFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kWorkshopAccountIdFieldNumber = 8,
    kUgcLogoFieldNumber = 7,
    kVoicelineCountFieldNumber = 10,
    kSprayCountFieldNumber = 11,
    kEmoticonCountFieldNumber = 12,
    kWallpaperCountFieldNumber = 13,
    kCommentTimestampFieldNumber = 15,
    kEmailTimestampFieldNumber = 17,
    kEmailTierFieldNumber = 18,
  };
  // repeated .CMsgTeamFanContentAssetStatus asset_status = 16;
  int asset_status_size() const;
  private:
  int _internal_asset_status_size() const;
  public:
  void clear_asset_status();
  ::CMsgTeamFanContentAssetStatus* mutable_asset_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAssetStatus >*
      mutable_asset_status();
  private:
  const ::CMsgTeamFanContentAssetStatus& _internal_asset_status(int index) const;
  ::CMsgTeamFanContentAssetStatus* _internal_add_asset_status();
  public:
  const ::CMsgTeamFanContentAssetStatus& asset_status(int index) const;
  ::CMsgTeamFanContentAssetStatus* add_asset_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAssetStatus >&
      asset_status() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string logo_url = 3;
  bool has_logo_url() const;
  private:
  bool _internal_has_logo_url() const;
  public:
  void clear_logo_url();
  const std::string& logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo_url();
  PROTOBUF_NODISCARD std::string* release_logo_url();
  void set_allocated_logo_url(std::string* logo_url);
  private:
  const std::string& _internal_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo_url(const std::string& value);
  std::string* _internal_mutable_logo_url();
  public:

  // optional string abbreviation = 9;
  bool has_abbreviation() const;
  private:
  bool _internal_has_abbreviation() const;
  public:
  void clear_abbreviation();
  const std::string& abbreviation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abbreviation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abbreviation();
  PROTOBUF_NODISCARD std::string* release_abbreviation();
  void set_allocated_abbreviation(std::string* abbreviation);
  private:
  const std::string& _internal_abbreviation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abbreviation(const std::string& value);
  std::string* _internal_mutable_abbreviation();
  public:

  // optional string comment = 14;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional string languages = 19;
  bool has_languages() const;
  private:
  bool _internal_has_languages() const;
  public:
  void clear_languages();
  const std::string& languages() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_languages(ArgT0&& arg0, ArgT... args);
  std::string* mutable_languages();
  PROTOBUF_NODISCARD std::string* release_languages();
  void set_allocated_languages(std::string* languages);
  private:
  const std::string& _internal_languages() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_languages(const std::string& value);
  std::string* _internal_mutable_languages();
  public:

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional .ETeamFanContentStatus status = 4 [default = TEAM_FAN_CONTENT_STATUS_INVALID];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::ETeamFanContentStatus status() const;
  void set_status(::ETeamFanContentStatus value);
  private:
  ::ETeamFanContentStatus _internal_status() const;
  void _internal_set_status(::ETeamFanContentStatus value);
  public:

  // optional uint32 timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 workshop_account_id = 8;
  bool has_workshop_account_id() const;
  private:
  bool _internal_has_workshop_account_id() const;
  public:
  void clear_workshop_account_id();
  uint32_t workshop_account_id() const;
  void set_workshop_account_id(uint32_t value);
  private:
  uint32_t _internal_workshop_account_id() const;
  void _internal_set_workshop_account_id(uint32_t value);
  public:

  // optional uint64 ugc_logo = 7;
  bool has_ugc_logo() const;
  private:
  bool _internal_has_ugc_logo() const;
  public:
  void clear_ugc_logo();
  uint64_t ugc_logo() const;
  void set_ugc_logo(uint64_t value);
  private:
  uint64_t _internal_ugc_logo() const;
  void _internal_set_ugc_logo(uint64_t value);
  public:

  // optional uint32 voiceline_count = 10;
  bool has_voiceline_count() const;
  private:
  bool _internal_has_voiceline_count() const;
  public:
  void clear_voiceline_count();
  uint32_t voiceline_count() const;
  void set_voiceline_count(uint32_t value);
  private:
  uint32_t _internal_voiceline_count() const;
  void _internal_set_voiceline_count(uint32_t value);
  public:

  // optional uint32 spray_count = 11;
  bool has_spray_count() const;
  private:
  bool _internal_has_spray_count() const;
  public:
  void clear_spray_count();
  uint32_t spray_count() const;
  void set_spray_count(uint32_t value);
  private:
  uint32_t _internal_spray_count() const;
  void _internal_set_spray_count(uint32_t value);
  public:

  // optional uint32 emoticon_count = 12;
  bool has_emoticon_count() const;
  private:
  bool _internal_has_emoticon_count() const;
  public:
  void clear_emoticon_count();
  uint32_t emoticon_count() const;
  void set_emoticon_count(uint32_t value);
  private:
  uint32_t _internal_emoticon_count() const;
  void _internal_set_emoticon_count(uint32_t value);
  public:

  // optional uint32 wallpaper_count = 13;
  bool has_wallpaper_count() const;
  private:
  bool _internal_has_wallpaper_count() const;
  public:
  void clear_wallpaper_count();
  uint32_t wallpaper_count() const;
  void set_wallpaper_count(uint32_t value);
  private:
  uint32_t _internal_wallpaper_count() const;
  void _internal_set_wallpaper_count(uint32_t value);
  public:

  // optional uint32 comment_timestamp = 15;
  bool has_comment_timestamp() const;
  private:
  bool _internal_has_comment_timestamp() const;
  public:
  void clear_comment_timestamp();
  uint32_t comment_timestamp() const;
  void set_comment_timestamp(uint32_t value);
  private:
  uint32_t _internal_comment_timestamp() const;
  void _internal_set_comment_timestamp(uint32_t value);
  public:

  // optional uint32 email_timestamp = 17;
  bool has_email_timestamp() const;
  private:
  bool _internal_has_email_timestamp() const;
  public:
  void clear_email_timestamp();
  uint32_t email_timestamp() const;
  void set_email_timestamp(uint32_t value);
  private:
  uint32_t _internal_email_timestamp() const;
  void _internal_set_email_timestamp(uint32_t value);
  public:

  // optional uint32 email_tier = 18;
  bool has_email_tier() const;
  private:
  bool _internal_has_email_tier() const;
  public:
  void clear_email_tier();
  uint32_t email_tier() const;
  void set_email_tier(uint32_t value);
  private:
  uint32_t _internal_email_tier() const;
  void _internal_set_email_tier(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTeamFanContentStatus.TeamStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAssetStatus > asset_status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abbreviation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr languages_;
    uint32_t team_id_;
    int status_;
    uint32_t timestamp_;
    uint32_t workshop_account_id_;
    uint64_t ugc_logo_;
    uint32_t voiceline_count_;
    uint32_t spray_count_;
    uint32_t emoticon_count_;
    uint32_t wallpaper_count_;
    uint32_t comment_timestamp_;
    uint32_t email_timestamp_;
    uint32_t email_tier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanContentStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanContentStatus) */ {
 public:
  inline CMsgTeamFanContentStatus() : CMsgTeamFanContentStatus(nullptr) {}
  ~CMsgTeamFanContentStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanContentStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanContentStatus(const CMsgTeamFanContentStatus& from);
  CMsgTeamFanContentStatus(CMsgTeamFanContentStatus&& from) noexcept
    : CMsgTeamFanContentStatus() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanContentStatus& operator=(const CMsgTeamFanContentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanContentStatus& operator=(CMsgTeamFanContentStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanContentStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanContentStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanContentStatus*>(
               &_CMsgTeamFanContentStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgTeamFanContentStatus& a, CMsgTeamFanContentStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanContentStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanContentStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanContentStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanContentStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanContentStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanContentStatus& from) {
    CMsgTeamFanContentStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanContentStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanContentStatus";
  }
  protected:
  explicit CMsgTeamFanContentStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgTeamFanContentStatus_TeamStatus TeamStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamStatusListFieldNumber = 1,
  };
  // repeated .CMsgTeamFanContentStatus.TeamStatus team_status_list = 1;
  int team_status_list_size() const;
  private:
  int _internal_team_status_list_size() const;
  public:
  void clear_team_status_list();
  ::CMsgTeamFanContentStatus_TeamStatus* mutable_team_status_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentStatus_TeamStatus >*
      mutable_team_status_list();
  private:
  const ::CMsgTeamFanContentStatus_TeamStatus& _internal_team_status_list(int index) const;
  ::CMsgTeamFanContentStatus_TeamStatus* _internal_add_team_status_list();
  public:
  const ::CMsgTeamFanContentStatus_TeamStatus& team_status_list(int index) const;
  ::CMsgTeamFanContentStatus_TeamStatus* add_team_status_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentStatus_TeamStatus >&
      team_status_list() const;

  // @@protoc_insertion_point(class_scope:CMsgTeamFanContentStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentStatus_TeamStatus > team_status_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanContentAutographStatus_AutographStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanContentAutographStatus.AutographStatus) */ {
 public:
  inline CMsgTeamFanContentAutographStatus_AutographStatus() : CMsgTeamFanContentAutographStatus_AutographStatus(nullptr) {}
  ~CMsgTeamFanContentAutographStatus_AutographStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanContentAutographStatus_AutographStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanContentAutographStatus_AutographStatus(const CMsgTeamFanContentAutographStatus_AutographStatus& from);
  CMsgTeamFanContentAutographStatus_AutographStatus(CMsgTeamFanContentAutographStatus_AutographStatus&& from) noexcept
    : CMsgTeamFanContentAutographStatus_AutographStatus() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanContentAutographStatus_AutographStatus& operator=(const CMsgTeamFanContentAutographStatus_AutographStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanContentAutographStatus_AutographStatus& operator=(CMsgTeamFanContentAutographStatus_AutographStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanContentAutographStatus_AutographStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanContentAutographStatus_AutographStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanContentAutographStatus_AutographStatus*>(
               &_CMsgTeamFanContentAutographStatus_AutographStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgTeamFanContentAutographStatus_AutographStatus& a, CMsgTeamFanContentAutographStatus_AutographStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanContentAutographStatus_AutographStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanContentAutographStatus_AutographStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanContentAutographStatus_AutographStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanContentAutographStatus_AutographStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanContentAutographStatus_AutographStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanContentAutographStatus_AutographStatus& from) {
    CMsgTeamFanContentAutographStatus_AutographStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanContentAutographStatus_AutographStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanContentAutographStatus.AutographStatus";
  }
  protected:
  explicit CMsgTeamFanContentAutographStatus_AutographStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProNameFieldNumber = 1,
    kFileFieldNumber = 4,
    kAccountIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // optional string pro_name = 1;
  bool has_pro_name() const;
  private:
  bool _internal_has_pro_name() const;
  public:
  void clear_pro_name();
  const std::string& pro_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pro_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pro_name();
  PROTOBUF_NODISCARD std::string* release_pro_name();
  void set_allocated_pro_name(std::string* pro_name);
  private:
  const std::string& _internal_pro_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pro_name(const std::string& value);
  std::string* _internal_mutable_pro_name();
  public:

  // optional string file = 4;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTeamFanContentAutographStatus.AutographStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    uint32_t account_id_;
    uint32_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanContentAutographStatus_TeamStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanContentAutographStatus.TeamStatus) */ {
 public:
  inline CMsgTeamFanContentAutographStatus_TeamStatus() : CMsgTeamFanContentAutographStatus_TeamStatus(nullptr) {}
  ~CMsgTeamFanContentAutographStatus_TeamStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanContentAutographStatus_TeamStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanContentAutographStatus_TeamStatus(const CMsgTeamFanContentAutographStatus_TeamStatus& from);
  CMsgTeamFanContentAutographStatus_TeamStatus(CMsgTeamFanContentAutographStatus_TeamStatus&& from) noexcept
    : CMsgTeamFanContentAutographStatus_TeamStatus() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanContentAutographStatus_TeamStatus& operator=(const CMsgTeamFanContentAutographStatus_TeamStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanContentAutographStatus_TeamStatus& operator=(CMsgTeamFanContentAutographStatus_TeamStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanContentAutographStatus_TeamStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanContentAutographStatus_TeamStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanContentAutographStatus_TeamStatus*>(
               &_CMsgTeamFanContentAutographStatus_TeamStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgTeamFanContentAutographStatus_TeamStatus& a, CMsgTeamFanContentAutographStatus_TeamStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanContentAutographStatus_TeamStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanContentAutographStatus_TeamStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanContentAutographStatus_TeamStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanContentAutographStatus_TeamStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanContentAutographStatus_TeamStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanContentAutographStatus_TeamStatus& from) {
    CMsgTeamFanContentAutographStatus_TeamStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanContentAutographStatus_TeamStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanContentAutographStatus.TeamStatus";
  }
  protected:
  explicit CMsgTeamFanContentAutographStatus_TeamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutographsFieldNumber = 3,
    kNameFieldNumber = 1,
    kTeamIdFieldNumber = 2,
    kWorkshopAccountIdFieldNumber = 4,
  };
  // repeated .CMsgTeamFanContentAutographStatus.AutographStatus autographs = 3;
  int autographs_size() const;
  private:
  int _internal_autographs_size() const;
  public:
  void clear_autographs();
  ::CMsgTeamFanContentAutographStatus_AutographStatus* mutable_autographs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_AutographStatus >*
      mutable_autographs();
  private:
  const ::CMsgTeamFanContentAutographStatus_AutographStatus& _internal_autographs(int index) const;
  ::CMsgTeamFanContentAutographStatus_AutographStatus* _internal_add_autographs();
  public:
  const ::CMsgTeamFanContentAutographStatus_AutographStatus& autographs(int index) const;
  ::CMsgTeamFanContentAutographStatus_AutographStatus* add_autographs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_AutographStatus >&
      autographs() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 workshop_account_id = 4;
  bool has_workshop_account_id() const;
  private:
  bool _internal_has_workshop_account_id() const;
  public:
  void clear_workshop_account_id();
  uint32_t workshop_account_id() const;
  void set_workshop_account_id(uint32_t value);
  private:
  uint32_t _internal_workshop_account_id() const;
  void _internal_set_workshop_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTeamFanContentAutographStatus.TeamStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_AutographStatus > autographs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t team_id_;
    uint32_t workshop_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanContentAutographStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanContentAutographStatus) */ {
 public:
  inline CMsgTeamFanContentAutographStatus() : CMsgTeamFanContentAutographStatus(nullptr) {}
  ~CMsgTeamFanContentAutographStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanContentAutographStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanContentAutographStatus(const CMsgTeamFanContentAutographStatus& from);
  CMsgTeamFanContentAutographStatus(CMsgTeamFanContentAutographStatus&& from) noexcept
    : CMsgTeamFanContentAutographStatus() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanContentAutographStatus& operator=(const CMsgTeamFanContentAutographStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanContentAutographStatus& operator=(CMsgTeamFanContentAutographStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanContentAutographStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanContentAutographStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanContentAutographStatus*>(
               &_CMsgTeamFanContentAutographStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgTeamFanContentAutographStatus& a, CMsgTeamFanContentAutographStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanContentAutographStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanContentAutographStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanContentAutographStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanContentAutographStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanContentAutographStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanContentAutographStatus& from) {
    CMsgTeamFanContentAutographStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanContentAutographStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanContentAutographStatus";
  }
  protected:
  explicit CMsgTeamFanContentAutographStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgTeamFanContentAutographStatus_AutographStatus AutographStatus;
  typedef CMsgTeamFanContentAutographStatus_TeamStatus TeamStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamAutographsFieldNumber = 1,
  };
  // repeated .CMsgTeamFanContentAutographStatus.TeamStatus team_autographs = 1;
  int team_autographs_size() const;
  private:
  int _internal_team_autographs_size() const;
  public:
  void clear_team_autographs();
  ::CMsgTeamFanContentAutographStatus_TeamStatus* mutable_team_autographs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_TeamStatus >*
      mutable_team_autographs();
  private:
  const ::CMsgTeamFanContentAutographStatus_TeamStatus& _internal_team_autographs(int index) const;
  ::CMsgTeamFanContentAutographStatus_TeamStatus* _internal_add_team_autographs();
  public:
  const ::CMsgTeamFanContentAutographStatus_TeamStatus& team_autographs(int index) const;
  ::CMsgTeamFanContentAutographStatus_TeamStatus* add_team_autographs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_TeamStatus >&
      team_autographs() const;

  // @@protoc_insertion_point(class_scope:CMsgTeamFanContentAutographStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_TeamStatus > team_autographs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPCEvent_PhaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPCEvent.PhaseInfo) */ {
 public:
  inline CMsgDPCEvent_PhaseInfo() : CMsgDPCEvent_PhaseInfo(nullptr) {}
  ~CMsgDPCEvent_PhaseInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPCEvent_PhaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPCEvent_PhaseInfo(const CMsgDPCEvent_PhaseInfo& from);
  CMsgDPCEvent_PhaseInfo(CMsgDPCEvent_PhaseInfo&& from) noexcept
    : CMsgDPCEvent_PhaseInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDPCEvent_PhaseInfo& operator=(const CMsgDPCEvent_PhaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPCEvent_PhaseInfo& operator=(CMsgDPCEvent_PhaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPCEvent_PhaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPCEvent_PhaseInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDPCEvent_PhaseInfo*>(
               &_CMsgDPCEvent_PhaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgDPCEvent_PhaseInfo& a, CMsgDPCEvent_PhaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPCEvent_PhaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPCEvent_PhaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPCEvent_PhaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPCEvent_PhaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPCEvent_PhaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPCEvent_PhaseInfo& from) {
    CMsgDPCEvent_PhaseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPCEvent_PhaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPCEvent.PhaseInfo";
  }
  protected:
  explicit CMsgDPCEvent_PhaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseFieldNumber = 1,
    kNodeGroupIdFieldNumber = 2,
  };
  // optional .CMsgDPCEvent.ELeagueEventPhase phase = 1 [default = PHASE_INVALID];
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  ::CMsgDPCEvent_ELeagueEventPhase phase() const;
  void set_phase(::CMsgDPCEvent_ELeagueEventPhase value);
  private:
  ::CMsgDPCEvent_ELeagueEventPhase _internal_phase() const;
  void _internal_set_phase(::CMsgDPCEvent_ELeagueEventPhase value);
  public:

  // optional uint32 node_group_id = 2;
  bool has_node_group_id() const;
  private:
  bool _internal_has_node_group_id() const;
  public:
  void clear_node_group_id();
  uint32_t node_group_id() const;
  void set_node_group_id(uint32_t value);
  private:
  uint32_t _internal_node_group_id() const;
  void _internal_set_node_group_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDPCEvent.PhaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int phase_;
    uint32_t node_group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPCEvent_League final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPCEvent.League) */ {
 public:
  inline CMsgDPCEvent_League() : CMsgDPCEvent_League(nullptr) {}
  ~CMsgDPCEvent_League() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPCEvent_League(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPCEvent_League(const CMsgDPCEvent_League& from);
  CMsgDPCEvent_League(CMsgDPCEvent_League&& from) noexcept
    : CMsgDPCEvent_League() {
    *this = ::std::move(from);
  }

  inline CMsgDPCEvent_League& operator=(const CMsgDPCEvent_League& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPCEvent_League& operator=(CMsgDPCEvent_League&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPCEvent_League& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPCEvent_League* internal_default_instance() {
    return reinterpret_cast<const CMsgDPCEvent_League*>(
               &_CMsgDPCEvent_League_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgDPCEvent_League& a, CMsgDPCEvent_League& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPCEvent_League* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPCEvent_League* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPCEvent_League* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPCEvent_League>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPCEvent_League& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPCEvent_League& from) {
    CMsgDPCEvent_League::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPCEvent_League* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPCEvent.League";
  }
  protected:
  explicit CMsgDPCEvent_League(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhasesFieldNumber = 4,
    kRegionFieldNumber = 1,
    kDivisionFieldNumber = 2,
    kLeagueIdFieldNumber = 3,
  };
  // repeated .CMsgDPCEvent.PhaseInfo phases = 4;
  int phases_size() const;
  private:
  int _internal_phases_size() const;
  public:
  void clear_phases();
  ::CMsgDPCEvent_PhaseInfo* mutable_phases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_PhaseInfo >*
      mutable_phases();
  private:
  const ::CMsgDPCEvent_PhaseInfo& _internal_phases(int index) const;
  ::CMsgDPCEvent_PhaseInfo* _internal_add_phases();
  public:
  const ::CMsgDPCEvent_PhaseInfo& phases(int index) const;
  ::CMsgDPCEvent_PhaseInfo* add_phases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_PhaseInfo >&
      phases() const;

  // optional .ELeagueRegion region = 1 [default = LEAGUE_REGION_UNSET];
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::ELeagueRegion region() const;
  void set_region(::ELeagueRegion value);
  private:
  ::ELeagueRegion _internal_region() const;
  void _internal_set_region(::ELeagueRegion value);
  public:

  // optional .ELeagueDivision division = 2 [default = LEAGUE_DIVISION_UNSET];
  bool has_division() const;
  private:
  bool _internal_has_division() const;
  public:
  void clear_division();
  ::ELeagueDivision division() const;
  void set_division(::ELeagueDivision value);
  private:
  ::ELeagueDivision _internal_division() const;
  void _internal_set_division(::ELeagueDivision value);
  public:

  // optional uint32 league_id = 3;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDPCEvent.League)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_PhaseInfo > phases_;
    int region_;
    int division_;
    uint32_t league_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPCEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPCEvent) */ {
 public:
  inline CMsgDPCEvent() : CMsgDPCEvent(nullptr) {}
  ~CMsgDPCEvent() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPCEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPCEvent(const CMsgDPCEvent& from);
  CMsgDPCEvent(CMsgDPCEvent&& from) noexcept
    : CMsgDPCEvent() {
    *this = ::std::move(from);
  }

  inline CMsgDPCEvent& operator=(const CMsgDPCEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPCEvent& operator=(CMsgDPCEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPCEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPCEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgDPCEvent*>(
               &_CMsgDPCEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgDPCEvent& a, CMsgDPCEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPCEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPCEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPCEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPCEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPCEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPCEvent& from) {
    CMsgDPCEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPCEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPCEvent";
  }
  protected:
  explicit CMsgDPCEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDPCEvent_PhaseInfo PhaseInfo;
  typedef CMsgDPCEvent_League League;

  typedef CMsgDPCEvent_ELeagueEvent ELeagueEvent;
  static constexpr ELeagueEvent EVENT_INVALID =
    CMsgDPCEvent_ELeagueEvent_EVENT_INVALID;
  static constexpr ELeagueEvent SPRING_2021_LEAGUE =
    CMsgDPCEvent_ELeagueEvent_SPRING_2021_LEAGUE;
  static constexpr ELeagueEvent SPRING_2021_MAJOR =
    CMsgDPCEvent_ELeagueEvent_SPRING_2021_MAJOR;
  static constexpr ELeagueEvent INTERNATIONAL_2021_QUALIFIERS =
    CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2021_QUALIFIERS;
  static constexpr ELeagueEvent INTERNATIONAL_2021 =
    CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2021;
  static constexpr ELeagueEvent WINTER_2021_LEAGUE =
    CMsgDPCEvent_ELeagueEvent_WINTER_2021_LEAGUE;
  static constexpr ELeagueEvent WINTER_2021_LEAGUE_FINALS =
    CMsgDPCEvent_ELeagueEvent_WINTER_2021_LEAGUE_FINALS;
  static constexpr ELeagueEvent SPRING_2022_LEAGUE =
    CMsgDPCEvent_ELeagueEvent_SPRING_2022_LEAGUE;
  static constexpr ELeagueEvent SPRING_2022_MAJOR =
    CMsgDPCEvent_ELeagueEvent_SPRING_2022_MAJOR;
  static constexpr ELeagueEvent SUMMER_2022_LEAGUE =
    CMsgDPCEvent_ELeagueEvent_SUMMER_2022_LEAGUE;
  static constexpr ELeagueEvent SUMMER_2022_MAJOR =
    CMsgDPCEvent_ELeagueEvent_SUMMER_2022_MAJOR;
  static constexpr ELeagueEvent INTERNATIONAL_2022 =
    CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2022;
  static constexpr ELeagueEvent CHINA_REGIONAL_FINALS =
    CMsgDPCEvent_ELeagueEvent_CHINA_REGIONAL_FINALS;
  static constexpr ELeagueEvent INTERNATIONAL_2022_REGIONAL_QUALIFIERS =
    CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2022_REGIONAL_QUALIFIERS;
  static constexpr ELeagueEvent INTERNATIONAL_2022_LAST_CHANCE_QUALIFIERS =
    CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2022_LAST_CHANCE_QUALIFIERS;
  static constexpr ELeagueEvent WINTER_2023_LEAGUE =
    CMsgDPCEvent_ELeagueEvent_WINTER_2023_LEAGUE;
  static constexpr ELeagueEvent WINTER_2023_MAJOR =
    CMsgDPCEvent_ELeagueEvent_WINTER_2023_MAJOR;
  static constexpr ELeagueEvent SPRING_2023_LEAGUE =
    CMsgDPCEvent_ELeagueEvent_SPRING_2023_LEAGUE;
  static constexpr ELeagueEvent SPRING_2023_MAJOR =
    CMsgDPCEvent_ELeagueEvent_SPRING_2023_MAJOR;
  static constexpr ELeagueEvent SUMMER_2023_LEAGUE =
    CMsgDPCEvent_ELeagueEvent_SUMMER_2023_LEAGUE;
  static constexpr ELeagueEvent SUMMER_2023_MAJOR =
    CMsgDPCEvent_ELeagueEvent_SUMMER_2023_MAJOR;
  static constexpr ELeagueEvent INTERNATIONAL_2023 =
    CMsgDPCEvent_ELeagueEvent_INTERNATIONAL_2023;
  static inline bool ELeagueEvent_IsValid(int value) {
    return CMsgDPCEvent_ELeagueEvent_IsValid(value);
  }
  static constexpr ELeagueEvent ELeagueEvent_MIN =
    CMsgDPCEvent_ELeagueEvent_ELeagueEvent_MIN;
  static constexpr ELeagueEvent ELeagueEvent_MAX =
    CMsgDPCEvent_ELeagueEvent_ELeagueEvent_MAX;
  static constexpr int ELeagueEvent_ARRAYSIZE =
    CMsgDPCEvent_ELeagueEvent_ELeagueEvent_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ELeagueEvent_descriptor() {
    return CMsgDPCEvent_ELeagueEvent_descriptor();
  }
  template<typename T>
  static inline const std::string& ELeagueEvent_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ELeagueEvent>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ELeagueEvent_Name.");
    return CMsgDPCEvent_ELeagueEvent_Name(enum_t_value);
  }
  static inline bool ELeagueEvent_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ELeagueEvent* value) {
    return CMsgDPCEvent_ELeagueEvent_Parse(name, value);
  }

  typedef CMsgDPCEvent_ELeagueEventPhase ELeagueEventPhase;
  static constexpr ELeagueEventPhase PHASE_INVALID =
    CMsgDPCEvent_ELeagueEventPhase_PHASE_INVALID;
  static constexpr ELeagueEventPhase WILD_CARD =
    CMsgDPCEvent_ELeagueEventPhase_WILD_CARD;
  static constexpr ELeagueEventPhase GROUP_STAGE =
    CMsgDPCEvent_ELeagueEventPhase_GROUP_STAGE;
  static constexpr ELeagueEventPhase GROUP_A =
    CMsgDPCEvent_ELeagueEventPhase_GROUP_A;
  static constexpr ELeagueEventPhase GROUP_B =
    CMsgDPCEvent_ELeagueEventPhase_GROUP_B;
  static constexpr ELeagueEventPhase OVERALL =
    CMsgDPCEvent_ELeagueEventPhase_OVERALL;
  static constexpr ELeagueEventPhase PLAYOFF =
    CMsgDPCEvent_ELeagueEventPhase_PLAYOFF;
  static constexpr ELeagueEventPhase RESULTS =
    CMsgDPCEvent_ELeagueEventPhase_RESULTS;
  static inline bool ELeagueEventPhase_IsValid(int value) {
    return CMsgDPCEvent_ELeagueEventPhase_IsValid(value);
  }
  static constexpr ELeagueEventPhase ELeagueEventPhase_MIN =
    CMsgDPCEvent_ELeagueEventPhase_ELeagueEventPhase_MIN;
  static constexpr ELeagueEventPhase ELeagueEventPhase_MAX =
    CMsgDPCEvent_ELeagueEventPhase_ELeagueEventPhase_MAX;
  static constexpr int ELeagueEventPhase_ARRAYSIZE =
    CMsgDPCEvent_ELeagueEventPhase_ELeagueEventPhase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ELeagueEventPhase_descriptor() {
    return CMsgDPCEvent_ELeagueEventPhase_descriptor();
  }
  template<typename T>
  static inline const std::string& ELeagueEventPhase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ELeagueEventPhase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ELeagueEventPhase_Name.");
    return CMsgDPCEvent_ELeagueEventPhase_Name(enum_t_value);
  }
  static inline bool ELeagueEventPhase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ELeagueEventPhase* value) {
    return CMsgDPCEvent_ELeagueEventPhase_Parse(name, value);
  }

  typedef CMsgDPCEvent_ELeagueEventType ELeagueEventType;
  static constexpr ELeagueEventType UNKNOWN =
    CMsgDPCEvent_ELeagueEventType_UNKNOWN;
  static constexpr ELeagueEventType LEAGUE =
    CMsgDPCEvent_ELeagueEventType_LEAGUE;
  static constexpr ELeagueEventType MAJOR =
    CMsgDPCEvent_ELeagueEventType_MAJOR;
  static constexpr ELeagueEventType INTERNATIONAL_QUALIFIERS =
    CMsgDPCEvent_ELeagueEventType_INTERNATIONAL_QUALIFIERS;
  static constexpr ELeagueEventType INTERNATIONAL =
    CMsgDPCEvent_ELeagueEventType_INTERNATIONAL;
  static constexpr ELeagueEventType LEAGUE_FINALS =
    CMsgDPCEvent_ELeagueEventType_LEAGUE_FINALS;
  static inline bool ELeagueEventType_IsValid(int value) {
    return CMsgDPCEvent_ELeagueEventType_IsValid(value);
  }
  static constexpr ELeagueEventType ELeagueEventType_MIN =
    CMsgDPCEvent_ELeagueEventType_ELeagueEventType_MIN;
  static constexpr ELeagueEventType ELeagueEventType_MAX =
    CMsgDPCEvent_ELeagueEventType_ELeagueEventType_MAX;
  static constexpr int ELeagueEventType_ARRAYSIZE =
    CMsgDPCEvent_ELeagueEventType_ELeagueEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ELeagueEventType_descriptor() {
    return CMsgDPCEvent_ELeagueEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& ELeagueEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ELeagueEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ELeagueEventType_Name.");
    return CMsgDPCEvent_ELeagueEventType_Name(enum_t_value);
  }
  static inline bool ELeagueEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ELeagueEventType* value) {
    return CMsgDPCEvent_ELeagueEventType_Parse(name, value);
  }

  typedef CMsgDPCEvent_ETour ETour;
  static constexpr ETour TOUR_NONE =
    CMsgDPCEvent_ETour_TOUR_NONE;
  static constexpr ETour TOUR_1 =
    CMsgDPCEvent_ETour_TOUR_1;
  static constexpr ETour TOUR_2 =
    CMsgDPCEvent_ETour_TOUR_2;
  static constexpr ETour TOUR_3 =
    CMsgDPCEvent_ETour_TOUR_3;
  static inline bool ETour_IsValid(int value) {
    return CMsgDPCEvent_ETour_IsValid(value);
  }
  static constexpr ETour ETour_MIN =
    CMsgDPCEvent_ETour_ETour_MIN;
  static constexpr ETour ETour_MAX =
    CMsgDPCEvent_ETour_ETour_MAX;
  static constexpr int ETour_ARRAYSIZE =
    CMsgDPCEvent_ETour_ETour_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ETour_descriptor() {
    return CMsgDPCEvent_ETour_descriptor();
  }
  template<typename T>
  static inline const std::string& ETour_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ETour>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ETour_Name.");
    return CMsgDPCEvent_ETour_Name(enum_t_value);
  }
  static inline bool ETour_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ETour* value) {
    return CMsgDPCEvent_ETour_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeaguesFieldNumber = 3,
    kMulticastStreamsFieldNumber = 9,
    kEventNameFieldNumber = 7,
    kEventFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kRegistrationPeriodFieldNumber = 4,
    kMulticastLeagueIdFieldNumber = 8,
    kIsEventUpcomingFieldNumber = 5,
    kIsEventCompletedFieldNumber = 6,
    kIsFantasyEnabledFieldNumber = 15,
    kTourFieldNumber = 10,
    kTimestampDropLockFieldNumber = 12,
    kTimestampAddLockFieldNumber = 13,
    kTimestampContentDeadlineFieldNumber = 14,
  };
  // repeated .CMsgDPCEvent.League leagues = 3;
  int leagues_size() const;
  private:
  int _internal_leagues_size() const;
  public:
  void clear_leagues();
  ::CMsgDPCEvent_League* mutable_leagues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_League >*
      mutable_leagues();
  private:
  const ::CMsgDPCEvent_League& _internal_leagues(int index) const;
  ::CMsgDPCEvent_League* _internal_add_leagues();
  public:
  const ::CMsgDPCEvent_League& leagues(int index) const;
  ::CMsgDPCEvent_League* add_leagues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_League >&
      leagues() const;

  // repeated uint32 multicast_streams = 9;
  int multicast_streams_size() const;
  private:
  int _internal_multicast_streams_size() const;
  public:
  void clear_multicast_streams();
  private:
  uint32_t _internal_multicast_streams(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_multicast_streams() const;
  void _internal_add_multicast_streams(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_multicast_streams();
  public:
  uint32_t multicast_streams(int index) const;
  void set_multicast_streams(int index, uint32_t value);
  void add_multicast_streams(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      multicast_streams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_multicast_streams();

  // optional string event_name = 7;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional .CMsgDPCEvent.ELeagueEvent event = 1 [default = EVENT_INVALID];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::CMsgDPCEvent_ELeagueEvent event() const;
  void set_event(::CMsgDPCEvent_ELeagueEvent value);
  private:
  ::CMsgDPCEvent_ELeagueEvent _internal_event() const;
  void _internal_set_event(::CMsgDPCEvent_ELeagueEvent value);
  public:

  // optional .CMsgDPCEvent.ELeagueEventType event_type = 2 [default = UNKNOWN];
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::CMsgDPCEvent_ELeagueEventType event_type() const;
  void set_event_type(::CMsgDPCEvent_ELeagueEventType value);
  private:
  ::CMsgDPCEvent_ELeagueEventType _internal_event_type() const;
  void _internal_set_event_type(::CMsgDPCEvent_ELeagueEventType value);
  public:

  // optional uint32 registration_period = 4;
  bool has_registration_period() const;
  private:
  bool _internal_has_registration_period() const;
  public:
  void clear_registration_period();
  uint32_t registration_period() const;
  void set_registration_period(uint32_t value);
  private:
  uint32_t _internal_registration_period() const;
  void _internal_set_registration_period(uint32_t value);
  public:

  // optional uint32 multicast_league_id = 8;
  bool has_multicast_league_id() const;
  private:
  bool _internal_has_multicast_league_id() const;
  public:
  void clear_multicast_league_id();
  uint32_t multicast_league_id() const;
  void set_multicast_league_id(uint32_t value);
  private:
  uint32_t _internal_multicast_league_id() const;
  void _internal_set_multicast_league_id(uint32_t value);
  public:

  // optional bool is_event_upcoming = 5;
  bool has_is_event_upcoming() const;
  private:
  bool _internal_has_is_event_upcoming() const;
  public:
  void clear_is_event_upcoming();
  bool is_event_upcoming() const;
  void set_is_event_upcoming(bool value);
  private:
  bool _internal_is_event_upcoming() const;
  void _internal_set_is_event_upcoming(bool value);
  public:

  // optional bool is_event_completed = 6;
  bool has_is_event_completed() const;
  private:
  bool _internal_has_is_event_completed() const;
  public:
  void clear_is_event_completed();
  bool is_event_completed() const;
  void set_is_event_completed(bool value);
  private:
  bool _internal_is_event_completed() const;
  void _internal_set_is_event_completed(bool value);
  public:

  // optional bool is_fantasy_enabled = 15;
  bool has_is_fantasy_enabled() const;
  private:
  bool _internal_has_is_fantasy_enabled() const;
  public:
  void clear_is_fantasy_enabled();
  bool is_fantasy_enabled() const;
  void set_is_fantasy_enabled(bool value);
  private:
  bool _internal_is_fantasy_enabled() const;
  void _internal_set_is_fantasy_enabled(bool value);
  public:

  // optional .CMsgDPCEvent.ETour tour = 10 [default = TOUR_NONE];
  bool has_tour() const;
  private:
  bool _internal_has_tour() const;
  public:
  void clear_tour();
  ::CMsgDPCEvent_ETour tour() const;
  void set_tour(::CMsgDPCEvent_ETour value);
  private:
  ::CMsgDPCEvent_ETour _internal_tour() const;
  void _internal_set_tour(::CMsgDPCEvent_ETour value);
  public:

  // optional uint32 timestamp_drop_lock = 12;
  bool has_timestamp_drop_lock() const;
  private:
  bool _internal_has_timestamp_drop_lock() const;
  public:
  void clear_timestamp_drop_lock();
  uint32_t timestamp_drop_lock() const;
  void set_timestamp_drop_lock(uint32_t value);
  private:
  uint32_t _internal_timestamp_drop_lock() const;
  void _internal_set_timestamp_drop_lock(uint32_t value);
  public:

  // optional uint32 timestamp_add_lock = 13;
  bool has_timestamp_add_lock() const;
  private:
  bool _internal_has_timestamp_add_lock() const;
  public:
  void clear_timestamp_add_lock();
  uint32_t timestamp_add_lock() const;
  void set_timestamp_add_lock(uint32_t value);
  private:
  uint32_t _internal_timestamp_add_lock() const;
  void _internal_set_timestamp_add_lock(uint32_t value);
  public:

  // optional uint32 timestamp_content_deadline = 14;
  bool has_timestamp_content_deadline() const;
  private:
  bool _internal_has_timestamp_content_deadline() const;
  public:
  void clear_timestamp_content_deadline();
  uint32_t timestamp_content_deadline() const;
  void set_timestamp_content_deadline(uint32_t value);
  private:
  uint32_t _internal_timestamp_content_deadline() const;
  void _internal_set_timestamp_content_deadline(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDPCEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_League > leagues_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > multicast_streams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
    int event_;
    int event_type_;
    uint32_t registration_period_;
    uint32_t multicast_league_id_;
    bool is_event_upcoming_;
    bool is_event_completed_;
    bool is_fantasy_enabled_;
    int tour_;
    uint32_t timestamp_drop_lock_;
    uint32_t timestamp_add_lock_;
    uint32_t timestamp_content_deadline_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPCEventList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPCEventList) */ {
 public:
  inline CMsgDPCEventList() : CMsgDPCEventList(nullptr) {}
  ~CMsgDPCEventList() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPCEventList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPCEventList(const CMsgDPCEventList& from);
  CMsgDPCEventList(CMsgDPCEventList&& from) noexcept
    : CMsgDPCEventList() {
    *this = ::std::move(from);
  }

  inline CMsgDPCEventList& operator=(const CMsgDPCEventList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPCEventList& operator=(CMsgDPCEventList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPCEventList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPCEventList* internal_default_instance() {
    return reinterpret_cast<const CMsgDPCEventList*>(
               &_CMsgDPCEventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgDPCEventList& a, CMsgDPCEventList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPCEventList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPCEventList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPCEventList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPCEventList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPCEventList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPCEventList& from) {
    CMsgDPCEventList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPCEventList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPCEventList";
  }
  protected:
  explicit CMsgDPCEventList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .CMsgDPCEvent events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::CMsgDPCEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent >*
      mutable_events();
  private:
  const ::CMsgDPCEvent& _internal_events(int index) const;
  ::CMsgDPCEvent* _internal_add_events();
  public:
  const ::CMsgDPCEvent& events(int index) const;
  ::CMsgDPCEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:CMsgDPCEventList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent > events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardLineup_CardBonus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardLineup.CardBonus) */ {
 public:
  inline CMsgDOTAFantasyCardLineup_CardBonus() : CMsgDOTAFantasyCardLineup_CardBonus(nullptr) {}
  ~CMsgDOTAFantasyCardLineup_CardBonus() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardLineup_CardBonus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardLineup_CardBonus(const CMsgDOTAFantasyCardLineup_CardBonus& from);
  CMsgDOTAFantasyCardLineup_CardBonus(CMsgDOTAFantasyCardLineup_CardBonus&& from) noexcept
    : CMsgDOTAFantasyCardLineup_CardBonus() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardLineup_CardBonus& operator=(const CMsgDOTAFantasyCardLineup_CardBonus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardLineup_CardBonus& operator=(CMsgDOTAFantasyCardLineup_CardBonus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardLineup_CardBonus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardLineup_CardBonus* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardLineup_CardBonus*>(
               &_CMsgDOTAFantasyCardLineup_CardBonus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgDOTAFantasyCardLineup_CardBonus& a, CMsgDOTAFantasyCardLineup_CardBonus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardLineup_CardBonus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardLineup_CardBonus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardLineup_CardBonus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardLineup_CardBonus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardLineup_CardBonus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardLineup_CardBonus& from) {
    CMsgDOTAFantasyCardLineup_CardBonus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardLineup_CardBonus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardLineup.CardBonus";
  }
  protected:
  explicit CMsgDOTAFantasyCardLineup_CardBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonusStatFieldNumber = 1,
    kBonusValueFieldNumber = 2,
  };
  // optional uint32 bonus_stat = 1;
  bool has_bonus_stat() const;
  private:
  bool _internal_has_bonus_stat() const;
  public:
  void clear_bonus_stat();
  uint32_t bonus_stat() const;
  void set_bonus_stat(uint32_t value);
  private:
  uint32_t _internal_bonus_stat() const;
  void _internal_set_bonus_stat(uint32_t value);
  public:

  // optional uint32 bonus_value = 2;
  bool has_bonus_value() const;
  private:
  bool _internal_has_bonus_value() const;
  public:
  void clear_bonus_value();
  uint32_t bonus_value() const;
  void set_bonus_value(uint32_t value);
  private:
  uint32_t _internal_bonus_value() const;
  void _internal_set_bonus_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardLineup.CardBonus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t bonus_stat_;
    uint32_t bonus_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardLineup_Card final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardLineup.Card) */ {
 public:
  inline CMsgDOTAFantasyCardLineup_Card() : CMsgDOTAFantasyCardLineup_Card(nullptr) {}
  ~CMsgDOTAFantasyCardLineup_Card() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardLineup_Card(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardLineup_Card(const CMsgDOTAFantasyCardLineup_Card& from);
  CMsgDOTAFantasyCardLineup_Card(CMsgDOTAFantasyCardLineup_Card&& from) noexcept
    : CMsgDOTAFantasyCardLineup_Card() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardLineup_Card& operator=(const CMsgDOTAFantasyCardLineup_Card& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardLineup_Card& operator=(CMsgDOTAFantasyCardLineup_Card&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardLineup_Card& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardLineup_Card* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardLineup_Card*>(
               &_CMsgDOTAFantasyCardLineup_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgDOTAFantasyCardLineup_Card& a, CMsgDOTAFantasyCardLineup_Card& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardLineup_Card* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardLineup_Card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardLineup_Card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardLineup_Card>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardLineup_Card& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardLineup_Card& from) {
    CMsgDOTAFantasyCardLineup_Card::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardLineup_Card* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardLineup.Card";
  }
  protected:
  explicit CMsgDOTAFantasyCardLineup_Card(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonusesFieldNumber = 6,
    kPlayerNameFieldNumber = 2,
    kTeamNameFieldNumber = 4,
    kPlayerAccountIdFieldNumber = 1,
    kTeamIdFieldNumber = 3,
    kRoleFieldNumber = 5,
    kScoreFieldNumber = 7,
    kItemIdFieldNumber = 9,
    kFinalizedFieldNumber = 8,
  };
  // repeated .CMsgDOTAFantasyCardLineup.CardBonus bonuses = 6;
  int bonuses_size() const;
  private:
  int _internal_bonuses_size() const;
  public:
  void clear_bonuses();
  ::CMsgDOTAFantasyCardLineup_CardBonus* mutable_bonuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_CardBonus >*
      mutable_bonuses();
  private:
  const ::CMsgDOTAFantasyCardLineup_CardBonus& _internal_bonuses(int index) const;
  ::CMsgDOTAFantasyCardLineup_CardBonus* _internal_add_bonuses();
  public:
  const ::CMsgDOTAFantasyCardLineup_CardBonus& bonuses(int index) const;
  ::CMsgDOTAFantasyCardLineup_CardBonus* add_bonuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_CardBonus >&
      bonuses() const;

  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint32 player_account_id = 1;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  uint32_t player_account_id() const;
  void set_player_account_id(uint32_t value);
  private:
  uint32_t _internal_player_account_id() const;
  void _internal_set_player_account_id(uint32_t value);
  public:

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 role = 5;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // optional float score = 7;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional uint64 item_id = 9;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional bool finalized = 8;
  bool has_finalized() const;
  private:
  bool _internal_has_finalized() const;
  public:
  void clear_finalized();
  bool finalized() const;
  void set_finalized(bool value);
  private:
  bool _internal_finalized() const;
  void _internal_set_finalized(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardLineup.Card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_CardBonus > bonuses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    uint32_t player_account_id_;
    uint32_t team_id_;
    uint32_t role_;
    float score_;
    uint64_t item_id_;
    bool finalized_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardLineup_League final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardLineup.League) */ {
 public:
  inline CMsgDOTAFantasyCardLineup_League() : CMsgDOTAFantasyCardLineup_League(nullptr) {}
  ~CMsgDOTAFantasyCardLineup_League() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardLineup_League(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardLineup_League(const CMsgDOTAFantasyCardLineup_League& from);
  CMsgDOTAFantasyCardLineup_League(CMsgDOTAFantasyCardLineup_League&& from) noexcept
    : CMsgDOTAFantasyCardLineup_League() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardLineup_League& operator=(const CMsgDOTAFantasyCardLineup_League& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardLineup_League& operator=(CMsgDOTAFantasyCardLineup_League&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardLineup_League& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardLineup_League* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardLineup_League*>(
               &_CMsgDOTAFantasyCardLineup_League_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgDOTAFantasyCardLineup_League& a, CMsgDOTAFantasyCardLineup_League& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardLineup_League* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardLineup_League* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardLineup_League* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardLineup_League>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardLineup_League& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardLineup_League& from) {
    CMsgDOTAFantasyCardLineup_League::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardLineup_League* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardLineup.League";
  }
  protected:
  explicit CMsgDOTAFantasyCardLineup_League(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kLeagueIdFieldNumber = 1,
    kScoreFieldNumber = 3,
  };
  // repeated .CMsgDOTAFantasyCardLineup.Card cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::CMsgDOTAFantasyCardLineup_Card* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Card >*
      mutable_cards();
  private:
  const ::CMsgDOTAFantasyCardLineup_Card& _internal_cards(int index) const;
  ::CMsgDOTAFantasyCardLineup_Card* _internal_add_cards();
  public:
  const ::CMsgDOTAFantasyCardLineup_Card& cards(int index) const;
  ::CMsgDOTAFantasyCardLineup_Card* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Card >&
      cards() const;

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional float score = 3;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardLineup.League)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Card > cards_;
    uint32_t league_id_;
    float score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardLineup_Period final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardLineup.Period) */ {
 public:
  inline CMsgDOTAFantasyCardLineup_Period() : CMsgDOTAFantasyCardLineup_Period(nullptr) {}
  ~CMsgDOTAFantasyCardLineup_Period() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardLineup_Period(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardLineup_Period(const CMsgDOTAFantasyCardLineup_Period& from);
  CMsgDOTAFantasyCardLineup_Period(CMsgDOTAFantasyCardLineup_Period&& from) noexcept
    : CMsgDOTAFantasyCardLineup_Period() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardLineup_Period& operator=(const CMsgDOTAFantasyCardLineup_Period& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardLineup_Period& operator=(CMsgDOTAFantasyCardLineup_Period&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardLineup_Period& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardLineup_Period* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardLineup_Period*>(
               &_CMsgDOTAFantasyCardLineup_Period_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgDOTAFantasyCardLineup_Period& a, CMsgDOTAFantasyCardLineup_Period& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardLineup_Period* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardLineup_Period* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardLineup_Period* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardLineup_Period>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardLineup_Period& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardLineup_Period& from) {
    CMsgDOTAFantasyCardLineup_Period::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardLineup_Period* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardLineup.Period";
  }
  protected:
  explicit CMsgDOTAFantasyCardLineup_Period(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaguesFieldNumber = 4,
    kTimestampStartFieldNumber = 2,
    kTimestampEndFieldNumber = 3,
    kFantasyPeriodFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyCardLineup.League leagues = 4;
  int leagues_size() const;
  private:
  int _internal_leagues_size() const;
  public:
  void clear_leagues();
  ::CMsgDOTAFantasyCardLineup_League* mutable_leagues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_League >*
      mutable_leagues();
  private:
  const ::CMsgDOTAFantasyCardLineup_League& _internal_leagues(int index) const;
  ::CMsgDOTAFantasyCardLineup_League* _internal_add_leagues();
  public:
  const ::CMsgDOTAFantasyCardLineup_League& leagues(int index) const;
  ::CMsgDOTAFantasyCardLineup_League* add_leagues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_League >&
      leagues() const;

  // optional uint32 timestamp_start = 2;
  bool has_timestamp_start() const;
  private:
  bool _internal_has_timestamp_start() const;
  public:
  void clear_timestamp_start();
  uint32_t timestamp_start() const;
  void set_timestamp_start(uint32_t value);
  private:
  uint32_t _internal_timestamp_start() const;
  void _internal_set_timestamp_start(uint32_t value);
  public:

  // optional uint32 timestamp_end = 3;
  bool has_timestamp_end() const;
  private:
  bool _internal_has_timestamp_end() const;
  public:
  void clear_timestamp_end();
  uint32_t timestamp_end() const;
  void set_timestamp_end(uint32_t value);
  private:
  uint32_t _internal_timestamp_end() const;
  void _internal_set_timestamp_end(uint32_t value);
  public:

  // optional uint32 fantasy_period = 1 [default = 4294967295];
  bool has_fantasy_period() const;
  private:
  bool _internal_has_fantasy_period() const;
  public:
  void clear_fantasy_period();
  uint32_t fantasy_period() const;
  void set_fantasy_period(uint32_t value);
  private:
  uint32_t _internal_fantasy_period() const;
  void _internal_set_fantasy_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardLineup.Period)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_League > leagues_;
    uint32_t timestamp_start_;
    uint32_t timestamp_end_;
    uint32_t fantasy_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardLineup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardLineup) */ {
 public:
  inline CMsgDOTAFantasyCardLineup() : CMsgDOTAFantasyCardLineup(nullptr) {}
  ~CMsgDOTAFantasyCardLineup() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardLineup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardLineup(const CMsgDOTAFantasyCardLineup& from);
  CMsgDOTAFantasyCardLineup(CMsgDOTAFantasyCardLineup&& from) noexcept
    : CMsgDOTAFantasyCardLineup() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardLineup& operator=(const CMsgDOTAFantasyCardLineup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardLineup& operator=(CMsgDOTAFantasyCardLineup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardLineup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardLineup* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardLineup*>(
               &_CMsgDOTAFantasyCardLineup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgDOTAFantasyCardLineup& a, CMsgDOTAFantasyCardLineup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardLineup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardLineup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardLineup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardLineup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardLineup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardLineup& from) {
    CMsgDOTAFantasyCardLineup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardLineup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardLineup";
  }
  protected:
  explicit CMsgDOTAFantasyCardLineup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyCardLineup_CardBonus CardBonus;
  typedef CMsgDOTAFantasyCardLineup_Card Card;
  typedef CMsgDOTAFantasyCardLineup_League League;
  typedef CMsgDOTAFantasyCardLineup_Period Period;

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodsFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyCardLineup.Period periods = 1;
  int periods_size() const;
  private:
  int _internal_periods_size() const;
  public:
  void clear_periods();
  ::CMsgDOTAFantasyCardLineup_Period* mutable_periods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Period >*
      mutable_periods();
  private:
  const ::CMsgDOTAFantasyCardLineup_Period& _internal_periods(int index) const;
  ::CMsgDOTAFantasyCardLineup_Period* _internal_add_periods();
  public:
  const ::CMsgDOTAFantasyCardLineup_Period& periods(int index) const;
  ::CMsgDOTAFantasyCardLineup_Period* add_periods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Period >&
      periods() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardLineup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Period > periods_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardList_CardBonus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardList.CardBonus) */ {
 public:
  inline CMsgDOTAFantasyCardList_CardBonus() : CMsgDOTAFantasyCardList_CardBonus(nullptr) {}
  ~CMsgDOTAFantasyCardList_CardBonus() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardList_CardBonus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardList_CardBonus(const CMsgDOTAFantasyCardList_CardBonus& from);
  CMsgDOTAFantasyCardList_CardBonus(CMsgDOTAFantasyCardList_CardBonus&& from) noexcept
    : CMsgDOTAFantasyCardList_CardBonus() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardList_CardBonus& operator=(const CMsgDOTAFantasyCardList_CardBonus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardList_CardBonus& operator=(CMsgDOTAFantasyCardList_CardBonus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardList_CardBonus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardList_CardBonus* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardList_CardBonus*>(
               &_CMsgDOTAFantasyCardList_CardBonus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgDOTAFantasyCardList_CardBonus& a, CMsgDOTAFantasyCardList_CardBonus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardList_CardBonus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardList_CardBonus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardList_CardBonus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardList_CardBonus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardList_CardBonus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardList_CardBonus& from) {
    CMsgDOTAFantasyCardList_CardBonus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardList_CardBonus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardList.CardBonus";
  }
  protected:
  explicit CMsgDOTAFantasyCardList_CardBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonusStatFieldNumber = 1,
    kBonusValueFieldNumber = 2,
  };
  // optional uint32 bonus_stat = 1;
  bool has_bonus_stat() const;
  private:
  bool _internal_has_bonus_stat() const;
  public:
  void clear_bonus_stat();
  uint32_t bonus_stat() const;
  void set_bonus_stat(uint32_t value);
  private:
  uint32_t _internal_bonus_stat() const;
  void _internal_set_bonus_stat(uint32_t value);
  public:

  // optional uint32 bonus_value = 2;
  bool has_bonus_value() const;
  private:
  bool _internal_has_bonus_value() const;
  public:
  void clear_bonus_value();
  uint32_t bonus_value() const;
  void set_bonus_value(uint32_t value);
  private:
  uint32_t _internal_bonus_value() const;
  void _internal_set_bonus_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardList.CardBonus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t bonus_stat_;
    uint32_t bonus_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardList_Card final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardList.Card) */ {
 public:
  inline CMsgDOTAFantasyCardList_Card() : CMsgDOTAFantasyCardList_Card(nullptr) {}
  ~CMsgDOTAFantasyCardList_Card() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardList_Card(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardList_Card(const CMsgDOTAFantasyCardList_Card& from);
  CMsgDOTAFantasyCardList_Card(CMsgDOTAFantasyCardList_Card&& from) noexcept
    : CMsgDOTAFantasyCardList_Card() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardList_Card& operator=(const CMsgDOTAFantasyCardList_Card& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardList_Card& operator=(CMsgDOTAFantasyCardList_Card&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardList_Card& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardList_Card* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardList_Card*>(
               &_CMsgDOTAFantasyCardList_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgDOTAFantasyCardList_Card& a, CMsgDOTAFantasyCardList_Card& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardList_Card* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardList_Card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardList_Card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardList_Card>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardList_Card& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardList_Card& from) {
    CMsgDOTAFantasyCardList_Card::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardList_Card* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardList.Card";
  }
  protected:
  explicit CMsgDOTAFantasyCardList_Card(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonusesFieldNumber = 6,
    kPlayerNameFieldNumber = 2,
    kTeamNameFieldNumber = 4,
    kPlayerAccountIdFieldNumber = 1,
    kTeamIdFieldNumber = 3,
    kItemIdFieldNumber = 8,
    kRoleFieldNumber = 5,
  };
  // repeated .CMsgDOTAFantasyCardList.CardBonus bonuses = 6;
  int bonuses_size() const;
  private:
  int _internal_bonuses_size() const;
  public:
  void clear_bonuses();
  ::CMsgDOTAFantasyCardList_CardBonus* mutable_bonuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_CardBonus >*
      mutable_bonuses();
  private:
  const ::CMsgDOTAFantasyCardList_CardBonus& _internal_bonuses(int index) const;
  ::CMsgDOTAFantasyCardList_CardBonus* _internal_add_bonuses();
  public:
  const ::CMsgDOTAFantasyCardList_CardBonus& bonuses(int index) const;
  ::CMsgDOTAFantasyCardList_CardBonus* add_bonuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_CardBonus >&
      bonuses() const;

  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint32 player_account_id = 1;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  uint32_t player_account_id() const;
  void set_player_account_id(uint32_t value);
  private:
  uint32_t _internal_player_account_id() const;
  void _internal_set_player_account_id(uint32_t value);
  public:

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint64 item_id = 8;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 role = 5;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardList.Card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_CardBonus > bonuses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    uint32_t player_account_id_;
    uint32_t team_id_;
    uint64_t item_id_;
    uint32_t role_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyCardList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyCardList) */ {
 public:
  inline CMsgDOTAFantasyCardList() : CMsgDOTAFantasyCardList(nullptr) {}
  ~CMsgDOTAFantasyCardList() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyCardList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyCardList(const CMsgDOTAFantasyCardList& from);
  CMsgDOTAFantasyCardList(CMsgDOTAFantasyCardList&& from) noexcept
    : CMsgDOTAFantasyCardList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyCardList& operator=(const CMsgDOTAFantasyCardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyCardList& operator=(CMsgDOTAFantasyCardList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyCardList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyCardList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyCardList*>(
               &_CMsgDOTAFantasyCardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgDOTAFantasyCardList& a, CMsgDOTAFantasyCardList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyCardList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyCardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyCardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyCardList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyCardList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyCardList& from) {
    CMsgDOTAFantasyCardList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyCardList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyCardList";
  }
  protected:
  explicit CMsgDOTAFantasyCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyCardList_CardBonus CardBonus;
  typedef CMsgDOTAFantasyCardList_Card Card;

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyCardList.Card cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::CMsgDOTAFantasyCardList_Card* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_Card >*
      mutable_cards();
  private:
  const ::CMsgDOTAFantasyCardList_Card& _internal_cards(int index) const;
  ::CMsgDOTAFantasyCardList_Card* _internal_add_cards();
  public:
  const ::CMsgDOTAFantasyCardList_Card& cards(int index) const;
  ::CMsgDOTAFantasyCardList_Card* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyCardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_Card > cards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgChatToxicityReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgChatToxicityReport) */ {
 public:
  inline CMsgChatToxicityReport() : CMsgChatToxicityReport(nullptr) {}
  ~CMsgChatToxicityReport() override;
  explicit PROTOBUF_CONSTEXPR CMsgChatToxicityReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgChatToxicityReport(const CMsgChatToxicityReport& from);
  CMsgChatToxicityReport(CMsgChatToxicityReport&& from) noexcept
    : CMsgChatToxicityReport() {
    *this = ::std::move(from);
  }

  inline CMsgChatToxicityReport& operator=(const CMsgChatToxicityReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgChatToxicityReport& operator=(CMsgChatToxicityReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgChatToxicityReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgChatToxicityReport* internal_default_instance() {
    return reinterpret_cast<const CMsgChatToxicityReport*>(
               &_CMsgChatToxicityReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgChatToxicityReport& a, CMsgChatToxicityReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgChatToxicityReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgChatToxicityReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgChatToxicityReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgChatToxicityReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgChatToxicityReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgChatToxicityReport& from) {
    CMsgChatToxicityReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgChatToxicityReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgChatToxicityReport";
  }
  protected:
  explicit CMsgChatToxicityReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 5,
    kMessageFieldNumber = 7,
    kNumMatchesSeenFieldNumber = 1,
    kNumMessagesFieldNumber = 2,
    kNumMessagesHumanThinksToxicFieldNumber = 3,
    kNumMessagesMlThinksToxicFieldNumber = 4,
    kResultFieldNumber = 6,
  };
  // optional string status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // optional string message = 7;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 num_matches_seen = 1;
  bool has_num_matches_seen() const;
  private:
  bool _internal_has_num_matches_seen() const;
  public:
  void clear_num_matches_seen();
  uint32_t num_matches_seen() const;
  void set_num_matches_seen(uint32_t value);
  private:
  uint32_t _internal_num_matches_seen() const;
  void _internal_set_num_matches_seen(uint32_t value);
  public:

  // optional uint32 num_messages = 2;
  bool has_num_messages() const;
  private:
  bool _internal_has_num_messages() const;
  public:
  void clear_num_messages();
  uint32_t num_messages() const;
  void set_num_messages(uint32_t value);
  private:
  uint32_t _internal_num_messages() const;
  void _internal_set_num_messages(uint32_t value);
  public:

  // optional uint32 num_messages_human_thinks_toxic = 3;
  bool has_num_messages_human_thinks_toxic() const;
  private:
  bool _internal_has_num_messages_human_thinks_toxic() const;
  public:
  void clear_num_messages_human_thinks_toxic();
  uint32_t num_messages_human_thinks_toxic() const;
  void set_num_messages_human_thinks_toxic(uint32_t value);
  private:
  uint32_t _internal_num_messages_human_thinks_toxic() const;
  void _internal_set_num_messages_human_thinks_toxic(uint32_t value);
  public:

  // optional uint32 num_messages_ml_thinks_toxic = 4;
  bool has_num_messages_ml_thinks_toxic() const;
  private:
  bool _internal_has_num_messages_ml_thinks_toxic() const;
  public:
  void clear_num_messages_ml_thinks_toxic();
  uint32_t num_messages_ml_thinks_toxic() const;
  void set_num_messages_ml_thinks_toxic(uint32_t value);
  private:
  uint32_t _internal_num_messages_ml_thinks_toxic() const;
  void _internal_set_num_messages_ml_thinks_toxic(uint32_t value);
  public:

  // optional uint32 result = 6;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgChatToxicityReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t num_matches_seen_;
    uint32_t num_messages_;
    uint32_t num_messages_human_thinks_toxic_;
    uint32_t num_messages_ml_thinks_toxic_;
    uint32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgGetTeamAuditInformation_Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGetTeamAuditInformation.Action) */ {
 public:
  inline CMsgGetTeamAuditInformation_Action() : CMsgGetTeamAuditInformation_Action(nullptr) {}
  ~CMsgGetTeamAuditInformation_Action() override;
  explicit PROTOBUF_CONSTEXPR CMsgGetTeamAuditInformation_Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGetTeamAuditInformation_Action(const CMsgGetTeamAuditInformation_Action& from);
  CMsgGetTeamAuditInformation_Action(CMsgGetTeamAuditInformation_Action&& from) noexcept
    : CMsgGetTeamAuditInformation_Action() {
    *this = ::std::move(from);
  }

  inline CMsgGetTeamAuditInformation_Action& operator=(const CMsgGetTeamAuditInformation_Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGetTeamAuditInformation_Action& operator=(CMsgGetTeamAuditInformation_Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGetTeamAuditInformation_Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGetTeamAuditInformation_Action* internal_default_instance() {
    return reinterpret_cast<const CMsgGetTeamAuditInformation_Action*>(
               &_CMsgGetTeamAuditInformation_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgGetTeamAuditInformation_Action& a, CMsgGetTeamAuditInformation_Action& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGetTeamAuditInformation_Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGetTeamAuditInformation_Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGetTeamAuditInformation_Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGetTeamAuditInformation_Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGetTeamAuditInformation_Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGetTeamAuditInformation_Action& from) {
    CMsgGetTeamAuditInformation_Action::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGetTeamAuditInformation_Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGetTeamAuditInformation.Action";
  }
  protected:
  explicit CMsgGetTeamAuditInformation_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 5,
    kPlayerRealNameFieldNumber = 6,
    kRegistrationPeriodFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kActionFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // optional string player_name = 5;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional string player_real_name = 6;
  bool has_player_real_name() const;
  private:
  bool _internal_has_player_real_name() const;
  public:
  void clear_player_real_name();
  const std::string& player_real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_real_name();
  PROTOBUF_NODISCARD std::string* release_player_real_name();
  void set_allocated_player_real_name(std::string* player_real_name);
  private:
  const std::string& _internal_player_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_real_name(const std::string& value);
  std::string* _internal_mutable_player_real_name();
  public:

  // optional uint32 registration_period = 1;
  bool has_registration_period() const;
  private:
  bool _internal_has_registration_period() const;
  public:
  void clear_registration_period();
  uint32_t registration_period() const;
  void set_registration_period(uint32_t value);
  private:
  uint32_t _internal_registration_period() const;
  void _internal_set_registration_period(uint32_t value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  uint32_t action() const;
  void set_action(uint32_t value);
  private:
  uint32_t _internal_action() const;
  void _internal_set_action(uint32_t value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGetTeamAuditInformation.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_real_name_;
    uint32_t registration_period_;
    uint32_t account_id_;
    uint32_t action_;
    uint32_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgGetTeamAuditInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGetTeamAuditInformation) */ {
 public:
  inline CMsgGetTeamAuditInformation() : CMsgGetTeamAuditInformation(nullptr) {}
  ~CMsgGetTeamAuditInformation() override;
  explicit PROTOBUF_CONSTEXPR CMsgGetTeamAuditInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGetTeamAuditInformation(const CMsgGetTeamAuditInformation& from);
  CMsgGetTeamAuditInformation(CMsgGetTeamAuditInformation&& from) noexcept
    : CMsgGetTeamAuditInformation() {
    *this = ::std::move(from);
  }

  inline CMsgGetTeamAuditInformation& operator=(const CMsgGetTeamAuditInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGetTeamAuditInformation& operator=(CMsgGetTeamAuditInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGetTeamAuditInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGetTeamAuditInformation* internal_default_instance() {
    return reinterpret_cast<const CMsgGetTeamAuditInformation*>(
               &_CMsgGetTeamAuditInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgGetTeamAuditInformation& a, CMsgGetTeamAuditInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGetTeamAuditInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGetTeamAuditInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGetTeamAuditInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGetTeamAuditInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGetTeamAuditInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGetTeamAuditInformation& from) {
    CMsgGetTeamAuditInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGetTeamAuditInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGetTeamAuditInformation";
  }
  protected:
  explicit CMsgGetTeamAuditInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGetTeamAuditInformation_Action Action;

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 3,
    kTeamNameFieldNumber = 2,
    kTeamIdFieldNumber = 1,
    kLastUpdatedFieldNumber = 4,
  };
  // repeated .CMsgGetTeamAuditInformation.Action actions = 3;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::CMsgGetTeamAuditInformation_Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGetTeamAuditInformation_Action >*
      mutable_actions();
  private:
  const ::CMsgGetTeamAuditInformation_Action& _internal_actions(int index) const;
  ::CMsgGetTeamAuditInformation_Action* _internal_add_actions();
  public:
  const ::CMsgGetTeamAuditInformation_Action& actions(int index) const;
  ::CMsgGetTeamAuditInformation_Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGetTeamAuditInformation_Action >&
      actions() const;

  // optional string team_name = 2;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 last_updated = 4;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  uint32_t last_updated() const;
  void set_last_updated(uint32_t value);
  private:
  uint32_t _internal_last_updated() const;
  void _internal_set_last_updated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGetTeamAuditInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGetTeamAuditInformation_Action > actions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    uint32_t team_id_;
    uint32_t last_updated_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCMatch) */ {
 public:
  inline CMsgDOTADPCMatch() : CMsgDOTADPCMatch(nullptr) {}
  ~CMsgDOTADPCMatch() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCMatch(const CMsgDOTADPCMatch& from);
  CMsgDOTADPCMatch(CMsgDOTADPCMatch&& from) noexcept
    : CMsgDOTADPCMatch() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCMatch& operator=(const CMsgDOTADPCMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCMatch& operator=(CMsgDOTADPCMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCMatch*>(
               &_CMsgDOTADPCMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgDOTADPCMatch& a, CMsgDOTADPCMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCMatch& from) {
    CMsgDOTADPCMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCMatch";
  }
  protected:
  explicit CMsgDOTADPCMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // optional .CMsgDOTAMatch match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::CMsgDOTAMatch& match() const;
  PROTOBUF_NODISCARD ::CMsgDOTAMatch* release_match();
  ::CMsgDOTAMatch* mutable_match();
  void set_allocated_match(::CMsgDOTAMatch* match);
  private:
  const ::CMsgDOTAMatch& _internal_match() const;
  ::CMsgDOTAMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::CMsgDOTAMatch* match);
  ::CMsgDOTAMatch* unsafe_arena_release_match();

  // optional .CDOTAMatchMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::CDOTAMatchMetadata& metadata() const;
  PROTOBUF_NODISCARD ::CDOTAMatchMetadata* release_metadata();
  ::CDOTAMatchMetadata* mutable_metadata();
  void set_allocated_metadata(::CDOTAMatchMetadata* metadata);
  private:
  const ::CDOTAMatchMetadata& _internal_metadata() const;
  ::CDOTAMatchMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::CDOTAMatchMetadata* metadata);
  ::CDOTAMatchMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDOTAMatch* match_;
    ::CDOTAMatchMetadata* metadata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fwebapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgArcanaVotes_Match

// optional uint32 match_id = 1;
inline bool CMsgArcanaVotes_Match::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgArcanaVotes_Match::clear_match_id() {
  _impl_.match_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint32_t CMsgArcanaVotes_Match::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.match_id)
  return _internal_match_id();
}
inline void CMsgArcanaVotes_Match::_internal_set_match_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgArcanaVotes_Match::set_match_id(uint32_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.match_id)
}

// optional uint32 hero_id_0 = 2;
inline bool CMsgArcanaVotes_Match::_internal_has_hero_id_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_hero_id_0() const {
  return _internal_has_hero_id_0();
}
inline void CMsgArcanaVotes_Match::clear_hero_id_0() {
  _impl_.hero_id_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_hero_id_0() const {
  return _impl_.hero_id_0_;
}
inline uint32_t CMsgArcanaVotes_Match::hero_id_0() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.hero_id_0)
  return _internal_hero_id_0();
}
inline void CMsgArcanaVotes_Match::_internal_set_hero_id_0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_0_ = value;
}
inline void CMsgArcanaVotes_Match::set_hero_id_0(uint32_t value) {
  _internal_set_hero_id_0(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.hero_id_0)
}

// optional uint32 hero_id_1 = 3;
inline bool CMsgArcanaVotes_Match::_internal_has_hero_id_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_hero_id_1() const {
  return _internal_has_hero_id_1();
}
inline void CMsgArcanaVotes_Match::clear_hero_id_1() {
  _impl_.hero_id_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_hero_id_1() const {
  return _impl_.hero_id_1_;
}
inline uint32_t CMsgArcanaVotes_Match::hero_id_1() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.hero_id_1)
  return _internal_hero_id_1();
}
inline void CMsgArcanaVotes_Match::_internal_set_hero_id_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_1_ = value;
}
inline void CMsgArcanaVotes_Match::set_hero_id_1(uint32_t value) {
  _internal_set_hero_id_1(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.hero_id_1)
}

// optional uint32 hero_seeding_0 = 4;
inline bool CMsgArcanaVotes_Match::_internal_has_hero_seeding_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_hero_seeding_0() const {
  return _internal_has_hero_seeding_0();
}
inline void CMsgArcanaVotes_Match::clear_hero_seeding_0() {
  _impl_.hero_seeding_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_hero_seeding_0() const {
  return _impl_.hero_seeding_0_;
}
inline uint32_t CMsgArcanaVotes_Match::hero_seeding_0() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.hero_seeding_0)
  return _internal_hero_seeding_0();
}
inline void CMsgArcanaVotes_Match::_internal_set_hero_seeding_0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_seeding_0_ = value;
}
inline void CMsgArcanaVotes_Match::set_hero_seeding_0(uint32_t value) {
  _internal_set_hero_seeding_0(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.hero_seeding_0)
}

// optional uint32 hero_seeding_1 = 5;
inline bool CMsgArcanaVotes_Match::_internal_has_hero_seeding_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_hero_seeding_1() const {
  return _internal_has_hero_seeding_1();
}
inline void CMsgArcanaVotes_Match::clear_hero_seeding_1() {
  _impl_.hero_seeding_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_hero_seeding_1() const {
  return _impl_.hero_seeding_1_;
}
inline uint32_t CMsgArcanaVotes_Match::hero_seeding_1() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.hero_seeding_1)
  return _internal_hero_seeding_1();
}
inline void CMsgArcanaVotes_Match::_internal_set_hero_seeding_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hero_seeding_1_ = value;
}
inline void CMsgArcanaVotes_Match::set_hero_seeding_1(uint32_t value) {
  _internal_set_hero_seeding_1(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.hero_seeding_1)
}

// optional uint32 vote_count_0 = 6;
inline bool CMsgArcanaVotes_Match::_internal_has_vote_count_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_vote_count_0() const {
  return _internal_has_vote_count_0();
}
inline void CMsgArcanaVotes_Match::clear_vote_count_0() {
  _impl_.vote_count_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_vote_count_0() const {
  return _impl_.vote_count_0_;
}
inline uint32_t CMsgArcanaVotes_Match::vote_count_0() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.vote_count_0)
  return _internal_vote_count_0();
}
inline void CMsgArcanaVotes_Match::_internal_set_vote_count_0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.vote_count_0_ = value;
}
inline void CMsgArcanaVotes_Match::set_vote_count_0(uint32_t value) {
  _internal_set_vote_count_0(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.vote_count_0)
}

// optional uint32 vote_count_1 = 7;
inline bool CMsgArcanaVotes_Match::_internal_has_vote_count_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_vote_count_1() const {
  return _internal_has_vote_count_1();
}
inline void CMsgArcanaVotes_Match::clear_vote_count_1() {
  _impl_.vote_count_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_vote_count_1() const {
  return _impl_.vote_count_1_;
}
inline uint32_t CMsgArcanaVotes_Match::vote_count_1() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.vote_count_1)
  return _internal_vote_count_1();
}
inline void CMsgArcanaVotes_Match::_internal_set_vote_count_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vote_count_1_ = value;
}
inline void CMsgArcanaVotes_Match::set_vote_count_1(uint32_t value) {
  _internal_set_vote_count_1(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.vote_count_1)
}

// optional uint32 voting_state = 8;
inline bool CMsgArcanaVotes_Match::_internal_has_voting_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_voting_state() const {
  return _internal_has_voting_state();
}
inline void CMsgArcanaVotes_Match::clear_voting_state() {
  _impl_.voting_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_voting_state() const {
  return _impl_.voting_state_;
}
inline uint32_t CMsgArcanaVotes_Match::voting_state() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.voting_state)
  return _internal_voting_state();
}
inline void CMsgArcanaVotes_Match::_internal_set_voting_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.voting_state_ = value;
}
inline void CMsgArcanaVotes_Match::set_voting_state(uint32_t value) {
  _internal_set_voting_state(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.voting_state)
}

// optional uint32 round_number = 9;
inline bool CMsgArcanaVotes_Match::_internal_has_round_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_round_number() const {
  return _internal_has_round_number();
}
inline void CMsgArcanaVotes_Match::clear_round_number() {
  _impl_.round_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_round_number() const {
  return _impl_.round_number_;
}
inline uint32_t CMsgArcanaVotes_Match::round_number() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.round_number)
  return _internal_round_number();
}
inline void CMsgArcanaVotes_Match::_internal_set_round_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.round_number_ = value;
}
inline void CMsgArcanaVotes_Match::set_round_number(uint32_t value) {
  _internal_set_round_number(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.round_number)
}

// optional bool is_votes_hidden = 10;
inline bool CMsgArcanaVotes_Match::_internal_has_is_votes_hidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_is_votes_hidden() const {
  return _internal_has_is_votes_hidden();
}
inline void CMsgArcanaVotes_Match::clear_is_votes_hidden() {
  _impl_.is_votes_hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgArcanaVotes_Match::_internal_is_votes_hidden() const {
  return _impl_.is_votes_hidden_;
}
inline bool CMsgArcanaVotes_Match::is_votes_hidden() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.is_votes_hidden)
  return _internal_is_votes_hidden();
}
inline void CMsgArcanaVotes_Match::_internal_set_is_votes_hidden(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_votes_hidden_ = value;
}
inline void CMsgArcanaVotes_Match::set_is_votes_hidden(bool value) {
  _internal_set_is_votes_hidden(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.is_votes_hidden)
}

// optional uint32 calibration_time_remaining = 11;
inline bool CMsgArcanaVotes_Match::_internal_has_calibration_time_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgArcanaVotes_Match::has_calibration_time_remaining() const {
  return _internal_has_calibration_time_remaining();
}
inline void CMsgArcanaVotes_Match::clear_calibration_time_remaining() {
  _impl_.calibration_time_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgArcanaVotes_Match::_internal_calibration_time_remaining() const {
  return _impl_.calibration_time_remaining_;
}
inline uint32_t CMsgArcanaVotes_Match::calibration_time_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.Match.calibration_time_remaining)
  return _internal_calibration_time_remaining();
}
inline void CMsgArcanaVotes_Match::_internal_set_calibration_time_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.calibration_time_remaining_ = value;
}
inline void CMsgArcanaVotes_Match::set_calibration_time_remaining(uint32_t value) {
  _internal_set_calibration_time_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.Match.calibration_time_remaining)
}

// -------------------------------------------------------------------

// CMsgArcanaVotes

// repeated .CMsgArcanaVotes.Match matches = 1;
inline int CMsgArcanaVotes::_internal_matches_size() const {
  return _impl_.matches_.size();
}
inline int CMsgArcanaVotes::matches_size() const {
  return _internal_matches_size();
}
inline void CMsgArcanaVotes::clear_matches() {
  _impl_.matches_.Clear();
}
inline ::CMsgArcanaVotes_Match* CMsgArcanaVotes::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgArcanaVotes.matches)
  return _impl_.matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgArcanaVotes_Match >*
CMsgArcanaVotes::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgArcanaVotes.matches)
  return &_impl_.matches_;
}
inline const ::CMsgArcanaVotes_Match& CMsgArcanaVotes::_internal_matches(int index) const {
  return _impl_.matches_.Get(index);
}
inline const ::CMsgArcanaVotes_Match& CMsgArcanaVotes::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.matches)
  return _internal_matches(index);
}
inline ::CMsgArcanaVotes_Match* CMsgArcanaVotes::_internal_add_matches() {
  return _impl_.matches_.Add();
}
inline ::CMsgArcanaVotes_Match* CMsgArcanaVotes::add_matches() {
  ::CMsgArcanaVotes_Match* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:CMsgArcanaVotes.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgArcanaVotes_Match >&
CMsgArcanaVotes::matches() const {
  // @@protoc_insertion_point(field_list:CMsgArcanaVotes.matches)
  return _impl_.matches_;
}

// optional uint32 round_time_remaining = 2;
inline bool CMsgArcanaVotes::_internal_has_round_time_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgArcanaVotes::has_round_time_remaining() const {
  return _internal_has_round_time_remaining();
}
inline void CMsgArcanaVotes::clear_round_time_remaining() {
  _impl_.round_time_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgArcanaVotes::_internal_round_time_remaining() const {
  return _impl_.round_time_remaining_;
}
inline uint32_t CMsgArcanaVotes::round_time_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.round_time_remaining)
  return _internal_round_time_remaining();
}
inline void CMsgArcanaVotes::_internal_set_round_time_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.round_time_remaining_ = value;
}
inline void CMsgArcanaVotes::set_round_time_remaining(uint32_t value) {
  _internal_set_round_time_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.round_time_remaining)
}

// optional uint32 round_number = 3;
inline bool CMsgArcanaVotes::_internal_has_round_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgArcanaVotes::has_round_number() const {
  return _internal_has_round_number();
}
inline void CMsgArcanaVotes::clear_round_number() {
  _impl_.round_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgArcanaVotes::_internal_round_number() const {
  return _impl_.round_number_;
}
inline uint32_t CMsgArcanaVotes::round_number() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.round_number)
  return _internal_round_number();
}
inline void CMsgArcanaVotes::_internal_set_round_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.round_number_ = value;
}
inline void CMsgArcanaVotes::set_round_number(uint32_t value) {
  _internal_set_round_number(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.round_number)
}

// optional uint32 voting_state = 4;
inline bool CMsgArcanaVotes::_internal_has_voting_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgArcanaVotes::has_voting_state() const {
  return _internal_has_voting_state();
}
inline void CMsgArcanaVotes::clear_voting_state() {
  _impl_.voting_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgArcanaVotes::_internal_voting_state() const {
  return _impl_.voting_state_;
}
inline uint32_t CMsgArcanaVotes::voting_state() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.voting_state)
  return _internal_voting_state();
}
inline void CMsgArcanaVotes::_internal_set_voting_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.voting_state_ = value;
}
inline void CMsgArcanaVotes::set_voting_state(uint32_t value) {
  _internal_set_voting_state(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.voting_state)
}

// optional bool is_current_round_calibrating = 5;
inline bool CMsgArcanaVotes::_internal_has_is_current_round_calibrating() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgArcanaVotes::has_is_current_round_calibrating() const {
  return _internal_has_is_current_round_calibrating();
}
inline void CMsgArcanaVotes::clear_is_current_round_calibrating() {
  _impl_.is_current_round_calibrating_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgArcanaVotes::_internal_is_current_round_calibrating() const {
  return _impl_.is_current_round_calibrating_;
}
inline bool CMsgArcanaVotes::is_current_round_calibrating() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.is_current_round_calibrating)
  return _internal_is_current_round_calibrating();
}
inline void CMsgArcanaVotes::_internal_set_is_current_round_calibrating(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_current_round_calibrating_ = value;
}
inline void CMsgArcanaVotes::set_is_current_round_calibrating(bool value) {
  _internal_set_is_current_round_calibrating(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.is_current_round_calibrating)
}

// optional uint32 closest_active_match_id = 6;
inline bool CMsgArcanaVotes::_internal_has_closest_active_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgArcanaVotes::has_closest_active_match_id() const {
  return _internal_has_closest_active_match_id();
}
inline void CMsgArcanaVotes::clear_closest_active_match_id() {
  _impl_.closest_active_match_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgArcanaVotes::_internal_closest_active_match_id() const {
  return _impl_.closest_active_match_id_;
}
inline uint32_t CMsgArcanaVotes::closest_active_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.closest_active_match_id)
  return _internal_closest_active_match_id();
}
inline void CMsgArcanaVotes::_internal_set_closest_active_match_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.closest_active_match_id_ = value;
}
inline void CMsgArcanaVotes::set_closest_active_match_id(uint32_t value) {
  _internal_set_closest_active_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.closest_active_match_id)
}

// optional uint32 event_id = 7;
inline bool CMsgArcanaVotes::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgArcanaVotes::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgArcanaVotes::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgArcanaVotes::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgArcanaVotes::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.event_id)
  return _internal_event_id();
}
inline void CMsgArcanaVotes::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.event_id_ = value;
}
inline void CMsgArcanaVotes::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.event_id)
}

// optional uint32 voting_start_time = 8;
inline bool CMsgArcanaVotes::_internal_has_voting_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgArcanaVotes::has_voting_start_time() const {
  return _internal_has_voting_start_time();
}
inline void CMsgArcanaVotes::clear_voting_start_time() {
  _impl_.voting_start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgArcanaVotes::_internal_voting_start_time() const {
  return _impl_.voting_start_time_;
}
inline uint32_t CMsgArcanaVotes::voting_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgArcanaVotes.voting_start_time)
  return _internal_voting_start_time();
}
inline void CMsgArcanaVotes::_internal_set_voting_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.voting_start_time_ = value;
}
inline void CMsgArcanaVotes::set_voting_start_time(uint32_t value) {
  _internal_set_voting_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgArcanaVotes.voting_start_time)
}

// -------------------------------------------------------------------

// CMsgDOTADPCFeed_Element

// optional .CMsgDOTADPCFeed.EFeedElementType type = 1 [default = FEED_SERIES_RESULT];
inline bool CMsgDOTADPCFeed_Element::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_type() const {
  return _internal_has_type();
}
inline void CMsgDOTADPCFeed_Element::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::CMsgDOTADPCFeed_EFeedElementType CMsgDOTADPCFeed_Element::_internal_type() const {
  return static_cast< ::CMsgDOTADPCFeed_EFeedElementType >(_impl_.type_);
}
inline ::CMsgDOTADPCFeed_EFeedElementType CMsgDOTADPCFeed_Element::type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.type)
  return _internal_type();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_type(::CMsgDOTADPCFeed_EFeedElementType value) {
  assert(::CMsgDOTADPCFeed_EFeedElementType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.type_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_type(::CMsgDOTADPCFeed_EFeedElementType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.type)
}

// optional uint32 timestamp = 2;
inline bool CMsgDOTADPCFeed_Element::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTADPCFeed_Element::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTADPCFeed_Element::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.timestamp)
}

// optional uint32 series_id = 3;
inline bool CMsgDOTADPCFeed_Element::_internal_has_series_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_series_id() const {
  return _internal_has_series_id();
}
inline void CMsgDOTADPCFeed_Element::clear_series_id() {
  _impl_.series_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_series_id() const {
  return _impl_.series_id_;
}
inline uint32_t CMsgDOTADPCFeed_Element::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.series_id)
  return _internal_series_id();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_series_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.series_id_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_series_id(uint32_t value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.series_id)
}

// optional uint64 match_id = 4;
inline bool CMsgDOTADPCFeed_Element::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTADPCFeed_Element::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgDOTADPCFeed_Element::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTADPCFeed_Element::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.match_id)
  return _internal_match_id();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.match_id)
}

// optional uint32 team_id = 5;
inline bool CMsgDOTADPCFeed_Element::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTADPCFeed_Element::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTADPCFeed_Element::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.team_id)
  return _internal_team_id();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.team_id)
}

// optional uint32 account_id = 6;
inline bool CMsgDOTADPCFeed_Element::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTADPCFeed_Element::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTADPCFeed_Element::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.account_id)
  return _internal_account_id();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.account_id)
}

// optional uint32 league_id = 7;
inline bool CMsgDOTADPCFeed_Element::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTADPCFeed_Element::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTADPCFeed_Element::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.league_id)
  return _internal_league_id();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.league_id)
}

// optional uint32 node_id = 8;
inline bool CMsgDOTADPCFeed_Element::_internal_has_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_node_id() const {
  return _internal_has_node_id();
}
inline void CMsgDOTADPCFeed_Element::clear_node_id() {
  _impl_.node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_node_id() const {
  return _impl_.node_id_;
}
inline uint32_t CMsgDOTADPCFeed_Element::node_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.node_id)
  return _internal_node_id();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_node_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.node_id_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_node_id(uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.node_id)
}

// optional uint64 server_steam_id = 13;
inline bool CMsgDOTADPCFeed_Element::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgDOTADPCFeed_Element::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CMsgDOTADPCFeed_Element::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CMsgDOTADPCFeed_Element::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.server_steam_id_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.server_steam_id)
}

// optional uint32 data_1 = 9;
inline bool CMsgDOTADPCFeed_Element::_internal_has_data_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_data_1() const {
  return _internal_has_data_1();
}
inline void CMsgDOTADPCFeed_Element::clear_data_1() {
  _impl_.data_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_data_1() const {
  return _impl_.data_1_;
}
inline uint32_t CMsgDOTADPCFeed_Element::data_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.data_1)
  return _internal_data_1();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_data_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.data_1_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_data_1(uint32_t value) {
  _internal_set_data_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.data_1)
}

// optional uint32 data_2 = 10;
inline bool CMsgDOTADPCFeed_Element::_internal_has_data_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_data_2() const {
  return _internal_has_data_2();
}
inline void CMsgDOTADPCFeed_Element::clear_data_2() {
  _impl_.data_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_data_2() const {
  return _impl_.data_2_;
}
inline uint32_t CMsgDOTADPCFeed_Element::data_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.data_2)
  return _internal_data_2();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_data_2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.data_2_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_data_2(uint32_t value) {
  _internal_set_data_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.data_2)
}

// optional uint32 data_3 = 11;
inline bool CMsgDOTADPCFeed_Element::_internal_has_data_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_data_3() const {
  return _internal_has_data_3();
}
inline void CMsgDOTADPCFeed_Element::clear_data_3() {
  _impl_.data_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_data_3() const {
  return _impl_.data_3_;
}
inline uint32_t CMsgDOTADPCFeed_Element::data_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.data_3)
  return _internal_data_3();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_data_3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.data_3_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_data_3(uint32_t value) {
  _internal_set_data_3(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.data_3)
}

// optional uint32 data_4 = 12;
inline bool CMsgDOTADPCFeed_Element::_internal_has_data_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTADPCFeed_Element::has_data_4() const {
  return _internal_has_data_4();
}
inline void CMsgDOTADPCFeed_Element::clear_data_4() {
  _impl_.data_4_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTADPCFeed_Element::_internal_data_4() const {
  return _impl_.data_4_;
}
inline uint32_t CMsgDOTADPCFeed_Element::data_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.Element.data_4)
  return _internal_data_4();
}
inline void CMsgDOTADPCFeed_Element::_internal_set_data_4(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.data_4_ = value;
}
inline void CMsgDOTADPCFeed_Element::set_data_4(uint32_t value) {
  _internal_set_data_4(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCFeed.Element.data_4)
}

// -------------------------------------------------------------------

// CMsgDOTADPCFeed

// repeated .CMsgDOTADPCFeed.Element elements = 1;
inline int CMsgDOTADPCFeed::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int CMsgDOTADPCFeed::elements_size() const {
  return _internal_elements_size();
}
inline void CMsgDOTADPCFeed::clear_elements() {
  _impl_.elements_.Clear();
}
inline ::CMsgDOTADPCFeed_Element* CMsgDOTADPCFeed::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCFeed.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCFeed_Element >*
CMsgDOTADPCFeed::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCFeed.elements)
  return &_impl_.elements_;
}
inline const ::CMsgDOTADPCFeed_Element& CMsgDOTADPCFeed::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::CMsgDOTADPCFeed_Element& CMsgDOTADPCFeed::elements(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCFeed.elements)
  return _internal_elements(index);
}
inline ::CMsgDOTADPCFeed_Element* CMsgDOTADPCFeed::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::CMsgDOTADPCFeed_Element* CMsgDOTADPCFeed::add_elements() {
  ::CMsgDOTADPCFeed_Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:CMsgDOTADPCFeed.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCFeed_Element >&
CMsgDOTADPCFeed::elements() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCFeed.elements)
  return _impl_.elements_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCUserInfo

// optional bool is_plus_subscriber = 1;
inline bool CMsgDOTADPCUserInfo::_internal_has_is_plus_subscriber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCUserInfo::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CMsgDOTADPCUserInfo::clear_is_plus_subscriber() {
  _impl_.is_plus_subscriber_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTADPCUserInfo::_internal_is_plus_subscriber() const {
  return _impl_.is_plus_subscriber_;
}
inline bool CMsgDOTADPCUserInfo::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCUserInfo.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CMsgDOTADPCUserInfo::_internal_set_is_plus_subscriber(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_plus_subscriber_ = value;
}
inline void CMsgDOTADPCUserInfo::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCUserInfo.is_plus_subscriber)
}

// -------------------------------------------------------------------

// CMsgDraftTrivia_DraftTriviaHeroInfo

// optional uint32 hero_id = 1;
inline bool CMsgDraftTrivia_DraftTriviaHeroInfo::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDraftTrivia_DraftTriviaHeroInfo::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDraftTrivia_DraftTriviaHeroInfo::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDraftTrivia_DraftTriviaHeroInfo::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgDraftTrivia_DraftTriviaHeroInfo::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.DraftTriviaHeroInfo.hero_id)
  return _internal_hero_id();
}
inline void CMsgDraftTrivia_DraftTriviaHeroInfo::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgDraftTrivia_DraftTriviaHeroInfo::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.DraftTriviaHeroInfo.hero_id)
}

// optional uint32 role = 2;
inline bool CMsgDraftTrivia_DraftTriviaHeroInfo::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDraftTrivia_DraftTriviaHeroInfo::has_role() const {
  return _internal_has_role();
}
inline void CMsgDraftTrivia_DraftTriviaHeroInfo::clear_role() {
  _impl_.role_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDraftTrivia_DraftTriviaHeroInfo::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t CMsgDraftTrivia_DraftTriviaHeroInfo::role() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.DraftTriviaHeroInfo.role)
  return _internal_role();
}
inline void CMsgDraftTrivia_DraftTriviaHeroInfo::_internal_set_role(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.role_ = value;
}
inline void CMsgDraftTrivia_DraftTriviaHeroInfo::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.DraftTriviaHeroInfo.role)
}

// -------------------------------------------------------------------

// CMsgDraftTrivia_DraftTriviaMatchInfo

// repeated .CMsgDraftTrivia.DraftTriviaHeroInfo radiant_heroes = 1;
inline int CMsgDraftTrivia_DraftTriviaMatchInfo::_internal_radiant_heroes_size() const {
  return _impl_.radiant_heroes_.size();
}
inline int CMsgDraftTrivia_DraftTriviaMatchInfo::radiant_heroes_size() const {
  return _internal_radiant_heroes_size();
}
inline void CMsgDraftTrivia_DraftTriviaMatchInfo::clear_radiant_heroes() {
  _impl_.radiant_heroes_.Clear();
}
inline ::CMsgDraftTrivia_DraftTriviaHeroInfo* CMsgDraftTrivia_DraftTriviaMatchInfo::mutable_radiant_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDraftTrivia.DraftTriviaMatchInfo.radiant_heroes)
  return _impl_.radiant_heroes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >*
CMsgDraftTrivia_DraftTriviaMatchInfo::mutable_radiant_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDraftTrivia.DraftTriviaMatchInfo.radiant_heroes)
  return &_impl_.radiant_heroes_;
}
inline const ::CMsgDraftTrivia_DraftTriviaHeroInfo& CMsgDraftTrivia_DraftTriviaMatchInfo::_internal_radiant_heroes(int index) const {
  return _impl_.radiant_heroes_.Get(index);
}
inline const ::CMsgDraftTrivia_DraftTriviaHeroInfo& CMsgDraftTrivia_DraftTriviaMatchInfo::radiant_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.DraftTriviaMatchInfo.radiant_heroes)
  return _internal_radiant_heroes(index);
}
inline ::CMsgDraftTrivia_DraftTriviaHeroInfo* CMsgDraftTrivia_DraftTriviaMatchInfo::_internal_add_radiant_heroes() {
  return _impl_.radiant_heroes_.Add();
}
inline ::CMsgDraftTrivia_DraftTriviaHeroInfo* CMsgDraftTrivia_DraftTriviaMatchInfo::add_radiant_heroes() {
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* _add = _internal_add_radiant_heroes();
  // @@protoc_insertion_point(field_add:CMsgDraftTrivia.DraftTriviaMatchInfo.radiant_heroes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >&
CMsgDraftTrivia_DraftTriviaMatchInfo::radiant_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgDraftTrivia.DraftTriviaMatchInfo.radiant_heroes)
  return _impl_.radiant_heroes_;
}

// repeated .CMsgDraftTrivia.DraftTriviaHeroInfo dire_heroes = 2;
inline int CMsgDraftTrivia_DraftTriviaMatchInfo::_internal_dire_heroes_size() const {
  return _impl_.dire_heroes_.size();
}
inline int CMsgDraftTrivia_DraftTriviaMatchInfo::dire_heroes_size() const {
  return _internal_dire_heroes_size();
}
inline void CMsgDraftTrivia_DraftTriviaMatchInfo::clear_dire_heroes() {
  _impl_.dire_heroes_.Clear();
}
inline ::CMsgDraftTrivia_DraftTriviaHeroInfo* CMsgDraftTrivia_DraftTriviaMatchInfo::mutable_dire_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDraftTrivia.DraftTriviaMatchInfo.dire_heroes)
  return _impl_.dire_heroes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >*
CMsgDraftTrivia_DraftTriviaMatchInfo::mutable_dire_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDraftTrivia.DraftTriviaMatchInfo.dire_heroes)
  return &_impl_.dire_heroes_;
}
inline const ::CMsgDraftTrivia_DraftTriviaHeroInfo& CMsgDraftTrivia_DraftTriviaMatchInfo::_internal_dire_heroes(int index) const {
  return _impl_.dire_heroes_.Get(index);
}
inline const ::CMsgDraftTrivia_DraftTriviaHeroInfo& CMsgDraftTrivia_DraftTriviaMatchInfo::dire_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.DraftTriviaMatchInfo.dire_heroes)
  return _internal_dire_heroes(index);
}
inline ::CMsgDraftTrivia_DraftTriviaHeroInfo* CMsgDraftTrivia_DraftTriviaMatchInfo::_internal_add_dire_heroes() {
  return _impl_.dire_heroes_.Add();
}
inline ::CMsgDraftTrivia_DraftTriviaHeroInfo* CMsgDraftTrivia_DraftTriviaMatchInfo::add_dire_heroes() {
  ::CMsgDraftTrivia_DraftTriviaHeroInfo* _add = _internal_add_dire_heroes();
  // @@protoc_insertion_point(field_add:CMsgDraftTrivia.DraftTriviaMatchInfo.dire_heroes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraftTrivia_DraftTriviaHeroInfo >&
CMsgDraftTrivia_DraftTriviaMatchInfo::dire_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgDraftTrivia.DraftTriviaMatchInfo.dire_heroes)
  return _impl_.dire_heroes_;
}

// -------------------------------------------------------------------

// CMsgDraftTrivia_PreviousResult

// optional bool voted_correctly = 1;
inline bool CMsgDraftTrivia_PreviousResult::_internal_has_voted_correctly() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDraftTrivia_PreviousResult::has_voted_correctly() const {
  return _internal_has_voted_correctly();
}
inline void CMsgDraftTrivia_PreviousResult::clear_voted_correctly() {
  _impl_.voted_correctly_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgDraftTrivia_PreviousResult::_internal_voted_correctly() const {
  return _impl_.voted_correctly_;
}
inline bool CMsgDraftTrivia_PreviousResult::voted_correctly() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.PreviousResult.voted_correctly)
  return _internal_voted_correctly();
}
inline void CMsgDraftTrivia_PreviousResult::_internal_set_voted_correctly(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.voted_correctly_ = value;
}
inline void CMsgDraftTrivia_PreviousResult::set_voted_correctly(bool value) {
  _internal_set_voted_correctly(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.PreviousResult.voted_correctly)
}

// optional bool voted_radiant = 2;
inline bool CMsgDraftTrivia_PreviousResult::_internal_has_voted_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDraftTrivia_PreviousResult::has_voted_radiant() const {
  return _internal_has_voted_radiant();
}
inline void CMsgDraftTrivia_PreviousResult::clear_voted_radiant() {
  _impl_.voted_radiant_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDraftTrivia_PreviousResult::_internal_voted_radiant() const {
  return _impl_.voted_radiant_;
}
inline bool CMsgDraftTrivia_PreviousResult::voted_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.PreviousResult.voted_radiant)
  return _internal_voted_radiant();
}
inline void CMsgDraftTrivia_PreviousResult::_internal_set_voted_radiant(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.voted_radiant_ = value;
}
inline void CMsgDraftTrivia_PreviousResult::set_voted_radiant(bool value) {
  _internal_set_voted_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.PreviousResult.voted_radiant)
}

// optional .CMsgDraftTrivia.DraftTriviaMatchInfo match_hero_info = 3;
inline bool CMsgDraftTrivia_PreviousResult::_internal_has_match_hero_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_hero_info_ != nullptr);
  return value;
}
inline bool CMsgDraftTrivia_PreviousResult::has_match_hero_info() const {
  return _internal_has_match_hero_info();
}
inline void CMsgDraftTrivia_PreviousResult::clear_match_hero_info() {
  if (_impl_.match_hero_info_ != nullptr) _impl_.match_hero_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDraftTrivia_DraftTriviaMatchInfo& CMsgDraftTrivia_PreviousResult::_internal_match_hero_info() const {
  const ::CMsgDraftTrivia_DraftTriviaMatchInfo* p = _impl_.match_hero_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDraftTrivia_DraftTriviaMatchInfo&>(
      ::_CMsgDraftTrivia_DraftTriviaMatchInfo_default_instance_);
}
inline const ::CMsgDraftTrivia_DraftTriviaMatchInfo& CMsgDraftTrivia_PreviousResult::match_hero_info() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.PreviousResult.match_hero_info)
  return _internal_match_hero_info();
}
inline void CMsgDraftTrivia_PreviousResult::unsafe_arena_set_allocated_match_hero_info(
    ::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_hero_info_);
  }
  _impl_.match_hero_info_ = match_hero_info;
  if (match_hero_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDraftTrivia.PreviousResult.match_hero_info)
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia_PreviousResult::release_match_hero_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* temp = _impl_.match_hero_info_;
  _impl_.match_hero_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia_PreviousResult::unsafe_arena_release_match_hero_info() {
  // @@protoc_insertion_point(field_release:CMsgDraftTrivia.PreviousResult.match_hero_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* temp = _impl_.match_hero_info_;
  _impl_.match_hero_info_ = nullptr;
  return temp;
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia_PreviousResult::_internal_mutable_match_hero_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_hero_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDraftTrivia_DraftTriviaMatchInfo>(GetArenaForAllocation());
    _impl_.match_hero_info_ = p;
  }
  return _impl_.match_hero_info_;
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia_PreviousResult::mutable_match_hero_info() {
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* _msg = _internal_mutable_match_hero_info();
  // @@protoc_insertion_point(field_mutable:CMsgDraftTrivia.PreviousResult.match_hero_info)
  return _msg;
}
inline void CMsgDraftTrivia_PreviousResult::set_allocated_match_hero_info(::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.match_hero_info_;
  }
  if (match_hero_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match_hero_info);
    if (message_arena != submessage_arena) {
      match_hero_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_hero_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_hero_info_ = match_hero_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDraftTrivia.PreviousResult.match_hero_info)
}

// optional uint32 match_rank_tier = 4;
inline bool CMsgDraftTrivia_PreviousResult::_internal_has_match_rank_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDraftTrivia_PreviousResult::has_match_rank_tier() const {
  return _internal_has_match_rank_tier();
}
inline void CMsgDraftTrivia_PreviousResult::clear_match_rank_tier() {
  _impl_.match_rank_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDraftTrivia_PreviousResult::_internal_match_rank_tier() const {
  return _impl_.match_rank_tier_;
}
inline uint32_t CMsgDraftTrivia_PreviousResult::match_rank_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.PreviousResult.match_rank_tier)
  return _internal_match_rank_tier();
}
inline void CMsgDraftTrivia_PreviousResult::_internal_set_match_rank_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.match_rank_tier_ = value;
}
inline void CMsgDraftTrivia_PreviousResult::set_match_rank_tier(uint32_t value) {
  _internal_set_match_rank_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.PreviousResult.match_rank_tier)
}

// optional uint32 end_time = 5;
inline bool CMsgDraftTrivia_PreviousResult::_internal_has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDraftTrivia_PreviousResult::has_end_time() const {
  return _internal_has_end_time();
}
inline void CMsgDraftTrivia_PreviousResult::clear_end_time() {
  _impl_.end_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDraftTrivia_PreviousResult::_internal_end_time() const {
  return _impl_.end_time_;
}
inline uint32_t CMsgDraftTrivia_PreviousResult::end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.PreviousResult.end_time)
  return _internal_end_time();
}
inline void CMsgDraftTrivia_PreviousResult::_internal_set_end_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.end_time_ = value;
}
inline void CMsgDraftTrivia_PreviousResult::set_end_time(uint32_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.PreviousResult.end_time)
}

// optional uint64 match_id = 6;
inline bool CMsgDraftTrivia_PreviousResult::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDraftTrivia_PreviousResult::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDraftTrivia_PreviousResult::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgDraftTrivia_PreviousResult::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDraftTrivia_PreviousResult::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.PreviousResult.match_id)
  return _internal_match_id();
}
inline void CMsgDraftTrivia_PreviousResult::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.match_id_ = value;
}
inline void CMsgDraftTrivia_PreviousResult::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.PreviousResult.match_id)
}

// -------------------------------------------------------------------

// CMsgDraftTrivia

// optional bool has_valid_match = 1;
inline bool CMsgDraftTrivia::_internal_has_has_valid_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDraftTrivia::has_has_valid_match() const {
  return _internal_has_has_valid_match();
}
inline void CMsgDraftTrivia::clear_has_valid_match() {
  _impl_.has_valid_match_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgDraftTrivia::_internal_has_valid_match() const {
  return _impl_.has_valid_match_;
}
inline bool CMsgDraftTrivia::has_valid_match() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.has_valid_match)
  return _internal_has_valid_match();
}
inline void CMsgDraftTrivia::_internal_set_has_valid_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.has_valid_match_ = value;
}
inline void CMsgDraftTrivia::set_has_valid_match(bool value) {
  _internal_set_has_valid_match(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.has_valid_match)
}

// optional .CMsgDraftTrivia.DraftTriviaMatchInfo match_hero_info = 2;
inline bool CMsgDraftTrivia::_internal_has_match_hero_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_hero_info_ != nullptr);
  return value;
}
inline bool CMsgDraftTrivia::has_match_hero_info() const {
  return _internal_has_match_hero_info();
}
inline void CMsgDraftTrivia::clear_match_hero_info() {
  if (_impl_.match_hero_info_ != nullptr) _impl_.match_hero_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDraftTrivia_DraftTriviaMatchInfo& CMsgDraftTrivia::_internal_match_hero_info() const {
  const ::CMsgDraftTrivia_DraftTriviaMatchInfo* p = _impl_.match_hero_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDraftTrivia_DraftTriviaMatchInfo&>(
      ::_CMsgDraftTrivia_DraftTriviaMatchInfo_default_instance_);
}
inline const ::CMsgDraftTrivia_DraftTriviaMatchInfo& CMsgDraftTrivia::match_hero_info() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.match_hero_info)
  return _internal_match_hero_info();
}
inline void CMsgDraftTrivia::unsafe_arena_set_allocated_match_hero_info(
    ::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_hero_info_);
  }
  _impl_.match_hero_info_ = match_hero_info;
  if (match_hero_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDraftTrivia.match_hero_info)
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia::release_match_hero_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* temp = _impl_.match_hero_info_;
  _impl_.match_hero_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia::unsafe_arena_release_match_hero_info() {
  // @@protoc_insertion_point(field_release:CMsgDraftTrivia.match_hero_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* temp = _impl_.match_hero_info_;
  _impl_.match_hero_info_ = nullptr;
  return temp;
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia::_internal_mutable_match_hero_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_hero_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDraftTrivia_DraftTriviaMatchInfo>(GetArenaForAllocation());
    _impl_.match_hero_info_ = p;
  }
  return _impl_.match_hero_info_;
}
inline ::CMsgDraftTrivia_DraftTriviaMatchInfo* CMsgDraftTrivia::mutable_match_hero_info() {
  ::CMsgDraftTrivia_DraftTriviaMatchInfo* _msg = _internal_mutable_match_hero_info();
  // @@protoc_insertion_point(field_mutable:CMsgDraftTrivia.match_hero_info)
  return _msg;
}
inline void CMsgDraftTrivia::set_allocated_match_hero_info(::CMsgDraftTrivia_DraftTriviaMatchInfo* match_hero_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.match_hero_info_;
  }
  if (match_hero_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match_hero_info);
    if (message_arena != submessage_arena) {
      match_hero_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_hero_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_hero_info_ = match_hero_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDraftTrivia.match_hero_info)
}

// optional uint32 match_rank_tier = 3;
inline bool CMsgDraftTrivia::_internal_has_match_rank_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDraftTrivia::has_match_rank_tier() const {
  return _internal_has_match_rank_tier();
}
inline void CMsgDraftTrivia::clear_match_rank_tier() {
  _impl_.match_rank_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDraftTrivia::_internal_match_rank_tier() const {
  return _impl_.match_rank_tier_;
}
inline uint32_t CMsgDraftTrivia::match_rank_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.match_rank_tier)
  return _internal_match_rank_tier();
}
inline void CMsgDraftTrivia::_internal_set_match_rank_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_rank_tier_ = value;
}
inline void CMsgDraftTrivia::set_match_rank_tier(uint32_t value) {
  _internal_set_match_rank_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.match_rank_tier)
}

// optional uint32 end_time = 4;
inline bool CMsgDraftTrivia::_internal_has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDraftTrivia::has_end_time() const {
  return _internal_has_end_time();
}
inline void CMsgDraftTrivia::clear_end_time() {
  _impl_.end_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDraftTrivia::_internal_end_time() const {
  return _impl_.end_time_;
}
inline uint32_t CMsgDraftTrivia::end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.end_time)
  return _internal_end_time();
}
inline void CMsgDraftTrivia::_internal_set_end_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.end_time_ = value;
}
inline void CMsgDraftTrivia::set_end_time(uint32_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.end_time)
}

// optional uint32 event_id = 5;
inline bool CMsgDraftTrivia::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDraftTrivia::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgDraftTrivia::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDraftTrivia::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgDraftTrivia::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.event_id)
  return _internal_event_id();
}
inline void CMsgDraftTrivia::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.event_id_ = value;
}
inline void CMsgDraftTrivia::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.event_id)
}

// optional bool current_match_voted_radiant = 6;
inline bool CMsgDraftTrivia::_internal_has_current_match_voted_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDraftTrivia::has_current_match_voted_radiant() const {
  return _internal_has_current_match_voted_radiant();
}
inline void CMsgDraftTrivia::clear_current_match_voted_radiant() {
  _impl_.current_match_voted_radiant_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgDraftTrivia::_internal_current_match_voted_radiant() const {
  return _impl_.current_match_voted_radiant_;
}
inline bool CMsgDraftTrivia::current_match_voted_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.current_match_voted_radiant)
  return _internal_current_match_voted_radiant();
}
inline void CMsgDraftTrivia::_internal_set_current_match_voted_radiant(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.current_match_voted_radiant_ = value;
}
inline void CMsgDraftTrivia::set_current_match_voted_radiant(bool value) {
  _internal_set_current_match_voted_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.current_match_voted_radiant)
}

// optional .CMsgDraftTrivia.PreviousResult previous_result = 7;
inline bool CMsgDraftTrivia::_internal_has_previous_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.previous_result_ != nullptr);
  return value;
}
inline bool CMsgDraftTrivia::has_previous_result() const {
  return _internal_has_previous_result();
}
inline void CMsgDraftTrivia::clear_previous_result() {
  if (_impl_.previous_result_ != nullptr) _impl_.previous_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDraftTrivia_PreviousResult& CMsgDraftTrivia::_internal_previous_result() const {
  const ::CMsgDraftTrivia_PreviousResult* p = _impl_.previous_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDraftTrivia_PreviousResult&>(
      ::_CMsgDraftTrivia_PreviousResult_default_instance_);
}
inline const ::CMsgDraftTrivia_PreviousResult& CMsgDraftTrivia::previous_result() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.previous_result)
  return _internal_previous_result();
}
inline void CMsgDraftTrivia::unsafe_arena_set_allocated_previous_result(
    ::CMsgDraftTrivia_PreviousResult* previous_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.previous_result_);
  }
  _impl_.previous_result_ = previous_result;
  if (previous_result) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDraftTrivia.previous_result)
}
inline ::CMsgDraftTrivia_PreviousResult* CMsgDraftTrivia::release_previous_result() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDraftTrivia_PreviousResult* temp = _impl_.previous_result_;
  _impl_.previous_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDraftTrivia_PreviousResult* CMsgDraftTrivia::unsafe_arena_release_previous_result() {
  // @@protoc_insertion_point(field_release:CMsgDraftTrivia.previous_result)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDraftTrivia_PreviousResult* temp = _impl_.previous_result_;
  _impl_.previous_result_ = nullptr;
  return temp;
}
inline ::CMsgDraftTrivia_PreviousResult* CMsgDraftTrivia::_internal_mutable_previous_result() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.previous_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDraftTrivia_PreviousResult>(GetArenaForAllocation());
    _impl_.previous_result_ = p;
  }
  return _impl_.previous_result_;
}
inline ::CMsgDraftTrivia_PreviousResult* CMsgDraftTrivia::mutable_previous_result() {
  ::CMsgDraftTrivia_PreviousResult* _msg = _internal_mutable_previous_result();
  // @@protoc_insertion_point(field_mutable:CMsgDraftTrivia.previous_result)
  return _msg;
}
inline void CMsgDraftTrivia::set_allocated_previous_result(::CMsgDraftTrivia_PreviousResult* previous_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.previous_result_;
  }
  if (previous_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(previous_result);
    if (message_arena != submessage_arena) {
      previous_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.previous_result_ = previous_result;
  // @@protoc_insertion_point(field_set_allocated:CMsgDraftTrivia.previous_result)
}

// optional uint32 current_streak = 8;
inline bool CMsgDraftTrivia::_internal_has_current_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDraftTrivia::has_current_streak() const {
  return _internal_has_current_streak();
}
inline void CMsgDraftTrivia::clear_current_streak() {
  _impl_.current_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDraftTrivia::_internal_current_streak() const {
  return _impl_.current_streak_;
}
inline uint32_t CMsgDraftTrivia::current_streak() const {
  // @@protoc_insertion_point(field_get:CMsgDraftTrivia.current_streak)
  return _internal_current_streak();
}
inline void CMsgDraftTrivia::_internal_set_current_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.current_streak_ = value;
}
inline void CMsgDraftTrivia::set_current_streak(uint32_t value) {
  _internal_set_current_streak(value);
  // @@protoc_insertion_point(field_set:CMsgDraftTrivia.current_streak)
}

// -------------------------------------------------------------------

// CMsgTeamFanContentAssetStatus

// optional .ETeamFanContentAssetType asset_type = 1 [default = k_eFanContentAssetType_LogoPNG];
inline bool CMsgTeamFanContentAssetStatus::_internal_has_asset_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAssetStatus::has_asset_type() const {
  return _internal_has_asset_type();
}
inline void CMsgTeamFanContentAssetStatus::clear_asset_type() {
  _impl_.asset_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::ETeamFanContentAssetType CMsgTeamFanContentAssetStatus::_internal_asset_type() const {
  return static_cast< ::ETeamFanContentAssetType >(_impl_.asset_type_);
}
inline ::ETeamFanContentAssetType CMsgTeamFanContentAssetStatus::asset_type() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAssetStatus.asset_type)
  return _internal_asset_type();
}
inline void CMsgTeamFanContentAssetStatus::_internal_set_asset_type(::ETeamFanContentAssetType value) {
  assert(::ETeamFanContentAssetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.asset_type_ = value;
}
inline void CMsgTeamFanContentAssetStatus::set_asset_type(::ETeamFanContentAssetType value) {
  _internal_set_asset_type(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAssetStatus.asset_type)
}

// optional uint32 asset_index = 2;
inline bool CMsgTeamFanContentAssetStatus::_internal_has_asset_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAssetStatus::has_asset_index() const {
  return _internal_has_asset_index();
}
inline void CMsgTeamFanContentAssetStatus::clear_asset_index() {
  _impl_.asset_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgTeamFanContentAssetStatus::_internal_asset_index() const {
  return _impl_.asset_index_;
}
inline uint32_t CMsgTeamFanContentAssetStatus::asset_index() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAssetStatus.asset_index)
  return _internal_asset_index();
}
inline void CMsgTeamFanContentAssetStatus::_internal_set_asset_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.asset_index_ = value;
}
inline void CMsgTeamFanContentAssetStatus::set_asset_index(uint32_t value) {
  _internal_set_asset_index(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAssetStatus.asset_index)
}

// optional .ETeamFanContentAssetStatus asset_status = 3 [default = k_eFanContentAssetStatus_None];
inline bool CMsgTeamFanContentAssetStatus::_internal_has_asset_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAssetStatus::has_asset_status() const {
  return _internal_has_asset_status();
}
inline void CMsgTeamFanContentAssetStatus::clear_asset_status() {
  _impl_.asset_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ETeamFanContentAssetStatus CMsgTeamFanContentAssetStatus::_internal_asset_status() const {
  return static_cast< ::ETeamFanContentAssetStatus >(_impl_.asset_status_);
}
inline ::ETeamFanContentAssetStatus CMsgTeamFanContentAssetStatus::asset_status() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAssetStatus.asset_status)
  return _internal_asset_status();
}
inline void CMsgTeamFanContentAssetStatus::_internal_set_asset_status(::ETeamFanContentAssetStatus value) {
  assert(::ETeamFanContentAssetStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.asset_status_ = value;
}
inline void CMsgTeamFanContentAssetStatus::set_asset_status(::ETeamFanContentAssetStatus value) {
  _internal_set_asset_status(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAssetStatus.asset_status)
}

// optional uint32 crc = 4;
inline bool CMsgTeamFanContentAssetStatus::_internal_has_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAssetStatus::has_crc() const {
  return _internal_has_crc();
}
inline void CMsgTeamFanContentAssetStatus::clear_crc() {
  _impl_.crc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgTeamFanContentAssetStatus::_internal_crc() const {
  return _impl_.crc_;
}
inline uint32_t CMsgTeamFanContentAssetStatus::crc() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAssetStatus.crc)
  return _internal_crc();
}
inline void CMsgTeamFanContentAssetStatus::_internal_set_crc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.crc_ = value;
}
inline void CMsgTeamFanContentAssetStatus::set_crc(uint32_t value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAssetStatus.crc)
}

// -------------------------------------------------------------------

// CMsgTeamFanContentAssetStatusResponse

// optional .CMsgTeamFanContentAssetStatusResponse.EResult result = 1 [default = k_eSuccess];
inline bool CMsgTeamFanContentAssetStatusResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAssetStatusResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgTeamFanContentAssetStatusResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgTeamFanContentAssetStatusResponse_EResult CMsgTeamFanContentAssetStatusResponse::_internal_result() const {
  return static_cast< ::CMsgTeamFanContentAssetStatusResponse_EResult >(_impl_.result_);
}
inline ::CMsgTeamFanContentAssetStatusResponse_EResult CMsgTeamFanContentAssetStatusResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAssetStatusResponse.result)
  return _internal_result();
}
inline void CMsgTeamFanContentAssetStatusResponse::_internal_set_result(::CMsgTeamFanContentAssetStatusResponse_EResult value) {
  assert(::CMsgTeamFanContentAssetStatusResponse_EResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgTeamFanContentAssetStatusResponse::set_result(::CMsgTeamFanContentAssetStatusResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAssetStatusResponse.result)
}

// -------------------------------------------------------------------

// CMsgTeamFanContentStatus_TeamStatus

// optional string name = 1;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_name() const {
  return _internal_has_name();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::name() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentStatus_TeamStatus::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.name)
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentStatus.TeamStatus.name)
  return _s;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::release_name() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentStatus.TeamStatus.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentStatus.TeamStatus.name)
}

// optional uint32 team_id = 2;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.team_id)
  return _internal_team_id();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_id_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.team_id)
}

// optional string logo_url = 3;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_logo_url() const {
  return _internal_has_logo_url();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_logo_url() {
  _impl_.logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.logo_url)
  return _internal_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentStatus_TeamStatus::set_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.logo_url)
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::mutable_logo_url() {
  std::string* _s = _internal_mutable_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentStatus.TeamStatus.logo_url)
  return _s;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::_internal_logo_url() const {
  return _impl_.logo_url_.Get();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::_internal_mutable_logo_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::release_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentStatus.TeamStatus.logo_url)
  if (!_internal_has_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logo_url_.IsDefault()) {
    _impl_.logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_allocated_logo_url(std::string* logo_url) {
  if (logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.logo_url_.SetAllocated(logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logo_url_.IsDefault()) {
    _impl_.logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentStatus.TeamStatus.logo_url)
}

// optional .ETeamFanContentStatus status = 4 [default = TEAM_FAN_CONTENT_STATUS_INVALID];
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_status() const {
  return _internal_has_status();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::ETeamFanContentStatus CMsgTeamFanContentStatus_TeamStatus::_internal_status() const {
  return static_cast< ::ETeamFanContentStatus >(_impl_.status_);
}
inline ::ETeamFanContentStatus CMsgTeamFanContentStatus_TeamStatus::status() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.status)
  return _internal_status();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_status(::ETeamFanContentStatus value) {
  assert(::ETeamFanContentStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.status_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_status(::ETeamFanContentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.status)
}

// optional uint32 timestamp = 5;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.timestamp)
  return _internal_timestamp();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timestamp_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.timestamp)
}

// optional uint64 ugc_logo = 7;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_ugc_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_ugc_logo() const {
  return _internal_has_ugc_logo();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_ugc_logo() {
  _impl_.ugc_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgTeamFanContentStatus_TeamStatus::_internal_ugc_logo() const {
  return _impl_.ugc_logo_;
}
inline uint64_t CMsgTeamFanContentStatus_TeamStatus::ugc_logo() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.ugc_logo)
  return _internal_ugc_logo();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_ugc_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.ugc_logo_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_ugc_logo(uint64_t value) {
  _internal_set_ugc_logo(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.ugc_logo)
}

// optional uint32 workshop_account_id = 8;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_workshop_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_workshop_account_id() const {
  return _internal_has_workshop_account_id();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_workshop_account_id() {
  _impl_.workshop_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_workshop_account_id() const {
  return _impl_.workshop_account_id_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::workshop_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.workshop_account_id)
  return _internal_workshop_account_id();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_workshop_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.workshop_account_id_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_workshop_account_id(uint32_t value) {
  _internal_set_workshop_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.workshop_account_id)
}

// optional string abbreviation = 9;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_abbreviation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_abbreviation() const {
  return _internal_has_abbreviation();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_abbreviation() {
  _impl_.abbreviation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::abbreviation() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.abbreviation)
  return _internal_abbreviation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentStatus_TeamStatus::set_abbreviation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.abbreviation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.abbreviation)
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::mutable_abbreviation() {
  std::string* _s = _internal_mutable_abbreviation();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentStatus.TeamStatus.abbreviation)
  return _s;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::_internal_abbreviation() const {
  return _impl_.abbreviation_.Get();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_abbreviation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.abbreviation_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::_internal_mutable_abbreviation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.abbreviation_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::release_abbreviation() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentStatus.TeamStatus.abbreviation)
  if (!_internal_has_abbreviation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.abbreviation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abbreviation_.IsDefault()) {
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_allocated_abbreviation(std::string* abbreviation) {
  if (abbreviation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.abbreviation_.SetAllocated(abbreviation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abbreviation_.IsDefault()) {
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentStatus.TeamStatus.abbreviation)
}

// optional uint32 voiceline_count = 10;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_voiceline_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_voiceline_count() const {
  return _internal_has_voiceline_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_voiceline_count() {
  _impl_.voiceline_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_voiceline_count() const {
  return _impl_.voiceline_count_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::voiceline_count() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.voiceline_count)
  return _internal_voiceline_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_voiceline_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.voiceline_count_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_voiceline_count(uint32_t value) {
  _internal_set_voiceline_count(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.voiceline_count)
}

// optional uint32 spray_count = 11;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_spray_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_spray_count() const {
  return _internal_has_spray_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_spray_count() {
  _impl_.spray_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_spray_count() const {
  return _impl_.spray_count_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::spray_count() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.spray_count)
  return _internal_spray_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_spray_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.spray_count_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_spray_count(uint32_t value) {
  _internal_set_spray_count(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.spray_count)
}

// optional uint32 emoticon_count = 12;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_emoticon_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_emoticon_count() const {
  return _internal_has_emoticon_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_emoticon_count() {
  _impl_.emoticon_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_emoticon_count() const {
  return _impl_.emoticon_count_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::emoticon_count() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.emoticon_count)
  return _internal_emoticon_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_emoticon_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.emoticon_count_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_emoticon_count(uint32_t value) {
  _internal_set_emoticon_count(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.emoticon_count)
}

// optional uint32 wallpaper_count = 13;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_wallpaper_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_wallpaper_count() const {
  return _internal_has_wallpaper_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_wallpaper_count() {
  _impl_.wallpaper_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_wallpaper_count() const {
  return _impl_.wallpaper_count_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::wallpaper_count() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.wallpaper_count)
  return _internal_wallpaper_count();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_wallpaper_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.wallpaper_count_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_wallpaper_count(uint32_t value) {
  _internal_set_wallpaper_count(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.wallpaper_count)
}

// optional string comment = 14;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_comment() const {
  return _internal_has_comment();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_comment() {
  _impl_.comment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::comment() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentStatus_TeamStatus::set_comment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.comment)
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentStatus.TeamStatus.comment)
  return _s;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_comment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::_internal_mutable_comment() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::release_comment() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentStatus.TeamStatus.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentStatus.TeamStatus.comment)
}

// optional uint32 comment_timestamp = 15;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_comment_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_comment_timestamp() const {
  return _internal_has_comment_timestamp();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_comment_timestamp() {
  _impl_.comment_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_comment_timestamp() const {
  return _impl_.comment_timestamp_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::comment_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.comment_timestamp)
  return _internal_comment_timestamp();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_comment_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.comment_timestamp_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_comment_timestamp(uint32_t value) {
  _internal_set_comment_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.comment_timestamp)
}

// repeated .CMsgTeamFanContentAssetStatus asset_status = 16;
inline int CMsgTeamFanContentStatus_TeamStatus::_internal_asset_status_size() const {
  return _impl_.asset_status_.size();
}
inline int CMsgTeamFanContentStatus_TeamStatus::asset_status_size() const {
  return _internal_asset_status_size();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_asset_status() {
  _impl_.asset_status_.Clear();
}
inline ::CMsgTeamFanContentAssetStatus* CMsgTeamFanContentStatus_TeamStatus::mutable_asset_status(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentStatus.TeamStatus.asset_status)
  return _impl_.asset_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAssetStatus >*
CMsgTeamFanContentStatus_TeamStatus::mutable_asset_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTeamFanContentStatus.TeamStatus.asset_status)
  return &_impl_.asset_status_;
}
inline const ::CMsgTeamFanContentAssetStatus& CMsgTeamFanContentStatus_TeamStatus::_internal_asset_status(int index) const {
  return _impl_.asset_status_.Get(index);
}
inline const ::CMsgTeamFanContentAssetStatus& CMsgTeamFanContentStatus_TeamStatus::asset_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.asset_status)
  return _internal_asset_status(index);
}
inline ::CMsgTeamFanContentAssetStatus* CMsgTeamFanContentStatus_TeamStatus::_internal_add_asset_status() {
  return _impl_.asset_status_.Add();
}
inline ::CMsgTeamFanContentAssetStatus* CMsgTeamFanContentStatus_TeamStatus::add_asset_status() {
  ::CMsgTeamFanContentAssetStatus* _add = _internal_add_asset_status();
  // @@protoc_insertion_point(field_add:CMsgTeamFanContentStatus.TeamStatus.asset_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAssetStatus >&
CMsgTeamFanContentStatus_TeamStatus::asset_status() const {
  // @@protoc_insertion_point(field_list:CMsgTeamFanContentStatus.TeamStatus.asset_status)
  return _impl_.asset_status_;
}

// optional uint32 email_timestamp = 17;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_email_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_email_timestamp() const {
  return _internal_has_email_timestamp();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_email_timestamp() {
  _impl_.email_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_email_timestamp() const {
  return _impl_.email_timestamp_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::email_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.email_timestamp)
  return _internal_email_timestamp();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_email_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.email_timestamp_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_email_timestamp(uint32_t value) {
  _internal_set_email_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.email_timestamp)
}

// optional uint32 email_tier = 18;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_email_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_email_tier() const {
  return _internal_has_email_tier();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_email_tier() {
  _impl_.email_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::_internal_email_tier() const {
  return _impl_.email_tier_;
}
inline uint32_t CMsgTeamFanContentStatus_TeamStatus::email_tier() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.email_tier)
  return _internal_email_tier();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_email_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.email_tier_ = value;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_email_tier(uint32_t value) {
  _internal_set_email_tier(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.email_tier)
}

// optional string languages = 19;
inline bool CMsgTeamFanContentStatus_TeamStatus::_internal_has_languages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgTeamFanContentStatus_TeamStatus::has_languages() const {
  return _internal_has_languages();
}
inline void CMsgTeamFanContentStatus_TeamStatus::clear_languages() {
  _impl_.languages_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::languages() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.TeamStatus.languages)
  return _internal_languages();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentStatus_TeamStatus::set_languages(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.languages_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentStatus.TeamStatus.languages)
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::mutable_languages() {
  std::string* _s = _internal_mutable_languages();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentStatus.TeamStatus.languages)
  return _s;
}
inline const std::string& CMsgTeamFanContentStatus_TeamStatus::_internal_languages() const {
  return _impl_.languages_.Get();
}
inline void CMsgTeamFanContentStatus_TeamStatus::_internal_set_languages(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.languages_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::_internal_mutable_languages() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.languages_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentStatus_TeamStatus::release_languages() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentStatus.TeamStatus.languages)
  if (!_internal_has_languages()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.languages_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.languages_.IsDefault()) {
    _impl_.languages_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentStatus_TeamStatus::set_allocated_languages(std::string* languages) {
  if (languages != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.languages_.SetAllocated(languages, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.languages_.IsDefault()) {
    _impl_.languages_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentStatus.TeamStatus.languages)
}

// -------------------------------------------------------------------

// CMsgTeamFanContentStatus

// repeated .CMsgTeamFanContentStatus.TeamStatus team_status_list = 1;
inline int CMsgTeamFanContentStatus::_internal_team_status_list_size() const {
  return _impl_.team_status_list_.size();
}
inline int CMsgTeamFanContentStatus::team_status_list_size() const {
  return _internal_team_status_list_size();
}
inline void CMsgTeamFanContentStatus::clear_team_status_list() {
  _impl_.team_status_list_.Clear();
}
inline ::CMsgTeamFanContentStatus_TeamStatus* CMsgTeamFanContentStatus::mutable_team_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentStatus.team_status_list)
  return _impl_.team_status_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentStatus_TeamStatus >*
CMsgTeamFanContentStatus::mutable_team_status_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTeamFanContentStatus.team_status_list)
  return &_impl_.team_status_list_;
}
inline const ::CMsgTeamFanContentStatus_TeamStatus& CMsgTeamFanContentStatus::_internal_team_status_list(int index) const {
  return _impl_.team_status_list_.Get(index);
}
inline const ::CMsgTeamFanContentStatus_TeamStatus& CMsgTeamFanContentStatus::team_status_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentStatus.team_status_list)
  return _internal_team_status_list(index);
}
inline ::CMsgTeamFanContentStatus_TeamStatus* CMsgTeamFanContentStatus::_internal_add_team_status_list() {
  return _impl_.team_status_list_.Add();
}
inline ::CMsgTeamFanContentStatus_TeamStatus* CMsgTeamFanContentStatus::add_team_status_list() {
  ::CMsgTeamFanContentStatus_TeamStatus* _add = _internal_add_team_status_list();
  // @@protoc_insertion_point(field_add:CMsgTeamFanContentStatus.team_status_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentStatus_TeamStatus >&
CMsgTeamFanContentStatus::team_status_list() const {
  // @@protoc_insertion_point(field_list:CMsgTeamFanContentStatus.team_status_list)
  return _impl_.team_status_list_;
}

// -------------------------------------------------------------------

// CMsgTeamFanContentAutographStatus_AutographStatus

// optional string pro_name = 1;
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::_internal_has_pro_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::has_pro_name() const {
  return _internal_has_pro_name();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::clear_pro_name() {
  _impl_.pro_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTeamFanContentAutographStatus_AutographStatus::pro_name() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.AutographStatus.pro_name)
  return _internal_pro_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentAutographStatus_AutographStatus::set_pro_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pro_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAutographStatus.AutographStatus.pro_name)
}
inline std::string* CMsgTeamFanContentAutographStatus_AutographStatus::mutable_pro_name() {
  std::string* _s = _internal_mutable_pro_name();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentAutographStatus.AutographStatus.pro_name)
  return _s;
}
inline const std::string& CMsgTeamFanContentAutographStatus_AutographStatus::_internal_pro_name() const {
  return _impl_.pro_name_.Get();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::_internal_set_pro_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pro_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentAutographStatus_AutographStatus::_internal_mutable_pro_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pro_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentAutographStatus_AutographStatus::release_pro_name() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentAutographStatus.AutographStatus.pro_name)
  if (!_internal_has_pro_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pro_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pro_name_.IsDefault()) {
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::set_allocated_pro_name(std::string* pro_name) {
  if (pro_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pro_name_.SetAllocated(pro_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pro_name_.IsDefault()) {
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentAutographStatus.AutographStatus.pro_name)
}

// optional uint32 account_id = 2;
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgTeamFanContentAutographStatus_AutographStatus::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgTeamFanContentAutographStatus_AutographStatus::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.AutographStatus.account_id)
  return _internal_account_id();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.account_id_ = value;
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAutographStatus.AutographStatus.account_id)
}

// optional uint32 timestamp = 3;
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgTeamFanContentAutographStatus_AutographStatus::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgTeamFanContentAutographStatus_AutographStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.AutographStatus.timestamp)
  return _internal_timestamp();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.timestamp_ = value;
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAutographStatus.AutographStatus.timestamp)
}

// optional string file = 4;
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::_internal_has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAutographStatus_AutographStatus::has_file() const {
  return _internal_has_file();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::clear_file() {
  _impl_.file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgTeamFanContentAutographStatus_AutographStatus::file() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.AutographStatus.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentAutographStatus_AutographStatus::set_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAutographStatus.AutographStatus.file)
}
inline std::string* CMsgTeamFanContentAutographStatus_AutographStatus::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentAutographStatus.AutographStatus.file)
  return _s;
}
inline const std::string& CMsgTeamFanContentAutographStatus_AutographStatus::_internal_file() const {
  return _impl_.file_.Get();
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::_internal_set_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentAutographStatus_AutographStatus::_internal_mutable_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentAutographStatus_AutographStatus::release_file() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentAutographStatus.AutographStatus.file)
  if (!_internal_has_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentAutographStatus_AutographStatus::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentAutographStatus.AutographStatus.file)
}

// -------------------------------------------------------------------

// CMsgTeamFanContentAutographStatus_TeamStatus

// optional string name = 1;
inline bool CMsgTeamFanContentAutographStatus_TeamStatus::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAutographStatus_TeamStatus::has_name() const {
  return _internal_has_name();
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTeamFanContentAutographStatus_TeamStatus::name() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.TeamStatus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTeamFanContentAutographStatus_TeamStatus::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAutographStatus.TeamStatus.name)
}
inline std::string* CMsgTeamFanContentAutographStatus_TeamStatus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentAutographStatus.TeamStatus.name)
  return _s;
}
inline const std::string& CMsgTeamFanContentAutographStatus_TeamStatus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentAutographStatus_TeamStatus::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTeamFanContentAutographStatus_TeamStatus::release_name() {
  // @@protoc_insertion_point(field_release:CMsgTeamFanContentAutographStatus.TeamStatus.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTeamFanContentAutographStatus.TeamStatus.name)
}

// optional uint32 team_id = 2;
inline bool CMsgTeamFanContentAutographStatus_TeamStatus::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAutographStatus_TeamStatus::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgTeamFanContentAutographStatus_TeamStatus::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgTeamFanContentAutographStatus_TeamStatus::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.TeamStatus.team_id)
  return _internal_team_id();
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_id_ = value;
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAutographStatus.TeamStatus.team_id)
}

// repeated .CMsgTeamFanContentAutographStatus.AutographStatus autographs = 3;
inline int CMsgTeamFanContentAutographStatus_TeamStatus::_internal_autographs_size() const {
  return _impl_.autographs_.size();
}
inline int CMsgTeamFanContentAutographStatus_TeamStatus::autographs_size() const {
  return _internal_autographs_size();
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::clear_autographs() {
  _impl_.autographs_.Clear();
}
inline ::CMsgTeamFanContentAutographStatus_AutographStatus* CMsgTeamFanContentAutographStatus_TeamStatus::mutable_autographs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentAutographStatus.TeamStatus.autographs)
  return _impl_.autographs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_AutographStatus >*
CMsgTeamFanContentAutographStatus_TeamStatus::mutable_autographs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTeamFanContentAutographStatus.TeamStatus.autographs)
  return &_impl_.autographs_;
}
inline const ::CMsgTeamFanContentAutographStatus_AutographStatus& CMsgTeamFanContentAutographStatus_TeamStatus::_internal_autographs(int index) const {
  return _impl_.autographs_.Get(index);
}
inline const ::CMsgTeamFanContentAutographStatus_AutographStatus& CMsgTeamFanContentAutographStatus_TeamStatus::autographs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.TeamStatus.autographs)
  return _internal_autographs(index);
}
inline ::CMsgTeamFanContentAutographStatus_AutographStatus* CMsgTeamFanContentAutographStatus_TeamStatus::_internal_add_autographs() {
  return _impl_.autographs_.Add();
}
inline ::CMsgTeamFanContentAutographStatus_AutographStatus* CMsgTeamFanContentAutographStatus_TeamStatus::add_autographs() {
  ::CMsgTeamFanContentAutographStatus_AutographStatus* _add = _internal_add_autographs();
  // @@protoc_insertion_point(field_add:CMsgTeamFanContentAutographStatus.TeamStatus.autographs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_AutographStatus >&
CMsgTeamFanContentAutographStatus_TeamStatus::autographs() const {
  // @@protoc_insertion_point(field_list:CMsgTeamFanContentAutographStatus.TeamStatus.autographs)
  return _impl_.autographs_;
}

// optional uint32 workshop_account_id = 4;
inline bool CMsgTeamFanContentAutographStatus_TeamStatus::_internal_has_workshop_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTeamFanContentAutographStatus_TeamStatus::has_workshop_account_id() const {
  return _internal_has_workshop_account_id();
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::clear_workshop_account_id() {
  _impl_.workshop_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgTeamFanContentAutographStatus_TeamStatus::_internal_workshop_account_id() const {
  return _impl_.workshop_account_id_;
}
inline uint32_t CMsgTeamFanContentAutographStatus_TeamStatus::workshop_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.TeamStatus.workshop_account_id)
  return _internal_workshop_account_id();
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::_internal_set_workshop_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.workshop_account_id_ = value;
}
inline void CMsgTeamFanContentAutographStatus_TeamStatus::set_workshop_account_id(uint32_t value) {
  _internal_set_workshop_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanContentAutographStatus.TeamStatus.workshop_account_id)
}

// -------------------------------------------------------------------

// CMsgTeamFanContentAutographStatus

// repeated .CMsgTeamFanContentAutographStatus.TeamStatus team_autographs = 1;
inline int CMsgTeamFanContentAutographStatus::_internal_team_autographs_size() const {
  return _impl_.team_autographs_.size();
}
inline int CMsgTeamFanContentAutographStatus::team_autographs_size() const {
  return _internal_team_autographs_size();
}
inline void CMsgTeamFanContentAutographStatus::clear_team_autographs() {
  _impl_.team_autographs_.Clear();
}
inline ::CMsgTeamFanContentAutographStatus_TeamStatus* CMsgTeamFanContentAutographStatus::mutable_team_autographs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTeamFanContentAutographStatus.team_autographs)
  return _impl_.team_autographs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_TeamStatus >*
CMsgTeamFanContentAutographStatus::mutable_team_autographs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTeamFanContentAutographStatus.team_autographs)
  return &_impl_.team_autographs_;
}
inline const ::CMsgTeamFanContentAutographStatus_TeamStatus& CMsgTeamFanContentAutographStatus::_internal_team_autographs(int index) const {
  return _impl_.team_autographs_.Get(index);
}
inline const ::CMsgTeamFanContentAutographStatus_TeamStatus& CMsgTeamFanContentAutographStatus::team_autographs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanContentAutographStatus.team_autographs)
  return _internal_team_autographs(index);
}
inline ::CMsgTeamFanContentAutographStatus_TeamStatus* CMsgTeamFanContentAutographStatus::_internal_add_team_autographs() {
  return _impl_.team_autographs_.Add();
}
inline ::CMsgTeamFanContentAutographStatus_TeamStatus* CMsgTeamFanContentAutographStatus::add_team_autographs() {
  ::CMsgTeamFanContentAutographStatus_TeamStatus* _add = _internal_add_team_autographs();
  // @@protoc_insertion_point(field_add:CMsgTeamFanContentAutographStatus.team_autographs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTeamFanContentAutographStatus_TeamStatus >&
CMsgTeamFanContentAutographStatus::team_autographs() const {
  // @@protoc_insertion_point(field_list:CMsgTeamFanContentAutographStatus.team_autographs)
  return _impl_.team_autographs_;
}

// -------------------------------------------------------------------

// CMsgDPCEvent_PhaseInfo

// optional .CMsgDPCEvent.ELeagueEventPhase phase = 1 [default = PHASE_INVALID];
inline bool CMsgDPCEvent_PhaseInfo::_internal_has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDPCEvent_PhaseInfo::has_phase() const {
  return _internal_has_phase();
}
inline void CMsgDPCEvent_PhaseInfo::clear_phase() {
  _impl_.phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDPCEvent_ELeagueEventPhase CMsgDPCEvent_PhaseInfo::_internal_phase() const {
  return static_cast< ::CMsgDPCEvent_ELeagueEventPhase >(_impl_.phase_);
}
inline ::CMsgDPCEvent_ELeagueEventPhase CMsgDPCEvent_PhaseInfo::phase() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.PhaseInfo.phase)
  return _internal_phase();
}
inline void CMsgDPCEvent_PhaseInfo::_internal_set_phase(::CMsgDPCEvent_ELeagueEventPhase value) {
  assert(::CMsgDPCEvent_ELeagueEventPhase_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.phase_ = value;
}
inline void CMsgDPCEvent_PhaseInfo::set_phase(::CMsgDPCEvent_ELeagueEventPhase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.PhaseInfo.phase)
}

// optional uint32 node_group_id = 2;
inline bool CMsgDPCEvent_PhaseInfo::_internal_has_node_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDPCEvent_PhaseInfo::has_node_group_id() const {
  return _internal_has_node_group_id();
}
inline void CMsgDPCEvent_PhaseInfo::clear_node_group_id() {
  _impl_.node_group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDPCEvent_PhaseInfo::_internal_node_group_id() const {
  return _impl_.node_group_id_;
}
inline uint32_t CMsgDPCEvent_PhaseInfo::node_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.PhaseInfo.node_group_id)
  return _internal_node_group_id();
}
inline void CMsgDPCEvent_PhaseInfo::_internal_set_node_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.node_group_id_ = value;
}
inline void CMsgDPCEvent_PhaseInfo::set_node_group_id(uint32_t value) {
  _internal_set_node_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.PhaseInfo.node_group_id)
}

// -------------------------------------------------------------------

// CMsgDPCEvent_League

// optional .ELeagueRegion region = 1 [default = LEAGUE_REGION_UNSET];
inline bool CMsgDPCEvent_League::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDPCEvent_League::has_region() const {
  return _internal_has_region();
}
inline void CMsgDPCEvent_League::clear_region() {
  _impl_.region_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::ELeagueRegion CMsgDPCEvent_League::_internal_region() const {
  return static_cast< ::ELeagueRegion >(_impl_.region_);
}
inline ::ELeagueRegion CMsgDPCEvent_League::region() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.League.region)
  return _internal_region();
}
inline void CMsgDPCEvent_League::_internal_set_region(::ELeagueRegion value) {
  assert(::ELeagueRegion_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.region_ = value;
}
inline void CMsgDPCEvent_League::set_region(::ELeagueRegion value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.League.region)
}

// optional .ELeagueDivision division = 2 [default = LEAGUE_DIVISION_UNSET];
inline bool CMsgDPCEvent_League::_internal_has_division() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDPCEvent_League::has_division() const {
  return _internal_has_division();
}
inline void CMsgDPCEvent_League::clear_division() {
  _impl_.division_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ELeagueDivision CMsgDPCEvent_League::_internal_division() const {
  return static_cast< ::ELeagueDivision >(_impl_.division_);
}
inline ::ELeagueDivision CMsgDPCEvent_League::division() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.League.division)
  return _internal_division();
}
inline void CMsgDPCEvent_League::_internal_set_division(::ELeagueDivision value) {
  assert(::ELeagueDivision_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.division_ = value;
}
inline void CMsgDPCEvent_League::set_division(::ELeagueDivision value) {
  _internal_set_division(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.League.division)
}

// optional uint32 league_id = 3;
inline bool CMsgDPCEvent_League::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDPCEvent_League::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDPCEvent_League::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDPCEvent_League::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDPCEvent_League::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.League.league_id)
  return _internal_league_id();
}
inline void CMsgDPCEvent_League::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.league_id_ = value;
}
inline void CMsgDPCEvent_League::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.League.league_id)
}

// repeated .CMsgDPCEvent.PhaseInfo phases = 4;
inline int CMsgDPCEvent_League::_internal_phases_size() const {
  return _impl_.phases_.size();
}
inline int CMsgDPCEvent_League::phases_size() const {
  return _internal_phases_size();
}
inline void CMsgDPCEvent_League::clear_phases() {
  _impl_.phases_.Clear();
}
inline ::CMsgDPCEvent_PhaseInfo* CMsgDPCEvent_League::mutable_phases(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDPCEvent.League.phases)
  return _impl_.phases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_PhaseInfo >*
CMsgDPCEvent_League::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDPCEvent.League.phases)
  return &_impl_.phases_;
}
inline const ::CMsgDPCEvent_PhaseInfo& CMsgDPCEvent_League::_internal_phases(int index) const {
  return _impl_.phases_.Get(index);
}
inline const ::CMsgDPCEvent_PhaseInfo& CMsgDPCEvent_League::phases(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.League.phases)
  return _internal_phases(index);
}
inline ::CMsgDPCEvent_PhaseInfo* CMsgDPCEvent_League::_internal_add_phases() {
  return _impl_.phases_.Add();
}
inline ::CMsgDPCEvent_PhaseInfo* CMsgDPCEvent_League::add_phases() {
  ::CMsgDPCEvent_PhaseInfo* _add = _internal_add_phases();
  // @@protoc_insertion_point(field_add:CMsgDPCEvent.League.phases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_PhaseInfo >&
CMsgDPCEvent_League::phases() const {
  // @@protoc_insertion_point(field_list:CMsgDPCEvent.League.phases)
  return _impl_.phases_;
}

// -------------------------------------------------------------------

// CMsgDPCEvent

// optional .CMsgDPCEvent.ELeagueEvent event = 1 [default = EVENT_INVALID];
inline bool CMsgDPCEvent::_internal_has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_event() const {
  return _internal_has_event();
}
inline void CMsgDPCEvent::clear_event() {
  _impl_.event_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgDPCEvent_ELeagueEvent CMsgDPCEvent::_internal_event() const {
  return static_cast< ::CMsgDPCEvent_ELeagueEvent >(_impl_.event_);
}
inline ::CMsgDPCEvent_ELeagueEvent CMsgDPCEvent::event() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.event)
  return _internal_event();
}
inline void CMsgDPCEvent::_internal_set_event(::CMsgDPCEvent_ELeagueEvent value) {
  assert(::CMsgDPCEvent_ELeagueEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_ = value;
}
inline void CMsgDPCEvent::set_event(::CMsgDPCEvent_ELeagueEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.event)
}

// optional .CMsgDPCEvent.ELeagueEventType event_type = 2 [default = UNKNOWN];
inline bool CMsgDPCEvent::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_event_type() const {
  return _internal_has_event_type();
}
inline void CMsgDPCEvent::clear_event_type() {
  _impl_.event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgDPCEvent_ELeagueEventType CMsgDPCEvent::_internal_event_type() const {
  return static_cast< ::CMsgDPCEvent_ELeagueEventType >(_impl_.event_type_);
}
inline ::CMsgDPCEvent_ELeagueEventType CMsgDPCEvent::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.event_type)
  return _internal_event_type();
}
inline void CMsgDPCEvent::_internal_set_event_type(::CMsgDPCEvent_ELeagueEventType value) {
  assert(::CMsgDPCEvent_ELeagueEventType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.event_type_ = value;
}
inline void CMsgDPCEvent::set_event_type(::CMsgDPCEvent_ELeagueEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.event_type)
}

// repeated .CMsgDPCEvent.League leagues = 3;
inline int CMsgDPCEvent::_internal_leagues_size() const {
  return _impl_.leagues_.size();
}
inline int CMsgDPCEvent::leagues_size() const {
  return _internal_leagues_size();
}
inline void CMsgDPCEvent::clear_leagues() {
  _impl_.leagues_.Clear();
}
inline ::CMsgDPCEvent_League* CMsgDPCEvent::mutable_leagues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDPCEvent.leagues)
  return _impl_.leagues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_League >*
CMsgDPCEvent::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDPCEvent.leagues)
  return &_impl_.leagues_;
}
inline const ::CMsgDPCEvent_League& CMsgDPCEvent::_internal_leagues(int index) const {
  return _impl_.leagues_.Get(index);
}
inline const ::CMsgDPCEvent_League& CMsgDPCEvent::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.leagues)
  return _internal_leagues(index);
}
inline ::CMsgDPCEvent_League* CMsgDPCEvent::_internal_add_leagues() {
  return _impl_.leagues_.Add();
}
inline ::CMsgDPCEvent_League* CMsgDPCEvent::add_leagues() {
  ::CMsgDPCEvent_League* _add = _internal_add_leagues();
  // @@protoc_insertion_point(field_add:CMsgDPCEvent.leagues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent_League >&
CMsgDPCEvent::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgDPCEvent.leagues)
  return _impl_.leagues_;
}

// optional uint32 registration_period = 4;
inline bool CMsgDPCEvent::_internal_has_registration_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_registration_period() const {
  return _internal_has_registration_period();
}
inline void CMsgDPCEvent::clear_registration_period() {
  _impl_.registration_period_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDPCEvent::_internal_registration_period() const {
  return _impl_.registration_period_;
}
inline uint32_t CMsgDPCEvent::registration_period() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.registration_period)
  return _internal_registration_period();
}
inline void CMsgDPCEvent::_internal_set_registration_period(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.registration_period_ = value;
}
inline void CMsgDPCEvent::set_registration_period(uint32_t value) {
  _internal_set_registration_period(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.registration_period)
}

// optional bool is_event_upcoming = 5;
inline bool CMsgDPCEvent::_internal_has_is_event_upcoming() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_is_event_upcoming() const {
  return _internal_has_is_event_upcoming();
}
inline void CMsgDPCEvent::clear_is_event_upcoming() {
  _impl_.is_event_upcoming_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgDPCEvent::_internal_is_event_upcoming() const {
  return _impl_.is_event_upcoming_;
}
inline bool CMsgDPCEvent::is_event_upcoming() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.is_event_upcoming)
  return _internal_is_event_upcoming();
}
inline void CMsgDPCEvent::_internal_set_is_event_upcoming(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_event_upcoming_ = value;
}
inline void CMsgDPCEvent::set_is_event_upcoming(bool value) {
  _internal_set_is_event_upcoming(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.is_event_upcoming)
}

// optional bool is_event_completed = 6;
inline bool CMsgDPCEvent::_internal_has_is_event_completed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_is_event_completed() const {
  return _internal_has_is_event_completed();
}
inline void CMsgDPCEvent::clear_is_event_completed() {
  _impl_.is_event_completed_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgDPCEvent::_internal_is_event_completed() const {
  return _impl_.is_event_completed_;
}
inline bool CMsgDPCEvent::is_event_completed() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.is_event_completed)
  return _internal_is_event_completed();
}
inline void CMsgDPCEvent::_internal_set_is_event_completed(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_event_completed_ = value;
}
inline void CMsgDPCEvent::set_is_event_completed(bool value) {
  _internal_set_is_event_completed(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.is_event_completed)
}

// optional string event_name = 7;
inline bool CMsgDPCEvent::_internal_has_event_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_event_name() const {
  return _internal_has_event_name();
}
inline void CMsgDPCEvent::clear_event_name() {
  _impl_.event_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDPCEvent::event_name() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDPCEvent::set_event_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.event_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.event_name)
}
inline std::string* CMsgDPCEvent::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:CMsgDPCEvent.event_name)
  return _s;
}
inline const std::string& CMsgDPCEvent::_internal_event_name() const {
  return _impl_.event_name_.Get();
}
inline void CMsgDPCEvent::_internal_set_event_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDPCEvent::_internal_mutable_event_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.event_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDPCEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:CMsgDPCEvent.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.event_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_name_.IsDefault()) {
    _impl_.event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDPCEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.event_name_.SetAllocated(event_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_name_.IsDefault()) {
    _impl_.event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDPCEvent.event_name)
}

// optional uint32 multicast_league_id = 8;
inline bool CMsgDPCEvent::_internal_has_multicast_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_multicast_league_id() const {
  return _internal_has_multicast_league_id();
}
inline void CMsgDPCEvent::clear_multicast_league_id() {
  _impl_.multicast_league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDPCEvent::_internal_multicast_league_id() const {
  return _impl_.multicast_league_id_;
}
inline uint32_t CMsgDPCEvent::multicast_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.multicast_league_id)
  return _internal_multicast_league_id();
}
inline void CMsgDPCEvent::_internal_set_multicast_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.multicast_league_id_ = value;
}
inline void CMsgDPCEvent::set_multicast_league_id(uint32_t value) {
  _internal_set_multicast_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.multicast_league_id)
}

// repeated uint32 multicast_streams = 9;
inline int CMsgDPCEvent::_internal_multicast_streams_size() const {
  return _impl_.multicast_streams_.size();
}
inline int CMsgDPCEvent::multicast_streams_size() const {
  return _internal_multicast_streams_size();
}
inline void CMsgDPCEvent::clear_multicast_streams() {
  _impl_.multicast_streams_.Clear();
}
inline uint32_t CMsgDPCEvent::_internal_multicast_streams(int index) const {
  return _impl_.multicast_streams_.Get(index);
}
inline uint32_t CMsgDPCEvent::multicast_streams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.multicast_streams)
  return _internal_multicast_streams(index);
}
inline void CMsgDPCEvent::set_multicast_streams(int index, uint32_t value) {
  _impl_.multicast_streams_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.multicast_streams)
}
inline void CMsgDPCEvent::_internal_add_multicast_streams(uint32_t value) {
  _impl_.multicast_streams_.Add(value);
}
inline void CMsgDPCEvent::add_multicast_streams(uint32_t value) {
  _internal_add_multicast_streams(value);
  // @@protoc_insertion_point(field_add:CMsgDPCEvent.multicast_streams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDPCEvent::_internal_multicast_streams() const {
  return _impl_.multicast_streams_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDPCEvent::multicast_streams() const {
  // @@protoc_insertion_point(field_list:CMsgDPCEvent.multicast_streams)
  return _internal_multicast_streams();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDPCEvent::_internal_mutable_multicast_streams() {
  return &_impl_.multicast_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDPCEvent::mutable_multicast_streams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDPCEvent.multicast_streams)
  return _internal_mutable_multicast_streams();
}

// optional .CMsgDPCEvent.ETour tour = 10 [default = TOUR_NONE];
inline bool CMsgDPCEvent::_internal_has_tour() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_tour() const {
  return _internal_has_tour();
}
inline void CMsgDPCEvent::clear_tour() {
  _impl_.tour_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::CMsgDPCEvent_ETour CMsgDPCEvent::_internal_tour() const {
  return static_cast< ::CMsgDPCEvent_ETour >(_impl_.tour_);
}
inline ::CMsgDPCEvent_ETour CMsgDPCEvent::tour() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.tour)
  return _internal_tour();
}
inline void CMsgDPCEvent::_internal_set_tour(::CMsgDPCEvent_ETour value) {
  assert(::CMsgDPCEvent_ETour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.tour_ = value;
}
inline void CMsgDPCEvent::set_tour(::CMsgDPCEvent_ETour value) {
  _internal_set_tour(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.tour)
}

// optional uint32 timestamp_drop_lock = 12;
inline bool CMsgDPCEvent::_internal_has_timestamp_drop_lock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_timestamp_drop_lock() const {
  return _internal_has_timestamp_drop_lock();
}
inline void CMsgDPCEvent::clear_timestamp_drop_lock() {
  _impl_.timestamp_drop_lock_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDPCEvent::_internal_timestamp_drop_lock() const {
  return _impl_.timestamp_drop_lock_;
}
inline uint32_t CMsgDPCEvent::timestamp_drop_lock() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.timestamp_drop_lock)
  return _internal_timestamp_drop_lock();
}
inline void CMsgDPCEvent::_internal_set_timestamp_drop_lock(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.timestamp_drop_lock_ = value;
}
inline void CMsgDPCEvent::set_timestamp_drop_lock(uint32_t value) {
  _internal_set_timestamp_drop_lock(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.timestamp_drop_lock)
}

// optional uint32 timestamp_add_lock = 13;
inline bool CMsgDPCEvent::_internal_has_timestamp_add_lock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_timestamp_add_lock() const {
  return _internal_has_timestamp_add_lock();
}
inline void CMsgDPCEvent::clear_timestamp_add_lock() {
  _impl_.timestamp_add_lock_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDPCEvent::_internal_timestamp_add_lock() const {
  return _impl_.timestamp_add_lock_;
}
inline uint32_t CMsgDPCEvent::timestamp_add_lock() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.timestamp_add_lock)
  return _internal_timestamp_add_lock();
}
inline void CMsgDPCEvent::_internal_set_timestamp_add_lock(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.timestamp_add_lock_ = value;
}
inline void CMsgDPCEvent::set_timestamp_add_lock(uint32_t value) {
  _internal_set_timestamp_add_lock(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.timestamp_add_lock)
}

// optional uint32 timestamp_content_deadline = 14;
inline bool CMsgDPCEvent::_internal_has_timestamp_content_deadline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_timestamp_content_deadline() const {
  return _internal_has_timestamp_content_deadline();
}
inline void CMsgDPCEvent::clear_timestamp_content_deadline() {
  _impl_.timestamp_content_deadline_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDPCEvent::_internal_timestamp_content_deadline() const {
  return _impl_.timestamp_content_deadline_;
}
inline uint32_t CMsgDPCEvent::timestamp_content_deadline() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.timestamp_content_deadline)
  return _internal_timestamp_content_deadline();
}
inline void CMsgDPCEvent::_internal_set_timestamp_content_deadline(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.timestamp_content_deadline_ = value;
}
inline void CMsgDPCEvent::set_timestamp_content_deadline(uint32_t value) {
  _internal_set_timestamp_content_deadline(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.timestamp_content_deadline)
}

// optional bool is_fantasy_enabled = 15;
inline bool CMsgDPCEvent::_internal_has_is_fantasy_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDPCEvent::has_is_fantasy_enabled() const {
  return _internal_has_is_fantasy_enabled();
}
inline void CMsgDPCEvent::clear_is_fantasy_enabled() {
  _impl_.is_fantasy_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDPCEvent::_internal_is_fantasy_enabled() const {
  return _impl_.is_fantasy_enabled_;
}
inline bool CMsgDPCEvent::is_fantasy_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgDPCEvent.is_fantasy_enabled)
  return _internal_is_fantasy_enabled();
}
inline void CMsgDPCEvent::_internal_set_is_fantasy_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_fantasy_enabled_ = value;
}
inline void CMsgDPCEvent::set_is_fantasy_enabled(bool value) {
  _internal_set_is_fantasy_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgDPCEvent.is_fantasy_enabled)
}

// -------------------------------------------------------------------

// CMsgDPCEventList

// repeated .CMsgDPCEvent events = 1;
inline int CMsgDPCEventList::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int CMsgDPCEventList::events_size() const {
  return _internal_events_size();
}
inline void CMsgDPCEventList::clear_events() {
  _impl_.events_.Clear();
}
inline ::CMsgDPCEvent* CMsgDPCEventList::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDPCEventList.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent >*
CMsgDPCEventList::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDPCEventList.events)
  return &_impl_.events_;
}
inline const ::CMsgDPCEvent& CMsgDPCEventList::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::CMsgDPCEvent& CMsgDPCEventList::events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDPCEventList.events)
  return _internal_events(index);
}
inline ::CMsgDPCEvent* CMsgDPCEventList::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::CMsgDPCEvent* CMsgDPCEventList::add_events() {
  ::CMsgDPCEvent* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:CMsgDPCEventList.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPCEvent >&
CMsgDPCEventList::events() const {
  // @@protoc_insertion_point(field_list:CMsgDPCEventList.events)
  return _impl_.events_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardLineup_CardBonus

// optional uint32 bonus_stat = 1;
inline bool CMsgDOTAFantasyCardLineup_CardBonus::_internal_has_bonus_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_CardBonus::has_bonus_stat() const {
  return _internal_has_bonus_stat();
}
inline void CMsgDOTAFantasyCardLineup_CardBonus::clear_bonus_stat() {
  _impl_.bonus_stat_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_CardBonus::_internal_bonus_stat() const {
  return _impl_.bonus_stat_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_CardBonus::bonus_stat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.CardBonus.bonus_stat)
  return _internal_bonus_stat();
}
inline void CMsgDOTAFantasyCardLineup_CardBonus::_internal_set_bonus_stat(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bonus_stat_ = value;
}
inline void CMsgDOTAFantasyCardLineup_CardBonus::set_bonus_stat(uint32_t value) {
  _internal_set_bonus_stat(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.CardBonus.bonus_stat)
}

// optional uint32 bonus_value = 2;
inline bool CMsgDOTAFantasyCardLineup_CardBonus::_internal_has_bonus_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_CardBonus::has_bonus_value() const {
  return _internal_has_bonus_value();
}
inline void CMsgDOTAFantasyCardLineup_CardBonus::clear_bonus_value() {
  _impl_.bonus_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_CardBonus::_internal_bonus_value() const {
  return _impl_.bonus_value_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_CardBonus::bonus_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.CardBonus.bonus_value)
  return _internal_bonus_value();
}
inline void CMsgDOTAFantasyCardLineup_CardBonus::_internal_set_bonus_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bonus_value_ = value;
}
inline void CMsgDOTAFantasyCardLineup_CardBonus::set_bonus_value(uint32_t value) {
  _internal_set_bonus_value(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.CardBonus.bonus_value)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardLineup_Card

// optional uint32 player_account_id = 1;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_player_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_player_account_id() {
  _impl_.player_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Card::_internal_player_account_id() const {
  return _impl_.player_account_id_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Card::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_player_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_account_id_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_player_account_id(uint32_t value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.player_account_id)
}

// optional string player_name = 2;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_player_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyCardLineup_Card::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAFantasyCardLineup_Card::set_player_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.player_name)
}
inline std::string* CMsgDOTAFantasyCardLineup_Card::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardLineup.Card.player_name)
  return _s;
}
inline const std::string& CMsgDOTAFantasyCardLineup_Card::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_player_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardLineup_Card::_internal_mutable_player_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardLineup_Card::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyCardLineup.Card.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.player_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyCardLineup.Card.player_name)
}

// optional uint32 team_id = 3;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Card::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Card::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.team_id)
}

// optional string team_name = 4;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAFantasyCardLineup_Card::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAFantasyCardLineup_Card::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.team_name)
}
inline std::string* CMsgDOTAFantasyCardLineup_Card::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardLineup.Card.team_name)
  return _s;
}
inline const std::string& CMsgDOTAFantasyCardLineup_Card::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardLineup_Card::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardLineup_Card::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyCardLineup.Card.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyCardLineup.Card.team_name)
}

// optional uint32 role = 5;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_role() const {
  return _internal_has_role();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_role() {
  _impl_.role_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Card::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Card::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.role)
  return _internal_role();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_role(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.role_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.role)
}

// repeated .CMsgDOTAFantasyCardLineup.CardBonus bonuses = 6;
inline int CMsgDOTAFantasyCardLineup_Card::_internal_bonuses_size() const {
  return _impl_.bonuses_.size();
}
inline int CMsgDOTAFantasyCardLineup_Card::bonuses_size() const {
  return _internal_bonuses_size();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_bonuses() {
  _impl_.bonuses_.Clear();
}
inline ::CMsgDOTAFantasyCardLineup_CardBonus* CMsgDOTAFantasyCardLineup_Card::mutable_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardLineup.Card.bonuses)
  return _impl_.bonuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_CardBonus >*
CMsgDOTAFantasyCardLineup_Card::mutable_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyCardLineup.Card.bonuses)
  return &_impl_.bonuses_;
}
inline const ::CMsgDOTAFantasyCardLineup_CardBonus& CMsgDOTAFantasyCardLineup_Card::_internal_bonuses(int index) const {
  return _impl_.bonuses_.Get(index);
}
inline const ::CMsgDOTAFantasyCardLineup_CardBonus& CMsgDOTAFantasyCardLineup_Card::bonuses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.bonuses)
  return _internal_bonuses(index);
}
inline ::CMsgDOTAFantasyCardLineup_CardBonus* CMsgDOTAFantasyCardLineup_Card::_internal_add_bonuses() {
  return _impl_.bonuses_.Add();
}
inline ::CMsgDOTAFantasyCardLineup_CardBonus* CMsgDOTAFantasyCardLineup_Card::add_bonuses() {
  ::CMsgDOTAFantasyCardLineup_CardBonus* _add = _internal_add_bonuses();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyCardLineup.Card.bonuses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_CardBonus >&
CMsgDOTAFantasyCardLineup_Card::bonuses() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyCardLineup.Card.bonuses)
  return _impl_.bonuses_;
}

// optional float score = 7;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTAFantasyCardLineup_Card::_internal_score() const {
  return _impl_.score_;
}
inline float CMsgDOTAFantasyCardLineup_Card::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.score)
  return _internal_score();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.score_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.score)
}

// optional bool finalized = 8;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_finalized() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_finalized() const {
  return _internal_has_finalized();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_finalized() {
  _impl_.finalized_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_finalized() const {
  return _impl_.finalized_;
}
inline bool CMsgDOTAFantasyCardLineup_Card::finalized() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.finalized)
  return _internal_finalized();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_finalized(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.finalized_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_finalized(bool value) {
  _internal_set_finalized(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.finalized)
}

// optional uint64 item_id = 9;
inline bool CMsgDOTAFantasyCardLineup_Card::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Card::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgDOTAFantasyCardLineup_Card::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgDOTAFantasyCardLineup_Card::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CMsgDOTAFantasyCardLineup_Card::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Card.item_id)
  return _internal_item_id();
}
inline void CMsgDOTAFantasyCardLineup_Card::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.item_id_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Card::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Card.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardLineup_League

// optional uint32 league_id = 1;
inline bool CMsgDOTAFantasyCardLineup_League::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_League::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAFantasyCardLineup_League::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_League::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_League::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.League.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAFantasyCardLineup_League::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTAFantasyCardLineup_League::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.League.league_id)
}

// repeated .CMsgDOTAFantasyCardLineup.Card cards = 2;
inline int CMsgDOTAFantasyCardLineup_League::_internal_cards_size() const {
  return _impl_.cards_.size();
}
inline int CMsgDOTAFantasyCardLineup_League::cards_size() const {
  return _internal_cards_size();
}
inline void CMsgDOTAFantasyCardLineup_League::clear_cards() {
  _impl_.cards_.Clear();
}
inline ::CMsgDOTAFantasyCardLineup_Card* CMsgDOTAFantasyCardLineup_League::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardLineup.League.cards)
  return _impl_.cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Card >*
CMsgDOTAFantasyCardLineup_League::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyCardLineup.League.cards)
  return &_impl_.cards_;
}
inline const ::CMsgDOTAFantasyCardLineup_Card& CMsgDOTAFantasyCardLineup_League::_internal_cards(int index) const {
  return _impl_.cards_.Get(index);
}
inline const ::CMsgDOTAFantasyCardLineup_Card& CMsgDOTAFantasyCardLineup_League::cards(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.League.cards)
  return _internal_cards(index);
}
inline ::CMsgDOTAFantasyCardLineup_Card* CMsgDOTAFantasyCardLineup_League::_internal_add_cards() {
  return _impl_.cards_.Add();
}
inline ::CMsgDOTAFantasyCardLineup_Card* CMsgDOTAFantasyCardLineup_League::add_cards() {
  ::CMsgDOTAFantasyCardLineup_Card* _add = _internal_add_cards();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyCardLineup.League.cards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Card >&
CMsgDOTAFantasyCardLineup_League::cards() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyCardLineup.League.cards)
  return _impl_.cards_;
}

// optional float score = 3;
inline bool CMsgDOTAFantasyCardLineup_League::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_League::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAFantasyCardLineup_League::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTAFantasyCardLineup_League::_internal_score() const {
  return _impl_.score_;
}
inline float CMsgDOTAFantasyCardLineup_League::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.League.score)
  return _internal_score();
}
inline void CMsgDOTAFantasyCardLineup_League::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}
inline void CMsgDOTAFantasyCardLineup_League::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.League.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardLineup_Period

// optional uint32 fantasy_period = 1 [default = 4294967295];
inline bool CMsgDOTAFantasyCardLineup_Period::_internal_has_fantasy_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Period::has_fantasy_period() const {
  return _internal_has_fantasy_period();
}
inline void CMsgDOTAFantasyCardLineup_Period::clear_fantasy_period() {
  _impl_.fantasy_period_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Period::_internal_fantasy_period() const {
  return _impl_.fantasy_period_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Period::fantasy_period() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Period.fantasy_period)
  return _internal_fantasy_period();
}
inline void CMsgDOTAFantasyCardLineup_Period::_internal_set_fantasy_period(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fantasy_period_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Period::set_fantasy_period(uint32_t value) {
  _internal_set_fantasy_period(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Period.fantasy_period)
}

// optional uint32 timestamp_start = 2;
inline bool CMsgDOTAFantasyCardLineup_Period::_internal_has_timestamp_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Period::has_timestamp_start() const {
  return _internal_has_timestamp_start();
}
inline void CMsgDOTAFantasyCardLineup_Period::clear_timestamp_start() {
  _impl_.timestamp_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Period::_internal_timestamp_start() const {
  return _impl_.timestamp_start_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Period::timestamp_start() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Period.timestamp_start)
  return _internal_timestamp_start();
}
inline void CMsgDOTAFantasyCardLineup_Period::_internal_set_timestamp_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_start_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Period::set_timestamp_start(uint32_t value) {
  _internal_set_timestamp_start(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Period.timestamp_start)
}

// optional uint32 timestamp_end = 3;
inline bool CMsgDOTAFantasyCardLineup_Period::_internal_has_timestamp_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardLineup_Period::has_timestamp_end() const {
  return _internal_has_timestamp_end();
}
inline void CMsgDOTAFantasyCardLineup_Period::clear_timestamp_end() {
  _impl_.timestamp_end_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Period::_internal_timestamp_end() const {
  return _impl_.timestamp_end_;
}
inline uint32_t CMsgDOTAFantasyCardLineup_Period::timestamp_end() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Period.timestamp_end)
  return _internal_timestamp_end();
}
inline void CMsgDOTAFantasyCardLineup_Period::_internal_set_timestamp_end(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_end_ = value;
}
inline void CMsgDOTAFantasyCardLineup_Period::set_timestamp_end(uint32_t value) {
  _internal_set_timestamp_end(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardLineup.Period.timestamp_end)
}

// repeated .CMsgDOTAFantasyCardLineup.League leagues = 4;
inline int CMsgDOTAFantasyCardLineup_Period::_internal_leagues_size() const {
  return _impl_.leagues_.size();
}
inline int CMsgDOTAFantasyCardLineup_Period::leagues_size() const {
  return _internal_leagues_size();
}
inline void CMsgDOTAFantasyCardLineup_Period::clear_leagues() {
  _impl_.leagues_.Clear();
}
inline ::CMsgDOTAFantasyCardLineup_League* CMsgDOTAFantasyCardLineup_Period::mutable_leagues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardLineup.Period.leagues)
  return _impl_.leagues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_League >*
CMsgDOTAFantasyCardLineup_Period::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyCardLineup.Period.leagues)
  return &_impl_.leagues_;
}
inline const ::CMsgDOTAFantasyCardLineup_League& CMsgDOTAFantasyCardLineup_Period::_internal_leagues(int index) const {
  return _impl_.leagues_.Get(index);
}
inline const ::CMsgDOTAFantasyCardLineup_League& CMsgDOTAFantasyCardLineup_Period::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.Period.leagues)
  return _internal_leagues(index);
}
inline ::CMsgDOTAFantasyCardLineup_League* CMsgDOTAFantasyCardLineup_Period::_internal_add_leagues() {
  return _impl_.leagues_.Add();
}
inline ::CMsgDOTAFantasyCardLineup_League* CMsgDOTAFantasyCardLineup_Period::add_leagues() {
  ::CMsgDOTAFantasyCardLineup_League* _add = _internal_add_leagues();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyCardLineup.Period.leagues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_League >&
CMsgDOTAFantasyCardLineup_Period::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyCardLineup.Period.leagues)
  return _impl_.leagues_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardLineup

// repeated .CMsgDOTAFantasyCardLineup.Period periods = 1;
inline int CMsgDOTAFantasyCardLineup::_internal_periods_size() const {
  return _impl_.periods_.size();
}
inline int CMsgDOTAFantasyCardLineup::periods_size() const {
  return _internal_periods_size();
}
inline void CMsgDOTAFantasyCardLineup::clear_periods() {
  _impl_.periods_.Clear();
}
inline ::CMsgDOTAFantasyCardLineup_Period* CMsgDOTAFantasyCardLineup::mutable_periods(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardLineup.periods)
  return _impl_.periods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Period >*
CMsgDOTAFantasyCardLineup::mutable_periods() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyCardLineup.periods)
  return &_impl_.periods_;
}
inline const ::CMsgDOTAFantasyCardLineup_Period& CMsgDOTAFantasyCardLineup::_internal_periods(int index) const {
  return _impl_.periods_.Get(index);
}
inline const ::CMsgDOTAFantasyCardLineup_Period& CMsgDOTAFantasyCardLineup::periods(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardLineup.periods)
  return _internal_periods(index);
}
inline ::CMsgDOTAFantasyCardLineup_Period* CMsgDOTAFantasyCardLineup::_internal_add_periods() {
  return _impl_.periods_.Add();
}
inline ::CMsgDOTAFantasyCardLineup_Period* CMsgDOTAFantasyCardLineup::add_periods() {
  ::CMsgDOTAFantasyCardLineup_Period* _add = _internal_add_periods();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyCardLineup.periods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardLineup_Period >&
CMsgDOTAFantasyCardLineup::periods() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyCardLineup.periods)
  return _impl_.periods_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardList_CardBonus

// optional uint32 bonus_stat = 1;
inline bool CMsgDOTAFantasyCardList_CardBonus::_internal_has_bonus_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_CardBonus::has_bonus_stat() const {
  return _internal_has_bonus_stat();
}
inline void CMsgDOTAFantasyCardList_CardBonus::clear_bonus_stat() {
  _impl_.bonus_stat_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAFantasyCardList_CardBonus::_internal_bonus_stat() const {
  return _impl_.bonus_stat_;
}
inline uint32_t CMsgDOTAFantasyCardList_CardBonus::bonus_stat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.CardBonus.bonus_stat)
  return _internal_bonus_stat();
}
inline void CMsgDOTAFantasyCardList_CardBonus::_internal_set_bonus_stat(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bonus_stat_ = value;
}
inline void CMsgDOTAFantasyCardList_CardBonus::set_bonus_stat(uint32_t value) {
  _internal_set_bonus_stat(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.CardBonus.bonus_stat)
}

// optional uint32 bonus_value = 2;
inline bool CMsgDOTAFantasyCardList_CardBonus::_internal_has_bonus_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_CardBonus::has_bonus_value() const {
  return _internal_has_bonus_value();
}
inline void CMsgDOTAFantasyCardList_CardBonus::clear_bonus_value() {
  _impl_.bonus_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAFantasyCardList_CardBonus::_internal_bonus_value() const {
  return _impl_.bonus_value_;
}
inline uint32_t CMsgDOTAFantasyCardList_CardBonus::bonus_value() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.CardBonus.bonus_value)
  return _internal_bonus_value();
}
inline void CMsgDOTAFantasyCardList_CardBonus::_internal_set_bonus_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bonus_value_ = value;
}
inline void CMsgDOTAFantasyCardList_CardBonus::set_bonus_value(uint32_t value) {
  _internal_set_bonus_value(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.CardBonus.bonus_value)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardList_Card

// optional uint32 player_account_id = 1;
inline bool CMsgDOTAFantasyCardList_Card::_internal_has_player_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_Card::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyCardList_Card::clear_player_account_id() {
  _impl_.player_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAFantasyCardList_Card::_internal_player_account_id() const {
  return _impl_.player_account_id_;
}
inline uint32_t CMsgDOTAFantasyCardList_Card::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.Card.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyCardList_Card::_internal_set_player_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_account_id_ = value;
}
inline void CMsgDOTAFantasyCardList_Card::set_player_account_id(uint32_t value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.Card.player_account_id)
}

// optional string player_name = 2;
inline bool CMsgDOTAFantasyCardList_Card::_internal_has_player_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_Card::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgDOTAFantasyCardList_Card::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyCardList_Card::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.Card.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAFantasyCardList_Card::set_player_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.Card.player_name)
}
inline std::string* CMsgDOTAFantasyCardList_Card::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardList.Card.player_name)
  return _s;
}
inline const std::string& CMsgDOTAFantasyCardList_Card::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void CMsgDOTAFantasyCardList_Card::_internal_set_player_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardList_Card::_internal_mutable_player_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardList_Card::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyCardList.Card.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.player_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAFantasyCardList_Card::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyCardList.Card.player_name)
}

// optional uint32 team_id = 3;
inline bool CMsgDOTAFantasyCardList_Card::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_Card::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAFantasyCardList_Card::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAFantasyCardList_Card::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTAFantasyCardList_Card::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.Card.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAFantasyCardList_Card::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTAFantasyCardList_Card::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.Card.team_id)
}

// optional string team_name = 4;
inline bool CMsgDOTAFantasyCardList_Card::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_Card::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAFantasyCardList_Card::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAFantasyCardList_Card::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.Card.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAFantasyCardList_Card::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.Card.team_name)
}
inline std::string* CMsgDOTAFantasyCardList_Card::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardList.Card.team_name)
  return _s;
}
inline const std::string& CMsgDOTAFantasyCardList_Card::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTAFantasyCardList_Card::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardList_Card::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyCardList_Card::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyCardList.Card.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAFantasyCardList_Card::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyCardList.Card.team_name)
}

// optional uint32 role = 5;
inline bool CMsgDOTAFantasyCardList_Card::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_Card::has_role() const {
  return _internal_has_role();
}
inline void CMsgDOTAFantasyCardList_Card::clear_role() {
  _impl_.role_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAFantasyCardList_Card::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t CMsgDOTAFantasyCardList_Card::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.Card.role)
  return _internal_role();
}
inline void CMsgDOTAFantasyCardList_Card::_internal_set_role(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.role_ = value;
}
inline void CMsgDOTAFantasyCardList_Card::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.Card.role)
}

// repeated .CMsgDOTAFantasyCardList.CardBonus bonuses = 6;
inline int CMsgDOTAFantasyCardList_Card::_internal_bonuses_size() const {
  return _impl_.bonuses_.size();
}
inline int CMsgDOTAFantasyCardList_Card::bonuses_size() const {
  return _internal_bonuses_size();
}
inline void CMsgDOTAFantasyCardList_Card::clear_bonuses() {
  _impl_.bonuses_.Clear();
}
inline ::CMsgDOTAFantasyCardList_CardBonus* CMsgDOTAFantasyCardList_Card::mutable_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardList.Card.bonuses)
  return _impl_.bonuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_CardBonus >*
CMsgDOTAFantasyCardList_Card::mutable_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyCardList.Card.bonuses)
  return &_impl_.bonuses_;
}
inline const ::CMsgDOTAFantasyCardList_CardBonus& CMsgDOTAFantasyCardList_Card::_internal_bonuses(int index) const {
  return _impl_.bonuses_.Get(index);
}
inline const ::CMsgDOTAFantasyCardList_CardBonus& CMsgDOTAFantasyCardList_Card::bonuses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.Card.bonuses)
  return _internal_bonuses(index);
}
inline ::CMsgDOTAFantasyCardList_CardBonus* CMsgDOTAFantasyCardList_Card::_internal_add_bonuses() {
  return _impl_.bonuses_.Add();
}
inline ::CMsgDOTAFantasyCardList_CardBonus* CMsgDOTAFantasyCardList_Card::add_bonuses() {
  ::CMsgDOTAFantasyCardList_CardBonus* _add = _internal_add_bonuses();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyCardList.Card.bonuses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_CardBonus >&
CMsgDOTAFantasyCardList_Card::bonuses() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyCardList.Card.bonuses)
  return _impl_.bonuses_;
}

// optional uint64 item_id = 8;
inline bool CMsgDOTAFantasyCardList_Card::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyCardList_Card::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgDOTAFantasyCardList_Card::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgDOTAFantasyCardList_Card::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CMsgDOTAFantasyCardList_Card::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.Card.item_id)
  return _internal_item_id();
}
inline void CMsgDOTAFantasyCardList_Card::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.item_id_ = value;
}
inline void CMsgDOTAFantasyCardList_Card::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyCardList.Card.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyCardList

// repeated .CMsgDOTAFantasyCardList.Card cards = 1;
inline int CMsgDOTAFantasyCardList::_internal_cards_size() const {
  return _impl_.cards_.size();
}
inline int CMsgDOTAFantasyCardList::cards_size() const {
  return _internal_cards_size();
}
inline void CMsgDOTAFantasyCardList::clear_cards() {
  _impl_.cards_.Clear();
}
inline ::CMsgDOTAFantasyCardList_Card* CMsgDOTAFantasyCardList::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyCardList.cards)
  return _impl_.cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_Card >*
CMsgDOTAFantasyCardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyCardList.cards)
  return &_impl_.cards_;
}
inline const ::CMsgDOTAFantasyCardList_Card& CMsgDOTAFantasyCardList::_internal_cards(int index) const {
  return _impl_.cards_.Get(index);
}
inline const ::CMsgDOTAFantasyCardList_Card& CMsgDOTAFantasyCardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyCardList.cards)
  return _internal_cards(index);
}
inline ::CMsgDOTAFantasyCardList_Card* CMsgDOTAFantasyCardList::_internal_add_cards() {
  return _impl_.cards_.Add();
}
inline ::CMsgDOTAFantasyCardList_Card* CMsgDOTAFantasyCardList::add_cards() {
  ::CMsgDOTAFantasyCardList_Card* _add = _internal_add_cards();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyCardList.cards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyCardList_Card >&
CMsgDOTAFantasyCardList::cards() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyCardList.cards)
  return _impl_.cards_;
}

// -------------------------------------------------------------------

// CMsgChatToxicityReport

// optional uint32 num_matches_seen = 1;
inline bool CMsgChatToxicityReport::_internal_has_num_matches_seen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgChatToxicityReport::has_num_matches_seen() const {
  return _internal_has_num_matches_seen();
}
inline void CMsgChatToxicityReport::clear_num_matches_seen() {
  _impl_.num_matches_seen_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgChatToxicityReport::_internal_num_matches_seen() const {
  return _impl_.num_matches_seen_;
}
inline uint32_t CMsgChatToxicityReport::num_matches_seen() const {
  // @@protoc_insertion_point(field_get:CMsgChatToxicityReport.num_matches_seen)
  return _internal_num_matches_seen();
}
inline void CMsgChatToxicityReport::_internal_set_num_matches_seen(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_matches_seen_ = value;
}
inline void CMsgChatToxicityReport::set_num_matches_seen(uint32_t value) {
  _internal_set_num_matches_seen(value);
  // @@protoc_insertion_point(field_set:CMsgChatToxicityReport.num_matches_seen)
}

// optional uint32 num_messages = 2;
inline bool CMsgChatToxicityReport::_internal_has_num_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgChatToxicityReport::has_num_messages() const {
  return _internal_has_num_messages();
}
inline void CMsgChatToxicityReport::clear_num_messages() {
  _impl_.num_messages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgChatToxicityReport::_internal_num_messages() const {
  return _impl_.num_messages_;
}
inline uint32_t CMsgChatToxicityReport::num_messages() const {
  // @@protoc_insertion_point(field_get:CMsgChatToxicityReport.num_messages)
  return _internal_num_messages();
}
inline void CMsgChatToxicityReport::_internal_set_num_messages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_messages_ = value;
}
inline void CMsgChatToxicityReport::set_num_messages(uint32_t value) {
  _internal_set_num_messages(value);
  // @@protoc_insertion_point(field_set:CMsgChatToxicityReport.num_messages)
}

// optional uint32 num_messages_human_thinks_toxic = 3;
inline bool CMsgChatToxicityReport::_internal_has_num_messages_human_thinks_toxic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgChatToxicityReport::has_num_messages_human_thinks_toxic() const {
  return _internal_has_num_messages_human_thinks_toxic();
}
inline void CMsgChatToxicityReport::clear_num_messages_human_thinks_toxic() {
  _impl_.num_messages_human_thinks_toxic_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgChatToxicityReport::_internal_num_messages_human_thinks_toxic() const {
  return _impl_.num_messages_human_thinks_toxic_;
}
inline uint32_t CMsgChatToxicityReport::num_messages_human_thinks_toxic() const {
  // @@protoc_insertion_point(field_get:CMsgChatToxicityReport.num_messages_human_thinks_toxic)
  return _internal_num_messages_human_thinks_toxic();
}
inline void CMsgChatToxicityReport::_internal_set_num_messages_human_thinks_toxic(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.num_messages_human_thinks_toxic_ = value;
}
inline void CMsgChatToxicityReport::set_num_messages_human_thinks_toxic(uint32_t value) {
  _internal_set_num_messages_human_thinks_toxic(value);
  // @@protoc_insertion_point(field_set:CMsgChatToxicityReport.num_messages_human_thinks_toxic)
}

// optional uint32 num_messages_ml_thinks_toxic = 4;
inline bool CMsgChatToxicityReport::_internal_has_num_messages_ml_thinks_toxic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgChatToxicityReport::has_num_messages_ml_thinks_toxic() const {
  return _internal_has_num_messages_ml_thinks_toxic();
}
inline void CMsgChatToxicityReport::clear_num_messages_ml_thinks_toxic() {
  _impl_.num_messages_ml_thinks_toxic_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgChatToxicityReport::_internal_num_messages_ml_thinks_toxic() const {
  return _impl_.num_messages_ml_thinks_toxic_;
}
inline uint32_t CMsgChatToxicityReport::num_messages_ml_thinks_toxic() const {
  // @@protoc_insertion_point(field_get:CMsgChatToxicityReport.num_messages_ml_thinks_toxic)
  return _internal_num_messages_ml_thinks_toxic();
}
inline void CMsgChatToxicityReport::_internal_set_num_messages_ml_thinks_toxic(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_messages_ml_thinks_toxic_ = value;
}
inline void CMsgChatToxicityReport::set_num_messages_ml_thinks_toxic(uint32_t value) {
  _internal_set_num_messages_ml_thinks_toxic(value);
  // @@protoc_insertion_point(field_set:CMsgChatToxicityReport.num_messages_ml_thinks_toxic)
}

// optional string status = 5;
inline bool CMsgChatToxicityReport::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgChatToxicityReport::has_status() const {
  return _internal_has_status();
}
inline void CMsgChatToxicityReport::clear_status() {
  _impl_.status_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgChatToxicityReport::status() const {
  // @@protoc_insertion_point(field_get:CMsgChatToxicityReport.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgChatToxicityReport::set_status(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgChatToxicityReport.status)
}
inline std::string* CMsgChatToxicityReport::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:CMsgChatToxicityReport.status)
  return _s;
}
inline const std::string& CMsgChatToxicityReport::_internal_status() const {
  return _impl_.status_.Get();
}
inline void CMsgChatToxicityReport::_internal_set_status(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgChatToxicityReport::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgChatToxicityReport::release_status() {
  // @@protoc_insertion_point(field_release:CMsgChatToxicityReport.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.status_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgChatToxicityReport::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgChatToxicityReport.status)
}

// optional uint32 result = 6;
inline bool CMsgChatToxicityReport::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgChatToxicityReport::has_result() const {
  return _internal_has_result();
}
inline void CMsgChatToxicityReport::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgChatToxicityReport::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t CMsgChatToxicityReport::result() const {
  // @@protoc_insertion_point(field_get:CMsgChatToxicityReport.result)
  return _internal_result();
}
inline void CMsgChatToxicityReport::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.result_ = value;
}
inline void CMsgChatToxicityReport::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgChatToxicityReport.result)
}

// optional string message = 7;
inline bool CMsgChatToxicityReport::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgChatToxicityReport::has_message() const {
  return _internal_has_message();
}
inline void CMsgChatToxicityReport::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgChatToxicityReport::message() const {
  // @@protoc_insertion_point(field_get:CMsgChatToxicityReport.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgChatToxicityReport::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgChatToxicityReport.message)
}
inline std::string* CMsgChatToxicityReport::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgChatToxicityReport.message)
  return _s;
}
inline const std::string& CMsgChatToxicityReport::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CMsgChatToxicityReport::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgChatToxicityReport::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgChatToxicityReport::release_message() {
  // @@protoc_insertion_point(field_release:CMsgChatToxicityReport.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgChatToxicityReport::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgChatToxicityReport.message)
}

// -------------------------------------------------------------------

// CMsgGetTeamAuditInformation_Action

// optional uint32 registration_period = 1;
inline bool CMsgGetTeamAuditInformation_Action::_internal_has_registration_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation_Action::has_registration_period() const {
  return _internal_has_registration_period();
}
inline void CMsgGetTeamAuditInformation_Action::clear_registration_period() {
  _impl_.registration_period_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::_internal_registration_period() const {
  return _impl_.registration_period_;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::registration_period() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.Action.registration_period)
  return _internal_registration_period();
}
inline void CMsgGetTeamAuditInformation_Action::_internal_set_registration_period(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.registration_period_ = value;
}
inline void CMsgGetTeamAuditInformation_Action::set_registration_period(uint32_t value) {
  _internal_set_registration_period(value);
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.Action.registration_period)
}

// optional uint32 account_id = 2;
inline bool CMsgGetTeamAuditInformation_Action::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation_Action::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGetTeamAuditInformation_Action::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.Action.account_id)
  return _internal_account_id();
}
inline void CMsgGetTeamAuditInformation_Action::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.account_id_ = value;
}
inline void CMsgGetTeamAuditInformation_Action::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.Action.account_id)
}

// optional uint32 action = 3;
inline bool CMsgGetTeamAuditInformation_Action::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation_Action::has_action() const {
  return _internal_has_action();
}
inline void CMsgGetTeamAuditInformation_Action::clear_action() {
  _impl_.action_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::_internal_action() const {
  return _impl_.action_;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::action() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.Action.action)
  return _internal_action();
}
inline void CMsgGetTeamAuditInformation_Action::_internal_set_action(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.action_ = value;
}
inline void CMsgGetTeamAuditInformation_Action::set_action(uint32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.Action.action)
}

// optional uint32 timestamp = 4;
inline bool CMsgGetTeamAuditInformation_Action::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation_Action::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgGetTeamAuditInformation_Action::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgGetTeamAuditInformation_Action::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.Action.timestamp)
  return _internal_timestamp();
}
inline void CMsgGetTeamAuditInformation_Action::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.timestamp_ = value;
}
inline void CMsgGetTeamAuditInformation_Action::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.Action.timestamp)
}

// optional string player_name = 5;
inline bool CMsgGetTeamAuditInformation_Action::_internal_has_player_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation_Action::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgGetTeamAuditInformation_Action::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGetTeamAuditInformation_Action::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.Action.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGetTeamAuditInformation_Action::set_player_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.Action.player_name)
}
inline std::string* CMsgGetTeamAuditInformation_Action::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgGetTeamAuditInformation.Action.player_name)
  return _s;
}
inline const std::string& CMsgGetTeamAuditInformation_Action::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void CMsgGetTeamAuditInformation_Action::_internal_set_player_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGetTeamAuditInformation_Action::_internal_mutable_player_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGetTeamAuditInformation_Action::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgGetTeamAuditInformation.Action.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.player_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGetTeamAuditInformation_Action::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGetTeamAuditInformation.Action.player_name)
}

// optional string player_real_name = 6;
inline bool CMsgGetTeamAuditInformation_Action::_internal_has_player_real_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation_Action::has_player_real_name() const {
  return _internal_has_player_real_name();
}
inline void CMsgGetTeamAuditInformation_Action::clear_player_real_name() {
  _impl_.player_real_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGetTeamAuditInformation_Action::player_real_name() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.Action.player_real_name)
  return _internal_player_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGetTeamAuditInformation_Action::set_player_real_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.player_real_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.Action.player_real_name)
}
inline std::string* CMsgGetTeamAuditInformation_Action::mutable_player_real_name() {
  std::string* _s = _internal_mutable_player_real_name();
  // @@protoc_insertion_point(field_mutable:CMsgGetTeamAuditInformation.Action.player_real_name)
  return _s;
}
inline const std::string& CMsgGetTeamAuditInformation_Action::_internal_player_real_name() const {
  return _impl_.player_real_name_.Get();
}
inline void CMsgGetTeamAuditInformation_Action::_internal_set_player_real_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGetTeamAuditInformation_Action::_internal_mutable_player_real_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.player_real_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGetTeamAuditInformation_Action::release_player_real_name() {
  // @@protoc_insertion_point(field_release:CMsgGetTeamAuditInformation.Action.player_real_name)
  if (!_internal_has_player_real_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.player_real_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_real_name_.IsDefault()) {
    _impl_.player_real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGetTeamAuditInformation_Action::set_allocated_player_real_name(std::string* player_real_name) {
  if (player_real_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.player_real_name_.SetAllocated(player_real_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_real_name_.IsDefault()) {
    _impl_.player_real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGetTeamAuditInformation.Action.player_real_name)
}

// -------------------------------------------------------------------

// CMsgGetTeamAuditInformation

// optional uint32 team_id = 1;
inline bool CMsgGetTeamAuditInformation::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgGetTeamAuditInformation::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGetTeamAuditInformation::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgGetTeamAuditInformation::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.team_id)
  return _internal_team_id();
}
inline void CMsgGetTeamAuditInformation::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_id_ = value;
}
inline void CMsgGetTeamAuditInformation::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.team_id)
}

// optional string team_name = 2;
inline bool CMsgGetTeamAuditInformation::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgGetTeamAuditInformation::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGetTeamAuditInformation::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGetTeamAuditInformation::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.team_name)
}
inline std::string* CMsgGetTeamAuditInformation::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgGetTeamAuditInformation.team_name)
  return _s;
}
inline const std::string& CMsgGetTeamAuditInformation::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgGetTeamAuditInformation::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGetTeamAuditInformation::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGetTeamAuditInformation::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgGetTeamAuditInformation.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGetTeamAuditInformation::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGetTeamAuditInformation.team_name)
}

// repeated .CMsgGetTeamAuditInformation.Action actions = 3;
inline int CMsgGetTeamAuditInformation::_internal_actions_size() const {
  return _impl_.actions_.size();
}
inline int CMsgGetTeamAuditInformation::actions_size() const {
  return _internal_actions_size();
}
inline void CMsgGetTeamAuditInformation::clear_actions() {
  _impl_.actions_.Clear();
}
inline ::CMsgGetTeamAuditInformation_Action* CMsgGetTeamAuditInformation::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGetTeamAuditInformation.actions)
  return _impl_.actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGetTeamAuditInformation_Action >*
CMsgGetTeamAuditInformation::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGetTeamAuditInformation.actions)
  return &_impl_.actions_;
}
inline const ::CMsgGetTeamAuditInformation_Action& CMsgGetTeamAuditInformation::_internal_actions(int index) const {
  return _impl_.actions_.Get(index);
}
inline const ::CMsgGetTeamAuditInformation_Action& CMsgGetTeamAuditInformation::actions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.actions)
  return _internal_actions(index);
}
inline ::CMsgGetTeamAuditInformation_Action* CMsgGetTeamAuditInformation::_internal_add_actions() {
  return _impl_.actions_.Add();
}
inline ::CMsgGetTeamAuditInformation_Action* CMsgGetTeamAuditInformation::add_actions() {
  ::CMsgGetTeamAuditInformation_Action* _add = _internal_add_actions();
  // @@protoc_insertion_point(field_add:CMsgGetTeamAuditInformation.actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGetTeamAuditInformation_Action >&
CMsgGetTeamAuditInformation::actions() const {
  // @@protoc_insertion_point(field_list:CMsgGetTeamAuditInformation.actions)
  return _impl_.actions_;
}

// optional uint32 last_updated = 4;
inline bool CMsgGetTeamAuditInformation::_internal_has_last_updated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGetTeamAuditInformation::has_last_updated() const {
  return _internal_has_last_updated();
}
inline void CMsgGetTeamAuditInformation::clear_last_updated() {
  _impl_.last_updated_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGetTeamAuditInformation::_internal_last_updated() const {
  return _impl_.last_updated_;
}
inline uint32_t CMsgGetTeamAuditInformation::last_updated() const {
  // @@protoc_insertion_point(field_get:CMsgGetTeamAuditInformation.last_updated)
  return _internal_last_updated();
}
inline void CMsgGetTeamAuditInformation::_internal_set_last_updated(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.last_updated_ = value;
}
inline void CMsgGetTeamAuditInformation::set_last_updated(uint32_t value) {
  _internal_set_last_updated(value);
  // @@protoc_insertion_point(field_set:CMsgGetTeamAuditInformation.last_updated)
}

// -------------------------------------------------------------------

// CMsgDOTADPCMatch

// optional .CMsgDOTAMatch match = 1;
inline bool CMsgDOTADPCMatch::_internal_has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCMatch::has_match() const {
  return _internal_has_match();
}
inline const ::CMsgDOTAMatch& CMsgDOTADPCMatch::_internal_match() const {
  const ::CMsgDOTAMatch* p = _impl_.match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAMatch&>(
      ::_CMsgDOTAMatch_default_instance_);
}
inline const ::CMsgDOTAMatch& CMsgDOTADPCMatch::match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCMatch.match)
  return _internal_match();
}
inline void CMsgDOTADPCMatch::unsafe_arena_set_allocated_match(
    ::CMsgDOTAMatch* match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_);
  }
  _impl_.match_ = match;
  if (match) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCMatch.match)
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::release_match() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatch* temp = _impl_.match_;
  _impl_.match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCMatch.match)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatch* temp = _impl_.match_;
  _impl_.match_ = nullptr;
  return temp;
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::_internal_mutable_match() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAMatch>(GetArenaForAllocation());
    _impl_.match_ = p;
  }
  return _impl_.match_;
}
inline ::CMsgDOTAMatch* CMsgDOTADPCMatch::mutable_match() {
  ::CMsgDOTAMatch* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCMatch.match)
  return _msg;
}
inline void CMsgDOTADPCMatch::set_allocated_match(::CMsgDOTAMatch* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_);
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match));
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_ = match;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCMatch.match)
}

// optional .CDOTAMatchMetadata metadata = 2;
inline bool CMsgDOTADPCMatch::_internal_has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCMatch::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::CDOTAMatchMetadata& CMsgDOTADPCMatch::_internal_metadata() const {
  const ::CDOTAMatchMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMatchMetadata&>(
      ::_CDOTAMatchMetadata_default_instance_);
}
inline const ::CDOTAMatchMetadata& CMsgDOTADPCMatch::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCMatch.metadata)
  return _internal_metadata();
}
inline void CMsgDOTADPCMatch::unsafe_arena_set_allocated_metadata(
    ::CDOTAMatchMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCMatch.metadata)
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::release_metadata() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCMatch.metadata)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CDOTAMatchMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::_internal_mutable_metadata() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMatchMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::CDOTAMatchMetadata* CMsgDOTADPCMatch::mutable_metadata() {
  ::CDOTAMatchMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCMatch.metadata)
  return _msg;
}
inline void CMsgDOTADPCMatch::set_allocated_metadata(::CDOTAMatchMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCMatch.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgArcanaVotes_VotingState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgArcanaVotes_VotingState>() {
  return ::CMsgArcanaVotes_VotingState_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTADPCFeed_EFeedElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTADPCFeed_EFeedElementType>() {
  return ::CMsgDOTADPCFeed_EFeedElementType_descriptor();
}
template <> struct is_proto_enum< ::CMsgTeamFanContentAssetStatusResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgTeamFanContentAssetStatusResponse_EResult>() {
  return ::CMsgTeamFanContentAssetStatusResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDPCEvent_ELeagueEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDPCEvent_ELeagueEvent>() {
  return ::CMsgDPCEvent_ELeagueEvent_descriptor();
}
template <> struct is_proto_enum< ::CMsgDPCEvent_ELeagueEventPhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDPCEvent_ELeagueEventPhase>() {
  return ::CMsgDPCEvent_ELeagueEventPhase_descriptor();
}
template <> struct is_proto_enum< ::CMsgDPCEvent_ELeagueEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDPCEvent_ELeagueEventType>() {
  return ::CMsgDPCEvent_ELeagueEventType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDPCEvent_ETour> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDPCEvent_ETour>() {
  return ::CMsgDPCEvent_ETour_descriptor();
}
template <> struct is_proto_enum< ::ETeamFanContentStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETeamFanContentStatus>() {
  return ::ETeamFanContentStatus_descriptor();
}
template <> struct is_proto_enum< ::ETeamFanContentAssetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETeamFanContentAssetType>() {
  return ::ETeamFanContentAssetType_descriptor();
}
template <> struct is_proto_enum< ::ETeamFanContentAssetStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETeamFanContentAssetStatus>() {
  return ::ETeamFanContentAssetStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fwebapi_2eproto
