// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_bot_script.proto

#include "dota_gcmessages_common_bot_script.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgBotWorldState_Vector::CMsgBotWorldState_Vector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct CMsgBotWorldState_VectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_VectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_VectorDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_VectorDefaultTypeInternal _CMsgBotWorldState_Vector_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_Player::CMsgBotWorldState_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.is_alive_)*/false
  , /*decltype(_impl_.respawn_time_)*/0
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.mmr_)*/0
  , /*decltype(_impl_.primary_unit_handle_)*/4294967295u} {}
struct CMsgBotWorldState_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_PlayerDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_PlayerDefaultTypeInternal _CMsgBotWorldState_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_Ability::CMsgBotWorldState_Ability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/0u
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.cast_range_)*/0u
  , /*decltype(_impl_.channel_time_)*/0
  , /*decltype(_impl_.cooldown_remaining_)*/0
  , /*decltype(_impl_.is_activated_)*/false
  , /*decltype(_impl_.is_toggled_)*/false
  , /*decltype(_impl_.is_in_ability_phase_)*/false
  , /*decltype(_impl_.is_channeling_)*/false
  , /*decltype(_impl_.is_stolen_)*/false
  , /*decltype(_impl_.is_fully_castable_)*/false
  , /*decltype(_impl_.is_combined_locked_)*/false
  , /*decltype(_impl_.charges_)*/0u
  , /*decltype(_impl_.secondary_charges_)*/0u
  , /*decltype(_impl_.power_treads_stat_)*/-1
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.caster_handle_)*/4294967295u} {}
struct CMsgBotWorldState_AbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_AbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_AbilityDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Ability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_AbilityDefaultTypeInternal _CMsgBotWorldState_Ability_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.item_id_)*/-1} {}
struct CMsgBotWorldState_DroppedItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_DroppedItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_DroppedItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_DroppedItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_DroppedItemDefaultTypeInternal _CMsgBotWorldState_DroppedItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_.time_since_seen_)*/0} {}
struct CMsgBotWorldState_RuneInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_RuneInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_RuneInfoDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_RuneInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_RuneInfoDefaultTypeInternal _CMsgBotWorldState_RuneInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.time_remaining_)*/0} {}
struct CMsgBotWorldState_TeleportInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_TeleportInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_TeleportInfoDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_TeleportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_TeleportInfoDefaultTypeInternal _CMsgBotWorldState_TeleportInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.auxiliary_units_handles_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stack_count_)*/0u
  , /*decltype(_impl_.remaining_duration_)*/0
  , /*decltype(_impl_.handle_)*/0u
  , /*decltype(_impl_.ability_handle_)*/4294967295u
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CMsgBotWorldState_ModifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_ModifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_ModifierDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Modifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_ModifierDefaultTypeInternal _CMsgBotWorldState_Modifier_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.handle_)*/0u
  , /*decltype(_impl_.caster_player_id_)*/0
  , /*decltype(_impl_.radius_)*/0u
  , /*decltype(_impl_.caster_unit_type_)*/0
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.caster_handle_)*/4294967295u
  , /*decltype(_impl_.ability_handle_)*/4294967295u} {}
struct CMsgBotWorldState_LinearProjectileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_LinearProjectileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_LinearProjectileDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_LinearProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_LinearProjectileDefaultTypeInternal _CMsgBotWorldState_LinearProjectile_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.caster_player_id_)*/0
  , /*decltype(_impl_.velocity_)*/0u
  , /*decltype(_impl_.is_dodgeable_)*/false
  , /*decltype(_impl_.is_attack_)*/false
  , /*decltype(_impl_.caster_unit_type_)*/0
  , /*decltype(_impl_.handle_)*/0u
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.caster_handle_)*/4294967295u
  , /*decltype(_impl_.ability_handle_)*/4294967295u} {}
struct CMsgBotWorldState_TrackingProjectileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_TrackingProjectileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_TrackingProjectileDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_TrackingProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_TrackingProjectileDefaultTypeInternal _CMsgBotWorldState_TrackingProjectile_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.caster_player_id_)*/0
  , /*decltype(_impl_.radius_)*/0u
  , /*decltype(_impl_.caster_unit_type_)*/0
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.caster_handle_)*/4294967295u
  , /*decltype(_impl_.ability_handle_)*/4294967295u} {}
struct CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_AvoidanceZone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal _CMsgBotWorldState_AvoidanceZone_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_Courier::CMsgBotWorldState_Courier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/0u
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.state_)*/-1} {}
struct CMsgBotWorldState_CourierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_CourierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_CourierDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Courier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_CourierDefaultTypeInternal _CMsgBotWorldState_Courier_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.is_channel_start_)*/false
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.unit_handle_)*/4294967295u} {}
struct CMsgBotWorldState_EventAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_EventAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventAbilityDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_EventAbilityDefaultTypeInternal _CMsgBotWorldState_EventAbility_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_.victim_player_id_)*/0
  , /*decltype(_impl_.attacker_player_id_)*/0
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.victim_unit_handle_)*/4294967295u
  , /*decltype(_impl_.attacker_unit_handle_)*/4294967295u} {}
struct CMsgBotWorldState_EventDamageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_EventDamageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventDamageDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_EventDamageDefaultTypeInternal _CMsgBotWorldState_EventDamage_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.killer_player_id_)*/0
  , /*decltype(_impl_.courier_unit_handle_)*/4294967295u
  , /*decltype(_impl_.killer_unit_handle_)*/4294967295u} {}
struct CMsgBotWorldState_EventCourierKilledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_EventCourierKilledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventCourierKilledDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventCourierKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_EventCourierKilledDefaultTypeInternal _CMsgBotWorldState_EventCourierKilled_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.killer_player_id_)*/0
  , /*decltype(_impl_.killer_unit_handle_)*/4294967295u} {}
struct CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventRoshanKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal _CMsgBotWorldState_EventRoshanKilled_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.tree_id_)*/0u
  , /*decltype(_impl_.destroyed_)*/false
  , /*decltype(_impl_.respawned_)*/false
  , /*decltype(_impl_.delayed_)*/false} {}
struct CMsgBotWorldState_EventTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_EventTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventTreeDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_EventTreeDefaultTypeInternal _CMsgBotWorldState_EventTree_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState_Unit::CMsgBotWorldState_Unit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.modifiers_)*/{}
  , /*decltype(_impl_.incoming_tracking_projectiles_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attack_target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ability_target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.handle_)*/0u
  , /*decltype(_impl_.unit_type_)*/0
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.bounding_radius_)*/0
  , /*decltype(_impl_.facing_)*/0
  , /*decltype(_impl_.ground_height_)*/0u
  , /*decltype(_impl_.vision_range_daytime_)*/0u
  , /*decltype(_impl_.vision_range_nighttime_)*/0u
  , /*decltype(_impl_.health_)*/0
  , /*decltype(_impl_.health_max_)*/0
  , /*decltype(_impl_.health_regen_)*/0
  , /*decltype(_impl_.mana_)*/0
  , /*decltype(_impl_.mana_max_)*/0
  , /*decltype(_impl_.mana_regen_)*/0
  , /*decltype(_impl_.base_movement_speed_)*/0
  , /*decltype(_impl_.current_movement_speed_)*/0
  , /*decltype(_impl_.anim_activity_)*/0
  , /*decltype(_impl_.anim_cycle_)*/0
  , /*decltype(_impl_.base_damage_)*/0
  , /*decltype(_impl_.base_damage_variance_)*/0
  , /*decltype(_impl_.bonus_damage_)*/0
  , /*decltype(_impl_.attack_damage_)*/0
  , /*decltype(_impl_.attack_range_)*/0
  , /*decltype(_impl_.attack_speed_)*/0
  , /*decltype(_impl_.attack_anim_point_)*/0
  , /*decltype(_impl_.attack_acquisition_range_)*/0
  , /*decltype(_impl_.attack_projectile_speed_)*/0
  , /*decltype(_impl_.is_alive_)*/false
  , /*decltype(_impl_.is_channeling_)*/false
  , /*decltype(_impl_.is_attack_immune_)*/false
  , /*decltype(_impl_.is_blind_)*/false
  , /*decltype(_impl_.bounty_xp_)*/0u
  , /*decltype(_impl_.bounty_gold_min_)*/0u
  , /*decltype(_impl_.bounty_gold_max_)*/0u
  , /*decltype(_impl_.is_block_disabled_)*/false
  , /*decltype(_impl_.is_disarmed_)*/false
  , /*decltype(_impl_.is_dominated_)*/false
  , /*decltype(_impl_.is_evade_disabled_)*/false
  , /*decltype(_impl_.is_hexed_)*/false
  , /*decltype(_impl_.is_invisible_)*/false
  , /*decltype(_impl_.is_invulnerable_)*/false
  , /*decltype(_impl_.is_magic_immune_)*/false
  , /*decltype(_impl_.is_muted_)*/false
  , /*decltype(_impl_.is_nightmared_)*/false
  , /*decltype(_impl_.is_rooted_)*/false
  , /*decltype(_impl_.is_silenced_)*/false
  , /*decltype(_impl_.is_specially_deniable_)*/false
  , /*decltype(_impl_.is_stunned_)*/false
  , /*decltype(_impl_.is_unable_to_miss_)*/false
  , /*decltype(_impl_.has_scepter_)*/false
  , /*decltype(_impl_.action_type_)*/0u
  , /*decltype(_impl_.primary_attribute_)*/0u
  , /*decltype(_impl_.is_specially_undeniable_)*/false
  , /*decltype(_impl_.is_using_ability_)*/false
  , /*decltype(_impl_.is_illusion_)*/false
  , /*decltype(_impl_.flying_courier_)*/false
  , /*decltype(_impl_.respawn_time_)*/0
  , /*decltype(_impl_.buyback_cost_)*/0u
  , /*decltype(_impl_.buyback_cooldown_)*/0
  , /*decltype(_impl_.spell_amplification_)*/0
  , /*decltype(_impl_.armor_)*/0
  , /*decltype(_impl_.magic_resist_)*/0
  , /*decltype(_impl_.evasion_)*/0
  , /*decltype(_impl_.xp_needed_to_level_)*/0u
  , /*decltype(_impl_.ability_points_)*/0u
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.strength_)*/0u
  , /*decltype(_impl_.agility_)*/0u
  , /*decltype(_impl_.intelligence_)*/0u
  , /*decltype(_impl_.remaining_lifespan_)*/0
  , /*decltype(_impl_.shrine_cooldown_)*/0
  , /*decltype(_impl_.is_shrine_healing_)*/false
  , /*decltype(_impl_.unreliable_gold_)*/-1
  , /*decltype(_impl_.attack_target_handle_)*/4294967295u
  , /*decltype(_impl_.attacks_per_second_)*/-1
  , /*decltype(_impl_.last_attack_time_)*/-1
  , /*decltype(_impl_.active_ability_handle_)*/4294967295u
  , /*decltype(_impl_.ability_target_handle_)*/4294967295u
  , /*decltype(_impl_.reliable_gold_)*/-1} {}
struct CMsgBotWorldState_UnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldState_UnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldState_UnitDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Unit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldState_UnitDefaultTypeInternal _CMsgBotWorldState_Unit_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotWorldState::CMsgBotWorldState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.units_)*/{}
  , /*decltype(_impl_.dropped_items_)*/{}
  , /*decltype(_impl_.rune_infos_)*/{}
  , /*decltype(_impl_.incoming_teleports_)*/{}
  , /*decltype(_impl_.linear_projectiles_)*/{}
  , /*decltype(_impl_.avoidance_zones_)*/{}
  , /*decltype(_impl_.couriers_)*/{}
  , /*decltype(_impl_.ability_events_)*/{}
  , /*decltype(_impl_.damage_events_)*/{}
  , /*decltype(_impl_.courier_killed_events_)*/{}
  , /*decltype(_impl_.roshan_killed_events_)*/{}
  , /*decltype(_impl_.tree_events_)*/{}
  , /*decltype(_impl_.dropped_items_deltas_)*/{}
  , /*decltype(_impl_.rune_infos_deltas_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.dota_time_)*/0
  , /*decltype(_impl_.game_state_)*/0u
  , /*decltype(_impl_.hero_pick_state_)*/0u
  , /*decltype(_impl_.time_of_day_)*/0
  , /*decltype(_impl_.glyph_cooldown_)*/0
  , /*decltype(_impl_.glyph_cooldown_enemy_)*/0} {}
struct CMsgBotWorldStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotWorldStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotWorldStateDefaultTypeInternal() {}
  union {
    CMsgBotWorldState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotWorldStateDefaultTypeInternal _CMsgBotWorldState_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.is_alive_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.primary_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _impl_.location_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.cast_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.channel_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.cooldown_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.is_activated_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.is_toggled_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.is_in_ability_phase_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.is_channeling_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.is_stolen_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.is_fully_castable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.charges_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.secondary_charges_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.is_combined_locked_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _impl_.power_treads_stat_),
  0,
  16,
  1,
  17,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  14,
  12,
  15,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, _impl_.location_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _impl_.time_since_seen_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, _impl_.time_remaining_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_.stack_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_.ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_.remaining_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _impl_.auxiliary_units_handles_),
  3,
  0,
  1,
  4,
  5,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.caster_unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.caster_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _impl_.radius_),
  2,
  7,
  5,
  3,
  8,
  6,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.caster_unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.caster_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.is_dodgeable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _impl_.is_attack_),
  6,
  8,
  5,
  1,
  9,
  7,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_.caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_.caster_unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_.caster_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_.ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _impl_.radius_),
  0,
  5,
  3,
  1,
  6,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, _impl_.player_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _impl_.unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _impl_.is_channel_start_),
  3,
  1,
  4,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _impl_.victim_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _impl_.victim_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _impl_.attacker_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _impl_.attacker_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _impl_.ability_id_),
  0,
  1,
  4,
  2,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _impl_.courier_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _impl_.killer_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _impl_.killer_unit_handle_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, _impl_.killer_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, _impl_.killer_unit_handle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _impl_.tree_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _impl_.destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _impl_.respawned_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _impl_.delayed_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_alive_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.bounding_radius_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.facing_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.ground_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.vision_range_daytime_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.vision_range_nighttime_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.health_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.health_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.mana_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.mana_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.mana_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.base_movement_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.current_movement_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.anim_activity_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.anim_cycle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.base_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.base_damage_variance_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.bonus_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_anim_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_acquisition_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_projectile_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_target_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attack_target_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.attacks_per_second_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.last_attack_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.bounty_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.bounty_gold_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.bounty_gold_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_channeling_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.active_ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_attack_immune_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_blind_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_block_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_disarmed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_dominated_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_evade_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_hexed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_invisible_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_invulnerable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_magic_immune_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_muted_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_nightmared_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_rooted_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_silenced_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_specially_deniable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_stunned_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_unable_to_miss_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.has_scepter_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_specially_undeniable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.modifiers_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.incoming_tracking_projectiles_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.ability_target_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.ability_target_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_using_ability_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.primary_attribute_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_illusion_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.buyback_cost_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.buyback_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.spell_amplification_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.armor_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.magic_resist_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.evasion_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.xp_needed_to_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.ability_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.reliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.unreliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.strength_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.agility_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.intelligence_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.remaining_lifespan_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.flying_courier_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.shrine_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _impl_.is_shrine_healing_),
  4,
  5,
  0,
  6,
  7,
  3,
  33,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  81,
  1,
  82,
  83,
  37,
  38,
  39,
  34,
  84,
  35,
  36,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  58,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  56,
  85,
  2,
  59,
  57,
  60,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  86,
  80,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  61,
  78,
  79,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.dota_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.hero_pick_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.time_of_day_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.glyph_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.glyph_cooldown_enemy_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.dropped_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.dropped_items_deltas_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.rune_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.rune_infos_deltas_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.incoming_teleports_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.linear_projectiles_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.avoidance_zones_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.couriers_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.ability_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.damage_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.courier_killed_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.roshan_killed_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _impl_.tree_events_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgBotWorldState_Vector)},
  { 12, 29, -1, sizeof(::CMsgBotWorldState_Player)},
  { 40, 64, -1, sizeof(::CMsgBotWorldState_Ability)},
  { 82, 90, -1, sizeof(::CMsgBotWorldState_DroppedItem)},
  { 92, 102, -1, sizeof(::CMsgBotWorldState_RuneInfo)},
  { 106, 115, -1, sizeof(::CMsgBotWorldState_TeleportInfo)},
  { 118, 131, -1, sizeof(::CMsgBotWorldState_Modifier)},
  { 138, 153, -1, sizeof(::CMsgBotWorldState_LinearProjectile)},
  { 162, 178, -1, sizeof(::CMsgBotWorldState_TrackingProjectile)},
  { 188, 201, -1, sizeof(::CMsgBotWorldState_AvoidanceZone)},
  { 208, 217, -1, sizeof(::CMsgBotWorldState_Courier)},
  { 220, 231, -1, sizeof(::CMsgBotWorldState_EventAbility)},
  { 236, 248, -1, sizeof(::CMsgBotWorldState_EventDamage)},
  { 254, 264, -1, sizeof(::CMsgBotWorldState_EventCourierKilled)},
  { 268, 276, -1, sizeof(::CMsgBotWorldState_EventRoshanKilled)},
  { 278, 289, -1, sizeof(::CMsgBotWorldState_EventTree)},
  { 294, 391, -1, sizeof(::CMsgBotWorldState_Unit)},
  { 482, 511, -1, sizeof(::CMsgBotWorldState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgBotWorldState_Vector_default_instance_._instance,
  &::_CMsgBotWorldState_Player_default_instance_._instance,
  &::_CMsgBotWorldState_Ability_default_instance_._instance,
  &::_CMsgBotWorldState_DroppedItem_default_instance_._instance,
  &::_CMsgBotWorldState_RuneInfo_default_instance_._instance,
  &::_CMsgBotWorldState_TeleportInfo_default_instance_._instance,
  &::_CMsgBotWorldState_Modifier_default_instance_._instance,
  &::_CMsgBotWorldState_LinearProjectile_default_instance_._instance,
  &::_CMsgBotWorldState_TrackingProjectile_default_instance_._instance,
  &::_CMsgBotWorldState_AvoidanceZone_default_instance_._instance,
  &::_CMsgBotWorldState_Courier_default_instance_._instance,
  &::_CMsgBotWorldState_EventAbility_default_instance_._instance,
  &::_CMsgBotWorldState_EventDamage_default_instance_._instance,
  &::_CMsgBotWorldState_EventCourierKilled_default_instance_._instance,
  &::_CMsgBotWorldState_EventRoshanKilled_default_instance_._instance,
  &::_CMsgBotWorldState_EventTree_default_instance_._instance,
  &::_CMsgBotWorldState_Unit_default_instance_._instance,
  &::_CMsgBotWorldState_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'dota_gcmessages_common_bot_script.prot"
  "o\032\025valveextensions.proto\"\2225\n\021CMsgBotWorl"
  "dState\022\017\n\007team_id\030\001 \001(\r\022\021\n\tgame_time\030\002 \001"
  "(\002\022\021\n\tdota_time\030\003 \001(\002\022\022\n\ngame_state\030\004 \001("
  "\r\022\027\n\017hero_pick_state\030\005 \001(\r\022\023\n\013time_of_da"
  "y\030\006 \001(\002\022\026\n\016glyph_cooldown\030\007 \001(\002\022\034\n\024glyph"
  "_cooldown_enemy\030\010 \001(\002\0220\n\007players\030\n \003(\0132\031"
  ".CMsgBotWorldState.PlayerB\004\300\344\035\001\022,\n\005units"
  "\030\013 \003(\0132\027.CMsgBotWorldState.UnitB\004\300\344\035\001\022;\n"
  "\rdropped_items\030\014 \003(\0132\036.CMsgBotWorldState"
  ".DroppedItemB\004\320\344\035p\022\034\n\024dropped_items_delt"
  "as\030p \003(\005\0225\n\nrune_infos\030\r \003(\0132\033.CMsgBotWo"
  "rldState.RuneInfoB\004\320\344\035q\022\031\n\021rune_infos_de"
  "ltas\030q \003(\005\022;\n\022incoming_teleports\030\016 \003(\0132\037"
  ".CMsgBotWorldState.TeleportInfo\022E\n\022linea"
  "r_projectiles\030\017 \003(\0132#.CMsgBotWorldState."
  "LinearProjectileB\004\300\344\035\001\0229\n\017avoidance_zone"
  "s\030\020 \003(\0132 .CMsgBotWorldState.AvoidanceZon"
  "e\0222\n\010couriers\030\021 \003(\0132\032.CMsgBotWorldState."
  "CourierB\004\300\344\035\001\0227\n\016ability_events\030\024 \003(\0132\037."
  "CMsgBotWorldState.EventAbility\0225\n\rdamage"
  "_events\030\025 \003(\0132\036.CMsgBotWorldState.EventD"
  "amage\022D\n\025courier_killed_events\030\026 \003(\0132%.C"
  "MsgBotWorldState.EventCourierKilled\022B\n\024r"
  "oshan_killed_events\030\027 \003(\0132$.CMsgBotWorld"
  "State.EventRoshanKilled\0221\n\013tree_events\030\030"
  " \003(\0132\034.CMsgBotWorldState.EventTree\032)\n\006Ve"
  "ctor\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\032\376\001"
  "\n\006Player\022\027\n\tplayer_id\030\001 \001(\005B\004\310\344\035\001\022\017\n\007her"
  "o_id\030\002 \001(\r\022\020\n\010is_alive\030\003 \001(\010\022\024\n\014respawn_"
  "time\030\004 \001(\002\022\r\n\005kills\030\005 \001(\r\022\016\n\006deaths\030\006 \001("
  "\r\022\017\n\007assists\030\007 \001(\r\022\017\n\007team_id\030\010 \001(\r\022\'\n\023p"
  "rimary_unit_handle\030\t \001(\r:\n4294967295\022\013\n\003"
  "mmr\030\n \001(\005\022+\n\010location\030\013 \001(\0132\031.CMsgBotWor"
  "ldState.Vector\032\263\003\n\007Ability\022\024\n\006handle\030\001 \001"
  "(\rB\004\310\344\035\001\022\026\n\nability_id\030\002 \001(\005:\002-1\022\014\n\004slot"
  "\030\003 \001(\r\022!\n\rcaster_handle\030\005 \001(\r:\n429496729"
  "5\022\r\n\005level\030\006 \001(\r\022\022\n\ncast_range\030\n \001(\r\022\024\n\014"
  "channel_time\030\013 \001(\002\022\035\n\022cooldown_remaining"
  "\030\014 \001(\002:\0010\022\024\n\014is_activated\030\024 \001(\010\022\022\n\nis_to"
  "ggled\030\025 \001(\010\022\033\n\023is_in_ability_phase\030\026 \001(\010"
  "\022\025\n\ris_channeling\030\027 \001(\010\022\021\n\tis_stolen\030\030 \001"
  "(\010\022\031\n\021is_fully_castable\030\031 \001(\010\022\017\n\007charges"
  "\030\036 \001(\r\022\031\n\021secondary_charges\030\037 \001(\r\022\032\n\022is_"
  "combined_locked\030( \001(\010\022\035\n\021power_treads_st"
  "at\0302 \001(\005:\002-1\032O\n\013DroppedItem\022\023\n\007item_id\030\001"
  " \001(\005:\002-1\022+\n\010location\030\002 \001(\0132\031.CMsgBotWorl"
  "dState.Vector\032n\n\010RuneInfo\022\014\n\004type\030\001 \001(\005\022"
  "+\n\010location\030\002 \001(\0132\031.CMsgBotWorldState.Ve"
  "ctor\022\016\n\006status\030\003 \001(\r\022\027\n\017time_since_seen\030"
  "\004 \001(\002\032f\n\014TeleportInfo\022\021\n\tplayer_id\030\001 \001(\005"
  "\022+\n\010location\030\002 \001(\0132\031.CMsgBotWorldState.V"
  "ector\022\026\n\016time_remaining\030\003 \001(\002\032\274\001\n\010Modifi"
  "er\022\024\n\006handle\030\007 \001(\rB\004\310\344\035\001\022\014\n\004name\030\001 \001(\t\022\023"
  "\n\013stack_count\030\002 \001(\r\022\"\n\016ability_handle\030\003 "
  "\001(\r:\n4294967295\022\026\n\nability_id\030\004 \001(\005:\002-1\022"
  "\032\n\022remaining_duration\030\005 \001(\002\022\037\n\027auxiliary"
  "_units_handles\030\006 \003(\r\032\313\002\n\020LinearProjectil"
  "e\022\024\n\006handle\030\001 \001(\rB\004\310\344\035\001\022!\n\rcaster_handle"
  "\030\002 \001(\r:\n4294967295\022>\n\020caster_unit_type\030\t"
  " \001(\0162\033.CMsgBotWorldState.UnitType:\007INVAL"
  "ID\022\030\n\020caster_player_id\030\003 \001(\005\022\"\n\016ability_"
  "handle\030\004 \001(\r:\n4294967295\022\026\n\nability_id\030\005"
  " \001(\005:\002-1\022+\n\010location\030\006 \001(\0132\031.CMsgBotWorl"
  "dState.Vector\022+\n\010velocity\030\007 \001(\0132\031.CMsgBo"
  "tWorldState.Vector\022\016\n\006radius\030\010 \001(\r\032\313\002\n\022T"
  "rackingProjectile\022\024\n\006handle\030\n \001(\rB\004\310\344\035\001\022"
  "!\n\rcaster_handle\030\001 \001(\r:\n4294967295\022>\n\020ca"
  "ster_unit_type\030\t \001(\0162\033.CMsgBotWorldState"
  ".UnitType:\007INVALID\022\030\n\020caster_player_id\030\002"
  " \001(\005\022\"\n\016ability_handle\030\003 \001(\r:\n4294967295"
  "\022\026\n\nability_id\030\004 \001(\005:\002-1\022+\n\010location\030\005 \001"
  "(\0132\031.CMsgBotWorldState.Vector\022\020\n\010velocit"
  "y\030\006 \001(\r\022\024\n\014is_dodgeable\030\007 \001(\010\022\021\n\tis_atta"
  "ck\030\010 \001(\010\032\205\002\n\rAvoidanceZone\022+\n\010location\030\001"
  " \001(\0132\031.CMsgBotWorldState.Vector\022!\n\rcaste"
  "r_handle\030\002 \001(\r:\n4294967295\022>\n\020caster_uni"
  "t_type\030\007 \001(\0162\033.CMsgBotWorldState.UnitTyp"
  "e:\007INVALID\022\030\n\020caster_player_id\030\003 \001(\005\022\"\n\016"
  "ability_handle\030\004 \001(\r:\n4294967295\022\026\n\nabil"
  "ity_id\030\005 \001(\005:\002-1\022\016\n\006radius\030\006 \001(\r\032v\n\007Cour"
  "ier\022\024\n\006handle\030\001 \001(\rB\004\310\344\035\001\022B\n\005state\030\002 \001(\016"
  "2\037.CMsgBotWorldState.CourierState:\022COURI"
  "ER_STATE_INIT\022\021\n\tplayer_id\030\003 \001(\005\032\241\001\n\014Eve"
  "ntAbility\022\026\n\nability_id\030\001 \001(\005:\002-1\022\021\n\tpla"
  "yer_id\030\002 \001(\005\022\037\n\013unit_handle\030\003 \001(\r:\n42949"
  "67295\022+\n\010location\030\004 \001(\0132\031.CMsgBotWorldSt"
  "ate.Vector\022\030\n\020is_channel_start\030\005 \001(\010\032\275\001\n"
  "\013EventDamage\022\016\n\006damage\030\001 \001(\r\022\030\n\020victim_p"
  "layer_id\030\002 \001(\005\022&\n\022victim_unit_handle\030\003 \001"
  "(\r:\n4294967295\022\032\n\022attacker_player_id\030\004 \001"
  "(\005\022(\n\024attacker_unit_handle\030\005 \001(\r:\n429496"
  "7295\022\026\n\nability_id\030\006 \001(\005:\002-1\032\220\001\n\022EventCo"
  "urierKilled\022\017\n\007team_id\030\001 \001(\r\022\'\n\023courier_"
  "unit_handle\030\002 \001(\r:\n4294967295\022\030\n\020killer_"
  "player_id\030\003 \001(\005\022&\n\022killer_unit_handle\030\004 "
  "\001(\r:\n4294967295\032U\n\021EventRoshanKilled\022\030\n\020"
  "killer_player_id\030\001 \001(\005\022&\n\022killer_unit_ha"
  "ndle\030\002 \001(\r:\n4294967295\032\200\001\n\tEventTree\022\017\n\007"
  "tree_id\030\001 \001(\r\022\021\n\tdestroyed\030\002 \001(\010\022\021\n\tresp"
  "awned\030\003 \001(\010\022+\n\010location\030\004 \001(\0132\031.CMsgBotW"
  "orldState.Vector\022\017\n\007delayed\030\005 \001(\010\032\323\022\n\004Un"
  "it\022\024\n\006handle\030\001 \001(\rB\004\310\344\035\001\0227\n\tunit_type\030\002 "
  "\001(\0162\033.CMsgBotWorldState.UnitType:\007INVALI"
  "D\022\014\n\004name\030\003 \001(\t\022\017\n\007team_id\030\004 \001(\r\022\r\n\005leve"
  "l\030\005 \001(\r\022+\n\010location\030\006 \001(\0132\031.CMsgBotWorld"
  "State.Vector\022\020\n\010is_alive\030\007 \001(\010\022\021\n\tplayer"
  "_id\030\010 \001(\005\022\027\n\017bounding_radius\030\n \001(\005\022\016\n\006fa"
  "cing\030\013 \001(\005\022\025\n\rground_height\030\014 \001(\r\022\034\n\024vis"
  "ion_range_daytime\030\017 \001(\r\022\036\n\026vision_range_"
  "nighttime\030\020 \001(\r\022\016\n\006health\030\024 \001(\005\022\022\n\nhealt"
  "h_max\030\025 \001(\005\022\024\n\014health_regen\030\026 \001(\002\022\014\n\004man"
  "a\030\031 \001(\005\022\020\n\010mana_max\030\032 \001(\005\022\022\n\nmana_regen\030"
  "\033 \001(\002\022\033\n\023base_movement_speed\030\036 \001(\005\022\036\n\026cu"
  "rrent_movement_speed\030\037 \001(\005\022\025\n\ranim_activ"
  "ity\030# \001(\005\022\022\n\nanim_cycle\030$ \001(\002\022\023\n\013base_da"
  "mage\030( \001(\005\022\034\n\024base_damage_variance\030) \001(\005"
  "\022\024\n\014bonus_damage\030* \001(\005\022\025\n\rattack_damage\030"
  "+ \001(\005\022\024\n\014attack_range\030, \001(\005\022\024\n\014attack_sp"
  "eed\030- \001(\002\022\031\n\021attack_anim_point\030. \001(\002\022 \n\030"
  "attack_acquisition_range\030/ \001(\005\022\037\n\027attack"
  "_projectile_speed\0300 \001(\005\022(\n\024attack_target"
  "_handle\0301 \001(\r:\n4294967295\022\032\n\022attack_targ"
  "et_name\0304 \001(\t\022\036\n\022attacks_per_second\0302 \001("
  "\005:\002-1\022\034\n\020last_attack_time\0303 \001(\002:\002-1\022\021\n\tb"
  "ounty_xp\030< \001(\r\022\027\n\017bounty_gold_min\030= \001(\r\022"
  "\027\n\017bounty_gold_max\030> \001(\r\022\025\n\ris_channelin"
  "g\030A \001(\010\022)\n\025active_ability_handle\030B \001(\r:\n"
  "4294967295\022\030\n\020is_attack_immune\030F \001(\010\022\020\n\010"
  "is_blind\030G \001(\010\022\031\n\021is_block_disabled\030H \001("
  "\010\022\023\n\013is_disarmed\030I \001(\010\022\024\n\014is_dominated\030J"
  " \001(\010\022\031\n\021is_evade_disabled\030K \001(\010\022\020\n\010is_he"
  "xed\030L \001(\010\022\024\n\014is_invisible\030M \001(\010\022\027\n\017is_in"
  "vulnerable\030N \001(\010\022\027\n\017is_magic_immune\030O \001("
  "\010\022\020\n\010is_muted\030P \001(\010\022\025\n\ris_nightmared\030R \001"
  "(\010\022\021\n\tis_rooted\030S \001(\010\022\023\n\013is_silenced\030T \001"
  "(\010\022\035\n\025is_specially_deniable\030U \001(\010\022\022\n\nis_"
  "stunned\030V \001(\010\022\031\n\021is_unable_to_miss\030W \001(\010"
  "\022\023\n\013has_scepter\030X \001(\010\022\037\n\027is_specially_un"
  "deniable\030^ \001(\010\0223\n\tabilities\030Z \003(\0132\032.CMsg"
  "BotWorldState.AbilityB\004\300\344\035\001\022/\n\005items\030[ \003"
  "(\0132\032.CMsgBotWorldState.AbilityB\004\300\344\035\001\0224\n\t"
  "modifiers\030\\ \003(\0132\033.CMsgBotWorldState.Modi"
  "fierB\004\300\344\035\001\022R\n\035incoming_tracking_projecti"
  "les\030] \003(\0132%.CMsgBotWorldState.TrackingPr"
  "ojectileB\004\300\344\035\001\022\023\n\013action_type\030d \001(\r\022)\n\025a"
  "bility_target_handle\030e \001(\r:\n4294967295\022\033"
  "\n\023ability_target_name\030g \001(\t\022\030\n\020is_using_"
  "ability\030f \001(\010\022\031\n\021primary_attribute\030n \001(\r"
  "\022\023\n\013is_illusion\030o \001(\010\022\024\n\014respawn_time\030p "
  "\001(\002\022\024\n\014buyback_cost\030q \001(\r\022\030\n\020buyback_coo"
  "ldown\030r \001(\002\022\033\n\023spell_amplification\030s \001(\002"
  "\022\r\n\005armor\030t \001(\002\022\024\n\014magic_resist\030u \001(\002\022\017\n"
  "\007evasion\030v \001(\002\022\032\n\022xp_needed_to_level\030x \001"
  "(\r\022\026\n\016ability_points\030y \001(\r\022\031\n\rreliable_g"
  "old\030z \001(\005:\002-1\022\033\n\017unreliable_gold\030{ \001(\005:\002"
  "-1\022\021\n\tlast_hits\030| \001(\r\022\016\n\006denies\030} \001(\r\022\021\n"
  "\tnet_worth\030~ \001(\r\022\020\n\010strength\030\177 \001(\r\022\020\n\007ag"
  "ility\030\200\001 \001(\r\022\025\n\014intelligence\030\201\001 \001(\r\022\033\n\022r"
  "emaining_lifespan\030\202\001 \001(\002\022\027\n\016flying_couri"
  "er\030\214\001 \001(\010\022\030\n\017shrine_cooldown\030\226\001 \001(\002\022\032\n\021i"
  "s_shrine_healing\030\227\001 \001(\010\"\263\001\n\010UnitType\022\013\n\007"
  "INVALID\020\000\022\010\n\004HERO\020\001\022\016\n\nCREEP_HERO\020\002\022\016\n\nL"
  "ANE_CREEP\020\003\022\020\n\014JUNGLE_CREEP\020\004\022\n\n\006ROSHAN\020"
  "\005\022\t\n\005TOWER\020\006\022\014\n\010BARRACKS\020\007\022\n\n\006SHRINE\020\010\022\010"
  "\n\004FORT\020\t\022\014\n\010BUILDING\020\n\022\013\n\007COURIER\020\013\022\010\n\004W"
  "ARD\020\014\"\335\001\n\014CourierState\022\037\n\022COURIER_STATE_"
  "INIT\020\377\377\377\377\377\377\377\377\377\001\022\026\n\022COURIER_STATE_IDLE\020\000\022"
  "\031\n\025COURIER_STATE_AT_BASE\020\001\022\030\n\024COURIER_ST"
  "ATE_MOVING\020\002\022\"\n\036COURIER_STATE_DELIVERING"
  "_ITEMS\020\003\022#\n\037COURIER_STATE_RETURNING_TO_B"
  "ASE\020\004\022\026\n\022COURIER_STATE_DEAD\020\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_deps[1] = {
  &::descriptor_table_valveextensions_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto = {
    false, false, 6869, descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto,
    "dota_gcmessages_common_bot_script.proto",
    &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_deps, 1, 18,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBotWorldState_UnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[0];
}
bool CMsgBotWorldState_UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::INVALID;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::HERO;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::CREEP_HERO;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::LANE_CREEP;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::JUNGLE_CREEP;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::ROSHAN;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::TOWER;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::BARRACKS;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::SHRINE;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::FORT;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::BUILDING;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::COURIER;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::WARD;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::UnitType_MIN;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::UnitType_MAX;
constexpr int CMsgBotWorldState::UnitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBotWorldState_CourierState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[1];
}
bool CMsgBotWorldState_CourierState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_INIT;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_IDLE;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_AT_BASE;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_MOVING;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_DELIVERING_ITEMS;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_RETURNING_TO_BASE;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_DEAD;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::CourierState_MIN;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::CourierState_MAX;
constexpr int CMsgBotWorldState::CourierState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CMsgBotWorldState_Vector::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Vector>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgBotWorldState_Vector::CMsgBotWorldState_Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Vector)
}
CMsgBotWorldState_Vector::CMsgBotWorldState_Vector(const CMsgBotWorldState_Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_Vector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Vector)
}

inline void CMsgBotWorldState_Vector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

CMsgBotWorldState_Vector::~CMsgBotWorldState_Vector() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Vector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBotWorldState_Vector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Vector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Vector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_Vector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Vector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Vector)
  return target;
}

size_t CMsgBotWorldState_Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Vector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_Vector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_Vector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_Vector::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_Vector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_Vector*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_Vector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Vector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_Vector::CopyFrom(const CMsgBotWorldState_Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Vector::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Vector::InternalSwap(CMsgBotWorldState_Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Vector, _impl_.z_)
      + sizeof(CMsgBotWorldState_Vector::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Vector, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Vector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[0]);
}

// ===================================================================

class CMsgBotWorldState_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Player>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_alive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_primary_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Player* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Player::_Internal::location(const CMsgBotWorldState_Player* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_Player::CMsgBotWorldState_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Player)
}
CMsgBotWorldState_Player::CMsgBotWorldState_Player(const CMsgBotWorldState_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.is_alive_){}
    , decltype(_impl_.respawn_time_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.primary_unit_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primary_unit_handle_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.primary_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Player)
}

inline void CMsgBotWorldState_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.is_alive_){false}
    , decltype(_impl_.respawn_time_){0}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.mmr_){0}
    , decltype(_impl_.primary_unit_handle_){4294967295u}
  };
}

CMsgBotWorldState_Player::~CMsgBotWorldState_Player() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.assists_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.assists_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mmr_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.mmr_));
    _impl_.primary_unit_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_alive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_alive(&has_bits);
          _impl_.is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float respawn_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_respawn_time(&has_bits);
          _impl_.respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 primary_unit_handle = 9 [default = 4294967295];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_primary_unit_handle(&has_bits);
          _impl_.primary_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mmr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional bool is_alive = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_alive(), target);
  }

  // optional float respawn_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_respawn_time(), target);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_assists(), target);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_team_id(), target);
  }

  // optional uint32 primary_unit_handle = 9 [default = 4294967295];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_primary_unit_handle(), target);
  }

  // optional int32 mmr = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_mmr(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Player)
  return target;
}

size_t CMsgBotWorldState_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBotWorldState.Vector location = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional int32 player_id = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional bool is_alive = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float respawn_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 kills = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 team_id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional int32 mmr = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mmr());
    }

    // optional uint32 primary_unit_handle = 9 [default = 4294967295];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_primary_unit_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_Player::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_Player*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_alive_ = from._impl_.is_alive_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.respawn_time_ = from._impl_.respawn_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.primary_unit_handle_ = from._impl_.primary_unit_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_Player::CopyFrom(const CMsgBotWorldState_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Player::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Player::InternalSwap(CMsgBotWorldState_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Player, _impl_.mmr_)
      + sizeof(CMsgBotWorldState_Player::_impl_.mmr_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Player, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
  swap(_impl_.primary_unit_handle_, other->_impl_.primary_unit_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[1]);
}

// ===================================================================

class CMsgBotWorldState_Ability::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Ability>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cast_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cooldown_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_toggled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_in_ability_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_channeling(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_stolen(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_fully_castable(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_combined_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_power_treads_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CMsgBotWorldState_Ability::CMsgBotWorldState_Ability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Ability)
}
CMsgBotWorldState_Ability::CMsgBotWorldState_Ability(const CMsgBotWorldState_Ability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_Ability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.cast_range_){}
    , decltype(_impl_.channel_time_){}
    , decltype(_impl_.cooldown_remaining_){}
    , decltype(_impl_.is_activated_){}
    , decltype(_impl_.is_toggled_){}
    , decltype(_impl_.is_in_ability_phase_){}
    , decltype(_impl_.is_channeling_){}
    , decltype(_impl_.is_stolen_){}
    , decltype(_impl_.is_fully_castable_){}
    , decltype(_impl_.is_combined_locked_){}
    , decltype(_impl_.charges_){}
    , decltype(_impl_.secondary_charges_){}
    , decltype(_impl_.power_treads_stat_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.caster_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.caster_handle_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.caster_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Ability)
}

inline void CMsgBotWorldState_Ability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){0u}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.cast_range_){0u}
    , decltype(_impl_.channel_time_){0}
    , decltype(_impl_.cooldown_remaining_){0}
    , decltype(_impl_.is_activated_){false}
    , decltype(_impl_.is_toggled_){false}
    , decltype(_impl_.is_in_ability_phase_){false}
    , decltype(_impl_.is_channeling_){false}
    , decltype(_impl_.is_stolen_){false}
    , decltype(_impl_.is_fully_castable_){false}
    , decltype(_impl_.is_combined_locked_){false}
    , decltype(_impl_.charges_){0u}
    , decltype(_impl_.secondary_charges_){0u}
    , decltype(_impl_.power_treads_stat_){-1}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.caster_handle_){4294967295u}
  };
}

CMsgBotWorldState_Ability::~CMsgBotWorldState_Ability() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Ability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_Ability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBotWorldState_Ability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_Ability::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Ability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_toggled_) -
        reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.is_toggled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.is_in_ability_phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.secondary_charges_) -
        reinterpret_cast<char*>(&_impl_.is_in_ability_phase_)) + sizeof(_impl_.secondary_charges_));
    _impl_.power_treads_stat_ = -1;
  }
  if (cached_has_bits & 0x00030000u) {
    _impl_.ability_id_ = -1;
    _impl_.caster_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Ability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 caster_handle = 5 [default = 4294967295];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_caster_handle(&has_bits);
          _impl_.caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cast_range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_cast_range(&has_bits);
          _impl_.cast_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float channel_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_channel_time(&has_bits);
          _impl_.channel_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cooldown_remaining = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_cooldown_remaining(&has_bits);
          _impl_.cooldown_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_activated = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_is_activated(&has_bits);
          _impl_.is_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_toggled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_is_toggled(&has_bits);
          _impl_.is_toggled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_in_ability_phase = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_in_ability_phase(&has_bits);
          _impl_.is_in_ability_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_channeling = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_is_channeling(&has_bits);
          _impl_.is_channeling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_stolen = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_is_stolen(&has_bits);
          _impl_.is_stolen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_fully_castable = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_is_fully_castable(&has_bits);
          _impl_.is_fully_castable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 charges = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_charges(&has_bits);
          _impl_.charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 secondary_charges = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_secondary_charges(&has_bits);
          _impl_.secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_combined_locked = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_combined_locked(&has_bits);
          _impl_.is_combined_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 power_treads_stat = 50 [default = -1];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_power_treads_stat(&has_bits);
          _impl_.power_treads_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_Ability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Ability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional int32 ability_id = 2 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot(), target);
  }

  // optional uint32 caster_handle = 5 [default = 4294967295];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_caster_handle(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 cast_range = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cast_range(), target);
  }

  // optional float channel_time = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_channel_time(), target);
  }

  // optional float cooldown_remaining = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_cooldown_remaining(), target);
  }

  // optional bool is_activated = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_is_activated(), target);
  }

  // optional bool is_toggled = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_is_toggled(), target);
  }

  // optional bool is_in_ability_phase = 22;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_is_in_ability_phase(), target);
  }

  // optional bool is_channeling = 23;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_is_channeling(), target);
  }

  // optional bool is_stolen = 24;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_is_stolen(), target);
  }

  // optional bool is_fully_castable = 25;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_is_fully_castable(), target);
  }

  // optional uint32 charges = 30;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_charges(), target);
  }

  // optional uint32 secondary_charges = 31;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_secondary_charges(), target);
  }

  // optional bool is_combined_locked = 40;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_is_combined_locked(), target);
  }

  // optional int32 power_treads_stat = 50 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_power_treads_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Ability)
  return target;
}

size_t CMsgBotWorldState_Ability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Ability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
    }

    // optional uint32 slot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 cast_range = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cast_range());
    }

    // optional float channel_time = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float cooldown_remaining = 12 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool is_activated = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool is_toggled = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_in_ability_phase = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_channeling = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_stolen = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_fully_castable = 25;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_combined_locked = 40;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 charges = 30;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_charges());
    }

    // optional uint32 secondary_charges = 31;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_secondary_charges());
    }

    // optional int32 power_treads_stat = 50 [default = -1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_power_treads_stat());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int32 ability_id = 2 [default = -1];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 caster_handle = 5 [default = 4294967295];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_caster_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_Ability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_Ability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_Ability::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_Ability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_Ability*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_Ability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Ability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cast_range_ = from._impl_.cast_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.channel_time_ = from._impl_.channel_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cooldown_remaining_ = from._impl_.cooldown_remaining_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_activated_ = from._impl_.is_activated_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_toggled_ = from._impl_.is_toggled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_in_ability_phase_ = from._impl_.is_in_ability_phase_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_channeling_ = from._impl_.is_channeling_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_stolen_ = from._impl_.is_stolen_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_fully_castable_ = from._impl_.is_fully_castable_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.is_combined_locked_ = from._impl_.is_combined_locked_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.charges_ = from._impl_.charges_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.secondary_charges_ = from._impl_.secondary_charges_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.power_treads_stat_ = from._impl_.power_treads_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.caster_handle_ = from._impl_.caster_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_Ability::CopyFrom(const CMsgBotWorldState_Ability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Ability::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Ability::InternalSwap(CMsgBotWorldState_Ability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Ability, _impl_.secondary_charges_)
      + sizeof(CMsgBotWorldState_Ability::_impl_.secondary_charges_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Ability, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
  swap(_impl_.power_treads_stat_, other->_impl_.power_treads_stat_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.caster_handle_, other->_impl_.caster_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Ability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[2]);
}

// ===================================================================

class CMsgBotWorldState_DroppedItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_DroppedItem>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_DroppedItem* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_DroppedItem::_Internal::location(const CMsgBotWorldState_DroppedItem* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.DroppedItem)
}
CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem(const CMsgBotWorldState_DroppedItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_DroppedItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.DroppedItem)
}

inline void CMsgBotWorldState_DroppedItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.item_id_){-1}
  };
}

CMsgBotWorldState_DroppedItem::~CMsgBotWorldState_DroppedItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.DroppedItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_DroppedItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_DroppedItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_DroppedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.DroppedItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    _impl_.item_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_DroppedItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_DroppedItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.DroppedItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.DroppedItem)
  return target;
}

size_t CMsgBotWorldState_DroppedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.DroppedItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBotWorldState.Vector location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional int32 item_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_DroppedItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_DroppedItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_DroppedItem::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_DroppedItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_DroppedItem*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_DroppedItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.DroppedItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_DroppedItem::CopyFrom(const CMsgBotWorldState_DroppedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.DroppedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_DroppedItem::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_DroppedItem::InternalSwap(CMsgBotWorldState_DroppedItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.location_, other->_impl_.location_);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_DroppedItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[3]);
}

// ===================================================================

class CMsgBotWorldState_RuneInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_RuneInfo>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_RuneInfo* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_since_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_RuneInfo::_Internal::location(const CMsgBotWorldState_RuneInfo* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.RuneInfo)
}
CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo(const CMsgBotWorldState_RuneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_RuneInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.time_since_seen_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_since_seen_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.time_since_seen_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.RuneInfo)
}

inline void CMsgBotWorldState_RuneInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0u}
    , decltype(_impl_.time_since_seen_){0}
  };
}

CMsgBotWorldState_RuneInfo::~CMsgBotWorldState_RuneInfo() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.RuneInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_RuneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_RuneInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_RuneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.RuneInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_since_seen_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.time_since_seen_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_RuneInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float time_since_seen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_time_since_seen(&has_bits);
          _impl_.time_since_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_RuneInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.RuneInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  // optional float time_since_seen = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_time_since_seen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.RuneInfo)
  return target;
}

size_t CMsgBotWorldState_RuneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.RuneInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgBotWorldState.Vector location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional uint32 status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

    // optional float time_since_seen = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_RuneInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_RuneInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_RuneInfo::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_RuneInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_RuneInfo*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_RuneInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.RuneInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_since_seen_ = from._impl_.time_since_seen_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_RuneInfo::CopyFrom(const CMsgBotWorldState_RuneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.RuneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_RuneInfo::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_RuneInfo::InternalSwap(CMsgBotWorldState_RuneInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, _impl_.time_since_seen_)
      + sizeof(CMsgBotWorldState_RuneInfo::_impl_.time_since_seen_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_RuneInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[4]);
}

// ===================================================================

class CMsgBotWorldState_TeleportInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_TeleportInfo>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_TeleportInfo* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_TeleportInfo::_Internal::location(const CMsgBotWorldState_TeleportInfo* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.TeleportInfo)
}
CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo(const CMsgBotWorldState_TeleportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_TeleportInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.time_remaining_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_remaining_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.time_remaining_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.TeleportInfo)
}

inline void CMsgBotWorldState_TeleportInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.time_remaining_){0}
  };
}

CMsgBotWorldState_TeleportInfo::~CMsgBotWorldState_TeleportInfo() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.TeleportInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_TeleportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_TeleportInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_TeleportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.TeleportInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_remaining_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.time_remaining_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_TeleportInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float time_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_time_remaining(&has_bits);
          _impl_.time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_TeleportInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.TeleportInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float time_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_time_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.TeleportInfo)
  return target;
}

size_t CMsgBotWorldState_TeleportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.TeleportInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgBotWorldState.Vector location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional float time_remaining = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_TeleportInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_TeleportInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_TeleportInfo::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_TeleportInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_TeleportInfo*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_TeleportInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.TeleportInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_remaining_ = from._impl_.time_remaining_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_TeleportInfo::CopyFrom(const CMsgBotWorldState_TeleportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.TeleportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_TeleportInfo::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_TeleportInfo::InternalSwap(CMsgBotWorldState_TeleportInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, _impl_.time_remaining_)
      + sizeof(CMsgBotWorldState_TeleportInfo::_impl_.time_remaining_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_TeleportInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[5]);
}

// ===================================================================

class CMsgBotWorldState_Modifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Modifier>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_remaining_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Modifier)
}
CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier(const CMsgBotWorldState_Modifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_Modifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.auxiliary_units_handles_){from._impl_.auxiliary_units_handles_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.stack_count_){}
    , decltype(_impl_.remaining_duration_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.ability_handle_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stack_count_, &from._impl_.stack_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.stack_count_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Modifier)
}

inline void CMsgBotWorldState_Modifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.auxiliary_units_handles_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.stack_count_){0u}
    , decltype(_impl_.remaining_duration_){0}
    , decltype(_impl_.handle_){0u}
    , decltype(_impl_.ability_handle_){4294967295u}
    , decltype(_impl_.ability_id_){-1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgBotWorldState_Modifier::~CMsgBotWorldState_Modifier() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Modifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_Modifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.auxiliary_units_handles_.~RepeatedField();
  _impl_.name_.Destroy();
}

void CMsgBotWorldState_Modifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_Modifier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Modifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.auxiliary_units_handles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.stack_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.handle_) -
        reinterpret_cast<char*>(&_impl_.stack_count_)) + sizeof(_impl_.handle_));
    _impl_.ability_handle_ = 4294967295u;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Modifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgBotWorldState.Modifier.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stack_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stack_count(&has_bits);
          _impl_.stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ability_handle(&has_bits);
          _impl_.ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float remaining_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_remaining_duration(&has_bits);
          _impl_.remaining_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 auxiliary_units_handles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_auxiliary_units_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_auxiliary_units_handles(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 handle = 7 [(.map_key) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_Modifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Modifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Modifier.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stack_count(), target);
  }

  // optional uint32 ability_handle = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_handle(), target);
  }

  // optional int32 ability_id = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ability_id(), target);
  }

  // optional float remaining_duration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_remaining_duration(), target);
  }

  // repeated uint32 auxiliary_units_handles = 6;
  for (int i = 0, n = this->_internal_auxiliary_units_handles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_auxiliary_units_handles(i), target);
  }

  // optional uint32 handle = 7 [(.map_key) = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Modifier)
  return target;
}

size_t CMsgBotWorldState_Modifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Modifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 auxiliary_units_handles = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.auxiliary_units_handles_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_auxiliary_units_handles_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 stack_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stack_count());
    }

    // optional float remaining_duration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 handle = 7 [(.map_key) = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
    }

    // optional uint32 ability_handle = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_handle());
    }

    // optional int32 ability_id = 4 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_Modifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_Modifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_Modifier::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_Modifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_Modifier*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_Modifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Modifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.auxiliary_units_handles_.MergeFrom(from._impl_.auxiliary_units_handles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stack_count_ = from._impl_.stack_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.remaining_duration_ = from._impl_.remaining_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ability_handle_ = from._impl_.ability_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_Modifier::CopyFrom(const CMsgBotWorldState_Modifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Modifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Modifier::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Modifier::InternalSwap(CMsgBotWorldState_Modifier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.auxiliary_units_handles_.InternalSwap(&other->_impl_.auxiliary_units_handles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Modifier, _impl_.handle_)
      + sizeof(CMsgBotWorldState_Modifier::_impl_.handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Modifier, _impl_.stack_count_)>(
          reinterpret_cast<char*>(&_impl_.stack_count_),
          reinterpret_cast<char*>(&other->_impl_.stack_count_));
  swap(_impl_.ability_handle_, other->_impl_.ability_handle_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Modifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[6]);
}

// ===================================================================

class CMsgBotWorldState_LinearProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_LinearProjectile>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_caster_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_caster_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_LinearProjectile* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgBotWorldState_Vector& velocity(const CMsgBotWorldState_LinearProjectile* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_LinearProjectile::_Internal::location(const CMsgBotWorldState_LinearProjectile* msg) {
  return *msg->_impl_.location_;
}
const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_LinearProjectile::_Internal::velocity(const CMsgBotWorldState_LinearProjectile* msg) {
  return *msg->_impl_.velocity_;
}
CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.LinearProjectile)
}
CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile(const CMsgBotWorldState_LinearProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_LinearProjectile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.caster_player_id_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.caster_unit_type_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.caster_handle_){}
    , decltype(_impl_.ability_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::CMsgBotWorldState_Vector(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_handle_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.ability_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.LinearProjectile)
}

inline void CMsgBotWorldState_LinearProjectile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.handle_){0u}
    , decltype(_impl_.caster_player_id_){0}
    , decltype(_impl_.radius_){0u}
    , decltype(_impl_.caster_unit_type_){0}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.caster_handle_){4294967295u}
    , decltype(_impl_.ability_handle_){4294967295u}
  };
}

CMsgBotWorldState_LinearProjectile::~CMsgBotWorldState_LinearProjectile() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.LinearProjectile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_LinearProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void CMsgBotWorldState_LinearProjectile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_LinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.LinearProjectile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.caster_unit_type_) -
        reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.caster_unit_type_));
    _impl_.ability_id_ = -1;
    _impl_.caster_handle_ = 4294967295u;
  }
  _impl_.ability_handle_ = 4294967295u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_LinearProjectile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 caster_handle = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_caster_handle(&has_bits);
          _impl_.caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 caster_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_caster_player_id(&has_bits);
          _impl_.caster_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 4 [default = 4294967295];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ability_handle(&has_bits);
          _impl_.ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radius = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_radius(&has_bits);
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_caster_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_LinearProjectile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.LinearProjectile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional uint32 caster_handle = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_caster_handle(), target);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_caster_player_id(), target);
  }

  // optional uint32 ability_handle = 4 [default = 4294967295];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_handle(), target);
  }

  // optional int32 ability_id = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ability_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBotWorldState.Vector velocity = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional uint32 radius = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_radius(), target);
  }

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_caster_unit_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.LinearProjectile)
  return target;
}

size_t CMsgBotWorldState_LinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.LinearProjectile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBotWorldState.Vector location = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .CMsgBotWorldState.Vector velocity = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
    }

    // optional int32 caster_player_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_caster_player_id());
    }

    // optional uint32 radius = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_radius());
    }

    // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_caster_unit_type());
    }

    // optional int32 ability_id = 5 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 caster_handle = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_caster_handle());
    }

  }
  // optional uint32 ability_handle = 4 [default = 4294967295];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_LinearProjectile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_LinearProjectile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_LinearProjectile::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_LinearProjectile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_LinearProjectile*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_LinearProjectile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.LinearProjectile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.caster_player_id_ = from._impl_.caster_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.radius_ = from._impl_.radius_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.caster_unit_type_ = from._impl_.caster_unit_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.caster_handle_ = from._impl_.caster_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_ability_handle(from._internal_ability_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_LinearProjectile::CopyFrom(const CMsgBotWorldState_LinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.LinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_LinearProjectile::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_LinearProjectile::InternalSwap(CMsgBotWorldState_LinearProjectile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, _impl_.caster_unit_type_)
      + sizeof(CMsgBotWorldState_LinearProjectile::_impl_.caster_unit_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.caster_handle_, other->_impl_.caster_handle_);
  swap(_impl_.ability_handle_, other->_impl_.ability_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_LinearProjectile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[7]);
}

// ===================================================================

class CMsgBotWorldState_TrackingProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_TrackingProjectile>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_caster_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_caster_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_TrackingProjectile* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_dodgeable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_attack(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_TrackingProjectile::_Internal::location(const CMsgBotWorldState_TrackingProjectile* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.TrackingProjectile)
}
CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile(const CMsgBotWorldState_TrackingProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_TrackingProjectile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.caster_player_id_){}
    , decltype(_impl_.velocity_){}
    , decltype(_impl_.is_dodgeable_){}
    , decltype(_impl_.is_attack_){}
    , decltype(_impl_.caster_unit_type_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.caster_handle_){}
    , decltype(_impl_.ability_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.caster_player_id_, &from._impl_.caster_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_handle_) -
    reinterpret_cast<char*>(&_impl_.caster_player_id_)) + sizeof(_impl_.ability_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.TrackingProjectile)
}

inline void CMsgBotWorldState_TrackingProjectile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.caster_player_id_){0}
    , decltype(_impl_.velocity_){0u}
    , decltype(_impl_.is_dodgeable_){false}
    , decltype(_impl_.is_attack_){false}
    , decltype(_impl_.caster_unit_type_){0}
    , decltype(_impl_.handle_){0u}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.caster_handle_){4294967295u}
    , decltype(_impl_.ability_handle_){4294967295u}
  };
}

CMsgBotWorldState_TrackingProjectile::~CMsgBotWorldState_TrackingProjectile() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.TrackingProjectile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_TrackingProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_TrackingProjectile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_TrackingProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.TrackingProjectile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.caster_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.handle_) -
        reinterpret_cast<char*>(&_impl_.caster_player_id_)) + sizeof(_impl_.handle_));
    _impl_.ability_id_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.caster_handle_ = 4294967295u;
    _impl_.ability_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_TrackingProjectile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 caster_handle = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_caster_handle(&has_bits);
          _impl_.caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 caster_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_caster_player_id(&has_bits);
          _impl_.caster_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ability_handle(&has_bits);
          _impl_.ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_velocity(&has_bits);
          _impl_.velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_dodgeable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_dodgeable(&has_bits);
          _impl_.is_dodgeable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_attack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_attack(&has_bits);
          _impl_.is_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_caster_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 handle = 10 [(.map_key) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_TrackingProjectile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.TrackingProjectile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 caster_handle = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_caster_handle(), target);
  }

  // optional int32 caster_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_caster_player_id(), target);
  }

  // optional uint32 ability_handle = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_handle(), target);
  }

  // optional int32 ability_id = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ability_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional uint32 velocity = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_velocity(), target);
  }

  // optional bool is_dodgeable = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_dodgeable(), target);
  }

  // optional bool is_attack = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_attack(), target);
  }

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_caster_unit_type(), target);
  }

  // optional uint32 handle = 10 [(.map_key) = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.TrackingProjectile)
  return target;
}

size_t CMsgBotWorldState_TrackingProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.TrackingProjectile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBotWorldState.Vector location = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional int32 caster_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_caster_player_id());
    }

    // optional uint32 velocity = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_velocity());
    }

    // optional bool is_dodgeable = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_attack = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_caster_unit_type());
    }

    // optional uint32 handle = 10 [(.map_key) = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
    }

    // optional int32 ability_id = 4 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 caster_handle = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_caster_handle());
    }

    // optional uint32 ability_handle = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_TrackingProjectile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_TrackingProjectile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_TrackingProjectile::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_TrackingProjectile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_TrackingProjectile*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_TrackingProjectile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.TrackingProjectile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.caster_player_id_ = from._impl_.caster_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.velocity_ = from._impl_.velocity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_dodgeable_ = from._impl_.is_dodgeable_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_attack_ = from._impl_.is_attack_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.caster_unit_type_ = from._impl_.caster_unit_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.caster_handle_ = from._impl_.caster_handle_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ability_handle_ = from._impl_.ability_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_TrackingProjectile::CopyFrom(const CMsgBotWorldState_TrackingProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.TrackingProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_TrackingProjectile::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_TrackingProjectile::InternalSwap(CMsgBotWorldState_TrackingProjectile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, _impl_.handle_)
      + sizeof(CMsgBotWorldState_TrackingProjectile::_impl_.handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.caster_handle_, other->_impl_.caster_handle_);
  swap(_impl_.ability_handle_, other->_impl_.ability_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_TrackingProjectile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[8]);
}

// ===================================================================

class CMsgBotWorldState_AvoidanceZone::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_AvoidanceZone>()._impl_._has_bits_);
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_AvoidanceZone* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_caster_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caster_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_AvoidanceZone::_Internal::location(const CMsgBotWorldState_AvoidanceZone* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.AvoidanceZone)
}
CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone(const CMsgBotWorldState_AvoidanceZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_AvoidanceZone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.caster_player_id_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.caster_unit_type_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.caster_handle_){}
    , decltype(_impl_.ability_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.caster_player_id_, &from._impl_.caster_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_handle_) -
    reinterpret_cast<char*>(&_impl_.caster_player_id_)) + sizeof(_impl_.ability_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.AvoidanceZone)
}

inline void CMsgBotWorldState_AvoidanceZone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.caster_player_id_){0}
    , decltype(_impl_.radius_){0u}
    , decltype(_impl_.caster_unit_type_){0}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.caster_handle_){4294967295u}
    , decltype(_impl_.ability_handle_){4294967295u}
  };
}

CMsgBotWorldState_AvoidanceZone::~CMsgBotWorldState_AvoidanceZone() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.AvoidanceZone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_AvoidanceZone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_AvoidanceZone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_AvoidanceZone::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.AvoidanceZone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.caster_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.caster_unit_type_) -
        reinterpret_cast<char*>(&_impl_.caster_player_id_)) + sizeof(_impl_.caster_unit_type_));
    _impl_.ability_id_ = -1;
    _impl_.caster_handle_ = 4294967295u;
    _impl_.ability_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_AvoidanceZone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgBotWorldState.Vector location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 caster_handle = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_caster_handle(&has_bits);
          _impl_.caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 caster_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_caster_player_id(&has_bits);
          _impl_.caster_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 4 [default = 4294967295];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ability_handle(&has_bits);
          _impl_.ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_radius(&has_bits);
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_caster_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_AvoidanceZone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.AvoidanceZone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgBotWorldState.Vector location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional uint32 caster_handle = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_caster_handle(), target);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_caster_player_id(), target);
  }

  // optional uint32 ability_handle = 4 [default = 4294967295];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_handle(), target);
  }

  // optional int32 ability_id = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ability_id(), target);
  }

  // optional uint32 radius = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_radius(), target);
  }

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_caster_unit_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.AvoidanceZone)
  return target;
}

size_t CMsgBotWorldState_AvoidanceZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.AvoidanceZone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgBotWorldState.Vector location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional int32 caster_player_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_caster_player_id());
    }

    // optional uint32 radius = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_radius());
    }

    // optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_caster_unit_type());
    }

    // optional int32 ability_id = 5 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 caster_handle = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_caster_handle());
    }

    // optional uint32 ability_handle = 4 [default = 4294967295];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_AvoidanceZone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_AvoidanceZone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_AvoidanceZone::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_AvoidanceZone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_AvoidanceZone*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_AvoidanceZone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.AvoidanceZone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.caster_player_id_ = from._impl_.caster_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.radius_ = from._impl_.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.caster_unit_type_ = from._impl_.caster_unit_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.caster_handle_ = from._impl_.caster_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ability_handle_ = from._impl_.ability_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_AvoidanceZone::CopyFrom(const CMsgBotWorldState_AvoidanceZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.AvoidanceZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_AvoidanceZone::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_AvoidanceZone::InternalSwap(CMsgBotWorldState_AvoidanceZone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, _impl_.caster_unit_type_)
      + sizeof(CMsgBotWorldState_AvoidanceZone::_impl_.caster_unit_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.caster_handle_, other->_impl_.caster_handle_);
  swap(_impl_.ability_handle_, other->_impl_.ability_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_AvoidanceZone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[9]);
}

// ===================================================================

class CMsgBotWorldState_Courier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Courier>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBotWorldState_Courier::CMsgBotWorldState_Courier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Courier)
}
CMsgBotWorldState_Courier::CMsgBotWorldState_Courier(const CMsgBotWorldState_Courier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_Courier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Courier)
}

inline void CMsgBotWorldState_Courier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){0u}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.state_){-1}
  };
}

CMsgBotWorldState_Courier::~CMsgBotWorldState_Courier() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Courier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_Courier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBotWorldState_Courier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_Courier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Courier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_id_) -
        reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.player_id_));
    _impl_.state_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Courier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_CourierState_IsValid(val))) {
            _internal_set_state(static_cast<::CMsgBotWorldState_CourierState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_Courier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Courier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // optional int32 player_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Courier)
  return target;
}

size_t CMsgBotWorldState_Courier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Courier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
    }

    // optional int32 player_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_Courier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_Courier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_Courier::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_Courier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_Courier*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_Courier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Courier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_Courier::CopyFrom(const CMsgBotWorldState_Courier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Courier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Courier::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Courier::InternalSwap(CMsgBotWorldState_Courier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Courier, _impl_.player_id_)
      + sizeof(CMsgBotWorldState_Courier::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Courier, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Courier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[10]);
}

// ===================================================================

class CMsgBotWorldState_EventAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventAbility>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_EventAbility* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_channel_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_EventAbility::_Internal::location(const CMsgBotWorldState_EventAbility* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventAbility)
}
CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility(const CMsgBotWorldState_EventAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_EventAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.is_channel_start_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.unit_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_handle_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.unit_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventAbility)
}

inline void CMsgBotWorldState_EventAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.is_channel_start_){false}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.unit_handle_){4294967295u}
  };
}

CMsgBotWorldState_EventAbility::~CMsgBotWorldState_EventAbility() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_EventAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_EventAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_EventAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_channel_start_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.is_channel_start_));
    _impl_.ability_id_ = -1;
    _impl_.unit_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unit_handle = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unit_handle(&has_bits);
          _impl_.unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_channel_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_channel_start(&has_bits);
          _impl_.is_channel_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_EventAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional uint32 unit_handle = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unit_handle(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional bool is_channel_start = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_channel_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventAbility)
  return target;
}

size_t CMsgBotWorldState_EventAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgBotWorldState.Vector location = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional int32 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional bool is_channel_start = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 unit_handle = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unit_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_EventAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_EventAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_EventAbility::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_EventAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_EventAbility*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_EventAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_channel_start_ = from._impl_.is_channel_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.unit_handle_ = from._impl_.unit_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_EventAbility::CopyFrom(const CMsgBotWorldState_EventAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventAbility::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventAbility::InternalSwap(CMsgBotWorldState_EventAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventAbility, _impl_.is_channel_start_)
      + sizeof(CMsgBotWorldState_EventAbility::_impl_.is_channel_start_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventAbility, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.unit_handle_, other->_impl_.unit_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[11]);
}

// ===================================================================

class CMsgBotWorldState_EventDamage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventDamage>()._impl_._has_bits_);
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_victim_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_victim_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attacker_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attacker_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventDamage)
}
CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage(const CMsgBotWorldState_EventDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_EventDamage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.victim_player_id_){}
    , decltype(_impl_.attacker_player_id_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.victim_unit_handle_){}
    , decltype(_impl_.attacker_unit_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.damage_, &from._impl_.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attacker_unit_handle_) -
    reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.attacker_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventDamage)
}

inline void CMsgBotWorldState_EventDamage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){0u}
    , decltype(_impl_.victim_player_id_){0}
    , decltype(_impl_.attacker_player_id_){0}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.victim_unit_handle_){4294967295u}
    , decltype(_impl_.attacker_unit_handle_){4294967295u}
  };
}

CMsgBotWorldState_EventDamage::~CMsgBotWorldState_EventDamage() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventDamage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_EventDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBotWorldState_EventDamage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_EventDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventDamage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attacker_player_id_) -
        reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.attacker_player_id_));
    _impl_.ability_id_ = -1;
    _impl_.victim_unit_handle_ = 4294967295u;
    _impl_.attacker_unit_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventDamage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 damage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_victim_player_id(&has_bits);
          _impl_.victim_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 victim_unit_handle = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_victim_unit_handle(&has_bits);
          _impl_.victim_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attacker_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_attacker_player_id(&has_bits);
          _impl_.attacker_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attacker_unit_handle = 5 [default = 4294967295];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_attacker_unit_handle(&has_bits);
          _impl_.attacker_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_EventDamage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventDamage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 damage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_damage(), target);
  }

  // optional int32 victim_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_victim_player_id(), target);
  }

  // optional uint32 victim_unit_handle = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_victim_unit_handle(), target);
  }

  // optional int32 attacker_player_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_attacker_player_id(), target);
  }

  // optional uint32 attacker_unit_handle = 5 [default = 4294967295];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attacker_unit_handle(), target);
  }

  // optional int32 ability_id = 6 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventDamage)
  return target;
}

size_t CMsgBotWorldState_EventDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventDamage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 damage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
    }

    // optional int32 victim_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_player_id());
    }

    // optional int32 attacker_player_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attacker_player_id());
    }

    // optional int32 ability_id = 6 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional uint32 victim_unit_handle = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim_unit_handle());
    }

    // optional uint32 attacker_unit_handle = 5 [default = 4294967295];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attacker_unit_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_EventDamage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_EventDamage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_EventDamage::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_EventDamage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_EventDamage*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_EventDamage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventDamage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.victim_player_id_ = from._impl_.victim_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.attacker_player_id_ = from._impl_.attacker_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.victim_unit_handle_ = from._impl_.victim_unit_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.attacker_unit_handle_ = from._impl_.attacker_unit_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_EventDamage::CopyFrom(const CMsgBotWorldState_EventDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventDamage::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventDamage::InternalSwap(CMsgBotWorldState_EventDamage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventDamage, _impl_.attacker_player_id_)
      + sizeof(CMsgBotWorldState_EventDamage::_impl_.attacker_player_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventDamage, _impl_.damage_)>(
          reinterpret_cast<char*>(&_impl_.damage_),
          reinterpret_cast<char*>(&other->_impl_.damage_));
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.victim_unit_handle_, other->_impl_.victim_unit_handle_);
  swap(_impl_.attacker_unit_handle_, other->_impl_.attacker_unit_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventDamage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[12]);
}

// ===================================================================

class CMsgBotWorldState_EventCourierKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventCourierKilled>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_courier_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_killer_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_killer_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventCourierKilled)
}
CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled(const CMsgBotWorldState_EventCourierKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_EventCourierKilled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.killer_player_id_){}
    , decltype(_impl_.courier_unit_handle_){}
    , decltype(_impl_.killer_unit_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.killer_unit_handle_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.killer_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventCourierKilled)
}

inline void CMsgBotWorldState_EventCourierKilled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.killer_player_id_){0}
    , decltype(_impl_.courier_unit_handle_){4294967295u}
    , decltype(_impl_.killer_unit_handle_){4294967295u}
  };
}

CMsgBotWorldState_EventCourierKilled::~CMsgBotWorldState_EventCourierKilled() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventCourierKilled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_EventCourierKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBotWorldState_EventCourierKilled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_EventCourierKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventCourierKilled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.killer_player_id_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.killer_player_id_));
    _impl_.courier_unit_handle_ = 4294967295u;
    _impl_.killer_unit_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventCourierKilled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 courier_unit_handle = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_courier_unit_handle(&has_bits);
          _impl_.courier_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 killer_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_killer_player_id(&has_bits);
          _impl_.killer_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 killer_unit_handle = 4 [default = 4294967295];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_killer_unit_handle(&has_bits);
          _impl_.killer_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_EventCourierKilled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventCourierKilled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 courier_unit_handle = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_courier_unit_handle(), target);
  }

  // optional int32 killer_player_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_killer_player_id(), target);
  }

  // optional uint32 killer_unit_handle = 4 [default = 4294967295];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_killer_unit_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventCourierKilled)
  return target;
}

size_t CMsgBotWorldState_EventCourierKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventCourierKilled)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional int32 killer_player_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_killer_player_id());
    }

    // optional uint32 courier_unit_handle = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_courier_unit_handle());
    }

    // optional uint32 killer_unit_handle = 4 [default = 4294967295];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killer_unit_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_EventCourierKilled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_EventCourierKilled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_EventCourierKilled::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_EventCourierKilled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_EventCourierKilled*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_EventCourierKilled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventCourierKilled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.killer_player_id_ = from._impl_.killer_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.courier_unit_handle_ = from._impl_.courier_unit_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.killer_unit_handle_ = from._impl_.killer_unit_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_EventCourierKilled::CopyFrom(const CMsgBotWorldState_EventCourierKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventCourierKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventCourierKilled::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventCourierKilled::InternalSwap(CMsgBotWorldState_EventCourierKilled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, _impl_.killer_player_id_)
      + sizeof(CMsgBotWorldState_EventCourierKilled::_impl_.killer_player_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
  swap(_impl_.courier_unit_handle_, other->_impl_.courier_unit_handle_);
  swap(_impl_.killer_unit_handle_, other->_impl_.killer_unit_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventCourierKilled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[13]);
}

// ===================================================================

class CMsgBotWorldState_EventRoshanKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventRoshanKilled>()._impl_._has_bits_);
  static void set_has_killer_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_killer_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventRoshanKilled)
}
CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled(const CMsgBotWorldState_EventRoshanKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_EventRoshanKilled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.killer_player_id_){}
    , decltype(_impl_.killer_unit_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.killer_player_id_, &from._impl_.killer_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.killer_unit_handle_) -
    reinterpret_cast<char*>(&_impl_.killer_player_id_)) + sizeof(_impl_.killer_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventRoshanKilled)
}

inline void CMsgBotWorldState_EventRoshanKilled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.killer_player_id_){0}
    , decltype(_impl_.killer_unit_handle_){4294967295u}
  };
}

CMsgBotWorldState_EventRoshanKilled::~CMsgBotWorldState_EventRoshanKilled() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventRoshanKilled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_EventRoshanKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBotWorldState_EventRoshanKilled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_EventRoshanKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventRoshanKilled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.killer_player_id_ = 0;
    _impl_.killer_unit_handle_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventRoshanKilled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 killer_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_killer_player_id(&has_bits);
          _impl_.killer_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 killer_unit_handle = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_killer_unit_handle(&has_bits);
          _impl_.killer_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_EventRoshanKilled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventRoshanKilled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 killer_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_killer_player_id(), target);
  }

  // optional uint32 killer_unit_handle = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_killer_unit_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventRoshanKilled)
  return target;
}

size_t CMsgBotWorldState_EventRoshanKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventRoshanKilled)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 killer_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_killer_player_id());
    }

    // optional uint32 killer_unit_handle = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killer_unit_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_EventRoshanKilled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_EventRoshanKilled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_EventRoshanKilled::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_EventRoshanKilled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_EventRoshanKilled*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_EventRoshanKilled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventRoshanKilled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.killer_player_id_ = from._impl_.killer_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.killer_unit_handle_ = from._impl_.killer_unit_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_EventRoshanKilled::CopyFrom(const CMsgBotWorldState_EventRoshanKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventRoshanKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventRoshanKilled::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventRoshanKilled::InternalSwap(CMsgBotWorldState_EventRoshanKilled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.killer_player_id_, other->_impl_.killer_player_id_);
  swap(_impl_.killer_unit_handle_, other->_impl_.killer_unit_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventRoshanKilled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[14]);
}

// ===================================================================

class CMsgBotWorldState_EventTree::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventTree>()._impl_._has_bits_);
  static void set_has_tree_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_respawned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_EventTree* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_EventTree::_Internal::location(const CMsgBotWorldState_EventTree* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventTree)
}
CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree(const CMsgBotWorldState_EventTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_EventTree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.tree_id_){}
    , decltype(_impl_.destroyed_){}
    , decltype(_impl_.respawned_){}
    , decltype(_impl_.delayed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.tree_id_, &from._impl_.tree_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delayed_) -
    reinterpret_cast<char*>(&_impl_.tree_id_)) + sizeof(_impl_.delayed_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventTree)
}

inline void CMsgBotWorldState_EventTree::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.tree_id_){0u}
    , decltype(_impl_.destroyed_){false}
    , decltype(_impl_.respawned_){false}
    , decltype(_impl_.delayed_){false}
  };
}

CMsgBotWorldState_EventTree::~CMsgBotWorldState_EventTree() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_EventTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_EventTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_EventTree::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.tree_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.delayed_) -
        reinterpret_cast<char*>(&_impl_.tree_id_)) + sizeof(_impl_.delayed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tree_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tree_id(&has_bits);
          _impl_.tree_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool destroyed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destroyed(&has_bits);
          _impl_.destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool respawned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_respawned(&has_bits);
          _impl_.respawned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool delayed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_delayed(&has_bits);
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_EventTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tree_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tree_id(), target);
  }

  // optional bool destroyed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_destroyed(), target);
  }

  // optional bool respawned = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_respawned(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional bool delayed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_delayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventTree)
  return target;
}

size_t CMsgBotWorldState_EventTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgBotWorldState.Vector location = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional uint32 tree_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tree_id());
    }

    // optional bool destroyed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool respawned = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool delayed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_EventTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_EventTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_EventTree::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_EventTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_EventTree*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_EventTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventTree)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tree_id_ = from._impl_.tree_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.destroyed_ = from._impl_.destroyed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.respawned_ = from._impl_.respawned_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.delayed_ = from._impl_.delayed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_EventTree::CopyFrom(const CMsgBotWorldState_EventTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventTree::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventTree::InternalSwap(CMsgBotWorldState_EventTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventTree, _impl_.delayed_)
      + sizeof(CMsgBotWorldState_EventTree::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventTree, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[15]);
}

// ===================================================================

class CMsgBotWorldState_Unit::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Unit>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Unit* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_alive(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bounding_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_facing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ground_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vision_range_daytime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_vision_range_nighttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_health_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_health_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_mana(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_mana_max(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mana_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_base_movement_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_current_movement_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_anim_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_anim_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_base_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_base_damage_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_bonus_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_attack_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_attack_range(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_attack_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_attack_anim_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_attack_acquisition_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_attack_projectile_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_attack_target_handle(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_attack_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attacks_per_second(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_last_attack_time(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_bounty_xp(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_bounty_gold_min(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_bounty_gold_max(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_is_channeling(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_active_ability_handle(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_is_attack_immune(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_is_blind(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_is_block_disabled(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_is_disarmed(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_is_dominated(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_is_evade_disabled(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_is_hexed(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_is_invisible(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_is_invulnerable(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_is_magic_immune(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_is_muted(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_is_nightmared(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_is_rooted(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_is_silenced(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_is_specially_deniable(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_is_stunned(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_is_unable_to_miss(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_has_scepter(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_is_specially_undeniable(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_ability_target_handle(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_ability_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_using_ability(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_primary_attribute(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_is_illusion(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_buyback_cost(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_buyback_cooldown(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_spell_amplification(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_armor(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_magic_resist(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_evasion(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_xp_needed_to_level(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_ability_points(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_reliable_gold(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_unreliable_gold(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_strength(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_agility(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_intelligence(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_remaining_lifespan(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_flying_courier(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_shrine_cooldown(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_is_shrine_healing(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Unit::_Internal::location(const CMsgBotWorldState_Unit* msg) {
  return *msg->_impl_.location_;
}
CMsgBotWorldState_Unit::CMsgBotWorldState_Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Unit)
}
CMsgBotWorldState_Unit::CMsgBotWorldState_Unit(const CMsgBotWorldState_Unit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState_Unit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.modifiers_){from._impl_.modifiers_}
    , decltype(_impl_.incoming_tracking_projectiles_){from._impl_.incoming_tracking_projectiles_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.attack_target_name_){}
    , decltype(_impl_.ability_target_name_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.unit_type_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.bounding_radius_){}
    , decltype(_impl_.facing_){}
    , decltype(_impl_.ground_height_){}
    , decltype(_impl_.vision_range_daytime_){}
    , decltype(_impl_.vision_range_nighttime_){}
    , decltype(_impl_.health_){}
    , decltype(_impl_.health_max_){}
    , decltype(_impl_.health_regen_){}
    , decltype(_impl_.mana_){}
    , decltype(_impl_.mana_max_){}
    , decltype(_impl_.mana_regen_){}
    , decltype(_impl_.base_movement_speed_){}
    , decltype(_impl_.current_movement_speed_){}
    , decltype(_impl_.anim_activity_){}
    , decltype(_impl_.anim_cycle_){}
    , decltype(_impl_.base_damage_){}
    , decltype(_impl_.base_damage_variance_){}
    , decltype(_impl_.bonus_damage_){}
    , decltype(_impl_.attack_damage_){}
    , decltype(_impl_.attack_range_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.attack_anim_point_){}
    , decltype(_impl_.attack_acquisition_range_){}
    , decltype(_impl_.attack_projectile_speed_){}
    , decltype(_impl_.is_alive_){}
    , decltype(_impl_.is_channeling_){}
    , decltype(_impl_.is_attack_immune_){}
    , decltype(_impl_.is_blind_){}
    , decltype(_impl_.bounty_xp_){}
    , decltype(_impl_.bounty_gold_min_){}
    , decltype(_impl_.bounty_gold_max_){}
    , decltype(_impl_.is_block_disabled_){}
    , decltype(_impl_.is_disarmed_){}
    , decltype(_impl_.is_dominated_){}
    , decltype(_impl_.is_evade_disabled_){}
    , decltype(_impl_.is_hexed_){}
    , decltype(_impl_.is_invisible_){}
    , decltype(_impl_.is_invulnerable_){}
    , decltype(_impl_.is_magic_immune_){}
    , decltype(_impl_.is_muted_){}
    , decltype(_impl_.is_nightmared_){}
    , decltype(_impl_.is_rooted_){}
    , decltype(_impl_.is_silenced_){}
    , decltype(_impl_.is_specially_deniable_){}
    , decltype(_impl_.is_stunned_){}
    , decltype(_impl_.is_unable_to_miss_){}
    , decltype(_impl_.has_scepter_){}
    , decltype(_impl_.action_type_){}
    , decltype(_impl_.primary_attribute_){}
    , decltype(_impl_.is_specially_undeniable_){}
    , decltype(_impl_.is_using_ability_){}
    , decltype(_impl_.is_illusion_){}
    , decltype(_impl_.flying_courier_){}
    , decltype(_impl_.respawn_time_){}
    , decltype(_impl_.buyback_cost_){}
    , decltype(_impl_.buyback_cooldown_){}
    , decltype(_impl_.spell_amplification_){}
    , decltype(_impl_.armor_){}
    , decltype(_impl_.magic_resist_){}
    , decltype(_impl_.evasion_){}
    , decltype(_impl_.xp_needed_to_level_){}
    , decltype(_impl_.ability_points_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.strength_){}
    , decltype(_impl_.agility_){}
    , decltype(_impl_.intelligence_){}
    , decltype(_impl_.remaining_lifespan_){}
    , decltype(_impl_.shrine_cooldown_){}
    , decltype(_impl_.is_shrine_healing_){}
    , decltype(_impl_.unreliable_gold_){}
    , decltype(_impl_.attack_target_handle_){}
    , decltype(_impl_.attacks_per_second_){}
    , decltype(_impl_.last_attack_time_){}
    , decltype(_impl_.active_ability_handle_){}
    , decltype(_impl_.ability_target_handle_){}
    , decltype(_impl_.reliable_gold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attack_target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attack_target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attack_target_name()) {
    _this->_impl_.attack_target_name_.Set(from._internal_attack_target_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ability_target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ability_target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ability_target_name()) {
    _this->_impl_.ability_target_name_.Set(from._internal_ability_target_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgBotWorldState_Vector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reliable_gold_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.reliable_gold_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Unit)
}

inline void CMsgBotWorldState_Unit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.modifiers_){arena}
    , decltype(_impl_.incoming_tracking_projectiles_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.attack_target_name_){}
    , decltype(_impl_.ability_target_name_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.handle_){0u}
    , decltype(_impl_.unit_type_){0}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.bounding_radius_){0}
    , decltype(_impl_.facing_){0}
    , decltype(_impl_.ground_height_){0u}
    , decltype(_impl_.vision_range_daytime_){0u}
    , decltype(_impl_.vision_range_nighttime_){0u}
    , decltype(_impl_.health_){0}
    , decltype(_impl_.health_max_){0}
    , decltype(_impl_.health_regen_){0}
    , decltype(_impl_.mana_){0}
    , decltype(_impl_.mana_max_){0}
    , decltype(_impl_.mana_regen_){0}
    , decltype(_impl_.base_movement_speed_){0}
    , decltype(_impl_.current_movement_speed_){0}
    , decltype(_impl_.anim_activity_){0}
    , decltype(_impl_.anim_cycle_){0}
    , decltype(_impl_.base_damage_){0}
    , decltype(_impl_.base_damage_variance_){0}
    , decltype(_impl_.bonus_damage_){0}
    , decltype(_impl_.attack_damage_){0}
    , decltype(_impl_.attack_range_){0}
    , decltype(_impl_.attack_speed_){0}
    , decltype(_impl_.attack_anim_point_){0}
    , decltype(_impl_.attack_acquisition_range_){0}
    , decltype(_impl_.attack_projectile_speed_){0}
    , decltype(_impl_.is_alive_){false}
    , decltype(_impl_.is_channeling_){false}
    , decltype(_impl_.is_attack_immune_){false}
    , decltype(_impl_.is_blind_){false}
    , decltype(_impl_.bounty_xp_){0u}
    , decltype(_impl_.bounty_gold_min_){0u}
    , decltype(_impl_.bounty_gold_max_){0u}
    , decltype(_impl_.is_block_disabled_){false}
    , decltype(_impl_.is_disarmed_){false}
    , decltype(_impl_.is_dominated_){false}
    , decltype(_impl_.is_evade_disabled_){false}
    , decltype(_impl_.is_hexed_){false}
    , decltype(_impl_.is_invisible_){false}
    , decltype(_impl_.is_invulnerable_){false}
    , decltype(_impl_.is_magic_immune_){false}
    , decltype(_impl_.is_muted_){false}
    , decltype(_impl_.is_nightmared_){false}
    , decltype(_impl_.is_rooted_){false}
    , decltype(_impl_.is_silenced_){false}
    , decltype(_impl_.is_specially_deniable_){false}
    , decltype(_impl_.is_stunned_){false}
    , decltype(_impl_.is_unable_to_miss_){false}
    , decltype(_impl_.has_scepter_){false}
    , decltype(_impl_.action_type_){0u}
    , decltype(_impl_.primary_attribute_){0u}
    , decltype(_impl_.is_specially_undeniable_){false}
    , decltype(_impl_.is_using_ability_){false}
    , decltype(_impl_.is_illusion_){false}
    , decltype(_impl_.flying_courier_){false}
    , decltype(_impl_.respawn_time_){0}
    , decltype(_impl_.buyback_cost_){0u}
    , decltype(_impl_.buyback_cooldown_){0}
    , decltype(_impl_.spell_amplification_){0}
    , decltype(_impl_.armor_){0}
    , decltype(_impl_.magic_resist_){0}
    , decltype(_impl_.evasion_){0}
    , decltype(_impl_.xp_needed_to_level_){0u}
    , decltype(_impl_.ability_points_){0u}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.strength_){0u}
    , decltype(_impl_.agility_){0u}
    , decltype(_impl_.intelligence_){0u}
    , decltype(_impl_.remaining_lifespan_){0}
    , decltype(_impl_.shrine_cooldown_){0}
    , decltype(_impl_.is_shrine_healing_){false}
    , decltype(_impl_.unreliable_gold_){-1}
    , decltype(_impl_.attack_target_handle_){4294967295u}
    , decltype(_impl_.attacks_per_second_){-1}
    , decltype(_impl_.last_attack_time_){-1}
    , decltype(_impl_.active_ability_handle_){4294967295u}
    , decltype(_impl_.ability_target_handle_){4294967295u}
    , decltype(_impl_.reliable_gold_){-1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attack_target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attack_target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ability_target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ability_target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgBotWorldState_Unit::~CMsgBotWorldState_Unit() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Unit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState_Unit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.items_.~RepeatedPtrField();
  _impl_.modifiers_.~RepeatedPtrField();
  _impl_.incoming_tracking_projectiles_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.attack_target_name_.Destroy();
  _impl_.ability_target_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgBotWorldState_Unit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState_Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Unit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abilities_.Clear();
  _impl_.items_.Clear();
  _impl_.modifiers_.Clear();
  _impl_.incoming_tracking_projectiles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attack_target_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ability_target_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.level_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.health_max_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.health_max_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.health_regen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.anim_cycle_) -
        reinterpret_cast<char*>(&_impl_.health_regen_)) + sizeof(_impl_.anim_cycle_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.base_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attack_acquisition_range_) -
        reinterpret_cast<char*>(&_impl_.base_damage_)) + sizeof(_impl_.attack_acquisition_range_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.attack_projectile_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bounty_gold_max_) -
        reinterpret_cast<char*>(&_impl_.attack_projectile_speed_)) + sizeof(_impl_.bounty_gold_max_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.is_block_disabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_magic_immune_) -
        reinterpret_cast<char*>(&_impl_.is_block_disabled_)) + sizeof(_impl_.is_magic_immune_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.is_muted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_scepter_) -
        reinterpret_cast<char*>(&_impl_.is_muted_)) + sizeof(_impl_.has_scepter_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.action_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.buyback_cost_) -
        reinterpret_cast<char*>(&_impl_.action_type_)) + sizeof(_impl_.buyback_cost_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.buyback_cooldown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_hits_) -
        reinterpret_cast<char*>(&_impl_.buyback_cooldown_)) + sizeof(_impl_.last_hits_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.denies_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_shrine_healing_) -
        reinterpret_cast<char*>(&_impl_.denies_)) + sizeof(_impl_.is_shrine_healing_));
  }
  if (cached_has_bits & 0x007f0000u) {
    _impl_.unreliable_gold_ = -1;
    _impl_.attack_target_handle_ = 4294967295u;
    _impl_.attacks_per_second_ = -1;
    _impl_.last_attack_time_ = -1;
    _impl_.active_ability_handle_ = 4294967295u;
    _impl_.ability_target_handle_ = 4294967295u;
    _impl_.reliable_gold_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Unit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&_impl_._has_bits_);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgBotWorldState.Unit.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_team_id(&_impl_._has_bits_);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_level(&_impl_._has_bits_);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_alive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_alive(&_impl_._has_bits_);
          _impl_.is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_player_id(&_impl_._has_bits_);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bounding_radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_bounding_radius(&_impl_._has_bits_);
          _impl_.bounding_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 facing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_facing(&_impl_._has_bits_);
          _impl_.facing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ground_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ground_height(&_impl_._has_bits_);
          _impl_.ground_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 vision_range_daytime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_vision_range_daytime(&_impl_._has_bits_);
          _impl_.vision_range_daytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 vision_range_nighttime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_vision_range_nighttime(&_impl_._has_bits_);
          _impl_.vision_range_nighttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 health = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_health(&_impl_._has_bits_);
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 health_max = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_health_max(&_impl_._has_bits_);
          _impl_.health_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float health_regen = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_health_regen(&_impl_._has_bits_);
          _impl_.health_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mana = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_mana(&_impl_._has_bits_);
          _impl_.mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mana_max = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_mana_max(&_impl_._has_bits_);
          _impl_.mana_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float mana_regen = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_mana_regen(&_impl_._has_bits_);
          _impl_.mana_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 base_movement_speed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_base_movement_speed(&_impl_._has_bits_);
          _impl_.base_movement_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 current_movement_speed = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_current_movement_speed(&_impl_._has_bits_);
          _impl_.current_movement_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 anim_activity = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_anim_activity(&_impl_._has_bits_);
          _impl_.anim_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float anim_cycle = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_anim_cycle(&_impl_._has_bits_);
          _impl_.anim_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 base_damage = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_base_damage(&_impl_._has_bits_);
          _impl_.base_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 base_damage_variance = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_base_damage_variance(&_impl_._has_bits_);
          _impl_.base_damage_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bonus_damage = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_bonus_damage(&_impl_._has_bits_);
          _impl_.bonus_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attack_damage = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_attack_damage(&_impl_._has_bits_);
          _impl_.attack_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attack_range = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_attack_range(&_impl_._has_bits_);
          _impl_.attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float attack_speed = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_attack_speed(&_impl_._has_bits_);
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float attack_anim_point = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_attack_anim_point(&_impl_._has_bits_);
          _impl_.attack_anim_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attack_acquisition_range = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_attack_acquisition_range(&_impl_._has_bits_);
          _impl_.attack_acquisition_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attack_projectile_speed = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_attack_projectile_speed(&_impl_._has_bits_);
          _impl_.attack_projectile_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attack_target_handle = 49 [default = 4294967295];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_attack_target_handle(&_impl_._has_bits_);
          _impl_.attack_target_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attacks_per_second = 50 [default = -1];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_attacks_per_second(&_impl_._has_bits_);
          _impl_.attacks_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float last_attack_time = 51 [default = -1];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_last_attack_time(&_impl_._has_bits_);
          _impl_.last_attack_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string attack_target_name = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attack_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgBotWorldState.Unit.attack_target_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bounty_xp = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_bounty_xp(&_impl_._has_bits_);
          _impl_.bounty_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bounty_gold_min = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_bounty_gold_min(&_impl_._has_bits_);
          _impl_.bounty_gold_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bounty_gold_max = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_bounty_gold_max(&_impl_._has_bits_);
          _impl_.bounty_gold_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_channeling = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_channeling(&_impl_._has_bits_);
          _impl_.is_channeling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_ability_handle = 66 [default = 4294967295];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_active_ability_handle(&_impl_._has_bits_);
          _impl_.active_ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_attack_immune = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_attack_immune(&_impl_._has_bits_);
          _impl_.is_attack_immune_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_blind = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_blind(&_impl_._has_bits_);
          _impl_.is_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_block_disabled = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_block_disabled(&_impl_._has_bits_);
          _impl_.is_block_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_disarmed = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_disarmed(&_impl_._has_bits_);
          _impl_.is_disarmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_dominated = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_dominated(&_impl_._has_bits_);
          _impl_.is_dominated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_evade_disabled = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_evade_disabled(&_impl_._has_bits_);
          _impl_.is_evade_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_hexed = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_hexed(&_impl_._has_bits_);
          _impl_.is_hexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_invisible = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_invisible(&_impl_._has_bits_);
          _impl_.is_invisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_invulnerable = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_invulnerable(&_impl_._has_bits_);
          _impl_.is_invulnerable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_magic_immune = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_magic_immune(&_impl_._has_bits_);
          _impl_.is_magic_immune_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_muted = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_muted(&_impl_._has_bits_);
          _impl_.is_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_nightmared = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_nightmared(&_impl_._has_bits_);
          _impl_.is_nightmared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rooted = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_is_rooted(&_impl_._has_bits_);
          _impl_.is_rooted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_silenced = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_is_silenced(&_impl_._has_bits_);
          _impl_.is_silenced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_specially_deniable = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_is_specially_deniable(&_impl_._has_bits_);
          _impl_.is_specially_deniable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_stunned = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_stunned(&_impl_._has_bits_);
          _impl_.is_stunned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_unable_to_miss = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_is_unable_to_miss(&_impl_._has_bits_);
          _impl_.is_unable_to_miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_scepter = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_has_scepter(&_impl_._has_bits_);
          _impl_.has_scepter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<722>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<730>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_modifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<738>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_incoming_tracking_projectiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<746>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_specially_undeniable = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_is_specially_undeniable(&_impl_._has_bits_);
          _impl_.is_specially_undeniable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 action_type = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_action_type(&_impl_._has_bits_);
          _impl_.action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_target_handle = 101 [default = 4294967295];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ability_target_handle(&_impl_._has_bits_);
          _impl_.ability_target_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_using_ability = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_using_ability(&_impl_._has_bits_);
          _impl_.is_using_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ability_target_name = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ability_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgBotWorldState.Unit.ability_target_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 primary_attribute = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_primary_attribute(&_impl_._has_bits_);
          _impl_.primary_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_illusion = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_illusion(&_impl_._has_bits_);
          _impl_.is_illusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float respawn_time = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_respawn_time(&_impl_._has_bits_);
          _impl_.respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 buyback_cost = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_buyback_cost(&_impl_._has_bits_);
          _impl_.buyback_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float buyback_cooldown = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_buyback_cooldown(&_impl_._has_bits_);
          _impl_.buyback_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float spell_amplification = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_spell_amplification(&_impl_._has_bits_);
          _impl_.spell_amplification_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float armor = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_armor(&_impl_._has_bits_);
          _impl_.armor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float magic_resist = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_magic_resist(&_impl_._has_bits_);
          _impl_.magic_resist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float evasion = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_evasion(&_impl_._has_bits_);
          _impl_.evasion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_needed_to_level = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_xp_needed_to_level(&_impl_._has_bits_);
          _impl_.xp_needed_to_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_points = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_ability_points(&_impl_._has_bits_);
          _impl_.ability_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reliable_gold = 122 [default = -1];
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_reliable_gold(&_impl_._has_bits_);
          _impl_.reliable_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 unreliable_gold = 123 [default = -1];
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_unreliable_gold(&_impl_._has_bits_);
          _impl_.unreliable_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_hits = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_last_hits(&_impl_._has_bits_);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_denies(&_impl_._has_bits_);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_net_worth(&_impl_._has_bits_);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 strength = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_strength(&_impl_._has_bits_);
          _impl_.strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 agility = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_agility(&_impl_._has_bits_);
          _impl_.agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 intelligence = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_intelligence(&_impl_._has_bits_);
          _impl_.intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float remaining_lifespan = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_remaining_lifespan(&_impl_._has_bits_);
          _impl_.remaining_lifespan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool flying_courier = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_flying_courier(&_impl_._has_bits_);
          _impl_.flying_courier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float shrine_cooldown = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_shrine_cooldown(&_impl_._has_bits_);
          _impl_.shrine_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_shrine_healing = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_is_shrine_healing(&_impl_._has_bits_);
          _impl_.is_shrine_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState_Unit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Unit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_unit_type(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Unit.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id(), target);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_alive = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_alive(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_player_id(), target);
  }

  // optional int32 bounding_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_bounding_radius(), target);
  }

  // optional int32 facing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_facing(), target);
  }

  // optional uint32 ground_height = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ground_height(), target);
  }

  // optional uint32 vision_range_daytime = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_vision_range_daytime(), target);
  }

  // optional uint32 vision_range_nighttime = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_vision_range_nighttime(), target);
  }

  // optional int32 health = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_health(), target);
  }

  // optional int32 health_max = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_health_max(), target);
  }

  // optional float health_regen = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_health_regen(), target);
  }

  // optional int32 mana = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_mana(), target);
  }

  // optional int32 mana_max = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_mana_max(), target);
  }

  // optional float mana_regen = 27;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_mana_regen(), target);
  }

  // optional int32 base_movement_speed = 30;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_base_movement_speed(), target);
  }

  // optional int32 current_movement_speed = 31;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_current_movement_speed(), target);
  }

  // optional int32 anim_activity = 35;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_anim_activity(), target);
  }

  // optional float anim_cycle = 36;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(36, this->_internal_anim_cycle(), target);
  }

  // optional int32 base_damage = 40;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_base_damage(), target);
  }

  // optional int32 base_damage_variance = 41;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_base_damage_variance(), target);
  }

  // optional int32 bonus_damage = 42;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(42, this->_internal_bonus_damage(), target);
  }

  // optional int32 attack_damage = 43;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_attack_damage(), target);
  }

  // optional int32 attack_range = 44;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_attack_range(), target);
  }

  // optional float attack_speed = 45;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(45, this->_internal_attack_speed(), target);
  }

  // optional float attack_anim_point = 46;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(46, this->_internal_attack_anim_point(), target);
  }

  // optional int32 attack_acquisition_range = 47;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_attack_acquisition_range(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 attack_projectile_speed = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_attack_projectile_speed(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 attack_target_handle = 49 [default = 4294967295];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(49, this->_internal_attack_target_handle(), target);
  }

  // optional int32 attacks_per_second = 50 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_attacks_per_second(), target);
  }

  // optional float last_attack_time = 51 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(51, this->_internal_last_attack_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string attack_target_name = 52;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attack_target_name().data(), static_cast<int>(this->_internal_attack_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Unit.attack_target_name");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_attack_target_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 bounty_xp = 60;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(60, this->_internal_bounty_xp(), target);
  }

  // optional uint32 bounty_gold_min = 61;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(61, this->_internal_bounty_gold_min(), target);
  }

  // optional uint32 bounty_gold_max = 62;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(62, this->_internal_bounty_gold_max(), target);
  }

  // optional bool is_channeling = 65;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_is_channeling(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 active_ability_handle = 66 [default = 4294967295];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(66, this->_internal_active_ability_handle(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_attack_immune = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(70, this->_internal_is_attack_immune(), target);
  }

  // optional bool is_blind = 71;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(71, this->_internal_is_blind(), target);
  }

  // optional bool is_block_disabled = 72;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(72, this->_internal_is_block_disabled(), target);
  }

  // optional bool is_disarmed = 73;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_is_disarmed(), target);
  }

  // optional bool is_dominated = 74;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(74, this->_internal_is_dominated(), target);
  }

  // optional bool is_evade_disabled = 75;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(75, this->_internal_is_evade_disabled(), target);
  }

  // optional bool is_hexed = 76;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(76, this->_internal_is_hexed(), target);
  }

  // optional bool is_invisible = 77;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(77, this->_internal_is_invisible(), target);
  }

  // optional bool is_invulnerable = 78;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(78, this->_internal_is_invulnerable(), target);
  }

  // optional bool is_magic_immune = 79;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(79, this->_internal_is_magic_immune(), target);
  }

  // optional bool is_muted = 80;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(80, this->_internal_is_muted(), target);
  }

  // optional bool is_nightmared = 82;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(82, this->_internal_is_nightmared(), target);
  }

  // optional bool is_rooted = 83;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(83, this->_internal_is_rooted(), target);
  }

  // optional bool is_silenced = 84;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(84, this->_internal_is_silenced(), target);
  }

  // optional bool is_specially_deniable = 85;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(85, this->_internal_is_specially_deniable(), target);
  }

  // optional bool is_stunned = 86;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(86, this->_internal_is_stunned(), target);
  }

  // optional bool is_unable_to_miss = 87;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(87, this->_internal_is_unable_to_miss(), target);
  }

  // optional bool has_scepter = 88;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(88, this->_internal_has_scepter(), target);
  }

  // repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(90, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(91, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_modifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(92, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incoming_tracking_projectiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_incoming_tracking_projectiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(93, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_specially_undeniable = 94;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(94, this->_internal_is_specially_undeniable(), target);
  }

  // optional uint32 action_type = 100;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(100, this->_internal_action_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 ability_target_handle = 101 [default = 4294967295];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(101, this->_internal_ability_target_handle(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_using_ability = 102;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(102, this->_internal_is_using_ability(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string ability_target_name = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ability_target_name().data(), static_cast<int>(this->_internal_ability_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Unit.ability_target_name");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_ability_target_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 primary_attribute = 110;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(110, this->_internal_primary_attribute(), target);
  }

  // optional bool is_illusion = 111;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(111, this->_internal_is_illusion(), target);
  }

  // optional float respawn_time = 112;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(112, this->_internal_respawn_time(), target);
  }

  // optional uint32 buyback_cost = 113;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(113, this->_internal_buyback_cost(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float buyback_cooldown = 114;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(114, this->_internal_buyback_cooldown(), target);
  }

  // optional float spell_amplification = 115;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(115, this->_internal_spell_amplification(), target);
  }

  // optional float armor = 116;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(116, this->_internal_armor(), target);
  }

  // optional float magic_resist = 117;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(117, this->_internal_magic_resist(), target);
  }

  // optional float evasion = 118;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(118, this->_internal_evasion(), target);
  }

  // optional uint32 xp_needed_to_level = 120;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(120, this->_internal_xp_needed_to_level(), target);
  }

  // optional uint32 ability_points = 121;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(121, this->_internal_ability_points(), target);
  }

  // optional int32 reliable_gold = 122 [default = -1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(122, this->_internal_reliable_gold(), target);
  }

  // optional int32 unreliable_gold = 123 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(123, this->_internal_unreliable_gold(), target);
  }

  // optional uint32 last_hits = 124;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(124, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 125;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(125, this->_internal_denies(), target);
  }

  // optional uint32 net_worth = 126;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(126, this->_internal_net_worth(), target);
  }

  // optional uint32 strength = 127;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(127, this->_internal_strength(), target);
  }

  // optional uint32 agility = 128;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(128, this->_internal_agility(), target);
  }

  // optional uint32 intelligence = 129;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(129, this->_internal_intelligence(), target);
  }

  // optional float remaining_lifespan = 130;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(130, this->_internal_remaining_lifespan(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool flying_courier = 140;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(140, this->_internal_flying_courier(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float shrine_cooldown = 150;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(150, this->_internal_shrine_cooldown(), target);
  }

  // optional bool is_shrine_healing = 151;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(151, this->_internal_is_shrine_healing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Unit)
  return target;
}

size_t CMsgBotWorldState_Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Unit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
  total_size += 2UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
  total_size += 2UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
  total_size += 2UL * this->_internal_modifiers_size();
  for (const auto& msg : this->_impl_.modifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
  total_size += 2UL * this->_internal_incoming_tracking_projectiles_size();
  for (const auto& msg : this->_impl_.incoming_tracking_projectiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string attack_target_name = 52;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attack_target_name());
    }

    // optional string ability_target_name = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ability_target_name());
    }

    // optional .CMsgBotWorldState.Vector location = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
    }

    // optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_unit_type());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 level = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 player_id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 bounding_radius = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bounding_radius());
    }

    // optional int32 facing = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_facing());
    }

    // optional uint32 ground_height = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ground_height());
    }

    // optional uint32 vision_range_daytime = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vision_range_daytime());
    }

    // optional uint32 vision_range_nighttime = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_vision_range_nighttime());
    }

    // optional int32 health = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_health());
    }

    // optional int32 health_max = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_health_max());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float health_regen = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 mana = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_mana());
    }

    // optional int32 mana_max = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_mana_max());
    }

    // optional float mana_regen = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 base_movement_speed = 30;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_base_movement_speed());
    }

    // optional int32 current_movement_speed = 31;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_current_movement_speed());
    }

    // optional int32 anim_activity = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_anim_activity());
    }

    // optional float anim_cycle = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 base_damage = 40;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_base_damage());
    }

    // optional int32 base_damage_variance = 41;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_base_damage_variance());
    }

    // optional int32 bonus_damage = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bonus_damage());
    }

    // optional int32 attack_damage = 43;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_attack_damage());
    }

    // optional int32 attack_range = 44;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_attack_range());
    }

    // optional float attack_speed = 45;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float attack_anim_point = 46;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional int32 attack_acquisition_range = 47;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_attack_acquisition_range());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 attack_projectile_speed = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_attack_projectile_speed());
    }

    // optional bool is_alive = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_channeling = 65;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool is_attack_immune = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool is_blind = 71;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional uint32 bounty_xp = 60;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bounty_xp());
    }

    // optional uint32 bounty_gold_min = 61;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bounty_gold_min());
    }

    // optional uint32 bounty_gold_max = 62;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bounty_gold_max());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_block_disabled = 72;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_disarmed = 73;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_dominated = 74;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_evade_disabled = 75;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_hexed = 76;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool is_invisible = 77;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool is_invulnerable = 78;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_magic_immune = 79;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_muted = 80;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_nightmared = 82;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool is_rooted = 83;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool is_silenced = 84;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool is_specially_deniable = 85;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool is_stunned = 86;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool is_unable_to_miss = 87;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool has_scepter = 88;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 action_type = 100;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_action_type());
    }

    // optional uint32 primary_attribute = 110;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_primary_attribute());
    }

    // optional bool is_specially_undeniable = 94;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_using_ability = 102;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_illusion = 111;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool flying_courier = 140;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional float respawn_time = 112;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 buyback_cost = 113;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_buyback_cost());
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float buyback_cooldown = 114;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float spell_amplification = 115;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float armor = 116;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float magic_resist = 117;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float evasion = 118;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional uint32 xp_needed_to_level = 120;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_xp_needed_to_level());
    }

    // optional uint32 ability_points = 121;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ability_points());
    }

    // optional uint32 last_hits = 124;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 denies = 125;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional uint32 net_worth = 126;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 strength = 127;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_strength());
    }

    // optional uint32 agility = 128;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_agility());
    }

    // optional uint32 intelligence = 129;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_intelligence());
    }

    // optional float remaining_lifespan = 130;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float shrine_cooldown = 150;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional bool is_shrine_healing = 151;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional int32 unreliable_gold = 123 [default = -1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_unreliable_gold());
    }

    // optional uint32 attack_target_handle = 49 [default = 4294967295];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_attack_target_handle());
    }

    // optional int32 attacks_per_second = 50 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_attacks_per_second());
    }

    // optional float last_attack_time = 51 [default = -1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional uint32 active_ability_handle = 66 [default = 4294967295];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_active_ability_handle());
    }

    // optional uint32 ability_target_handle = 101 [default = 4294967295];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ability_target_handle());
    }

    // optional int32 reliable_gold = 122 [default = -1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_reliable_gold());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState_Unit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState_Unit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState_Unit::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState_Unit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState_Unit*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState_Unit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Unit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.modifiers_.MergeFrom(from._impl_.modifiers_);
  _this->_impl_.incoming_tracking_projectiles_.MergeFrom(from._impl_.incoming_tracking_projectiles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attack_target_name(from._internal_attack_target_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ability_target_name(from._internal_ability_target_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.unit_type_ = from._impl_.unit_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bounding_radius_ = from._impl_.bounding_radius_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.facing_ = from._impl_.facing_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ground_height_ = from._impl_.ground_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.vision_range_daytime_ = from._impl_.vision_range_daytime_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.vision_range_nighttime_ = from._impl_.vision_range_nighttime_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.health_ = from._impl_.health_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.health_max_ = from._impl_.health_max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.health_regen_ = from._impl_.health_regen_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.mana_ = from._impl_.mana_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.mana_max_ = from._impl_.mana_max_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.mana_regen_ = from._impl_.mana_regen_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.base_movement_speed_ = from._impl_.base_movement_speed_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.current_movement_speed_ = from._impl_.current_movement_speed_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.anim_activity_ = from._impl_.anim_activity_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.anim_cycle_ = from._impl_.anim_cycle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.base_damage_ = from._impl_.base_damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.base_damage_variance_ = from._impl_.base_damage_variance_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.bonus_damage_ = from._impl_.bonus_damage_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.attack_damage_ = from._impl_.attack_damage_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.attack_range_ = from._impl_.attack_range_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.attack_speed_ = from._impl_.attack_speed_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.attack_anim_point_ = from._impl_.attack_anim_point_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.attack_acquisition_range_ = from._impl_.attack_acquisition_range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.attack_projectile_speed_ = from._impl_.attack_projectile_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_alive_ = from._impl_.is_alive_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_channeling_ = from._impl_.is_channeling_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_attack_immune_ = from._impl_.is_attack_immune_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_blind_ = from._impl_.is_blind_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bounty_xp_ = from._impl_.bounty_xp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bounty_gold_min_ = from._impl_.bounty_gold_min_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bounty_gold_max_ = from._impl_.bounty_gold_max_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_block_disabled_ = from._impl_.is_block_disabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_disarmed_ = from._impl_.is_disarmed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_dominated_ = from._impl_.is_dominated_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_evade_disabled_ = from._impl_.is_evade_disabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.is_hexed_ = from._impl_.is_hexed_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.is_invisible_ = from._impl_.is_invisible_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_invulnerable_ = from._impl_.is_invulnerable_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.is_magic_immune_ = from._impl_.is_magic_immune_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.is_muted_ = from._impl_.is_muted_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.is_nightmared_ = from._impl_.is_nightmared_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.is_rooted_ = from._impl_.is_rooted_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.is_silenced_ = from._impl_.is_silenced_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.is_specially_deniable_ = from._impl_.is_specially_deniable_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.is_stunned_ = from._impl_.is_stunned_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.is_unable_to_miss_ = from._impl_.is_unable_to_miss_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.has_scepter_ = from._impl_.has_scepter_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.action_type_ = from._impl_.action_type_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.primary_attribute_ = from._impl_.primary_attribute_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.is_specially_undeniable_ = from._impl_.is_specially_undeniable_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.is_using_ability_ = from._impl_.is_using_ability_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.is_illusion_ = from._impl_.is_illusion_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.flying_courier_ = from._impl_.flying_courier_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.respawn_time_ = from._impl_.respawn_time_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.buyback_cost_ = from._impl_.buyback_cost_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.buyback_cooldown_ = from._impl_.buyback_cooldown_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.spell_amplification_ = from._impl_.spell_amplification_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.armor_ = from._impl_.armor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.magic_resist_ = from._impl_.magic_resist_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.evasion_ = from._impl_.evasion_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.xp_needed_to_level_ = from._impl_.xp_needed_to_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ability_points_ = from._impl_.ability_points_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.strength_ = from._impl_.strength_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.agility_ = from._impl_.agility_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.intelligence_ = from._impl_.intelligence_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.remaining_lifespan_ = from._impl_.remaining_lifespan_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.shrine_cooldown_ = from._impl_.shrine_cooldown_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.is_shrine_healing_ = from._impl_.is_shrine_healing_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.unreliable_gold_ = from._impl_.unreliable_gold_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.attack_target_handle_ = from._impl_.attack_target_handle_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.attacks_per_second_ = from._impl_.attacks_per_second_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.last_attack_time_ = from._impl_.last_attack_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.active_ability_handle_ = from._impl_.active_ability_handle_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ability_target_handle_ = from._impl_.ability_target_handle_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.reliable_gold_ = from._impl_.reliable_gold_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState_Unit::CopyFrom(const CMsgBotWorldState_Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Unit::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Unit::InternalSwap(CMsgBotWorldState_Unit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.modifiers_.InternalSwap(&other->_impl_.modifiers_);
  _impl_.incoming_tracking_projectiles_.InternalSwap(&other->_impl_.incoming_tracking_projectiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attack_target_name_, lhs_arena,
      &other->_impl_.attack_target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ability_target_name_, lhs_arena,
      &other->_impl_.ability_target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Unit, _impl_.is_shrine_healing_)
      + sizeof(CMsgBotWorldState_Unit::_impl_.is_shrine_healing_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Unit, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
  swap(_impl_.unreliable_gold_, other->_impl_.unreliable_gold_);
  swap(_impl_.attack_target_handle_, other->_impl_.attack_target_handle_);
  swap(_impl_.attacks_per_second_, other->_impl_.attacks_per_second_);
  swap(_impl_.last_attack_time_, other->_impl_.last_attack_time_);
  swap(_impl_.active_ability_handle_, other->_impl_.active_ability_handle_);
  swap(_impl_.ability_target_handle_, other->_impl_.ability_target_handle_);
  swap(_impl_.reliable_gold_, other->_impl_.reliable_gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Unit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[16]);
}

// ===================================================================

class CMsgBotWorldState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dota_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero_pick_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_of_day(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_glyph_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_glyph_cooldown_enemy(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgBotWorldState::CMsgBotWorldState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState)
}
CMsgBotWorldState::CMsgBotWorldState(const CMsgBotWorldState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotWorldState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.units_){from._impl_.units_}
    , decltype(_impl_.dropped_items_){from._impl_.dropped_items_}
    , decltype(_impl_.rune_infos_){from._impl_.rune_infos_}
    , decltype(_impl_.incoming_teleports_){from._impl_.incoming_teleports_}
    , decltype(_impl_.linear_projectiles_){from._impl_.linear_projectiles_}
    , decltype(_impl_.avoidance_zones_){from._impl_.avoidance_zones_}
    , decltype(_impl_.couriers_){from._impl_.couriers_}
    , decltype(_impl_.ability_events_){from._impl_.ability_events_}
    , decltype(_impl_.damage_events_){from._impl_.damage_events_}
    , decltype(_impl_.courier_killed_events_){from._impl_.courier_killed_events_}
    , decltype(_impl_.roshan_killed_events_){from._impl_.roshan_killed_events_}
    , decltype(_impl_.tree_events_){from._impl_.tree_events_}
    , decltype(_impl_.dropped_items_deltas_){from._impl_.dropped_items_deltas_}
    , decltype(_impl_.rune_infos_deltas_){from._impl_.rune_infos_deltas_}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.dota_time_){}
    , decltype(_impl_.game_state_){}
    , decltype(_impl_.hero_pick_state_){}
    , decltype(_impl_.time_of_day_){}
    , decltype(_impl_.glyph_cooldown_){}
    , decltype(_impl_.glyph_cooldown_enemy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.glyph_cooldown_enemy_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.glyph_cooldown_enemy_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState)
}

inline void CMsgBotWorldState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.units_){arena}
    , decltype(_impl_.dropped_items_){arena}
    , decltype(_impl_.rune_infos_){arena}
    , decltype(_impl_.incoming_teleports_){arena}
    , decltype(_impl_.linear_projectiles_){arena}
    , decltype(_impl_.avoidance_zones_){arena}
    , decltype(_impl_.couriers_){arena}
    , decltype(_impl_.ability_events_){arena}
    , decltype(_impl_.damage_events_){arena}
    , decltype(_impl_.courier_killed_events_){arena}
    , decltype(_impl_.roshan_killed_events_){arena}
    , decltype(_impl_.tree_events_){arena}
    , decltype(_impl_.dropped_items_deltas_){arena}
    , decltype(_impl_.rune_infos_deltas_){arena}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.game_time_){0}
    , decltype(_impl_.dota_time_){0}
    , decltype(_impl_.game_state_){0u}
    , decltype(_impl_.hero_pick_state_){0u}
    , decltype(_impl_.time_of_day_){0}
    , decltype(_impl_.glyph_cooldown_){0}
    , decltype(_impl_.glyph_cooldown_enemy_){0}
  };
}

CMsgBotWorldState::~CMsgBotWorldState() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotWorldState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.units_.~RepeatedPtrField();
  _impl_.dropped_items_.~RepeatedPtrField();
  _impl_.rune_infos_.~RepeatedPtrField();
  _impl_.incoming_teleports_.~RepeatedPtrField();
  _impl_.linear_projectiles_.~RepeatedPtrField();
  _impl_.avoidance_zones_.~RepeatedPtrField();
  _impl_.couriers_.~RepeatedPtrField();
  _impl_.ability_events_.~RepeatedPtrField();
  _impl_.damage_events_.~RepeatedPtrField();
  _impl_.courier_killed_events_.~RepeatedPtrField();
  _impl_.roshan_killed_events_.~RepeatedPtrField();
  _impl_.tree_events_.~RepeatedPtrField();
  _impl_.dropped_items_deltas_.~RepeatedField();
  _impl_.rune_infos_deltas_.~RepeatedField();
}

void CMsgBotWorldState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotWorldState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.units_.Clear();
  _impl_.dropped_items_.Clear();
  _impl_.rune_infos_.Clear();
  _impl_.incoming_teleports_.Clear();
  _impl_.linear_projectiles_.Clear();
  _impl_.avoidance_zones_.Clear();
  _impl_.couriers_.Clear();
  _impl_.ability_events_.Clear();
  _impl_.damage_events_.Clear();
  _impl_.courier_killed_events_.Clear();
  _impl_.roshan_killed_events_.Clear();
  _impl_.tree_events_.Clear();
  _impl_.dropped_items_deltas_.Clear();
  _impl_.rune_infos_deltas_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.glyph_cooldown_enemy_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.glyph_cooldown_enemy_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dota_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_dota_time(&has_bits);
          _impl_.dota_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_state(&has_bits);
          _impl_.game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_pick_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_pick_state(&has_bits);
          _impl_.hero_pick_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float time_of_day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_time_of_day(&has_bits);
          _impl_.time_of_day_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float glyph_cooldown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_glyph_cooldown(&has_bits);
          _impl_.glyph_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float glyph_cooldown_enemy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_glyph_cooldown_enemy(&has_bits);
          _impl_.glyph_cooldown_enemy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dropped_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rune_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incoming_teleports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linear_projectiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_avoidance_zones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_couriers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventAbility ability_events = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ability_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventDamage damage_events = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_damage_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_courier_killed_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_roshan_killed_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventTree tree_events = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tree_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 dropped_items_deltas = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_dropped_items_deltas(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<896>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dropped_items_deltas(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 rune_infos_deltas = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_rune_infos_deltas(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<904>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rune_infos_deltas(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotWorldState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional float game_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_game_time(), target);
  }

  // optional float dota_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_dota_time(), target);
  }

  // optional uint32 game_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_state(), target);
  }

  // optional uint32 hero_pick_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_pick_state(), target);
  }

  // optional float time_of_day = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_time_of_day(), target);
  }

  // optional float glyph_cooldown = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_glyph_cooldown(), target);
  }

  // optional float glyph_cooldown_enemy = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_glyph_cooldown_enemy(), target);
  }

  // repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dropped_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_dropped_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rune_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_rune_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incoming_teleports_size()); i < n; i++) {
    const auto& repfield = this->_internal_incoming_teleports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_linear_projectiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_linear_projectiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_avoidance_zones_size()); i < n; i++) {
    const auto& repfield = this->_internal_avoidance_zones(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_couriers_size()); i < n; i++) {
    const auto& repfield = this->_internal_couriers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.EventAbility ability_events = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ability_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_ability_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.EventDamage damage_events = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_courier_killed_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_courier_killed_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roshan_killed_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_roshan_killed_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgBotWorldState.EventTree tree_events = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tree_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_tree_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 dropped_items_deltas = 112;
  for (int i = 0, n = this->_internal_dropped_items_deltas_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(112, this->_internal_dropped_items_deltas(i), target);
  }

  // repeated int32 rune_infos_deltas = 113;
  for (int i = 0, n = this->_internal_rune_infos_deltas_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(113, this->_internal_rune_infos_deltas(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState)
  return target;
}

size_t CMsgBotWorldState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->_impl_.units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
  total_size += 1UL * this->_internal_dropped_items_size();
  for (const auto& msg : this->_impl_.dropped_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
  total_size += 1UL * this->_internal_rune_infos_size();
  for (const auto& msg : this->_impl_.rune_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  total_size += 1UL * this->_internal_incoming_teleports_size();
  for (const auto& msg : this->_impl_.incoming_teleports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
  total_size += 1UL * this->_internal_linear_projectiles_size();
  for (const auto& msg : this->_impl_.linear_projectiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  total_size += 2UL * this->_internal_avoidance_zones_size();
  for (const auto& msg : this->_impl_.avoidance_zones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
  total_size += 2UL * this->_internal_couriers_size();
  for (const auto& msg : this->_impl_.couriers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventAbility ability_events = 20;
  total_size += 2UL * this->_internal_ability_events_size();
  for (const auto& msg : this->_impl_.ability_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventDamage damage_events = 21;
  total_size += 2UL * this->_internal_damage_events_size();
  for (const auto& msg : this->_impl_.damage_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  total_size += 2UL * this->_internal_courier_killed_events_size();
  for (const auto& msg : this->_impl_.courier_killed_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  total_size += 2UL * this->_internal_roshan_killed_events_size();
  for (const auto& msg : this->_impl_.roshan_killed_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventTree tree_events = 24;
  total_size += 2UL * this->_internal_tree_events_size();
  for (const auto& msg : this->_impl_.tree_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 dropped_items_deltas = 112;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.dropped_items_deltas_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_dropped_items_deltas_size());
    total_size += data_size;
  }

  // repeated int32 rune_infos_deltas = 113;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.rune_infos_deltas_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_rune_infos_deltas_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional float game_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float dota_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 game_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_state());
    }

    // optional uint32 hero_pick_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_pick_state());
    }

    // optional float time_of_day = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float glyph_cooldown = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float glyph_cooldown_enemy = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotWorldState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotWorldState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotWorldState::GetClassData() const { return &_class_data_; }


void CMsgBotWorldState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotWorldState*>(&to_msg);
  auto& from = static_cast<const CMsgBotWorldState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.units_.MergeFrom(from._impl_.units_);
  _this->_impl_.dropped_items_.MergeFrom(from._impl_.dropped_items_);
  _this->_impl_.rune_infos_.MergeFrom(from._impl_.rune_infos_);
  _this->_impl_.incoming_teleports_.MergeFrom(from._impl_.incoming_teleports_);
  _this->_impl_.linear_projectiles_.MergeFrom(from._impl_.linear_projectiles_);
  _this->_impl_.avoidance_zones_.MergeFrom(from._impl_.avoidance_zones_);
  _this->_impl_.couriers_.MergeFrom(from._impl_.couriers_);
  _this->_impl_.ability_events_.MergeFrom(from._impl_.ability_events_);
  _this->_impl_.damage_events_.MergeFrom(from._impl_.damage_events_);
  _this->_impl_.courier_killed_events_.MergeFrom(from._impl_.courier_killed_events_);
  _this->_impl_.roshan_killed_events_.MergeFrom(from._impl_.roshan_killed_events_);
  _this->_impl_.tree_events_.MergeFrom(from._impl_.tree_events_);
  _this->_impl_.dropped_items_deltas_.MergeFrom(from._impl_.dropped_items_deltas_);
  _this->_impl_.rune_infos_deltas_.MergeFrom(from._impl_.rune_infos_deltas_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dota_time_ = from._impl_.dota_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_state_ = from._impl_.game_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hero_pick_state_ = from._impl_.hero_pick_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_of_day_ = from._impl_.time_of_day_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.glyph_cooldown_ = from._impl_.glyph_cooldown_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.glyph_cooldown_enemy_ = from._impl_.glyph_cooldown_enemy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotWorldState::CopyFrom(const CMsgBotWorldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState::IsInitialized() const {
  return true;
}

void CMsgBotWorldState::InternalSwap(CMsgBotWorldState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.units_.InternalSwap(&other->_impl_.units_);
  _impl_.dropped_items_.InternalSwap(&other->_impl_.dropped_items_);
  _impl_.rune_infos_.InternalSwap(&other->_impl_.rune_infos_);
  _impl_.incoming_teleports_.InternalSwap(&other->_impl_.incoming_teleports_);
  _impl_.linear_projectiles_.InternalSwap(&other->_impl_.linear_projectiles_);
  _impl_.avoidance_zones_.InternalSwap(&other->_impl_.avoidance_zones_);
  _impl_.couriers_.InternalSwap(&other->_impl_.couriers_);
  _impl_.ability_events_.InternalSwap(&other->_impl_.ability_events_);
  _impl_.damage_events_.InternalSwap(&other->_impl_.damage_events_);
  _impl_.courier_killed_events_.InternalSwap(&other->_impl_.courier_killed_events_);
  _impl_.roshan_killed_events_.InternalSwap(&other->_impl_.roshan_killed_events_);
  _impl_.tree_events_.InternalSwap(&other->_impl_.tree_events_);
  _impl_.dropped_items_deltas_.InternalSwap(&other->_impl_.dropped_items_deltas_);
  _impl_.rune_infos_deltas_.InternalSwap(&other->_impl_.rune_infos_deltas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState, _impl_.glyph_cooldown_enemy_)
      + sizeof(CMsgBotWorldState::_impl_.glyph_cooldown_enemy_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Vector*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Player*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Ability*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_Ability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Ability >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_DroppedItem*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_DroppedItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_DroppedItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_RuneInfo*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_RuneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_RuneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_TeleportInfo*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_TeleportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_TeleportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Modifier*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_Modifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Modifier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_LinearProjectile*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_LinearProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_LinearProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_TrackingProjectile*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_TrackingProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_TrackingProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_AvoidanceZone*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_AvoidanceZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_AvoidanceZone >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Courier*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_Courier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Courier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventAbility*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventDamage*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventCourierKilled*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventCourierKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventCourierKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventRoshanKilled*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventRoshanKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventRoshanKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventTree*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventTree >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Unit*
Arena::CreateMaybeMessage< ::CMsgBotWorldState_Unit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Unit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState*
Arena::CreateMaybeMessage< ::CMsgBotWorldState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
