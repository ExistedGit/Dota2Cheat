// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_lobby.proto

#include "dota_gcmessages_common_lobby.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgLobbyCoachFriendRequest::CMsgLobbyCoachFriendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coach_account_id_)*/0u
  , /*decltype(_impl_.player_account_id_)*/0u
  , /*decltype(_impl_.request_state_)*/0} {}
struct CMsgLobbyCoachFriendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyCoachFriendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyCoachFriendRequestDefaultTypeInternal() {}
  union {
    CMsgLobbyCoachFriendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyCoachFriendRequestDefaultTypeInternal _CMsgLobbyCoachFriendRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.hero_badge_xp_)*/0u} {}
struct CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal() {}
  union {
    CMsgLobbyPlayerPlusSubscriptionData_HeroBadge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hero_badges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal() {}
  union {
    CMsgLobbyPlayerPlusSubscriptionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_PeriodicResourceData::CMsgLobbyEventPoints_PeriodicResourceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.periodic_resource_id_)*/0u
  , /*decltype(_impl_.remaining_)*/0u
  , /*decltype(_impl_.max_)*/0u} {}
struct CMsgLobbyEventPoints_PeriodicResourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_PeriodicResourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_PeriodicResourceDataDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_PeriodicResourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyEventPoints_PeriodicResourceDataDefaultTypeInternal _CMsgLobbyEventPoints_PeriodicResourceData_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_NetworkedEventAction::CMsgLobbyEventPoints_NetworkedEventAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_id_)*/0u
  , /*decltype(_impl_.times_granted_)*/0u} {}
struct CMsgLobbyEventPoints_NetworkedEventActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_NetworkedEventActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_NetworkedEventActionDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_NetworkedEventAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyEventPoints_NetworkedEventActionDefaultTypeInternal _CMsgLobbyEventPoints_NetworkedEventAction_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_game_custom_actions_)*/{}
  , /*decltype(_impl_.networked_event_actions_)*/{}
  , /*decltype(_impl_.periodic_resources_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.normal_points_)*/0u
  , /*decltype(_impl_.premium_points_)*/0u
  , /*decltype(_impl_.owned_)*/false
  , /*decltype(_impl_.active_effects_mask_)*/uint64_t{0u}
  , /*decltype(_impl_.wager_streak_)*/0u
  , /*decltype(_impl_.tip_amount_index_)*/0u
  , /*decltype(_impl_.active_event_season_id_)*/0u
  , /*decltype(_impl_.teleport_fx_level_)*/0u} {}
struct CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_AccountPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal _CMsgLobbyEventPoints_AccountPoints_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyEventPoints::CMsgLobbyEventPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_points_)*/{}
  , /*decltype(_impl_.event_id_)*/0u} {}
struct CMsgLobbyEventPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyEventPointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyEventPointsDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyEventPointsDefaultTypeInternal _CMsgLobbyEventPoints_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyEventGameData::CMsgLobbyEventGameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_seed_)*/0u
  , /*decltype(_impl_.event_window_start_time_)*/0u} {}
struct CMsgLobbyEventGameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyEventGameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyEventGameDataDefaultTypeInternal() {}
  union {
    CMsgLobbyEventGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyEventGameDataDefaultTypeInternal _CMsgLobbyEventGameData_default_instance_;
PROTOBUF_CONSTEXPR CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}} {}
struct CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal() {}
  union {
    CSODOTALobbyInvite_LobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal _CSODOTALobbyInvite_LobbyMember_default_instance_;
PROTOBUF_CONSTEXPR CSODOTALobbyInvite::CSODOTALobbyInvite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.sender_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/uint64_t{0u}
  , /*decltype(_impl_.sender_id_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.invite_gid_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_game_crc_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_game_timestamp_)*/0u} {}
struct CSODOTALobbyInviteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTALobbyInviteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTALobbyInviteDefaultTypeInternal() {}
  union {
    CSODOTALobbyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTALobbyInviteDefaultTypeInternal _CSODOTALobbyInvite_default_instance_;
PROTOBUF_CONSTEXPR CSODOTALobbyMember::CSODOTALobbyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disabled_hero_id_)*/{}
  , /*decltype(_impl_.enabled_hero_id_)*/{}
  , /*decltype(_impl_.custom_game_product_ids_)*/{}
  , /*decltype(_impl_.disabled_random_hero_bits_)*/{}
  , /*decltype(_impl_.pending_awards_)*/{}
  , /*decltype(_impl_.pending_awards_on_victory_)*/{}
  , /*decltype(_impl_.coached_account_ids_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pwrd_cyber_cafe_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.meta_level_)*/0u
  , /*decltype(_impl_.party_id_)*/uint64_t{0u}
  , /*decltype(_impl_.meta_xp_)*/0u
  , /*decltype(_impl_.meta_xp_awarded_)*/0u
  , /*decltype(_impl_.leaver_status_)*/0
  , /*decltype(_impl_.pwrd_cyber_cafe_id_)*/0u
  , /*decltype(_impl_.leaver_actions_)*/0u
  , /*decltype(_impl_.rank_change_)*/0
  , /*decltype(_impl_.favorite_team_packed_)*/uint64_t{0u}
  , /*decltype(_impl_.search_match_type_)*/0
  , /*decltype(_impl_.cameraman_)*/false
  , /*decltype(_impl_.is_plus_subscriber_)*/false
  , /*decltype(_impl_.can_earn_rewards_)*/false
  , /*decltype(_impl_.was_mvp_last_game_)*/false
  , /*decltype(_impl_.lane_selection_flags_)*/0u
  , /*decltype(_impl_.coach_rating_)*/0u
  , /*decltype(_impl_.rank_mmr_boost_type_)*/0
  , /*decltype(_impl_.queue_point_adjustment_)*/0
  , /*decltype(_impl_.rank_tier_)*/0
  , /*decltype(_impl_.title_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.reports_available_)*/0u
  , /*decltype(_impl_.is_steam_china_)*/false
  , /*decltype(_impl_.live_spectator_account_id_)*/0u
  , /*decltype(_impl_.comms_reports_available_)*/0u
  , /*decltype(_impl_.live_spectator_team_)*/5
  , /*decltype(_impl_.channel_)*/6u
  , /*decltype(_impl_.coach_team_)*/5} {}
struct CSODOTALobbyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTALobbyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTALobbyMemberDefaultTypeInternal() {}
  union {
    CSODOTALobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTALobbyMemberDefaultTypeInternal _CSODOTALobbyMember_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAServerLobbyMember::CSODOTAServerLobbyMember(
    ::_pbi::ConstantInitialized) {}
struct CSODOTAServerLobbyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAServerLobbyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAServerLobbyMemberDefaultTypeInternal() {}
  union {
    CSODOTAServerLobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAServerLobbyMemberDefaultTypeInternal _CSODOTAServerLobbyMember_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAStaticLobbyMember::CSODOTAStaticLobbyMember(
    ::_pbi::ConstantInitialized) {}
struct CSODOTAStaticLobbyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAStaticLobbyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAStaticLobbyMemberDefaultTypeInternal() {}
  union {
    CSODOTAStaticLobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAStaticLobbyMemberDefaultTypeInternal _CSODOTAStaticLobbyMember_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAServerStaticLobbyMember::CSODOTAServerStaticLobbyMember(
    ::_pbi::ConstantInitialized) {}
struct CSODOTAServerStaticLobbyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAServerStaticLobbyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAServerStaticLobbyMemberDefaultTypeInternal() {}
  union {
    CSODOTAServerStaticLobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAServerStaticLobbyMemberDefaultTypeInternal _CSODOTAServerStaticLobbyMember_default_instance_;
PROTOBUF_CONSTEXPR CLobbyTeamDetails::CLobbyTeamDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_logo_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_abbreviation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.team_base_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.team_banner_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.team_complete_)*/false
  , /*decltype(_impl_.is_home_team_)*/false
  , /*decltype(_impl_.is_challenge_match_)*/false
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.rank_change_)*/0
  , /*decltype(_impl_.challenge_match_token_account_)*/uint64_t{0u}} {}
struct CLobbyTeamDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLobbyTeamDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLobbyTeamDetailsDefaultTypeInternal() {}
  union {
    CLobbyTeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLobbyTeamDetailsDefaultTypeInternal _CLobbyTeamDetails_default_instance_;
PROTOBUF_CONSTEXPR CLobbyGuildDetails::CLobbyGuildDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.guild_primary_color_)*/0u
  , /*decltype(_impl_.guild_secondary_color_)*/0u
  , /*decltype(_impl_.guild_pattern_)*/0u
  , /*decltype(_impl_.guild_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.guild_points_)*/0u
  , /*decltype(_impl_.guild_event_)*/0u
  , /*decltype(_impl_.guild_flags_)*/0u
  , /*decltype(_impl_.team_for_guild_)*/0
  , /*decltype(_impl_.guild_weekly_percentile_)*/0u} {}
struct CLobbyGuildDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLobbyGuildDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLobbyGuildDetailsDefaultTypeInternal() {}
  union {
    CLobbyGuildDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLobbyGuildDetailsDefaultTypeInternal _CLobbyGuildDetails_default_instance_;
PROTOBUF_CONSTEXPR CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_def_index_)*/0u
  , /*decltype(_impl_.is_supply_crate_)*/false
  , /*decltype(_impl_.is_timed_drop_)*/false
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.origin_)*/0u} {}
struct CLobbyTimedRewardDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLobbyTimedRewardDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLobbyTimedRewardDetailsDefaultTypeInternal() {}
  union {
    CLobbyTimedRewardDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
PROTOBUF_CONSTEXPR CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct CLobbyBroadcastChannelInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLobbyBroadcastChannelInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLobbyBroadcastChannelInfoDefaultTypeInternal() {}
  union {
    CLobbyBroadcastChannelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLobbyBroadcastChannelInfoDefaultTypeInternal _CLobbyBroadcastChannelInfo_default_instance_;
PROTOBUF_CONSTEXPR CLobbyGuildChallenge::CLobbyGuildChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eligible_account_ids_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u
  , /*decltype(_impl_.challenge_timestamp_)*/0u
  , /*decltype(_impl_.challenge_period_serial_)*/0u
  , /*decltype(_impl_.challenge_progress_at_start_)*/0u} {}
struct CLobbyGuildChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLobbyGuildChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLobbyGuildChallengeDefaultTypeInternal() {}
  union {
    CLobbyGuildChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLobbyGuildChallengeDefaultTypeInternal _CLobbyGuildChallenge_default_instance_;
PROTOBUF_CONSTEXPR CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contents_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CSODOTALobby_CExtraMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTALobby_CExtraMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTALobby_CExtraMsgDefaultTypeInternal() {}
  union {
    CSODOTALobby_CExtraMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTALobby_CExtraMsgDefaultTypeInternal _CSODOTALobby_CExtraMsg_default_instance_;
PROTOBUF_CONSTEXPR CSODOTALobby::CSODOTALobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pending_invites_)*/{}
  , /*decltype(_impl_.team_details_)*/{}
  , /*decltype(_impl_.timed_reward_details_)*/{}
  , /*decltype(_impl_.broadcast_channel_info_)*/{}
  , /*decltype(_impl_.extra_messages_)*/{}
  , /*decltype(_impl_.previous_series_matches_)*/{}
  , /*decltype(_impl_.event_progression_enabled_)*/{}
  , /*decltype(_impl_.emergency_disabled_hero_ids_)*/{}
  , /*decltype(_impl_.guild_challenges_)*/{}
  , /*decltype(_impl_.guild_details_)*/{}
  , /*decltype(_impl_.lobby_event_points_)*/{}
  , /*decltype(_impl_.all_members_)*/{}
  , /*decltype(_impl_.member_indices_)*/{}
  , /*decltype(_impl_.left_member_indices_)*/{}
  , /*decltype(_impl_.free_member_indices_)*/{}
  , /*decltype(_impl_.requested_hero_ids_)*/{}
  , /*decltype(_impl_.coach_friend_requests_)*/{}
  , /*decltype(_impl_.extra_startup_messages_)*/{}
  , /*decltype(_impl_.connect_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pass_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_game_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lan_host_ping_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_game_definition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.save_game_)*/nullptr
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.server_id_)*/uint64_t{0u}
  , /*decltype(_impl_.leader_id_)*/uint64_t{0u}
  , /*decltype(_impl_.tutorial_lesson_)*/0u
  , /*decltype(_impl_.tournament_id_)*/0u
  , /*decltype(_impl_.tournament_game_id_)*/0u
  , /*decltype(_impl_.server_region_)*/0u
  , /*decltype(_impl_.game_state_)*/0
  , /*decltype(_impl_.num_spectators_)*/0u
  , /*decltype(_impl_.allow_cheats_)*/false
  , /*decltype(_impl_.fill_with_bots_)*/false
  , /*decltype(_impl_.intro_mode_)*/false
  , /*decltype(_impl_.allchat_)*/false
  , /*decltype(_impl_.matchgroup_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.cm_pick_)*/0
  , /*decltype(_impl_.leagueid_)*/0u
  , /*decltype(_impl_.penalty_level_radiant_)*/0u
  , /*decltype(_impl_.penalty_level_dire_)*/0u
  , /*decltype(_impl_.load_game_id_)*/0u
  , /*decltype(_impl_.series_type_)*/0u
  , /*decltype(_impl_.radiant_series_wins_)*/0u
  , /*decltype(_impl_.dire_series_wins_)*/0u
  , /*decltype(_impl_.loot_generated_)*/0u
  , /*decltype(_impl_.loot_awarded_)*/0u
  , /*decltype(_impl_.dota_tv_delay_)*/0
  , /*decltype(_impl_.custom_difficulty_)*/0u
  , /*decltype(_impl_.first_leaver_accountid_)*/0u
  , /*decltype(_impl_.series_id_)*/0u
  , /*decltype(_impl_.lan_)*/false
  , /*decltype(_impl_.low_priority_)*/false
  , /*decltype(_impl_.first_blood_happened_)*/false
  , /*decltype(_impl_.mass_disconnect_)*/false
  , /*decltype(_impl_.match_outcome_)*/0
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_min_players_)*/0u
  , /*decltype(_impl_.custom_max_players_)*/0u
  , /*decltype(_impl_.custom_game_crc_)*/uint64_t{0u}
  , /*decltype(_impl_.visibility_)*/0
  , /*decltype(_impl_.custom_game_timestamp_)*/0u
  , /*decltype(_impl_.previous_match_override_)*/uint64_t{0u}
  , /*decltype(_impl_.game_start_time_)*/0u
  , /*decltype(_impl_.pause_setting_)*/0
  , /*decltype(_impl_.weekend_tourney_division_id_)*/0u
  , /*decltype(_impl_.weekend_tourney_skill_level_)*/0u
  , /*decltype(_impl_.bot_radiant_)*/uint64_t{0u}
  , /*decltype(_impl_.weekend_tourney_bracket_round_)*/0u
  , /*decltype(_impl_.selection_priority_rules_)*/0
  , /*decltype(_impl_.bot_dire_)*/uint64_t{0u}
  , /*decltype(_impl_.series_previous_selection_priority_team_id_)*/0u
  , /*decltype(_impl_.series_current_selection_priority_team_id_)*/0u
  , /*decltype(_impl_.series_current_priority_team_choice_)*/0
  , /*decltype(_impl_.custom_game_auto_created_lobby_)*/false
  , /*decltype(_impl_.series_current_selection_priority_used_coin_toss_)*/false
  , /*decltype(_impl_.custom_game_penalties_)*/false
  , /*decltype(_impl_.record_detailed_stats_)*/false
  , /*decltype(_impl_.series_current_non_priority_team_choice_)*/0
  , /*decltype(_impl_.current_primary_event_)*/0
  , /*decltype(_impl_.custom_game_private_key_)*/uint64_t{0u}
  , /*decltype(_impl_.league_node_id_)*/0u
  , /*decltype(_impl_.match_duration_)*/0u
  , /*decltype(_impl_.league_phase_)*/0u
  , /*decltype(_impl_.experimental_gameplay_enabled_)*/false
  , /*decltype(_impl_.is_in_steam_china_)*/false
  , /*decltype(_impl_.with_scenario_save_)*/false
  , /*decltype(_impl_.lobby_creation_time_)*/0u
  , /*decltype(_impl_.lobby_type_)*/-1
  , /*decltype(_impl_.allow_spectating_)*/true
  , /*decltype(_impl_.bot_difficulty_radiant_)*/3
  , /*decltype(_impl_.bot_difficulty_dire_)*/3} {}
struct CSODOTALobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTALobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTALobbyDefaultTypeInternal() {}
  union {
    CSODOTALobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTALobbyDefaultTypeInternal _CSODOTALobby_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAServerLobby::CSODOTAServerLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_members_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSODOTAServerLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAServerLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAServerLobbyDefaultTypeInternal() {}
  union {
    CSODOTAServerLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAServerLobbyDefaultTypeInternal _CSODOTAServerLobby_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAStaticLobby::CSODOTAStaticLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_members_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSODOTAStaticLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAStaticLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAStaticLobbyDefaultTypeInternal() {}
  union {
    CSODOTAStaticLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAStaticLobbyDefaultTypeInternal _CSODOTAStaticLobby_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAServerStaticLobby::CSODOTAServerStaticLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_members_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSODOTAServerStaticLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAServerStaticLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAServerStaticLobbyDefaultTypeInternal() {}
  union {
    CSODOTAServerStaticLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAServerStaticLobbyDefaultTypeInternal _CSODOTAServerStaticLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_id_start_)*/4294967295u
  , /*decltype(_impl_.message_id_end_)*/4294967295u} {}
struct CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRangeDefaultTypeInternal() {}
  union {
    CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRangeDefaultTypeInternal _CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_default_instance_;
PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_id_start_)*/4294967295u
  , /*decltype(_impl_.message_id_end_)*/4294967295u} {}
struct CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRangeDefaultTypeInternal() {}
  union {
    CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRangeDefaultTypeInternal _CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_default_instance_;
PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData::CMsgAdditionalLobbyStartupAccountData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unlocked_chat_wheel_message_ranges_)*/{}
  , /*decltype(_impl_.unlocked_ping_wheel_message_ranges_)*/{}
  , /*decltype(_impl_.plus_data_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgAdditionalLobbyStartupAccountDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAdditionalLobbyStartupAccountDataDefaultTypeInternal() {}
  union {
    CMsgAdditionalLobbyStartupAccountData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAdditionalLobbyStartupAccountDataDefaultTypeInternal _CMsgAdditionalLobbyStartupAccountData_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyInitializationComplete::CMsgLobbyInitializationComplete(
    ::_pbi::ConstantInitialized) {}
struct CMsgLobbyInitializationCompleteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyInitializationCompleteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyInitializationCompleteDefaultTypeInternal() {}
  union {
    CMsgLobbyInitializationComplete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyInitializationCompleteDefaultTypeInternal _CMsgLobbyInitializationComplete_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgLobbyPlaytestDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyPlaytestDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyPlaytestDetailsDefaultTypeInternal() {}
  union {
    CMsgLobbyPlaytestDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyPlaytestDetailsDefaultTypeInternal _CMsgLobbyPlaytestDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgLocalServerGuildData::CMsgLocalServerGuildData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.guild_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.guild_points_)*/0u
  , /*decltype(_impl_.guild_primary_color_)*/0u
  , /*decltype(_impl_.guild_secondary_color_)*/0u
  , /*decltype(_impl_.guild_pattern_)*/0u
  , /*decltype(_impl_.guild_flags_)*/0u
  , /*decltype(_impl_.guild_weekly_percentile_)*/0u} {}
struct CMsgLocalServerGuildDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLocalServerGuildDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLocalServerGuildDataDefaultTypeInternal() {}
  union {
    CMsgLocalServerGuildData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLocalServerGuildDataDefaultTypeInternal _CMsgLocalServerGuildData_default_instance_;
PROTOBUF_CONSTEXPR CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_points_)*/{}
  , /*decltype(_impl_.guild_info_)*/nullptr
  , /*decltype(_impl_.additional_data_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.is_plus_subscriber_)*/false
  , /*decltype(_impl_.primary_event_id_)*/0u
  , /*decltype(_impl_.favorite_team_)*/0u
  , /*decltype(_impl_.favorite_team_quality_)*/0u
  , /*decltype(_impl_.teleport_fx_level_)*/0u} {}
struct CMsgLocalServerFakeLobbyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLocalServerFakeLobbyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLocalServerFakeLobbyDataDefaultTypeInternal() {}
  union {
    CMsgLocalServerFakeLobbyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLocalServerFakeLobbyDataDefaultTypeInternal _CMsgLocalServerFakeLobbyData_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[31];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, _impl_.coach_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, _impl_.player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, _impl_.request_state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _impl_.hero_badge_xp_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData, _impl_.hero_badges_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceData, _impl_.periodic_resource_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceData, _impl_.remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceData, _impl_.max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_NetworkedEventAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_NetworkedEventAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_NetworkedEventAction, _impl_.action_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_NetworkedEventAction, _impl_.times_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.normal_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.premium_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.owned_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.active_effects_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.wager_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.event_game_custom_actions_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.tip_amount_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.active_event_season_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.teleport_fx_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.networked_event_actions_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _impl_.periodic_resources_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  8,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, _impl_.account_points_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, _impl_.game_seed_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, _impl_.event_window_start_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, _impl_.steam_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.sender_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.invite_gid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _impl_.custom_game_timestamp_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.party_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.meta_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.meta_xp_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.meta_xp_awarded_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.leaver_status_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.leaver_actions_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.disabled_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.enabled_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.coach_team_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.coached_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.coach_rating_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.pwrd_cyber_cafe_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.pwrd_cyber_cafe_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.disabled_random_hero_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.rank_change_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.cameraman_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.custom_game_product_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.search_match_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.favorite_team_packed_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.can_earn_rewards_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.live_spectator_team_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.was_mvp_last_game_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.pending_awards_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.pending_awards_on_victory_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.rank_mmr_boost_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.queue_point_adjustment_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.rank_tier_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.reports_available_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.is_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.live_spectator_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _impl_.comms_reports_available_),
  2,
  3,
  4,
  0,
  5,
  7,
  6,
  8,
  9,
  10,
  12,
  32,
  ~0u,
  ~0u,
  33,
  ~0u,
  21,
  11,
  1,
  ~0u,
  13,
  16,
  ~0u,
  15,
  14,
  17,
  20,
  18,
  31,
  19,
  ~0u,
  ~0u,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSODOTAServerLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSODOTAStaticLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSODOTAServerStaticLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_tag_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_complete_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.rank_change_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.is_home_team_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.challenge_match_token_account_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _impl_.team_abbreviation_),
  0,
  1,
  7,
  4,
  5,
  6,
  8,
  11,
  12,
  9,
  10,
  13,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_primary_color_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_secondary_color_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_pattern_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_points_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_event_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_flags_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.team_for_guild_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_tag_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _impl_.guild_weekly_percentile_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  10,
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _impl_.item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _impl_.is_supply_crate_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _impl_.is_timed_drop_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _impl_.origin_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _impl_.language_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.challenge_period_serial_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.challenge_progress_at_start_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _impl_.eligible_account_ids_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, _impl_.contents_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.all_members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.member_indices_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.left_member_indices_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.free_member_indices_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.leader_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.server_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.pending_invites_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.connect_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.fill_with_bots_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.intro_mode_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.game_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.team_details_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.tutorial_lesson_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.game_state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.num_spectators_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.matchgroup_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.cm_pick_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.allow_spectating_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.pass_key_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.leagueid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.penalty_level_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.penalty_level_dire_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.load_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.series_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.radiant_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.dire_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.loot_generated_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.loot_awarded_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.allchat_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.dota_tv_delay_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.broadcast_channel_info_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.first_leaver_accountid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.series_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.low_priority_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.extra_messages_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.save_game_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.match_outcome_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.mass_disconnect_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_min_players_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_max_players_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_game_auto_created_lobby_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.previous_series_matches_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.previous_match_override_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.game_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.pause_setting_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.weekend_tourney_division_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.weekend_tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.bot_difficulty_dire_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.bot_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.bot_dire_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.event_progression_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.selection_priority_rules_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.series_previous_selection_priority_team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.series_current_selection_priority_team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.series_current_priority_team_choice_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.series_current_non_priority_team_choice_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.series_current_selection_priority_used_coin_toss_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.current_primary_event_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.emergency_disabled_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_game_private_key_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.custom_game_penalties_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.league_node_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.match_duration_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.league_phase_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.record_detailed_stats_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.experimental_gameplay_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.guild_challenges_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.guild_details_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.lobby_event_points_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.requested_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.coach_friend_requests_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.is_in_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.with_scenario_save_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.lobby_creation_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.event_game_definition_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _impl_.extra_startup_messages_),
  8,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  12,
  11,
  9,
  ~0u,
  10,
  0,
  76,
  19,
  20,
  21,
  1,
  ~0u,
  13,
  14,
  15,
  16,
  17,
  18,
  23,
  25,
  24,
  77,
  78,
  ~0u,
  2,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  22,
  35,
  3,
  4,
  36,
  39,
  ~0u,
  37,
  38,
  40,
  ~0u,
  7,
  41,
  43,
  42,
  44,
  45,
  46,
  48,
  47,
  62,
  49,
  ~0u,
  50,
  51,
  52,
  53,
  54,
  56,
  79,
  55,
  58,
  ~0u,
  57,
  59,
  60,
  61,
  66,
  63,
  67,
  ~0u,
  68,
  64,
  5,
  69,
  70,
  71,
  65,
  72,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  73,
  74,
  75,
  6,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSODOTAServerLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTAServerLobby, _impl_.all_members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSODOTAStaticLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTAStaticLobby, _impl_.all_members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSODOTAServerStaticLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTAServerStaticLobby, _impl_.all_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange, _impl_.message_id_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange, _impl_.message_id_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange, _impl_.message_id_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange, _impl_.message_id_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData, _impl_.plus_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData, _impl_.unlocked_chat_wheel_message_ranges_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdditionalLobbyStartupAccountData, _impl_.unlocked_ping_wheel_message_ranges_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInitializationComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlaytestDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlaytestDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlaytestDetails, _impl_.json_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_primary_color_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_secondary_color_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_pattern_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _impl_.guild_weekly_percentile_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.event_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.favorite_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.favorite_team_quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.guild_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.teleport_fx_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _impl_.additional_data_),
  2,
  ~0u,
  3,
  4,
  5,
  6,
  0,
  7,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgLobbyCoachFriendRequest)},
  { 12, 20, -1, sizeof(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge)},
  { 22, -1, -1, sizeof(::CMsgLobbyPlayerPlusSubscriptionData)},
  { 29, 38, -1, sizeof(::CMsgLobbyEventPoints_PeriodicResourceData)},
  { 41, 49, -1, sizeof(::CMsgLobbyEventPoints_NetworkedEventAction)},
  { 51, 69, -1, sizeof(::CMsgLobbyEventPoints_AccountPoints)},
  { 81, 89, -1, sizeof(::CMsgLobbyEventPoints)},
  { 91, 99, -1, sizeof(::CMsgLobbyEventGameData)},
  { 101, 109, -1, sizeof(::CSODOTALobbyInvite_LobbyMember)},
  { 111, 125, -1, sizeof(::CSODOTALobbyInvite)},
  { 133, 180, -1, sizeof(::CSODOTALobbyMember)},
  { 221, -1, -1, sizeof(::CSODOTAServerLobbyMember)},
  { 227, -1, -1, sizeof(::CSODOTAStaticLobbyMember)},
  { 233, -1, -1, sizeof(::CSODOTAServerStaticLobbyMember)},
  { 239, 259, -1, sizeof(::CLobbyTeamDetails)},
  { 273, 290, -1, sizeof(::CLobbyGuildDetails)},
  { 301, 312, -1, sizeof(::CLobbyTimedRewardDetails)},
  { 317, 327, -1, sizeof(::CLobbyBroadcastChannelInfo)},
  { 331, 345, -1, sizeof(::CLobbyGuildChallenge)},
  { 353, 361, -1, sizeof(::CSODOTALobby_CExtraMsg)},
  { 363, 467, -1, sizeof(::CSODOTALobby)},
  { 565, -1, -1, sizeof(::CSODOTAServerLobby)},
  { 572, -1, -1, sizeof(::CSODOTAStaticLobby)},
  { 579, -1, -1, sizeof(::CSODOTAServerStaticLobby)},
  { 586, 594, -1, sizeof(::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange)},
  { 596, 604, -1, sizeof(::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange)},
  { 606, 616, -1, sizeof(::CMsgAdditionalLobbyStartupAccountData)},
  { 620, -1, -1, sizeof(::CMsgLobbyInitializationComplete)},
  { 626, 633, -1, sizeof(::CMsgLobbyPlaytestDetails)},
  { 634, 649, -1, sizeof(::CMsgLocalServerGuildData)},
  { 658, 673, -1, sizeof(::CMsgLocalServerFakeLobbyData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgLobbyCoachFriendRequest_default_instance_._instance,
  &::_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_._instance,
  &::_CMsgLobbyPlayerPlusSubscriptionData_default_instance_._instance,
  &::_CMsgLobbyEventPoints_PeriodicResourceData_default_instance_._instance,
  &::_CMsgLobbyEventPoints_NetworkedEventAction_default_instance_._instance,
  &::_CMsgLobbyEventPoints_AccountPoints_default_instance_._instance,
  &::_CMsgLobbyEventPoints_default_instance_._instance,
  &::_CMsgLobbyEventGameData_default_instance_._instance,
  &::_CSODOTALobbyInvite_LobbyMember_default_instance_._instance,
  &::_CSODOTALobbyInvite_default_instance_._instance,
  &::_CSODOTALobbyMember_default_instance_._instance,
  &::_CSODOTAServerLobbyMember_default_instance_._instance,
  &::_CSODOTAStaticLobbyMember_default_instance_._instance,
  &::_CSODOTAServerStaticLobbyMember_default_instance_._instance,
  &::_CLobbyTeamDetails_default_instance_._instance,
  &::_CLobbyGuildDetails_default_instance_._instance,
  &::_CLobbyTimedRewardDetails_default_instance_._instance,
  &::_CLobbyBroadcastChannelInfo_default_instance_._instance,
  &::_CLobbyGuildChallenge_default_instance_._instance,
  &::_CSODOTALobby_CExtraMsg_default_instance_._instance,
  &::_CSODOTALobby_default_instance_._instance,
  &::_CSODOTAServerLobby_default_instance_._instance,
  &::_CSODOTAStaticLobby_default_instance_._instance,
  &::_CSODOTAServerStaticLobby_default_instance_._instance,
  &::_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_default_instance_._instance,
  &::_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_default_instance_._instance,
  &::_CMsgAdditionalLobbyStartupAccountData_default_instance_._instance,
  &::_CMsgLobbyInitializationComplete_default_instance_._instance,
  &::_CMsgLobbyPlaytestDetails_default_instance_._instance,
  &::_CMsgLocalServerGuildData_default_instance_._instance,
  &::_CMsgLocalServerFakeLobbyData_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5flobby_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"dota_gcmessages_common_lobby.proto\032\023st"
  "eammessages.proto\032\027dota_shared_enums.pro"
  "to\"\257\001\n\033CMsgLobbyCoachFriendRequest\022\030\n\020co"
  "ach_account_id\030\001 \001(\r\022\031\n\021player_account_i"
  "d\030\002 \001(\r\022[\n\rrequest_state\030\003 \001(\0162\036.ELobbyM"
  "emberCoachRequestState:$k_eLobbyMemberCo"
  "achRequestState_None\"\237\001\n#CMsgLobbyPlayer"
  "PlusSubscriptionData\022C\n\013hero_badges\030\001 \003("
  "\0132..CMsgLobbyPlayerPlusSubscriptionData."
  "HeroBadge\0323\n\tHeroBadge\022\017\n\007hero_id\030\001 \001(\r\022"
  "\025\n\rhero_badge_xp\030\002 \001(\r\"\315\005\n\024CMsgLobbyEven"
  "tPoints\022\020\n\010event_id\030\001 \001(\r\022;\n\016account_poi"
  "nts\030\002 \003(\0132#.CMsgLobbyEventPoints.Account"
  "Points\032T\n\024PeriodicResourceData\022\034\n\024period"
  "ic_resource_id\030\001 \001(\r\022\021\n\tremaining\030\002 \001(\r\022"
  "\013\n\003max\030\003 \001(\r\032@\n\024NetworkedEventAction\022\021\n\t"
  "action_id\030\001 \001(\r\022\025\n\rtimes_granted\030\002 \001(\r\032\315"
  "\003\n\rAccountPoints\022\022\n\naccount_id\030\001 \001(\r\022\025\n\r"
  "normal_points\030\002 \001(\r\022\026\n\016premium_points\030\003 "
  "\001(\r\022\r\n\005owned\030\004 \001(\010\022\033\n\023active_effects_mas"
  "k\030\014 \001(\004\022\024\n\014wager_streak\030\027 \001(\r\022M\n\031event_g"
  "ame_custom_actions\030\031 \003(\0132*.CMsgLobbyEven"
  "tPoints.NetworkedEventAction\022\030\n\020tip_amou"
  "nt_index\030\032 \001(\r\022\036\n\026active_event_season_id"
  "\030\033 \001(\r\022\031\n\021teleport_fx_level\030\034 \001(\r\022K\n\027net"
  "worked_event_actions\030\036 \003(\0132*.CMsgLobbyEv"
  "entPoints.NetworkedEventAction\022F\n\022period"
  "ic_resources\030\037 \003(\0132*.CMsgLobbyEventPoint"
  "s.PeriodicResourceData\"L\n\026CMsgLobbyEvent"
  "GameData\022\021\n\tgame_seed\030\001 \001(\r\022\037\n\027event_win"
  "dow_start_time\030\002 \001(\r\"\231\002\n\022CSODOTALobbyInv"
  "ite\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id"
  "\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t\0220\n\007members\030\004"
  " \003(\0132\037.CSODOTALobbyInvite.LobbyMember\022\026\n"
  "\016custom_game_id\030\005 \001(\004\022\022\n\ninvite_gid\030\006 \001("
  "\006\022\027\n\017custom_game_crc\030\007 \001(\006\022\035\n\025custom_gam"
  "e_timestamp\030\010 \001(\007\032-\n\013LobbyMember\022\014\n\004name"
  "\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\"\217\n\n\022CSODOTALobb"
  "yMember\022\020\n\002id\030\001 \001(\006B\004\200\246\035\001\022\017\n\007hero_id\030\002 \001"
  "(\r\0223\n\004team\030\003 \001(\0162\r.DOTA_GC_TEAM:\026DOTA_GC"
  "_TEAM_GOOD_GUYS\022\014\n\004name\030\006 \001(\t\022\014\n\004slot\030\007 "
  "\001(\r\022\020\n\010party_id\030\014 \001(\004\022\022\n\nmeta_level\030\r \001("
  "\r\022\017\n\007meta_xp\030\016 \001(\r\022\027\n\017meta_xp_awarded\030\017 "
  "\001(\r\022<\n\rleaver_status\030\020 \001(\0162\023.DOTALeaverS"
  "tatus_t:\020DOTA_LEAVER_NONE\022\026\n\016leaver_acti"
  "ons\030\034 \001(\r\022\022\n\007channel\030\021 \001(\r:\0016\022\030\n\020disable"
  "d_hero_id\030\024 \003(\r\022\027\n\017enabled_hero_id\030\026 \003(\r"
  "\0226\n\ncoach_team\030\027 \001(\0162\r.DOTA_GC_TEAM:\023DOT"
  "A_GC_TEAM_NOTEAM\022\033\n\023coached_account_ids\030"
  "5 \003(\r\022\024\n\014coach_rating\030* \001(\r\022\032\n\022pwrd_cybe"
  "r_cafe_id\030\030 \001(\r\022\034\n\024pwrd_cyber_cafe_name\030"
  "\031 \001(\t\022!\n\031disabled_random_hero_bits\030) \003(\007"
  "\022\023\n\013rank_change\030\035 \001(\021\022\021\n\tcameraman\030\036 \001(\010"
  "\022\037\n\027custom_game_product_ids\030\037 \003(\r\0228\n\021sea"
  "rch_match_type\030! \001(\0162\n.MatchType:\021MATCH_"
  "TYPE_CASUAL\022\034\n\024favorite_team_packed\030# \001("
  "\004\022\032\n\022is_plus_subscriber\030$ \001(\010\022\034\n\024lane_se"
  "lection_flags\030& \001(\r\022\030\n\020can_earn_rewards\030"
  "\' \001(\010\022\?\n\023live_spectator_team\030( \001(\0162\r.DOT"
  "A_GC_TEAM:\023DOTA_GC_TEAM_NOTEAM\022\031\n\021was_mv"
  "p_last_game\030+ \001(\010\022.\n\016pending_awards\030, \003("
  "\0132\026.CMsgPendingEventAward\0229\n\031pending_awa"
  "rds_on_victory\030- \003(\0132\026.CMsgPendingEventA"
  "ward\022I\n\023rank_mmr_boost_type\030. \001(\0162\022.EDOT"
  "AMMRBoostType:\030k_EDOTAMMRBoostType_None\022"
  "\036\n\026queue_point_adjustment\030/ \001(\021\022\021\n\trank_"
  "tier\0300 \001(\005\022\r\n\005title\0302 \001(\r\022\020\n\010guild_id\0303 "
  "\001(\r\022\031\n\021reports_available\0304 \001(\r\022\026\n\016is_ste"
  "am_china\0306 \001(\010\022!\n\031live_spectator_account"
  "_id\0307 \001(\r\022\037\n\027comms_reports_available\0308 \001"
  "(\r\"\032\n\030CSODOTAServerLobbyMember\"\032\n\030CSODOT"
  "AStaticLobbyMember\" \n\036CSODOTAServerStati"
  "cLobbyMember\"\323\002\n\021CLobbyTeamDetails\022\021\n\tte"
  "am_name\030\001 \001(\t\022\020\n\010team_tag\030\003 \001(\t\022\017\n\007team_"
  "id\030\004 \001(\r\022\021\n\tteam_logo\030\005 \001(\004\022\026\n\016team_base"
  "_logo\030\006 \001(\004\022\030\n\020team_banner_logo\030\007 \001(\004\022\025\n"
  "\rteam_complete\030\010 \001(\010\022\014\n\004rank\030\017 \001(\r\022\023\n\013ra"
  "nk_change\030\020 \001(\021\022\024\n\014is_home_team\030\021 \001(\010\022\032\n"
  "\022is_challenge_match\030\022 \001(\010\022%\n\035challenge_m"
  "atch_token_account\030\023 \001(\004\022\025\n\rteam_logo_ur"
  "l\030\024 \001(\t\022\031\n\021team_abbreviation\030\025 \001(\t\"\300\002\n\022C"
  "LobbyGuildDetails\022\020\n\010guild_id\030\001 \001(\r\022\033\n\023g"
  "uild_primary_color\030\002 \001(\r\022\035\n\025guild_second"
  "ary_color\030\003 \001(\r\022\025\n\rguild_pattern\030\004 \001(\r\022\022"
  "\n\nguild_logo\030\005 \001(\004\022\024\n\014guild_points\030\006 \001(\r"
  "\022\023\n\013guild_event\030\007 \001(\r\022\023\n\013guild_flags\030\010 \001"
  "(\r\022=\n\016team_for_guild\030\t \001(\0162\r.DOTA_GC_TEA"
  "M:\026DOTA_GC_TEAM_GOOD_GUYS\022\021\n\tguild_tag\030\n"
  " \001(\t\022\037\n\027guild_weekly_percentile\030\013 \001(\r\"\206\001"
  "\n\030CLobbyTimedRewardDetails\022\026\n\016item_def_i"
  "ndex\030\002 \001(\r\022\027\n\017is_supply_crate\030\003 \001(\010\022\025\n\ri"
  "s_timed_drop\030\004 \001(\010\022\022\n\naccount_id\030\005 \001(\r\022\016"
  "\n\006origin\030\006 \001(\r\"r\n\032CLobbyBroadcastChannel"
  "Info\022\022\n\nchannel_id\030\001 \001(\r\022\024\n\014country_code"
  "\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\025\n\rlanguage_"
  "code\030\004 \001(\t\"\217\002\n\024CLobbyGuildChallenge\022\020\n\010g"
  "uild_id\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent"
  ":\rEVENT_ID_NONE\022\035\n\025challenge_instance_id"
  "\030\003 \001(\r\022\033\n\023challenge_parameter\030\004 \001(\r\022\033\n\023c"
  "hallenge_timestamp\030\005 \001(\r\022\037\n\027challenge_pe"
  "riod_serial\030\006 \001(\r\022#\n\033challenge_progress_"
  "at_start\030\007 \001(\r\022\034\n\024eligible_account_ids\030\010"
  " \003(\r\"\374\036\n\014CSODOTALobby\022\026\n\010lobby_id\030\001 \001(\004B"
  "\004\200\246\035\001\022(\n\013all_members\030x \003(\0132\023.CSODOTALobb"
  "yMember\022\026\n\016member_indices\030y \003(\r\022\033\n\023left_"
  "member_indices\030z \003(\r\022\033\n\023free_member_indi"
  "ces\030{ \003(\r\022\021\n\tleader_id\030\013 \001(\006\022\024\n\tserver_i"
  "d\030\006 \001(\006:\0010\022\021\n\tgame_mode\030\003 \001(\r\022\027\n\017pending"
  "_invites\030\n \003(\006\022&\n\005state\030\004 \001(\0162\023.CSODOTAL"
  "obby.State:\002UI\022\017\n\007connect\030\005 \001(\t\0224\n\nlobby"
  "_type\030\014 \001(\0162\027.CSODOTALobby.LobbyType:\007IN"
  "VALID\022\024\n\014allow_cheats\030\r \001(\010\022\026\n\016fill_with"
  "_bots\030\016 \001(\010\022\022\n\nintro_mode\030\017 \001(\010\022\021\n\tgame_"
  "name\030\020 \001(\t\022(\n\014team_details\030\021 \003(\0132\022.CLobb"
  "yTeamDetails\022\027\n\017tutorial_lesson\030\022 \001(\r\022\025\n"
  "\rtournament_id\030\023 \001(\r\022\032\n\022tournament_game_"
  "id\030\024 \001(\r\022\030\n\rserver_region\030\025 \001(\r:\0010\022>\n\nga"
  "me_state\030\026 \001(\0162\017.DOTA_GameState:\031DOTA_GA"
  "MERULES_STATE_INIT\022\026\n\016num_spectators\030\027 \001"
  "(\r\022\022\n\nmatchgroup\030\031 \001(\r\022.\n\007cm_pick\030\034 \001(\0162"
  "\r.DOTA_CM_PICK:\016DOTA_CM_RANDOM\022\020\n\010match_"
  "id\030\036 \001(\004\022\036\n\020allow_spectating\030\037 \001(\010:\004true"
  "\022G\n\026bot_difficulty_radiant\030$ \001(\0162\022.DOTAB"
  "otDifficulty:\023BOT_DIFFICULTY_HARD\0227\n\024tim"
  "ed_reward_details\030& \003(\0132\031.CLobbyTimedRew"
  "ardDetails\022\020\n\010pass_key\030\' \001(\t\022\020\n\010leagueid"
  "\030* \001(\r\022 \n\025penalty_level_radiant\030+ \001(\r:\0010"
  "\022\035\n\022penalty_level_dire\030, \001(\r:\0010\022\024\n\014load_"
  "game_id\030- \001(\r\022\023\n\013series_type\030. \001(\r\022\033\n\023ra"
  "diant_series_wins\030/ \001(\r\022\030\n\020dire_series_w"
  "ins\0300 \001(\r\022\026\n\016loot_generated\0301 \001(\r\022\024\n\014loo"
  "t_awarded\0302 \001(\r\022\026\n\007allchat\0303 \001(\010:\005false\022"
  "8\n\rdota_tv_delay\0305 \001(\0162\021.LobbyDotaTVDela"
  "y:\016LobbyDotaTV_10\022\030\n\020custom_game_mode\0306 "
  "\001(\t\022\027\n\017custom_map_name\0307 \001(\t\022\031\n\021custom_d"
  "ifficulty\0308 \001(\r\022\013\n\003lan\0309 \001(\010\022;\n\026broadcas"
  "t_channel_info\030: \003(\0132\033.CLobbyBroadcastCh"
  "annelInfo\022\036\n\026first_leaver_accountid\030; \001("
  "\r\022\021\n\tseries_id\030< \001(\r\022\024\n\014low_priority\030= \001"
  "(\010\022/\n\016extra_messages\030> \003(\0132\027.CSODOTALobb"
  "y.CExtraMsg\022!\n\tsave_game\030\? \001(\0132\016.CDOTASa"
  "veGame\022\034\n\024first_blood_happened\030A \001(\010\022>\n\r"
  "match_outcome\030F \001(\0162\016.EMatchOutcome:\027k_E"
  "MatchOutcome_Unknown\022\027\n\017mass_disconnect\030"
  "C \001(\010\022\026\n\016custom_game_id\030D \001(\004\022\032\n\022custom_"
  "min_players\030G \001(\r\022\032\n\022custom_max_players\030"
  "H \001(\r\022D\n\nvisibility\030K \001(\0162\024.DOTALobbyVis"
  "ibility:\032DOTALobbyVisibility_Public\022\027\n\017c"
  "ustom_game_crc\030L \001(\006\022&\n\036custom_game_auto"
  "_created_lobby\030M \001(\010\022\035\n\025custom_game_time"
  "stamp\030P \001(\007\022\037\n\027previous_series_matches\030Q"
  " \003(\004\022\037\n\027previous_match_override\030R \001(\004\022\027\n"
  "\017game_start_time\030W \001(\r\022N\n\rpause_setting\030"
  "X \001(\0162\026.LobbyDotaPauseSetting:\037LobbyDota"
  "PauseSetting_Unlimited\022#\n\033weekend_tourne"
  "y_division_id\030Z \001(\r\022#\n\033weekend_tourney_s"
  "kill_level\030[ \001(\r\022%\n\035weekend_tourney_brac"
  "ket_round\030\\ \001(\r\022D\n\023bot_difficulty_dire\030]"
  " \001(\0162\022.DOTABotDifficulty:\023BOT_DIFFICULTY"
  "_HARD\022\023\n\013bot_radiant\030^ \001(\004\022\020\n\010bot_dire\030_"
  " \001(\004\022*\n\031event_progression_enabled\030` \003(\0162"
  "\007.EEvent\022b\n\030selection_priority_rules\030a \001"
  "(\0162\033.DOTASelectionPriorityRules:#k_DOTAS"
  "electionPriorityRules_Manual\0222\n*series_p"
  "revious_selection_priority_team_id\030b \001(\r"
  "\0221\n)series_current_selection_priority_te"
  "am_id\030c \001(\r\022p\n#series_current_priority_t"
  "eam_choice\030d \001(\0162\034.DOTASelectionPriority"
  "Choice:%k_DOTASelectionPriorityChoice_In"
  "valid\022t\n\'series_current_non_priority_tea"
  "m_choice\030e \001(\0162\034.DOTASelectionPriorityCh"
  "oice:%k_DOTASelectionPriorityChoice_Inva"
  "lid\0228\n0series_current_selection_priority"
  "_used_coin_toss\030f \001(\010\0225\n\025current_primary"
  "_event\030g \001(\0162\007.EEvent:\rEVENT_ID_NONE\022#\n\033"
  "emergency_disabled_hero_ids\030i \003(\r\022\037\n\027cus"
  "tom_game_private_key\030j \001(\006\022\035\n\025custom_gam"
  "e_penalties\030k \001(\010\022\036\n\026lan_host_ping_locat"
  "ion\030m \001(\t\022\026\n\016league_node_id\030n \001(\r\022\026\n\016mat"
  "ch_duration\030o \001(\r\022\024\n\014league_phase\030q \001(\r\022"
  "\035\n\025record_detailed_stats\030r \001(\010\022%\n\035experi"
  "mental_gameplay_enabled\030t \001(\010\022/\n\020guild_c"
  "hallenges\030u \003(\0132\025.CLobbyGuildChallenge\022*"
  "\n\rguild_details\030v \003(\0132\023.CLobbyGuildDetai"
  "ls\0221\n\022lobby_event_points\030w \003(\0132\025.CMsgLob"
  "byEventPoints\022\032\n\022requested_hero_ids\030| \003("
  "\r\022;\n\025coach_friend_requests\030} \003(\0132\034.CMsgL"
  "obbyCoachFriendRequest\022\031\n\021is_in_steam_ch"
  "ina\030~ \001(\010\022\032\n\022with_scenario_save\030\177 \001(\010\022\034\n"
  "\023lobby_creation_time\030\200\001 \001(\r\022\036\n\025event_gam"
  "e_definition\030\201\001 \001(\t\0228\n\026extra_startup_mes"
  "sages\030\202\001 \003(\0132\027.CSODOTALobby.CExtraMsg\032)\n"
  "\tCExtraMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002 \001(\014"
  "\"d\n\005State\022\006\n\002UI\020\000\022\013\n\007READYUP\020\004\022\017\n\013SERVER"
  "SETUP\020\001\022\007\n\003RUN\020\002\022\014\n\010POSTGAME\020\003\022\014\n\010NOTREA"
  "DY\020\005\022\020\n\014SERVERASSIGN\020\006\"\342\001\n\tLobbyType\022\024\n\007"
  "INVALID\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014CASUAL_MATCH\020\000\022\014\n\010"
  "PRACTICE\020\001\022\022\n\016COOP_BOT_MATCH\020\004\022\025\n\021COMPET"
  "ITIVE_MATCH\020\007\022\023\n\017WEEKEND_TOURNEY\020\t\022\023\n\017LO"
  "CAL_BOT_MATCH\020\n\022\r\n\tSPECTATOR\020\013\022\017\n\013EVENT_"
  "MATCH\020\014\022\023\n\017NEW_PLAYER_POOL\020\016\022\025\n\021FEATURED"
  "_GAMEMODE\020\017\"D\n\022CSODOTAServerLobby\022.\n\013all"
  "_members\030\001 \003(\0132\031.CSODOTAServerLobbyMembe"
  "r\"D\n\022CSODOTAStaticLobby\022.\n\013all_members\030\001"
  " \003(\0132\031.CSODOTAStaticLobbyMember\"P\n\030CSODO"
  "TAServerStaticLobby\0224\n\013all_members\030\001 \003(\013"
  "2\037.CSODOTAServerStaticLobbyMember\"\216\004\n%CM"
  "sgAdditionalLobbyStartupAccountData\022\022\n\na"
  "ccount_id\030\001 \001(\r\0227\n\tplus_data\030\002 \001(\0132$.CMs"
  "gLobbyPlayerPlusSubscriptionData\022h\n\"unlo"
  "cked_chat_wheel_message_ranges\030\003 \003(\0132<.C"
  "MsgAdditionalLobbyStartupAccountData.Cha"
  "tWheelMessageRange\022h\n\"unlocked_ping_whee"
  "l_message_ranges\030\004 \003(\0132<.CMsgAdditionalL"
  "obbyStartupAccountData.PingWheelMessageR"
  "ange\032a\n\025ChatWheelMessageRange\022$\n\020message"
  "_id_start\030\001 \001(\r:\n4294967295\022\"\n\016message_i"
  "d_end\030\002 \001(\r:\n4294967295\032a\n\025PingWheelMess"
  "ageRange\022$\n\020message_id_start\030\001 \001(\r:\n4294"
  "967295\022\"\n\016message_id_end\030\002 \001(\r:\n42949672"
  "95\"!\n\037CMsgLobbyInitializationComplete\"(\n"
  "\030CMsgLobbyPlaytestDetails\022\014\n\004json\030\001 \001(\t\""
  "\211\002\n\030CMsgLocalServerGuildData\022\020\n\010guild_id"
  "\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT"
  "_ID_NONE\022\024\n\014guild_points\030\003 \001(\r\022\022\n\nguild_"
  "logo\030\004 \001(\004\022\033\n\023guild_primary_color\030\005 \001(\r\022"
  "\035\n\025guild_secondary_color\030\006 \001(\r\022\025\n\rguild_"
  "pattern\030\007 \001(\r\022\023\n\013guild_flags\030\010 \001(\r\022\037\n\027gu"
  "ild_weekly_percentile\030\t \001(\r\"\326\002\n\034CMsgLoca"
  "lServerFakeLobbyData\022\022\n\naccount_id\030\001 \001(\r"
  "\022+\n\014event_points\030\002 \003(\0132\025.CMsgLobbyEventP"
  "oints\022\032\n\022is_plus_subscriber\030\003 \001(\010\022\030\n\020pri"
  "mary_event_id\030\004 \001(\r\022\025\n\rfavorite_team\030\005 \001"
  "(\r\022\035\n\025favorite_team_quality\030\006 \001(\r\022-\n\ngui"
  "ld_info\030\007 \001(\0132\031.CMsgLocalServerGuildData"
  "\022\031\n\021teleport_fx_level\030\010 \001(\r\022\?\n\017additiona"
  "l_data\030\t \001(\0132&.CMsgAdditionalLobbyStartu"
  "pAccountData*\245\001\n\035ELobbyMemberCoachReques"
  "tState\022(\n$k_eLobbyMemberCoachRequestStat"
  "e_None\020\000\022,\n(k_eLobbyMemberCoachRequestSt"
  "ate_Accepted\020\001\022,\n(k_eLobbyMemberCoachReq"
  "uestState_Rejected\020\002*e\n\020LobbyDotaTVDelay"
  "\022\022\n\016LobbyDotaTV_10\020\000\022\023\n\017LobbyDotaTV_120\020"
  "\001\022\023\n\017LobbyDotaTV_300\020\002\022\023\n\017LobbyDotaTV_90"
  "0\020\003*\203\001\n\025LobbyDotaPauseSetting\022#\n\037LobbyDo"
  "taPauseSetting_Unlimited\020\000\022!\n\035LobbyDotaP"
  "auseSetting_Limited\020\001\022\"\n\036LobbyDotaPauseS"
  "etting_Disabled\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_deps[2] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto = {
    false, false, 9897, descriptor_table_protodef_dota_5fgcmessages_5fcommon_5flobby_2eproto,
    "dota_gcmessages_common_lobby.proto",
    &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_deps, 2, 31,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_5flobby_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto[0];
}
bool CSODOTALobby_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CSODOTALobby_State CSODOTALobby::UI;
constexpr CSODOTALobby_State CSODOTALobby::READYUP;
constexpr CSODOTALobby_State CSODOTALobby::SERVERSETUP;
constexpr CSODOTALobby_State CSODOTALobby::RUN;
constexpr CSODOTALobby_State CSODOTALobby::POSTGAME;
constexpr CSODOTALobby_State CSODOTALobby::NOTREADY;
constexpr CSODOTALobby_State CSODOTALobby::SERVERASSIGN;
constexpr CSODOTALobby_State CSODOTALobby::State_MIN;
constexpr CSODOTALobby_State CSODOTALobby::State_MAX;
constexpr int CSODOTALobby::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_LobbyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto[1];
}
bool CSODOTALobby_LobbyType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 4:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CSODOTALobby_LobbyType CSODOTALobby::INVALID;
constexpr CSODOTALobby_LobbyType CSODOTALobby::CASUAL_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::PRACTICE;
constexpr CSODOTALobby_LobbyType CSODOTALobby::COOP_BOT_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::COMPETITIVE_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::WEEKEND_TOURNEY;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LOCAL_BOT_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::SPECTATOR;
constexpr CSODOTALobby_LobbyType CSODOTALobby::EVENT_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::NEW_PLAYER_POOL;
constexpr CSODOTALobby_LobbyType CSODOTALobby::FEATURED_GAMEMODE;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MIN;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MAX;
constexpr int CSODOTALobby::LobbyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELobbyMemberCoachRequestState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto[2];
}
bool ELobbyMemberCoachRequestState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaTVDelay_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto[3];
}
bool LobbyDotaTVDelay_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaPauseSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5flobby_2eproto[4];
}
bool LobbyDotaPauseSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgLobbyCoachFriendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyCoachFriendRequest>()._impl_._has_bits_);
  static void set_has_coach_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgLobbyCoachFriendRequest::CMsgLobbyCoachFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyCoachFriendRequest)
}
CMsgLobbyCoachFriendRequest::CMsgLobbyCoachFriendRequest(const CMsgLobbyCoachFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyCoachFriendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coach_account_id_){}
    , decltype(_impl_.player_account_id_){}
    , decltype(_impl_.request_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.coach_account_id_, &from._impl_.coach_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_state_) -
    reinterpret_cast<char*>(&_impl_.coach_account_id_)) + sizeof(_impl_.request_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyCoachFriendRequest)
}

inline void CMsgLobbyCoachFriendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coach_account_id_){0u}
    , decltype(_impl_.player_account_id_){0u}
    , decltype(_impl_.request_state_){0}
  };
}

CMsgLobbyCoachFriendRequest::~CMsgLobbyCoachFriendRequest() {
  // @@protoc_insertion_point(destructor:CMsgLobbyCoachFriendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyCoachFriendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLobbyCoachFriendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyCoachFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyCoachFriendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.coach_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.request_state_) -
        reinterpret_cast<char*>(&_impl_.coach_account_id_)) + sizeof(_impl_.request_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyCoachFriendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 coach_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_coach_account_id(&has_bits);
          _impl_.coach_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_account_id(&has_bits);
          _impl_.player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELobbyMemberCoachRequestState_IsValid(val))) {
            _internal_set_request_state(static_cast<::ELobbyMemberCoachRequestState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyCoachFriendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyCoachFriendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 coach_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_coach_account_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_account_id(), target);
  }

  // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_request_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyCoachFriendRequest)
  return target;
}

size_t CMsgLobbyCoachFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyCoachFriendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 coach_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coach_account_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_account_id());
    }

    // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_request_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyCoachFriendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyCoachFriendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyCoachFriendRequest::GetClassData() const { return &_class_data_; }


void CMsgLobbyCoachFriendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyCoachFriendRequest*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyCoachFriendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyCoachFriendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.coach_account_id_ = from._impl_.coach_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_account_id_ = from._impl_.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.request_state_ = from._impl_.request_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyCoachFriendRequest::CopyFrom(const CMsgLobbyCoachFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyCoachFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyCoachFriendRequest::IsInitialized() const {
  return true;
}

void CMsgLobbyCoachFriendRequest::InternalSwap(CMsgLobbyCoachFriendRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyCoachFriendRequest, _impl_.request_state_)
      + sizeof(CMsgLobbyCoachFriendRequest::_impl_.request_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyCoachFriendRequest, _impl_.coach_account_id_)>(
          reinterpret_cast<char*>(&_impl_.coach_account_id_),
          reinterpret_cast<char*>(&other->_impl_.coach_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyCoachFriendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[0]);
}

// ===================================================================

class CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_badge_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
}
CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.hero_badge_xp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_badge_xp_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.hero_badge_xp_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
}

inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.hero_badge_xp_){0u}
  };
}

CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::~CMsgLobbyPlayerPlusSubscriptionData_HeroBadge() {
  // @@protoc_insertion_point(destructor:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_badge_xp_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.hero_badge_xp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_badge_xp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_badge_xp(&has_bits);
          _impl_.hero_badge_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 hero_badge_xp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_badge_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  return target;
}

size_t CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 hero_badge_xp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_badge_xp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::GetClassData() const { return &_class_data_; }


void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_badge_xp_ = from._impl_.hero_badge_xp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::IsInitialized() const {
  return true;
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::InternalSwap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _impl_.hero_badge_xp_)
      + sizeof(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_impl_.hero_badge_xp_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[1]);
}

// ===================================================================

class CMsgLobbyPlayerPlusSubscriptionData::_Internal {
 public:
};

CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyPlayerPlusSubscriptionData)
}
CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData(const CMsgLobbyPlayerPlusSubscriptionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyPlayerPlusSubscriptionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_badges_){from._impl_.hero_badges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyPlayerPlusSubscriptionData)
}

inline void CMsgLobbyPlayerPlusSubscriptionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_badges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgLobbyPlayerPlusSubscriptionData::~CMsgLobbyPlayerPlusSubscriptionData() {
  // @@protoc_insertion_point(destructor:CMsgLobbyPlayerPlusSubscriptionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyPlayerPlusSubscriptionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_badges_.~RepeatedPtrField();
}

void CMsgLobbyPlayerPlusSubscriptionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyPlayerPlusSubscriptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyPlayerPlusSubscriptionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hero_badges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyPlayerPlusSubscriptionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_badges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyPlayerPlusSubscriptionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyPlayerPlusSubscriptionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hero_badges_size()); i < n; i++) {
    const auto& repfield = this->_internal_hero_badges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyPlayerPlusSubscriptionData)
  return target;
}

size_t CMsgLobbyPlayerPlusSubscriptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyPlayerPlusSubscriptionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  total_size += 1UL * this->_internal_hero_badges_size();
  for (const auto& msg : this->_impl_.hero_badges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyPlayerPlusSubscriptionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyPlayerPlusSubscriptionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyPlayerPlusSubscriptionData::GetClassData() const { return &_class_data_; }


void CMsgLobbyPlayerPlusSubscriptionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyPlayerPlusSubscriptionData*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyPlayerPlusSubscriptionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyPlayerPlusSubscriptionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hero_badges_.MergeFrom(from._impl_.hero_badges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyPlayerPlusSubscriptionData::CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyPlayerPlusSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlayerPlusSubscriptionData::IsInitialized() const {
  return true;
}

void CMsgLobbyPlayerPlusSubscriptionData::InternalSwap(CMsgLobbyPlayerPlusSubscriptionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hero_badges_.InternalSwap(&other->_impl_.hero_badges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyPlayerPlusSubscriptionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[2]);
}

// ===================================================================

class CMsgLobbyEventPoints_PeriodicResourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_PeriodicResourceData>()._impl_._has_bits_);
  static void set_has_periodic_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgLobbyEventPoints_PeriodicResourceData::CMsgLobbyEventPoints_PeriodicResourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.PeriodicResourceData)
}
CMsgLobbyEventPoints_PeriodicResourceData::CMsgLobbyEventPoints_PeriodicResourceData(const CMsgLobbyEventPoints_PeriodicResourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyEventPoints_PeriodicResourceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.periodic_resource_id_){}
    , decltype(_impl_.remaining_){}
    , decltype(_impl_.max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.periodic_resource_id_, &from._impl_.periodic_resource_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.periodic_resource_id_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.PeriodicResourceData)
}

inline void CMsgLobbyEventPoints_PeriodicResourceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.periodic_resource_id_){0u}
    , decltype(_impl_.remaining_){0u}
    , decltype(_impl_.max_){0u}
  };
}

CMsgLobbyEventPoints_PeriodicResourceData::~CMsgLobbyEventPoints_PeriodicResourceData() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.PeriodicResourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyEventPoints_PeriodicResourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLobbyEventPoints_PeriodicResourceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyEventPoints_PeriodicResourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.PeriodicResourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.periodic_resource_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.periodic_resource_id_)) + sizeof(_impl_.max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_PeriodicResourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 periodic_resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_periodic_resource_id(&has_bits);
          _impl_.periodic_resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_remaining(&has_bits);
          _impl_.remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyEventPoints_PeriodicResourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.PeriodicResourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 periodic_resource_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_periodic_resource_id(), target);
  }

  // optional uint32 remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remaining(), target);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.PeriodicResourceData)
  return target;
}

size_t CMsgLobbyEventPoints_PeriodicResourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.PeriodicResourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 periodic_resource_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_periodic_resource_id());
    }

    // optional uint32 remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remaining());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyEventPoints_PeriodicResourceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyEventPoints_PeriodicResourceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyEventPoints_PeriodicResourceData::GetClassData() const { return &_class_data_; }


void CMsgLobbyEventPoints_PeriodicResourceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyEventPoints_PeriodicResourceData*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyEventPoints_PeriodicResourceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.PeriodicResourceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.periodic_resource_id_ = from._impl_.periodic_resource_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remaining_ = from._impl_.remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyEventPoints_PeriodicResourceData::CopyFrom(const CMsgLobbyEventPoints_PeriodicResourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.PeriodicResourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_PeriodicResourceData::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_PeriodicResourceData::InternalSwap(CMsgLobbyEventPoints_PeriodicResourceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_PeriodicResourceData, _impl_.max_)
      + sizeof(CMsgLobbyEventPoints_PeriodicResourceData::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_PeriodicResourceData, _impl_.periodic_resource_id_)>(
          reinterpret_cast<char*>(&_impl_.periodic_resource_id_),
          reinterpret_cast<char*>(&other->_impl_.periodic_resource_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_PeriodicResourceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[3]);
}

// ===================================================================

class CMsgLobbyEventPoints_NetworkedEventAction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_NetworkedEventAction>()._impl_._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_times_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyEventPoints_NetworkedEventAction::CMsgLobbyEventPoints_NetworkedEventAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.NetworkedEventAction)
}
CMsgLobbyEventPoints_NetworkedEventAction::CMsgLobbyEventPoints_NetworkedEventAction(const CMsgLobbyEventPoints_NetworkedEventAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyEventPoints_NetworkedEventAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_id_){}
    , decltype(_impl_.times_granted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.action_id_, &from._impl_.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.times_granted_) -
    reinterpret_cast<char*>(&_impl_.action_id_)) + sizeof(_impl_.times_granted_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.NetworkedEventAction)
}

inline void CMsgLobbyEventPoints_NetworkedEventAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_id_){0u}
    , decltype(_impl_.times_granted_){0u}
  };
}

CMsgLobbyEventPoints_NetworkedEventAction::~CMsgLobbyEventPoints_NetworkedEventAction() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.NetworkedEventAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyEventPoints_NetworkedEventAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLobbyEventPoints_NetworkedEventAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyEventPoints_NetworkedEventAction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.NetworkedEventAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.times_granted_) -
        reinterpret_cast<char*>(&_impl_.action_id_)) + sizeof(_impl_.times_granted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_NetworkedEventAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          _impl_.action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 times_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_times_granted(&has_bits);
          _impl_.times_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyEventPoints_NetworkedEventAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.NetworkedEventAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // optional uint32 times_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_times_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.NetworkedEventAction)
  return target;
}

size_t CMsgLobbyEventPoints_NetworkedEventAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.NetworkedEventAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_action_id());
    }

    // optional uint32 times_granted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_times_granted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyEventPoints_NetworkedEventAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyEventPoints_NetworkedEventAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyEventPoints_NetworkedEventAction::GetClassData() const { return &_class_data_; }


void CMsgLobbyEventPoints_NetworkedEventAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyEventPoints_NetworkedEventAction*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyEventPoints_NetworkedEventAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.NetworkedEventAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.action_id_ = from._impl_.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.times_granted_ = from._impl_.times_granted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyEventPoints_NetworkedEventAction::CopyFrom(const CMsgLobbyEventPoints_NetworkedEventAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.NetworkedEventAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_NetworkedEventAction::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_NetworkedEventAction::InternalSwap(CMsgLobbyEventPoints_NetworkedEventAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_NetworkedEventAction, _impl_.times_granted_)
      + sizeof(CMsgLobbyEventPoints_NetworkedEventAction::_impl_.times_granted_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_NetworkedEventAction, _impl_.action_id_)>(
          reinterpret_cast<char*>(&_impl_.action_id_),
          reinterpret_cast<char*>(&other->_impl_.action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_NetworkedEventAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[4]);
}

// ===================================================================

class CMsgLobbyEventPoints_AccountPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_AccountPoints>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_normal_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_premium_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_active_effects_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wager_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tip_amount_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_active_event_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_teleport_fx_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.AccountPoints)
}
CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyEventPoints_AccountPoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_game_custom_actions_){from._impl_.event_game_custom_actions_}
    , decltype(_impl_.networked_event_actions_){from._impl_.networked_event_actions_}
    , decltype(_impl_.periodic_resources_){from._impl_.periodic_resources_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.normal_points_){}
    , decltype(_impl_.premium_points_){}
    , decltype(_impl_.owned_){}
    , decltype(_impl_.active_effects_mask_){}
    , decltype(_impl_.wager_streak_){}
    , decltype(_impl_.tip_amount_index_){}
    , decltype(_impl_.active_event_season_id_){}
    , decltype(_impl_.teleport_fx_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teleport_fx_level_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.teleport_fx_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.AccountPoints)
}

inline void CMsgLobbyEventPoints_AccountPoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_game_custom_actions_){arena}
    , decltype(_impl_.networked_event_actions_){arena}
    , decltype(_impl_.periodic_resources_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.normal_points_){0u}
    , decltype(_impl_.premium_points_){0u}
    , decltype(_impl_.owned_){false}
    , decltype(_impl_.active_effects_mask_){uint64_t{0u}}
    , decltype(_impl_.wager_streak_){0u}
    , decltype(_impl_.tip_amount_index_){0u}
    , decltype(_impl_.active_event_season_id_){0u}
    , decltype(_impl_.teleport_fx_level_){0u}
  };
}

CMsgLobbyEventPoints_AccountPoints::~CMsgLobbyEventPoints_AccountPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.AccountPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyEventPoints_AccountPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_game_custom_actions_.~RepeatedPtrField();
  _impl_.networked_event_actions_.~RepeatedPtrField();
  _impl_.periodic_resources_.~RepeatedPtrField();
}

void CMsgLobbyEventPoints_AccountPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyEventPoints_AccountPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.AccountPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_game_custom_actions_.Clear();
  _impl_.networked_event_actions_.Clear();
  _impl_.periodic_resources_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.active_event_season_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.active_event_season_id_));
  }
  _impl_.teleport_fx_level_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_AccountPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 normal_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_normal_points(&has_bits);
          _impl_.normal_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 premium_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_premium_points(&has_bits);
          _impl_.premium_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool owned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_owned(&has_bits);
          _impl_.owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 active_effects_mask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_active_effects_mask(&has_bits);
          _impl_.active_effects_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wager_streak = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_wager_streak(&has_bits);
          _impl_.wager_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.NetworkedEventAction event_game_custom_actions = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_game_custom_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tip_amount_index = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tip_amount_index(&has_bits);
          _impl_.tip_amount_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_event_season_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_active_event_season_id(&has_bits);
          _impl_.active_event_season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teleport_fx_level = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_teleport_fx_level(&has_bits);
          _impl_.teleport_fx_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.NetworkedEventAction networked_event_actions = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_networked_event_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.PeriodicResourceData periodic_resources = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_periodic_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyEventPoints_AccountPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.AccountPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_normal_points(), target);
  }

  // optional uint32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_premium_points(), target);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_owned(), target);
  }

  // optional uint64 active_effects_mask = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_active_effects_mask(), target);
  }

  // optional uint32 wager_streak = 23;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_wager_streak(), target);
  }

  // repeated .CMsgLobbyEventPoints.NetworkedEventAction event_game_custom_actions = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_game_custom_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_game_custom_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 tip_amount_index = 26;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tip_amount_index(), target);
  }

  // optional uint32 active_event_season_id = 27;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_active_event_season_id(), target);
  }

  // optional uint32 teleport_fx_level = 28;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_teleport_fx_level(), target);
  }

  // repeated .CMsgLobbyEventPoints.NetworkedEventAction networked_event_actions = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_networked_event_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_networked_event_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgLobbyEventPoints.PeriodicResourceData periodic_resources = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_periodic_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_periodic_resources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.AccountPoints)
  return target;
}

size_t CMsgLobbyEventPoints_AccountPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.AccountPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyEventPoints.NetworkedEventAction event_game_custom_actions = 25;
  total_size += 2UL * this->_internal_event_game_custom_actions_size();
  for (const auto& msg : this->_impl_.event_game_custom_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgLobbyEventPoints.NetworkedEventAction networked_event_actions = 30;
  total_size += 2UL * this->_internal_networked_event_actions_size();
  for (const auto& msg : this->_impl_.networked_event_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgLobbyEventPoints.PeriodicResourceData periodic_resources = 31;
  total_size += 2UL * this->_internal_periodic_resources_size();
  for (const auto& msg : this->_impl_.periodic_resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 normal_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normal_points());
    }

    // optional uint32 premium_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_premium_points());
    }

    // optional bool owned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 active_effects_mask = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_active_effects_mask());
    }

    // optional uint32 wager_streak = 23;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_wager_streak());
    }

    // optional uint32 tip_amount_index = 26;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tip_amount_index());
    }

    // optional uint32 active_event_season_id = 27;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_active_event_season_id());
    }

  }
  // optional uint32 teleport_fx_level = 28;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_teleport_fx_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyEventPoints_AccountPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyEventPoints_AccountPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyEventPoints_AccountPoints::GetClassData() const { return &_class_data_; }


void CMsgLobbyEventPoints_AccountPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyEventPoints_AccountPoints*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyEventPoints_AccountPoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.AccountPoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_game_custom_actions_.MergeFrom(from._impl_.event_game_custom_actions_);
  _this->_impl_.networked_event_actions_.MergeFrom(from._impl_.networked_event_actions_);
  _this->_impl_.periodic_resources_.MergeFrom(from._impl_.periodic_resources_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.normal_points_ = from._impl_.normal_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.premium_points_ = from._impl_.premium_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.owned_ = from._impl_.owned_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.active_effects_mask_ = from._impl_.active_effects_mask_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.wager_streak_ = from._impl_.wager_streak_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tip_amount_index_ = from._impl_.tip_amount_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.active_event_season_id_ = from._impl_.active_event_season_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_teleport_fx_level(from._internal_teleport_fx_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.AccountPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_AccountPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_AccountPoints::InternalSwap(CMsgLobbyEventPoints_AccountPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.event_game_custom_actions_.InternalSwap(&other->_impl_.event_game_custom_actions_);
  _impl_.networked_event_actions_.InternalSwap(&other->_impl_.networked_event_actions_);
  _impl_.periodic_resources_.InternalSwap(&other->_impl_.periodic_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _impl_.teleport_fx_level_)
      + sizeof(CMsgLobbyEventPoints_AccountPoints::_impl_.teleport_fx_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_AccountPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[5]);
}

// ===================================================================

class CMsgLobbyEventPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyEventPoints::CMsgLobbyEventPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints)
}
CMsgLobbyEventPoints::CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyEventPoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_points_){from._impl_.account_points_}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_id_ = from._impl_.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints)
}

inline void CMsgLobbyEventPoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_points_){arena}
    , decltype(_impl_.event_id_){0u}
  };
}

CMsgLobbyEventPoints::~CMsgLobbyEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyEventPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_points_.~RepeatedPtrField();
}

void CMsgLobbyEventPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_points_.Clear();
  _impl_.event_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyEventPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_account_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_account_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints)
  return target;
}

size_t CMsgLobbyEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  total_size += 1UL * this->_internal_account_points_size();
  for (const auto& msg : this->_impl_.account_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 event_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyEventPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyEventPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyEventPoints::GetClassData() const { return &_class_data_; }


void CMsgLobbyEventPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyEventPoints*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyEventPoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_points_.MergeFrom(from._impl_.account_points_);
  if (from._internal_has_event_id()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyEventPoints::CopyFrom(const CMsgLobbyEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints::InternalSwap(CMsgLobbyEventPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_points_.InternalSwap(&other->_impl_.account_points_);
  swap(_impl_.event_id_, other->_impl_.event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[6]);
}

// ===================================================================

class CMsgLobbyEventGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventGameData>()._impl_._has_bits_);
  static void set_has_game_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_window_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyEventGameData::CMsgLobbyEventGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventGameData)
}
CMsgLobbyEventGameData::CMsgLobbyEventGameData(const CMsgLobbyEventGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyEventGameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_seed_){}
    , decltype(_impl_.event_window_start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_seed_, &from._impl_.game_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_window_start_time_) -
    reinterpret_cast<char*>(&_impl_.game_seed_)) + sizeof(_impl_.event_window_start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventGameData)
}

inline void CMsgLobbyEventGameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_seed_){0u}
    , decltype(_impl_.event_window_start_time_){0u}
  };
}

CMsgLobbyEventGameData::~CMsgLobbyEventGameData() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventGameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyEventGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLobbyEventGameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyEventGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventGameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.game_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_window_start_time_) -
        reinterpret_cast<char*>(&_impl_.game_seed_)) + sizeof(_impl_.event_window_start_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventGameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_seed(&has_bits);
          _impl_.game_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_window_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_window_start_time(&has_bits);
          _impl_.event_window_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyEventGameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventGameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_seed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_seed(), target);
  }

  // optional uint32 event_window_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_window_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventGameData)
  return target;
}

size_t CMsgLobbyEventGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventGameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 game_seed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_seed());
    }

    // optional uint32 event_window_start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_window_start_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyEventGameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyEventGameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyEventGameData::GetClassData() const { return &_class_data_; }


void CMsgLobbyEventGameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyEventGameData*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyEventGameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventGameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_seed_ = from._impl_.game_seed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_window_start_time_ = from._impl_.event_window_start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyEventGameData::CopyFrom(const CMsgLobbyEventGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventGameData::IsInitialized() const {
  return true;
}

void CMsgLobbyEventGameData::InternalSwap(CMsgLobbyEventGameData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventGameData, _impl_.event_window_start_time_)
      + sizeof(CMsgLobbyEventGameData::_impl_.event_window_start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventGameData, _impl_.game_seed_)>(
          reinterpret_cast<char*>(&_impl_.game_seed_),
          reinterpret_cast<char*>(&other->_impl_.game_seed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventGameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[7]);
}

// ===================================================================

class CSODOTALobbyInvite_LobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobbyInvite_LobbyMember>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobbyInvite.LobbyMember)
}
CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTALobbyInvite_LobbyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.steam_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.steam_id_ = from._impl_.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite.LobbyMember)
}

inline void CSODOTALobbyInvite_LobbyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTALobbyInvite_LobbyMember::~CSODOTALobbyInvite_LobbyMember() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite.LobbyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTALobbyInvite_LobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CSODOTALobbyInvite_LobbyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTALobbyInvite_LobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobbyInvite.LobbyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobbyInvite_LobbyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobbyInvite.LobbyMember.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTALobbyInvite_LobbyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite.LobbyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.LobbyMember.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite.LobbyMember)
  return target;
}

size_t CSODOTALobbyInvite_LobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobbyInvite.LobbyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTALobbyInvite_LobbyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTALobbyInvite_LobbyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTALobbyInvite_LobbyMember::GetClassData() const { return &_class_data_; }


void CSODOTALobbyInvite_LobbyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTALobbyInvite_LobbyMember*>(&to_msg);
  auto& from = static_cast<const CSODOTALobbyInvite_LobbyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobbyInvite.LobbyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const CSODOTALobbyInvite_LobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobbyInvite.LobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite_LobbyMember::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite_LobbyMember::InternalSwap(CSODOTALobbyInvite_LobbyMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.steam_id_, other->_impl_.steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobbyInvite_LobbyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[8]);
}

// ===================================================================

class CSODOTALobbyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobbyInvite>()._impl_._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_invite_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSODOTALobbyInvite::CSODOTALobbyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobbyInvite)
}
CSODOTALobbyInvite::CSODOTALobbyInvite(const CSODOTALobbyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTALobbyInvite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.sender_name_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.invite_gid_){}
    , decltype(_impl_.custom_game_crc_){}
    , decltype(_impl_.custom_game_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_name()) {
    _this->_impl_.sender_name_.Set(from._internal_sender_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_game_timestamp_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite)
}

inline void CSODOTALobbyInvite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.sender_name_){}
    , decltype(_impl_.group_id_){uint64_t{0u}}
    , decltype(_impl_.sender_id_){uint64_t{0u}}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.invite_gid_){uint64_t{0u}}
    , decltype(_impl_.custom_game_crc_){uint64_t{0u}}
    , decltype(_impl_.custom_game_timestamp_){0u}
  };
  _impl_.sender_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTALobbyInvite::~CSODOTALobbyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTALobbyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.sender_name_.Destroy();
}

void CSODOTALobbyInvite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTALobbyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobbyInvite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sender_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_timestamp_) -
        reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.custom_game_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobbyInvite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string sender_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobbyInvite.sender_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_custom_game_id(&has_bits);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 invite_gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_invite_gid(&has_bits);
          _impl_.invite_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_custom_game_crc(&has_bits);
          _impl_.custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_custom_game_timestamp(&has_bits);
          _impl_.custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTALobbyInvite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.sender_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_name(), target);
  }

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 custom_game_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_custom_game_id(), target);
  }

  // optional fixed64 invite_gid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_invite_gid(), target);
  }

  // optional fixed64 custom_game_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_custom_game_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite)
  return target;
}

size_t CSODOTALobbyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobbyInvite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_name());
    }

    // optional uint64 group_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_custom_game_id());
    }

    // optional fixed64 invite_gid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 custom_game_crc = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTALobbyInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTALobbyInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTALobbyInvite::GetClassData() const { return &_class_data_; }


void CSODOTALobbyInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTALobbyInvite*>(&to_msg);
  auto& from = static_cast<const CSODOTALobbyInvite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobbyInvite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sender_name(from._internal_sender_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sender_id_ = from._impl_.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.invite_gid_ = from._impl_.invite_gid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.custom_game_crc_ = from._impl_.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.custom_game_timestamp_ = from._impl_.custom_game_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTALobbyInvite::CopyFrom(const CSODOTALobbyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite::InternalSwap(CSODOTALobbyInvite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_name_, lhs_arena,
      &other->_impl_.sender_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTALobbyInvite, _impl_.custom_game_timestamp_)
      + sizeof(CSODOTALobbyInvite::_impl_.custom_game_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CSODOTALobbyInvite, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobbyInvite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[9]);
}

// ===================================================================

class CSODOTALobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobbyMember>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_meta_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_meta_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_meta_xp_awarded(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_leaver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_leaver_actions(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_coach_team(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_coach_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_pwrd_cyber_cafe_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_pwrd_cyber_cafe_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_cameraman(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_search_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_favorite_team_packed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_can_earn_rewards(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_live_spectator_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_was_mvp_last_game(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_rank_mmr_boost_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_queue_point_adjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_rank_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_reports_available(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_live_spectator_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_comms_reports_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

void CSODOTALobbyMember::clear_pending_awards() {
  _impl_.pending_awards_.Clear();
}
void CSODOTALobbyMember::clear_pending_awards_on_victory() {
  _impl_.pending_awards_on_victory_.Clear();
}
CSODOTALobbyMember::CSODOTALobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobbyMember)
}
CSODOTALobbyMember::CSODOTALobbyMember(const CSODOTALobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTALobbyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disabled_hero_id_){from._impl_.disabled_hero_id_}
    , decltype(_impl_.enabled_hero_id_){from._impl_.enabled_hero_id_}
    , decltype(_impl_.custom_game_product_ids_){from._impl_.custom_game_product_ids_}
    , decltype(_impl_.disabled_random_hero_bits_){from._impl_.disabled_random_hero_bits_}
    , decltype(_impl_.pending_awards_){from._impl_.pending_awards_}
    , decltype(_impl_.pending_awards_on_victory_){from._impl_.pending_awards_on_victory_}
    , decltype(_impl_.coached_account_ids_){from._impl_.coached_account_ids_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.pwrd_cyber_cafe_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.meta_level_){}
    , decltype(_impl_.party_id_){}
    , decltype(_impl_.meta_xp_){}
    , decltype(_impl_.meta_xp_awarded_){}
    , decltype(_impl_.leaver_status_){}
    , decltype(_impl_.pwrd_cyber_cafe_id_){}
    , decltype(_impl_.leaver_actions_){}
    , decltype(_impl_.rank_change_){}
    , decltype(_impl_.favorite_team_packed_){}
    , decltype(_impl_.search_match_type_){}
    , decltype(_impl_.cameraman_){}
    , decltype(_impl_.is_plus_subscriber_){}
    , decltype(_impl_.can_earn_rewards_){}
    , decltype(_impl_.was_mvp_last_game_){}
    , decltype(_impl_.lane_selection_flags_){}
    , decltype(_impl_.coach_rating_){}
    , decltype(_impl_.rank_mmr_boost_type_){}
    , decltype(_impl_.queue_point_adjustment_){}
    , decltype(_impl_.rank_tier_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.reports_available_){}
    , decltype(_impl_.is_steam_china_){}
    , decltype(_impl_.live_spectator_account_id_){}
    , decltype(_impl_.comms_reports_available_){}
    , decltype(_impl_.live_spectator_team_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.coach_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pwrd_cyber_cafe_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwrd_cyber_cafe_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pwrd_cyber_cafe_name()) {
    _this->_impl_.pwrd_cyber_cafe_name_.Set(from._internal_pwrd_cyber_cafe_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coach_team_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.coach_team_));
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyMember)
}

inline void CSODOTALobbyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disabled_hero_id_){arena}
    , decltype(_impl_.enabled_hero_id_){arena}
    , decltype(_impl_.custom_game_product_ids_){arena}
    , decltype(_impl_.disabled_random_hero_bits_){arena}
    , decltype(_impl_.pending_awards_){arena}
    , decltype(_impl_.pending_awards_on_victory_){arena}
    , decltype(_impl_.coached_account_ids_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.pwrd_cyber_cafe_name_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.meta_level_){0u}
    , decltype(_impl_.party_id_){uint64_t{0u}}
    , decltype(_impl_.meta_xp_){0u}
    , decltype(_impl_.meta_xp_awarded_){0u}
    , decltype(_impl_.leaver_status_){0}
    , decltype(_impl_.pwrd_cyber_cafe_id_){0u}
    , decltype(_impl_.leaver_actions_){0u}
    , decltype(_impl_.rank_change_){0}
    , decltype(_impl_.favorite_team_packed_){uint64_t{0u}}
    , decltype(_impl_.search_match_type_){0}
    , decltype(_impl_.cameraman_){false}
    , decltype(_impl_.is_plus_subscriber_){false}
    , decltype(_impl_.can_earn_rewards_){false}
    , decltype(_impl_.was_mvp_last_game_){false}
    , decltype(_impl_.lane_selection_flags_){0u}
    , decltype(_impl_.coach_rating_){0u}
    , decltype(_impl_.rank_mmr_boost_type_){0}
    , decltype(_impl_.queue_point_adjustment_){0}
    , decltype(_impl_.rank_tier_){0}
    , decltype(_impl_.title_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.reports_available_){0u}
    , decltype(_impl_.is_steam_china_){false}
    , decltype(_impl_.live_spectator_account_id_){0u}
    , decltype(_impl_.comms_reports_available_){0u}
    , decltype(_impl_.live_spectator_team_){5}
    , decltype(_impl_.channel_){6u}
    , decltype(_impl_.coach_team_){5}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pwrd_cyber_cafe_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwrd_cyber_cafe_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTALobbyMember::~CSODOTALobbyMember() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTALobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disabled_hero_id_.~RepeatedField();
  _impl_.enabled_hero_id_.~RepeatedField();
  _impl_.custom_game_product_ids_.~RepeatedField();
  _impl_.disabled_random_hero_bits_.~RepeatedField();
  _impl_.pending_awards_.~RepeatedPtrField();
  _impl_.pending_awards_on_victory_.~RepeatedPtrField();
  _impl_.coached_account_ids_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.pwrd_cyber_cafe_name_.Destroy();
}

void CSODOTALobbyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTALobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobbyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.disabled_hero_id_.Clear();
  _impl_.enabled_hero_id_.Clear();
  _impl_.custom_game_product_ids_.Clear();
  _impl_.disabled_random_hero_bits_.Clear();
  _impl_.pending_awards_.Clear();
  _impl_.pending_awards_on_victory_.Clear();
  _impl_.coached_account_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pwrd_cyber_cafe_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.party_id_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.party_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.meta_xp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.search_match_type_) -
        reinterpret_cast<char*>(&_impl_.meta_xp_)) + sizeof(_impl_.search_match_type_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.cameraman_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.queue_point_adjustment_) -
        reinterpret_cast<char*>(&_impl_.cameraman_)) + sizeof(_impl_.queue_point_adjustment_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.rank_tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.comms_reports_available_) -
        reinterpret_cast<char*>(&_impl_.rank_tier_)) + sizeof(_impl_.comms_reports_available_));
    _impl_.live_spectator_team_ = 5;
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    _impl_.channel_ = 6u;
    _impl_.coach_team_ = 5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobbyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_id(&_impl_._has_bits_);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&_impl_._has_bits_);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobbyMember.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_slot(&_impl_._has_bits_);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 party_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_party_id(&_impl_._has_bits_);
          _impl_.party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 meta_level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_meta_level(&_impl_._has_bits_);
          _impl_.meta_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 meta_xp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_meta_xp(&_impl_._has_bits_);
          _impl_.meta_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 meta_xp_awarded = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_meta_xp_awarded(&_impl_._has_bits_);
          _impl_.meta_xp_awarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALeaverStatus_t_IsValid(val))) {
            _internal_set_leaver_status(static_cast<::DOTALeaverStatus_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel = 17 [default = 6];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_channel(&_impl_._has_bits_);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 disabled_hero_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_disabled_hero_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_disabled_hero_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enabled_hero_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enabled_hero_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enabled_hero_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_coach_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pwrd_cyber_cafe_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_pwrd_cyber_cafe_id(&_impl_._has_bits_);
          _impl_.pwrd_cyber_cafe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pwrd_cyber_cafe_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_pwrd_cyber_cafe_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobbyMember.pwrd_cyber_cafe_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leaver_actions = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_leaver_actions(&_impl_._has_bits_);
          _impl_.leaver_actions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 rank_change = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_rank_change(&_impl_._has_bits_);
          _impl_.rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cameraman = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_cameraman(&_impl_._has_bits_);
          _impl_.cameraman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 custom_game_product_ids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_custom_game_product_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_custom_game_product_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_search_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 favorite_team_packed = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_favorite_team_packed(&_impl_._has_bits_);
          _impl_.favorite_team_packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_plus_subscriber(&_impl_._has_bits_);
          _impl_.is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_lane_selection_flags(&_impl_._has_bits_);
          _impl_.lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_earn_rewards = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_can_earn_rewards(&_impl_._has_bits_);
          _impl_.can_earn_rewards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_live_spectator_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 disabled_random_hero_bits = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_disabled_random_hero_bits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<333>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_disabled_random_hero_bits(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coach_rating = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_coach_rating(&_impl_._has_bits_);
          _impl_.coach_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_mvp_last_game = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_was_mvp_last_game(&_impl_._has_bits_);
          _impl_.was_mvp_last_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgPendingEventAward pending_awards = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pending_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pending_awards_on_victory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAMMRBoostType_IsValid(val))) {
            _internal_set_rank_mmr_boost_type(static_cast<::EDOTAMMRBoostType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional sint32 queue_point_adjustment = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_queue_point_adjustment(&_impl_._has_bits_);
          _impl_.queue_point_adjustment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank_tier = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_rank_tier(&_impl_._has_bits_);
          _impl_.rank_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 title = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_title(&_impl_._has_bits_);
          _impl_.title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_id = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_guild_id(&_impl_._has_bits_);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reports_available = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_reports_available(&_impl_._has_bits_);
          _impl_.reports_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 coached_account_ids = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_coached_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<424>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_coached_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steam_china = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_steam_china(&_impl_._has_bits_);
          _impl_.is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 live_spectator_account_id = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_live_spectator_account_id(&_impl_._has_bits_);
          _impl_.live_spectator_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 comms_reports_available = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_comms_reports_available(&_impl_._has_bits_);
          _impl_.comms_reports_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTALobbyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_team(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyMember.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // optional uint32 slot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_slot(), target);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_party_id(), target);
  }

  // optional uint32 meta_level = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_meta_level(), target);
  }

  // optional uint32 meta_xp = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_meta_xp(), target);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_meta_xp_awarded(), target);
  }

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_leaver_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 channel = 17 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_channel(), target);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0, n = this->_internal_disabled_hero_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_disabled_hero_id(i), target);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0, n = this->_internal_enabled_hero_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_enabled_hero_id(i), target);
  }

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_coach_team(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pwrd_cyber_cafe_id = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_pwrd_cyber_cafe_id(), target);
  }

  // optional string pwrd_cyber_cafe_name = 25;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pwrd_cyber_cafe_name().data(), static_cast<int>(this->_internal_pwrd_cyber_cafe_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyMember.pwrd_cyber_cafe_name");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_pwrd_cyber_cafe_name(), target);
  }

  // optional uint32 leaver_actions = 28;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_leaver_actions(), target);
  }

  // optional sint32 rank_change = 29;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(29, this->_internal_rank_change(), target);
  }

  // optional bool cameraman = 30;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_cameraman(), target);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0, n = this->_internal_custom_game_product_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_custom_game_product_ids(i), target);
  }

  // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      33, this->_internal_search_match_type(), target);
  }

  // optional uint64 favorite_team_packed = 35;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_favorite_team_packed(), target);
  }

  // optional bool is_plus_subscriber = 36;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_is_plus_subscriber(), target);
  }

  // optional uint32 lane_selection_flags = 38;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_lane_selection_flags(), target);
  }

  // optional bool can_earn_rewards = 39;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_can_earn_rewards(), target);
  }

  // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      40, this->_internal_live_spectator_team(), target);
  }

  // repeated fixed32 disabled_random_hero_bits = 41;
  for (int i = 0, n = this->_internal_disabled_random_hero_bits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(41, this->_internal_disabled_random_hero_bits(i), target);
  }

  // optional uint32 coach_rating = 42;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_coach_rating(), target);
  }

  // optional bool was_mvp_last_game = 43;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_was_mvp_last_game(), target);
  }

  // repeated .CMsgPendingEventAward pending_awards = 44;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pending_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_pending_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pending_awards_on_victory_size()); i < n; i++) {
    const auto& repfield = this->_internal_pending_awards_on_victory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      46, this->_internal_rank_mmr_boost_type(), target);
  }

  // optional sint32 queue_point_adjustment = 47;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(47, this->_internal_queue_point_adjustment(), target);
  }

  // optional int32 rank_tier = 48;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_rank_tier(), target);
  }

  // optional uint32 title = 50;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(50, this->_internal_title(), target);
  }

  // optional uint32 guild_id = 51;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(51, this->_internal_guild_id(), target);
  }

  // optional uint32 reports_available = 52;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(52, this->_internal_reports_available(), target);
  }

  // repeated uint32 coached_account_ids = 53;
  for (int i = 0, n = this->_internal_coached_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_coached_account_ids(i), target);
  }

  // optional bool is_steam_china = 54;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(54, this->_internal_is_steam_china(), target);
  }

  // optional uint32 live_spectator_account_id = 55;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(55, this->_internal_live_spectator_account_id(), target);
  }

  // optional uint32 comms_reports_available = 56;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(56, this->_internal_comms_reports_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyMember)
  return target;
}

size_t CSODOTALobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobbyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 disabled_hero_id = 20;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.disabled_hero_id_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_disabled_hero_id_size());
    total_size += data_size;
  }

  // repeated uint32 enabled_hero_id = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enabled_hero_id_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enabled_hero_id_size());
    total_size += data_size;
  }

  // repeated uint32 custom_game_product_ids = 31;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.custom_game_product_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_custom_game_product_ids_size());
    total_size += data_size;
  }

  // repeated fixed32 disabled_random_hero_bits = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_disabled_random_hero_bits_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_disabled_random_hero_bits_size());
    total_size += data_size;
  }

  // repeated .CMsgPendingEventAward pending_awards = 44;
  total_size += 2UL * this->_internal_pending_awards_size();
  for (const auto& msg : this->_impl_.pending_awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
  total_size += 2UL * this->_internal_pending_awards_on_victory_size();
  for (const auto& msg : this->_impl_.pending_awards_on_victory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 coached_account_ids = 53;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.coached_account_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_coached_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string pwrd_cyber_cafe_name = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pwrd_cyber_cafe_name());
    }

    // optional fixed64 id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 slot = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 meta_level = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_meta_level());
    }

    // optional uint64 party_id = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_party_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 meta_xp = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_meta_xp());
    }

    // optional uint32 meta_xp_awarded = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_meta_xp_awarded());
    }

    // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_leaver_status());
    }

    // optional uint32 pwrd_cyber_cafe_id = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pwrd_cyber_cafe_id());
    }

    // optional uint32 leaver_actions = 28;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_leaver_actions());
    }

    // optional sint32 rank_change = 29;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt32Size(
          this->_internal_rank_change());
    }

    // optional uint64 favorite_team_packed = 35;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_favorite_team_packed());
    }

    // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_search_match_type());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool cameraman = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_plus_subscriber = 36;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool can_earn_rewards = 39;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool was_mvp_last_game = 43;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint32 lane_selection_flags = 38;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 coach_rating = 42;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_coach_rating());
    }

    // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rank_mmr_boost_type());
    }

    // optional sint32 queue_point_adjustment = 47;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt32Size(
          this->_internal_queue_point_adjustment());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 rank_tier = 48;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_rank_tier());
    }

    // optional uint32 title = 50;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_title());
    }

    // optional uint32 guild_id = 51;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional uint32 reports_available = 52;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_reports_available());
    }

    // optional bool is_steam_china = 54;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 live_spectator_account_id = 55;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_live_spectator_account_id());
    }

    // optional uint32 comms_reports_available = 56;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_comms_reports_available());
    }

    // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_live_spectator_team());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 channel = 17 [default = 6];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

    // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_coach_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTALobbyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTALobbyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTALobbyMember::GetClassData() const { return &_class_data_; }


void CSODOTALobbyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTALobbyMember*>(&to_msg);
  auto& from = static_cast<const CSODOTALobbyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobbyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.disabled_hero_id_.MergeFrom(from._impl_.disabled_hero_id_);
  _this->_impl_.enabled_hero_id_.MergeFrom(from._impl_.enabled_hero_id_);
  _this->_impl_.custom_game_product_ids_.MergeFrom(from._impl_.custom_game_product_ids_);
  _this->_impl_.disabled_random_hero_bits_.MergeFrom(from._impl_.disabled_random_hero_bits_);
  _this->_impl_.pending_awards_.MergeFrom(from._impl_.pending_awards_);
  _this->_impl_.pending_awards_on_victory_.MergeFrom(from._impl_.pending_awards_on_victory_);
  _this->_impl_.coached_account_ids_.MergeFrom(from._impl_.coached_account_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pwrd_cyber_cafe_name(from._internal_pwrd_cyber_cafe_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.meta_level_ = from._impl_.meta_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.party_id_ = from._impl_.party_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.meta_xp_ = from._impl_.meta_xp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.meta_xp_awarded_ = from._impl_.meta_xp_awarded_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.leaver_status_ = from._impl_.leaver_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.pwrd_cyber_cafe_id_ = from._impl_.pwrd_cyber_cafe_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.leaver_actions_ = from._impl_.leaver_actions_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.rank_change_ = from._impl_.rank_change_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.favorite_team_packed_ = from._impl_.favorite_team_packed_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.search_match_type_ = from._impl_.search_match_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.cameraman_ = from._impl_.cameraman_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.is_plus_subscriber_ = from._impl_.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.can_earn_rewards_ = from._impl_.can_earn_rewards_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.was_mvp_last_game_ = from._impl_.was_mvp_last_game_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.lane_selection_flags_ = from._impl_.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.coach_rating_ = from._impl_.coach_rating_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.rank_mmr_boost_type_ = from._impl_.rank_mmr_boost_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.queue_point_adjustment_ = from._impl_.queue_point_adjustment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.rank_tier_ = from._impl_.rank_tier_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.title_ = from._impl_.title_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.reports_available_ = from._impl_.reports_available_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.is_steam_china_ = from._impl_.is_steam_china_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.live_spectator_account_id_ = from._impl_.live_spectator_account_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.comms_reports_available_ = from._impl_.comms_reports_available_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.live_spectator_team_ = from._impl_.live_spectator_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.coach_team_ = from._impl_.coach_team_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTALobbyMember::CopyFrom(const CSODOTALobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyMember::IsInitialized() const {
  return true;
}

void CSODOTALobbyMember::InternalSwap(CSODOTALobbyMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.disabled_hero_id_.InternalSwap(&other->_impl_.disabled_hero_id_);
  _impl_.enabled_hero_id_.InternalSwap(&other->_impl_.enabled_hero_id_);
  _impl_.custom_game_product_ids_.InternalSwap(&other->_impl_.custom_game_product_ids_);
  _impl_.disabled_random_hero_bits_.InternalSwap(&other->_impl_.disabled_random_hero_bits_);
  _impl_.pending_awards_.InternalSwap(&other->_impl_.pending_awards_);
  _impl_.pending_awards_on_victory_.InternalSwap(&other->_impl_.pending_awards_on_victory_);
  _impl_.coached_account_ids_.InternalSwap(&other->_impl_.coached_account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwrd_cyber_cafe_name_, lhs_arena,
      &other->_impl_.pwrd_cyber_cafe_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTALobbyMember, _impl_.comms_reports_available_)
      + sizeof(CSODOTALobbyMember::_impl_.comms_reports_available_)
      - PROTOBUF_FIELD_OFFSET(CSODOTALobbyMember, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.live_spectator_team_, other->_impl_.live_spectator_team_);
  swap(_impl_.channel_, other->_impl_.channel_);
  swap(_impl_.coach_team_, other->_impl_.coach_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobbyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[10]);
}

// ===================================================================

class CSODOTAServerLobbyMember::_Internal {
 public:
};

CSODOTAServerLobbyMember::CSODOTAServerLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CSODOTAServerLobbyMember)
}
CSODOTAServerLobbyMember::CSODOTAServerLobbyMember(const CSODOTAServerLobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSODOTAServerLobbyMember* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSODOTAServerLobbyMember)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAServerLobbyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAServerLobbyMember::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAServerLobbyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[11]);
}

// ===================================================================

class CSODOTAStaticLobbyMember::_Internal {
 public:
};

CSODOTAStaticLobbyMember::CSODOTAStaticLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CSODOTAStaticLobbyMember)
}
CSODOTAStaticLobbyMember::CSODOTAStaticLobbyMember(const CSODOTAStaticLobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSODOTAStaticLobbyMember* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSODOTAStaticLobbyMember)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAStaticLobbyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAStaticLobbyMember::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAStaticLobbyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[12]);
}

// ===================================================================

class CSODOTAServerStaticLobbyMember::_Internal {
 public:
};

CSODOTAServerStaticLobbyMember::CSODOTAServerStaticLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CSODOTAServerStaticLobbyMember)
}
CSODOTAServerStaticLobbyMember::CSODOTAServerStaticLobbyMember(const CSODOTAServerStaticLobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSODOTAServerStaticLobbyMember* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSODOTAServerStaticLobbyMember)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAServerStaticLobbyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAServerStaticLobbyMember::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAServerStaticLobbyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[13]);
}

// ===================================================================

class CLobbyTeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyTeamDetails>()._impl_._has_bits_);
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_home_team(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_challenge_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_challenge_match_token_account(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CLobbyTeamDetails::CLobbyTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CLobbyTeamDetails)
}
CLobbyTeamDetails::CLobbyTeamDetails(const CLobbyTeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLobbyTeamDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.team_logo_url_){}
    , decltype(_impl_.team_abbreviation_){}
    , decltype(_impl_.team_logo_){}
    , decltype(_impl_.team_base_logo_){}
    , decltype(_impl_.team_banner_logo_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.team_complete_){}
    , decltype(_impl_.is_home_team_){}
    , decltype(_impl_.is_challenge_match_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.rank_change_){}
    , decltype(_impl_.challenge_match_token_account_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_tag()) {
    _this->_impl_.team_tag_.Set(from._internal_team_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_logo_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_logo_url()) {
    _this->_impl_.team_logo_url_.Set(from._internal_team_logo_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_abbreviation()) {
    _this->_impl_.team_abbreviation_.Set(from._internal_team_abbreviation(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.team_logo_, &from._impl_.team_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.challenge_match_token_account_) -
    reinterpret_cast<char*>(&_impl_.team_logo_)) + sizeof(_impl_.challenge_match_token_account_));
  // @@protoc_insertion_point(copy_constructor:CLobbyTeamDetails)
}

inline void CLobbyTeamDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.team_logo_url_){}
    , decltype(_impl_.team_abbreviation_){}
    , decltype(_impl_.team_logo_){uint64_t{0u}}
    , decltype(_impl_.team_base_logo_){uint64_t{0u}}
    , decltype(_impl_.team_banner_logo_){uint64_t{0u}}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.team_complete_){false}
    , decltype(_impl_.is_home_team_){false}
    , decltype(_impl_.is_challenge_match_){false}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.rank_change_){0}
    , decltype(_impl_.challenge_match_token_account_){uint64_t{0u}}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_logo_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CLobbyTeamDetails::~CLobbyTeamDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTeamDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLobbyTeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_.Destroy();
  _impl_.team_tag_.Destroy();
  _impl_.team_logo_url_.Destroy();
  _impl_.team_abbreviation_.Destroy();
}

void CLobbyTeamDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLobbyTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyTeamDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.team_logo_)) + sizeof(_impl_.team_id_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.team_complete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.challenge_match_token_account_) -
        reinterpret_cast<char*>(&_impl_.team_complete_)) + sizeof(_impl_.challenge_match_token_account_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyTeamDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string team_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyTeamDetails.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyTeamDetails.team_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 team_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_team_logo(&has_bits);
          _impl_.team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 team_base_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_team_base_logo(&has_bits);
          _impl_.team_base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 team_banner_logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_team_banner_logo(&has_bits);
          _impl_.team_banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool team_complete = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_team_complete(&has_bits);
          _impl_.team_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 rank_change = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_rank_change(&has_bits);
          _impl_.rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_home_team = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_is_home_team(&has_bits);
          _impl_.is_home_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_challenge_match = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_challenge_match(&has_bits);
          _impl_.is_challenge_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 challenge_match_token_account = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_challenge_match_token_account(&has_bits);
          _impl_.challenge_match_token_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_logo_url = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyTeamDetails.team_logo_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_abbreviation = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyTeamDetails.team_abbreviation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyTeamDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTeamDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_tag(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_team_logo(), target);
  }

  // optional uint64 team_base_logo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_team_base_logo(), target);
  }

  // optional uint64 team_banner_logo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_team_banner_logo(), target);
  }

  // optional bool team_complete = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_team_complete(), target);
  }

  // optional uint32 rank = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rank(), target);
  }

  // optional sint32 rank_change = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(16, this->_internal_rank_change(), target);
  }

  // optional bool is_home_team = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_is_home_team(), target);
  }

  // optional bool is_challenge_match = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_challenge_match(), target);
  }

  // optional uint64 challenge_match_token_account = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_challenge_match_token_account(), target);
  }

  // optional string team_logo_url = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_team_logo_url(), target);
  }

  // optional string team_abbreviation = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_team_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTeamDetails)
  return target;
}

size_t CLobbyTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyTeamDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_logo_url = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional string team_abbreviation = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

    // optional uint64 team_logo = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_team_logo());
    }

    // optional uint64 team_base_logo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_team_base_logo());
    }

    // optional uint64 team_banner_logo = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_team_banner_logo());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool team_complete = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_home_team = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_challenge_match = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 rank = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
    }

    // optional sint32 rank_change = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt32Size(
          this->_internal_rank_change());
    }

    // optional uint64 challenge_match_token_account = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_challenge_match_token_account());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyTeamDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLobbyTeamDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyTeamDetails::GetClassData() const { return &_class_data_; }


void CLobbyTeamDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLobbyTeamDetails*>(&to_msg);
  auto& from = static_cast<const CLobbyTeamDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLobbyTeamDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.team_logo_ = from._impl_.team_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.team_base_logo_ = from._impl_.team_base_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.team_banner_logo_ = from._impl_.team_banner_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.team_complete_ = from._impl_.team_complete_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_home_team_ = from._impl_.is_home_team_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_challenge_match_ = from._impl_.is_challenge_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.rank_change_ = from._impl_.rank_change_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.challenge_match_token_account_ = from._impl_.challenge_match_token_account_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyTeamDetails::CopyFrom(const CLobbyTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTeamDetails::IsInitialized() const {
  return true;
}

void CLobbyTeamDetails::InternalSwap(CLobbyTeamDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_tag_, lhs_arena,
      &other->_impl_.team_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_logo_url_, lhs_arena,
      &other->_impl_.team_logo_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_abbreviation_, lhs_arena,
      &other->_impl_.team_abbreviation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyTeamDetails, _impl_.challenge_match_token_account_)
      + sizeof(CLobbyTeamDetails::_impl_.challenge_match_token_account_)
      - PROTOBUF_FIELD_OFFSET(CLobbyTeamDetails, _impl_.team_logo_)>(
          reinterpret_cast<char*>(&_impl_.team_logo_),
          reinterpret_cast<char*>(&other->_impl_.team_logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyTeamDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[14]);
}

// ===================================================================

class CLobbyGuildDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyGuildDetails>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guild_primary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_guild_secondary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guild_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guild_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guild_points(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_guild_event(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_guild_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_team_for_guild(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_guild_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guild_weekly_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CLobbyGuildDetails::CLobbyGuildDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CLobbyGuildDetails)
}
CLobbyGuildDetails::CLobbyGuildDetails(const CLobbyGuildDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLobbyGuildDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_tag_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.guild_primary_color_){}
    , decltype(_impl_.guild_secondary_color_){}
    , decltype(_impl_.guild_pattern_){}
    , decltype(_impl_.guild_logo_){}
    , decltype(_impl_.guild_points_){}
    , decltype(_impl_.guild_event_){}
    , decltype(_impl_.guild_flags_){}
    , decltype(_impl_.team_for_guild_){}
    , decltype(_impl_.guild_weekly_percentile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.guild_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guild_tag()) {
    _this->_impl_.guild_tag_.Set(from._internal_guild_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guild_weekly_percentile_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.guild_weekly_percentile_));
  // @@protoc_insertion_point(copy_constructor:CLobbyGuildDetails)
}

inline void CLobbyGuildDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_tag_){}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.guild_primary_color_){0u}
    , decltype(_impl_.guild_secondary_color_){0u}
    , decltype(_impl_.guild_pattern_){0u}
    , decltype(_impl_.guild_logo_){uint64_t{0u}}
    , decltype(_impl_.guild_points_){0u}
    , decltype(_impl_.guild_event_){0u}
    , decltype(_impl_.guild_flags_){0u}
    , decltype(_impl_.team_for_guild_){0}
    , decltype(_impl_.guild_weekly_percentile_){0u}
  };
  _impl_.guild_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CLobbyGuildDetails::~CLobbyGuildDetails() {
  // @@protoc_insertion_point(destructor:CLobbyGuildDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLobbyGuildDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guild_tag_.Destroy();
}

void CLobbyGuildDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLobbyGuildDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyGuildDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.guild_tag_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.guild_event_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.guild_event_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.guild_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.guild_weekly_percentile_) -
        reinterpret_cast<char*>(&_impl_.guild_flags_)) + sizeof(_impl_.guild_weekly_percentile_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyGuildDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_primary_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guild_primary_color(&has_bits);
          _impl_.guild_primary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_secondary_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_guild_secondary_color(&has_bits);
          _impl_.guild_secondary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_guild_pattern(&has_bits);
          _impl_.guild_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 guild_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_guild_logo(&has_bits);
          _impl_.guild_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_guild_points(&has_bits);
          _impl_.guild_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_guild_event(&has_bits);
          _impl_.guild_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_guild_flags(&has_bits);
          _impl_.guild_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team_for_guild(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string guild_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_guild_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyGuildDetails.guild_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_percentile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_guild_weekly_percentile(&has_bits);
          _impl_.guild_weekly_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyGuildDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyGuildDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 guild_primary_color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_primary_color(), target);
  }

  // optional uint32 guild_secondary_color = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_secondary_color(), target);
  }

  // optional uint32 guild_pattern = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_guild_pattern(), target);
  }

  // optional uint64 guild_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_guild_logo(), target);
  }

  // optional uint32 guild_points = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_guild_points(), target);
  }

  // optional uint32 guild_event = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_guild_event(), target);
  }

  // optional uint32 guild_flags = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_guild_flags(), target);
  }

  // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_team_for_guild(), target);
  }

  // optional string guild_tag = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guild_tag().data(), static_cast<int>(this->_internal_guild_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyGuildDetails.guild_tag");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_guild_tag(), target);
  }

  // optional uint32 guild_weekly_percentile = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_guild_weekly_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyGuildDetails)
  return target;
}

size_t CLobbyGuildDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyGuildDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string guild_tag = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guild_tag());
    }

    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional uint32 guild_primary_color = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_primary_color());
    }

    // optional uint32 guild_secondary_color = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_secondary_color());
    }

    // optional uint32 guild_pattern = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_pattern());
    }

    // optional uint64 guild_logo = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guild_logo());
    }

    // optional uint32 guild_points = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_points());
    }

    // optional uint32 guild_event = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_event());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 guild_flags = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_flags());
    }

    // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_for_guild());
    }

    // optional uint32 guild_weekly_percentile = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_weekly_percentile());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyGuildDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLobbyGuildDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyGuildDetails::GetClassData() const { return &_class_data_; }


void CLobbyGuildDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLobbyGuildDetails*>(&to_msg);
  auto& from = static_cast<const CLobbyGuildDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLobbyGuildDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_guild_tag(from._internal_guild_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.guild_primary_color_ = from._impl_.guild_primary_color_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.guild_secondary_color_ = from._impl_.guild_secondary_color_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.guild_pattern_ = from._impl_.guild_pattern_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.guild_logo_ = from._impl_.guild_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.guild_points_ = from._impl_.guild_points_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.guild_event_ = from._impl_.guild_event_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.guild_flags_ = from._impl_.guild_flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.team_for_guild_ = from._impl_.team_for_guild_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.guild_weekly_percentile_ = from._impl_.guild_weekly_percentile_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyGuildDetails::CopyFrom(const CLobbyGuildDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyGuildDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyGuildDetails::IsInitialized() const {
  return true;
}

void CLobbyGuildDetails::InternalSwap(CLobbyGuildDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_tag_, lhs_arena,
      &other->_impl_.guild_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyGuildDetails, _impl_.guild_weekly_percentile_)
      + sizeof(CLobbyGuildDetails::_impl_.guild_weekly_percentile_)
      - PROTOBUF_FIELD_OFFSET(CLobbyGuildDetails, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyGuildDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[15]);
}

// ===================================================================

class CLobbyTimedRewardDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyTimedRewardDetails>()._impl_._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_supply_crate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_timed_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CLobbyTimedRewardDetails)
}
CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLobbyTimedRewardDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_index_){}
    , decltype(_impl_.is_supply_crate_){}
    , decltype(_impl_.is_timed_drop_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.origin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_index_, &from._impl_.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.origin_) -
    reinterpret_cast<char*>(&_impl_.item_def_index_)) + sizeof(_impl_.origin_));
  // @@protoc_insertion_point(copy_constructor:CLobbyTimedRewardDetails)
}

inline void CLobbyTimedRewardDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_index_){0u}
    , decltype(_impl_.is_supply_crate_){false}
    , decltype(_impl_.is_timed_drop_){false}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.origin_){0u}
  };
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTimedRewardDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLobbyTimedRewardDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLobbyTimedRewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyTimedRewardDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.origin_) -
        reinterpret_cast<char*>(&_impl_.item_def_index_)) + sizeof(_impl_.origin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyTimedRewardDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          _impl_.item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_supply_crate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_supply_crate(&has_bits);
          _impl_.is_supply_crate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_timed_drop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_timed_drop(&has_bits);
          _impl_.is_timed_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_origin(&has_bits);
          _impl_.origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyTimedRewardDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTimedRewardDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_account_id(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTimedRewardDetails)
  return target;
}

size_t CLobbyTimedRewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyTimedRewardDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyTimedRewardDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLobbyTimedRewardDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyTimedRewardDetails::GetClassData() const { return &_class_data_; }


void CLobbyTimedRewardDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLobbyTimedRewardDetails*>(&to_msg);
  auto& from = static_cast<const CLobbyTimedRewardDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_index_ = from._impl_.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_supply_crate_ = from._impl_.is_supply_crate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_timed_drop_ = from._impl_.is_timed_drop_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.origin_ = from._impl_.origin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {
  return true;
}

void CLobbyTimedRewardDetails::InternalSwap(CLobbyTimedRewardDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, _impl_.origin_)
      + sizeof(CLobbyTimedRewardDetails::_impl_.origin_)
      - PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, _impl_.item_def_index_)>(
          reinterpret_cast<char*>(&_impl_.item_def_index_),
          reinterpret_cast<char*>(&other->_impl_.item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[16]);
}

// ===================================================================

class CLobbyBroadcastChannelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyBroadcastChannelInfo>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CLobbyBroadcastChannelInfo)
}
CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLobbyBroadcastChannelInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.language_code_){}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language_code()) {
    _this->_impl_.language_code_.Set(from._internal_language_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CLobbyBroadcastChannelInfo)
}

inline void CLobbyBroadcastChannelInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.language_code_){}
    , decltype(_impl_.channel_id_){0u}
  };
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CLobbyBroadcastChannelInfo::~CLobbyBroadcastChannelInfo() {
  // @@protoc_insertion_point(destructor:CLobbyBroadcastChannelInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLobbyBroadcastChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_code_.Destroy();
  _impl_.description_.Destroy();
  _impl_.language_code_.Destroy();
}

void CLobbyBroadcastChannelInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLobbyBroadcastChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyBroadcastChannelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.language_code_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.channel_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyBroadcastChannelInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyBroadcastChannelInfo.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyBroadcastChannelInfo.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CLobbyBroadcastChannelInfo.language_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyBroadcastChannelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyBroadcastChannelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_id(), target);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyBroadcastChannelInfo)
  return target;
}

size_t CLobbyBroadcastChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyBroadcastChannelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_code());
    }

    // optional uint32 channel_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyBroadcastChannelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLobbyBroadcastChannelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyBroadcastChannelInfo::GetClassData() const { return &_class_data_; }


void CLobbyBroadcastChannelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLobbyBroadcastChannelInfo*>(&to_msg);
  auto& from = static_cast<const CLobbyBroadcastChannelInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLobbyBroadcastChannelInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_language_code(from._internal_language_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyBroadcastChannelInfo::CopyFrom(const CLobbyBroadcastChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyBroadcastChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyBroadcastChannelInfo::IsInitialized() const {
  return true;
}

void CLobbyBroadcastChannelInfo::InternalSwap(CLobbyBroadcastChannelInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_code_, lhs_arena,
      &other->_impl_.language_code_, rhs_arena
  );
  swap(_impl_.channel_id_, other->_impl_.channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyBroadcastChannelInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[17]);
}

// ===================================================================

class CLobbyGuildChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyGuildChallenge>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_period_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_progress_at_start(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CLobbyGuildChallenge::CLobbyGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CLobbyGuildChallenge)
}
CLobbyGuildChallenge::CLobbyGuildChallenge(const CLobbyGuildChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLobbyGuildChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eligible_account_ids_){from._impl_.eligible_account_ids_}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_parameter_){}
    , decltype(_impl_.challenge_timestamp_){}
    , decltype(_impl_.challenge_period_serial_){}
    , decltype(_impl_.challenge_progress_at_start_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.challenge_progress_at_start_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.challenge_progress_at_start_));
  // @@protoc_insertion_point(copy_constructor:CLobbyGuildChallenge)
}

inline void CLobbyGuildChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eligible_account_ids_){arena}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
    , decltype(_impl_.challenge_timestamp_){0u}
    , decltype(_impl_.challenge_period_serial_){0u}
    , decltype(_impl_.challenge_progress_at_start_){0u}
  };
}

CLobbyGuildChallenge::~CLobbyGuildChallenge() {
  // @@protoc_insertion_point(destructor:CLobbyGuildChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLobbyGuildChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eligible_account_ids_.~RepeatedField();
}

void CLobbyGuildChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLobbyGuildChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyGuildChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eligible_account_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.challenge_progress_at_start_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.challenge_progress_at_start_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyGuildChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          _impl_.challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_period_serial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_challenge_period_serial(&has_bits);
          _impl_.challenge_period_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_at_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_challenge_progress_at_start(&has_bits);
          _impl_.challenge_progress_at_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 eligible_account_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_eligible_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_eligible_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyGuildChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyGuildChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 challenge_period_serial = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_challenge_period_serial(), target);
  }

  // optional uint32 challenge_progress_at_start = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_progress_at_start(), target);
  }

  // repeated uint32 eligible_account_ids = 8;
  for (int i = 0, n = this->_internal_eligible_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_eligible_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyGuildChallenge)
  return target;
}

size_t CLobbyGuildChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyGuildChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 eligible_account_ids = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.eligible_account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_eligible_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_timestamp());
    }

    // optional uint32 challenge_period_serial = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_period_serial());
    }

    // optional uint32 challenge_progress_at_start = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_progress_at_start());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyGuildChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLobbyGuildChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyGuildChallenge::GetClassData() const { return &_class_data_; }


void CLobbyGuildChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLobbyGuildChallenge*>(&to_msg);
  auto& from = static_cast<const CLobbyGuildChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLobbyGuildChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.eligible_account_ids_.MergeFrom(from._impl_.eligible_account_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_timestamp_ = from._impl_.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.challenge_period_serial_ = from._impl_.challenge_period_serial_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.challenge_progress_at_start_ = from._impl_.challenge_progress_at_start_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyGuildChallenge::CopyFrom(const CLobbyGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyGuildChallenge::IsInitialized() const {
  return true;
}

void CLobbyGuildChallenge::InternalSwap(CLobbyGuildChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.eligible_account_ids_.InternalSwap(&other->_impl_.eligible_account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyGuildChallenge, _impl_.challenge_progress_at_start_)
      + sizeof(CLobbyGuildChallenge::_impl_.challenge_progress_at_start_)
      - PROTOBUF_FIELD_OFFSET(CLobbyGuildChallenge, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyGuildChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[18]);
}

// ===================================================================

class CSODOTALobby_CExtraMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobby_CExtraMsg>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobby.CExtraMsg)
}
CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTALobby_CExtraMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contents_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contents()) {
    _this->_impl_.contents_.Set(from._internal_contents(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby.CExtraMsg)
}

inline void CSODOTALobby_CExtraMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contents_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTALobby_CExtraMsg::~CSODOTALobby_CExtraMsg() {
  // @@protoc_insertion_point(destructor:CSODOTALobby.CExtraMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTALobby_CExtraMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.Destroy();
}

void CSODOTALobby_CExtraMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTALobby_CExtraMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobby.CExtraMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.contents_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobby_CExtraMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTALobby_CExtraMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby.CExtraMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby.CExtraMsg)
  return target;
}

size_t CSODOTALobby_CExtraMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobby.CExtraMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes contents = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contents());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTALobby_CExtraMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTALobby_CExtraMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTALobby_CExtraMsg::GetClassData() const { return &_class_data_; }


void CSODOTALobby_CExtraMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTALobby_CExtraMsg*>(&to_msg);
  auto& from = static_cast<const CSODOTALobby_CExtraMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobby.CExtraMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_contents(from._internal_contents());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTALobby_CExtraMsg::CopyFrom(const CSODOTALobby_CExtraMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobby.CExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby_CExtraMsg::IsInitialized() const {
  return true;
}

void CSODOTALobby_CExtraMsg::InternalSwap(CSODOTALobby_CExtraMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contents_, lhs_arena,
      &other->_impl_.contents_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobby_CExtraMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[19]);
}

// ===================================================================

class CSODOTALobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobby>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_connect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_allow_cheats(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_fill_with_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_intro_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tutorial_lesson(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tournament_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_num_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_matchgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_cm_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_allow_spectating(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_bot_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leagueid(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_penalty_level_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_penalty_level_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_load_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_radiant_series_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_dire_series_wins(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_loot_generated(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_loot_awarded(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_allchat(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_dota_tv_delay(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_custom_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_difficulty(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_lan(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_first_leaver_accountid(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::CDOTASaveGame& save_game(const CSODOTALobby* msg);
  static void set_has_save_game(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_first_blood_happened(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_mass_disconnect(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_custom_min_players(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_custom_max_players(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_custom_game_auto_created_lobby(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_previous_match_override(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_game_start_time(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_pause_setting(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_weekend_tourney_division_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_weekend_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_weekend_tourney_bracket_round(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_bot_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_bot_radiant(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_bot_dire(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_selection_priority_rules(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_series_previous_selection_priority_team_id(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_series_current_selection_priority_team_id(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_series_current_priority_team_choice(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_series_current_non_priority_team_choice(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_series_current_selection_priority_used_coin_toss(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_current_primary_event(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_custom_game_private_key(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_custom_game_penalties(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_match_duration(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_league_phase(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_record_detailed_stats(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_experimental_gameplay_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_is_in_steam_china(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_with_scenario_save(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_lobby_creation_time(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_event_game_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CDOTASaveGame&
CSODOTALobby::_Internal::save_game(const CSODOTALobby* msg) {
  return *msg->_impl_.save_game_;
}
void CSODOTALobby::clear_save_game() {
  if (_impl_.save_game_ != nullptr) _impl_.save_game_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
CSODOTALobby::CSODOTALobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobby)
}
CSODOTALobby::CSODOTALobby(const CSODOTALobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTALobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pending_invites_){from._impl_.pending_invites_}
    , decltype(_impl_.team_details_){from._impl_.team_details_}
    , decltype(_impl_.timed_reward_details_){from._impl_.timed_reward_details_}
    , decltype(_impl_.broadcast_channel_info_){from._impl_.broadcast_channel_info_}
    , decltype(_impl_.extra_messages_){from._impl_.extra_messages_}
    , decltype(_impl_.previous_series_matches_){from._impl_.previous_series_matches_}
    , decltype(_impl_.event_progression_enabled_){from._impl_.event_progression_enabled_}
    , decltype(_impl_.emergency_disabled_hero_ids_){from._impl_.emergency_disabled_hero_ids_}
    , decltype(_impl_.guild_challenges_){from._impl_.guild_challenges_}
    , decltype(_impl_.guild_details_){from._impl_.guild_details_}
    , decltype(_impl_.lobby_event_points_){from._impl_.lobby_event_points_}
    , decltype(_impl_.all_members_){from._impl_.all_members_}
    , decltype(_impl_.member_indices_){from._impl_.member_indices_}
    , decltype(_impl_.left_member_indices_){from._impl_.left_member_indices_}
    , decltype(_impl_.free_member_indices_){from._impl_.free_member_indices_}
    , decltype(_impl_.requested_hero_ids_){from._impl_.requested_hero_ids_}
    , decltype(_impl_.coach_friend_requests_){from._impl_.coach_friend_requests_}
    , decltype(_impl_.extra_startup_messages_){from._impl_.extra_startup_messages_}
    , decltype(_impl_.connect_){}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.custom_game_mode_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.event_game_definition_){}
    , decltype(_impl_.save_game_){nullptr}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.server_id_){}
    , decltype(_impl_.leader_id_){}
    , decltype(_impl_.tutorial_lesson_){}
    , decltype(_impl_.tournament_id_){}
    , decltype(_impl_.tournament_game_id_){}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.game_state_){}
    , decltype(_impl_.num_spectators_){}
    , decltype(_impl_.allow_cheats_){}
    , decltype(_impl_.fill_with_bots_){}
    , decltype(_impl_.intro_mode_){}
    , decltype(_impl_.allchat_){}
    , decltype(_impl_.matchgroup_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.cm_pick_){}
    , decltype(_impl_.leagueid_){}
    , decltype(_impl_.penalty_level_radiant_){}
    , decltype(_impl_.penalty_level_dire_){}
    , decltype(_impl_.load_game_id_){}
    , decltype(_impl_.series_type_){}
    , decltype(_impl_.radiant_series_wins_){}
    , decltype(_impl_.dire_series_wins_){}
    , decltype(_impl_.loot_generated_){}
    , decltype(_impl_.loot_awarded_){}
    , decltype(_impl_.dota_tv_delay_){}
    , decltype(_impl_.custom_difficulty_){}
    , decltype(_impl_.first_leaver_accountid_){}
    , decltype(_impl_.series_id_){}
    , decltype(_impl_.lan_){}
    , decltype(_impl_.low_priority_){}
    , decltype(_impl_.first_blood_happened_){}
    , decltype(_impl_.mass_disconnect_){}
    , decltype(_impl_.match_outcome_){}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.custom_min_players_){}
    , decltype(_impl_.custom_max_players_){}
    , decltype(_impl_.custom_game_crc_){}
    , decltype(_impl_.visibility_){}
    , decltype(_impl_.custom_game_timestamp_){}
    , decltype(_impl_.previous_match_override_){}
    , decltype(_impl_.game_start_time_){}
    , decltype(_impl_.pause_setting_){}
    , decltype(_impl_.weekend_tourney_division_id_){}
    , decltype(_impl_.weekend_tourney_skill_level_){}
    , decltype(_impl_.bot_radiant_){}
    , decltype(_impl_.weekend_tourney_bracket_round_){}
    , decltype(_impl_.selection_priority_rules_){}
    , decltype(_impl_.bot_dire_){}
    , decltype(_impl_.series_previous_selection_priority_team_id_){}
    , decltype(_impl_.series_current_selection_priority_team_id_){}
    , decltype(_impl_.series_current_priority_team_choice_){}
    , decltype(_impl_.custom_game_auto_created_lobby_){}
    , decltype(_impl_.series_current_selection_priority_used_coin_toss_){}
    , decltype(_impl_.custom_game_penalties_){}
    , decltype(_impl_.record_detailed_stats_){}
    , decltype(_impl_.series_current_non_priority_team_choice_){}
    , decltype(_impl_.current_primary_event_){}
    , decltype(_impl_.custom_game_private_key_){}
    , decltype(_impl_.league_node_id_){}
    , decltype(_impl_.match_duration_){}
    , decltype(_impl_.league_phase_){}
    , decltype(_impl_.experimental_gameplay_enabled_){}
    , decltype(_impl_.is_in_steam_china_){}
    , decltype(_impl_.with_scenario_save_){}
    , decltype(_impl_.lobby_creation_time_){}
    , decltype(_impl_.lobby_type_){}
    , decltype(_impl_.allow_spectating_){}
    , decltype(_impl_.bot_difficulty_radiant_){}
    , decltype(_impl_.bot_difficulty_dire_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connect()) {
    _this->_impl_.connect_.Set(from._internal_connect(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_name()) {
    _this->_impl_.game_name_.Set(from._internal_game_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pass_key()) {
    _this->_impl_.pass_key_.Set(from._internal_pass_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_game_mode()) {
    _this->_impl_.custom_game_mode_.Set(from._internal_custom_game_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_map_name()) {
    _this->_impl_.custom_map_name_.Set(from._internal_custom_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lan_host_ping_location()) {
    _this->_impl_.lan_host_ping_location_.Set(from._internal_lan_host_ping_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_game_definition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_definition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_game_definition()) {
    _this->_impl_.event_game_definition_.Set(from._internal_event_game_definition(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_save_game()) {
    _this->_impl_.save_game_ = new ::CDOTASaveGame(*from._impl_.save_game_);
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bot_difficulty_dire_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby)
}

inline void CSODOTALobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pending_invites_){arena}
    , decltype(_impl_.team_details_){arena}
    , decltype(_impl_.timed_reward_details_){arena}
    , decltype(_impl_.broadcast_channel_info_){arena}
    , decltype(_impl_.extra_messages_){arena}
    , decltype(_impl_.previous_series_matches_){arena}
    , decltype(_impl_.event_progression_enabled_){arena}
    , decltype(_impl_.emergency_disabled_hero_ids_){arena}
    , decltype(_impl_.guild_challenges_){arena}
    , decltype(_impl_.guild_details_){arena}
    , decltype(_impl_.lobby_event_points_){arena}
    , decltype(_impl_.all_members_){arena}
    , decltype(_impl_.member_indices_){arena}
    , decltype(_impl_.left_member_indices_){arena}
    , decltype(_impl_.free_member_indices_){arena}
    , decltype(_impl_.requested_hero_ids_){arena}
    , decltype(_impl_.coach_friend_requests_){arena}
    , decltype(_impl_.extra_startup_messages_){arena}
    , decltype(_impl_.connect_){}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.custom_game_mode_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.event_game_definition_){}
    , decltype(_impl_.save_game_){nullptr}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.server_id_){uint64_t{0u}}
    , decltype(_impl_.leader_id_){uint64_t{0u}}
    , decltype(_impl_.tutorial_lesson_){0u}
    , decltype(_impl_.tournament_id_){0u}
    , decltype(_impl_.tournament_game_id_){0u}
    , decltype(_impl_.server_region_){0u}
    , decltype(_impl_.game_state_){0}
    , decltype(_impl_.num_spectators_){0u}
    , decltype(_impl_.allow_cheats_){false}
    , decltype(_impl_.fill_with_bots_){false}
    , decltype(_impl_.intro_mode_){false}
    , decltype(_impl_.allchat_){false}
    , decltype(_impl_.matchgroup_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.cm_pick_){0}
    , decltype(_impl_.leagueid_){0u}
    , decltype(_impl_.penalty_level_radiant_){0u}
    , decltype(_impl_.penalty_level_dire_){0u}
    , decltype(_impl_.load_game_id_){0u}
    , decltype(_impl_.series_type_){0u}
    , decltype(_impl_.radiant_series_wins_){0u}
    , decltype(_impl_.dire_series_wins_){0u}
    , decltype(_impl_.loot_generated_){0u}
    , decltype(_impl_.loot_awarded_){0u}
    , decltype(_impl_.dota_tv_delay_){0}
    , decltype(_impl_.custom_difficulty_){0u}
    , decltype(_impl_.first_leaver_accountid_){0u}
    , decltype(_impl_.series_id_){0u}
    , decltype(_impl_.lan_){false}
    , decltype(_impl_.low_priority_){false}
    , decltype(_impl_.first_blood_happened_){false}
    , decltype(_impl_.mass_disconnect_){false}
    , decltype(_impl_.match_outcome_){0}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.custom_min_players_){0u}
    , decltype(_impl_.custom_max_players_){0u}
    , decltype(_impl_.custom_game_crc_){uint64_t{0u}}
    , decltype(_impl_.visibility_){0}
    , decltype(_impl_.custom_game_timestamp_){0u}
    , decltype(_impl_.previous_match_override_){uint64_t{0u}}
    , decltype(_impl_.game_start_time_){0u}
    , decltype(_impl_.pause_setting_){0}
    , decltype(_impl_.weekend_tourney_division_id_){0u}
    , decltype(_impl_.weekend_tourney_skill_level_){0u}
    , decltype(_impl_.bot_radiant_){uint64_t{0u}}
    , decltype(_impl_.weekend_tourney_bracket_round_){0u}
    , decltype(_impl_.selection_priority_rules_){0}
    , decltype(_impl_.bot_dire_){uint64_t{0u}}
    , decltype(_impl_.series_previous_selection_priority_team_id_){0u}
    , decltype(_impl_.series_current_selection_priority_team_id_){0u}
    , decltype(_impl_.series_current_priority_team_choice_){0}
    , decltype(_impl_.custom_game_auto_created_lobby_){false}
    , decltype(_impl_.series_current_selection_priority_used_coin_toss_){false}
    , decltype(_impl_.custom_game_penalties_){false}
    , decltype(_impl_.record_detailed_stats_){false}
    , decltype(_impl_.series_current_non_priority_team_choice_){0}
    , decltype(_impl_.current_primary_event_){0}
    , decltype(_impl_.custom_game_private_key_){uint64_t{0u}}
    , decltype(_impl_.league_node_id_){0u}
    , decltype(_impl_.match_duration_){0u}
    , decltype(_impl_.league_phase_){0u}
    , decltype(_impl_.experimental_gameplay_enabled_){false}
    , decltype(_impl_.is_in_steam_china_){false}
    , decltype(_impl_.with_scenario_save_){false}
    , decltype(_impl_.lobby_creation_time_){0u}
    , decltype(_impl_.lobby_type_){-1}
    , decltype(_impl_.allow_spectating_){true}
    , decltype(_impl_.bot_difficulty_radiant_){3}
    , decltype(_impl_.bot_difficulty_dire_){3}
  };
  _impl_.connect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_game_definition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_definition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTALobby::~CSODOTALobby() {
  // @@protoc_insertion_point(destructor:CSODOTALobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTALobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pending_invites_.~RepeatedField();
  _impl_.team_details_.~RepeatedPtrField();
  _impl_.timed_reward_details_.~RepeatedPtrField();
  _impl_.broadcast_channel_info_.~RepeatedPtrField();
  _impl_.extra_messages_.~RepeatedPtrField();
  _impl_.previous_series_matches_.~RepeatedField();
  _impl_.event_progression_enabled_.~RepeatedField();
  _impl_.emergency_disabled_hero_ids_.~RepeatedField();
  _impl_.guild_challenges_.~RepeatedPtrField();
  _impl_.guild_details_.~RepeatedPtrField();
  _impl_.lobby_event_points_.~RepeatedPtrField();
  _impl_.all_members_.~RepeatedPtrField();
  _impl_.member_indices_.~RepeatedField();
  _impl_.left_member_indices_.~RepeatedField();
  _impl_.free_member_indices_.~RepeatedField();
  _impl_.requested_hero_ids_.~RepeatedField();
  _impl_.coach_friend_requests_.~RepeatedPtrField();
  _impl_.extra_startup_messages_.~RepeatedPtrField();
  _impl_.connect_.Destroy();
  _impl_.game_name_.Destroy();
  _impl_.pass_key_.Destroy();
  _impl_.custom_game_mode_.Destroy();
  _impl_.custom_map_name_.Destroy();
  _impl_.lan_host_ping_location_.Destroy();
  _impl_.event_game_definition_.Destroy();
  if (this != internal_default_instance()) delete _impl_.save_game_;
}

void CSODOTALobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTALobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pending_invites_.Clear();
  _impl_.team_details_.Clear();
  _impl_.timed_reward_details_.Clear();
  _impl_.broadcast_channel_info_.Clear();
  _impl_.extra_messages_.Clear();
  _impl_.previous_series_matches_.Clear();
  _impl_.event_progression_enabled_.Clear();
  _impl_.emergency_disabled_hero_ids_.Clear();
  _impl_.guild_challenges_.Clear();
  _impl_.guild_details_.Clear();
  _impl_.lobby_event_points_.Clear();
  _impl_.all_members_.Clear();
  _impl_.member_indices_.Clear();
  _impl_.left_member_indices_.Clear();
  _impl_.free_member_indices_.Clear();
  _impl_.requested_hero_ids_.Clear();
  _impl_.coach_friend_requests_.Clear();
  _impl_.extra_startup_messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.connect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.custom_game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.event_game_definition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.save_game_ != nullptr);
      _impl_.save_game_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tournament_game_id_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.tournament_game_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.matchgroup_) -
        reinterpret_cast<char*>(&_impl_.server_region_)) + sizeof(_impl_.matchgroup_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.radiant_series_wins_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.radiant_series_wins_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.dire_series_wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lan_) -
        reinterpret_cast<char*>(&_impl_.dire_series_wins_)) + sizeof(_impl_.lan_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.low_priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_crc_) -
        reinterpret_cast<char*>(&_impl_.low_priority_)) + sizeof(_impl_.custom_game_crc_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.visibility_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bot_radiant_) -
        reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.bot_radiant_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.weekend_tourney_bracket_round_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.series_current_selection_priority_used_coin_toss_) -
        reinterpret_cast<char*>(&_impl_.weekend_tourney_bracket_round_)) + sizeof(_impl_.series_current_selection_priority_used_coin_toss_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.custom_game_penalties_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_phase_) -
        reinterpret_cast<char*>(&_impl_.custom_game_penalties_)) + sizeof(_impl_.league_phase_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.experimental_gameplay_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lobby_creation_time_) -
        reinterpret_cast<char*>(&_impl_.experimental_gameplay_enabled_)) + sizeof(_impl_.lobby_creation_time_));
    _impl_.lobby_type_ = -1;
    _impl_.allow_spectating_ = true;
    _impl_.bot_difficulty_radiant_ = 3;
    _impl_.bot_difficulty_dire_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&_impl_._has_bits_);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_mode(&_impl_._has_bits_);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSODOTALobby.State state = 4 [default = UI];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSODOTALobby_State_IsValid(val))) {
            _internal_set_state(static_cast<::CSODOTALobby_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string connect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_connect();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobby.connect");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_id = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_server_id(&_impl_._has_bits_);
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 pending_invites = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pending_invites(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_pending_invites(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 leader_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_leader_id(&_impl_._has_bits_);
          _impl_.leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSODOTALobby_LobbyType_IsValid(val))) {
            _internal_set_lobby_type(static_cast<::CSODOTALobby_LobbyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_cheats = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_allow_cheats(&_impl_._has_bits_);
          _impl_.allow_cheats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fill_with_bots = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_fill_with_bots(&_impl_._has_bits_);
          _impl_.fill_with_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool intro_mode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_intro_mode(&_impl_._has_bits_);
          _impl_.intro_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_game_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobby.game_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyTeamDetails team_details = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_team_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tutorial_lesson = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tutorial_lesson(&_impl_._has_bits_);
          _impl_.tutorial_lesson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tournament_id(&_impl_._has_bits_);
          _impl_.tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tournament_game_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tournament_game_id(&_impl_._has_bits_);
          _impl_.tournament_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_region = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_server_region(&_impl_._has_bits_);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_spectators = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_num_spectators(&_impl_._has_bits_);
          _impl_.num_spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchgroup = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_matchgroup(&_impl_._has_bits_);
          _impl_.matchgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_CM_PICK_IsValid(val))) {
            _internal_set_cm_pick(static_cast<::DOTA_CM_PICK>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_match_id(&_impl_._has_bits_);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_spectating = 31 [default = true];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_allow_spectating(&_impl_._has_bits_);
          _impl_.allow_spectating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_timed_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string pass_key = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobby.pass_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leagueid = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_leagueid(&_impl_._has_bits_);
          _impl_.leagueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_penalty_level_radiant(&_impl_._has_bits_);
          _impl_.penalty_level_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_penalty_level_dire(&_impl_._has_bits_);
          _impl_.penalty_level_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 load_game_id = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_load_game_id(&_impl_._has_bits_);
          _impl_.load_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_type = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_series_type(&_impl_._has_bits_);
          _impl_.series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radiant_series_wins = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_radiant_series_wins(&_impl_._has_bits_);
          _impl_.radiant_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dire_series_wins = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_dire_series_wins(&_impl_._has_bits_);
          _impl_.dire_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 loot_generated = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_loot_generated(&_impl_._has_bits_);
          _impl_.loot_generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 loot_awarded = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_loot_awarded(&_impl_._has_bits_);
          _impl_.loot_awarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allchat = 51 [default = false];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_allchat(&_impl_._has_bits_);
          _impl_.allchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaTVDelay_IsValid(val))) {
            _internal_set_dota_tv_delay(static_cast<::LobbyDotaTVDelay>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string custom_game_mode = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_custom_game_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobby.custom_game_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_map_name = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobby.custom_map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_difficulty = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_custom_difficulty(&_impl_._has_bits_);
          _impl_.custom_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool lan = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_lan(&_impl_._has_bits_);
          _impl_.lan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_broadcast_channel_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_leaver_accountid = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_first_leaver_accountid(&_impl_._has_bits_);
          _impl_.first_leaver_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_id = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_series_id(&_impl_._has_bits_);
          _impl_.series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_priority = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_low_priority(&_impl_._has_bits_);
          _impl_.low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extra_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTASaveGame save_game = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool first_blood_happened = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_first_blood_happened(&_impl_._has_bits_);
          _impl_.first_blood_happened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mass_disconnect = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mass_disconnect(&_impl_._has_bits_);
          _impl_.mass_disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_custom_game_id(&_impl_._has_bits_);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchOutcome_IsValid(val))) {
            _internal_set_match_outcome(static_cast<::EMatchOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(70, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_min_players = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_custom_min_players(&_impl_._has_bits_);
          _impl_.custom_min_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_max_players = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_custom_max_players(&_impl_._has_bits_);
          _impl_.custom_max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALobbyVisibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::DOTALobbyVisibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(75, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_custom_game_crc(&_impl_._has_bits_);
          _impl_.custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_game_auto_created_lobby = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_custom_game_auto_created_lobby(&_impl_._has_bits_);
          _impl_.custom_game_auto_created_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_custom_game_timestamp(&_impl_._has_bits_);
          _impl_.custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 previous_series_matches = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_previous_series_matches(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<648>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_previous_series_matches(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 previous_match_override = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_previous_match_override(&_impl_._has_bits_);
          _impl_.previous_match_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_start_time = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_game_start_time(&_impl_._has_bits_);
          _impl_.game_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaPauseSetting_IsValid(val))) {
            _internal_set_pause_setting(static_cast<::LobbyDotaPauseSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(88, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_division_id = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_weekend_tourney_division_id(&_impl_._has_bits_);
          _impl_.weekend_tourney_division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_skill_level = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_weekend_tourney_skill_level(&_impl_._has_bits_);
          _impl_.weekend_tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_bracket_round = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_weekend_tourney_bracket_round(&_impl_._has_bits_);
          _impl_.weekend_tourney_bracket_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(93, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bot_radiant = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_bot_radiant(&_impl_._has_bits_);
          _impl_.bot_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bot_dire = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_bot_dire(&_impl_._has_bits_);
          _impl_.bot_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EEvent event_progression_enabled = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
              _internal_add_event_progression_enabled(static_cast<::EEvent>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(96, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<768>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_event_progression_enabled(), ptr, ctx, ::EEvent_IsValid, &_internal_metadata_, 96);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityRules_IsValid(val))) {
            _internal_set_selection_priority_rules(static_cast<::DOTASelectionPriorityRules>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(97, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_previous_selection_priority_team_id = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_series_previous_selection_priority_team_id(&_impl_._has_bits_);
          _impl_.series_previous_selection_priority_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_current_selection_priority_team_id = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_series_current_selection_priority_team_id(&_impl_._has_bits_);
          _impl_.series_current_selection_priority_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityChoice_IsValid(val))) {
            _internal_set_series_current_priority_team_choice(static_cast<::DOTASelectionPriorityChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(100, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityChoice_IsValid(val))) {
            _internal_set_series_current_non_priority_team_choice(static_cast<::DOTASelectionPriorityChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(101, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool series_current_selection_priority_used_coin_toss = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_series_current_selection_priority_used_coin_toss(&_impl_._has_bits_);
          _impl_.series_current_selection_priority_used_coin_toss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_current_primary_event(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 emergency_disabled_hero_ids = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_emergency_disabled_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<840>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_emergency_disabled_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 custom_game_private_key = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_custom_game_private_key(&_impl_._has_bits_);
          _impl_.custom_game_private_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_game_penalties = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_custom_game_penalties(&_impl_._has_bits_);
          _impl_.custom_game_penalties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobby.lan_host_ping_location");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_league_node_id(&_impl_._has_bits_);
          _impl_.league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_duration = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_match_duration(&_impl_._has_bits_);
          _impl_.match_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_phase = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_league_phase(&_impl_._has_bits_);
          _impl_.league_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool record_detailed_stats = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_record_detailed_stats(&_impl_._has_bits_);
          _impl_.record_detailed_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool experimental_gameplay_enabled = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_experimental_gameplay_enabled(&_impl_._has_bits_);
          _impl_.experimental_gameplay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyGuildChallenge guild_challenges = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_guild_challenges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<938>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyGuildDetails guild_details = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_guild_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<946>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lobby_event_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<954>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyMember all_members = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_all_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<962>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 member_indices = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_member_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<968>(ptr));
        } else if (static_cast<uint8_t>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_indices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 left_member_indices = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_left_member_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<976>(ptr));
        } else if (static_cast<uint8_t>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_left_member_indices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 free_member_indices = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_free_member_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<984>(ptr));
        } else if (static_cast<uint8_t>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_free_member_indices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 requested_hero_ids = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<992>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_requested_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_coach_friend_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1002>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_in_steam_china = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_is_in_steam_china(&_impl_._has_bits_);
          _impl_.is_in_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool with_scenario_save = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_with_scenario_save(&_impl_._has_bits_);
          _impl_.with_scenario_save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_creation_time = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_lobby_creation_time(&_impl_._has_bits_);
          _impl_.lobby_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string event_game_definition = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_game_definition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTALobby.event_game_definition");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTALobby.CExtraMsg extra_startup_messages = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extra_startup_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1042>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTALobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint32 game_mode = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_mode(), target);
  }

  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connect().data(), static_cast<int>(this->_internal_connect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.connect");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_server_id(), target);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0, n = this->_internal_pending_invites_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(10, this->_internal_pending_invites(i), target);
  }

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(11, this->_internal_leader_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_lobby_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_allow_cheats(), target);
  }

  // optional bool fill_with_bots = 14;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_fill_with_bots(), target);
  }

  // optional bool intro_mode = 15;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_intro_mode(), target);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.game_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_game_name(), target);
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_team_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_team_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 tutorial_lesson = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tutorial_lesson(), target);
  }

  // optional uint32 tournament_id = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_tournament_game_id(), target);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_server_region(), target);
  }

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_game_state(), target);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_num_spectators(), target);
  }

  // optional uint32 matchgroup = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_matchgroup(), target);
  }

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_cm_pick(), target);
  }

  // optional uint64 match_id = 30;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(30, this->_internal_match_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_allow_spectating(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      36, this->_internal_bot_difficulty_radiant(), target);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timed_reward_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_timed_reward_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string pass_key = 39;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.pass_key");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_pass_key(), target);
  }

  // optional uint32 leagueid = 42;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 45;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_load_game_id(), target);
  }

  // optional uint32 series_type = 46;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(46, this->_internal_series_type(), target);
  }

  // optional uint32 radiant_series_wins = 47;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(47, this->_internal_radiant_series_wins(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 dire_series_wins = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(48, this->_internal_dire_series_wins(), target);
  }

  // optional uint32 loot_generated = 49;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(49, this->_internal_loot_generated(), target);
  }

  // optional uint32 loot_awarded = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(50, this->_internal_loot_awarded(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool allchat = 51 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_allchat(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      53, this->_internal_dota_tv_delay(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string custom_game_mode = 54;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_game_mode().data(), static_cast<int>(this->_internal_custom_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_game_mode");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_custom_game_mode(), target);
  }

  // optional string custom_map_name = 55;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_custom_map_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 custom_difficulty = 56;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(56, this->_internal_custom_difficulty(), target);
  }

  // optional bool lan = 57;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(57, this->_internal_lan(), target);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_broadcast_channel_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_broadcast_channel_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(58, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(59, this->_internal_first_leaver_accountid(), target);
  }

  // optional uint32 series_id = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(60, this->_internal_series_id(), target);
  }

  // optional bool low_priority = 61;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(61, this->_internal_low_priority(), target);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(62, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CDOTASaveGame save_game = 63;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::save_game(this),
        _Internal::save_game(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool first_blood_happened = 65;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_first_blood_happened(), target);
  }

  // optional bool mass_disconnect = 67;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_mass_disconnect(), target);
  }

  // optional uint64 custom_game_id = 68;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(68, this->_internal_custom_game_id(), target);
  }

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      70, this->_internal_match_outcome(), target);
  }

  // optional uint32 custom_min_players = 71;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(71, this->_internal_custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 72;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(72, this->_internal_custom_max_players(), target);
  }

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      75, this->_internal_visibility(), target);
  }

  // optional fixed64 custom_game_crc = 76;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(76, this->_internal_custom_game_crc(), target);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(77, this->_internal_custom_game_auto_created_lobby(), target);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(80, this->_internal_custom_game_timestamp(), target);
  }

  // repeated uint64 previous_series_matches = 81;
  for (int i = 0, n = this->_internal_previous_series_matches_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(81, this->_internal_previous_series_matches(i), target);
  }

  // optional uint64 previous_match_override = 82;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(82, this->_internal_previous_match_override(), target);
  }

  // optional uint32 game_start_time = 87;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(87, this->_internal_game_start_time(), target);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      88, this->_internal_pause_setting(), target);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(90, this->_internal_weekend_tourney_division_id(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(91, this->_internal_weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 92;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(92, this->_internal_weekend_tourney_bracket_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      93, this->_internal_bot_difficulty_dire(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 bot_radiant = 94;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(94, this->_internal_bot_radiant(), target);
  }

  // optional uint64 bot_dire = 95;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(95, this->_internal_bot_dire(), target);
  }

  // repeated .EEvent event_progression_enabled = 96;
  for (int i = 0, n = this->_internal_event_progression_enabled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        96, this->_internal_event_progression_enabled(i), target);
  }

  // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      97, this->_internal_selection_priority_rules(), target);
  }

  // optional uint32 series_previous_selection_priority_team_id = 98;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(98, this->_internal_series_previous_selection_priority_team_id(), target);
  }

  // optional uint32 series_current_selection_priority_team_id = 99;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(99, this->_internal_series_current_selection_priority_team_id(), target);
  }

  // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      100, this->_internal_series_current_priority_team_choice(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      101, this->_internal_series_current_non_priority_team_choice(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool series_current_selection_priority_used_coin_toss = 102;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(102, this->_internal_series_current_selection_priority_used_coin_toss(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      103, this->_internal_current_primary_event(), target);
  }

  // repeated uint32 emergency_disabled_hero_ids = 105;
  for (int i = 0, n = this->_internal_emergency_disabled_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(105, this->_internal_emergency_disabled_hero_ids(i), target);
  }

  // optional fixed64 custom_game_private_key = 106;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(106, this->_internal_custom_game_private_key(), target);
  }

  // optional bool custom_game_penalties = 107;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(107, this->_internal_custom_game_penalties(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lan_host_ping_location = 109;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        109, this->_internal_lan_host_ping_location(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 league_node_id = 110;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(110, this->_internal_league_node_id(), target);
  }

  // optional uint32 match_duration = 111;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(111, this->_internal_match_duration(), target);
  }

  // optional uint32 league_phase = 113;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(113, this->_internal_league_phase(), target);
  }

  // optional bool record_detailed_stats = 114;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(114, this->_internal_record_detailed_stats(), target);
  }

  // optional bool experimental_gameplay_enabled = 116;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(116, this->_internal_experimental_gameplay_enabled(), target);
  }

  // repeated .CLobbyGuildChallenge guild_challenges = 117;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guild_challenges_size()); i < n; i++) {
    const auto& repfield = this->_internal_guild_challenges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(117, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CLobbyGuildDetails guild_details = 118;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guild_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_guild_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(118, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lobby_event_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_lobby_event_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(119, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CSODOTALobbyMember all_members = 120;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(120, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 member_indices = 121;
  for (int i = 0, n = this->_internal_member_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(121, this->_internal_member_indices(i), target);
  }

  // repeated uint32 left_member_indices = 122;
  for (int i = 0, n = this->_internal_left_member_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(122, this->_internal_left_member_indices(i), target);
  }

  // repeated uint32 free_member_indices = 123;
  for (int i = 0, n = this->_internal_free_member_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(123, this->_internal_free_member_indices(i), target);
  }

  // repeated uint32 requested_hero_ids = 124;
  for (int i = 0, n = this->_internal_requested_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(124, this->_internal_requested_hero_ids(i), target);
  }

  // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coach_friend_requests_size()); i < n; i++) {
    const auto& repfield = this->_internal_coach_friend_requests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(125, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_in_steam_china = 126;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(126, this->_internal_is_in_steam_china(), target);
  }

  // optional bool with_scenario_save = 127;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(127, this->_internal_with_scenario_save(), target);
  }

  // optional uint32 lobby_creation_time = 128;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(128, this->_internal_lobby_creation_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string event_game_definition = 129;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_game_definition().data(), static_cast<int>(this->_internal_event_game_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.event_game_definition");
    target = stream->WriteStringMaybeAliased(
        129, this->_internal_event_game_definition(), target);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_startup_messages = 130;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_startup_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_startup_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(130, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby)
  return target;
}

size_t CSODOTALobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 pending_invites = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pending_invites_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pending_invites_size());
    total_size += data_size;
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  total_size += 2UL * this->_internal_team_details_size();
  for (const auto& msg : this->_impl_.team_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  total_size += 2UL * this->_internal_timed_reward_details_size();
  for (const auto& msg : this->_impl_.timed_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  total_size += 2UL * this->_internal_broadcast_channel_info_size();
  for (const auto& msg : this->_impl_.broadcast_channel_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  total_size += 2UL * this->_internal_extra_messages_size();
  for (const auto& msg : this->_impl_.extra_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 previous_series_matches = 81;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.previous_series_matches_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_previous_series_matches_size());
    total_size += data_size;
  }

  // repeated .EEvent event_progression_enabled = 96;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_event_progression_enabled_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_event_progression_enabled(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated uint32 emergency_disabled_hero_ids = 105;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.emergency_disabled_hero_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_emergency_disabled_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CLobbyGuildChallenge guild_challenges = 117;
  total_size += 2UL * this->_internal_guild_challenges_size();
  for (const auto& msg : this->_impl_.guild_challenges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyGuildDetails guild_details = 118;
  total_size += 2UL * this->_internal_guild_details_size();
  for (const auto& msg : this->_impl_.guild_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
  total_size += 2UL * this->_internal_lobby_event_points_size();
  for (const auto& msg : this->_impl_.lobby_event_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobbyMember all_members = 120;
  total_size += 2UL * this->_internal_all_members_size();
  for (const auto& msg : this->_impl_.all_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 member_indices = 121;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.member_indices_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_member_indices_size());
    total_size += data_size;
  }

  // repeated uint32 left_member_indices = 122;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.left_member_indices_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_left_member_indices_size());
    total_size += data_size;
  }

  // repeated uint32 free_member_indices = 123;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.free_member_indices_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_free_member_indices_size());
    total_size += data_size;
  }

  // repeated uint32 requested_hero_ids = 124;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.requested_hero_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_requested_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
  total_size += 2UL * this->_internal_coach_friend_requests_size();
  for (const auto& msg : this->_impl_.coach_friend_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_startup_messages = 130;
  total_size += 2UL * this->_internal_extra_startup_messages_size();
  for (const auto& msg : this->_impl_.extra_startup_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connect = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connect());
    }

    // optional string game_name = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional string pass_key = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional string custom_game_mode = 54;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_game_mode());
    }

    // optional string custom_map_name = 55;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 109;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional string event_game_definition = 129;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_game_definition());
    }

    // optional .CDOTASaveGame save_game = 63;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.save_game_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 lobby_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 game_mode = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional .CSODOTALobby.State state = 4 [default = UI];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional fixed64 leader_id = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional uint32 tutorial_lesson = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tutorial_lesson());
    }

    // optional uint32 tournament_id = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 tournament_game_id = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tournament_game_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 server_region = 21 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

    // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional uint32 num_spectators = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_num_spectators());
    }

    // optional bool allow_cheats = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 14;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 15;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool allchat = 51 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint32 matchgroup = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_matchgroup());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint64 match_id = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cm_pick());
    }

    // optional uint32 leagueid = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_leagueid());
    }

    // optional uint32 penalty_level_radiant = 43 [default = 0];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 44 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_dire());
    }

    // optional uint32 load_game_id = 45;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_load_game_id());
    }

    // optional uint32 series_type = 46;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 radiant_series_wins = 47;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_radiant_series_wins());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 dire_series_wins = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_dire_series_wins());
    }

    // optional uint32 loot_generated = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_loot_generated());
    }

    // optional uint32 loot_awarded = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_loot_awarded());
    }

    // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dota_tv_delay());
    }

    // optional uint32 custom_difficulty = 56;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_difficulty());
    }

    // optional uint32 first_leaver_accountid = 59;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_first_leaver_accountid());
    }

    // optional uint32 series_id = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional bool lan = 57;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool low_priority = 61;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool first_blood_happened = 65;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool mass_disconnect = 67;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_outcome());
    }

    // optional uint64 custom_game_id = 68;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional uint32 custom_min_players = 71;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_min_players());
    }

    // optional uint32 custom_max_players = 72;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_max_players());
    }

    // optional fixed64 custom_game_crc = 76;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
    }

    // optional fixed32 custom_game_timestamp = 80;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional uint64 previous_match_override = 82;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_previous_match_override());
    }

    // optional uint32 game_start_time = 87;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_game_start_time());
    }

    // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pause_setting());
    }

    // optional uint32 weekend_tourney_division_id = 90;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_division_id());
    }

    // optional uint32 weekend_tourney_skill_level = 91;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_skill_level());
    }

    // optional uint64 bot_radiant = 94;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_bot_radiant());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 weekend_tourney_bracket_round = 92;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_bracket_round());
    }

    // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_priority_rules());
    }

    // optional uint64 bot_dire = 95;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_bot_dire());
    }

    // optional uint32 series_previous_selection_priority_team_id = 98;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_series_previous_selection_priority_team_id());
    }

    // optional uint32 series_current_selection_priority_team_id = 99;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_series_current_selection_priority_team_id());
    }

    // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_series_current_priority_team_choice());
    }

    // optional bool custom_game_auto_created_lobby = 77;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool series_current_selection_priority_used_coin_toss = 102;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool custom_game_penalties = 107;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool record_detailed_stats = 114;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_series_current_non_priority_team_choice());
    }

    // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_current_primary_event());
    }

    // optional fixed64 custom_game_private_key = 106;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional uint32 league_node_id = 110;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

    // optional uint32 match_duration = 111;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_match_duration());
    }

    // optional uint32 league_phase = 113;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_league_phase());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool experimental_gameplay_enabled = 116;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_in_steam_china = 126;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool with_scenario_save = 127;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 lobby_creation_time = 128;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lobby_creation_time());
    }

    // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lobby_type());
    }

    // optional bool allow_spectating = 31 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty_radiant());
    }

    // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty_dire());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTALobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTALobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTALobby::GetClassData() const { return &_class_data_; }


void CSODOTALobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTALobby*>(&to_msg);
  auto& from = static_cast<const CSODOTALobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pending_invites_.MergeFrom(from._impl_.pending_invites_);
  _this->_impl_.team_details_.MergeFrom(from._impl_.team_details_);
  _this->_impl_.timed_reward_details_.MergeFrom(from._impl_.timed_reward_details_);
  _this->_impl_.broadcast_channel_info_.MergeFrom(from._impl_.broadcast_channel_info_);
  _this->_impl_.extra_messages_.MergeFrom(from._impl_.extra_messages_);
  _this->_impl_.previous_series_matches_.MergeFrom(from._impl_.previous_series_matches_);
  _this->_impl_.event_progression_enabled_.MergeFrom(from._impl_.event_progression_enabled_);
  _this->_impl_.emergency_disabled_hero_ids_.MergeFrom(from._impl_.emergency_disabled_hero_ids_);
  _this->_impl_.guild_challenges_.MergeFrom(from._impl_.guild_challenges_);
  _this->_impl_.guild_details_.MergeFrom(from._impl_.guild_details_);
  _this->_impl_.lobby_event_points_.MergeFrom(from._impl_.lobby_event_points_);
  _this->_impl_.all_members_.MergeFrom(from._impl_.all_members_);
  _this->_impl_.member_indices_.MergeFrom(from._impl_.member_indices_);
  _this->_impl_.left_member_indices_.MergeFrom(from._impl_.left_member_indices_);
  _this->_impl_.free_member_indices_.MergeFrom(from._impl_.free_member_indices_);
  _this->_impl_.requested_hero_ids_.MergeFrom(from._impl_.requested_hero_ids_);
  _this->_impl_.coach_friend_requests_.MergeFrom(from._impl_.coach_friend_requests_);
  _this->_impl_.extra_startup_messages_.MergeFrom(from._impl_.extra_startup_messages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_connect(from._internal_connect());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_custom_game_mode(from._internal_custom_game_mode());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_event_game_definition(from._internal_event_game_definition());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_save_game()->::CDOTASaveGame::MergeFrom(
          from._internal_save_game());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.server_id_ = from._impl_.server_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.leader_id_ = from._impl_.leader_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tutorial_lesson_ = from._impl_.tutorial_lesson_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tournament_id_ = from._impl_.tournament_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tournament_game_id_ = from._impl_.tournament_game_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.game_state_ = from._impl_.game_state_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.num_spectators_ = from._impl_.num_spectators_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.allow_cheats_ = from._impl_.allow_cheats_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.fill_with_bots_ = from._impl_.fill_with_bots_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.intro_mode_ = from._impl_.intro_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.allchat_ = from._impl_.allchat_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.matchgroup_ = from._impl_.matchgroup_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.cm_pick_ = from._impl_.cm_pick_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.leagueid_ = from._impl_.leagueid_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.penalty_level_radiant_ = from._impl_.penalty_level_radiant_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.penalty_level_dire_ = from._impl_.penalty_level_dire_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.load_game_id_ = from._impl_.load_game_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.series_type_ = from._impl_.series_type_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.radiant_series_wins_ = from._impl_.radiant_series_wins_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dire_series_wins_ = from._impl_.dire_series_wins_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.loot_generated_ = from._impl_.loot_generated_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.loot_awarded_ = from._impl_.loot_awarded_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dota_tv_delay_ = from._impl_.dota_tv_delay_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.custom_difficulty_ = from._impl_.custom_difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.first_leaver_accountid_ = from._impl_.first_leaver_accountid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.series_id_ = from._impl_.series_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.lan_ = from._impl_.lan_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.low_priority_ = from._impl_.low_priority_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.first_blood_happened_ = from._impl_.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.mass_disconnect_ = from._impl_.mass_disconnect_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.match_outcome_ = from._impl_.match_outcome_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.custom_min_players_ = from._impl_.custom_min_players_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.custom_max_players_ = from._impl_.custom_max_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.custom_game_crc_ = from._impl_.custom_game_crc_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.visibility_ = from._impl_.visibility_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.custom_game_timestamp_ = from._impl_.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.previous_match_override_ = from._impl_.previous_match_override_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.game_start_time_ = from._impl_.game_start_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.pause_setting_ = from._impl_.pause_setting_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.weekend_tourney_division_id_ = from._impl_.weekend_tourney_division_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.weekend_tourney_skill_level_ = from._impl_.weekend_tourney_skill_level_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.bot_radiant_ = from._impl_.bot_radiant_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.weekend_tourney_bracket_round_ = from._impl_.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.selection_priority_rules_ = from._impl_.selection_priority_rules_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.bot_dire_ = from._impl_.bot_dire_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.series_previous_selection_priority_team_id_ = from._impl_.series_previous_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.series_current_selection_priority_team_id_ = from._impl_.series_current_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.series_current_priority_team_choice_ = from._impl_.series_current_priority_team_choice_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.custom_game_auto_created_lobby_ = from._impl_.custom_game_auto_created_lobby_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.series_current_selection_priority_used_coin_toss_ = from._impl_.series_current_selection_priority_used_coin_toss_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.custom_game_penalties_ = from._impl_.custom_game_penalties_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.record_detailed_stats_ = from._impl_.record_detailed_stats_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.series_current_non_priority_team_choice_ = from._impl_.series_current_non_priority_team_choice_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.current_primary_event_ = from._impl_.current_primary_event_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.custom_game_private_key_ = from._impl_.custom_game_private_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.league_node_id_ = from._impl_.league_node_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.match_duration_ = from._impl_.match_duration_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.league_phase_ = from._impl_.league_phase_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.experimental_gameplay_enabled_ = from._impl_.experimental_gameplay_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_in_steam_china_ = from._impl_.is_in_steam_china_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.with_scenario_save_ = from._impl_.with_scenario_save_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.lobby_creation_time_ = from._impl_.lobby_creation_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.allow_spectating_ = from._impl_.allow_spectating_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.bot_difficulty_radiant_ = from._impl_.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.bot_difficulty_dire_ = from._impl_.bot_difficulty_dire_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTALobby::CopyFrom(const CSODOTALobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby::IsInitialized() const {
  return true;
}

void CSODOTALobby::InternalSwap(CSODOTALobby* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  _impl_.pending_invites_.InternalSwap(&other->_impl_.pending_invites_);
  _impl_.team_details_.InternalSwap(&other->_impl_.team_details_);
  _impl_.timed_reward_details_.InternalSwap(&other->_impl_.timed_reward_details_);
  _impl_.broadcast_channel_info_.InternalSwap(&other->_impl_.broadcast_channel_info_);
  _impl_.extra_messages_.InternalSwap(&other->_impl_.extra_messages_);
  _impl_.previous_series_matches_.InternalSwap(&other->_impl_.previous_series_matches_);
  _impl_.event_progression_enabled_.InternalSwap(&other->_impl_.event_progression_enabled_);
  _impl_.emergency_disabled_hero_ids_.InternalSwap(&other->_impl_.emergency_disabled_hero_ids_);
  _impl_.guild_challenges_.InternalSwap(&other->_impl_.guild_challenges_);
  _impl_.guild_details_.InternalSwap(&other->_impl_.guild_details_);
  _impl_.lobby_event_points_.InternalSwap(&other->_impl_.lobby_event_points_);
  _impl_.all_members_.InternalSwap(&other->_impl_.all_members_);
  _impl_.member_indices_.InternalSwap(&other->_impl_.member_indices_);
  _impl_.left_member_indices_.InternalSwap(&other->_impl_.left_member_indices_);
  _impl_.free_member_indices_.InternalSwap(&other->_impl_.free_member_indices_);
  _impl_.requested_hero_ids_.InternalSwap(&other->_impl_.requested_hero_ids_);
  _impl_.coach_friend_requests_.InternalSwap(&other->_impl_.coach_friend_requests_);
  _impl_.extra_startup_messages_.InternalSwap(&other->_impl_.extra_startup_messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connect_, lhs_arena,
      &other->_impl_.connect_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_name_, lhs_arena,
      &other->_impl_.game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_key_, lhs_arena,
      &other->_impl_.pass_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_game_mode_, lhs_arena,
      &other->_impl_.custom_game_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_map_name_, lhs_arena,
      &other->_impl_.custom_map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lan_host_ping_location_, lhs_arena,
      &other->_impl_.lan_host_ping_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_game_definition_, lhs_arena,
      &other->_impl_.event_game_definition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTALobby, _impl_.lobby_creation_time_)
      + sizeof(CSODOTALobby::_impl_.lobby_creation_time_)
      - PROTOBUF_FIELD_OFFSET(CSODOTALobby, _impl_.save_game_)>(
          reinterpret_cast<char*>(&_impl_.save_game_),
          reinterpret_cast<char*>(&other->_impl_.save_game_));
  swap(_impl_.lobby_type_, other->_impl_.lobby_type_);
  swap(_impl_.allow_spectating_, other->_impl_.allow_spectating_);
  swap(_impl_.bot_difficulty_radiant_, other->_impl_.bot_difficulty_radiant_);
  swap(_impl_.bot_difficulty_dire_, other->_impl_.bot_difficulty_dire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[20]);
}

// ===================================================================

class CSODOTAServerLobby::_Internal {
 public:
};

CSODOTAServerLobby::CSODOTAServerLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTAServerLobby)
}
CSODOTAServerLobby::CSODOTAServerLobby(const CSODOTAServerLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTAServerLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_members_){from._impl_.all_members_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSODOTAServerLobby)
}

inline void CSODOTAServerLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_members_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSODOTAServerLobby::~CSODOTAServerLobby() {
  // @@protoc_insertion_point(destructor:CSODOTAServerLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTAServerLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_members_.~RepeatedPtrField();
}

void CSODOTAServerLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTAServerLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAServerLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAServerLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSODOTAServerLobbyMember all_members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTAServerLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAServerLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSODOTAServerLobbyMember all_members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAServerLobby)
  return target;
}

size_t CSODOTAServerLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAServerLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTAServerLobbyMember all_members = 1;
  total_size += 1UL * this->_internal_all_members_size();
  for (const auto& msg : this->_impl_.all_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAServerLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTAServerLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAServerLobby::GetClassData() const { return &_class_data_; }


void CSODOTAServerLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTAServerLobby*>(&to_msg);
  auto& from = static_cast<const CSODOTAServerLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAServerLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_members_.MergeFrom(from._impl_.all_members_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTAServerLobby::CopyFrom(const CSODOTAServerLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAServerLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAServerLobby::IsInitialized() const {
  return true;
}

void CSODOTAServerLobby::InternalSwap(CSODOTAServerLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_members_.InternalSwap(&other->_impl_.all_members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAServerLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[21]);
}

// ===================================================================

class CSODOTAStaticLobby::_Internal {
 public:
};

CSODOTAStaticLobby::CSODOTAStaticLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTAStaticLobby)
}
CSODOTAStaticLobby::CSODOTAStaticLobby(const CSODOTAStaticLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTAStaticLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_members_){from._impl_.all_members_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSODOTAStaticLobby)
}

inline void CSODOTAStaticLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_members_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSODOTAStaticLobby::~CSODOTAStaticLobby() {
  // @@protoc_insertion_point(destructor:CSODOTAStaticLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTAStaticLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_members_.~RepeatedPtrField();
}

void CSODOTAStaticLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTAStaticLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAStaticLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAStaticLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSODOTAStaticLobbyMember all_members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTAStaticLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAStaticLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSODOTAStaticLobbyMember all_members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAStaticLobby)
  return target;
}

size_t CSODOTAStaticLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAStaticLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTAStaticLobbyMember all_members = 1;
  total_size += 1UL * this->_internal_all_members_size();
  for (const auto& msg : this->_impl_.all_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAStaticLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTAStaticLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAStaticLobby::GetClassData() const { return &_class_data_; }


void CSODOTAStaticLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTAStaticLobby*>(&to_msg);
  auto& from = static_cast<const CSODOTAStaticLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAStaticLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_members_.MergeFrom(from._impl_.all_members_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTAStaticLobby::CopyFrom(const CSODOTAStaticLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAStaticLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAStaticLobby::IsInitialized() const {
  return true;
}

void CSODOTAStaticLobby::InternalSwap(CSODOTAStaticLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_members_.InternalSwap(&other->_impl_.all_members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAStaticLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[22]);
}

// ===================================================================

class CSODOTAServerStaticLobby::_Internal {
 public:
};

CSODOTAServerStaticLobby::CSODOTAServerStaticLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTAServerStaticLobby)
}
CSODOTAServerStaticLobby::CSODOTAServerStaticLobby(const CSODOTAServerStaticLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTAServerStaticLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_members_){from._impl_.all_members_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSODOTAServerStaticLobby)
}

inline void CSODOTAServerStaticLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_members_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSODOTAServerStaticLobby::~CSODOTAServerStaticLobby() {
  // @@protoc_insertion_point(destructor:CSODOTAServerStaticLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTAServerStaticLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_members_.~RepeatedPtrField();
}

void CSODOTAServerStaticLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTAServerStaticLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAServerStaticLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAServerStaticLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSODOTAServerStaticLobbyMember all_members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTAServerStaticLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAServerStaticLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSODOTAServerStaticLobbyMember all_members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAServerStaticLobby)
  return target;
}

size_t CSODOTAServerStaticLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAServerStaticLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTAServerStaticLobbyMember all_members = 1;
  total_size += 1UL * this->_internal_all_members_size();
  for (const auto& msg : this->_impl_.all_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAServerStaticLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTAServerStaticLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAServerStaticLobby::GetClassData() const { return &_class_data_; }


void CSODOTAServerStaticLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTAServerStaticLobby*>(&to_msg);
  auto& from = static_cast<const CSODOTAServerStaticLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAServerStaticLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_members_.MergeFrom(from._impl_.all_members_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTAServerStaticLobby::CopyFrom(const CSODOTAServerStaticLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAServerStaticLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAServerStaticLobby::IsInitialized() const {
  return true;
}

void CSODOTAServerStaticLobby::InternalSwap(CSODOTAServerStaticLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_members_.InternalSwap(&other->_impl_.all_members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAServerStaticLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[23]);
}

// ===================================================================

class CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange>()._impl_._has_bits_);
  static void set_has_message_id_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_id_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
}
CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_id_start_){}
    , decltype(_impl_.message_id_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.message_id_start_, &from._impl_.message_id_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_end_) -
    reinterpret_cast<char*>(&_impl_.message_id_start_)) + sizeof(_impl_.message_id_end_));
  // @@protoc_insertion_point(copy_constructor:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
}

inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_id_start_){4294967295u}
    , decltype(_impl_.message_id_end_){4294967295u}
  };
}

CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::~CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange() {
  // @@protoc_insertion_point(destructor:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.message_id_start_ = 4294967295u;
    _impl_.message_id_end_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 message_id_start = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_message_id_start(&has_bits);
          _impl_.message_id_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 message_id_end = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_message_id_end(&has_bits);
          _impl_.message_id_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 message_id_start = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id_start(), target);
  }

  // optional uint32 message_id_end = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_message_id_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
  return target;
}

size_t CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 message_id_start = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id_start());
    }

    // optional uint32 message_id_end = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::GetClassData() const { return &_class_data_; }


void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange*>(&to_msg);
  auto& from = static_cast<const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.message_id_start_ = from._impl_.message_id_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.message_id_end_ = from._impl_.message_id_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::CopyFrom(const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::IsInitialized() const {
  return true;
}

void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::InternalSwap(CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.message_id_start_, other->_impl_.message_id_start_);
  swap(_impl_.message_id_end_, other->_impl_.message_id_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[24]);
}

// ===================================================================

class CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange>()._impl_._has_bits_);
  static void set_has_message_id_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_id_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
}
CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_id_start_){}
    , decltype(_impl_.message_id_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.message_id_start_, &from._impl_.message_id_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_end_) -
    reinterpret_cast<char*>(&_impl_.message_id_start_)) + sizeof(_impl_.message_id_end_));
  // @@protoc_insertion_point(copy_constructor:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
}

inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_id_start_){4294967295u}
    , decltype(_impl_.message_id_end_){4294967295u}
  };
}

CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::~CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange() {
  // @@protoc_insertion_point(destructor:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.message_id_start_ = 4294967295u;
    _impl_.message_id_end_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 message_id_start = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_message_id_start(&has_bits);
          _impl_.message_id_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 message_id_end = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_message_id_end(&has_bits);
          _impl_.message_id_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 message_id_start = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id_start(), target);
  }

  // optional uint32 message_id_end = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_message_id_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
  return target;
}

size_t CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 message_id_start = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id_start());
    }

    // optional uint32 message_id_end = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::GetClassData() const { return &_class_data_; }


void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange*>(&to_msg);
  auto& from = static_cast<const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.message_id_start_ = from._impl_.message_id_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.message_id_end_ = from._impl_.message_id_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::CopyFrom(const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::IsInitialized() const {
  return true;
}

void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::InternalSwap(CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.message_id_start_, other->_impl_.message_id_start_);
  swap(_impl_.message_id_end_, other->_impl_.message_id_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[25]);
}

// ===================================================================

class CMsgAdditionalLobbyStartupAccountData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAdditionalLobbyStartupAccountData>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgLobbyPlayerPlusSubscriptionData& plus_data(const CMsgAdditionalLobbyStartupAccountData* msg);
  static void set_has_plus_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgLobbyPlayerPlusSubscriptionData&
CMsgAdditionalLobbyStartupAccountData::_Internal::plus_data(const CMsgAdditionalLobbyStartupAccountData* msg) {
  return *msg->_impl_.plus_data_;
}
CMsgAdditionalLobbyStartupAccountData::CMsgAdditionalLobbyStartupAccountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAdditionalLobbyStartupAccountData)
}
CMsgAdditionalLobbyStartupAccountData::CMsgAdditionalLobbyStartupAccountData(const CMsgAdditionalLobbyStartupAccountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAdditionalLobbyStartupAccountData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unlocked_chat_wheel_message_ranges_){from._impl_.unlocked_chat_wheel_message_ranges_}
    , decltype(_impl_.unlocked_ping_wheel_message_ranges_){from._impl_.unlocked_ping_wheel_message_ranges_}
    , decltype(_impl_.plus_data_){nullptr}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plus_data()) {
    _this->_impl_.plus_data_ = new ::CMsgLobbyPlayerPlusSubscriptionData(*from._impl_.plus_data_);
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgAdditionalLobbyStartupAccountData)
}

inline void CMsgAdditionalLobbyStartupAccountData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unlocked_chat_wheel_message_ranges_){arena}
    , decltype(_impl_.unlocked_ping_wheel_message_ranges_){arena}
    , decltype(_impl_.plus_data_){nullptr}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgAdditionalLobbyStartupAccountData::~CMsgAdditionalLobbyStartupAccountData() {
  // @@protoc_insertion_point(destructor:CMsgAdditionalLobbyStartupAccountData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAdditionalLobbyStartupAccountData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unlocked_chat_wheel_message_ranges_.~RepeatedPtrField();
  _impl_.unlocked_ping_wheel_message_ranges_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.plus_data_;
}

void CMsgAdditionalLobbyStartupAccountData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAdditionalLobbyStartupAccountData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAdditionalLobbyStartupAccountData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unlocked_chat_wheel_message_ranges_.Clear();
  _impl_.unlocked_ping_wheel_message_ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.plus_data_ != nullptr);
    _impl_.plus_data_->Clear();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAdditionalLobbyStartupAccountData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLobbyPlayerPlusSubscriptionData plus_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plus_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unlocked_chat_wheel_message_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unlocked_ping_wheel_message_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAdditionalLobbyStartupAccountData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAdditionalLobbyStartupAccountData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgLobbyPlayerPlusSubscriptionData plus_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::plus_data(this),
        _Internal::plus_data(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unlocked_chat_wheel_message_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_unlocked_chat_wheel_message_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unlocked_ping_wheel_message_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_unlocked_ping_wheel_message_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAdditionalLobbyStartupAccountData)
  return target;
}

size_t CMsgAdditionalLobbyStartupAccountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAdditionalLobbyStartupAccountData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 3;
  total_size += 1UL * this->_internal_unlocked_chat_wheel_message_ranges_size();
  for (const auto& msg : this->_impl_.unlocked_chat_wheel_message_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 4;
  total_size += 1UL * this->_internal_unlocked_ping_wheel_message_ranges_size();
  for (const auto& msg : this->_impl_.unlocked_ping_wheel_message_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgLobbyPlayerPlusSubscriptionData plus_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.plus_data_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAdditionalLobbyStartupAccountData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAdditionalLobbyStartupAccountData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAdditionalLobbyStartupAccountData::GetClassData() const { return &_class_data_; }


void CMsgAdditionalLobbyStartupAccountData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAdditionalLobbyStartupAccountData*>(&to_msg);
  auto& from = static_cast<const CMsgAdditionalLobbyStartupAccountData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAdditionalLobbyStartupAccountData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unlocked_chat_wheel_message_ranges_.MergeFrom(from._impl_.unlocked_chat_wheel_message_ranges_);
  _this->_impl_.unlocked_ping_wheel_message_ranges_.MergeFrom(from._impl_.unlocked_ping_wheel_message_ranges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_plus_data()->::CMsgLobbyPlayerPlusSubscriptionData::MergeFrom(
          from._internal_plus_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAdditionalLobbyStartupAccountData::CopyFrom(const CMsgAdditionalLobbyStartupAccountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAdditionalLobbyStartupAccountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdditionalLobbyStartupAccountData::IsInitialized() const {
  return true;
}

void CMsgAdditionalLobbyStartupAccountData::InternalSwap(CMsgAdditionalLobbyStartupAccountData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.unlocked_chat_wheel_message_ranges_.InternalSwap(&other->_impl_.unlocked_chat_wheel_message_ranges_);
  _impl_.unlocked_ping_wheel_message_ranges_.InternalSwap(&other->_impl_.unlocked_ping_wheel_message_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAdditionalLobbyStartupAccountData, _impl_.account_id_)
      + sizeof(CMsgAdditionalLobbyStartupAccountData::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgAdditionalLobbyStartupAccountData, _impl_.plus_data_)>(
          reinterpret_cast<char*>(&_impl_.plus_data_),
          reinterpret_cast<char*>(&other->_impl_.plus_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAdditionalLobbyStartupAccountData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[26]);
}

// ===================================================================

class CMsgLobbyInitializationComplete::_Internal {
 public:
};

CMsgLobbyInitializationComplete::CMsgLobbyInitializationComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyInitializationComplete)
}
CMsgLobbyInitializationComplete::CMsgLobbyInitializationComplete(const CMsgLobbyInitializationComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgLobbyInitializationComplete* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyInitializationComplete)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyInitializationComplete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyInitializationComplete::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyInitializationComplete::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[27]);
}

// ===================================================================

class CMsgLobbyPlaytestDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyPlaytestDetails>()._impl_._has_bits_);
  static void set_has_json(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyPlaytestDetails)
}
CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyPlaytestDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.json_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json()) {
    _this->_impl_.json_.Set(from._internal_json(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyPlaytestDetails)
}

inline void CMsgLobbyPlaytestDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.json_){}
  };
  _impl_.json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgLobbyPlaytestDetails::~CMsgLobbyPlaytestDetails() {
  // @@protoc_insertion_point(destructor:CMsgLobbyPlaytestDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyPlaytestDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.json_.Destroy();
}

void CMsgLobbyPlaytestDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyPlaytestDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyPlaytestDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.json_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyPlaytestDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgLobbyPlaytestDetails.json");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyPlaytestDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyPlaytestDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLobbyPlaytestDetails.json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyPlaytestDetails)
  return target;
}

size_t CMsgLobbyPlaytestDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyPlaytestDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string json = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyPlaytestDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyPlaytestDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyPlaytestDetails::GetClassData() const { return &_class_data_; }


void CMsgLobbyPlaytestDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyPlaytestDetails*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyPlaytestDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyPlaytestDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_json()) {
    _this->_internal_set_json(from._internal_json());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyPlaytestDetails::CopyFrom(const CMsgLobbyPlaytestDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyPlaytestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlaytestDetails::IsInitialized() const {
  return true;
}

void CMsgLobbyPlaytestDetails::InternalSwap(CMsgLobbyPlaytestDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.json_, lhs_arena,
      &other->_impl_.json_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyPlaytestDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[28]);
}

// ===================================================================

class CMsgLocalServerGuildData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLocalServerGuildData>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guild_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guild_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_guild_primary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guild_secondary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guild_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_guild_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_guild_weekly_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgLocalServerGuildData::CMsgLocalServerGuildData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLocalServerGuildData)
}
CMsgLocalServerGuildData::CMsgLocalServerGuildData(const CMsgLocalServerGuildData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLocalServerGuildData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.guild_logo_){}
    , decltype(_impl_.guild_points_){}
    , decltype(_impl_.guild_primary_color_){}
    , decltype(_impl_.guild_secondary_color_){}
    , decltype(_impl_.guild_pattern_){}
    , decltype(_impl_.guild_flags_){}
    , decltype(_impl_.guild_weekly_percentile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guild_weekly_percentile_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.guild_weekly_percentile_));
  // @@protoc_insertion_point(copy_constructor:CMsgLocalServerGuildData)
}

inline void CMsgLocalServerGuildData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.guild_logo_){uint64_t{0u}}
    , decltype(_impl_.guild_points_){0u}
    , decltype(_impl_.guild_primary_color_){0u}
    , decltype(_impl_.guild_secondary_color_){0u}
    , decltype(_impl_.guild_pattern_){0u}
    , decltype(_impl_.guild_flags_){0u}
    , decltype(_impl_.guild_weekly_percentile_){0u}
  };
}

CMsgLocalServerGuildData::~CMsgLocalServerGuildData() {
  // @@protoc_insertion_point(destructor:CMsgLocalServerGuildData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLocalServerGuildData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLocalServerGuildData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLocalServerGuildData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLocalServerGuildData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.guild_flags_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.guild_flags_));
  }
  _impl_.guild_weekly_percentile_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLocalServerGuildData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_guild_points(&has_bits);
          _impl_.guild_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 guild_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_guild_logo(&has_bits);
          _impl_.guild_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_primary_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_guild_primary_color(&has_bits);
          _impl_.guild_primary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_secondary_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_guild_secondary_color(&has_bits);
          _impl_.guild_secondary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_pattern = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_guild_pattern(&has_bits);
          _impl_.guild_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_guild_flags(&has_bits);
          _impl_.guild_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_percentile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_guild_weekly_percentile(&has_bits);
          _impl_.guild_weekly_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLocalServerGuildData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLocalServerGuildData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 guild_points = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_points(), target);
  }

  // optional uint64 guild_logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_guild_logo(), target);
  }

  // optional uint32 guild_primary_color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_guild_primary_color(), target);
  }

  // optional uint32 guild_secondary_color = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_guild_secondary_color(), target);
  }

  // optional uint32 guild_pattern = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_guild_pattern(), target);
  }

  // optional uint32 guild_flags = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_guild_flags(), target);
  }

  // optional uint32 guild_weekly_percentile = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_guild_weekly_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLocalServerGuildData)
  return target;
}

size_t CMsgLocalServerGuildData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLocalServerGuildData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint64 guild_logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guild_logo());
    }

    // optional uint32 guild_points = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_points());
    }

    // optional uint32 guild_primary_color = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_primary_color());
    }

    // optional uint32 guild_secondary_color = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_secondary_color());
    }

    // optional uint32 guild_pattern = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_pattern());
    }

    // optional uint32 guild_flags = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_flags());
    }

  }
  // optional uint32 guild_weekly_percentile = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_weekly_percentile());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLocalServerGuildData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLocalServerGuildData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLocalServerGuildData::GetClassData() const { return &_class_data_; }


void CMsgLocalServerGuildData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLocalServerGuildData*>(&to_msg);
  auto& from = static_cast<const CMsgLocalServerGuildData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLocalServerGuildData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.guild_logo_ = from._impl_.guild_logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.guild_points_ = from._impl_.guild_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.guild_primary_color_ = from._impl_.guild_primary_color_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.guild_secondary_color_ = from._impl_.guild_secondary_color_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.guild_pattern_ = from._impl_.guild_pattern_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.guild_flags_ = from._impl_.guild_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_guild_weekly_percentile(from._internal_guild_weekly_percentile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLocalServerGuildData::CopyFrom(const CMsgLocalServerGuildData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLocalServerGuildData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLocalServerGuildData::IsInitialized() const {
  return true;
}

void CMsgLocalServerGuildData::InternalSwap(CMsgLocalServerGuildData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLocalServerGuildData, _impl_.guild_weekly_percentile_)
      + sizeof(CMsgLocalServerGuildData::_impl_.guild_weekly_percentile_)
      - PROTOBUF_FIELD_OFFSET(CMsgLocalServerGuildData, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLocalServerGuildData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[29]);
}

// ===================================================================

class CMsgLocalServerFakeLobbyData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLocalServerFakeLobbyData>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_primary_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_favorite_team(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_favorite_team_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgLocalServerGuildData& guild_info(const CMsgLocalServerFakeLobbyData* msg);
  static void set_has_guild_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teleport_fx_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgAdditionalLobbyStartupAccountData& additional_data(const CMsgLocalServerFakeLobbyData* msg);
  static void set_has_additional_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgLocalServerGuildData&
CMsgLocalServerFakeLobbyData::_Internal::guild_info(const CMsgLocalServerFakeLobbyData* msg) {
  return *msg->_impl_.guild_info_;
}
const ::CMsgAdditionalLobbyStartupAccountData&
CMsgLocalServerFakeLobbyData::_Internal::additional_data(const CMsgLocalServerFakeLobbyData* msg) {
  return *msg->_impl_.additional_data_;
}
CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLocalServerFakeLobbyData)
}
CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData(const CMsgLocalServerFakeLobbyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLocalServerFakeLobbyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_points_){from._impl_.event_points_}
    , decltype(_impl_.guild_info_){nullptr}
    , decltype(_impl_.additional_data_){nullptr}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.is_plus_subscriber_){}
    , decltype(_impl_.primary_event_id_){}
    , decltype(_impl_.favorite_team_){}
    , decltype(_impl_.favorite_team_quality_){}
    , decltype(_impl_.teleport_fx_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guild_info()) {
    _this->_impl_.guild_info_ = new ::CMsgLocalServerGuildData(*from._impl_.guild_info_);
  }
  if (from._internal_has_additional_data()) {
    _this->_impl_.additional_data_ = new ::CMsgAdditionalLobbyStartupAccountData(*from._impl_.additional_data_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teleport_fx_level_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.teleport_fx_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgLocalServerFakeLobbyData)
}

inline void CMsgLocalServerFakeLobbyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_points_){arena}
    , decltype(_impl_.guild_info_){nullptr}
    , decltype(_impl_.additional_data_){nullptr}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.is_plus_subscriber_){false}
    , decltype(_impl_.primary_event_id_){0u}
    , decltype(_impl_.favorite_team_){0u}
    , decltype(_impl_.favorite_team_quality_){0u}
    , decltype(_impl_.teleport_fx_level_){0u}
  };
}

CMsgLocalServerFakeLobbyData::~CMsgLocalServerFakeLobbyData() {
  // @@protoc_insertion_point(destructor:CMsgLocalServerFakeLobbyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLocalServerFakeLobbyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.guild_info_;
  if (this != internal_default_instance()) delete _impl_.additional_data_;
}

void CMsgLocalServerFakeLobbyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLocalServerFakeLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLocalServerFakeLobbyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_points_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.guild_info_ != nullptr);
      _impl_.guild_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.additional_data_ != nullptr);
      _impl_.additional_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.teleport_fx_level_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.teleport_fx_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLocalServerFakeLobbyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_plus_subscriber(&has_bits);
          _impl_.is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 primary_event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_primary_event_id(&has_bits);
          _impl_.primary_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 favorite_team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_favorite_team(&has_bits);
          _impl_.favorite_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 favorite_team_quality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_favorite_team_quality(&has_bits);
          _impl_.favorite_team_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLocalServerGuildData guild_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teleport_fx_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_teleport_fx_level(&has_bits);
          _impl_.teleport_fx_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgAdditionalLobbyStartupAccountData additional_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLocalServerFakeLobbyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLocalServerFakeLobbyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgLobbyEventPoints event_points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_plus_subscriber = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_plus_subscriber(), target);
  }

  // optional uint32 primary_event_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_primary_event_id(), target);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_favorite_team(), target);
  }

  // optional uint32 favorite_team_quality = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_favorite_team_quality(), target);
  }

  // optional .CMsgLocalServerGuildData guild_info = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::guild_info(this),
        _Internal::guild_info(this).GetCachedSize(), target, stream);
  }

  // optional uint32 teleport_fx_level = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_teleport_fx_level(), target);
  }

  // optional .CMsgAdditionalLobbyStartupAccountData additional_data = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::additional_data(this),
        _Internal::additional_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLocalServerFakeLobbyData)
  return target;
}

size_t CMsgLocalServerFakeLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLocalServerFakeLobbyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyEventPoints event_points = 2;
  total_size += 1UL * this->_internal_event_points_size();
  for (const auto& msg : this->_impl_.event_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgLocalServerGuildData guild_info = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.guild_info_);
    }

    // optional .CMsgAdditionalLobbyStartupAccountData additional_data = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.additional_data_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool is_plus_subscriber = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 primary_event_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_primary_event_id());
    }

    // optional uint32 favorite_team = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_favorite_team());
    }

    // optional uint32 favorite_team_quality = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_favorite_team_quality());
    }

    // optional uint32 teleport_fx_level = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teleport_fx_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLocalServerFakeLobbyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLocalServerFakeLobbyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLocalServerFakeLobbyData::GetClassData() const { return &_class_data_; }


void CMsgLocalServerFakeLobbyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLocalServerFakeLobbyData*>(&to_msg);
  auto& from = static_cast<const CMsgLocalServerFakeLobbyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLocalServerFakeLobbyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_points_.MergeFrom(from._impl_.event_points_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_guild_info()->::CMsgLocalServerGuildData::MergeFrom(
          from._internal_guild_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_additional_data()->::CMsgAdditionalLobbyStartupAccountData::MergeFrom(
          from._internal_additional_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_plus_subscriber_ = from._impl_.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.primary_event_id_ = from._impl_.primary_event_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.favorite_team_ = from._impl_.favorite_team_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.favorite_team_quality_ = from._impl_.favorite_team_quality_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.teleport_fx_level_ = from._impl_.teleport_fx_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLocalServerFakeLobbyData::CopyFrom(const CMsgLocalServerFakeLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLocalServerFakeLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLocalServerFakeLobbyData::IsInitialized() const {
  return true;
}

void CMsgLocalServerFakeLobbyData::InternalSwap(CMsgLocalServerFakeLobbyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.event_points_.InternalSwap(&other->_impl_.event_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLocalServerFakeLobbyData, _impl_.teleport_fx_level_)
      + sizeof(CMsgLocalServerFakeLobbyData::_impl_.teleport_fx_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgLocalServerFakeLobbyData, _impl_.guild_info_)>(
          reinterpret_cast<char*>(&_impl_.guild_info_),
          reinterpret_cast<char*>(&other->_impl_.guild_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLocalServerFakeLobbyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5flobby_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgLobbyCoachFriendRequest*
Arena::CreateMaybeMessage< ::CMsgLobbyCoachFriendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyCoachFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge*
Arena::CreateMaybeMessage< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyPlayerPlusSubscriptionData*
Arena::CreateMaybeMessage< ::CMsgLobbyPlayerPlusSubscriptionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyPlayerPlusSubscriptionData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_PeriodicResourceData*
Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_PeriodicResourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_PeriodicResourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_NetworkedEventAction*
Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_NetworkedEventAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_NetworkedEventAction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_AccountPoints*
Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_AccountPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_AccountPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints*
Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventGameData*
Arena::CreateMaybeMessage< ::CMsgLobbyEventGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobbyInvite_LobbyMember*
Arena::CreateMaybeMessage< ::CSODOTALobbyInvite_LobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobbyInvite_LobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobbyInvite*
Arena::CreateMaybeMessage< ::CSODOTALobbyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobbyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobbyMember*
Arena::CreateMaybeMessage< ::CSODOTALobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAServerLobbyMember*
Arena::CreateMaybeMessage< ::CSODOTAServerLobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAServerLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAStaticLobbyMember*
Arena::CreateMaybeMessage< ::CSODOTAStaticLobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAStaticLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAServerStaticLobbyMember*
Arena::CreateMaybeMessage< ::CSODOTAServerStaticLobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAServerStaticLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyTeamDetails*
Arena::CreateMaybeMessage< ::CLobbyTeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyGuildDetails*
Arena::CreateMaybeMessage< ::CLobbyGuildDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyGuildDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyTimedRewardDetails*
Arena::CreateMaybeMessage< ::CLobbyTimedRewardDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyTimedRewardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyBroadcastChannelInfo*
Arena::CreateMaybeMessage< ::CLobbyBroadcastChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyBroadcastChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyGuildChallenge*
Arena::CreateMaybeMessage< ::CLobbyGuildChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyGuildChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobby_CExtraMsg*
Arena::CreateMaybeMessage< ::CSODOTALobby_CExtraMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobby_CExtraMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobby*
Arena::CreateMaybeMessage< ::CSODOTALobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAServerLobby*
Arena::CreateMaybeMessage< ::CSODOTAServerLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAServerLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAStaticLobby*
Arena::CreateMaybeMessage< ::CSODOTAStaticLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAStaticLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAServerStaticLobby*
Arena::CreateMaybeMessage< ::CSODOTAServerStaticLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAServerStaticLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange*
Arena::CreateMaybeMessage< ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange*
Arena::CreateMaybeMessage< ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAdditionalLobbyStartupAccountData*
Arena::CreateMaybeMessage< ::CMsgAdditionalLobbyStartupAccountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAdditionalLobbyStartupAccountData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyInitializationComplete*
Arena::CreateMaybeMessage< ::CMsgLobbyInitializationComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyInitializationComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyPlaytestDetails*
Arena::CreateMaybeMessage< ::CMsgLobbyPlaytestDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyPlaytestDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLocalServerGuildData*
Arena::CreateMaybeMessage< ::CMsgLocalServerGuildData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLocalServerGuildData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLocalServerFakeLobbyData*
Arena::CreateMaybeMessage< ::CMsgLocalServerFakeLobbyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLocalServerFakeLobbyData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
