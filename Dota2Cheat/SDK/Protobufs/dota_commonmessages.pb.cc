// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_commonmessages.proto

#include "dota_commonmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CDOTAMsg_LocationPing::CDOTAMsg_LocationPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.direct_ping_)*/false
  , /*decltype(_impl_.ping_source_)*/0
  , /*decltype(_impl_.target_)*/-1
  , /*decltype(_impl_.type_)*/4294967295u} {}
struct CDOTAMsg_LocationPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_LocationPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_LocationPingDefaultTypeInternal() {}
  union {
    CDOTAMsg_LocationPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_LocationPingDefaultTypeInternal _CDOTAMsg_LocationPing_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAMsg_ItemAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_ItemAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_ItemAlertDefaultTypeInternal() {}
  union {
    CDOTAMsg_ItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_ItemAlertDefaultTypeInternal _CDOTAMsg_ItemAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMsg_MapLine::CDOTAMsg_MapLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.initial_)*/false} {}
struct CDOTAMsg_MapLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_MapLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_MapLineDefaultTypeInternal() {}
  union {
    CDOTAMsg_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_MapLineDefaultTypeInternal _CDOTAMsg_MapLine_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMsg_WorldLine::CDOTAMsg_WorldLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.initial_)*/false
  , /*decltype(_impl_.end_)*/false} {}
struct CDOTAMsg_WorldLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_WorldLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_WorldLineDefaultTypeInternal() {}
  union {
    CDOTAMsg_WorldLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_WorldLineDefaultTypeInternal _CDOTAMsg_WorldLine_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_strings_)*/{}
  , /*decltype(_impl_.stat_images_)*/{}
  , /*decltype(_impl_.stat_image_types_)*/{}
  , /*decltype(_impl_.movie_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.style_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.use_html_)*/false} {}
struct CDOTAMsg_SendStatPopupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_SendStatPopupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_SendStatPopupDefaultTypeInternal() {}
  union {
    CDOTAMsg_SendStatPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_SendStatPopupDefaultTypeInternal _CDOTAMsg_SendStatPopup_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_delay_)*/0} {}
struct CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal() {}
  union {
    CDOTAMsg_DismissAllStatPopups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal _CDOTAMsg_DismissAllStatPopups_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tgtpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u} {}
struct CDOTAMsg_CoachHUDPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_CoachHUDPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_CoachHUDPingDefaultTypeInternal _CDOTAMsg_CoachHUDPing_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.units_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.target_index_)*/0
  , /*decltype(_impl_.sequence_number_)*/0
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.ability_index_)*/-1} {}
struct CDOTAMsg_UnitOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMsg_UnitOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMsg_UnitOrderDefaultTypeInternal() {}
  union {
    CDOTAMsg_UnitOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMsg_UnitOrderDefaultTypeInternal _CDOTAMsg_UnitOrder_default_instance_;
PROTOBUF_CONSTEXPR VersusScene_PlayActivity_ActivityInfo::VersusScene_PlayActivity_ActivityInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disable_auto_kill_)*/false
  , /*decltype(_impl_.force_looping_)*/false} {}
struct VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal() {}
  union {
    VersusScene_PlayActivity_ActivityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal _VersusScene_PlayActivity_ActivityInfo_default_instance_;
PROTOBUF_CONSTEXPR VersusScene_PlayActivity::VersusScene_PlayActivity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activities_)*/{}
  , /*decltype(_impl_.playback_rate_)*/0} {}
struct VersusScene_PlayActivityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersusScene_PlayActivityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersusScene_PlayActivityDefaultTypeInternal() {}
  union {
    VersusScene_PlayActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersusScene_PlayActivityDefaultTypeInternal _VersusScene_PlayActivity_default_instance_;
PROTOBUF_CONSTEXPR VersusScene_ChatWheel::VersusScene_ChatWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.emoticon_id_)*/0u
  , /*decltype(_impl_.chat_message_id_)*/4294967295u} {}
struct VersusScene_ChatWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersusScene_ChatWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersusScene_ChatWheelDefaultTypeInternal() {}
  union {
    VersusScene_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersusScene_ChatWheelDefaultTypeInternal _VersusScene_ChatWheel_default_instance_;
PROTOBUF_CONSTEXPR VersusScene_PlaybackRate::VersusScene_PlaybackRate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rate_)*/0} {}
struct VersusScene_PlaybackRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersusScene_PlaybackRateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersusScene_PlaybackRateDefaultTypeInternal() {}
  union {
    VersusScene_PlaybackRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersusScene_PlaybackRateDefaultTypeInternal _VersusScene_PlaybackRate_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fcommonmessages_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fcommonmessages_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fcommonmessages_2eproto = nullptr;

const uint32_t TableStruct_dota_5fcommonmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _impl_.direct_ping_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_LocationPing, _impl_.ping_source_),
  0,
  1,
  4,
  2,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_ItemAlert, _impl_.item_ability_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_MapLine, _impl_.initial_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _impl_.initial_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_WorldLine, _impl_.end_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_.stat_strings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_.stat_images_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_.stat_image_types_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_.use_html_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_SendStatPopup, _impl_.movie_name_),
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_DismissAllStatPopups, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_DismissAllStatPopups, _impl_.time_delay_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _impl_.tgtpath_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_.target_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_.ability_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_UnitOrder, _impl_.flags_),
  1,
  ~0u,
  2,
  5,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, _impl_.activity_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, _impl_.disable_auto_kill_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity_ActivityInfo, _impl_.force_looping_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, _impl_.activities_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlayActivity, _impl_.playback_rate_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, _impl_.chat_message_id_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_ChatWheel, _impl_.emoticon_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlaybackRate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlaybackRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VersusScene_PlaybackRate, _impl_.rate_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::CDOTAMsg_LocationPing)},
  { 18, 27, -1, sizeof(::CDOTAMsg_ItemAlert)},
  { 30, 39, -1, sizeof(::CDOTAMsg_MapLine)},
  { 42, 53, -1, sizeof(::CDOTAMsg_WorldLine)},
  { 58, 71, -1, sizeof(::CDOTAMsg_SendStatPopup)},
  { 78, 85, -1, sizeof(::CDOTAMsg_DismissAllStatPopups)},
  { 86, 95, -1, sizeof(::CDOTAMsg_CoachHUDPing)},
  { 98, 111, -1, sizeof(::CDOTAMsg_UnitOrder)},
  { 118, 127, -1, sizeof(::VersusScene_PlayActivity_ActivityInfo)},
  { 130, 138, -1, sizeof(::VersusScene_PlayActivity)},
  { 140, 148, -1, sizeof(::VersusScene_ChatWheel)},
  { 150, 157, -1, sizeof(::VersusScene_PlaybackRate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CDOTAMsg_LocationPing_default_instance_._instance,
  &::_CDOTAMsg_ItemAlert_default_instance_._instance,
  &::_CDOTAMsg_MapLine_default_instance_._instance,
  &::_CDOTAMsg_WorldLine_default_instance_._instance,
  &::_CDOTAMsg_SendStatPopup_default_instance_._instance,
  &::_CDOTAMsg_DismissAllStatPopups_default_instance_._instance,
  &::_CDOTAMsg_CoachHUDPing_default_instance_._instance,
  &::_CDOTAMsg_UnitOrder_default_instance_._instance,
  &::_VersusScene_PlayActivity_ActivityInfo_default_instance_._instance,
  &::_VersusScene_PlayActivity_default_instance_._instance,
  &::_VersusScene_ChatWheel_default_instance_._instance,
  &::_VersusScene_PlaybackRate_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fcommonmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031dota_commonmessages.proto\032\026networkbase"
  "types.proto\"\252\001\n\025CDOTAMsg_LocationPing\022\t\n"
  "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\022\n\006target\030\003 \001(\005:\002-1\022"
  "\023\n\013direct_ping\030\004 \001(\010\022\030\n\004type\030\005 \001(\r:\n4294"
  "967295\0228\n\013ping_source\030\006 \001(\0162\014.EPingSourc"
  "e:\025k_ePingSource_Default\"G\n\022CDOTAMsg_Ite"
  "mAlert\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\033\n\017item_abi"
  "lity_id\030\003 \001(\005:\002-1\"9\n\020CDOTAMsg_MapLine\022\t\n"
  "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\017\n\007initial\030\003 \001(\010\"S\n\022"
  "CDOTAMsg_WorldLine\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005"
  "\022\t\n\001z\030\003 \001(\005\022\017\n\007initial\030\004 \001(\010\022\013\n\003end\030\005 \001("
  "\010\"\320\001\n\026CDOTAMsg_SendStatPopup\0229\n\005style\030\001 "
  "\001(\0162\024.EDOTAStatPopupTypes:\024k_EDOTA_SPT_T"
  "extline\022\024\n\014stat_strings\030\002 \003(\t\022\023\n\013stat_im"
  "ages\030\003 \003(\005\022\030\n\020stat_image_types\030\004 \003(\005\022\020\n\010"
  "duration\030\005 \001(\002\022\020\n\010use_html\030\006 \001(\010\022\022\n\nmovi"
  "e_name\030\007 \001(\t\"3\n\035CDOTAMsg_DismissAllStatP"
  "opups\022\022\n\ntime_delay\030\001 \001(\002\">\n\025CDOTAMsg_Co"
  "achHUDPing\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\017\n\007tgtp"
  "ath\030\003 \001(\t\"\332\001\n\022CDOTAMsg_UnitOrder\022:\n\norde"
  "r_type\030\002 \001(\0162\020.dotaunitorder_t:\024DOTA_UNI"
  "T_ORDER_NONE\022\r\n\005units\030\003 \003(\005\022\027\n\014target_in"
  "dex\030\004 \001(\005:\0010\022\031\n\rability_index\030\005 \001(\005:\002-1\022"
  "\035\n\010position\030\006 \001(\0132\013.CMsgVector\022\027\n\017sequen"
  "ce_number\030\010 \001(\005\022\r\n\005flags\030\t \001(\r\"\301\001\n\030Versu"
  "sScene_PlayActivity\022:\n\nactivities\030\001 \003(\0132"
  "&.VersusScene_PlayActivity.ActivityInfo\022"
  "\025\n\rplayback_rate\030\002 \001(\002\032R\n\014ActivityInfo\022\020"
  "\n\010activity\030\001 \001(\t\022\031\n\021disable_auto_kill\030\002 "
  "\001(\010\022\025\n\rforce_looping\030\003 \001(\010\"Q\n\025VersusScen"
  "e_ChatWheel\022#\n\017chat_message_id\030\001 \001(\r:\n42"
  "94967295\022\023\n\013emoticon_id\030\002 \001(\r\"(\n\030VersusS"
  "cene_PlaybackRate\022\014\n\004rate\030\001 \001(\002*v\n\013EPing"
  "Source\022\031\n\025k_ePingSource_Default\020\000\022\031\n\025k_e"
  "PingSource_Warning\020\001\022\027\n\023k_ePingSource_Wh"
  "eel\020\002\022\030\n\024k_ePingSource_System\020\003*\244\001\n\023EDOT"
  "AStatPopupTypes\022\030\n\024k_EDOTA_SPT_Textline\020"
  "\000\022\025\n\021k_EDOTA_SPT_Basic\020\001\022\024\n\020k_EDOTA_SPT_"
  "Poll\020\002\022\024\n\020k_EDOTA_SPT_Grid\020\003\022\031\n\025k_EDOTA_"
  "SPT_DualImage\020\004\022\025\n\021k_EDOTA_SPT_Movie\020\005*\267"
  "\013\n\017dotaunitorder_t\022\030\n\024DOTA_UNIT_ORDER_NO"
  "NE\020\000\022$\n DOTA_UNIT_ORDER_MOVE_TO_POSITION"
  "\020\001\022\"\n\036DOTA_UNIT_ORDER_MOVE_TO_TARGET\020\002\022\037"
  "\n\033DOTA_UNIT_ORDER_ATTACK_MOVE\020\003\022!\n\035DOTA_"
  "UNIT_ORDER_ATTACK_TARGET\020\004\022!\n\035DOTA_UNIT_"
  "ORDER_CAST_POSITION\020\005\022\037\n\033DOTA_UNIT_ORDER"
  "_CAST_TARGET\020\006\022$\n DOTA_UNIT_ORDER_CAST_T"
  "ARGET_TREE\020\007\022\"\n\036DOTA_UNIT_ORDER_CAST_NO_"
  "TARGET\020\010\022\037\n\033DOTA_UNIT_ORDER_CAST_TOGGLE\020"
  "\t\022!\n\035DOTA_UNIT_ORDER_HOLD_POSITION\020\n\022!\n\035"
  "DOTA_UNIT_ORDER_TRAIN_ABILITY\020\013\022\035\n\031DOTA_"
  "UNIT_ORDER_DROP_ITEM\020\014\022\035\n\031DOTA_UNIT_ORDE"
  "R_GIVE_ITEM\020\r\022\037\n\033DOTA_UNIT_ORDER_PICKUP_"
  "ITEM\020\016\022\037\n\033DOTA_UNIT_ORDER_PICKUP_RUNE\020\017\022"
  "!\n\035DOTA_UNIT_ORDER_PURCHASE_ITEM\020\020\022\035\n\031DO"
  "TA_UNIT_ORDER_SELL_ITEM\020\021\022$\n DOTA_UNIT_O"
  "RDER_DISASSEMBLE_ITEM\020\022\022\035\n\031DOTA_UNIT_ORD"
  "ER_MOVE_ITEM\020\023\022$\n DOTA_UNIT_ORDER_CAST_T"
  "OGGLE_AUTO\020\024\022\030\n\024DOTA_UNIT_ORDER_STOP\020\025\022\031"
  "\n\025DOTA_UNIT_ORDER_TAUNT\020\026\022\033\n\027DOTA_UNIT_O"
  "RDER_BUYBACK\020\027\022\031\n\025DOTA_UNIT_ORDER_GLYPH\020"
  "\030\022)\n%DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STA"
  "SH\020\031\022\035\n\031DOTA_UNIT_ORDER_CAST_RUNE\020\032\022 \n\034D"
  "OTA_UNIT_ORDER_PING_ABILITY\020\033\022%\n!DOTA_UN"
  "IT_ORDER_MOVE_TO_DIRECTION\020\034\022\032\n\026DOTA_UNI"
  "T_ORDER_PATROL\020\035\022*\n&DOTA_UNIT_ORDER_VECT"
  "OR_TARGET_POSITION\020\036\022\031\n\025DOTA_UNIT_ORDER_"
  "RADAR\020\037\022)\n%DOTA_UNIT_ORDER_SET_ITEM_COMB"
  "INE_LOCK\020 \022\034\n\030DOTA_UNIT_ORDER_CONTINUE\020!"
  "\022*\n&DOTA_UNIT_ORDER_VECTOR_TARGET_CANCEL"
  "ED\020\"\022$\n DOTA_UNIT_ORDER_CAST_RIVER_PAINT"
  "\020#\0222\n.DOTA_UNIT_ORDER_PREGAME_ADJUST_ITE"
  "M_ASSIGNMENT\020$\022)\n%DOTA_UNIT_ORDER_DROP_I"
  "TEM_AT_FOUNTAIN\020%\0225\n1DOTA_UNIT_ORDER_TAK"
  "E_ITEM_FROM_NEUTRAL_ITEM_STASH\020&\022!\n\035DOTA"
  "_UNIT_ORDER_MOVE_RELATIVE\020\'\022#\n\037DOTA_UNIT"
  "_ORDER_CAST_TOGGLE_ALT\020(*\217\001\n\036EDOTAVersus"
  "ScenePlayerBehavior\022$\n VS_PLAYER_BEHAVIO"
  "R_PLAY_ACTIVITY\020\001\022!\n\035VS_PLAYER_BEHAVIOR_"
  "CHAT_WHEEL\020\002\022$\n VS_PLAYER_BEHAVIOR_PLAYB"
  "ACK_RATE\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fcommonmessages_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fcommonmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fcommonmessages_2eproto = {
    false, false, 3210, descriptor_table_protodef_dota_5fcommonmessages_2eproto,
    "dota_commonmessages.proto",
    &descriptor_table_dota_5fcommonmessages_2eproto_once, descriptor_table_dota_5fcommonmessages_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_dota_5fcommonmessages_2eproto::offsets,
    file_level_metadata_dota_5fcommonmessages_2eproto, file_level_enum_descriptors_dota_5fcommonmessages_2eproto,
    file_level_service_descriptors_dota_5fcommonmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fcommonmessages_2eproto_getter() {
  return &descriptor_table_dota_5fcommonmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fcommonmessages_2eproto(&descriptor_table_dota_5fcommonmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPingSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[0];
}
bool EPingSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAStatPopupTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[1];
}
bool EDOTAStatPopupTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* dotaunitorder_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[2];
}
bool dotaunitorder_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAVersusScenePlayerBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fcommonmessages_2eproto);
  return file_level_enum_descriptors_dota_5fcommonmessages_2eproto[3];
}
bool EDOTAVersusScenePlayerBehavior_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAMsg_LocationPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_LocationPing>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_direct_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ping_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMsg_LocationPing::CDOTAMsg_LocationPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_LocationPing)
}
CDOTAMsg_LocationPing::CDOTAMsg_LocationPing(const CDOTAMsg_LocationPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_LocationPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.direct_ping_){}
    , decltype(_impl_.ping_source_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_LocationPing)
}

inline void CDOTAMsg_LocationPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.direct_ping_){false}
    , decltype(_impl_.ping_source_){0}
    , decltype(_impl_.target_){-1}
    , decltype(_impl_.type_){4294967295u}
  };
}

CDOTAMsg_LocationPing::~CDOTAMsg_LocationPing() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_LocationPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_LocationPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMsg_LocationPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_LocationPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_LocationPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ping_source_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.ping_source_));
    _impl_.target_ = -1;
    _impl_.type_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_LocationPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_target(&has_bits);
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool direct_ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_direct_ping(&has_bits);
          _impl_.direct_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 5 [default = 4294967295];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPingSource_IsValid(val))) {
            _internal_set_ping_source(static_cast<::EPingSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_LocationPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_LocationPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 target = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target(), target);
  }

  // optional bool direct_ping = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_direct_ping(), target);
  }

  // optional uint32 type = 5 [default = 4294967295];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_type(), target);
  }

  // optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ping_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_LocationPing)
  return target;
}

size_t CDOTAMsg_LocationPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_LocationPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional bool direct_ping = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ping_source());
    }

    // optional int32 target = 3 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target());
    }

    // optional uint32 type = 5 [default = 4294967295];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_LocationPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_LocationPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_LocationPing::GetClassData() const { return &_class_data_; }


void CDOTAMsg_LocationPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_LocationPing*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_LocationPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.direct_ping_ = from._impl_.direct_ping_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ping_source_ = from._impl_.ping_source_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.target_ = from._impl_.target_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_LocationPing::CopyFrom(const CDOTAMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_LocationPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_LocationPing::InternalSwap(CDOTAMsg_LocationPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_LocationPing, _impl_.ping_source_)
      + sizeof(CDOTAMsg_LocationPing::_impl_.ping_source_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_LocationPing, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_LocationPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[0]);
}

// ===================================================================

class CDOTAMsg_ItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_ItemAlert>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_ItemAlert)
}
CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert(const CDOTAMsg_ItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_ItemAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_ability_id_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_ItemAlert)
}

inline void CDOTAMsg_ItemAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.item_ability_id_){-1}
  };
}

CDOTAMsg_ItemAlert::~CDOTAMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_ItemAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_ItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMsg_ItemAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_ItemAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
    _impl_.item_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_ItemAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_ItemAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_ItemAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 item_ability_id = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_ItemAlert)
  return target;
}

size_t CDOTAMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_ItemAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional int32 item_ability_id = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_ItemAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_ItemAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_ItemAlert::GetClassData() const { return &_class_data_; }


void CDOTAMsg_ItemAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_ItemAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_ItemAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_ItemAlert::CopyFrom(const CDOTAMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAMsg_ItemAlert::InternalSwap(CDOTAMsg_ItemAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_ItemAlert, _impl_.y_)
      + sizeof(CDOTAMsg_ItemAlert::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_ItemAlert, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_ItemAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[1]);
}

// ===================================================================

class CDOTAMsg_MapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_MapLine>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMsg_MapLine::CDOTAMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_MapLine)
}
CDOTAMsg_MapLine::CDOTAMsg_MapLine(const CDOTAMsg_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_MapLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.initial_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initial_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.initial_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_MapLine)
}

inline void CDOTAMsg_MapLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.initial_){false}
  };
}

CDOTAMsg_MapLine::~CDOTAMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_MapLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMsg_MapLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_MapLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.initial_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.initial_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_MapLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_initial(&has_bits);
          _impl_.initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_MapLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_MapLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional bool initial = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_initial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_MapLine)
  return target;
}

size_t CDOTAMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_MapLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional bool initial = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_MapLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_MapLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_MapLine::GetClassData() const { return &_class_data_; }


void CDOTAMsg_MapLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_MapLine*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_MapLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.initial_ = from._impl_.initial_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_MapLine::CopyFrom(const CDOTAMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAMsg_MapLine::InternalSwap(CDOTAMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_MapLine, _impl_.initial_)
      + sizeof(CDOTAMsg_MapLine::_impl_.initial_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_MapLine, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_MapLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[2]);
}

// ===================================================================

class CDOTAMsg_WorldLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_WorldLine>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAMsg_WorldLine::CDOTAMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_WorldLine)
}
CDOTAMsg_WorldLine::CDOTAMsg_WorldLine(const CDOTAMsg_WorldLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_WorldLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.initial_){}
    , decltype(_impl_.end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_WorldLine)
}

inline void CDOTAMsg_WorldLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.initial_){false}
    , decltype(_impl_.end_){false}
  };
}

CDOTAMsg_WorldLine::~CDOTAMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_WorldLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_WorldLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMsg_WorldLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_WorldLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_WorldLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_initial(&has_bits);
          _impl_.initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_end(&has_bits);
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_WorldLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_WorldLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  // optional bool initial = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_initial(), target);
  }

  // optional bool end = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_WorldLine)
  return target;
}

size_t CDOTAMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_WorldLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional int32 z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
    }

    // optional bool initial = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool end = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_WorldLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_WorldLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_WorldLine::GetClassData() const { return &_class_data_; }


void CDOTAMsg_WorldLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_WorldLine*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_WorldLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.initial_ = from._impl_.initial_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_WorldLine::CopyFrom(const CDOTAMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAMsg_WorldLine::InternalSwap(CDOTAMsg_WorldLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_WorldLine, _impl_.end_)
      + sizeof(CDOTAMsg_WorldLine::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_WorldLine, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_WorldLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[3]);
}

// ===================================================================

class CDOTAMsg_SendStatPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_SendStatPopup>()._impl_._has_bits_);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_html(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_movie_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_SendStatPopup)
}
CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup(const CDOTAMsg_SendStatPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_SendStatPopup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_strings_){from._impl_.stat_strings_}
    , decltype(_impl_.stat_images_){from._impl_.stat_images_}
    , decltype(_impl_.stat_image_types_){from._impl_.stat_image_types_}
    , decltype(_impl_.movie_name_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.use_html_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.movie_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.movie_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_movie_name()) {
    _this->_impl_.movie_name_.Set(from._internal_movie_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.style_, &from._impl_.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_html_) -
    reinterpret_cast<char*>(&_impl_.style_)) + sizeof(_impl_.use_html_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_SendStatPopup)
}

inline void CDOTAMsg_SendStatPopup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_strings_){arena}
    , decltype(_impl_.stat_images_){arena}
    , decltype(_impl_.stat_image_types_){arena}
    , decltype(_impl_.movie_name_){}
    , decltype(_impl_.style_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.use_html_){false}
  };
  _impl_.movie_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.movie_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMsg_SendStatPopup::~CDOTAMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_SendStatPopup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_SendStatPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_strings_.~RepeatedPtrField();
  _impl_.stat_images_.~RepeatedField();
  _impl_.stat_image_types_.~RepeatedField();
  _impl_.movie_name_.Destroy();
}

void CDOTAMsg_SendStatPopup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_SendStatPopup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_strings_.Clear();
  _impl_.stat_images_.Clear();
  _impl_.stat_image_types_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.movie_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_html_) -
        reinterpret_cast<char*>(&_impl_.style_)) + sizeof(_impl_.use_html_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_SendStatPopup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAStatPopupTypes_IsValid(val))) {
            _internal_set_style(static_cast<::EDOTAStatPopupTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string stat_strings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stat_strings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CDOTAMsg_SendStatPopup.stat_strings");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 stat_images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stat_images(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stat_images(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 stat_image_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stat_image_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stat_image_types(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_html = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_html(&has_bits);
          _impl_.use_html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string movie_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_movie_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAMsg_SendStatPopup.movie_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_SendStatPopup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_SendStatPopup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_style(), target);
  }

  // repeated string stat_strings = 2;
  for (int i = 0, n = this->_internal_stat_strings_size(); i < n; i++) {
    const auto& s = this->_internal_stat_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_SendStatPopup.stat_strings");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 stat_images = 3;
  for (int i = 0, n = this->_internal_stat_images_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_stat_images(i), target);
  }

  // repeated int32 stat_image_types = 4;
  for (int i = 0, n = this->_internal_stat_image_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stat_image_types(i), target);
  }

  // optional float duration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_duration(), target);
  }

  // optional bool use_html = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_html(), target);
  }

  // optional string movie_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movie_name().data(), static_cast<int>(this->_internal_movie_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_SendStatPopup.movie_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_movie_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_SendStatPopup)
  return target;
}

size_t CDOTAMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_SendStatPopup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stat_strings = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stat_strings_.size());
  for (int i = 0, n = _impl_.stat_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stat_strings_.Get(i));
  }

  // repeated int32 stat_images = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.stat_images_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stat_images_size());
    total_size += data_size;
  }

  // repeated int32 stat_image_types = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.stat_image_types_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stat_image_types_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string movie_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie_name());
    }

    // optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_style());
    }

    // optional float duration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool use_html = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_SendStatPopup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_SendStatPopup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_SendStatPopup::GetClassData() const { return &_class_data_; }


void CDOTAMsg_SendStatPopup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_SendStatPopup*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_SendStatPopup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_strings_.MergeFrom(from._impl_.stat_strings_);
  _this->_impl_.stat_images_.MergeFrom(from._impl_.stat_images_);
  _this->_impl_.stat_image_types_.MergeFrom(from._impl_.stat_image_types_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_movie_name(from._internal_movie_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.style_ = from._impl_.style_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.use_html_ = from._impl_.use_html_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_SendStatPopup::CopyFrom(const CDOTAMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAMsg_SendStatPopup::InternalSwap(CDOTAMsg_SendStatPopup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stat_strings_.InternalSwap(&other->_impl_.stat_strings_);
  _impl_.stat_images_.InternalSwap(&other->_impl_.stat_images_);
  _impl_.stat_image_types_.InternalSwap(&other->_impl_.stat_image_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.movie_name_, lhs_arena,
      &other->_impl_.movie_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_SendStatPopup, _impl_.use_html_)
      + sizeof(CDOTAMsg_SendStatPopup::_impl_.use_html_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_SendStatPopup, _impl_.style_)>(
          reinterpret_cast<char*>(&_impl_.style_),
          reinterpret_cast<char*>(&other->_impl_.style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_SendStatPopup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[4]);
}

// ===================================================================

class CDOTAMsg_DismissAllStatPopups::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_DismissAllStatPopups>()._impl_._has_bits_);
  static void set_has_time_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_DismissAllStatPopups)
}
CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups(const CDOTAMsg_DismissAllStatPopups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_DismissAllStatPopups* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_delay_ = from._impl_.time_delay_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_DismissAllStatPopups)
}

inline void CDOTAMsg_DismissAllStatPopups::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_delay_){0}
  };
}

CDOTAMsg_DismissAllStatPopups::~CDOTAMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_DismissAllStatPopups)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_DismissAllStatPopups::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_DismissAllStatPopups)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_delay_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_DismissAllStatPopups::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float time_delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_time_delay(&has_bits);
          _impl_.time_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_DismissAllStatPopups::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_DismissAllStatPopups)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float time_delay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_time_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_DismissAllStatPopups)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float time_delay = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_DismissAllStatPopups::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_DismissAllStatPopups::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_DismissAllStatPopups::GetClassData() const { return &_class_data_; }


void CDOTAMsg_DismissAllStatPopups::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_DismissAllStatPopups*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_DismissAllStatPopups&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_delay()) {
    _this->_internal_set_time_delay(from._internal_time_delay());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_DismissAllStatPopups::CopyFrom(const CDOTAMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAMsg_DismissAllStatPopups::InternalSwap(CDOTAMsg_DismissAllStatPopups* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.time_delay_, other->_impl_.time_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_DismissAllStatPopups::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[5]);
}

// ===================================================================

class CDOTAMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_CoachHUDPing>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tgtpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_CoachHUDPing)
}
CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(const CDOTAMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_CoachHUDPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tgtpath_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tgtpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tgtpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tgtpath()) {
    _this->_impl_.tgtpath_.Set(from._internal_tgtpath(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_CoachHUDPing)
}

inline void CDOTAMsg_CoachHUDPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tgtpath_){}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
  };
  _impl_.tgtpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tgtpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMsg_CoachHUDPing::~CDOTAMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_CoachHUDPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tgtpath_.Destroy();
}

void CDOTAMsg_CoachHUDPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tgtpath_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_CoachHUDPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tgtpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tgtpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAMsg_CoachHUDPing.tgtpath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_CoachHUDPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional string tgtpath = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tgtpath().data(), static_cast<int>(this->_internal_tgtpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_CoachHUDPing.tgtpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tgtpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_CoachHUDPing)
  return target;
}

size_t CDOTAMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_CoachHUDPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tgtpath = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tgtpath());
    }

    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_CoachHUDPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_CoachHUDPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_CoachHUDPing::GetClassData() const { return &_class_data_; }


void CDOTAMsg_CoachHUDPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_CoachHUDPing*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_CoachHUDPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tgtpath(from._internal_tgtpath());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_CoachHUDPing::InternalSwap(CDOTAMsg_CoachHUDPing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tgtpath_, lhs_arena,
      &other->_impl_.tgtpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, _impl_.y_)
      + sizeof(CDOTAMsg_CoachHUDPing::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_CoachHUDPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[6]);
}

// ===================================================================

class CDOTAMsg_UnitOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_UnitOrder>()._impl_._has_bits_);
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgVector& position(const CDOTAMsg_UnitOrder* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgVector&
CDOTAMsg_UnitOrder::_Internal::position(const CDOTAMsg_UnitOrder* msg) {
  return *msg->_impl_.position_;
}
void CDOTAMsg_UnitOrder::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_UnitOrder)
}
CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder(const CDOTAMsg_UnitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMsg_UnitOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.units_){from._impl_.units_}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.target_index_){}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.ability_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  ::memcpy(&_impl_.order_type_, &from._impl_.order_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_index_) -
    reinterpret_cast<char*>(&_impl_.order_type_)) + sizeof(_impl_.ability_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_UnitOrder)
}

inline void CDOTAMsg_UnitOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.units_){arena}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.target_index_){0}
    , decltype(_impl_.sequence_number_){0}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.ability_index_){-1}
  };
}

CDOTAMsg_UnitOrder::~CDOTAMsg_UnitOrder() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_UnitOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMsg_UnitOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.units_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.position_;
}

void CDOTAMsg_UnitOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMsg_UnitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_UnitOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.units_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.order_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.order_type_)) + sizeof(_impl_.flags_));
    _impl_.ability_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_UnitOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::dotaunitorder_t_IsValid(val))) {
            _internal_set_order_type(static_cast<::dotaunitorder_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_index = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_target_index(&has_bits);
          _impl_.target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_index = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ability_index(&has_bits);
          _impl_.ability_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_UnitOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_UnitOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_order_type(), target);
  }

  // repeated int32 units = 3;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_units(i), target);
  }

  // optional int32 target_index = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_index(), target);
  }

  // optional int32 ability_index = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ability_index(), target);
  }

  // optional .CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_UnitOrder)
  return target;
}

size_t CDOTAMsg_UnitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_UnitOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.units_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgVector position = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_order_type());
    }

    // optional int32 target_index = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_index());
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_number());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 ability_index = 5 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_UnitOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMsg_UnitOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_UnitOrder::GetClassData() const { return &_class_data_; }


void CDOTAMsg_UnitOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMsg_UnitOrder*>(&to_msg);
  auto& from = static_cast<const CDOTAMsg_UnitOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_UnitOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.units_.MergeFrom(from._impl_.units_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.order_type_ = from._impl_.order_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_index_ = from._impl_.target_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ability_index_ = from._impl_.ability_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_UnitOrder::CopyFrom(const CDOTAMsg_UnitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_UnitOrder::IsInitialized() const {
  return true;
}

void CDOTAMsg_UnitOrder::InternalSwap(CDOTAMsg_UnitOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.units_.InternalSwap(&other->_impl_.units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_UnitOrder, _impl_.flags_)
      + sizeof(CDOTAMsg_UnitOrder::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_UnitOrder, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
  swap(_impl_.ability_index_, other->_impl_.ability_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_UnitOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[7]);
}

// ===================================================================

class VersusScene_PlayActivity_ActivityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_PlayActivity_ActivityInfo>()._impl_._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disable_auto_kill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_force_looping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VersusScene_PlayActivity_ActivityInfo::VersusScene_PlayActivity_ActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VersusScene_PlayActivity.ActivityInfo)
}
VersusScene_PlayActivity_ActivityInfo::VersusScene_PlayActivity_ActivityInfo(const VersusScene_PlayActivity_ActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersusScene_PlayActivity_ActivityInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){}
    , decltype(_impl_.disable_auto_kill_){}
    , decltype(_impl_.force_looping_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.activity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_activity()) {
    _this->_impl_.activity_.Set(from._internal_activity(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.disable_auto_kill_, &from._impl_.disable_auto_kill_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.force_looping_) -
    reinterpret_cast<char*>(&_impl_.disable_auto_kill_)) + sizeof(_impl_.force_looping_));
  // @@protoc_insertion_point(copy_constructor:VersusScene_PlayActivity.ActivityInfo)
}

inline void VersusScene_PlayActivity_ActivityInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){}
    , decltype(_impl_.disable_auto_kill_){false}
    , decltype(_impl_.force_looping_){false}
  };
  _impl_.activity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersusScene_PlayActivity_ActivityInfo::~VersusScene_PlayActivity_ActivityInfo() {
  // @@protoc_insertion_point(destructor:VersusScene_PlayActivity.ActivityInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersusScene_PlayActivity_ActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activity_.Destroy();
}

void VersusScene_PlayActivity_ActivityInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersusScene_PlayActivity_ActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_PlayActivity.ActivityInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.activity_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.disable_auto_kill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.force_looping_) -
      reinterpret_cast<char*>(&_impl_.disable_auto_kill_)) + sizeof(_impl_.force_looping_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_PlayActivity_ActivityInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_activity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "VersusScene_PlayActivity.ActivityInfo.activity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_auto_kill = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_disable_auto_kill(&has_bits);
          _impl_.disable_auto_kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_looping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_force_looping(&has_bits);
          _impl_.force_looping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersusScene_PlayActivity_ActivityInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_PlayActivity.ActivityInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string activity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activity().data(), static_cast<int>(this->_internal_activity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VersusScene_PlayActivity.ActivityInfo.activity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activity(), target);
  }

  // optional bool disable_auto_kill = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_auto_kill(), target);
  }

  // optional bool force_looping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_force_looping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_PlayActivity.ActivityInfo)
  return target;
}

size_t VersusScene_PlayActivity_ActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_PlayActivity.ActivityInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string activity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activity());
    }

    // optional bool disable_auto_kill = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool force_looping = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersusScene_PlayActivity_ActivityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersusScene_PlayActivity_ActivityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersusScene_PlayActivity_ActivityInfo::GetClassData() const { return &_class_data_; }


void VersusScene_PlayActivity_ActivityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersusScene_PlayActivity_ActivityInfo*>(&to_msg);
  auto& from = static_cast<const VersusScene_PlayActivity_ActivityInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_PlayActivity.ActivityInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_activity(from._internal_activity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disable_auto_kill_ = from._impl_.disable_auto_kill_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.force_looping_ = from._impl_.force_looping_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersusScene_PlayActivity_ActivityInfo::CopyFrom(const VersusScene_PlayActivity_ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_PlayActivity.ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_PlayActivity_ActivityInfo::IsInitialized() const {
  return true;
}

void VersusScene_PlayActivity_ActivityInfo::InternalSwap(VersusScene_PlayActivity_ActivityInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activity_, lhs_arena,
      &other->_impl_.activity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersusScene_PlayActivity_ActivityInfo, _impl_.force_looping_)
      + sizeof(VersusScene_PlayActivity_ActivityInfo::_impl_.force_looping_)
      - PROTOBUF_FIELD_OFFSET(VersusScene_PlayActivity_ActivityInfo, _impl_.disable_auto_kill_)>(
          reinterpret_cast<char*>(&_impl_.disable_auto_kill_),
          reinterpret_cast<char*>(&other->_impl_.disable_auto_kill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_PlayActivity_ActivityInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[8]);
}

// ===================================================================

class VersusScene_PlayActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_PlayActivity>()._impl_._has_bits_);
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VersusScene_PlayActivity::VersusScene_PlayActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VersusScene_PlayActivity)
}
VersusScene_PlayActivity::VersusScene_PlayActivity(const VersusScene_PlayActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersusScene_PlayActivity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activities_){from._impl_.activities_}
    , decltype(_impl_.playback_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playback_rate_ = from._impl_.playback_rate_;
  // @@protoc_insertion_point(copy_constructor:VersusScene_PlayActivity)
}

inline void VersusScene_PlayActivity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activities_){arena}
    , decltype(_impl_.playback_rate_){0}
  };
}

VersusScene_PlayActivity::~VersusScene_PlayActivity() {
  // @@protoc_insertion_point(destructor:VersusScene_PlayActivity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersusScene_PlayActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activities_.~RepeatedPtrField();
}

void VersusScene_PlayActivity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersusScene_PlayActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_PlayActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activities_.Clear();
  _impl_.playback_rate_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_PlayActivity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float playback_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_playback_rate(&has_bits);
          _impl_.playback_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersusScene_PlayActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_PlayActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activities_size()); i < n; i++) {
    const auto& repfield = this->_internal_activities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float playback_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_playback_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_PlayActivity)
  return target;
}

size_t VersusScene_PlayActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_PlayActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->_impl_.activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float playback_rate = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersusScene_PlayActivity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersusScene_PlayActivity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersusScene_PlayActivity::GetClassData() const { return &_class_data_; }


void VersusScene_PlayActivity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersusScene_PlayActivity*>(&to_msg);
  auto& from = static_cast<const VersusScene_PlayActivity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_PlayActivity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activities_.MergeFrom(from._impl_.activities_);
  if (from._internal_has_playback_rate()) {
    _this->_internal_set_playback_rate(from._internal_playback_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersusScene_PlayActivity::CopyFrom(const VersusScene_PlayActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_PlayActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_PlayActivity::IsInitialized() const {
  return true;
}

void VersusScene_PlayActivity::InternalSwap(VersusScene_PlayActivity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.activities_.InternalSwap(&other->_impl_.activities_);
  swap(_impl_.playback_rate_, other->_impl_.playback_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_PlayActivity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[9]);
}

// ===================================================================

class VersusScene_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_ChatWheel>()._impl_._has_bits_);
  static void set_has_chat_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VersusScene_ChatWheel::VersusScene_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VersusScene_ChatWheel)
}
VersusScene_ChatWheel::VersusScene_ChatWheel(const VersusScene_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersusScene_ChatWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emoticon_id_){}
    , decltype(_impl_.chat_message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.emoticon_id_, &from._impl_.emoticon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chat_message_id_) -
    reinterpret_cast<char*>(&_impl_.emoticon_id_)) + sizeof(_impl_.chat_message_id_));
  // @@protoc_insertion_point(copy_constructor:VersusScene_ChatWheel)
}

inline void VersusScene_ChatWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emoticon_id_){0u}
    , decltype(_impl_.chat_message_id_){4294967295u}
  };
}

VersusScene_ChatWheel::~VersusScene_ChatWheel() {
  // @@protoc_insertion_point(destructor:VersusScene_ChatWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersusScene_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersusScene_ChatWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersusScene_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_ChatWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.emoticon_id_ = 0u;
    _impl_.chat_message_id_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_ChatWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chat_message_id = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_message_id(&has_bits);
          _impl_.chat_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_emoticon_id(&has_bits);
          _impl_.emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersusScene_ChatWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_ChatWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chat_message_id = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chat_message_id(), target);
  }

  // optional uint32 emoticon_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_ChatWheel)
  return target;
}

size_t VersusScene_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_ChatWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 emoticon_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emoticon_id());
    }

    // optional uint32 chat_message_id = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_message_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersusScene_ChatWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersusScene_ChatWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersusScene_ChatWheel::GetClassData() const { return &_class_data_; }


void VersusScene_ChatWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersusScene_ChatWheel*>(&to_msg);
  auto& from = static_cast<const VersusScene_ChatWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_ChatWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.emoticon_id_ = from._impl_.emoticon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chat_message_id_ = from._impl_.chat_message_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersusScene_ChatWheel::CopyFrom(const VersusScene_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_ChatWheel::IsInitialized() const {
  return true;
}

void VersusScene_ChatWheel::InternalSwap(VersusScene_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.emoticon_id_, other->_impl_.emoticon_id_);
  swap(_impl_.chat_message_id_, other->_impl_.chat_message_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_ChatWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[10]);
}

// ===================================================================

class VersusScene_PlaybackRate::_Internal {
 public:
  using HasBits = decltype(std::declval<VersusScene_PlaybackRate>()._impl_._has_bits_);
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VersusScene_PlaybackRate::VersusScene_PlaybackRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VersusScene_PlaybackRate)
}
VersusScene_PlaybackRate::VersusScene_PlaybackRate(const VersusScene_PlaybackRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersusScene_PlaybackRate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rate_ = from._impl_.rate_;
  // @@protoc_insertion_point(copy_constructor:VersusScene_PlaybackRate)
}

inline void VersusScene_PlaybackRate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rate_){0}
  };
}

VersusScene_PlaybackRate::~VersusScene_PlaybackRate() {
  // @@protoc_insertion_point(destructor:VersusScene_PlaybackRate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersusScene_PlaybackRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersusScene_PlaybackRate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersusScene_PlaybackRate::Clear() {
// @@protoc_insertion_point(message_clear_start:VersusScene_PlaybackRate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersusScene_PlaybackRate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_rate(&has_bits);
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersusScene_PlaybackRate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersusScene_PlaybackRate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersusScene_PlaybackRate)
  return target;
}

size_t VersusScene_PlaybackRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersusScene_PlaybackRate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float rate = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersusScene_PlaybackRate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersusScene_PlaybackRate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersusScene_PlaybackRate::GetClassData() const { return &_class_data_; }


void VersusScene_PlaybackRate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersusScene_PlaybackRate*>(&to_msg);
  auto& from = static_cast<const VersusScene_PlaybackRate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VersusScene_PlaybackRate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rate()) {
    _this->_internal_set_rate(from._internal_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersusScene_PlaybackRate::CopyFrom(const VersusScene_PlaybackRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersusScene_PlaybackRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersusScene_PlaybackRate::IsInitialized() const {
  return true;
}

void VersusScene_PlaybackRate::InternalSwap(VersusScene_PlaybackRate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rate_, other->_impl_.rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersusScene_PlaybackRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fcommonmessages_2eproto_getter, &descriptor_table_dota_5fcommonmessages_2eproto_once,
      file_level_metadata_dota_5fcommonmessages_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAMsg_LocationPing*
Arena::CreateMaybeMessage< ::CDOTAMsg_LocationPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_LocationPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_ItemAlert*
Arena::CreateMaybeMessage< ::CDOTAMsg_ItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_ItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_MapLine*
Arena::CreateMaybeMessage< ::CDOTAMsg_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_WorldLine*
Arena::CreateMaybeMessage< ::CDOTAMsg_WorldLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_WorldLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_SendStatPopup*
Arena::CreateMaybeMessage< ::CDOTAMsg_SendStatPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_SendStatPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_DismissAllStatPopups*
Arena::CreateMaybeMessage< ::CDOTAMsg_DismissAllStatPopups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_DismissAllStatPopups >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_CoachHUDPing*
Arena::CreateMaybeMessage< ::CDOTAMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_UnitOrder*
Arena::CreateMaybeMessage< ::CDOTAMsg_UnitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_UnitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_PlayActivity_ActivityInfo*
Arena::CreateMaybeMessage< ::VersusScene_PlayActivity_ActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_PlayActivity_ActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_PlayActivity*
Arena::CreateMaybeMessage< ::VersusScene_PlayActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_PlayActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_ChatWheel*
Arena::CreateMaybeMessage< ::VersusScene_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::VersusScene_PlaybackRate*
Arena::CreateMaybeMessage< ::VersusScene_PlaybackRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersusScene_PlaybackRate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
