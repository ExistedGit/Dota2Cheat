// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gametoolevents.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gametoolevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gametoolevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gametoolevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gametoolevents_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gametoolevents_2eproto;
class ChangeMapToolEvent;
struct ChangeMapToolEventDefaultTypeInternal;
extern ChangeMapToolEventDefaultTypeInternal _ChangeMapToolEvent_default_instance_;
class DestroyAllEntitiesToolEvent;
struct DestroyAllEntitiesToolEventDefaultTypeInternal;
extern DestroyAllEntitiesToolEventDefaultTypeInternal _DestroyAllEntitiesToolEvent_default_instance_;
class DestroyEntityToolEvent;
struct DestroyEntityToolEventDefaultTypeInternal;
extern DestroyEntityToolEventDefaultTypeInternal _DestroyEntityToolEvent_default_instance_;
class RestartMapToolEvent;
struct RestartMapToolEventDefaultTypeInternal;
extern RestartMapToolEventDefaultTypeInternal _RestartMapToolEvent_default_instance_;
class SpawnEntityToolEvent;
struct SpawnEntityToolEventDefaultTypeInternal;
extern SpawnEntityToolEventDefaultTypeInternal _SpawnEntityToolEvent_default_instance_;
class SpawnEntityToolEventResult;
struct SpawnEntityToolEventResultDefaultTypeInternal;
extern SpawnEntityToolEventResultDefaultTypeInternal _SpawnEntityToolEventResult_default_instance_;
class ToolEvent_FireEntityInput;
struct ToolEvent_FireEntityInputDefaultTypeInternal;
extern ToolEvent_FireEntityInputDefaultTypeInternal _ToolEvent_FireEntityInput_default_instance_;
class ToolEvent_GetEntityInfo;
struct ToolEvent_GetEntityInfoDefaultTypeInternal;
extern ToolEvent_GetEntityInfoDefaultTypeInternal _ToolEvent_GetEntityInfo_default_instance_;
class ToolEvent_GetEntityInfoResult;
struct ToolEvent_GetEntityInfoResultDefaultTypeInternal;
extern ToolEvent_GetEntityInfoResultDefaultTypeInternal _ToolEvent_GetEntityInfoResult_default_instance_;
class ToolEvent_GetEntityInputs;
struct ToolEvent_GetEntityInputsDefaultTypeInternal;
extern ToolEvent_GetEntityInputsDefaultTypeInternal _ToolEvent_GetEntityInputs_default_instance_;
class ToolEvent_GetEntityInputsResult;
struct ToolEvent_GetEntityInputsResultDefaultTypeInternal;
extern ToolEvent_GetEntityInputsResultDefaultTypeInternal _ToolEvent_GetEntityInputsResult_default_instance_;
class ToolEvent_SFMRecordingStateChanged;
struct ToolEvent_SFMRecordingStateChangedDefaultTypeInternal;
extern ToolEvent_SFMRecordingStateChangedDefaultTypeInternal _ToolEvent_SFMRecordingStateChanged_default_instance_;
class ToolEvent_SFMToolActiveStateChanged;
struct ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal;
extern ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal _ToolEvent_SFMToolActiveStateChanged_default_instance_;
class ToolTraceRayResult;
struct ToolTraceRayResultDefaultTypeInternal;
extern ToolTraceRayResultDefaultTypeInternal _ToolTraceRayResult_default_instance_;
class TraceRayServerToolEvent;
struct TraceRayServerToolEventDefaultTypeInternal;
extern TraceRayServerToolEventDefaultTypeInternal _TraceRayServerToolEvent_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChangeMapToolEvent* Arena::CreateMaybeMessage<::ChangeMapToolEvent>(Arena*);
template<> ::DestroyAllEntitiesToolEvent* Arena::CreateMaybeMessage<::DestroyAllEntitiesToolEvent>(Arena*);
template<> ::DestroyEntityToolEvent* Arena::CreateMaybeMessage<::DestroyEntityToolEvent>(Arena*);
template<> ::RestartMapToolEvent* Arena::CreateMaybeMessage<::RestartMapToolEvent>(Arena*);
template<> ::SpawnEntityToolEvent* Arena::CreateMaybeMessage<::SpawnEntityToolEvent>(Arena*);
template<> ::SpawnEntityToolEventResult* Arena::CreateMaybeMessage<::SpawnEntityToolEventResult>(Arena*);
template<> ::ToolEvent_FireEntityInput* Arena::CreateMaybeMessage<::ToolEvent_FireEntityInput>(Arena*);
template<> ::ToolEvent_GetEntityInfo* Arena::CreateMaybeMessage<::ToolEvent_GetEntityInfo>(Arena*);
template<> ::ToolEvent_GetEntityInfoResult* Arena::CreateMaybeMessage<::ToolEvent_GetEntityInfoResult>(Arena*);
template<> ::ToolEvent_GetEntityInputs* Arena::CreateMaybeMessage<::ToolEvent_GetEntityInputs>(Arena*);
template<> ::ToolEvent_GetEntityInputsResult* Arena::CreateMaybeMessage<::ToolEvent_GetEntityInputsResult>(Arena*);
template<> ::ToolEvent_SFMRecordingStateChanged* Arena::CreateMaybeMessage<::ToolEvent_SFMRecordingStateChanged>(Arena*);
template<> ::ToolEvent_SFMToolActiveStateChanged* Arena::CreateMaybeMessage<::ToolEvent_SFMToolActiveStateChanged>(Arena*);
template<> ::ToolTraceRayResult* Arena::CreateMaybeMessage<::ToolTraceRayResult>(Arena*);
template<> ::TraceRayServerToolEvent* Arena::CreateMaybeMessage<::TraceRayServerToolEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ChangeMapToolEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChangeMapToolEvent) */ {
 public:
  inline ChangeMapToolEvent() : ChangeMapToolEvent(nullptr) {}
  ~ChangeMapToolEvent() override;
  explicit PROTOBUF_CONSTEXPR ChangeMapToolEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeMapToolEvent(const ChangeMapToolEvent& from);
  ChangeMapToolEvent(ChangeMapToolEvent&& from) noexcept
    : ChangeMapToolEvent() {
    *this = ::std::move(from);
  }

  inline ChangeMapToolEvent& operator=(const ChangeMapToolEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeMapToolEvent& operator=(ChangeMapToolEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeMapToolEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeMapToolEvent* internal_default_instance() {
    return reinterpret_cast<const ChangeMapToolEvent*>(
               &_ChangeMapToolEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChangeMapToolEvent& a, ChangeMapToolEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeMapToolEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeMapToolEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeMapToolEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeMapToolEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeMapToolEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeMapToolEvent& from) {
    ChangeMapToolEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeMapToolEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChangeMapToolEvent";
  }
  protected:
  explicit ChangeMapToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapnameFieldNumber = 1,
  };
  // optional string mapname = 1;
  bool has_mapname() const;
  private:
  bool _internal_has_mapname() const;
  public:
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // @@protoc_insertion_point(class_scope:ChangeMapToolEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class TraceRayServerToolEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TraceRayServerToolEvent) */ {
 public:
  inline TraceRayServerToolEvent() : TraceRayServerToolEvent(nullptr) {}
  ~TraceRayServerToolEvent() override;
  explicit PROTOBUF_CONSTEXPR TraceRayServerToolEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceRayServerToolEvent(const TraceRayServerToolEvent& from);
  TraceRayServerToolEvent(TraceRayServerToolEvent&& from) noexcept
    : TraceRayServerToolEvent() {
    *this = ::std::move(from);
  }

  inline TraceRayServerToolEvent& operator=(const TraceRayServerToolEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceRayServerToolEvent& operator=(TraceRayServerToolEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceRayServerToolEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceRayServerToolEvent* internal_default_instance() {
    return reinterpret_cast<const TraceRayServerToolEvent*>(
               &_TraceRayServerToolEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TraceRayServerToolEvent& a, TraceRayServerToolEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceRayServerToolEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceRayServerToolEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceRayServerToolEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceRayServerToolEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceRayServerToolEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceRayServerToolEvent& from) {
    TraceRayServerToolEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceRayServerToolEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TraceRayServerToolEvent";
  }
  protected:
  explicit TraceRayServerToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional .CMsgVector start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::CMsgVector& start() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_start();
  ::CMsgVector* mutable_start();
  void set_allocated_start(::CMsgVector* start);
  private:
  const ::CMsgVector& _internal_start() const;
  ::CMsgVector* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::CMsgVector* start);
  ::CMsgVector* unsafe_arena_release_start();

  // optional .CMsgVector end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::CMsgVector& end() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_end();
  ::CMsgVector* mutable_end();
  void set_allocated_end(::CMsgVector* end);
  private:
  const ::CMsgVector& _internal_end() const;
  ::CMsgVector* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::CMsgVector* end);
  ::CMsgVector* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:TraceRayServerToolEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgVector* start_;
    ::CMsgVector* end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolTraceRayResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolTraceRayResult) */ {
 public:
  inline ToolTraceRayResult() : ToolTraceRayResult(nullptr) {}
  ~ToolTraceRayResult() override;
  explicit PROTOBUF_CONSTEXPR ToolTraceRayResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolTraceRayResult(const ToolTraceRayResult& from);
  ToolTraceRayResult(ToolTraceRayResult&& from) noexcept
    : ToolTraceRayResult() {
    *this = ::std::move(from);
  }

  inline ToolTraceRayResult& operator=(const ToolTraceRayResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolTraceRayResult& operator=(ToolTraceRayResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolTraceRayResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolTraceRayResult* internal_default_instance() {
    return reinterpret_cast<const ToolTraceRayResult*>(
               &_ToolTraceRayResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ToolTraceRayResult& a, ToolTraceRayResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolTraceRayResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolTraceRayResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolTraceRayResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolTraceRayResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolTraceRayResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolTraceRayResult& from) {
    ToolTraceRayResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolTraceRayResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolTraceRayResult";
  }
  protected:
  explicit ToolTraceRayResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpactFieldNumber = 2,
    kNormalFieldNumber = 3,
    kHitFieldNumber = 1,
    kDistanceFieldNumber = 4,
    kFractionFieldNumber = 5,
    kEhandleFieldNumber = 6,
  };
  // optional .CMsgVector impact = 2;
  bool has_impact() const;
  private:
  bool _internal_has_impact() const;
  public:
  void clear_impact();
  const ::CMsgVector& impact() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_impact();
  ::CMsgVector* mutable_impact();
  void set_allocated_impact(::CMsgVector* impact);
  private:
  const ::CMsgVector& _internal_impact() const;
  ::CMsgVector* _internal_mutable_impact();
  public:
  void unsafe_arena_set_allocated_impact(
      ::CMsgVector* impact);
  ::CMsgVector* unsafe_arena_release_impact();

  // optional .CMsgVector normal = 3;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::CMsgVector& normal() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_normal();
  ::CMsgVector* mutable_normal();
  void set_allocated_normal(::CMsgVector* normal);
  private:
  const ::CMsgVector& _internal_normal() const;
  ::CMsgVector* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::CMsgVector* normal);
  ::CMsgVector* unsafe_arena_release_normal();

  // optional bool hit = 1;
  bool has_hit() const;
  private:
  bool _internal_has_hit() const;
  public:
  void clear_hit();
  bool hit() const;
  void set_hit(bool value);
  private:
  bool _internal_hit() const;
  void _internal_set_hit(bool value);
  public:

  // optional float distance = 4;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // optional float fraction = 5;
  bool has_fraction() const;
  private:
  bool _internal_has_fraction() const;
  public:
  void clear_fraction();
  float fraction() const;
  void set_fraction(float value);
  private:
  float _internal_fraction() const;
  void _internal_set_fraction(float value);
  public:

  // optional int32 ehandle = 6;
  bool has_ehandle() const;
  private:
  bool _internal_has_ehandle() const;
  public:
  void clear_ehandle();
  int32_t ehandle() const;
  void set_ehandle(int32_t value);
  private:
  int32_t _internal_ehandle() const;
  void _internal_set_ehandle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ToolTraceRayResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgVector* impact_;
    ::CMsgVector* normal_;
    bool hit_;
    float distance_;
    float fraction_;
    int32_t ehandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class SpawnEntityToolEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SpawnEntityToolEvent) */ {
 public:
  inline SpawnEntityToolEvent() : SpawnEntityToolEvent(nullptr) {}
  ~SpawnEntityToolEvent() override;
  explicit PROTOBUF_CONSTEXPR SpawnEntityToolEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnEntityToolEvent(const SpawnEntityToolEvent& from);
  SpawnEntityToolEvent(SpawnEntityToolEvent&& from) noexcept
    : SpawnEntityToolEvent() {
    *this = ::std::move(from);
  }

  inline SpawnEntityToolEvent& operator=(const SpawnEntityToolEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnEntityToolEvent& operator=(SpawnEntityToolEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnEntityToolEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnEntityToolEvent* internal_default_instance() {
    return reinterpret_cast<const SpawnEntityToolEvent*>(
               &_SpawnEntityToolEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SpawnEntityToolEvent& a, SpawnEntityToolEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnEntityToolEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnEntityToolEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnEntityToolEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnEntityToolEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnEntityToolEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnEntityToolEvent& from) {
    SpawnEntityToolEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnEntityToolEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SpawnEntityToolEvent";
  }
  protected:
  explicit SpawnEntityToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityKeyvaluesFieldNumber = 1,
    kClientsideentityFieldNumber = 2,
  };
  // optional bytes entity_keyvalues = 1;
  bool has_entity_keyvalues() const;
  private:
  bool _internal_has_entity_keyvalues() const;
  public:
  void clear_entity_keyvalues();
  const std::string& entity_keyvalues() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_keyvalues(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_keyvalues();
  PROTOBUF_NODISCARD std::string* release_entity_keyvalues();
  void set_allocated_entity_keyvalues(std::string* entity_keyvalues);
  private:
  const std::string& _internal_entity_keyvalues() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_keyvalues(const std::string& value);
  std::string* _internal_mutable_entity_keyvalues();
  public:

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  private:
  bool _internal_has_clientsideentity() const;
  public:
  void clear_clientsideentity();
  bool clientsideentity() const;
  void set_clientsideentity(bool value);
  private:
  bool _internal_clientsideentity() const;
  void _internal_set_clientsideentity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SpawnEntityToolEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_keyvalues_;
    bool clientsideentity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class SpawnEntityToolEventResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SpawnEntityToolEventResult) */ {
 public:
  inline SpawnEntityToolEventResult() : SpawnEntityToolEventResult(nullptr) {}
  ~SpawnEntityToolEventResult() override;
  explicit PROTOBUF_CONSTEXPR SpawnEntityToolEventResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnEntityToolEventResult(const SpawnEntityToolEventResult& from);
  SpawnEntityToolEventResult(SpawnEntityToolEventResult&& from) noexcept
    : SpawnEntityToolEventResult() {
    *this = ::std::move(from);
  }

  inline SpawnEntityToolEventResult& operator=(const SpawnEntityToolEventResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnEntityToolEventResult& operator=(SpawnEntityToolEventResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnEntityToolEventResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnEntityToolEventResult* internal_default_instance() {
    return reinterpret_cast<const SpawnEntityToolEventResult*>(
               &_SpawnEntityToolEventResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SpawnEntityToolEventResult& a, SpawnEntityToolEventResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnEntityToolEventResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnEntityToolEventResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnEntityToolEventResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnEntityToolEventResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnEntityToolEventResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnEntityToolEventResult& from) {
    SpawnEntityToolEventResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnEntityToolEventResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SpawnEntityToolEventResult";
  }
  protected:
  explicit SpawnEntityToolEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEhandleFieldNumber = 1,
  };
  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  private:
  bool _internal_has_ehandle() const;
  public:
  void clear_ehandle();
  int32_t ehandle() const;
  void set_ehandle(int32_t value);
  private:
  int32_t _internal_ehandle() const;
  void _internal_set_ehandle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SpawnEntityToolEventResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ehandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class DestroyEntityToolEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DestroyEntityToolEvent) */ {
 public:
  inline DestroyEntityToolEvent() : DestroyEntityToolEvent(nullptr) {}
  ~DestroyEntityToolEvent() override;
  explicit PROTOBUF_CONSTEXPR DestroyEntityToolEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyEntityToolEvent(const DestroyEntityToolEvent& from);
  DestroyEntityToolEvent(DestroyEntityToolEvent&& from) noexcept
    : DestroyEntityToolEvent() {
    *this = ::std::move(from);
  }

  inline DestroyEntityToolEvent& operator=(const DestroyEntityToolEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyEntityToolEvent& operator=(DestroyEntityToolEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyEntityToolEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyEntityToolEvent* internal_default_instance() {
    return reinterpret_cast<const DestroyEntityToolEvent*>(
               &_DestroyEntityToolEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DestroyEntityToolEvent& a, DestroyEntityToolEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyEntityToolEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyEntityToolEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyEntityToolEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyEntityToolEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DestroyEntityToolEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DestroyEntityToolEvent& from) {
    DestroyEntityToolEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyEntityToolEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DestroyEntityToolEvent";
  }
  protected:
  explicit DestroyEntityToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEhandleFieldNumber = 1,
  };
  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  private:
  bool _internal_has_ehandle() const;
  public:
  void clear_ehandle();
  int32_t ehandle() const;
  void set_ehandle(int32_t value);
  private:
  int32_t _internal_ehandle() const;
  void _internal_set_ehandle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DestroyEntityToolEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ehandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class DestroyAllEntitiesToolEvent final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:DestroyAllEntitiesToolEvent) */ {
 public:
  inline DestroyAllEntitiesToolEvent() : DestroyAllEntitiesToolEvent(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DestroyAllEntitiesToolEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyAllEntitiesToolEvent(const DestroyAllEntitiesToolEvent& from);
  DestroyAllEntitiesToolEvent(DestroyAllEntitiesToolEvent&& from) noexcept
    : DestroyAllEntitiesToolEvent() {
    *this = ::std::move(from);
  }

  inline DestroyAllEntitiesToolEvent& operator=(const DestroyAllEntitiesToolEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyAllEntitiesToolEvent& operator=(DestroyAllEntitiesToolEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyAllEntitiesToolEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyAllEntitiesToolEvent* internal_default_instance() {
    return reinterpret_cast<const DestroyAllEntitiesToolEvent*>(
               &_DestroyAllEntitiesToolEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DestroyAllEntitiesToolEvent& a, DestroyAllEntitiesToolEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyAllEntitiesToolEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyAllEntitiesToolEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyAllEntitiesToolEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyAllEntitiesToolEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DestroyAllEntitiesToolEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DestroyAllEntitiesToolEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DestroyAllEntitiesToolEvent";
  }
  protected:
  explicit DestroyAllEntitiesToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DestroyAllEntitiesToolEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class RestartMapToolEvent final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:RestartMapToolEvent) */ {
 public:
  inline RestartMapToolEvent() : RestartMapToolEvent(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RestartMapToolEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestartMapToolEvent(const RestartMapToolEvent& from);
  RestartMapToolEvent(RestartMapToolEvent&& from) noexcept
    : RestartMapToolEvent() {
    *this = ::std::move(from);
  }

  inline RestartMapToolEvent& operator=(const RestartMapToolEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartMapToolEvent& operator=(RestartMapToolEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestartMapToolEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestartMapToolEvent* internal_default_instance() {
    return reinterpret_cast<const RestartMapToolEvent*>(
               &_RestartMapToolEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RestartMapToolEvent& a, RestartMapToolEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartMapToolEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartMapToolEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestartMapToolEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestartMapToolEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RestartMapToolEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RestartMapToolEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RestartMapToolEvent";
  }
  protected:
  explicit RestartMapToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RestartMapToolEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolEvent_GetEntityInfo) */ {
 public:
  inline ToolEvent_GetEntityInfo() : ToolEvent_GetEntityInfo(nullptr) {}
  ~ToolEvent_GetEntityInfo() override;
  explicit PROTOBUF_CONSTEXPR ToolEvent_GetEntityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolEvent_GetEntityInfo(const ToolEvent_GetEntityInfo& from);
  ToolEvent_GetEntityInfo(ToolEvent_GetEntityInfo&& from) noexcept
    : ToolEvent_GetEntityInfo() {
    *this = ::std::move(from);
  }

  inline ToolEvent_GetEntityInfo& operator=(const ToolEvent_GetEntityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolEvent_GetEntityInfo& operator=(ToolEvent_GetEntityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolEvent_GetEntityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolEvent_GetEntityInfo* internal_default_instance() {
    return reinterpret_cast<const ToolEvent_GetEntityInfo*>(
               &_ToolEvent_GetEntityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ToolEvent_GetEntityInfo& a, ToolEvent_GetEntityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolEvent_GetEntityInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolEvent_GetEntityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolEvent_GetEntityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolEvent_GetEntityInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolEvent_GetEntityInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolEvent_GetEntityInfo& from) {
    ToolEvent_GetEntityInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolEvent_GetEntityInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolEvent_GetEntityInfo";
  }
  protected:
  explicit ToolEvent_GetEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEhandleFieldNumber = 1,
    kClientsideentityFieldNumber = 2,
  };
  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  private:
  bool _internal_has_ehandle() const;
  public:
  void clear_ehandle();
  int32_t ehandle() const;
  void set_ehandle(int32_t value);
  private:
  int32_t _internal_ehandle() const;
  void _internal_set_ehandle(int32_t value);
  public:

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  private:
  bool _internal_has_clientsideentity() const;
  public:
  void clear_clientsideentity();
  bool clientsideentity() const;
  void set_clientsideentity(bool value);
  private:
  bool _internal_clientsideentity() const;
  void _internal_set_clientsideentity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ehandle_;
    bool clientsideentity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInfoResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolEvent_GetEntityInfoResult) */ {
 public:
  inline ToolEvent_GetEntityInfoResult() : ToolEvent_GetEntityInfoResult(nullptr) {}
  ~ToolEvent_GetEntityInfoResult() override;
  explicit PROTOBUF_CONSTEXPR ToolEvent_GetEntityInfoResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolEvent_GetEntityInfoResult(const ToolEvent_GetEntityInfoResult& from);
  ToolEvent_GetEntityInfoResult(ToolEvent_GetEntityInfoResult&& from) noexcept
    : ToolEvent_GetEntityInfoResult() {
    *this = ::std::move(from);
  }

  inline ToolEvent_GetEntityInfoResult& operator=(const ToolEvent_GetEntityInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolEvent_GetEntityInfoResult& operator=(ToolEvent_GetEntityInfoResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolEvent_GetEntityInfoResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolEvent_GetEntityInfoResult* internal_default_instance() {
    return reinterpret_cast<const ToolEvent_GetEntityInfoResult*>(
               &_ToolEvent_GetEntityInfoResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ToolEvent_GetEntityInfoResult& a, ToolEvent_GetEntityInfoResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolEvent_GetEntityInfoResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolEvent_GetEntityInfoResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolEvent_GetEntityInfoResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolEvent_GetEntityInfoResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolEvent_GetEntityInfoResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolEvent_GetEntityInfoResult& from) {
    ToolEvent_GetEntityInfoResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolEvent_GetEntityInfoResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolEvent_GetEntityInfoResult";
  }
  protected:
  explicit ToolEvent_GetEntityInfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCppclassFieldNumber = 1,
    kClassnameFieldNumber = 2,
    kNameFieldNumber = 3,
    kOriginFieldNumber = 4,
    kMinsFieldNumber = 5,
    kMaxsFieldNumber = 6,
  };
  // optional string cppclass = 1 [default = "shithead"];
  bool has_cppclass() const;
  private:
  bool _internal_has_cppclass() const;
  public:
  void clear_cppclass();
  const std::string& cppclass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cppclass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cppclass();
  PROTOBUF_NODISCARD std::string* release_cppclass();
  void set_allocated_cppclass(std::string* cppclass);
  private:
  const std::string& _internal_cppclass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cppclass(const std::string& value);
  std::string* _internal_mutable_cppclass();
  public:

  // optional string classname = 2;
  bool has_classname() const;
  private:
  bool _internal_has_classname() const;
  public:
  void clear_classname();
  const std::string& classname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classname();
  PROTOBUF_NODISCARD std::string* release_classname();
  void set_allocated_classname(std::string* classname);
  private:
  const std::string& _internal_classname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classname(const std::string& value);
  std::string* _internal_mutable_classname();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .CMsgVector origin = 4;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::CMsgVector& origin() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_origin();
  ::CMsgVector* mutable_origin();
  void set_allocated_origin(::CMsgVector* origin);
  private:
  const ::CMsgVector& _internal_origin() const;
  ::CMsgVector* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::CMsgVector* origin);
  ::CMsgVector* unsafe_arena_release_origin();

  // optional .CMsgVector mins = 5;
  bool has_mins() const;
  private:
  bool _internal_has_mins() const;
  public:
  void clear_mins();
  const ::CMsgVector& mins() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_mins();
  ::CMsgVector* mutable_mins();
  void set_allocated_mins(::CMsgVector* mins);
  private:
  const ::CMsgVector& _internal_mins() const;
  ::CMsgVector* _internal_mutable_mins();
  public:
  void unsafe_arena_set_allocated_mins(
      ::CMsgVector* mins);
  ::CMsgVector* unsafe_arena_release_mins();

  // optional .CMsgVector maxs = 6;
  bool has_maxs() const;
  private:
  bool _internal_has_maxs() const;
  public:
  void clear_maxs();
  const ::CMsgVector& maxs() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_maxs();
  ::CMsgVector* mutable_maxs();
  void set_allocated_maxs(::CMsgVector* maxs);
  private:
  const ::CMsgVector& _internal_maxs() const;
  ::CMsgVector* _internal_mutable_maxs();
  public:
  void unsafe_arena_set_allocated_maxs(
      ::CMsgVector* maxs);
  ::CMsgVector* unsafe_arena_release_maxs();

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInfoResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_cppclass_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cppclass_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::CMsgVector* origin_;
    ::CMsgVector* mins_;
    ::CMsgVector* maxs_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInputs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolEvent_GetEntityInputs) */ {
 public:
  inline ToolEvent_GetEntityInputs() : ToolEvent_GetEntityInputs(nullptr) {}
  ~ToolEvent_GetEntityInputs() override;
  explicit PROTOBUF_CONSTEXPR ToolEvent_GetEntityInputs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolEvent_GetEntityInputs(const ToolEvent_GetEntityInputs& from);
  ToolEvent_GetEntityInputs(ToolEvent_GetEntityInputs&& from) noexcept
    : ToolEvent_GetEntityInputs() {
    *this = ::std::move(from);
  }

  inline ToolEvent_GetEntityInputs& operator=(const ToolEvent_GetEntityInputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolEvent_GetEntityInputs& operator=(ToolEvent_GetEntityInputs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolEvent_GetEntityInputs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolEvent_GetEntityInputs* internal_default_instance() {
    return reinterpret_cast<const ToolEvent_GetEntityInputs*>(
               &_ToolEvent_GetEntityInputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ToolEvent_GetEntityInputs& a, ToolEvent_GetEntityInputs& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolEvent_GetEntityInputs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolEvent_GetEntityInputs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolEvent_GetEntityInputs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolEvent_GetEntityInputs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolEvent_GetEntityInputs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolEvent_GetEntityInputs& from) {
    ToolEvent_GetEntityInputs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolEvent_GetEntityInputs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolEvent_GetEntityInputs";
  }
  protected:
  explicit ToolEvent_GetEntityInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEhandleFieldNumber = 1,
    kClientsideentityFieldNumber = 2,
  };
  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  private:
  bool _internal_has_ehandle() const;
  public:
  void clear_ehandle();
  int32_t ehandle() const;
  void set_ehandle(int32_t value);
  private:
  int32_t _internal_ehandle() const;
  void _internal_set_ehandle(int32_t value);
  public:

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  private:
  bool _internal_has_clientsideentity() const;
  public:
  void clear_clientsideentity();
  bool clientsideentity() const;
  void set_clientsideentity(bool value);
  private:
  bool _internal_clientsideentity() const;
  void _internal_set_clientsideentity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInputs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ehandle_;
    bool clientsideentity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInputsResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolEvent_GetEntityInputsResult) */ {
 public:
  inline ToolEvent_GetEntityInputsResult() : ToolEvent_GetEntityInputsResult(nullptr) {}
  ~ToolEvent_GetEntityInputsResult() override;
  explicit PROTOBUF_CONSTEXPR ToolEvent_GetEntityInputsResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolEvent_GetEntityInputsResult(const ToolEvent_GetEntityInputsResult& from);
  ToolEvent_GetEntityInputsResult(ToolEvent_GetEntityInputsResult&& from) noexcept
    : ToolEvent_GetEntityInputsResult() {
    *this = ::std::move(from);
  }

  inline ToolEvent_GetEntityInputsResult& operator=(const ToolEvent_GetEntityInputsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolEvent_GetEntityInputsResult& operator=(ToolEvent_GetEntityInputsResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolEvent_GetEntityInputsResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolEvent_GetEntityInputsResult* internal_default_instance() {
    return reinterpret_cast<const ToolEvent_GetEntityInputsResult*>(
               &_ToolEvent_GetEntityInputsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ToolEvent_GetEntityInputsResult& a, ToolEvent_GetEntityInputsResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolEvent_GetEntityInputsResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolEvent_GetEntityInputsResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolEvent_GetEntityInputsResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolEvent_GetEntityInputsResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolEvent_GetEntityInputsResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolEvent_GetEntityInputsResult& from) {
    ToolEvent_GetEntityInputsResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolEvent_GetEntityInputsResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolEvent_GetEntityInputsResult";
  }
  protected:
  explicit ToolEvent_GetEntityInputsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputListFieldNumber = 1,
  };
  // repeated string input_list = 1;
  int input_list_size() const;
  private:
  int _internal_input_list_size() const;
  public:
  void clear_input_list();
  const std::string& input_list(int index) const;
  std::string* mutable_input_list(int index);
  void set_input_list(int index, const std::string& value);
  void set_input_list(int index, std::string&& value);
  void set_input_list(int index, const char* value);
  void set_input_list(int index, const char* value, size_t size);
  std::string* add_input_list();
  void add_input_list(const std::string& value);
  void add_input_list(std::string&& value);
  void add_input_list(const char* value);
  void add_input_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_list();
  private:
  const std::string& _internal_input_list(int index) const;
  std::string* _internal_add_input_list();
  public:

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInputsResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolEvent_FireEntityInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolEvent_FireEntityInput) */ {
 public:
  inline ToolEvent_FireEntityInput() : ToolEvent_FireEntityInput(nullptr) {}
  ~ToolEvent_FireEntityInput() override;
  explicit PROTOBUF_CONSTEXPR ToolEvent_FireEntityInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolEvent_FireEntityInput(const ToolEvent_FireEntityInput& from);
  ToolEvent_FireEntityInput(ToolEvent_FireEntityInput&& from) noexcept
    : ToolEvent_FireEntityInput() {
    *this = ::std::move(from);
  }

  inline ToolEvent_FireEntityInput& operator=(const ToolEvent_FireEntityInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolEvent_FireEntityInput& operator=(ToolEvent_FireEntityInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolEvent_FireEntityInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolEvent_FireEntityInput* internal_default_instance() {
    return reinterpret_cast<const ToolEvent_FireEntityInput*>(
               &_ToolEvent_FireEntityInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ToolEvent_FireEntityInput& a, ToolEvent_FireEntityInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolEvent_FireEntityInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolEvent_FireEntityInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolEvent_FireEntityInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolEvent_FireEntityInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolEvent_FireEntityInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolEvent_FireEntityInput& from) {
    ToolEvent_FireEntityInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolEvent_FireEntityInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolEvent_FireEntityInput";
  }
  protected:
  explicit ToolEvent_FireEntityInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputNameFieldNumber = 3,
    kInputParamFieldNumber = 4,
    kEhandleFieldNumber = 1,
    kClientsideentityFieldNumber = 2,
  };
  // optional string input_name = 3;
  bool has_input_name() const;
  private:
  bool _internal_has_input_name() const;
  public:
  void clear_input_name();
  const std::string& input_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_name();
  PROTOBUF_NODISCARD std::string* release_input_name();
  void set_allocated_input_name(std::string* input_name);
  private:
  const std::string& _internal_input_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_name(const std::string& value);
  std::string* _internal_mutable_input_name();
  public:

  // optional string input_param = 4;
  bool has_input_param() const;
  private:
  bool _internal_has_input_param() const;
  public:
  void clear_input_param();
  const std::string& input_param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_param();
  PROTOBUF_NODISCARD std::string* release_input_param();
  void set_allocated_input_param(std::string* input_param);
  private:
  const std::string& _internal_input_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_param(const std::string& value);
  std::string* _internal_mutable_input_param();
  public:

  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  private:
  bool _internal_has_ehandle() const;
  public:
  void clear_ehandle();
  int32_t ehandle() const;
  void set_ehandle(int32_t value);
  private:
  int32_t _internal_ehandle() const;
  void _internal_set_ehandle(int32_t value);
  public:

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  private:
  bool _internal_has_clientsideentity() const;
  public:
  void clear_clientsideentity();
  bool clientsideentity() const;
  void set_clientsideentity(bool value);
  private:
  bool _internal_clientsideentity() const;
  void _internal_set_clientsideentity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ToolEvent_FireEntityInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_param_;
    int32_t ehandle_;
    bool clientsideentity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolEvent_SFMRecordingStateChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolEvent_SFMRecordingStateChanged) */ {
 public:
  inline ToolEvent_SFMRecordingStateChanged() : ToolEvent_SFMRecordingStateChanged(nullptr) {}
  ~ToolEvent_SFMRecordingStateChanged() override;
  explicit PROTOBUF_CONSTEXPR ToolEvent_SFMRecordingStateChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolEvent_SFMRecordingStateChanged(const ToolEvent_SFMRecordingStateChanged& from);
  ToolEvent_SFMRecordingStateChanged(ToolEvent_SFMRecordingStateChanged&& from) noexcept
    : ToolEvent_SFMRecordingStateChanged() {
    *this = ::std::move(from);
  }

  inline ToolEvent_SFMRecordingStateChanged& operator=(const ToolEvent_SFMRecordingStateChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolEvent_SFMRecordingStateChanged& operator=(ToolEvent_SFMRecordingStateChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolEvent_SFMRecordingStateChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolEvent_SFMRecordingStateChanged* internal_default_instance() {
    return reinterpret_cast<const ToolEvent_SFMRecordingStateChanged*>(
               &_ToolEvent_SFMRecordingStateChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ToolEvent_SFMRecordingStateChanged& a, ToolEvent_SFMRecordingStateChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolEvent_SFMRecordingStateChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolEvent_SFMRecordingStateChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolEvent_SFMRecordingStateChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolEvent_SFMRecordingStateChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolEvent_SFMRecordingStateChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolEvent_SFMRecordingStateChanged& from) {
    ToolEvent_SFMRecordingStateChanged::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolEvent_SFMRecordingStateChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolEvent_SFMRecordingStateChanged";
  }
  protected:
  explicit ToolEvent_SFMRecordingStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsrecordingFieldNumber = 1,
  };
  // optional bool isrecording = 1;
  bool has_isrecording() const;
  private:
  bool _internal_has_isrecording() const;
  public:
  void clear_isrecording();
  bool isrecording() const;
  void set_isrecording(bool value);
  private:
  bool _internal_isrecording() const;
  void _internal_set_isrecording(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ToolEvent_SFMRecordingStateChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool isrecording_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// -------------------------------------------------------------------

class ToolEvent_SFMToolActiveStateChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToolEvent_SFMToolActiveStateChanged) */ {
 public:
  inline ToolEvent_SFMToolActiveStateChanged() : ToolEvent_SFMToolActiveStateChanged(nullptr) {}
  ~ToolEvent_SFMToolActiveStateChanged() override;
  explicit PROTOBUF_CONSTEXPR ToolEvent_SFMToolActiveStateChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolEvent_SFMToolActiveStateChanged(const ToolEvent_SFMToolActiveStateChanged& from);
  ToolEvent_SFMToolActiveStateChanged(ToolEvent_SFMToolActiveStateChanged&& from) noexcept
    : ToolEvent_SFMToolActiveStateChanged() {
    *this = ::std::move(from);
  }

  inline ToolEvent_SFMToolActiveStateChanged& operator=(const ToolEvent_SFMToolActiveStateChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolEvent_SFMToolActiveStateChanged& operator=(ToolEvent_SFMToolActiveStateChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolEvent_SFMToolActiveStateChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolEvent_SFMToolActiveStateChanged* internal_default_instance() {
    return reinterpret_cast<const ToolEvent_SFMToolActiveStateChanged*>(
               &_ToolEvent_SFMToolActiveStateChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ToolEvent_SFMToolActiveStateChanged& a, ToolEvent_SFMToolActiveStateChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolEvent_SFMToolActiveStateChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolEvent_SFMToolActiveStateChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolEvent_SFMToolActiveStateChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolEvent_SFMToolActiveStateChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToolEvent_SFMToolActiveStateChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToolEvent_SFMToolActiveStateChanged& from) {
    ToolEvent_SFMToolActiveStateChanged::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolEvent_SFMToolActiveStateChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToolEvent_SFMToolActiveStateChanged";
  }
  protected:
  explicit ToolEvent_SFMToolActiveStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsactiveFieldNumber = 1,
  };
  // optional bool isactive = 1;
  bool has_isactive() const;
  private:
  bool _internal_has_isactive() const;
  public:
  void clear_isactive();
  bool isactive() const;
  void set_isactive(bool value);
  private:
  bool _internal_isactive() const;
  void _internal_set_isactive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ToolEvent_SFMToolActiveStateChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool isactive_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gametoolevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChangeMapToolEvent

// optional string mapname = 1;
inline bool ChangeMapToolEvent::_internal_has_mapname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeMapToolEvent::has_mapname() const {
  return _internal_has_mapname();
}
inline void ChangeMapToolEvent::clear_mapname() {
  _impl_.mapname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeMapToolEvent::mapname() const {
  // @@protoc_insertion_point(field_get:ChangeMapToolEvent.mapname)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeMapToolEvent::set_mapname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.mapname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChangeMapToolEvent.mapname)
}
inline std::string* ChangeMapToolEvent::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:ChangeMapToolEvent.mapname)
  return _s;
}
inline const std::string& ChangeMapToolEvent::_internal_mapname() const {
  return _impl_.mapname_.Get();
}
inline void ChangeMapToolEvent::_internal_set_mapname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mapname_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeMapToolEvent::_internal_mutable_mapname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mapname_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeMapToolEvent::release_mapname() {
  // @@protoc_insertion_point(field_release:ChangeMapToolEvent.mapname)
  if (!_internal_has_mapname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.mapname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapname_.IsDefault()) {
    _impl_.mapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChangeMapToolEvent::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mapname_.SetAllocated(mapname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapname_.IsDefault()) {
    _impl_.mapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChangeMapToolEvent.mapname)
}

// -------------------------------------------------------------------

// TraceRayServerToolEvent

// optional .CMsgVector start = 1;
inline bool TraceRayServerToolEvent::_internal_has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ != nullptr);
  return value;
}
inline bool TraceRayServerToolEvent::has_start() const {
  return _internal_has_start();
}
inline const ::CMsgVector& TraceRayServerToolEvent::_internal_start() const {
  const ::CMsgVector* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& TraceRayServerToolEvent::start() const {
  // @@protoc_insertion_point(field_get:TraceRayServerToolEvent.start)
  return _internal_start();
}
inline void TraceRayServerToolEvent::unsafe_arena_set_allocated_start(
    ::CMsgVector* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TraceRayServerToolEvent.start)
}
inline ::CMsgVector* TraceRayServerToolEvent::release_start() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* TraceRayServerToolEvent::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:TraceRayServerToolEvent.start)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::CMsgVector* TraceRayServerToolEvent::_internal_mutable_start() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::CMsgVector* TraceRayServerToolEvent::mutable_start() {
  ::CMsgVector* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:TraceRayServerToolEvent.start)
  return _msg;
}
inline void TraceRayServerToolEvent::set_allocated_start(::CMsgVector* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:TraceRayServerToolEvent.start)
}

// optional .CMsgVector end = 2;
inline bool TraceRayServerToolEvent::_internal_has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ != nullptr);
  return value;
}
inline bool TraceRayServerToolEvent::has_end() const {
  return _internal_has_end();
}
inline const ::CMsgVector& TraceRayServerToolEvent::_internal_end() const {
  const ::CMsgVector* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& TraceRayServerToolEvent::end() const {
  // @@protoc_insertion_point(field_get:TraceRayServerToolEvent.end)
  return _internal_end();
}
inline void TraceRayServerToolEvent::unsafe_arena_set_allocated_end(
    ::CMsgVector* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = end;
  if (end) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TraceRayServerToolEvent.end)
}
inline ::CMsgVector* TraceRayServerToolEvent::release_end() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* TraceRayServerToolEvent::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:TraceRayServerToolEvent.end)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::CMsgVector* TraceRayServerToolEvent::_internal_mutable_end() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.end_ = p;
  }
  return _impl_.end_;
}
inline ::CMsgVector* TraceRayServerToolEvent::mutable_end() {
  ::CMsgVector* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:TraceRayServerToolEvent.end)
  return _msg;
}
inline void TraceRayServerToolEvent::set_allocated_end(::CMsgVector* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_ = end;
  // @@protoc_insertion_point(field_set_allocated:TraceRayServerToolEvent.end)
}

// -------------------------------------------------------------------

// ToolTraceRayResult

// optional bool hit = 1;
inline bool ToolTraceRayResult::_internal_has_hit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToolTraceRayResult::has_hit() const {
  return _internal_has_hit();
}
inline void ToolTraceRayResult::clear_hit() {
  _impl_.hit_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ToolTraceRayResult::_internal_hit() const {
  return _impl_.hit_;
}
inline bool ToolTraceRayResult::hit() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.hit)
  return _internal_hit();
}
inline void ToolTraceRayResult::_internal_set_hit(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hit_ = value;
}
inline void ToolTraceRayResult::set_hit(bool value) {
  _internal_set_hit(value);
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.hit)
}

// optional .CMsgVector impact = 2;
inline bool ToolTraceRayResult::_internal_has_impact() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.impact_ != nullptr);
  return value;
}
inline bool ToolTraceRayResult::has_impact() const {
  return _internal_has_impact();
}
inline const ::CMsgVector& ToolTraceRayResult::_internal_impact() const {
  const ::CMsgVector* p = _impl_.impact_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& ToolTraceRayResult::impact() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.impact)
  return _internal_impact();
}
inline void ToolTraceRayResult::unsafe_arena_set_allocated_impact(
    ::CMsgVector* impact) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.impact_);
  }
  _impl_.impact_ = impact;
  if (impact) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ToolTraceRayResult.impact)
}
inline ::CMsgVector* ToolTraceRayResult::release_impact() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.impact_;
  _impl_.impact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* ToolTraceRayResult::unsafe_arena_release_impact() {
  // @@protoc_insertion_point(field_release:ToolTraceRayResult.impact)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.impact_;
  _impl_.impact_ = nullptr;
  return temp;
}
inline ::CMsgVector* ToolTraceRayResult::_internal_mutable_impact() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.impact_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.impact_ = p;
  }
  return _impl_.impact_;
}
inline ::CMsgVector* ToolTraceRayResult::mutable_impact() {
  ::CMsgVector* _msg = _internal_mutable_impact();
  // @@protoc_insertion_point(field_mutable:ToolTraceRayResult.impact)
  return _msg;
}
inline void ToolTraceRayResult::set_allocated_impact(::CMsgVector* impact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.impact_);
  }
  if (impact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(impact));
    if (message_arena != submessage_arena) {
      impact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impact, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.impact_ = impact;
  // @@protoc_insertion_point(field_set_allocated:ToolTraceRayResult.impact)
}

// optional .CMsgVector normal = 3;
inline bool ToolTraceRayResult::_internal_has_normal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.normal_ != nullptr);
  return value;
}
inline bool ToolTraceRayResult::has_normal() const {
  return _internal_has_normal();
}
inline const ::CMsgVector& ToolTraceRayResult::_internal_normal() const {
  const ::CMsgVector* p = _impl_.normal_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& ToolTraceRayResult::normal() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.normal)
  return _internal_normal();
}
inline void ToolTraceRayResult::unsafe_arena_set_allocated_normal(
    ::CMsgVector* normal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  _impl_.normal_ = normal;
  if (normal) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ToolTraceRayResult.normal)
}
inline ::CMsgVector* ToolTraceRayResult::release_normal() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* ToolTraceRayResult::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:ToolTraceRayResult.normal)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
  return temp;
}
inline ::CMsgVector* ToolTraceRayResult::_internal_mutable_normal() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.normal_ = p;
  }
  return _impl_.normal_;
}
inline ::CMsgVector* ToolTraceRayResult::mutable_normal() {
  ::CMsgVector* _msg = _internal_mutable_normal();
  // @@protoc_insertion_point(field_mutable:ToolTraceRayResult.normal)
  return _msg;
}
inline void ToolTraceRayResult::set_allocated_normal(::CMsgVector* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normal));
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:ToolTraceRayResult.normal)
}

// optional float distance = 4;
inline bool ToolTraceRayResult::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToolTraceRayResult::has_distance() const {
  return _internal_has_distance();
}
inline void ToolTraceRayResult::clear_distance() {
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ToolTraceRayResult::_internal_distance() const {
  return _impl_.distance_;
}
inline float ToolTraceRayResult::distance() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.distance)
  return _internal_distance();
}
inline void ToolTraceRayResult::_internal_set_distance(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.distance_ = value;
}
inline void ToolTraceRayResult::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.distance)
}

// optional float fraction = 5;
inline bool ToolTraceRayResult::_internal_has_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ToolTraceRayResult::has_fraction() const {
  return _internal_has_fraction();
}
inline void ToolTraceRayResult::clear_fraction() {
  _impl_.fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ToolTraceRayResult::_internal_fraction() const {
  return _impl_.fraction_;
}
inline float ToolTraceRayResult::fraction() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.fraction)
  return _internal_fraction();
}
inline void ToolTraceRayResult::_internal_set_fraction(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fraction_ = value;
}
inline void ToolTraceRayResult::set_fraction(float value) {
  _internal_set_fraction(value);
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.fraction)
}

// optional int32 ehandle = 6;
inline bool ToolTraceRayResult::_internal_has_ehandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ToolTraceRayResult::has_ehandle() const {
  return _internal_has_ehandle();
}
inline void ToolTraceRayResult::clear_ehandle() {
  _impl_.ehandle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ToolTraceRayResult::_internal_ehandle() const {
  return _impl_.ehandle_;
}
inline int32_t ToolTraceRayResult::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.ehandle)
  return _internal_ehandle();
}
inline void ToolTraceRayResult::_internal_set_ehandle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ehandle_ = value;
}
inline void ToolTraceRayResult::set_ehandle(int32_t value) {
  _internal_set_ehandle(value);
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.ehandle)
}

// -------------------------------------------------------------------

// SpawnEntityToolEvent

// optional bytes entity_keyvalues = 1;
inline bool SpawnEntityToolEvent::_internal_has_entity_keyvalues() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpawnEntityToolEvent::has_entity_keyvalues() const {
  return _internal_has_entity_keyvalues();
}
inline void SpawnEntityToolEvent::clear_entity_keyvalues() {
  _impl_.entity_keyvalues_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpawnEntityToolEvent::entity_keyvalues() const {
  // @@protoc_insertion_point(field_get:SpawnEntityToolEvent.entity_keyvalues)
  return _internal_entity_keyvalues();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpawnEntityToolEvent::set_entity_keyvalues(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.entity_keyvalues_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpawnEntityToolEvent.entity_keyvalues)
}
inline std::string* SpawnEntityToolEvent::mutable_entity_keyvalues() {
  std::string* _s = _internal_mutable_entity_keyvalues();
  // @@protoc_insertion_point(field_mutable:SpawnEntityToolEvent.entity_keyvalues)
  return _s;
}
inline const std::string& SpawnEntityToolEvent::_internal_entity_keyvalues() const {
  return _impl_.entity_keyvalues_.Get();
}
inline void SpawnEntityToolEvent::_internal_set_entity_keyvalues(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.entity_keyvalues_.Set(value, GetArenaForAllocation());
}
inline std::string* SpawnEntityToolEvent::_internal_mutable_entity_keyvalues() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.entity_keyvalues_.Mutable(GetArenaForAllocation());
}
inline std::string* SpawnEntityToolEvent::release_entity_keyvalues() {
  // @@protoc_insertion_point(field_release:SpawnEntityToolEvent.entity_keyvalues)
  if (!_internal_has_entity_keyvalues()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.entity_keyvalues_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_keyvalues_.IsDefault()) {
    _impl_.entity_keyvalues_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpawnEntityToolEvent::set_allocated_entity_keyvalues(std::string* entity_keyvalues) {
  if (entity_keyvalues != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.entity_keyvalues_.SetAllocated(entity_keyvalues, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_keyvalues_.IsDefault()) {
    _impl_.entity_keyvalues_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SpawnEntityToolEvent.entity_keyvalues)
}

// optional bool clientsideentity = 2;
inline bool SpawnEntityToolEvent::_internal_has_clientsideentity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpawnEntityToolEvent::has_clientsideentity() const {
  return _internal_has_clientsideentity();
}
inline void SpawnEntityToolEvent::clear_clientsideentity() {
  _impl_.clientsideentity_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool SpawnEntityToolEvent::_internal_clientsideentity() const {
  return _impl_.clientsideentity_;
}
inline bool SpawnEntityToolEvent::clientsideentity() const {
  // @@protoc_insertion_point(field_get:SpawnEntityToolEvent.clientsideentity)
  return _internal_clientsideentity();
}
inline void SpawnEntityToolEvent::_internal_set_clientsideentity(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clientsideentity_ = value;
}
inline void SpawnEntityToolEvent::set_clientsideentity(bool value) {
  _internal_set_clientsideentity(value);
  // @@protoc_insertion_point(field_set:SpawnEntityToolEvent.clientsideentity)
}

// -------------------------------------------------------------------

// SpawnEntityToolEventResult

// optional int32 ehandle = 1;
inline bool SpawnEntityToolEventResult::_internal_has_ehandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpawnEntityToolEventResult::has_ehandle() const {
  return _internal_has_ehandle();
}
inline void SpawnEntityToolEventResult::clear_ehandle() {
  _impl_.ehandle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t SpawnEntityToolEventResult::_internal_ehandle() const {
  return _impl_.ehandle_;
}
inline int32_t SpawnEntityToolEventResult::ehandle() const {
  // @@protoc_insertion_point(field_get:SpawnEntityToolEventResult.ehandle)
  return _internal_ehandle();
}
inline void SpawnEntityToolEventResult::_internal_set_ehandle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ehandle_ = value;
}
inline void SpawnEntityToolEventResult::set_ehandle(int32_t value) {
  _internal_set_ehandle(value);
  // @@protoc_insertion_point(field_set:SpawnEntityToolEventResult.ehandle)
}

// -------------------------------------------------------------------

// DestroyEntityToolEvent

// optional int32 ehandle = 1;
inline bool DestroyEntityToolEvent::_internal_has_ehandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DestroyEntityToolEvent::has_ehandle() const {
  return _internal_has_ehandle();
}
inline void DestroyEntityToolEvent::clear_ehandle() {
  _impl_.ehandle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t DestroyEntityToolEvent::_internal_ehandle() const {
  return _impl_.ehandle_;
}
inline int32_t DestroyEntityToolEvent::ehandle() const {
  // @@protoc_insertion_point(field_get:DestroyEntityToolEvent.ehandle)
  return _internal_ehandle();
}
inline void DestroyEntityToolEvent::_internal_set_ehandle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ehandle_ = value;
}
inline void DestroyEntityToolEvent::set_ehandle(int32_t value) {
  _internal_set_ehandle(value);
  // @@protoc_insertion_point(field_set:DestroyEntityToolEvent.ehandle)
}

// -------------------------------------------------------------------

// DestroyAllEntitiesToolEvent

// -------------------------------------------------------------------

// RestartMapToolEvent

// -------------------------------------------------------------------

// ToolEvent_GetEntityInfo

// optional int32 ehandle = 1;
inline bool ToolEvent_GetEntityInfo::_internal_has_ehandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToolEvent_GetEntityInfo::has_ehandle() const {
  return _internal_has_ehandle();
}
inline void ToolEvent_GetEntityInfo::clear_ehandle() {
  _impl_.ehandle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ToolEvent_GetEntityInfo::_internal_ehandle() const {
  return _impl_.ehandle_;
}
inline int32_t ToolEvent_GetEntityInfo::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfo.ehandle)
  return _internal_ehandle();
}
inline void ToolEvent_GetEntityInfo::_internal_set_ehandle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ehandle_ = value;
}
inline void ToolEvent_GetEntityInfo::set_ehandle(int32_t value) {
  _internal_set_ehandle(value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfo.ehandle)
}

// optional bool clientsideentity = 2;
inline bool ToolEvent_GetEntityInfo::_internal_has_clientsideentity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToolEvent_GetEntityInfo::has_clientsideentity() const {
  return _internal_has_clientsideentity();
}
inline void ToolEvent_GetEntityInfo::clear_clientsideentity() {
  _impl_.clientsideentity_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ToolEvent_GetEntityInfo::_internal_clientsideentity() const {
  return _impl_.clientsideentity_;
}
inline bool ToolEvent_GetEntityInfo::clientsideentity() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfo.clientsideentity)
  return _internal_clientsideentity();
}
inline void ToolEvent_GetEntityInfo::_internal_set_clientsideentity(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clientsideentity_ = value;
}
inline void ToolEvent_GetEntityInfo::set_clientsideentity(bool value) {
  _internal_set_clientsideentity(value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfo.clientsideentity)
}

// -------------------------------------------------------------------

// ToolEvent_GetEntityInfoResult

// optional string cppclass = 1 [default = "shithead"];
inline bool ToolEvent_GetEntityInfoResult::_internal_has_cppclass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToolEvent_GetEntityInfoResult::has_cppclass() const {
  return _internal_has_cppclass();
}
inline void ToolEvent_GetEntityInfoResult::clear_cppclass() {
  _impl_.cppclass_.ClearToDefault(::ToolEvent_GetEntityInfoResult::Impl_::_i_give_permission_to_break_this_code_default_cppclass_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ToolEvent_GetEntityInfoResult::cppclass() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.cppclass)
  if (_impl_.cppclass_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_cppclass_.get();
  return _internal_cppclass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToolEvent_GetEntityInfoResult::set_cppclass(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.cppclass_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfoResult.cppclass)
}
inline std::string* ToolEvent_GetEntityInfoResult::mutable_cppclass() {
  std::string* _s = _internal_mutable_cppclass();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.cppclass)
  return _s;
}
inline const std::string& ToolEvent_GetEntityInfoResult::_internal_cppclass() const {
  return _impl_.cppclass_.Get();
}
inline void ToolEvent_GetEntityInfoResult::_internal_set_cppclass(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cppclass_.Set(value, GetArenaForAllocation());
}
inline std::string* ToolEvent_GetEntityInfoResult::_internal_mutable_cppclass() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cppclass_.Mutable(::ToolEvent_GetEntityInfoResult::Impl_::_i_give_permission_to_break_this_code_default_cppclass_, GetArenaForAllocation());
}
inline std::string* ToolEvent_GetEntityInfoResult::release_cppclass() {
  // @@protoc_insertion_point(field_release:ToolEvent_GetEntityInfoResult.cppclass)
  if (!_internal_has_cppclass()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.cppclass_.Release();
  return p;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_cppclass(std::string* cppclass) {
  if (cppclass != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cppclass_.SetAllocated(cppclass, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.cppclass)
}

// optional string classname = 2;
inline bool ToolEvent_GetEntityInfoResult::_internal_has_classname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToolEvent_GetEntityInfoResult::has_classname() const {
  return _internal_has_classname();
}
inline void ToolEvent_GetEntityInfoResult::clear_classname() {
  _impl_.classname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ToolEvent_GetEntityInfoResult::classname() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.classname)
  return _internal_classname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToolEvent_GetEntityInfoResult::set_classname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.classname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfoResult.classname)
}
inline std::string* ToolEvent_GetEntityInfoResult::mutable_classname() {
  std::string* _s = _internal_mutable_classname();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.classname)
  return _s;
}
inline const std::string& ToolEvent_GetEntityInfoResult::_internal_classname() const {
  return _impl_.classname_.Get();
}
inline void ToolEvent_GetEntityInfoResult::_internal_set_classname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.classname_.Set(value, GetArenaForAllocation());
}
inline std::string* ToolEvent_GetEntityInfoResult::_internal_mutable_classname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.classname_.Mutable(GetArenaForAllocation());
}
inline std::string* ToolEvent_GetEntityInfoResult::release_classname() {
  // @@protoc_insertion_point(field_release:ToolEvent_GetEntityInfoResult.classname)
  if (!_internal_has_classname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.classname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classname_.IsDefault()) {
    _impl_.classname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_classname(std::string* classname) {
  if (classname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.classname_.SetAllocated(classname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classname_.IsDefault()) {
    _impl_.classname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.classname)
}

// optional string name = 3;
inline bool ToolEvent_GetEntityInfoResult::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToolEvent_GetEntityInfoResult::has_name() const {
  return _internal_has_name();
}
inline void ToolEvent_GetEntityInfoResult::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ToolEvent_GetEntityInfoResult::name() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToolEvent_GetEntityInfoResult::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfoResult.name)
}
inline std::string* ToolEvent_GetEntityInfoResult::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.name)
  return _s;
}
inline const std::string& ToolEvent_GetEntityInfoResult::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ToolEvent_GetEntityInfoResult::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ToolEvent_GetEntityInfoResult::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ToolEvent_GetEntityInfoResult::release_name() {
  // @@protoc_insertion_point(field_release:ToolEvent_GetEntityInfoResult.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.name)
}

// optional .CMsgVector origin = 4;
inline bool ToolEvent_GetEntityInfoResult::_internal_has_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_ != nullptr);
  return value;
}
inline bool ToolEvent_GetEntityInfoResult::has_origin() const {
  return _internal_has_origin();
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::_internal_origin() const {
  const ::CMsgVector* p = _impl_.origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::origin() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.origin)
  return _internal_origin();
}
inline void ToolEvent_GetEntityInfoResult::unsafe_arena_set_allocated_origin(
    ::CMsgVector* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  _impl_.origin_ = origin;
  if (origin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ToolEvent_GetEntityInfoResult.origin)
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::release_origin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgVector* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:ToolEvent_GetEntityInfoResult.origin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgVector* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
  return temp;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::_internal_mutable_origin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.origin_ = p;
  }
  return _impl_.origin_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_origin() {
  ::CMsgVector* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.origin)
  return _msg;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_origin(::CMsgVector* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin));
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.origin)
}

// optional .CMsgVector mins = 5;
inline bool ToolEvent_GetEntityInfoResult::_internal_has_mins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mins_ != nullptr);
  return value;
}
inline bool ToolEvent_GetEntityInfoResult::has_mins() const {
  return _internal_has_mins();
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::_internal_mins() const {
  const ::CMsgVector* p = _impl_.mins_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::mins() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.mins)
  return _internal_mins();
}
inline void ToolEvent_GetEntityInfoResult::unsafe_arena_set_allocated_mins(
    ::CMsgVector* mins) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mins_);
  }
  _impl_.mins_ = mins;
  if (mins) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ToolEvent_GetEntityInfoResult.mins)
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::release_mins() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgVector* temp = _impl_.mins_;
  _impl_.mins_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::unsafe_arena_release_mins() {
  // @@protoc_insertion_point(field_release:ToolEvent_GetEntityInfoResult.mins)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgVector* temp = _impl_.mins_;
  _impl_.mins_ = nullptr;
  return temp;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::_internal_mutable_mins() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.mins_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.mins_ = p;
  }
  return _impl_.mins_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_mins() {
  ::CMsgVector* _msg = _internal_mutable_mins();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.mins)
  return _msg;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_mins(::CMsgVector* mins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mins_);
  }
  if (mins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mins));
    if (message_arena != submessage_arena) {
      mins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mins, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.mins_ = mins;
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.mins)
}

// optional .CMsgVector maxs = 6;
inline bool ToolEvent_GetEntityInfoResult::_internal_has_maxs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maxs_ != nullptr);
  return value;
}
inline bool ToolEvent_GetEntityInfoResult::has_maxs() const {
  return _internal_has_maxs();
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::_internal_maxs() const {
  const ::CMsgVector* p = _impl_.maxs_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::maxs() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.maxs)
  return _internal_maxs();
}
inline void ToolEvent_GetEntityInfoResult::unsafe_arena_set_allocated_maxs(
    ::CMsgVector* maxs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maxs_);
  }
  _impl_.maxs_ = maxs;
  if (maxs) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ToolEvent_GetEntityInfoResult.maxs)
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::release_maxs() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgVector* temp = _impl_.maxs_;
  _impl_.maxs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::unsafe_arena_release_maxs() {
  // @@protoc_insertion_point(field_release:ToolEvent_GetEntityInfoResult.maxs)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgVector* temp = _impl_.maxs_;
  _impl_.maxs_ = nullptr;
  return temp;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::_internal_mutable_maxs() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.maxs_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.maxs_ = p;
  }
  return _impl_.maxs_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_maxs() {
  ::CMsgVector* _msg = _internal_mutable_maxs();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.maxs)
  return _msg;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_maxs(::CMsgVector* maxs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maxs_);
  }
  if (maxs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxs));
    if (message_arena != submessage_arena) {
      maxs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxs, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.maxs_ = maxs;
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.maxs)
}

// -------------------------------------------------------------------

// ToolEvent_GetEntityInputs

// optional int32 ehandle = 1;
inline bool ToolEvent_GetEntityInputs::_internal_has_ehandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToolEvent_GetEntityInputs::has_ehandle() const {
  return _internal_has_ehandle();
}
inline void ToolEvent_GetEntityInputs::clear_ehandle() {
  _impl_.ehandle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ToolEvent_GetEntityInputs::_internal_ehandle() const {
  return _impl_.ehandle_;
}
inline int32_t ToolEvent_GetEntityInputs::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInputs.ehandle)
  return _internal_ehandle();
}
inline void ToolEvent_GetEntityInputs::_internal_set_ehandle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ehandle_ = value;
}
inline void ToolEvent_GetEntityInputs::set_ehandle(int32_t value) {
  _internal_set_ehandle(value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInputs.ehandle)
}

// optional bool clientsideentity = 2;
inline bool ToolEvent_GetEntityInputs::_internal_has_clientsideentity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToolEvent_GetEntityInputs::has_clientsideentity() const {
  return _internal_has_clientsideentity();
}
inline void ToolEvent_GetEntityInputs::clear_clientsideentity() {
  _impl_.clientsideentity_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ToolEvent_GetEntityInputs::_internal_clientsideentity() const {
  return _impl_.clientsideentity_;
}
inline bool ToolEvent_GetEntityInputs::clientsideentity() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInputs.clientsideentity)
  return _internal_clientsideentity();
}
inline void ToolEvent_GetEntityInputs::_internal_set_clientsideentity(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clientsideentity_ = value;
}
inline void ToolEvent_GetEntityInputs::set_clientsideentity(bool value) {
  _internal_set_clientsideentity(value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInputs.clientsideentity)
}

// -------------------------------------------------------------------

// ToolEvent_GetEntityInputsResult

// repeated string input_list = 1;
inline int ToolEvent_GetEntityInputsResult::_internal_input_list_size() const {
  return _impl_.input_list_.size();
}
inline int ToolEvent_GetEntityInputsResult::input_list_size() const {
  return _internal_input_list_size();
}
inline void ToolEvent_GetEntityInputsResult::clear_input_list() {
  _impl_.input_list_.Clear();
}
inline std::string* ToolEvent_GetEntityInputsResult::add_input_list() {
  std::string* _s = _internal_add_input_list();
  // @@protoc_insertion_point(field_add_mutable:ToolEvent_GetEntityInputsResult.input_list)
  return _s;
}
inline const std::string& ToolEvent_GetEntityInputsResult::_internal_input_list(int index) const {
  return _impl_.input_list_.Get(index);
}
inline const std::string& ToolEvent_GetEntityInputsResult::input_list(int index) const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInputsResult.input_list)
  return _internal_input_list(index);
}
inline std::string* ToolEvent_GetEntityInputsResult::mutable_input_list(int index) {
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInputsResult.input_list)
  return _impl_.input_list_.Mutable(index);
}
inline void ToolEvent_GetEntityInputsResult::set_input_list(int index, const std::string& value) {
  _impl_.input_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::set_input_list(int index, std::string&& value) {
  _impl_.input_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::set_input_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::set_input_list(int index, const char* value, size_t size) {
  _impl_.input_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ToolEvent_GetEntityInputsResult.input_list)
}
inline std::string* ToolEvent_GetEntityInputsResult::_internal_add_input_list() {
  return _impl_.input_list_.Add();
}
inline void ToolEvent_GetEntityInputsResult::add_input_list(const std::string& value) {
  _impl_.input_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::add_input_list(std::string&& value) {
  _impl_.input_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::add_input_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::add_input_list(const char* value, size_t size) {
  _impl_.input_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ToolEvent_GetEntityInputsResult.input_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ToolEvent_GetEntityInputsResult::input_list() const {
  // @@protoc_insertion_point(field_list:ToolEvent_GetEntityInputsResult.input_list)
  return _impl_.input_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ToolEvent_GetEntityInputsResult::mutable_input_list() {
  // @@protoc_insertion_point(field_mutable_list:ToolEvent_GetEntityInputsResult.input_list)
  return &_impl_.input_list_;
}

// -------------------------------------------------------------------

// ToolEvent_FireEntityInput

// optional int32 ehandle = 1;
inline bool ToolEvent_FireEntityInput::_internal_has_ehandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToolEvent_FireEntityInput::has_ehandle() const {
  return _internal_has_ehandle();
}
inline void ToolEvent_FireEntityInput::clear_ehandle() {
  _impl_.ehandle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ToolEvent_FireEntityInput::_internal_ehandle() const {
  return _impl_.ehandle_;
}
inline int32_t ToolEvent_FireEntityInput::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.ehandle)
  return _internal_ehandle();
}
inline void ToolEvent_FireEntityInput::_internal_set_ehandle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ehandle_ = value;
}
inline void ToolEvent_FireEntityInput::set_ehandle(int32_t value) {
  _internal_set_ehandle(value);
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.ehandle)
}

// optional bool clientsideentity = 2;
inline bool ToolEvent_FireEntityInput::_internal_has_clientsideentity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToolEvent_FireEntityInput::has_clientsideentity() const {
  return _internal_has_clientsideentity();
}
inline void ToolEvent_FireEntityInput::clear_clientsideentity() {
  _impl_.clientsideentity_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ToolEvent_FireEntityInput::_internal_clientsideentity() const {
  return _impl_.clientsideentity_;
}
inline bool ToolEvent_FireEntityInput::clientsideentity() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.clientsideentity)
  return _internal_clientsideentity();
}
inline void ToolEvent_FireEntityInput::_internal_set_clientsideentity(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.clientsideentity_ = value;
}
inline void ToolEvent_FireEntityInput::set_clientsideentity(bool value) {
  _internal_set_clientsideentity(value);
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.clientsideentity)
}

// optional string input_name = 3;
inline bool ToolEvent_FireEntityInput::_internal_has_input_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToolEvent_FireEntityInput::has_input_name() const {
  return _internal_has_input_name();
}
inline void ToolEvent_FireEntityInput::clear_input_name() {
  _impl_.input_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ToolEvent_FireEntityInput::input_name() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.input_name)
  return _internal_input_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToolEvent_FireEntityInput::set_input_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.input_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.input_name)
}
inline std::string* ToolEvent_FireEntityInput::mutable_input_name() {
  std::string* _s = _internal_mutable_input_name();
  // @@protoc_insertion_point(field_mutable:ToolEvent_FireEntityInput.input_name)
  return _s;
}
inline const std::string& ToolEvent_FireEntityInput::_internal_input_name() const {
  return _impl_.input_name_.Get();
}
inline void ToolEvent_FireEntityInput::_internal_set_input_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ToolEvent_FireEntityInput::_internal_mutable_input_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.input_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ToolEvent_FireEntityInput::release_input_name() {
  // @@protoc_insertion_point(field_release:ToolEvent_FireEntityInput.input_name)
  if (!_internal_has_input_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.input_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_name_.IsDefault()) {
    _impl_.input_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToolEvent_FireEntityInput::set_allocated_input_name(std::string* input_name) {
  if (input_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.input_name_.SetAllocated(input_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_name_.IsDefault()) {
    _impl_.input_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_FireEntityInput.input_name)
}

// optional string input_param = 4;
inline bool ToolEvent_FireEntityInput::_internal_has_input_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToolEvent_FireEntityInput::has_input_param() const {
  return _internal_has_input_param();
}
inline void ToolEvent_FireEntityInput::clear_input_param() {
  _impl_.input_param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ToolEvent_FireEntityInput::input_param() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.input_param)
  return _internal_input_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToolEvent_FireEntityInput::set_input_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.input_param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.input_param)
}
inline std::string* ToolEvent_FireEntityInput::mutable_input_param() {
  std::string* _s = _internal_mutable_input_param();
  // @@protoc_insertion_point(field_mutable:ToolEvent_FireEntityInput.input_param)
  return _s;
}
inline const std::string& ToolEvent_FireEntityInput::_internal_input_param() const {
  return _impl_.input_param_.Get();
}
inline void ToolEvent_FireEntityInput::_internal_set_input_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.input_param_.Set(value, GetArenaForAllocation());
}
inline std::string* ToolEvent_FireEntityInput::_internal_mutable_input_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.input_param_.Mutable(GetArenaForAllocation());
}
inline std::string* ToolEvent_FireEntityInput::release_input_param() {
  // @@protoc_insertion_point(field_release:ToolEvent_FireEntityInput.input_param)
  if (!_internal_has_input_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.input_param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_param_.IsDefault()) {
    _impl_.input_param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToolEvent_FireEntityInput::set_allocated_input_param(std::string* input_param) {
  if (input_param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_param_.SetAllocated(input_param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_param_.IsDefault()) {
    _impl_.input_param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_FireEntityInput.input_param)
}

// -------------------------------------------------------------------

// ToolEvent_SFMRecordingStateChanged

// optional bool isrecording = 1;
inline bool ToolEvent_SFMRecordingStateChanged::_internal_has_isrecording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToolEvent_SFMRecordingStateChanged::has_isrecording() const {
  return _internal_has_isrecording();
}
inline void ToolEvent_SFMRecordingStateChanged::clear_isrecording() {
  _impl_.isrecording_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ToolEvent_SFMRecordingStateChanged::_internal_isrecording() const {
  return _impl_.isrecording_;
}
inline bool ToolEvent_SFMRecordingStateChanged::isrecording() const {
  // @@protoc_insertion_point(field_get:ToolEvent_SFMRecordingStateChanged.isrecording)
  return _internal_isrecording();
}
inline void ToolEvent_SFMRecordingStateChanged::_internal_set_isrecording(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.isrecording_ = value;
}
inline void ToolEvent_SFMRecordingStateChanged::set_isrecording(bool value) {
  _internal_set_isrecording(value);
  // @@protoc_insertion_point(field_set:ToolEvent_SFMRecordingStateChanged.isrecording)
}

// -------------------------------------------------------------------

// ToolEvent_SFMToolActiveStateChanged

// optional bool isactive = 1;
inline bool ToolEvent_SFMToolActiveStateChanged::_internal_has_isactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToolEvent_SFMToolActiveStateChanged::has_isactive() const {
  return _internal_has_isactive();
}
inline void ToolEvent_SFMToolActiveStateChanged::clear_isactive() {
  _impl_.isactive_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ToolEvent_SFMToolActiveStateChanged::_internal_isactive() const {
  return _impl_.isactive_;
}
inline bool ToolEvent_SFMToolActiveStateChanged::isactive() const {
  // @@protoc_insertion_point(field_get:ToolEvent_SFMToolActiveStateChanged.isactive)
  return _internal_isactive();
}
inline void ToolEvent_SFMToolActiveStateChanged::_internal_set_isactive(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.isactive_ = value;
}
inline void ToolEvent_SFMToolActiveStateChanged::set_isactive(bool value) {
  _internal_set_isactive(value);
  // @@protoc_insertion_point(field_set:ToolEvent_SFMToolActiveStateChanged.isactive)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gametoolevents_2eproto
