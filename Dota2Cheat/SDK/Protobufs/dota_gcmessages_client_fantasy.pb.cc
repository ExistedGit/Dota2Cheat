// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_fantasy.proto

#include "dota_gcmessages_client_fantasy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.placement_)*/0u
  , /*decltype(_impl_.earnings_)*/0u} {}
struct CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfo_Results _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal _CMsgDOTAPlayerInfo_Results_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_url_logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_timestamp_)*/0u
  , /*decltype(_impl_.end_timestamp_)*/0u
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfo_AuditEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal _CMsgDOTAPlayerInfo_AuditEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.audit_entries_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sponsor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_url_logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_abbreviation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.fantasy_role_)*/0
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.is_locked_)*/false
  , /*decltype(_impl_.is_pro_)*/false
  , /*decltype(_impl_.total_earnings_)*/0u} {}
struct CMsgDOTAPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPlayerInfoDefaultTypeInternal _CMsgDOTAPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_infos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTAPlayerInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerInfoListDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPlayerInfoListDefaultTypeInternal _CMsgDOTAPlayerInfoList_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamRoster::CMsgDOTATeamRoster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.member_account_ids_)*/{}
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.coach_account_id_)*/0u} {}
struct CMsgDOTATeamRosterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamRosterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamRosterDefaultTypeInternal() {}
  union {
    CMsgDOTATeamRoster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamRosterDefaultTypeInternal _CMsgDOTATeamRoster_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.percent_)*/0u
  , /*decltype(_impl_.shard_winnings_)*/0} {}
struct CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal() {}
  union {
    CMsgDOTADPCProfileInfo_PredictionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.top_90_finishes_)*/0u
  , /*decltype(_impl_.top_75_finishes_)*/0u
  , /*decltype(_impl_.top_50_finishes_)*/0u
  , /*decltype(_impl_.shard_winnings_)*/0u} {}
struct CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal() {}
  union {
    CMsgDOTADPCProfileInfo_FantasyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disabled_notifications_)*/{}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.prediction_info_)*/nullptr
  , /*decltype(_impl_.fantasy_info_)*/nullptr} {}
struct CMsgDOTADPCProfileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCProfileInfoDefaultTypeInternal() {}
  union {
    CMsgDOTADPCProfileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCProfileInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_.division_)*/0u} {}
struct CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal() {}
  union {
    CMsgDOTALeaderboards_RegionLeaderboard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal _CMsgDOTALeaderboards_RegionLeaderboard_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALeaderboards::CMsgDOTALeaderboards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leaderboards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTALeaderboardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALeaderboardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALeaderboardsDefaultTypeInternal() {}
  union {
    CMsgDOTALeaderboards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALeaderboardsDefaultTypeInternal _CMsgDOTALeaderboards_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.winner_id_)*/0u
  , /*decltype(_impl_.runnerup_id_)*/0u} {}
struct CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportVoteTeamGuess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal _CMsgDOTAPassportVoteTeamGuess_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_index_)*/0
  , /*decltype(_impl_.selection_)*/0u} {}
struct CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportVoteGenericSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal _CMsgDOTAPassportVoteGenericSelection_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.stamp_level_)*/0u} {}
struct CMsgDOTAPassportStampedPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPassportStampedPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPassportStampedPlayerDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportStampedPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPassportStampedPlayerDefaultTypeInternal _CMsgDOTAPassportStampedPlayer_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenge_id_)*/0u} {}
struct CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportPlayerCardChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal _CMsgDOTAPassportPlayerCardChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPassportVote::CMsgDOTAPassportVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.team_votes_)*/{}
  , /*decltype(_impl_.generic_selections_)*/{}
  , /*decltype(_impl_.stamped_players_)*/{}
  , /*decltype(_impl_.player_card_challenges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTAPassportVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPassportVoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPassportVoteDefaultTypeInternal() {}
  union {
    CMsgDOTAPassportVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPassportVoteDefaultTypeInternal _CMsgDOTAPassportVote_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.fantasy_period_)*/4294967295u} {}
struct CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetPlayerCardRosterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_card_item_id_)*/{}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.finalized_)*/false
  , /*decltype(_impl_.percentile_)*/0} {}
struct CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetPlayerCardRosterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.fantasy_period_)*/4294967295u} {}
struct CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestampDefaultTypeInternal() {}
  union {
    CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestampDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterRequest::CMsgClientToGCBatchGetPlayerCardRosterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.league_timestamps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgClientToGCBatchGetPlayerCardRosterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCBatchGetPlayerCardRosterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBatchGetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_card_item_id_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.deprecated_timestamp_)*/0u
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.finalized_)*/false
  , /*decltype(_impl_.percentile_)*/0
  , /*decltype(_impl_.fantasy_period_)*/4294967295u} {}
struct CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponseDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterResponse::CMsgClientToGCBatchGetPlayerCardRosterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgClientToGCBatchGetPlayerCardRosterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCBatchGetPlayerCardRosterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBatchGetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.deprecated_timestamp_)*/0u
  , /*decltype(_impl_.player_card_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.fantasy_period_)*/4294967295u} {}
struct CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetPlayerCardRosterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetPlayerCardRosterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.day_timestamps_)*/{}
  , /*decltype(_impl_.league_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.start_timestamp_)*/0u
  , /*decltype(_impl_.end_timestamp_)*/0u
  , /*decltype(_impl_.status_)*/0} {}
struct CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.league_infos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyDPCLeagueStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_Player::CMsgDOTADPCSearchResults_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal _CMsgDOTADPCSearchResults_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_Team::CMsgDOTADPCSearchResults_Team(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CMsgDOTADPCSearchResults_TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_TeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResults_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCSearchResults_TeamDefaultTypeInternal _CMsgDOTADPCSearchResults_Team_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_League::CMsgDOTADPCSearchResults_League(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults_League _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal _CMsgDOTADPCSearchResults_League_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults::CMsgDOTADPCSearchResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.leagues_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTADPCSearchResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCSearchResultsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSearchResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCSearchResultsDefaultTypeInternal _CMsgDOTADPCSearchResults_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCTeamFavoriteRankings_Team::CMsgDOTADPCTeamFavoriteRankings_Team(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.favorites_)*/0u} {}
struct CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTADPCTeamFavoriteRankings_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTADPCTeamFavoriteRankings::CMsgDOTADPCTeamFavoriteRankings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCTeamFavoriteRankings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_default_instance_;
PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData_Gem::CMsgDotaFantasyCraftingUserData_Gem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.shape_)*/0u
  , /*decltype(_impl_.quality_)*/0u
  , /*decltype(_impl_.stat_)*/0} {}
struct CMsgDotaFantasyCraftingUserData_GemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData_GemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDotaFantasyCraftingUserData_GemDefaultTypeInternal() {}
  union {
    CMsgDotaFantasyCraftingUserData_Gem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDotaFantasyCraftingUserData_GemDefaultTypeInternal _CMsgDotaFantasyCraftingUserData_Gem_default_instance_;
PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData_Tablet::CMsgDotaFantasyCraftingUserData_Tablet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gems_)*/{}
  , /*decltype(_impl_.tablet_id_)*/0u
  , /*decltype(_impl_.tablet_level_)*/0u
  , /*decltype(_impl_.fantasy_role_)*/0
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.prefix_)*/0u
  , /*decltype(_impl_.suffix_)*/0u} {}
struct CMsgDotaFantasyCraftingUserData_TabletDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData_TabletDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDotaFantasyCraftingUserData_TabletDefaultTypeInternal() {}
  union {
    CMsgDotaFantasyCraftingUserData_Tablet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDotaFantasyCraftingUserData_TabletDefaultTypeInternal _CMsgDotaFantasyCraftingUserData_Tablet_default_instance_;
PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData::CMsgDotaFantasyCraftingUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tablets_)*/{}
  , /*decltype(_impl_.available_rolls_)*/{}
  , /*decltype(_impl_.roll_tokens_)*/0u} {}
struct CMsgDotaFantasyCraftingUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDotaFantasyCraftingUserDataDefaultTypeInternal() {}
  union {
    CMsgDotaFantasyCraftingUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDotaFantasyCraftingUserDataDefaultTypeInternal _CMsgDotaFantasyCraftingUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingGetUserData::CMsgClientToGCFantasyCraftingGetUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fantasy_league_)*/0u
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgClientToGCFantasyCraftingGetUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingGetUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFantasyCraftingGetUserDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCFantasyCraftingGetUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFantasyCraftingGetUserDataDefaultTypeInternal _CMsgClientToGCFantasyCraftingGetUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingGetUserDataResponse::CMsgClientToGCFantasyCraftingGetUserDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCFantasyCraftingGetUserDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingGetUserDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFantasyCraftingGetUserDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCFantasyCraftingGetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFantasyCraftingGetUserDataResponseDefaultTypeInternal _CMsgClientToGCFantasyCraftingGetUserDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperation::CMsgClientToGCFantasyCraftingPerformOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fantasy_league_)*/0u
  , /*decltype(_impl_.tablet_id_)*/0u
  , /*decltype(_impl_.extra_data_)*/uint64_t{0u}
  , /*decltype(_impl_.operation_id_)*/0u} {}
struct CMsgClientToGCFantasyCraftingPerformOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFantasyCraftingPerformOperationDefaultTypeInternal() {}
  union {
    CMsgClientToGCFantasyCraftingPerformOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFantasyCraftingPerformOperationDefaultTypeInternal _CMsgClientToGCFantasyCraftingPerformOperation_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prefix_choice_)*/0u
  , /*decltype(_impl_.suffix_choice_)*/0u} {}
struct CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoiceDefaultTypeInternal() {}
  union {
    CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoiceDefaultTypeInternal _CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperationResponse::CMsgClientToGCFantasyCraftingPerformOperationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_choices_)*/{}
  , /*decltype(_impl_.prefix_choices_)*/{}
  , /*decltype(_impl_.suffix_choices_)*/{}
  , /*decltype(_impl_.title_choices_)*/{}
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_.operation_id_)*/0u} {}
struct CMsgClientToGCFantasyCraftingPerformOperationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFantasyCraftingPerformOperationResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCFantasyCraftingPerformOperationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFantasyCraftingPerformOperationResponseDefaultTypeInternal _CMsgClientToGCFantasyCraftingPerformOperationResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientFantasyCraftingDataUpdated::CMsgGCToClientFantasyCraftingDataUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.fantasy_league_)*/0u} {}
struct CMsgGCToClientFantasyCraftingDataUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientFantasyCraftingDataUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientFantasyCraftingDataUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientFantasyCraftingDataUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientFantasyCraftingDataUpdatedDefaultTypeInternal _CMsgGCToClientFantasyCraftingDataUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingDevModifyTablet::CMsgClientToGCFantasyCraftingDevModifyTablet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fantasy_league_)*/0u
  , /*decltype(_impl_.reset_tablet_)*/false
  , /*decltype(_impl_.modify_tokens_)*/0u
  , /*decltype(_impl_.tablet_level_)*/0u} {}
struct CMsgClientToGCFantasyCraftingDevModifyTabletDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingDevModifyTabletDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFantasyCraftingDevModifyTabletDefaultTypeInternal() {}
  union {
    CMsgClientToGCFantasyCraftingDevModifyTablet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFantasyCraftingDevModifyTabletDefaultTypeInternal _CMsgClientToGCFantasyCraftingDevModifyTablet_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingDevModifyTabletResponse::CMsgClientToGCFantasyCraftingDevModifyTabletResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCFantasyCraftingDevModifyTabletResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingDevModifyTabletResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFantasyCraftingDevModifyTabletResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFantasyCraftingDevModifyTabletResponseDefaultTypeInternal _CMsgClientToGCFantasyCraftingDevModifyTabletResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[42];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, _impl_.placement_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_Results, _impl_.earnings_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _impl_.end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _impl_.team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo_AuditEntry, _impl_.team_url_logo_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.fantasy_role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.sponsor_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.is_locked_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.is_pro_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.total_earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.team_url_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.audit_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfo, _impl_.team_abbreviation_),
  8,
  0,
  1,
  9,
  10,
  2,
  3,
  4,
  11,
  12,
  5,
  13,
  ~0u,
  6,
  ~0u,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerInfoList, _impl_.player_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamRoster, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamRoster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamRoster, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamRoster, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamRoster, _impl_.member_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamRoster, _impl_.coach_account_id_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, _impl_.percent_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_PredictionInfo, _impl_.shard_winnings_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _impl_.top_90_finishes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _impl_.top_75_finishes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _impl_.top_50_finishes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo_FantasyInfo, _impl_.shard_winnings_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _impl_.prediction_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _impl_.fantasy_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCProfileInfo, _impl_.disabled_notifications_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, _impl_.division_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards_RegionLeaderboard, _impl_.account_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaderboards, _impl_.leaderboards_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, _impl_.winner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteTeamGuess, _impl_.runnerup_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, _impl_.selection_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVoteGenericSelection, _impl_.selection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportStampedPlayer, _impl_.stamp_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportPlayerCardChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportPlayerCardChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportPlayerCardChallenge, _impl_.challenge_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, _impl_.team_votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, _impl_.generic_selections_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, _impl_.stamped_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPassportVote, _impl_.player_card_challenges_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterRequest, _impl_.fantasy_period_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _impl_.player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _impl_.finalized_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetPlayerCardRosterResponse, _impl_.percentile_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp, _impl_.fantasy_period_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterRequest, _impl_.league_timestamps_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.deprecated_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.finalized_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.percentile_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.fantasy_period_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBatchGetPlayerCardRosterResponse, _impl_.responses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _impl_.deprecated_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _impl_.player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterRequest, _impl_.fantasy_period_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetPlayerCardRosterResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.league_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.day_timestamps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.status_),
  1,
  0,
  2,
  3,
  ~0u,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyDPCLeagueStatus, _impl_.league_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Player, _impl_.real_name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_Team, _impl_.url_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults_League, _impl_.name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSearchResults, _impl_.leagues_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings_Team, _impl_.favorites_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamFavoriteRankings, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Gem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Gem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Gem, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Gem, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Gem, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Gem, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Gem, _impl_.stat_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_.tablet_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_.tablet_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_.fantasy_role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_.prefix_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_.suffix_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData_Tablet, _impl_.gems_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData, _impl_.tablets_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData, _impl_.available_rolls_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaFantasyCraftingUserData, _impl_.roll_tokens_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserData, _impl_.fantasy_league_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserData, _impl_.account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserDataResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingGetUserDataResponse, _impl_.user_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperation, _impl_.fantasy_league_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperation, _impl_.tablet_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperation, _impl_.operation_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperation, _impl_.extra_data_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice, _impl_.prefix_choice_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice, _impl_.suffix_choice_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.operation_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.player_choices_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.prefix_choices_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.suffix_choices_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.title_choices_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFantasyCraftingDataUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFantasyCraftingDataUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFantasyCraftingDataUpdated, _impl_.fantasy_league_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFantasyCraftingDataUpdated, _impl_.user_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTablet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTablet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTablet, _impl_.fantasy_league_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTablet, _impl_.reset_tablet_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTablet, _impl_.modify_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTablet, _impl_.tablet_level_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse, _impl_.response_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgDOTAPlayerInfo_Results)},
  { 12, 24, -1, sizeof(::CMsgDOTAPlayerInfo_AuditEntry)},
  { 30, 52, -1, sizeof(::CMsgDOTAPlayerInfo)},
  { 68, -1, -1, sizeof(::CMsgDOTAPlayerInfoList)},
  { 75, 85, -1, sizeof(::CMsgDOTATeamRoster)},
  { 89, 97, -1, sizeof(::CMsgDOTADPCProfileInfo_PredictionInfo)},
  { 99, 109, -1, sizeof(::CMsgDOTADPCProfileInfo_FantasyInfo)},
  { 113, 123, -1, sizeof(::CMsgDOTADPCProfileInfo)},
  { 127, 135, -1, sizeof(::CMsgDOTALeaderboards_RegionLeaderboard)},
  { 137, -1, -1, sizeof(::CMsgDOTALeaderboards)},
  { 144, 153, -1, sizeof(::CMsgDOTAPassportVoteTeamGuess)},
  { 156, 164, -1, sizeof(::CMsgDOTAPassportVoteGenericSelection)},
  { 166, 174, -1, sizeof(::CMsgDOTAPassportStampedPlayer)},
  { 176, 183, -1, sizeof(::CMsgDOTAPassportPlayerCardChallenge)},
  { 184, -1, -1, sizeof(::CMsgDOTAPassportVote)},
  { 194, 202, -1, sizeof(::CMsgClientToGCGetPlayerCardRosterRequest)},
  { 204, 215, -1, sizeof(::CMsgClientToGCGetPlayerCardRosterResponse)},
  { 220, 228, -1, sizeof(::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp)},
  { 230, -1, -1, sizeof(::CMsgClientToGCBatchGetPlayerCardRosterRequest)},
  { 237, 251, -1, sizeof(::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse)},
  { 259, -1, -1, sizeof(::CMsgClientToGCBatchGetPlayerCardRosterResponse)},
  { 266, 278, -1, sizeof(::CMsgClientToGCSetPlayerCardRosterRequest)},
  { 284, 291, -1, sizeof(::CMsgClientToGCSetPlayerCardRosterResponse)},
  { 292, 304, -1, sizeof(::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo)},
  { 310, -1, -1, sizeof(::CMsgDOTAFantasyDPCLeagueStatus)},
  { 317, 326, -1, sizeof(::CMsgDOTADPCSearchResults_Player)},
  { 329, 338, -1, sizeof(::CMsgDOTADPCSearchResults_Team)},
  { 341, 349, -1, sizeof(::CMsgDOTADPCSearchResults_League)},
  { 351, -1, -1, sizeof(::CMsgDOTADPCSearchResults)},
  { 360, 368, -1, sizeof(::CMsgDOTADPCTeamFavoriteRankings_Team)},
  { 370, -1, -1, sizeof(::CMsgDOTADPCTeamFavoriteRankings)},
  { 377, 388, -1, sizeof(::CMsgDotaFantasyCraftingUserData_Gem)},
  { 393, 406, -1, sizeof(::CMsgDotaFantasyCraftingUserData_Tablet)},
  { 413, 422, -1, sizeof(::CMsgDotaFantasyCraftingUserData)},
  { 425, 433, -1, sizeof(::CMsgClientToGCFantasyCraftingGetUserData)},
  { 435, 443, -1, sizeof(::CMsgClientToGCFantasyCraftingGetUserDataResponse)},
  { 445, 455, -1, sizeof(::CMsgClientToGCFantasyCraftingPerformOperation)},
  { 459, 467, -1, sizeof(::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice)},
  { 469, 481, -1, sizeof(::CMsgClientToGCFantasyCraftingPerformOperationResponse)},
  { 487, 495, -1, sizeof(::CMsgGCToClientFantasyCraftingDataUpdated)},
  { 497, 507, -1, sizeof(::CMsgClientToGCFantasyCraftingDevModifyTablet)},
  { 511, 518, -1, sizeof(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgDOTAPlayerInfo_Results_default_instance_._instance,
  &::_CMsgDOTAPlayerInfo_AuditEntry_default_instance_._instance,
  &::_CMsgDOTAPlayerInfo_default_instance_._instance,
  &::_CMsgDOTAPlayerInfoList_default_instance_._instance,
  &::_CMsgDOTATeamRoster_default_instance_._instance,
  &::_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_._instance,
  &::_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_._instance,
  &::_CMsgDOTADPCProfileInfo_default_instance_._instance,
  &::_CMsgDOTALeaderboards_RegionLeaderboard_default_instance_._instance,
  &::_CMsgDOTALeaderboards_default_instance_._instance,
  &::_CMsgDOTAPassportVoteTeamGuess_default_instance_._instance,
  &::_CMsgDOTAPassportVoteGenericSelection_default_instance_._instance,
  &::_CMsgDOTAPassportStampedPlayer_default_instance_._instance,
  &::_CMsgDOTAPassportPlayerCardChallenge_default_instance_._instance,
  &::_CMsgDOTAPassportVote_default_instance_._instance,
  &::_CMsgClientToGCGetPlayerCardRosterRequest_default_instance_._instance,
  &::_CMsgClientToGCGetPlayerCardRosterResponse_default_instance_._instance,
  &::_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp_default_instance_._instance,
  &::_CMsgClientToGCBatchGetPlayerCardRosterRequest_default_instance_._instance,
  &::_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse_default_instance_._instance,
  &::_CMsgClientToGCBatchGetPlayerCardRosterResponse_default_instance_._instance,
  &::_CMsgClientToGCSetPlayerCardRosterRequest_default_instance_._instance,
  &::_CMsgClientToGCSetPlayerCardRosterResponse_default_instance_._instance,
  &::_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_._instance,
  &::_CMsgDOTAFantasyDPCLeagueStatus_default_instance_._instance,
  &::_CMsgDOTADPCSearchResults_Player_default_instance_._instance,
  &::_CMsgDOTADPCSearchResults_Team_default_instance_._instance,
  &::_CMsgDOTADPCSearchResults_League_default_instance_._instance,
  &::_CMsgDOTADPCSearchResults_default_instance_._instance,
  &::_CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_._instance,
  &::_CMsgDOTADPCTeamFavoriteRankings_default_instance_._instance,
  &::_CMsgDotaFantasyCraftingUserData_Gem_default_instance_._instance,
  &::_CMsgDotaFantasyCraftingUserData_Tablet_default_instance_._instance,
  &::_CMsgDotaFantasyCraftingUserData_default_instance_._instance,
  &::_CMsgClientToGCFantasyCraftingGetUserData_default_instance_._instance,
  &::_CMsgClientToGCFantasyCraftingGetUserDataResponse_default_instance_._instance,
  &::_CMsgClientToGCFantasyCraftingPerformOperation_default_instance_._instance,
  &::_CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice_default_instance_._instance,
  &::_CMsgClientToGCFantasyCraftingPerformOperationResponse_default_instance_._instance,
  &::_CMsgGCToClientFantasyCraftingDataUpdated_default_instance_._instance,
  &::_CMsgClientToGCFantasyCraftingDevModifyTablet_default_instance_._instance,
  &::_CMsgClientToGCFantasyCraftingDevModifyTabletResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5ffantasy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$dota_gcmessages_client_fantasy.proto\032\027"
  "dota_shared_enums.proto\"\205\005\n\022CMsgDOTAPlay"
  "erInfo\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t"
  "\022\024\n\014country_code\030\003 \001(\t\022<\n\014fantasy_role\030\004"
  " \001(\0162\016.Fantasy_Roles:\026FANTASY_ROLE_UNDEF"
  "INED\022\017\n\007team_id\030\005 \001(\r\022\021\n\tteam_name\030\006 \001(\t"
  "\022\020\n\010team_tag\030\007 \001(\t\022\017\n\007sponsor\030\010 \001(\t\022\021\n\ti"
  "s_locked\030\t \001(\010\022\016\n\006is_pro\030\n \001(\010\022\021\n\treal_n"
  "ame\030\013 \001(\t\022\026\n\016total_earnings\030\r \001(\r\022,\n\007res"
  "ults\030\016 \003(\0132\033.CMsgDOTAPlayerInfo.Results\022"
  "\025\n\rteam_url_logo\030\017 \001(\t\0225\n\raudit_entries\030"
  "\020 \003(\0132\036.CMsgDOTAPlayerInfo.AuditEntry\022\031\n"
  "\021team_abbreviation\030\021 \001(\t\032A\n\007Results\022\021\n\tl"
  "eague_id\030\001 \001(\r\022\021\n\tplacement\030\002 \001(\r\022\020\n\010ear"
  "nings\030\003 \001(\r\032\211\001\n\nAuditEntry\022\027\n\017start_time"
  "stamp\030\001 \001(\r\022\025\n\rend_timestamp\030\002 \001(\r\022\017\n\007te"
  "am_id\030\003 \001(\r\022\021\n\tteam_name\030\004 \001(\t\022\020\n\010team_t"
  "ag\030\005 \001(\t\022\025\n\rteam_url_logo\030\006 \001(\t\"C\n\026CMsgD"
  "OTAPlayerInfoList\022)\n\014player_infos\030\001 \003(\0132"
  "\023.CMsgDOTAPlayerInfo\"n\n\022CMsgDOTATeamRost"
  "er\022\021\n\ttimestamp\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\032"
  "\n\022member_account_ids\030\003 \003(\r\022\030\n\020coach_acco"
  "unt_id\030\004 \001(\r\"\213\003\n\026CMsgDOTADPCProfileInfo\022"
  "(\n\013player_info\030\001 \001(\0132\023.CMsgDOTAPlayerInf"
  "o\022\?\n\017prediction_info\030\002 \001(\0132&.CMsgDOTADPC"
  "ProfileInfo.PredictionInfo\0229\n\014fantasy_in"
  "fo\030\003 \001(\0132#.CMsgDOTADPCProfileInfo.Fantas"
  "yInfo\022\036\n\026disabled_notifications\030\004 \003(\r\0329\n"
  "\016PredictionInfo\022\017\n\007percent\030\001 \001(\r\022\026\n\016shar"
  "d_winnings\030\002 \001(\005\032p\n\013FantasyInfo\022\027\n\017top_9"
  "0_finishes\030\001 \001(\r\022\027\n\017top_75_finishes\030\002 \001("
  "\r\022\027\n\017top_50_finishes\030\003 \001(\r\022\026\n\016shard_winn"
  "ings\030\004 \001(\r\"\221\001\n\024CMsgDOTALeaderboards\022=\n\014l"
  "eaderboards\030\002 \003(\0132\'.CMsgDOTALeaderboards"
  ".RegionLeaderboard\032:\n\021RegionLeaderboard\022"
  "\020\n\010division\030\001 \001(\r\022\023\n\013account_ids\030\002 \003(\r\"Z"
  "\n\035CMsgDOTAPassportVoteTeamGuess\022\021\n\tleagu"
  "e_id\030\001 \001(\r\022\021\n\twinner_id\030\002 \001(\r\022\023\n\013runneru"
  "p_id\030\003 \001(\r\"\221\001\n$CMsgDOTAPassportVoteGener"
  "icSelection\022V\n\017selection_index\030\001 \001(\0162\".D"
  "OTA_2013PassportSelectionIndices:\031PP13_S"
  "EL_ALLSTAR_PLAYER_0\022\021\n\tselection\030\002 \001(\r\"F"
  "\n\035CMsgDOTAPassportStampedPlayer\022\020\n\010steam"
  "_id\030\001 \001(\004\022\023\n\013stamp_level\030\002 \001(\r\";\n#CMsgDO"
  "TAPassportPlayerCardChallenge\022\024\n\014challen"
  "ge_id\030\001 \001(\r\"\214\002\n\024CMsgDOTAPassportVote\0222\n\n"
  "team_votes\030\001 \003(\0132\036.CMsgDOTAPassportVoteT"
  "eamGuess\022A\n\022generic_selections\030\002 \003(\0132%.C"
  "MsgDOTAPassportVoteGenericSelection\0227\n\017s"
  "tamped_players\030\003 \003(\0132\036.CMsgDOTAPassportS"
  "tampedPlayer\022D\n\026player_card_challenges\030\004"
  " \003(\0132$.CMsgDOTAPassportPlayerCardChallen"
  "ge\"a\n(CMsgClientToGCGetPlayerCardRosterR"
  "equest\022\021\n\tleague_id\030\001 \001(\r\022\"\n\016fantasy_per"
  "iod\030\003 \001(\r:\n4294967295\"\262\002\n)CMsgClientToGC"
  "GetPlayerCardRosterResponse\022J\n\006result\030\001 "
  "\001(\01621.CMsgClientToGCGetPlayerCardRosterR"
  "esponse.Result:\007SUCCESS\022\033\n\023player_card_i"
  "tem_id\030\002 \003(\004\022\r\n\005score\030\003 \001(\002\022\021\n\tfinalized"
  "\030\004 \001(\010\022\022\n\npercentile\030\005 \001(\002\"f\n\006Result\022\013\n\007"
  "SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\033\n\027ERRO"
  "R_INVALID_LEAGUE_ID\020\002\022\033\n\027ERROR_INVALID_T"
  "IMESTAMP\020\003\"\324\001\n-CMsgClientToGCBatchGetPla"
  "yerCardRosterRequest\022Y\n\021league_timestamp"
  "s\030\001 \003(\0132>.CMsgClientToGCBatchGetPlayerCa"
  "rdRosterRequest.LeagueTimestamp\032H\n\017Leagu"
  "eTimestamp\022\021\n\tleague_id\030\001 \001(\r\022\"\n\016fantasy"
  "_period\030\003 \001(\r:\n4294967295\"\367\003\n.CMsgClient"
  "ToGCBatchGetPlayerCardRosterResponse\022Q\n\t"
  "responses\030\001 \003(\0132>.CMsgClientToGCBatchGet"
  "PlayerCardRosterResponse.RosterResponse\032"
  "\211\002\n\016RosterResponse\022\021\n\tleague_id\030\001 \001(\r\022\034\n"
  "\024deprecated_timestamp\030\002 \001(\r\022O\n\006result\030\003 "
  "\001(\01626.CMsgClientToGCBatchGetPlayerCardRo"
  "sterResponse.Result:\007SUCCESS\022\033\n\023player_c"
  "ard_item_id\030\004 \003(\004\022\r\n\005score\030\005 \001(\002\022\021\n\tfina"
  "lized\030\006 \001(\010\022\022\n\npercentile\030\007 \001(\002\022\"\n\016fanta"
  "sy_period\030\010 \001(\r:\n4294967295\"f\n\006Result\022\013\n"
  "\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\033\n\027ERR"
  "OR_INVALID_LEAGUE_ID\020\002\022\033\n\027ERROR_INVALID_"
  "TIMESTAMP\020\003\"\274\001\n(CMsgClientToGCSetPlayerC"
  "ardRosterRequest\022\021\n\tleague_id\030\001 \001(\r\022\034\n\024d"
  "eprecated_timestamp\030\002 \001(\r\022\014\n\004slot\030\003 \001(\r\022"
  "\033\n\023player_card_item_id\030\004 \001(\004\022\020\n\010event_id"
  "\030\005 \001(\r\022\"\n\016fantasy_period\030\006 \001(\r:\n42949672"
  "95\"\254\003\n)CMsgClientToGCSetPlayerCardRoster"
  "Response\022J\n\006result\030\001 \001(\01621.CMsgClientToG"
  "CSetPlayerCardRosterResponse.Result:\007SUC"
  "CESS\"\262\002\n\006Result\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UN"
  "SPECIFIED\020\001\022\033\n\027ERROR_INVALID_LEAGUE_ID\020\002"
  "\022\033\n\027ERROR_INVALID_TIMESTAMP\020\003\022\037\n\033ERROR_P"
  "LAYER_CARD_NOT_OWNED\020\004\022\026\n\022ERROR_INVALID_"
  "SLOT\020\005\022\032\n\026ERROR_FAILED_CARD_INFO\020\006\022\033\n\027ER"
  "ROR_ACCOUNT_DUPLICATE\020\007\022\032\n\026ERROR_LOCKED_"
  "TIMESTAMP\020\010\022#\n\037ERROR_INVALID_LEAGUE_FOR_"
  "PERIOD\020\t\022\027\n\023ERROR_INVALID_EVENT\020\n\"\351\002\n\036CM"
  "sgDOTAFantasyDPCLeagueStatus\022@\n\014league_i"
  "nfos\030\001 \003(\0132*.CMsgDOTAFantasyDPCLeagueSta"
  "tus.LeagueInfo\032\302\001\n\nLeagueInfo\022\021\n\tleague_"
  "id\030\001 \001(\r\022\023\n\013league_name\030\002 \001(\t\022\027\n\017start_t"
  "imestamp\030\003 \001(\r\022\025\n\rend_timestamp\030\004 \001(\r\022\026\n"
  "\016day_timestamps\030\005 \003(\r\022D\n\006status\030\010 \001(\0162-."
  "CMsgDOTAFantasyDPCLeagueStatus.ERosterSt"
  "atus:\005UNSET\"@\n\rERosterStatus\022\t\n\005UNSET\020\000\022"
  "\013\n\007PARTIAL\020\001\022\010\n\004FULL\020\002\022\r\n\tCONCLUDED\020\003\"\341\003"
  "\n\030CMsgDOTADPCSearchResults\0221\n\007players\030\001 "
  "\003(\0132 .CMsgDOTADPCSearchResults.Player\022-\n"
  "\005teams\030\002 \003(\0132\036.CMsgDOTADPCSearchResults."
  "Team\0221\n\007leagues\030\003 \003(\0132 .CMsgDOTADPCSearc"
  "hResults.League\0325\n\006Player\022\n\n\002id\030\001 \001(\r\022\014\n"
  "\004name\030\002 \001(\t\022\021\n\treal_name\030\003 \001(\t\032-\n\004Team\022\n"
  "\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\032\"\n"
  "\006League\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"\245\001\n\025ES"
  "earchResultsDesired\022#\n\037k_ESearchResultsD"
  "esired_Players\020\001\022!\n\035k_ESearchResultsDesi"
  "red_Teams\020\002\022#\n\037k_ESearchResultsDesired_L"
  "eagues\020\004\022\037\n\033k_ESearchResultsDesired_All\020"
  "\007\"\203\001\n\037CMsgDOTADPCTeamFavoriteRankings\0224\n"
  "\005teams\030\001 \003(\0132%.CMsgDOTADPCTeamFavoriteRa"
  "nkings.Team\032*\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\021\n\t"
  "favorites\030\002 \001(\r\"\210\004\n\037CMsgDotaFantasyCraft"
  "ingUserData\0228\n\007tablets\030\001 \003(\0132\'.CMsgDotaF"
  "antasyCraftingUserData.Tablet\022\027\n\017availab"
  "le_rolls\030\002 \003(\r\022\023\n\013roll_tokens\030\003 \001(\r\032\242\001\n\003"
  "Gem\0226\n\004type\030\001 \001(\0162\021.Fantasy_Gem_Type:\025FA"
  "NTASY_GEM_TYPE_RUBY\022\014\n\004slot\030\002 \001(\r\022\r\n\005sha"
  "pe\030\003 \001(\r\022\017\n\007quality\030\004 \001(\r\0225\n\004stat\030\005 \001(\0162"
  "\020.Fantasy_Scoring:\025FANTASY_SCORING_KILLS"
  "\032\327\001\n\006Tablet\022\021\n\ttablet_id\030\001 \001(\r\022\024\n\014tablet"
  "_level\030\002 \001(\r\022<\n\014fantasy_role\030\003 \001(\0162\016.Fan"
  "tasy_Roles:\026FANTASY_ROLE_UNDEFINED\022\022\n\nac"
  "count_id\030\004 \001(\r\022\016\n\006prefix\030\005 \001(\r\022\016\n\006suffix"
  "\030\006 \001(\r\0222\n\004gems\030\007 \003(\0132$.CMsgDotaFantasyCr"
  "aftingUserData.Gem\"V\n(CMsgClientToGCFant"
  "asyCraftingGetUserData\022\026\n\016fantasy_league"
  "\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\"\302\002\n0CMsgClien"
  "tToGCFantasyCraftingGetUserDataResponse\022"
  "_\n\010response\030\001 \001(\0162;.CMsgClientToGCFantas"
  "yCraftingGetUserDataResponse.EResponse:\020"
  "k_eInternalError\0223\n\tuser_data\030\002 \001(\0132 .CM"
  "sgDotaFantasyCraftingUserData\"x\n\tERespon"
  "se\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess\020\001"
  "\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_e"
  "Timeout\020\004\022\024\n\020k_eInvalidLeague\020\005\"\204\001\n-CMsg"
  "ClientToGCFantasyCraftingPerformOperatio"
  "n\022\026\n\016fantasy_league\030\001 \001(\r\022\021\n\ttablet_id\030\002"
  " \001(\r\022\024\n\014operation_id\030\003 \001(\r\022\022\n\nextra_data"
  "\030\004 \001(\004\"\260\004\n5CMsgClientToGCFantasyCrafting"
  "PerformOperationResponse\022d\n\010response\030\001 \001"
  "(\0162@.CMsgClientToGCFantasyCraftingPerfor"
  "mOperationResponse.EResponse:\020k_eInterna"
  "lError\022\024\n\014operation_id\030\002 \001(\r\022\026\n\016player_c"
  "hoices\030\003 \003(\r\022\026\n\016prefix_choices\030\004 \003(\r\022\026\n\016"
  "suffix_choices\030\005 \003(\r\022Y\n\rtitle_choices\030\006 "
  "\003(\0132B.CMsgClientToGCFantasyCraftingPerfo"
  "rmOperationResponse.TitleChoice\032;\n\013Title"
  "Choice\022\025\n\rprefix_choice\030\001 \001(\r\022\025\n\rsuffix_"
  "choice\030\002 \001(\r\"\232\001\n\tEResponse\022\024\n\020k_eInterna"
  "lError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002"
  "\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\024\n\020k_e"
  "InvalidLeague\020\005\022\017\n\013k_eNoTokens\020\006\022\017\n\013k_eM"
  "oreInfo\020\007\"w\n(CMsgGCToClientFantasyCrafti"
  "ngDataUpdated\022\026\n\016fantasy_league\030\001 \001(\r\0223\n"
  "\tuser_data\030\002 \001(\0132 .CMsgDotaFantasyCrafti"
  "ngUserData\"\211\001\n,CMsgClientToGCFantasyCraf"
  "tingDevModifyTablet\022\026\n\016fantasy_league\030\001 "
  "\001(\r\022\024\n\014reset_tablet\030\002 \001(\010\022\025\n\rmodify_toke"
  "ns\030\003 \001(\r\022\024\n\014tablet_level\030\004 \001(\r\"\225\002\n4CMsgC"
  "lientToGCFantasyCraftingDevModifyTabletR"
  "esponse\022c\n\010response\030\001 \001(\0162\?.CMsgClientTo"
  "GCFantasyCraftingDevModifyTabletResponse"
  ".EResponse:\020k_eInternalError\"x\n\tERespons"
  "e\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess\020\001\022"
  "\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eT"
  "imeout\020\004\022\024\n\020k_eInvalidLeague\020\005*\243\025\n!DOTA_"
  "2013PassportSelectionIndices\022\035\n\031PP13_SEL"
  "_ALLSTAR_PLAYER_0\020\000\022\035\n\031PP13_SEL_ALLSTAR_"
  "PLAYER_1\020\001\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_2\020"
  "\002\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_3\020\003\022\035\n\031PP13"
  "_SEL_ALLSTAR_PLAYER_4\020\004\022\035\n\031PP13_SEL_ALLS"
  "TAR_PLAYER_5\020\005\022\035\n\031PP13_SEL_ALLSTAR_PLAYE"
  "R_6\020\006\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_7\020\007\022\035\n\031"
  "PP13_SEL_ALLSTAR_PLAYER_8\020\010\022\035\n\031PP13_SEL_"
  "ALLSTAR_PLAYER_9\020\t\022\034\n\030PP13_SEL_QUALPRED_"
  "WEST_0\020\n\022\034\n\030PP13_SEL_QUALPRED_WEST_1\020\013\022\034"
  "\n\030PP13_SEL_QUALPRED_WEST_2\020\014\022\034\n\030PP13_SEL"
  "_QUALPRED_WEST_3\020\r\022\034\n\030PP13_SEL_QUALPRED_"
  "WEST_4\020\016\022\034\n\030PP13_SEL_QUALPRED_WEST_5\020\017\022\034"
  "\n\030PP13_SEL_QUALPRED_WEST_6\020\020\022\034\n\030PP13_SEL"
  "_QUALPRED_WEST_7\020\021\022\034\n\030PP13_SEL_QUALPRED_"
  "WEST_8\020\022\022\034\n\030PP13_SEL_QUALPRED_WEST_9\020\023\022\035"
  "\n\031PP13_SEL_QUALPRED_WEST_10\020\024\022\035\n\031PP13_SE"
  "L_QUALPRED_WEST_11\020\025\022\035\n\031PP13_SEL_QUALPRE"
  "D_WEST_12\020\026\022\035\n\031PP13_SEL_QUALPRED_WEST_13"
  "\020\027\022\035\n\031PP13_SEL_QUALPRED_WEST_14\020\030\022\034\n\030PP1"
  "3_SEL_QUALPRED_EAST_0\020\031\022\034\n\030PP13_SEL_QUAL"
  "PRED_EAST_1\020\032\022\034\n\030PP13_SEL_QUALPRED_EAST_"
  "2\020\033\022\034\n\030PP13_SEL_QUALPRED_EAST_3\020\034\022\034\n\030PP1"
  "3_SEL_QUALPRED_EAST_4\020\035\022\034\n\030PP13_SEL_QUAL"
  "PRED_EAST_5\020\036\022\034\n\030PP13_SEL_QUALPRED_EAST_"
  "6\020\037\022\034\n\030PP13_SEL_QUALPRED_EAST_7\020 \022\034\n\030PP1"
  "3_SEL_QUALPRED_EAST_8\020!\022\034\n\030PP13_SEL_QUAL"
  "PRED_EAST_9\020\"\022\035\n\031PP13_SEL_QUALPRED_EAST_"
  "10\020#\022\035\n\031PP13_SEL_QUALPRED_EAST_11\020$\022\035\n\031P"
  "P13_SEL_QUALPRED_EAST_12\020%\022\035\n\031PP13_SEL_Q"
  "UALPRED_EAST_13\020&\022\035\n\031PP13_SEL_QUALPRED_E"
  "AST_14\020\'\022\031\n\025PP13_SEL_TEAMCUP_TEAM\020(\022\033\n\027P"
  "P13_SEL_TEAMCUP_PLAYER\020)\022\036\n\032PP13_SEL_TEA"
  "MCUP_TEAM_LOCK\020*\022 \n\034PP13_SEL_TEAMCUP_PLA"
  "YER_LOCK\020+\022\030\n\024PP13_SEL_EVENTPRED_0\020,\022\030\n\024"
  "PP13_SEL_EVENTPRED_1\020-\022\030\n\024PP13_SEL_EVENT"
  "PRED_2\020.\022\030\n\024PP13_SEL_EVENTPRED_3\020/\022\030\n\024PP"
  "13_SEL_EVENTPRED_4\0200\022\030\n\024PP13_SEL_EVENTPR"
  "ED_5\0201\022\030\n\024PP13_SEL_EVENTPRED_6\0202\022\030\n\024PP13"
  "_SEL_EVENTPRED_7\0203\022\030\n\024PP13_SEL_EVENTPRED"
  "_8\0204\022\030\n\024PP13_SEL_EVENTPRED_9\0205\022\031\n\025PP13_S"
  "EL_EVENTPRED_10\0206\022\031\n\025PP13_SEL_EVENTPRED_"
  "11\0207\022\031\n\025PP13_SEL_EVENTPRED_12\0208\022\031\n\025PP13_"
  "SEL_EVENTPRED_13\0209\022\031\n\025PP13_SEL_EVENTPRED"
  "_14\020:\022\031\n\025PP13_SEL_EVENTPRED_15\020;\022\031\n\025PP13"
  "_SEL_EVENTPRED_16\020<\022\031\n\025PP13_SEL_EVENTPRE"
  "D_17\020=\022\031\n\025PP13_SEL_EVENTPRED_18\020>\022\031\n\025PP1"
  "3_SEL_EVENTPRED_19\020\?\022\031\n\025PP13_SEL_EVENTPR"
  "ED_20\020@\022\031\n\025PP13_SEL_EVENTPRED_21\020A\022\031\n\025PP"
  "13_SEL_EVENTPRED_22\020B\022\031\n\025PP13_SEL_EVENTP"
  "RED_23\020C\022\031\n\025PP13_SEL_EVENTPRED_24\020D\022\031\n\025P"
  "P13_SEL_EVENTPRED_25\020E\022\031\n\025PP13_SEL_EVENT"
  "PRED_26\020F\022\031\n\025PP13_SEL_EVENTPRED_27\020G\022\031\n\025"
  "PP13_SEL_EVENTPRED_28\020H\022\031\n\025PP13_SEL_EVEN"
  "TPRED_29\020I\022\031\n\025PP13_SEL_EVENTPRED_30\020J\022\031\n"
  "\025PP13_SEL_EVENTPRED_31\020K\022\031\n\025PP13_SEL_EVE"
  "NTPRED_32\020L\022\031\n\025PP13_SEL_EVENTPRED_33\020M\022\031"
  "\n\025PP13_SEL_EVENTPRED_34\020N\022\031\n\025PP13_SEL_EV"
  "ENTPRED_35\020O\022\031\n\025PP13_SEL_EVENTPRED_36\020P\022"
  "\031\n\025PP13_SEL_EVENTPRED_37\020Q\022\031\n\025PP13_SEL_E"
  "VENTPRED_38\020R\022\031\n\025PP13_SEL_EVENTPRED_39\020S"
  "\022\031\n\025PP13_SEL_EVENTPRED_40\020T\022\031\n\025PP13_SEL_"
  "EVENTPRED_41\020U\022\031\n\025PP13_SEL_EVENTPRED_42\020"
  "V\022\031\n\025PP13_SEL_EVENTPRED_43\020W\022\023\n\017PP13_SEL"
  "_SOLO_0\020X\022\023\n\017PP13_SEL_SOLO_1\020Y\022\023\n\017PP13_S"
  "EL_SOLO_2\020Z\022\023\n\017PP13_SEL_SOLO_3\020[\022\023\n\017PP13"
  "_SEL_SOLO_4\020\\\022\023\n\017PP13_SEL_SOLO_5\020]\022\023\n\017PP"
  "13_SEL_SOLO_6\020^\022\023\n\017PP13_SEL_SOLO_7\020_"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto = {
    false, false, 9716, descriptor_table_protodef_dota_5fgcmessages_5fclient_5ffantasy_2eproto,
    "dota_gcmessages_client_fantasy.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_deps, 1, 42,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5ffantasy_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[0];
}
bool CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::SUCCESS;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MIN;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MAX;
constexpr int CMsgClientToGCGetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[1];
}
bool CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse::SUCCESS;
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse::Result_MIN;
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse::Result_MAX;
constexpr int CMsgClientToGCBatchGetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[2];
}
bool CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::SUCCESS;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_PLAYER_CARD_NOT_OWNED;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_SLOT;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_FAILED_CARD_INFO;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_ACCOUNT_DUPLICATE;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_LOCKED_TIMESTAMP;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_FOR_PERIOD;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_EVENT;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MIN;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MAX;
constexpr int CMsgClientToGCSetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[3];
}
bool CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::UNSET;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::PARTIAL;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::FULL;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::CONCLUDED;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_MIN;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_MAX;
constexpr int CMsgDOTAFantasyDPCLeagueStatus::ERosterStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[4];
}
bool CMsgDOTADPCSearchResults_ESearchResultsDesired_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_Players;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_Teams;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_Leagues;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::k_ESearchResultsDesired_All;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::ESearchResultsDesired_MIN;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults::ESearchResultsDesired_MAX;
constexpr int CMsgDOTADPCSearchResults::ESearchResultsDesired_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[5];
}
bool CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::k_eInternalError;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::k_eSuccess;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::k_eTooBusy;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::k_eDisabled;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::k_eTimeout;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::k_eInvalidLeague;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::EResponse_MIN;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCFantasyCraftingGetUserDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[6];
}
bool CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eInternalError;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eSuccess;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eTooBusy;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eDisabled;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eTimeout;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eInvalidLeague;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eNoTokens;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::k_eMoreInfo;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::EResponse_MIN;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::EResponse_MAX;
constexpr int CMsgClientToGCFantasyCraftingPerformOperationResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[7];
}
bool CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::k_eInternalError;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::k_eSuccess;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::k_eTooBusy;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::k_eDisabled;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::k_eTimeout;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::k_eInvalidLeague;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::EResponse_MIN;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::EResponse_MAX;
constexpr int CMsgClientToGCFantasyCraftingDevModifyTabletResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ffantasy_2eproto[8];
}
bool DOTA_2013PassportSelectionIndices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgDOTAPlayerInfo_Results::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPlayerInfo_Results>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_placement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfo.Results)
}
CMsgDOTAPlayerInfo_Results::CMsgDOTAPlayerInfo_Results(const CMsgDOTAPlayerInfo_Results& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPlayerInfo_Results* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.placement_){}
    , decltype(_impl_.earnings_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.earnings_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.earnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfo.Results)
}

inline void CMsgDOTAPlayerInfo_Results::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.placement_){0u}
    , decltype(_impl_.earnings_){0u}
  };
}

CMsgDOTAPlayerInfo_Results::~CMsgDOTAPlayerInfo_Results() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfo.Results)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPlayerInfo_Results::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAPlayerInfo_Results::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPlayerInfo_Results::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfo.Results)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.earnings_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.earnings_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfo_Results::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 placement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_placement(&has_bits);
          _impl_.placement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 earnings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_earnings(&has_bits);
          _impl_.earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPlayerInfo_Results::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfo.Results)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 placement = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_placement(), target);
  }

  // optional uint32 earnings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_earnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfo.Results)
  return target;
}

size_t CMsgDOTAPlayerInfo_Results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfo.Results)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 placement = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_placement());
    }

    // optional uint32 earnings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_earnings());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPlayerInfo_Results::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPlayerInfo_Results::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPlayerInfo_Results::GetClassData() const { return &_class_data_; }


void CMsgDOTAPlayerInfo_Results::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPlayerInfo_Results*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPlayerInfo_Results&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfo.Results)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.placement_ = from._impl_.placement_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.earnings_ = from._impl_.earnings_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPlayerInfo_Results::CopyFrom(const CMsgDOTAPlayerInfo_Results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfo.Results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo_Results::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo_Results::InternalSwap(CMsgDOTAPlayerInfo_Results* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_Results, _impl_.earnings_)
      + sizeof(CMsgDOTAPlayerInfo_Results::_impl_.earnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_Results, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfo_Results::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[0]);
}

// ===================================================================

class CMsgDOTAPlayerInfo_AuditEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPlayerInfo_AuditEntry>()._impl_._has_bits_);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_url_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfo.AuditEntry)
}
CMsgDOTAPlayerInfo_AuditEntry::CMsgDOTAPlayerInfo_AuditEntry(const CMsgDOTAPlayerInfo_AuditEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPlayerInfo_AuditEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.team_url_logo_){}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.end_timestamp_){}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_tag()) {
    _this->_impl_.team_tag_.Set(from._internal_team_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_url_logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_url_logo()) {
    _this->_impl_.team_url_logo_.Set(from._internal_team_url_logo(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_timestamp_, &from._impl_.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfo.AuditEntry)
}

inline void CMsgDOTAPlayerInfo_AuditEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.team_url_logo_){}
    , decltype(_impl_.start_timestamp_){0u}
    , decltype(_impl_.end_timestamp_){0u}
    , decltype(_impl_.team_id_){0u}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_url_logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAPlayerInfo_AuditEntry::~CMsgDOTAPlayerInfo_AuditEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfo.AuditEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPlayerInfo_AuditEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_.Destroy();
  _impl_.team_tag_.Destroy();
  _impl_.team_url_logo_.Destroy();
}

void CMsgDOTAPlayerInfo_AuditEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPlayerInfo_AuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfo.AuditEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.team_url_logo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.team_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfo_AuditEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_timestamp(&has_bits);
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_timestamp(&has_bits);
          _impl_.end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.AuditEntry.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.AuditEntry.team_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_url_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_team_url_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPlayerInfo_AuditEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfo.AuditEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_timestamp(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_id(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.AuditEntry.team_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name(), target);
  }

  // optional string team_tag = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.AuditEntry.team_tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_team_tag(), target);
  }

  // optional string team_url_logo = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_url_logo().data(), static_cast<int>(this->_internal_team_url_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.AuditEntry.team_url_logo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_team_url_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfo.AuditEntry)
  return target;
}

size_t CMsgDOTAPlayerInfo_AuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfo.AuditEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string team_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_url_logo = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_url_logo());
    }

    // optional uint32 start_timestamp = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_timestamp());
    }

    // optional uint32 end_timestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_timestamp());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPlayerInfo_AuditEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPlayerInfo_AuditEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPlayerInfo_AuditEntry::GetClassData() const { return &_class_data_; }


void CMsgDOTAPlayerInfo_AuditEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPlayerInfo_AuditEntry*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPlayerInfo_AuditEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_team_url_logo(from._internal_team_url_logo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.end_timestamp_ = from._impl_.end_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPlayerInfo_AuditEntry::CopyFrom(const CMsgDOTAPlayerInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo_AuditEntry::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo_AuditEntry::InternalSwap(CMsgDOTAPlayerInfo_AuditEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_tag_, lhs_arena,
      &other->_impl_.team_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_url_logo_, lhs_arena,
      &other->_impl_.team_url_logo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_AuditEntry, _impl_.team_id_)
      + sizeof(CMsgDOTAPlayerInfo_AuditEntry::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo_AuditEntry, _impl_.start_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.start_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfo_AuditEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[1]);
}

// ===================================================================

class CMsgDOTAPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPlayerInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_role(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sponsor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_pro(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_team_url_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfo)
}
CMsgDOTAPlayerInfo::CMsgDOTAPlayerInfo(const CMsgDOTAPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.audit_entries_){from._impl_.audit_entries_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.sponsor_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.team_url_logo_){}
    , decltype(_impl_.team_abbreviation_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.fantasy_role_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.is_locked_){}
    , decltype(_impl_.is_pro_){}
    , decltype(_impl_.total_earnings_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_tag()) {
    _this->_impl_.team_tag_.Set(from._internal_team_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sponsor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sponsor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sponsor()) {
    _this->_impl_.sponsor_.Set(from._internal_sponsor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_real_name()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_url_logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_url_logo()) {
    _this->_impl_.team_url_logo_.Set(from._internal_team_url_logo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_abbreviation()) {
    _this->_impl_.team_abbreviation_.Set(from._internal_team_abbreviation(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_earnings_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.total_earnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfo)
}

inline void CMsgDOTAPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){arena}
    , decltype(_impl_.audit_entries_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.sponsor_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.team_url_logo_){}
    , decltype(_impl_.team_abbreviation_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.fantasy_role_){0}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.is_locked_){false}
    , decltype(_impl_.is_pro_){false}
    , decltype(_impl_.total_earnings_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sponsor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sponsor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_url_logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAPlayerInfo::~CMsgDOTAPlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.audit_entries_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.country_code_.Destroy();
  _impl_.team_name_.Destroy();
  _impl_.team_tag_.Destroy();
  _impl_.sponsor_.Destroy();
  _impl_.real_name_.Destroy();
  _impl_.team_url_logo_.Destroy();
  _impl_.team_abbreviation_.Destroy();
}

void CMsgDOTAPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.audit_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.sponsor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.real_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.team_url_logo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_earnings_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.total_earnings_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Roles_IsValid(val))) {
            _internal_set_fantasy_role(static_cast<::Fantasy_Roles>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sponsor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sponsor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.sponsor");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_locked = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_locked(&has_bits);
          _impl_.is_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_pro = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_pro(&has_bits);
          _impl_.is_pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string real_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.real_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_earnings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_total_earnings(&has_bits);
          _impl_.total_earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPlayerInfo.Results results = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string team_url_logo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_team_url_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_url_logo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_audit_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string team_abbreviation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAPlayerInfo.team_abbreviation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_code(), target);
  }

  // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_fantasy_role(), target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id(), target);
  }

  // optional string team_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_team_name(), target);
  }

  // optional string team_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_tag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_team_tag(), target);
  }

  // optional string sponsor = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sponsor().data(), static_cast<int>(this->_internal_sponsor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.sponsor");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sponsor(), target);
  }

  // optional bool is_locked = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_locked(), target);
  }

  // optional bool is_pro = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_pro(), target);
  }

  // optional string real_name = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.real_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_real_name(), target);
  }

  // optional uint32 total_earnings = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_total_earnings(), target);
  }

  // repeated .CMsgDOTAPlayerInfo.Results results = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string team_url_logo = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_url_logo().data(), static_cast<int>(this->_internal_team_url_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_url_logo");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_team_url_logo(), target);
  }

  // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audit_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_audit_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string team_abbreviation = 17;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAPlayerInfo.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_team_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfo)
  return target;
}

size_t CMsgDOTAPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAPlayerInfo.Results results = 14;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  total_size += 2UL * this->_internal_audit_entries_size();
  for (const auto& msg : this->_impl_.audit_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string country_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string team_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string sponsor = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sponsor());
    }

    // optional string real_name = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional string team_url_logo = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_url_logo());
    }

    // optional string team_abbreviation = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fantasy_role());
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional bool is_locked = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_pro = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 total_earnings = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_earnings());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPlayerInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTAPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPlayerInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  _this->_impl_.audit_entries_.MergeFrom(from._impl_.audit_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_sponsor(from._internal_sponsor());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_team_url_logo(from._internal_team_url_logo());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.fantasy_role_ = from._impl_.fantasy_role_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_locked_ = from._impl_.is_locked_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.is_pro_ = from._impl_.is_pro_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.total_earnings_ = from._impl_.total_earnings_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPlayerInfo::CopyFrom(const CMsgDOTAPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfo::InternalSwap(CMsgDOTAPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  _impl_.audit_entries_.InternalSwap(&other->_impl_.audit_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_tag_, lhs_arena,
      &other->_impl_.team_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sponsor_, lhs_arena,
      &other->_impl_.sponsor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_url_logo_, lhs_arena,
      &other->_impl_.team_url_logo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_abbreviation_, lhs_arena,
      &other->_impl_.team_abbreviation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo, _impl_.total_earnings_)
      + sizeof(CMsgDOTAPlayerInfo::_impl_.total_earnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPlayerInfo, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[2]);
}

// ===================================================================

class CMsgDOTAPlayerInfoList::_Internal {
 public:
};

CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerInfoList)
}
CMsgDOTAPlayerInfoList::CMsgDOTAPlayerInfoList(const CMsgDOTAPlayerInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPlayerInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_infos_){from._impl_.player_infos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerInfoList)
}

inline void CMsgDOTAPlayerInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_infos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTAPlayerInfoList::~CMsgDOTAPlayerInfoList() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPlayerInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_infos_.~RepeatedPtrField();
}

void CMsgDOTAPlayerInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPlayerInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAPlayerInfo player_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPlayerInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAPlayerInfo player_infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerInfoList)
  return target;
}

size_t CMsgDOTAPlayerInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAPlayerInfo player_infos = 1;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->_impl_.player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPlayerInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPlayerInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPlayerInfoList::GetClassData() const { return &_class_data_; }


void CMsgDOTAPlayerInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPlayerInfoList*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPlayerInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_infos_.MergeFrom(from._impl_.player_infos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPlayerInfoList::CopyFrom(const CMsgDOTAPlayerInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerInfoList::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerInfoList::InternalSwap(CMsgDOTAPlayerInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_infos_.InternalSwap(&other->_impl_.player_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[3]);
}

// ===================================================================

class CMsgDOTATeamRoster::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamRoster>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coach_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATeamRoster::CMsgDOTATeamRoster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamRoster)
}
CMsgDOTATeamRoster::CMsgDOTATeamRoster(const CMsgDOTATeamRoster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamRoster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_account_ids_){from._impl_.member_account_ids_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.coach_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coach_account_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.coach_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamRoster)
}

inline void CMsgDOTATeamRoster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_account_ids_){arena}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.coach_account_id_){0u}
  };
}

CMsgDOTATeamRoster::~CMsgDOTATeamRoster() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamRoster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamRoster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_account_ids_.~RepeatedField();
}

void CMsgDOTATeamRoster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamRoster::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamRoster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_account_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.coach_account_id_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.coach_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamRoster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 member_account_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coach_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_coach_account_id(&has_bits);
          _impl_.coach_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamRoster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamRoster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // repeated uint32 member_account_ids = 3;
  for (int i = 0, n = this->_internal_member_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_member_account_ids(i), target);
  }

  // optional uint32 coach_account_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_coach_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamRoster)
  return target;
}

size_t CMsgDOTATeamRoster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamRoster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_account_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.member_account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_member_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 coach_account_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coach_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamRoster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamRoster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamRoster::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamRoster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamRoster*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamRoster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamRoster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_account_ids_.MergeFrom(from._impl_.member_account_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.coach_account_id_ = from._impl_.coach_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamRoster::CopyFrom(const CMsgDOTATeamRoster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamRoster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamRoster::IsInitialized() const {
  return true;
}

void CMsgDOTATeamRoster::InternalSwap(CMsgDOTATeamRoster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.member_account_ids_.InternalSwap(&other->_impl_.member_account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamRoster, _impl_.coach_account_id_)
      + sizeof(CMsgDOTATeamRoster::_impl_.coach_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamRoster, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamRoster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[4]);
}

// ===================================================================

class CMsgDOTADPCProfileInfo_PredictionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCProfileInfo_PredictionInfo>()._impl_._has_bits_);
  static void set_has_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCProfileInfo.PredictionInfo)
}
CMsgDOTADPCProfileInfo_PredictionInfo::CMsgDOTADPCProfileInfo_PredictionInfo(const CMsgDOTADPCProfileInfo_PredictionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCProfileInfo_PredictionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.percent_){}
    , decltype(_impl_.shard_winnings_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.percent_, &from._impl_.percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shard_winnings_) -
    reinterpret_cast<char*>(&_impl_.percent_)) + sizeof(_impl_.shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCProfileInfo.PredictionInfo)
}

inline void CMsgDOTADPCProfileInfo_PredictionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.percent_){0u}
    , decltype(_impl_.shard_winnings_){0}
  };
}

CMsgDOTADPCProfileInfo_PredictionInfo::~CMsgDOTADPCProfileInfo_PredictionInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCProfileInfo.PredictionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCProfileInfo_PredictionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTADPCProfileInfo_PredictionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCProfileInfo_PredictionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shard_winnings_) -
        reinterpret_cast<char*>(&_impl_.percent_)) + sizeof(_impl_.shard_winnings_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCProfileInfo_PredictionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_percent(&has_bits);
          _impl_.percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shard_winnings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shard_winnings(&has_bits);
          _impl_.shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCProfileInfo_PredictionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_percent(), target);
  }

  // optional int32 shard_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shard_winnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCProfileInfo.PredictionInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo_PredictionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 percent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_percent());
    }

    // optional int32 shard_winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shard_winnings());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCProfileInfo_PredictionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCProfileInfo_PredictionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCProfileInfo_PredictionInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCProfileInfo_PredictionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCProfileInfo_PredictionInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCProfileInfo_PredictionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.percent_ = from._impl_.percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shard_winnings_ = from._impl_.shard_winnings_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCProfileInfo_PredictionInfo::CopyFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCProfileInfo.PredictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo_PredictionInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo_PredictionInfo::InternalSwap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_PredictionInfo, _impl_.shard_winnings_)
      + sizeof(CMsgDOTADPCProfileInfo_PredictionInfo::_impl_.shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_PredictionInfo, _impl_.percent_)>(
          reinterpret_cast<char*>(&_impl_.percent_),
          reinterpret_cast<char*>(&other->_impl_.percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCProfileInfo_PredictionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[5]);
}

// ===================================================================

class CMsgDOTADPCProfileInfo_FantasyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCProfileInfo_FantasyInfo>()._impl_._has_bits_);
  static void set_has_top_90_finishes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_75_finishes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_50_finishes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCProfileInfo.FantasyInfo)
}
CMsgDOTADPCProfileInfo_FantasyInfo::CMsgDOTADPCProfileInfo_FantasyInfo(const CMsgDOTADPCProfileInfo_FantasyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCProfileInfo_FantasyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_90_finishes_){}
    , decltype(_impl_.top_75_finishes_){}
    , decltype(_impl_.top_50_finishes_){}
    , decltype(_impl_.shard_winnings_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.top_90_finishes_, &from._impl_.top_90_finishes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shard_winnings_) -
    reinterpret_cast<char*>(&_impl_.top_90_finishes_)) + sizeof(_impl_.shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCProfileInfo.FantasyInfo)
}

inline void CMsgDOTADPCProfileInfo_FantasyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_90_finishes_){0u}
    , decltype(_impl_.top_75_finishes_){0u}
    , decltype(_impl_.top_50_finishes_){0u}
    , decltype(_impl_.shard_winnings_){0u}
  };
}

CMsgDOTADPCProfileInfo_FantasyInfo::~CMsgDOTADPCProfileInfo_FantasyInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCProfileInfo.FantasyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCProfileInfo_FantasyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTADPCProfileInfo_FantasyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCProfileInfo_FantasyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.top_90_finishes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shard_winnings_) -
        reinterpret_cast<char*>(&_impl_.top_90_finishes_)) + sizeof(_impl_.shard_winnings_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCProfileInfo_FantasyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 top_90_finishes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_top_90_finishes(&has_bits);
          _impl_.top_90_finishes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 top_75_finishes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_75_finishes(&has_bits);
          _impl_.top_75_finishes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 top_50_finishes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_top_50_finishes(&has_bits);
          _impl_.top_50_finishes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shard_winnings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shard_winnings(&has_bits);
          _impl_.shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCProfileInfo_FantasyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 top_90_finishes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_90_finishes(), target);
  }

  // optional uint32 top_75_finishes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_75_finishes(), target);
  }

  // optional uint32 top_50_finishes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_top_50_finishes(), target);
  }

  // optional uint32 shard_winnings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_shard_winnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCProfileInfo.FantasyInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo_FantasyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 top_90_finishes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_90_finishes());
    }

    // optional uint32 top_75_finishes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_75_finishes());
    }

    // optional uint32 top_50_finishes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_50_finishes());
    }

    // optional uint32 shard_winnings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shard_winnings());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCProfileInfo_FantasyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCProfileInfo_FantasyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCProfileInfo_FantasyInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCProfileInfo_FantasyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCProfileInfo_FantasyInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCProfileInfo_FantasyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.top_90_finishes_ = from._impl_.top_90_finishes_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.top_75_finishes_ = from._impl_.top_75_finishes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.top_50_finishes_ = from._impl_.top_50_finishes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.shard_winnings_ = from._impl_.shard_winnings_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCProfileInfo_FantasyInfo::CopyFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCProfileInfo.FantasyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo_FantasyInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo_FantasyInfo::InternalSwap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_FantasyInfo, _impl_.shard_winnings_)
      + sizeof(CMsgDOTADPCProfileInfo_FantasyInfo::_impl_.shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo_FantasyInfo, _impl_.top_90_finishes_)>(
          reinterpret_cast<char*>(&_impl_.top_90_finishes_),
          reinterpret_cast<char*>(&other->_impl_.top_90_finishes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCProfileInfo_FantasyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[6]);
}

// ===================================================================

class CMsgDOTADPCProfileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCProfileInfo>()._impl_._has_bits_);
  static const ::CMsgDOTAPlayerInfo& player_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTADPCProfileInfo_PredictionInfo& prediction_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_prediction_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTADPCProfileInfo_FantasyInfo& fantasy_info(const CMsgDOTADPCProfileInfo* msg);
  static void set_has_fantasy_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgDOTAPlayerInfo&
CMsgDOTADPCProfileInfo::_Internal::player_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->_impl_.player_info_;
}
const ::CMsgDOTADPCProfileInfo_PredictionInfo&
CMsgDOTADPCProfileInfo::_Internal::prediction_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->_impl_.prediction_info_;
}
const ::CMsgDOTADPCProfileInfo_FantasyInfo&
CMsgDOTADPCProfileInfo::_Internal::fantasy_info(const CMsgDOTADPCProfileInfo* msg) {
  return *msg->_impl_.fantasy_info_;
}
CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCProfileInfo)
}
CMsgDOTADPCProfileInfo::CMsgDOTADPCProfileInfo(const CMsgDOTADPCProfileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCProfileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disabled_notifications_){from._impl_.disabled_notifications_}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.prediction_info_){nullptr}
    , decltype(_impl_.fantasy_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::CMsgDOTAPlayerInfo(*from._impl_.player_info_);
  }
  if (from._internal_has_prediction_info()) {
    _this->_impl_.prediction_info_ = new ::CMsgDOTADPCProfileInfo_PredictionInfo(*from._impl_.prediction_info_);
  }
  if (from._internal_has_fantasy_info()) {
    _this->_impl_.fantasy_info_ = new ::CMsgDOTADPCProfileInfo_FantasyInfo(*from._impl_.fantasy_info_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCProfileInfo)
}

inline void CMsgDOTADPCProfileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disabled_notifications_){arena}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.prediction_info_){nullptr}
    , decltype(_impl_.fantasy_info_){nullptr}
  };
}

CMsgDOTADPCProfileInfo::~CMsgDOTADPCProfileInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCProfileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCProfileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disabled_notifications_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.player_info_;
  if (this != internal_default_instance()) delete _impl_.prediction_info_;
  if (this != internal_default_instance()) delete _impl_.fantasy_info_;
}

void CMsgDOTADPCProfileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCProfileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.disabled_notifications_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.player_info_ != nullptr);
      _impl_.player_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.prediction_info_ != nullptr);
      _impl_.prediction_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.fantasy_info_ != nullptr);
      _impl_.fantasy_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCProfileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTAPlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fantasy_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 disabled_notifications = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_disabled_notifications(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_disabled_notifications(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCProfileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCProfileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTAPlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prediction_info(this),
        _Internal::prediction_info(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fantasy_info(this),
        _Internal::fantasy_info(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 disabled_notifications = 4;
  for (int i = 0, n = this->_internal_disabled_notifications_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_disabled_notifications(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCProfileInfo)
  return target;
}

size_t CMsgDOTADPCProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCProfileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 disabled_notifications = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.disabled_notifications_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_disabled_notifications_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgDOTAPlayerInfo player_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_info_);
    }

    // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.prediction_info_);
    }

    // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fantasy_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCProfileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCProfileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCProfileInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCProfileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCProfileInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCProfileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCProfileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.disabled_notifications_.MergeFrom(from._impl_.disabled_notifications_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_player_info()->::CMsgDOTAPlayerInfo::MergeFrom(
          from._internal_player_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_prediction_info()->::CMsgDOTADPCProfileInfo_PredictionInfo::MergeFrom(
          from._internal_prediction_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_fantasy_info()->::CMsgDOTADPCProfileInfo_FantasyInfo::MergeFrom(
          from._internal_fantasy_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCProfileInfo::CopyFrom(const CMsgDOTADPCProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCProfileInfo::IsInitialized() const {
  return true;
}

void CMsgDOTADPCProfileInfo::InternalSwap(CMsgDOTADPCProfileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.disabled_notifications_.InternalSwap(&other->_impl_.disabled_notifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo, _impl_.fantasy_info_)
      + sizeof(CMsgDOTADPCProfileInfo::_impl_.fantasy_info_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCProfileInfo, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCProfileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[7]);
}

// ===================================================================

class CMsgDOTALeaderboards_RegionLeaderboard::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaderboards_RegionLeaderboard>()._impl_._has_bits_);
  static void set_has_division(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaderboards.RegionLeaderboard)
}
CMsgDOTALeaderboards_RegionLeaderboard::CMsgDOTALeaderboards_RegionLeaderboard(const CMsgDOTALeaderboards_RegionLeaderboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALeaderboards_RegionLeaderboard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , decltype(_impl_.division_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.division_ = from._impl_.division_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaderboards.RegionLeaderboard)
}

inline void CMsgDOTALeaderboards_RegionLeaderboard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){arena}
    , decltype(_impl_.division_){0u}
  };
}

CMsgDOTALeaderboards_RegionLeaderboard::~CMsgDOTALeaderboards_RegionLeaderboard() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaderboards.RegionLeaderboard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALeaderboards_RegionLeaderboard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
}

void CMsgDOTALeaderboards_RegionLeaderboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALeaderboards_RegionLeaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaderboards.RegionLeaderboard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  _impl_.division_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaderboards_RegionLeaderboard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 division = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_division(&has_bits);
          _impl_.division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALeaderboards_RegionLeaderboard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaderboards.RegionLeaderboard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 division = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_division(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaderboards.RegionLeaderboard)
  return target;
}

size_t CMsgDOTALeaderboards_RegionLeaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaderboards.RegionLeaderboard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // optional uint32 division = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_division());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALeaderboards_RegionLeaderboard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALeaderboards_RegionLeaderboard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALeaderboards_RegionLeaderboard::GetClassData() const { return &_class_data_; }


void CMsgDOTALeaderboards_RegionLeaderboard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALeaderboards_RegionLeaderboard*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALeaderboards_RegionLeaderboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaderboards.RegionLeaderboard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  if (from._internal_has_division()) {
    _this->_internal_set_division(from._internal_division());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALeaderboards_RegionLeaderboard::CopyFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaderboards.RegionLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaderboards_RegionLeaderboard::IsInitialized() const {
  return true;
}

void CMsgDOTALeaderboards_RegionLeaderboard::InternalSwap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
  swap(_impl_.division_, other->_impl_.division_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaderboards_RegionLeaderboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[8]);
}

// ===================================================================

class CMsgDOTALeaderboards::_Internal {
 public:
};

CMsgDOTALeaderboards::CMsgDOTALeaderboards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaderboards)
}
CMsgDOTALeaderboards::CMsgDOTALeaderboards(const CMsgDOTALeaderboards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALeaderboards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leaderboards_){from._impl_.leaderboards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaderboards)
}

inline void CMsgDOTALeaderboards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leaderboards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTALeaderboards::~CMsgDOTALeaderboards() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaderboards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALeaderboards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leaderboards_.~RepeatedPtrField();
}

void CMsgDOTALeaderboards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALeaderboards::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaderboards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leaderboards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaderboards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaderboards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALeaderboards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaderboards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leaderboards_size()); i < n; i++) {
    const auto& repfield = this->_internal_leaderboards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaderboards)
  return target;
}

size_t CMsgDOTALeaderboards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaderboards)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  total_size += 1UL * this->_internal_leaderboards_size();
  for (const auto& msg : this->_impl_.leaderboards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALeaderboards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALeaderboards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALeaderboards::GetClassData() const { return &_class_data_; }


void CMsgDOTALeaderboards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALeaderboards*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALeaderboards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaderboards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.leaderboards_.MergeFrom(from._impl_.leaderboards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALeaderboards::CopyFrom(const CMsgDOTALeaderboards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaderboards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaderboards::IsInitialized() const {
  return true;
}

void CMsgDOTALeaderboards::InternalSwap(CMsgDOTALeaderboards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.leaderboards_.InternalSwap(&other->_impl_.leaderboards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaderboards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[9]);
}

// ===================================================================

class CMsgDOTAPassportVoteTeamGuess::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportVoteTeamGuess>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_runnerup_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportVoteTeamGuess)
}
CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPassportVoteTeamGuess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.winner_id_){}
    , decltype(_impl_.runnerup_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.runnerup_id_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.runnerup_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVoteTeamGuess)
}

inline void CMsgDOTAPassportVoteTeamGuess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.winner_id_){0u}
    , decltype(_impl_.runnerup_id_){0u}
  };
}

CMsgDOTAPassportVoteTeamGuess::~CMsgDOTAPassportVoteTeamGuess() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVoteTeamGuess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPassportVoteTeamGuess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAPassportVoteTeamGuess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPassportVoteTeamGuess::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportVoteTeamGuess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.runnerup_id_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.runnerup_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportVoteTeamGuess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 winner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_winner_id(&has_bits);
          _impl_.winner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 runnerup_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_runnerup_id(&has_bits);
          _impl_.runnerup_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPassportVoteTeamGuess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVoteTeamGuess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 winner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_winner_id(), target);
  }

  // optional uint32 runnerup_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_runnerup_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVoteTeamGuess)
  return target;
}

size_t CMsgDOTAPassportVoteTeamGuess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportVoteTeamGuess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 winner_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_winner_id());
    }

    // optional uint32 runnerup_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_runnerup_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPassportVoteTeamGuess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPassportVoteTeamGuess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPassportVoteTeamGuess::GetClassData() const { return &_class_data_; }


void CMsgDOTAPassportVoteTeamGuess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPassportVoteTeamGuess*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPassportVoteTeamGuess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportVoteTeamGuess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.winner_id_ = from._impl_.winner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.runnerup_id_ = from._impl_.runnerup_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportVoteTeamGuess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteTeamGuess::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteTeamGuess::InternalSwap(CMsgDOTAPassportVoteTeamGuess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, _impl_.runnerup_id_)
      + sizeof(CMsgDOTAPassportVoteTeamGuess::_impl_.runnerup_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportVoteTeamGuess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[10]);
}

// ===================================================================

class CMsgDOTAPassportVoteGenericSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportVoteGenericSelection>()._impl_._has_bits_);
  static void set_has_selection_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportVoteGenericSelection)
}
CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPassportVoteGenericSelection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_index_){}
    , decltype(_impl_.selection_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.selection_index_, &from._impl_.selection_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selection_) -
    reinterpret_cast<char*>(&_impl_.selection_index_)) + sizeof(_impl_.selection_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVoteGenericSelection)
}

inline void CMsgDOTAPassportVoteGenericSelection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_index_){0}
    , decltype(_impl_.selection_){0u}
  };
}

CMsgDOTAPassportVoteGenericSelection::~CMsgDOTAPassportVoteGenericSelection() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVoteGenericSelection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPassportVoteGenericSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAPassportVoteGenericSelection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPassportVoteGenericSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportVoteGenericSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.selection_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.selection_) -
        reinterpret_cast<char*>(&_impl_.selection_index_)) + sizeof(_impl_.selection_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportVoteGenericSelection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_2013PassportSelectionIndices_IsValid(val))) {
            _internal_set_selection_index(static_cast<::DOTA_2013PassportSelectionIndices>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_selection(&has_bits);
          _impl_.selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPassportVoteGenericSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVoteGenericSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_selection_index(), target);
  }

  // optional uint32 selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVoteGenericSelection)
  return target;
}

size_t CMsgDOTAPassportVoteGenericSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportVoteGenericSelection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_index());
    }

    // optional uint32 selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selection());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPassportVoteGenericSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPassportVoteGenericSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPassportVoteGenericSelection::GetClassData() const { return &_class_data_; }


void CMsgDOTAPassportVoteGenericSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPassportVoteGenericSelection*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPassportVoteGenericSelection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportVoteGenericSelection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.selection_index_ = from._impl_.selection_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.selection_ = from._impl_.selection_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportVoteGenericSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteGenericSelection::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteGenericSelection::InternalSwap(CMsgDOTAPassportVoteGenericSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, _impl_.selection_)
      + sizeof(CMsgDOTAPassportVoteGenericSelection::_impl_.selection_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, _impl_.selection_index_)>(
          reinterpret_cast<char*>(&_impl_.selection_index_),
          reinterpret_cast<char*>(&other->_impl_.selection_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportVoteGenericSelection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[11]);
}

// ===================================================================

class CMsgDOTAPassportStampedPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportStampedPlayer>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stamp_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportStampedPlayer)
}
CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPassportStampedPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.stamp_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stamp_level_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.stamp_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportStampedPlayer)
}

inline void CMsgDOTAPassportStampedPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.stamp_level_){0u}
  };
}

CMsgDOTAPassportStampedPlayer::~CMsgDOTAPassportStampedPlayer() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportStampedPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPassportStampedPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAPassportStampedPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPassportStampedPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportStampedPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stamp_level_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.stamp_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportStampedPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stamp_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stamp_level(&has_bits);
          _impl_.stamp_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPassportStampedPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportStampedPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 stamp_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stamp_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportStampedPlayer)
  return target;
}

size_t CMsgDOTAPassportStampedPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportStampedPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steam_id());
    }

    // optional uint32 stamp_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stamp_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPassportStampedPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPassportStampedPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPassportStampedPlayer::GetClassData() const { return &_class_data_; }


void CMsgDOTAPassportStampedPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPassportStampedPlayer*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPassportStampedPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportStampedPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stamp_level_ = from._impl_.stamp_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const CMsgDOTAPassportStampedPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportStampedPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportStampedPlayer::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportStampedPlayer::InternalSwap(CMsgDOTAPassportStampedPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, _impl_.stamp_level_)
      + sizeof(CMsgDOTAPassportStampedPlayer::_impl_.stamp_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportStampedPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[12]);
}

// ===================================================================

class CMsgDOTAPassportPlayerCardChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPassportPlayerCardChallenge>()._impl_._has_bits_);
  static void set_has_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportPlayerCardChallenge)
}
CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(const CMsgDOTAPassportPlayerCardChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPassportPlayerCardChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.challenge_id_ = from._impl_.challenge_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportPlayerCardChallenge)
}

inline void CMsgDOTAPassportPlayerCardChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_id_){0u}
  };
}

CMsgDOTAPassportPlayerCardChallenge::~CMsgDOTAPassportPlayerCardChallenge() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportPlayerCardChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPassportPlayerCardChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAPassportPlayerCardChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPassportPlayerCardChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportPlayerCardChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.challenge_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportPlayerCardChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 challenge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_challenge_id(&has_bits);
          _impl_.challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPassportPlayerCardChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportPlayerCardChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 challenge_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenge_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportPlayerCardChallenge)
  return target;
}

size_t CMsgDOTAPassportPlayerCardChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportPlayerCardChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 challenge_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPassportPlayerCardChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPassportPlayerCardChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPassportPlayerCardChallenge::GetClassData() const { return &_class_data_; }


void CMsgDOTAPassportPlayerCardChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPassportPlayerCardChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPassportPlayerCardChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportPlayerCardChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_challenge_id()) {
    _this->_internal_set_challenge_id(from._internal_challenge_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportPlayerCardChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportPlayerCardChallenge::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportPlayerCardChallenge::InternalSwap(CMsgDOTAPassportPlayerCardChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.challenge_id_, other->_impl_.challenge_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportPlayerCardChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[13]);
}

// ===================================================================

class CMsgDOTAPassportVote::_Internal {
 public:
};

CMsgDOTAPassportVote::CMsgDOTAPassportVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPassportVote)
}
CMsgDOTAPassportVote::CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPassportVote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.team_votes_){from._impl_.team_votes_}
    , decltype(_impl_.generic_selections_){from._impl_.generic_selections_}
    , decltype(_impl_.stamped_players_){from._impl_.stamped_players_}
    , decltype(_impl_.player_card_challenges_){from._impl_.player_card_challenges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVote)
}

inline void CMsgDOTAPassportVote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.team_votes_){arena}
    , decltype(_impl_.generic_selections_){arena}
    , decltype(_impl_.stamped_players_){arena}
    , decltype(_impl_.player_card_challenges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTAPassportVote::~CMsgDOTAPassportVote() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPassportVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_votes_.~RepeatedPtrField();
  _impl_.generic_selections_.~RepeatedPtrField();
  _impl_.stamped_players_.~RepeatedPtrField();
  _impl_.player_card_challenges_.~RepeatedPtrField();
}

void CMsgDOTAPassportVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPassportVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPassportVote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_votes_.Clear();
  _impl_.generic_selections_.Clear();
  _impl_.stamped_players_.Clear();
  _impl_.player_card_challenges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPassportVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generic_selections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stamped_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_card_challenges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPassportVote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_team_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_team_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_generic_selections_size()); i < n; i++) {
    const auto& repfield = this->_internal_generic_selections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stamped_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_stamped_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_card_challenges_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_card_challenges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVote)
  return target;
}

size_t CMsgDOTAPassportVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPassportVote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  total_size += 1UL * this->_internal_team_votes_size();
  for (const auto& msg : this->_impl_.team_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  total_size += 1UL * this->_internal_generic_selections_size();
  for (const auto& msg : this->_impl_.generic_selections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  total_size += 1UL * this->_internal_stamped_players_size();
  for (const auto& msg : this->_impl_.stamped_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  total_size += 1UL * this->_internal_player_card_challenges_size();
  for (const auto& msg : this->_impl_.player_card_challenges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPassportVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPassportVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPassportVote::GetClassData() const { return &_class_data_; }


void CMsgDOTAPassportVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPassportVote*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPassportVote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPassportVote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.team_votes_.MergeFrom(from._impl_.team_votes_);
  _this->_impl_.generic_selections_.MergeFrom(from._impl_.generic_selections_);
  _this->_impl_.stamped_players_.MergeFrom(from._impl_.stamped_players_);
  _this->_impl_.player_card_challenges_.MergeFrom(from._impl_.player_card_challenges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPassportVote::CopyFrom(const CMsgDOTAPassportVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPassportVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVote::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVote::InternalSwap(CMsgDOTAPassportVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.team_votes_.InternalSwap(&other->_impl_.team_votes_);
  _impl_.generic_selections_.InternalSwap(&other->_impl_.generic_selections_);
  _impl_.stamped_players_.InternalSwap(&other->_impl_.stamped_players_);
  _impl_.player_card_challenges_.InternalSwap(&other->_impl_.player_card_challenges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPassportVote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[14]);
}

// ===================================================================

class CMsgClientToGCGetPlayerCardRosterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetPlayerCardRosterRequest>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetPlayerCardRosterRequest)
}
CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(const CMsgClientToGCGetPlayerCardRosterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetPlayerCardRosterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.fantasy_period_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fantasy_period_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.fantasy_period_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetPlayerCardRosterRequest)
}

inline void CMsgClientToGCGetPlayerCardRosterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.fantasy_period_){4294967295u}
  };
}

CMsgClientToGCGetPlayerCardRosterRequest::~CMsgClientToGCGetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetPlayerCardRosterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetPlayerCardRosterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetPlayerCardRosterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetPlayerCardRosterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.league_id_ = 0u;
    _impl_.fantasy_period_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetPlayerCardRosterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fantasy_period = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_fantasy_period(&has_bits);
          _impl_.fantasy_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetPlayerCardRosterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetPlayerCardRosterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 fantasy_period = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fantasy_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetPlayerCardRosterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 fantasy_period = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_period());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetPlayerCardRosterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetPlayerCardRosterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetPlayerCardRosterRequest::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetPlayerCardRosterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetPlayerCardRosterRequest*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetPlayerCardRosterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fantasy_period_ = from._impl_.fantasy_period_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.league_id_, other->_impl_.league_id_);
  swap(_impl_.fantasy_period_, other->_impl_.fantasy_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetPlayerCardRosterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[15]);
}

// ===================================================================

class CMsgClientToGCGetPlayerCardRosterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetPlayerCardRosterResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetPlayerCardRosterResponse)
}
CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(const CMsgClientToGCGetPlayerCardRosterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetPlayerCardRosterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_card_item_id_){from._impl_.player_card_item_id_}
    , decltype(_impl_.result_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.finalized_){}
    , decltype(_impl_.percentile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.percentile_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.percentile_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetPlayerCardRosterResponse)
}

inline void CMsgClientToGCGetPlayerCardRosterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_card_item_id_){arena}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.finalized_){false}
    , decltype(_impl_.percentile_){0}
  };
}

CMsgClientToGCGetPlayerCardRosterResponse::~CMsgClientToGCGetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetPlayerCardRosterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetPlayerCardRosterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_card_item_id_.~RepeatedField();
}

void CMsgClientToGCGetPlayerCardRosterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetPlayerCardRosterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_card_item_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.percentile_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.percentile_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetPlayerCardRosterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCGetPlayerCardRosterResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 player_card_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_card_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_player_card_item_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool finalized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_finalized(&has_bits);
          _impl_.finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float percentile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_percentile(&has_bits);
          _impl_.percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetPlayerCardRosterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetPlayerCardRosterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated uint64 player_card_item_id = 2;
  for (int i = 0, n = this->_internal_player_card_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_card_item_id(i), target);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  // optional bool finalized = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_finalized(), target);
  }

  // optional float percentile = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetPlayerCardRosterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_card_item_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.player_card_item_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_card_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional float score = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool finalized = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float percentile = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetPlayerCardRosterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetPlayerCardRosterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetPlayerCardRosterResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetPlayerCardRosterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetPlayerCardRosterResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetPlayerCardRosterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_card_item_id_.MergeFrom(from._impl_.player_card_item_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.finalized_ = from._impl_.finalized_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.percentile_ = from._impl_.percentile_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_card_item_id_.InternalSwap(&other->_impl_.player_card_item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, _impl_.percentile_)
      + sizeof(CMsgClientToGCGetPlayerCardRosterResponse::_impl_.percentile_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetPlayerCardRosterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[16]);
}

// ===================================================================

class CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fantasy_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
}
CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.fantasy_period_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fantasy_period_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.fantasy_period_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
}

inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.fantasy_period_){4294967295u}
  };
}

CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::~CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.league_id_ = 0u;
    _impl_.fantasy_period_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fantasy_period = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_fantasy_period(&has_bits);
          _impl_.fantasy_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 fantasy_period = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fantasy_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
  return target;
}

size_t CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 fantasy_period = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_period());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fantasy_period_ = from._impl_.fantasy_period_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::IsInitialized() const {
  return true;
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.league_id_, other->_impl_.league_id_);
  swap(_impl_.fantasy_period_, other->_impl_.fantasy_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[17]);
}

// ===================================================================

class CMsgClientToGCBatchGetPlayerCardRosterRequest::_Internal {
 public:
};

CMsgClientToGCBatchGetPlayerCardRosterRequest::CMsgClientToGCBatchGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBatchGetPlayerCardRosterRequest)
}
CMsgClientToGCBatchGetPlayerCardRosterRequest::CMsgClientToGCBatchGetPlayerCardRosterRequest(const CMsgClientToGCBatchGetPlayerCardRosterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBatchGetPlayerCardRosterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.league_timestamps_){from._impl_.league_timestamps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBatchGetPlayerCardRosterRequest)
}

inline void CMsgClientToGCBatchGetPlayerCardRosterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.league_timestamps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgClientToGCBatchGetPlayerCardRosterRequest::~CMsgClientToGCBatchGetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBatchGetPlayerCardRosterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBatchGetPlayerCardRosterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.league_timestamps_.~RepeatedPtrField();
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBatchGetPlayerCardRosterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.league_timestamps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBatchGetPlayerCardRosterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp league_timestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_league_timestamps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBatchGetPlayerCardRosterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBatchGetPlayerCardRosterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp league_timestamps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_league_timestamps_size()); i < n; i++) {
    const auto& repfield = this->_internal_league_timestamps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBatchGetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCBatchGetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBatchGetPlayerCardRosterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp league_timestamps = 1;
  total_size += 1UL * this->_internal_league_timestamps_size();
  for (const auto& msg : this->_impl_.league_timestamps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBatchGetPlayerCardRosterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBatchGetPlayerCardRosterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBatchGetPlayerCardRosterRequest::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBatchGetPlayerCardRosterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBatchGetPlayerCardRosterRequest*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBatchGetPlayerCardRosterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBatchGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.league_timestamps_.MergeFrom(from._impl_.league_timestamps_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBatchGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBatchGetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCBatchGetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.league_timestamps_.InternalSwap(&other->_impl_.league_timestamps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBatchGetPlayerCardRosterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[18]);
}

// ===================================================================

class CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deprecated_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fantasy_period(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
}
CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_card_item_id_){from._impl_.player_card_item_id_}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.deprecated_timestamp_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.finalized_){}
    , decltype(_impl_.percentile_){}
    , decltype(_impl_.fantasy_period_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fantasy_period_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.fantasy_period_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
}

inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_card_item_id_){arena}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.deprecated_timestamp_){0u}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.finalized_){false}
    , decltype(_impl_.percentile_){0}
    , decltype(_impl_.fantasy_period_){4294967295u}
  };
}

CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::~CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_card_item_id_.~RepeatedField();
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_card_item_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.percentile_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.percentile_));
    _impl_.fantasy_period_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deprecated_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deprecated_timestamp(&has_bits);
          _impl_.deprecated_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCBatchGetPlayerCardRosterResponse.Result result = 3 [default = SUCCESS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 player_card_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_card_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_player_card_item_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool finalized = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_finalized(&has_bits);
          _impl_.finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float percentile = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_percentile(&has_bits);
          _impl_.percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fantasy_period = 8 [default = 4294967295];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_fantasy_period(&has_bits);
          _impl_.fantasy_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 deprecated_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deprecated_timestamp(), target);
  }

  // optional .CMsgClientToGCBatchGetPlayerCardRosterResponse.Result result = 3 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  // repeated uint64 player_card_item_id = 4;
  for (int i = 0, n = this->_internal_player_card_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_player_card_item_id(i), target);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_score(), target);
  }

  // optional bool finalized = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_finalized(), target);
  }

  // optional float percentile = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_percentile(), target);
  }

  // optional uint32 fantasy_period = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fantasy_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
  return target;
}

size_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_card_item_id = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.player_card_item_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_card_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 deprecated_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deprecated_timestamp());
    }

    // optional .CMsgClientToGCBatchGetPlayerCardRosterResponse.Result result = 3 [default = SUCCESS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional float score = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool finalized = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float percentile = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 fantasy_period = 8 [default = 4294967295];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_period());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_card_item_id_.MergeFrom(from._impl_.player_card_item_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.deprecated_timestamp_ = from._impl_.deprecated_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.finalized_ = from._impl_.finalized_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.percentile_ = from._impl_.percentile_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fantasy_period_ = from._impl_.fantasy_period_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_card_item_id_.InternalSwap(&other->_impl_.player_card_item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.percentile_)
      + sizeof(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_impl_.percentile_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
  swap(_impl_.fantasy_period_, other->_impl_.fantasy_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[19]);
}

// ===================================================================

class CMsgClientToGCBatchGetPlayerCardRosterResponse::_Internal {
 public:
};

CMsgClientToGCBatchGetPlayerCardRosterResponse::CMsgClientToGCBatchGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBatchGetPlayerCardRosterResponse)
}
CMsgClientToGCBatchGetPlayerCardRosterResponse::CMsgClientToGCBatchGetPlayerCardRosterResponse(const CMsgClientToGCBatchGetPlayerCardRosterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBatchGetPlayerCardRosterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){from._impl_.responses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBatchGetPlayerCardRosterResponse)
}

inline void CMsgClientToGCBatchGetPlayerCardRosterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgClientToGCBatchGetPlayerCardRosterResponse::~CMsgClientToGCBatchGetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBatchGetPlayerCardRosterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBatchGetPlayerCardRosterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responses_.~RepeatedPtrField();
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBatchGetPlayerCardRosterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBatchGetPlayerCardRosterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBatchGetPlayerCardRosterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBatchGetPlayerCardRosterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse responses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBatchGetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCBatchGetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBatchGetPlayerCardRosterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->_impl_.responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBatchGetPlayerCardRosterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBatchGetPlayerCardRosterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBatchGetPlayerCardRosterResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBatchGetPlayerCardRosterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBatchGetPlayerCardRosterResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBatchGetPlayerCardRosterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBatchGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.responses_.MergeFrom(from._impl_.responses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBatchGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBatchGetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCBatchGetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responses_.InternalSwap(&other->_impl_.responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBatchGetPlayerCardRosterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[20]);
}

// ===================================================================

class CMsgClientToGCSetPlayerCardRosterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetPlayerCardRosterRequest>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deprecated_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_card_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fantasy_period(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetPlayerCardRosterRequest)
}
CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(const CMsgClientToGCSetPlayerCardRosterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCSetPlayerCardRosterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.deprecated_timestamp_){}
    , decltype(_impl_.player_card_item_id_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.fantasy_period_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fantasy_period_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.fantasy_period_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetPlayerCardRosterRequest)
}

inline void CMsgClientToGCSetPlayerCardRosterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.deprecated_timestamp_){0u}
    , decltype(_impl_.player_card_item_id_){uint64_t{0u}}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.fantasy_period_){4294967295u}
  };
}

CMsgClientToGCSetPlayerCardRosterRequest::~CMsgClientToGCSetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetPlayerCardRosterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCSetPlayerCardRosterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCSetPlayerCardRosterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCSetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetPlayerCardRosterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.event_id_));
    _impl_.fantasy_period_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetPlayerCardRosterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deprecated_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deprecated_timestamp(&has_bits);
          _impl_.deprecated_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 player_card_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_player_card_item_id(&has_bits);
          _impl_.player_card_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fantasy_period = 6 [default = 4294967295];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_fantasy_period(&has_bits);
          _impl_.fantasy_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSetPlayerCardRosterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetPlayerCardRosterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 deprecated_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deprecated_timestamp(), target);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot(), target);
  }

  // optional uint64 player_card_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_player_card_item_id(), target);
  }

  // optional uint32 event_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_id(), target);
  }

  // optional uint32 fantasy_period = 6 [default = 4294967295];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fantasy_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetPlayerCardRosterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 deprecated_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deprecated_timestamp());
    }

    // optional uint64 player_card_item_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_player_card_item_id());
    }

    // optional uint32 slot = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 event_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 fantasy_period = 6 [default = 4294967295];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_period());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSetPlayerCardRosterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCSetPlayerCardRosterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSetPlayerCardRosterRequest::GetClassData() const { return &_class_data_; }


void CMsgClientToGCSetPlayerCardRosterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCSetPlayerCardRosterRequest*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCSetPlayerCardRosterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.deprecated_timestamp_ = from._impl_.deprecated_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_card_item_id_ = from._impl_.player_card_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.fantasy_period_ = from._impl_.fantasy_period_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, _impl_.event_id_)
      + sizeof(CMsgClientToGCSetPlayerCardRosterRequest::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
  swap(_impl_.fantasy_period_, other->_impl_.fantasy_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetPlayerCardRosterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[21]);
}

// ===================================================================

class CMsgClientToGCSetPlayerCardRosterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetPlayerCardRosterResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetPlayerCardRosterResponse)
}
CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(const CMsgClientToGCSetPlayerCardRosterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCSetPlayerCardRosterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetPlayerCardRosterResponse)
}

inline void CMsgClientToGCSetPlayerCardRosterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgClientToGCSetPlayerCardRosterResponse::~CMsgClientToGCSetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetPlayerCardRosterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCSetPlayerCardRosterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCSetPlayerCardRosterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCSetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetPlayerCardRosterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetPlayerCardRosterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCSetPlayerCardRosterResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSetPlayerCardRosterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetPlayerCardRosterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetPlayerCardRosterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSetPlayerCardRosterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCSetPlayerCardRosterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSetPlayerCardRosterResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCSetPlayerCardRosterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCSetPlayerCardRosterResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCSetPlayerCardRosterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetPlayerCardRosterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[22]);
}

// ===================================================================

class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
}
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.day_timestamps_){from._impl_.day_timestamps_}
    , decltype(_impl_.league_name_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.end_timestamp_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.league_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.league_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_league_name()) {
    _this->_impl_.league_name_.Set(from._internal_league_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
}

inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.day_timestamps_){arena}
    , decltype(_impl_.league_name_){}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.start_timestamp_){0u}
    , decltype(_impl_.end_timestamp_){0u}
    , decltype(_impl_.status_){0}
  };
  _impl_.league_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.league_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::~CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.day_timestamps_.~RepeatedField();
  _impl_.league_name_.Destroy();
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.day_timestamps_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.league_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string league_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_league_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_start_timestamp(&has_bits);
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_end_timestamp(&has_bits);
          _impl_.end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 day_timestamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_day_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_day_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(val))) {
            _internal_set_status(static_cast<::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional string league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_league_name().data(), static_cast<int>(this->_internal_league_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_league_name(), target);
  }

  // optional uint32 start_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_end_timestamp(), target);
  }

  // repeated uint32 day_timestamps = 5;
  for (int i = 0, n = this->_internal_day_timestamps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_day_timestamps(i), target);
  }

  // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  return target;
}

size_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 day_timestamps = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.day_timestamps_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_day_timestamps_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string league_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_league_name());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 start_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_timestamp());
    }

    // optional uint32 end_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_timestamp());
    }

    // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.day_timestamps_.MergeFrom(from._impl_.day_timestamps_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_league_name(from._internal_league_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_timestamp_ = from._impl_.end_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::InternalSwap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.day_timestamps_.InternalSwap(&other->_impl_.day_timestamps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.league_name_, lhs_arena,
      &other->_impl_.league_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.status_)
      + sizeof(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[23]);
}

// ===================================================================

class CMsgDOTAFantasyDPCLeagueStatus::_Internal {
 public:
};

CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyDPCLeagueStatus)
}
CMsgDOTAFantasyDPCLeagueStatus::CMsgDOTAFantasyDPCLeagueStatus(const CMsgDOTAFantasyDPCLeagueStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAFantasyDPCLeagueStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.league_infos_){from._impl_.league_infos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyDPCLeagueStatus)
}

inline void CMsgDOTAFantasyDPCLeagueStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.league_infos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTAFantasyDPCLeagueStatus::~CMsgDOTAFantasyDPCLeagueStatus() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyDPCLeagueStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAFantasyDPCLeagueStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.league_infos_.~RepeatedPtrField();
}

void CMsgDOTAFantasyDPCLeagueStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAFantasyDPCLeagueStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyDPCLeagueStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.league_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyDPCLeagueStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_league_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAFantasyDPCLeagueStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyDPCLeagueStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_league_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_league_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyDPCLeagueStatus)
  return target;
}

size_t CMsgDOTAFantasyDPCLeagueStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyDPCLeagueStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  total_size += 1UL * this->_internal_league_infos_size();
  for (const auto& msg : this->_impl_.league_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAFantasyDPCLeagueStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAFantasyDPCLeagueStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAFantasyDPCLeagueStatus::GetClassData() const { return &_class_data_; }


void CMsgDOTAFantasyDPCLeagueStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAFantasyDPCLeagueStatus*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAFantasyDPCLeagueStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyDPCLeagueStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.league_infos_.MergeFrom(from._impl_.league_infos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAFantasyDPCLeagueStatus::CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyDPCLeagueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyDPCLeagueStatus::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyDPCLeagueStatus::InternalSwap(CMsgDOTAFantasyDPCLeagueStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.league_infos_.InternalSwap(&other->_impl_.league_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyDPCLeagueStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[24]);
}

// ===================================================================

class CMsgDOTADPCSearchResults_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSearchResults_Player>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCSearchResults_Player::CMsgDOTADPCSearchResults_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults.Player)
}
CMsgDOTADPCSearchResults_Player::CMsgDOTADPCSearchResults_Player(const CMsgDOTADPCSearchResults_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCSearchResults_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_real_name()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults.Player)
}

inline void CMsgDOTADPCSearchResults_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTADPCSearchResults_Player::~CMsgDOTADPCSearchResults_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCSearchResults_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.real_name_.Destroy();
}

void CMsgDOTADPCSearchResults_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.real_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Player.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string real_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Player.real_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCSearchResults_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Player.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string real_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Player.real_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults.Player)
  return target;
}

size_t CMsgDOTADPCSearchResults_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string real_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCSearchResults_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCSearchResults_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCSearchResults_Player::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCSearchResults_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCSearchResults_Player*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCSearchResults_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCSearchResults_Player::CopyFrom(const CMsgDOTADPCSearchResults_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults_Player::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults_Player::InternalSwap(CMsgDOTADPCSearchResults_Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[25]);
}

// ===================================================================

class CMsgDOTADPCSearchResults_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSearchResults_Team>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCSearchResults_Team::CMsgDOTADPCSearchResults_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults.Team)
}
CMsgDOTADPCSearchResults_Team::CMsgDOTADPCSearchResults_Team(const CMsgDOTADPCSearchResults_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCSearchResults_Team* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults.Team)
}

inline void CMsgDOTADPCSearchResults_Team::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTADPCSearchResults_Team::~CMsgDOTADPCSearchResults_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults.Team)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCSearchResults_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.url_.Destroy();
}

void CMsgDOTADPCSearchResults_Team::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults_Team::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Team.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTADPCSearchResults.Team.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCSearchResults_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Team.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.Team.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults.Team)
  return target;
}

size_t CMsgDOTADPCSearchResults_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCSearchResults_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCSearchResults_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCSearchResults_Team::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCSearchResults_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCSearchResults_Team*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCSearchResults_Team&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults.Team)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCSearchResults_Team::CopyFrom(const CMsgDOTADPCSearchResults_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults_Team::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults_Team::InternalSwap(CMsgDOTADPCSearchResults_Team* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults_Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[26]);
}

// ===================================================================

class CMsgDOTADPCSearchResults_League::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSearchResults_League>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTADPCSearchResults_League::CMsgDOTADPCSearchResults_League(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults.League)
}
CMsgDOTADPCSearchResults_League::CMsgDOTADPCSearchResults_League(const CMsgDOTADPCSearchResults_League& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCSearchResults_League* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults.League)
}

inline void CMsgDOTADPCSearchResults_League::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTADPCSearchResults_League::~CMsgDOTADPCSearchResults_League() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults.League)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCSearchResults_League::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CMsgDOTADPCSearchResults_League::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults_League::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults.League)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults_League::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTADPCSearchResults.League.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCSearchResults_League::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults.League)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSearchResults.League.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults.League)
  return target;
}

size_t CMsgDOTADPCSearchResults_League::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults.League)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCSearchResults_League::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCSearchResults_League::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCSearchResults_League::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCSearchResults_League::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCSearchResults_League*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCSearchResults_League&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults.League)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCSearchResults_League::CopyFrom(const CMsgDOTADPCSearchResults_League& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults.League)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults_League::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults_League::InternalSwap(CMsgDOTADPCSearchResults_League* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults_League::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[27]);
}

// ===================================================================

class CMsgDOTADPCSearchResults::_Internal {
 public:
};

CMsgDOTADPCSearchResults::CMsgDOTADPCSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSearchResults)
}
CMsgDOTADPCSearchResults::CMsgDOTADPCSearchResults(const CMsgDOTADPCSearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCSearchResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.leagues_){from._impl_.leagues_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSearchResults)
}

inline void CMsgDOTADPCSearchResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.teams_){arena}
    , decltype(_impl_.leagues_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTADPCSearchResults::~CMsgDOTADPCSearchResults() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSearchResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCSearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.teams_.~RepeatedPtrField();
  _impl_.leagues_.~RepeatedPtrField();
}

void CMsgDOTADPCSearchResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCSearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSearchResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.teams_.Clear();
  _impl_.leagues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSearchResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTADPCSearchResults.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leagues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCSearchResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSearchResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSearchResults.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leagues_size()); i < n; i++) {
    const auto& repfield = this->_internal_leagues(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSearchResults)
  return target;
}

size_t CMsgDOTADPCSearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSearchResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSearchResults.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
  total_size += 1UL * this->_internal_leagues_size();
  for (const auto& msg : this->_impl_.leagues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCSearchResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCSearchResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCSearchResults::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCSearchResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCSearchResults*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCSearchResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSearchResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_impl_.leagues_.MergeFrom(from._impl_.leagues_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCSearchResults::CopyFrom(const CMsgDOTADPCSearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSearchResults::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSearchResults::InternalSwap(CMsgDOTADPCSearchResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  _impl_.leagues_.InternalSwap(&other->_impl_.leagues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSearchResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[28]);
}

// ===================================================================

class CMsgDOTADPCTeamFavoriteRankings_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCTeamFavoriteRankings_Team>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_favorites(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCTeamFavoriteRankings_Team::CMsgDOTADPCTeamFavoriteRankings_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCTeamFavoriteRankings.Team)
}
CMsgDOTADPCTeamFavoriteRankings_Team::CMsgDOTADPCTeamFavoriteRankings_Team(const CMsgDOTADPCTeamFavoriteRankings_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCTeamFavoriteRankings_Team* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.favorites_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.favorites_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.favorites_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCTeamFavoriteRankings.Team)
}

inline void CMsgDOTADPCTeamFavoriteRankings_Team::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.favorites_){0u}
  };
}

CMsgDOTADPCTeamFavoriteRankings_Team::~CMsgDOTADPCTeamFavoriteRankings_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCTeamFavoriteRankings.Team)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCTeamFavoriteRankings_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTADPCTeamFavoriteRankings_Team::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCTeamFavoriteRankings_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.favorites_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.favorites_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCTeamFavoriteRankings_Team::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 favorites = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_favorites(&has_bits);
          _impl_.favorites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCTeamFavoriteRankings_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 favorites = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_favorites(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCTeamFavoriteRankings.Team)
  return target;
}

size_t CMsgDOTADPCTeamFavoriteRankings_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 favorites = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_favorites());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCTeamFavoriteRankings_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCTeamFavoriteRankings_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCTeamFavoriteRankings_Team::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCTeamFavoriteRankings_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCTeamFavoriteRankings_Team*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCTeamFavoriteRankings_Team&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.favorites_ = from._impl_.favorites_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCTeamFavoriteRankings_Team::CopyFrom(const CMsgDOTADPCTeamFavoriteRankings_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCTeamFavoriteRankings.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCTeamFavoriteRankings_Team::IsInitialized() const {
  return true;
}

void CMsgDOTADPCTeamFavoriteRankings_Team::InternalSwap(CMsgDOTADPCTeamFavoriteRankings_Team* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCTeamFavoriteRankings_Team, _impl_.favorites_)
      + sizeof(CMsgDOTADPCTeamFavoriteRankings_Team::_impl_.favorites_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCTeamFavoriteRankings_Team, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCTeamFavoriteRankings_Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[29]);
}

// ===================================================================

class CMsgDOTADPCTeamFavoriteRankings::_Internal {
 public:
};

CMsgDOTADPCTeamFavoriteRankings::CMsgDOTADPCTeamFavoriteRankings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCTeamFavoriteRankings)
}
CMsgDOTADPCTeamFavoriteRankings::CMsgDOTADPCTeamFavoriteRankings(const CMsgDOTADPCTeamFavoriteRankings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTADPCTeamFavoriteRankings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){from._impl_.teams_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCTeamFavoriteRankings)
}

inline void CMsgDOTADPCTeamFavoriteRankings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTADPCTeamFavoriteRankings::~CMsgDOTADPCTeamFavoriteRankings() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCTeamFavoriteRankings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTADPCTeamFavoriteRankings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
}

void CMsgDOTADPCTeamFavoriteRankings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTADPCTeamFavoriteRankings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCTeamFavoriteRankings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCTeamFavoriteRankings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTADPCTeamFavoriteRankings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCTeamFavoriteRankings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCTeamFavoriteRankings)
  return target;
}

size_t CMsgDOTADPCTeamFavoriteRankings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCTeamFavoriteRankings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTADPCTeamFavoriteRankings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTADPCTeamFavoriteRankings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTADPCTeamFavoriteRankings::GetClassData() const { return &_class_data_; }


void CMsgDOTADPCTeamFavoriteRankings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTADPCTeamFavoriteRankings*>(&to_msg);
  auto& from = static_cast<const CMsgDOTADPCTeamFavoriteRankings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCTeamFavoriteRankings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTADPCTeamFavoriteRankings::CopyFrom(const CMsgDOTADPCTeamFavoriteRankings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCTeamFavoriteRankings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCTeamFavoriteRankings::IsInitialized() const {
  return true;
}

void CMsgDOTADPCTeamFavoriteRankings::InternalSwap(CMsgDOTADPCTeamFavoriteRankings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCTeamFavoriteRankings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[30]);
}

// ===================================================================

class CMsgDotaFantasyCraftingUserData_Gem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaFantasyCraftingUserData_Gem>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDotaFantasyCraftingUserData_Gem::CMsgDotaFantasyCraftingUserData_Gem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaFantasyCraftingUserData.Gem)
}
CMsgDotaFantasyCraftingUserData_Gem::CMsgDotaFantasyCraftingUserData_Gem(const CMsgDotaFantasyCraftingUserData_Gem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDotaFantasyCraftingUserData_Gem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.shape_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stat_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.stat_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaFantasyCraftingUserData.Gem)
}

inline void CMsgDotaFantasyCraftingUserData_Gem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.shape_){0u}
    , decltype(_impl_.quality_){0u}
    , decltype(_impl_.stat_){0}
  };
}

CMsgDotaFantasyCraftingUserData_Gem::~CMsgDotaFantasyCraftingUserData_Gem() {
  // @@protoc_insertion_point(destructor:CMsgDotaFantasyCraftingUserData.Gem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDotaFantasyCraftingUserData_Gem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDotaFantasyCraftingUserData_Gem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDotaFantasyCraftingUserData_Gem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaFantasyCraftingUserData.Gem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stat_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaFantasyCraftingUserData_Gem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Fantasy_Gem_Type type = 1 [default = FANTASY_GEM_TYPE_RUBY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Gem_Type_IsValid(val))) {
            _internal_set_type(static_cast<::Fantasy_Gem_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shape(&has_bits);
          _impl_.shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Fantasy_Scoring stat = 5 [default = FANTASY_SCORING_KILLS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Scoring_IsValid(val))) {
            _internal_set_stat(static_cast<::Fantasy_Scoring>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDotaFantasyCraftingUserData_Gem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaFantasyCraftingUserData.Gem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Fantasy_Gem_Type type = 1 [default = FANTASY_GEM_TYPE_RUBY];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional uint32 shape = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shape(), target);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quality(), target);
  }

  // optional .Fantasy_Scoring stat = 5 [default = FANTASY_SCORING_KILLS];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaFantasyCraftingUserData.Gem)
  return target;
}

size_t CMsgDotaFantasyCraftingUserData_Gem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaFantasyCraftingUserData.Gem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Fantasy_Gem_Type type = 1 [default = FANTASY_GEM_TYPE_RUBY];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 shape = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shape());
    }

    // optional uint32 quality = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

    // optional .Fantasy_Scoring stat = 5 [default = FANTASY_SCORING_KILLS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDotaFantasyCraftingUserData_Gem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDotaFantasyCraftingUserData_Gem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDotaFantasyCraftingUserData_Gem::GetClassData() const { return &_class_data_; }


void CMsgDotaFantasyCraftingUserData_Gem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDotaFantasyCraftingUserData_Gem*>(&to_msg);
  auto& from = static_cast<const CMsgDotaFantasyCraftingUserData_Gem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaFantasyCraftingUserData.Gem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.shape_ = from._impl_.shape_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.stat_ = from._impl_.stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDotaFantasyCraftingUserData_Gem::CopyFrom(const CMsgDotaFantasyCraftingUserData_Gem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaFantasyCraftingUserData.Gem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaFantasyCraftingUserData_Gem::IsInitialized() const {
  return true;
}

void CMsgDotaFantasyCraftingUserData_Gem::InternalSwap(CMsgDotaFantasyCraftingUserData_Gem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaFantasyCraftingUserData_Gem, _impl_.stat_)
      + sizeof(CMsgDotaFantasyCraftingUserData_Gem::_impl_.stat_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaFantasyCraftingUserData_Gem, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaFantasyCraftingUserData_Gem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[31]);
}

// ===================================================================

class CMsgDotaFantasyCraftingUserData_Tablet::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaFantasyCraftingUserData_Tablet>()._impl_._has_bits_);
  static void set_has_tablet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tablet_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_role(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDotaFantasyCraftingUserData_Tablet::CMsgDotaFantasyCraftingUserData_Tablet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaFantasyCraftingUserData.Tablet)
}
CMsgDotaFantasyCraftingUserData_Tablet::CMsgDotaFantasyCraftingUserData_Tablet(const CMsgDotaFantasyCraftingUserData_Tablet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDotaFantasyCraftingUserData_Tablet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gems_){from._impl_.gems_}
    , decltype(_impl_.tablet_id_){}
    , decltype(_impl_.tablet_level_){}
    , decltype(_impl_.fantasy_role_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.suffix_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tablet_id_, &from._impl_.tablet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.suffix_) -
    reinterpret_cast<char*>(&_impl_.tablet_id_)) + sizeof(_impl_.suffix_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaFantasyCraftingUserData.Tablet)
}

inline void CMsgDotaFantasyCraftingUserData_Tablet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gems_){arena}
    , decltype(_impl_.tablet_id_){0u}
    , decltype(_impl_.tablet_level_){0u}
    , decltype(_impl_.fantasy_role_){0}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.prefix_){0u}
    , decltype(_impl_.suffix_){0u}
  };
}

CMsgDotaFantasyCraftingUserData_Tablet::~CMsgDotaFantasyCraftingUserData_Tablet() {
  // @@protoc_insertion_point(destructor:CMsgDotaFantasyCraftingUserData.Tablet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDotaFantasyCraftingUserData_Tablet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gems_.~RepeatedPtrField();
}

void CMsgDotaFantasyCraftingUserData_Tablet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDotaFantasyCraftingUserData_Tablet::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaFantasyCraftingUserData.Tablet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gems_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.tablet_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.suffix_) -
        reinterpret_cast<char*>(&_impl_.tablet_id_)) + sizeof(_impl_.suffix_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaFantasyCraftingUserData_Tablet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tablet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tablet_id(&has_bits);
          _impl_.tablet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tablet_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tablet_level(&has_bits);
          _impl_.tablet_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Fantasy_Roles fantasy_role = 3 [default = FANTASY_ROLE_UNDEFINED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Roles_IsValid(val))) {
            _internal_set_fantasy_role(static_cast<::Fantasy_Roles>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prefix(&has_bits);
          _impl_.prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suffix = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_suffix(&has_bits);
          _impl_.suffix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDotaFantasyCraftingUserData.Gem gems = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDotaFantasyCraftingUserData_Tablet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaFantasyCraftingUserData.Tablet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tablet_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tablet_id(), target);
  }

  // optional uint32 tablet_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tablet_level(), target);
  }

  // optional .Fantasy_Roles fantasy_role = 3 [default = FANTASY_ROLE_UNDEFINED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fantasy_role(), target);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account_id(), target);
  }

  // optional uint32 prefix = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_prefix(), target);
  }

  // optional uint32 suffix = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_suffix(), target);
  }

  // repeated .CMsgDotaFantasyCraftingUserData.Gem gems = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gems_size()); i < n; i++) {
    const auto& repfield = this->_internal_gems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaFantasyCraftingUserData.Tablet)
  return target;
}

size_t CMsgDotaFantasyCraftingUserData_Tablet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaFantasyCraftingUserData.Tablet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDotaFantasyCraftingUserData.Gem gems = 7;
  total_size += 1UL * this->_internal_gems_size();
  for (const auto& msg : this->_impl_.gems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 tablet_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tablet_id());
    }

    // optional uint32 tablet_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tablet_level());
    }

    // optional .Fantasy_Roles fantasy_role = 3 [default = FANTASY_ROLE_UNDEFINED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fantasy_role());
    }

    // optional uint32 account_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 prefix = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prefix());
    }

    // optional uint32 suffix = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_suffix());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDotaFantasyCraftingUserData_Tablet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDotaFantasyCraftingUserData_Tablet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDotaFantasyCraftingUserData_Tablet::GetClassData() const { return &_class_data_; }


void CMsgDotaFantasyCraftingUserData_Tablet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDotaFantasyCraftingUserData_Tablet*>(&to_msg);
  auto& from = static_cast<const CMsgDotaFantasyCraftingUserData_Tablet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaFantasyCraftingUserData.Tablet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gems_.MergeFrom(from._impl_.gems_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tablet_id_ = from._impl_.tablet_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tablet_level_ = from._impl_.tablet_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fantasy_role_ = from._impl_.fantasy_role_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.prefix_ = from._impl_.prefix_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.suffix_ = from._impl_.suffix_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDotaFantasyCraftingUserData_Tablet::CopyFrom(const CMsgDotaFantasyCraftingUserData_Tablet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaFantasyCraftingUserData.Tablet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaFantasyCraftingUserData_Tablet::IsInitialized() const {
  return true;
}

void CMsgDotaFantasyCraftingUserData_Tablet::InternalSwap(CMsgDotaFantasyCraftingUserData_Tablet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gems_.InternalSwap(&other->_impl_.gems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaFantasyCraftingUserData_Tablet, _impl_.suffix_)
      + sizeof(CMsgDotaFantasyCraftingUserData_Tablet::_impl_.suffix_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaFantasyCraftingUserData_Tablet, _impl_.tablet_id_)>(
          reinterpret_cast<char*>(&_impl_.tablet_id_),
          reinterpret_cast<char*>(&other->_impl_.tablet_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaFantasyCraftingUserData_Tablet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[32]);
}

// ===================================================================

class CMsgDotaFantasyCraftingUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaFantasyCraftingUserData>()._impl_._has_bits_);
  static void set_has_roll_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDotaFantasyCraftingUserData::CMsgDotaFantasyCraftingUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaFantasyCraftingUserData)
}
CMsgDotaFantasyCraftingUserData::CMsgDotaFantasyCraftingUserData(const CMsgDotaFantasyCraftingUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDotaFantasyCraftingUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tablets_){from._impl_.tablets_}
    , decltype(_impl_.available_rolls_){from._impl_.available_rolls_}
    , decltype(_impl_.roll_tokens_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roll_tokens_ = from._impl_.roll_tokens_;
  // @@protoc_insertion_point(copy_constructor:CMsgDotaFantasyCraftingUserData)
}

inline void CMsgDotaFantasyCraftingUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tablets_){arena}
    , decltype(_impl_.available_rolls_){arena}
    , decltype(_impl_.roll_tokens_){0u}
  };
}

CMsgDotaFantasyCraftingUserData::~CMsgDotaFantasyCraftingUserData() {
  // @@protoc_insertion_point(destructor:CMsgDotaFantasyCraftingUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDotaFantasyCraftingUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tablets_.~RepeatedPtrField();
  _impl_.available_rolls_.~RepeatedField();
}

void CMsgDotaFantasyCraftingUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDotaFantasyCraftingUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaFantasyCraftingUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tablets_.Clear();
  _impl_.available_rolls_.Clear();
  _impl_.roll_tokens_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaFantasyCraftingUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDotaFantasyCraftingUserData.Tablet tablets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tablets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 available_rolls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_available_rolls(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_available_rolls(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roll_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_roll_tokens(&has_bits);
          _impl_.roll_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDotaFantasyCraftingUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaFantasyCraftingUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDotaFantasyCraftingUserData.Tablet tablets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tablets_size()); i < n; i++) {
    const auto& repfield = this->_internal_tablets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 available_rolls = 2;
  for (int i = 0, n = this->_internal_available_rolls_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_available_rolls(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 roll_tokens = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roll_tokens(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaFantasyCraftingUserData)
  return target;
}

size_t CMsgDotaFantasyCraftingUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaFantasyCraftingUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDotaFantasyCraftingUserData.Tablet tablets = 1;
  total_size += 1UL * this->_internal_tablets_size();
  for (const auto& msg : this->_impl_.tablets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 available_rolls = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.available_rolls_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_available_rolls_size());
    total_size += data_size;
  }

  // optional uint32 roll_tokens = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roll_tokens());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDotaFantasyCraftingUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDotaFantasyCraftingUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDotaFantasyCraftingUserData::GetClassData() const { return &_class_data_; }


void CMsgDotaFantasyCraftingUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDotaFantasyCraftingUserData*>(&to_msg);
  auto& from = static_cast<const CMsgDotaFantasyCraftingUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaFantasyCraftingUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tablets_.MergeFrom(from._impl_.tablets_);
  _this->_impl_.available_rolls_.MergeFrom(from._impl_.available_rolls_);
  if (from._internal_has_roll_tokens()) {
    _this->_internal_set_roll_tokens(from._internal_roll_tokens());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDotaFantasyCraftingUserData::CopyFrom(const CMsgDotaFantasyCraftingUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaFantasyCraftingUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaFantasyCraftingUserData::IsInitialized() const {
  return true;
}

void CMsgDotaFantasyCraftingUserData::InternalSwap(CMsgDotaFantasyCraftingUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tablets_.InternalSwap(&other->_impl_.tablets_);
  _impl_.available_rolls_.InternalSwap(&other->_impl_.available_rolls_);
  swap(_impl_.roll_tokens_, other->_impl_.roll_tokens_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaFantasyCraftingUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[33]);
}

// ===================================================================

class CMsgClientToGCFantasyCraftingGetUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFantasyCraftingGetUserData>()._impl_._has_bits_);
  static void set_has_fantasy_league(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCFantasyCraftingGetUserData::CMsgClientToGCFantasyCraftingGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFantasyCraftingGetUserData)
}
CMsgClientToGCFantasyCraftingGetUserData::CMsgClientToGCFantasyCraftingGetUserData(const CMsgClientToGCFantasyCraftingGetUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFantasyCraftingGetUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fantasy_league_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fantasy_league_, &from._impl_.fantasy_league_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_id_) -
    reinterpret_cast<char*>(&_impl_.fantasy_league_)) + sizeof(_impl_.account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFantasyCraftingGetUserData)
}

inline void CMsgClientToGCFantasyCraftingGetUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fantasy_league_){0u}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgClientToGCFantasyCraftingGetUserData::~CMsgClientToGCFantasyCraftingGetUserData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFantasyCraftingGetUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFantasyCraftingGetUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFantasyCraftingGetUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFantasyCraftingGetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFantasyCraftingGetUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.fantasy_league_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.account_id_) -
        reinterpret_cast<char*>(&_impl_.fantasy_league_)) + sizeof(_impl_.account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFantasyCraftingGetUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fantasy_league = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fantasy_league(&has_bits);
          _impl_.fantasy_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFantasyCraftingGetUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFantasyCraftingGetUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 fantasy_league = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFantasyCraftingGetUserData)
  return target;
}

size_t CMsgClientToGCFantasyCraftingGetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFantasyCraftingGetUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fantasy_league = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_league());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFantasyCraftingGetUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFantasyCraftingGetUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFantasyCraftingGetUserData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFantasyCraftingGetUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFantasyCraftingGetUserData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFantasyCraftingGetUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFantasyCraftingGetUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fantasy_league_ = from._impl_.fantasy_league_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFantasyCraftingGetUserData::CopyFrom(const CMsgClientToGCFantasyCraftingGetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFantasyCraftingGetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFantasyCraftingGetUserData::IsInitialized() const {
  return true;
}

void CMsgClientToGCFantasyCraftingGetUserData::InternalSwap(CMsgClientToGCFantasyCraftingGetUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingGetUserData, _impl_.account_id_)
      + sizeof(CMsgClientToGCFantasyCraftingGetUserData::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingGetUserData, _impl_.fantasy_league_)>(
          reinterpret_cast<char*>(&_impl_.fantasy_league_),
          reinterpret_cast<char*>(&other->_impl_.fantasy_league_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFantasyCraftingGetUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[34]);
}

// ===================================================================

class CMsgClientToGCFantasyCraftingGetUserDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFantasyCraftingGetUserDataResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDotaFantasyCraftingUserData& user_data(const CMsgClientToGCFantasyCraftingGetUserDataResponse* msg);
  static void set_has_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDotaFantasyCraftingUserData&
CMsgClientToGCFantasyCraftingGetUserDataResponse::_Internal::user_data(const CMsgClientToGCFantasyCraftingGetUserDataResponse* msg) {
  return *msg->_impl_.user_data_;
}
CMsgClientToGCFantasyCraftingGetUserDataResponse::CMsgClientToGCFantasyCraftingGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFantasyCraftingGetUserDataResponse)
}
CMsgClientToGCFantasyCraftingGetUserDataResponse::CMsgClientToGCFantasyCraftingGetUserDataResponse(const CMsgClientToGCFantasyCraftingGetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFantasyCraftingGetUserDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::CMsgDotaFantasyCraftingUserData(*from._impl_.user_data_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFantasyCraftingGetUserDataResponse)
}

inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCFantasyCraftingGetUserDataResponse::~CMsgClientToGCFantasyCraftingGetUserDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFantasyCraftingGetUserDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void CMsgClientToGCFantasyCraftingGetUserDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFantasyCraftingGetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFantasyCraftingGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.user_data_ != nullptr);
    _impl_.user_data_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFantasyCraftingGetUserDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCFantasyCraftingGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFantasyCraftingGetUserDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFantasyCraftingGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCFantasyCraftingGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFantasyCraftingGetUserDataResponse)
  return target;
}

size_t CMsgClientToGCFantasyCraftingGetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFantasyCraftingGetUserDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_data_);
    }

    // optional .CMsgClientToGCFantasyCraftingGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFantasyCraftingGetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFantasyCraftingGetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFantasyCraftingGetUserDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFantasyCraftingGetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFantasyCraftingGetUserDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFantasyCraftingGetUserDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFantasyCraftingGetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user_data()->::CMsgDotaFantasyCraftingUserData::MergeFrom(
          from._internal_user_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFantasyCraftingGetUserDataResponse::CopyFrom(const CMsgClientToGCFantasyCraftingGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFantasyCraftingGetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFantasyCraftingGetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCFantasyCraftingGetUserDataResponse::InternalSwap(CMsgClientToGCFantasyCraftingGetUserDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingGetUserDataResponse, _impl_.response_)
      + sizeof(CMsgClientToGCFantasyCraftingGetUserDataResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingGetUserDataResponse, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFantasyCraftingGetUserDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[35]);
}

// ===================================================================

class CMsgClientToGCFantasyCraftingPerformOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFantasyCraftingPerformOperation>()._impl_._has_bits_);
  static void set_has_fantasy_league(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tablet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_extra_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCFantasyCraftingPerformOperation::CMsgClientToGCFantasyCraftingPerformOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFantasyCraftingPerformOperation)
}
CMsgClientToGCFantasyCraftingPerformOperation::CMsgClientToGCFantasyCraftingPerformOperation(const CMsgClientToGCFantasyCraftingPerformOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFantasyCraftingPerformOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fantasy_league_){}
    , decltype(_impl_.tablet_id_){}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.operation_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fantasy_league_, &from._impl_.fantasy_league_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_id_) -
    reinterpret_cast<char*>(&_impl_.fantasy_league_)) + sizeof(_impl_.operation_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFantasyCraftingPerformOperation)
}

inline void CMsgClientToGCFantasyCraftingPerformOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fantasy_league_){0u}
    , decltype(_impl_.tablet_id_){0u}
    , decltype(_impl_.extra_data_){uint64_t{0u}}
    , decltype(_impl_.operation_id_){0u}
  };
}

CMsgClientToGCFantasyCraftingPerformOperation::~CMsgClientToGCFantasyCraftingPerformOperation() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFantasyCraftingPerformOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFantasyCraftingPerformOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFantasyCraftingPerformOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFantasyCraftingPerformOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFantasyCraftingPerformOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.fantasy_league_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.operation_id_) -
        reinterpret_cast<char*>(&_impl_.fantasy_league_)) + sizeof(_impl_.operation_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFantasyCraftingPerformOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fantasy_league = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fantasy_league(&has_bits);
          _impl_.fantasy_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tablet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tablet_id(&has_bits);
          _impl_.tablet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 operation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_operation_id(&has_bits);
          _impl_.operation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 extra_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_extra_data(&has_bits);
          _impl_.extra_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFantasyCraftingPerformOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFantasyCraftingPerformOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 fantasy_league = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league(), target);
  }

  // optional uint32 tablet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tablet_id(), target);
  }

  // optional uint32 operation_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_operation_id(), target);
  }

  // optional uint64 extra_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_extra_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFantasyCraftingPerformOperation)
  return target;
}

size_t CMsgClientToGCFantasyCraftingPerformOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFantasyCraftingPerformOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_league());
    }

    // optional uint32 tablet_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tablet_id());
    }

    // optional uint64 extra_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_extra_data());
    }

    // optional uint32 operation_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operation_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFantasyCraftingPerformOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFantasyCraftingPerformOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFantasyCraftingPerformOperation::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFantasyCraftingPerformOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFantasyCraftingPerformOperation*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFantasyCraftingPerformOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFantasyCraftingPerformOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fantasy_league_ = from._impl_.fantasy_league_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tablet_id_ = from._impl_.tablet_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extra_data_ = from._impl_.extra_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.operation_id_ = from._impl_.operation_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFantasyCraftingPerformOperation::CopyFrom(const CMsgClientToGCFantasyCraftingPerformOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFantasyCraftingPerformOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFantasyCraftingPerformOperation::IsInitialized() const {
  return true;
}

void CMsgClientToGCFantasyCraftingPerformOperation::InternalSwap(CMsgClientToGCFantasyCraftingPerformOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingPerformOperation, _impl_.operation_id_)
      + sizeof(CMsgClientToGCFantasyCraftingPerformOperation::_impl_.operation_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingPerformOperation, _impl_.fantasy_league_)>(
          reinterpret_cast<char*>(&_impl_.fantasy_league_),
          reinterpret_cast<char*>(&other->_impl_.fantasy_league_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFantasyCraftingPerformOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[36]);
}

// ===================================================================

class CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice>()._impl_._has_bits_);
  static void set_has_prefix_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suffix_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
}
CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefix_choice_){}
    , decltype(_impl_.suffix_choice_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.prefix_choice_, &from._impl_.prefix_choice_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.suffix_choice_) -
    reinterpret_cast<char*>(&_impl_.prefix_choice_)) + sizeof(_impl_.suffix_choice_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
}

inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prefix_choice_){0u}
    , decltype(_impl_.suffix_choice_){0u}
  };
}

CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::~CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.prefix_choice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.suffix_choice_) -
        reinterpret_cast<char*>(&_impl_.prefix_choice_)) + sizeof(_impl_.suffix_choice_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 prefix_choice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_prefix_choice(&has_bits);
          _impl_.prefix_choice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suffix_choice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_suffix_choice(&has_bits);
          _impl_.suffix_choice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 prefix_choice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prefix_choice(), target);
  }

  // optional uint32 suffix_choice = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_suffix_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
  return target;
}

size_t CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 prefix_choice = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prefix_choice());
    }

    // optional uint32 suffix_choice = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_suffix_choice());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.prefix_choice_ = from._impl_.prefix_choice_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.suffix_choice_ = from._impl_.suffix_choice_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::CopyFrom(const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::IsInitialized() const {
  return true;
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::InternalSwap(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice, _impl_.suffix_choice_)
      + sizeof(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_impl_.suffix_choice_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice, _impl_.prefix_choice_)>(
          reinterpret_cast<char*>(&_impl_.prefix_choice_),
          reinterpret_cast<char*>(&other->_impl_.prefix_choice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[37]);
}

// ===================================================================

class CMsgClientToGCFantasyCraftingPerformOperationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFantasyCraftingPerformOperationResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCFantasyCraftingPerformOperationResponse::CMsgClientToGCFantasyCraftingPerformOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFantasyCraftingPerformOperationResponse)
}
CMsgClientToGCFantasyCraftingPerformOperationResponse::CMsgClientToGCFantasyCraftingPerformOperationResponse(const CMsgClientToGCFantasyCraftingPerformOperationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFantasyCraftingPerformOperationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_choices_){from._impl_.player_choices_}
    , decltype(_impl_.prefix_choices_){from._impl_.prefix_choices_}
    , decltype(_impl_.suffix_choices_){from._impl_.suffix_choices_}
    , decltype(_impl_.title_choices_){from._impl_.title_choices_}
    , decltype(_impl_.response_){}
    , decltype(_impl_.operation_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.response_, &from._impl_.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_id_) -
    reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.operation_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFantasyCraftingPerformOperationResponse)
}

inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_choices_){arena}
    , decltype(_impl_.prefix_choices_){arena}
    , decltype(_impl_.suffix_choices_){arena}
    , decltype(_impl_.title_choices_){arena}
    , decltype(_impl_.response_){0}
    , decltype(_impl_.operation_id_){0u}
  };
}

CMsgClientToGCFantasyCraftingPerformOperationResponse::~CMsgClientToGCFantasyCraftingPerformOperationResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFantasyCraftingPerformOperationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_choices_.~RepeatedField();
  _impl_.prefix_choices_.~RepeatedField();
  _impl_.suffix_choices_.~RepeatedField();
  _impl_.title_choices_.~RepeatedPtrField();
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFantasyCraftingPerformOperationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_choices_.Clear();
  _impl_.prefix_choices_.Clear();
  _impl_.suffix_choices_.Clear();
  _impl_.title_choices_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.operation_id_) -
        reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.operation_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFantasyCraftingPerformOperationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 operation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_operation_id(&has_bits);
          _impl_.operation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 player_choices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_choices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_choices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 prefix_choices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_prefix_choices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_prefix_choices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 suffix_choices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_suffix_choices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_suffix_choices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice title_choices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_title_choices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFantasyCraftingPerformOperationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFantasyCraftingPerformOperationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint32 operation_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_operation_id(), target);
  }

  // repeated uint32 player_choices = 3;
  for (int i = 0, n = this->_internal_player_choices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_choices(i), target);
  }

  // repeated uint32 prefix_choices = 4;
  for (int i = 0, n = this->_internal_prefix_choices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prefix_choices(i), target);
  }

  // repeated uint32 suffix_choices = 5;
  for (int i = 0, n = this->_internal_suffix_choices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_suffix_choices(i), target);
  }

  // repeated .CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice title_choices = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_title_choices_size()); i < n; i++) {
    const auto& repfield = this->_internal_title_choices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFantasyCraftingPerformOperationResponse)
  return target;
}

size_t CMsgClientToGCFantasyCraftingPerformOperationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFantasyCraftingPerformOperationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 player_choices = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.player_choices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_choices_size());
    total_size += data_size;
  }

  // repeated uint32 prefix_choices = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.prefix_choices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_prefix_choices_size());
    total_size += data_size;
  }

  // repeated uint32 suffix_choices = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.suffix_choices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_suffix_choices_size());
    total_size += data_size;
  }

  // repeated .CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice title_choices = 6;
  total_size += 1UL * this->_internal_title_choices_size();
  for (const auto& msg : this->_impl_.title_choices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

    // optional uint32 operation_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operation_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFantasyCraftingPerformOperationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFantasyCraftingPerformOperationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFantasyCraftingPerformOperationResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFantasyCraftingPerformOperationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFantasyCraftingPerformOperationResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFantasyCraftingPerformOperationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFantasyCraftingPerformOperationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_choices_.MergeFrom(from._impl_.player_choices_);
  _this->_impl_.prefix_choices_.MergeFrom(from._impl_.prefix_choices_);
  _this->_impl_.suffix_choices_.MergeFrom(from._impl_.suffix_choices_);
  _this->_impl_.title_choices_.MergeFrom(from._impl_.title_choices_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operation_id_ = from._impl_.operation_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse::CopyFrom(const CMsgClientToGCFantasyCraftingPerformOperationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFantasyCraftingPerformOperationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFantasyCraftingPerformOperationResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCFantasyCraftingPerformOperationResponse::InternalSwap(CMsgClientToGCFantasyCraftingPerformOperationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_choices_.InternalSwap(&other->_impl_.player_choices_);
  _impl_.prefix_choices_.InternalSwap(&other->_impl_.prefix_choices_);
  _impl_.suffix_choices_.InternalSwap(&other->_impl_.suffix_choices_);
  _impl_.title_choices_.InternalSwap(&other->_impl_.title_choices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.operation_id_)
      + sizeof(CMsgClientToGCFantasyCraftingPerformOperationResponse::_impl_.operation_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingPerformOperationResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFantasyCraftingPerformOperationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[38]);
}

// ===================================================================

class CMsgGCToClientFantasyCraftingDataUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientFantasyCraftingDataUpdated>()._impl_._has_bits_);
  static void set_has_fantasy_league(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDotaFantasyCraftingUserData& user_data(const CMsgGCToClientFantasyCraftingDataUpdated* msg);
  static void set_has_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDotaFantasyCraftingUserData&
CMsgGCToClientFantasyCraftingDataUpdated::_Internal::user_data(const CMsgGCToClientFantasyCraftingDataUpdated* msg) {
  return *msg->_impl_.user_data_;
}
CMsgGCToClientFantasyCraftingDataUpdated::CMsgGCToClientFantasyCraftingDataUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientFantasyCraftingDataUpdated)
}
CMsgGCToClientFantasyCraftingDataUpdated::CMsgGCToClientFantasyCraftingDataUpdated(const CMsgGCToClientFantasyCraftingDataUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientFantasyCraftingDataUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.fantasy_league_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::CMsgDotaFantasyCraftingUserData(*from._impl_.user_data_);
  }
  _this->_impl_.fantasy_league_ = from._impl_.fantasy_league_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFantasyCraftingDataUpdated)
}

inline void CMsgGCToClientFantasyCraftingDataUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.fantasy_league_){0u}
  };
}

CMsgGCToClientFantasyCraftingDataUpdated::~CMsgGCToClientFantasyCraftingDataUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFantasyCraftingDataUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientFantasyCraftingDataUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void CMsgGCToClientFantasyCraftingDataUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientFantasyCraftingDataUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientFantasyCraftingDataUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.user_data_ != nullptr);
    _impl_.user_data_->Clear();
  }
  _impl_.fantasy_league_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientFantasyCraftingDataUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fantasy_league = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fantasy_league(&has_bits);
          _impl_.fantasy_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientFantasyCraftingDataUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFantasyCraftingDataUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 fantasy_league = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league(), target);
  }

  // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFantasyCraftingDataUpdated)
  return target;
}

size_t CMsgGCToClientFantasyCraftingDataUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientFantasyCraftingDataUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_data_);
    }

    // optional uint32 fantasy_league = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_league());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientFantasyCraftingDataUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientFantasyCraftingDataUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientFantasyCraftingDataUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCToClientFantasyCraftingDataUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientFantasyCraftingDataUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientFantasyCraftingDataUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientFantasyCraftingDataUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user_data()->::CMsgDotaFantasyCraftingUserData::MergeFrom(
          from._internal_user_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fantasy_league_ = from._impl_.fantasy_league_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientFantasyCraftingDataUpdated::CopyFrom(const CMsgGCToClientFantasyCraftingDataUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientFantasyCraftingDataUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFantasyCraftingDataUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientFantasyCraftingDataUpdated::InternalSwap(CMsgGCToClientFantasyCraftingDataUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientFantasyCraftingDataUpdated, _impl_.fantasy_league_)
      + sizeof(CMsgGCToClientFantasyCraftingDataUpdated::_impl_.fantasy_league_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientFantasyCraftingDataUpdated, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientFantasyCraftingDataUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[39]);
}

// ===================================================================

class CMsgClientToGCFantasyCraftingDevModifyTablet::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFantasyCraftingDevModifyTablet>()._impl_._has_bits_);
  static void set_has_fantasy_league(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reset_tablet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modify_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tablet_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCFantasyCraftingDevModifyTablet::CMsgClientToGCFantasyCraftingDevModifyTablet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFantasyCraftingDevModifyTablet)
}
CMsgClientToGCFantasyCraftingDevModifyTablet::CMsgClientToGCFantasyCraftingDevModifyTablet(const CMsgClientToGCFantasyCraftingDevModifyTablet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFantasyCraftingDevModifyTablet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fantasy_league_){}
    , decltype(_impl_.reset_tablet_){}
    , decltype(_impl_.modify_tokens_){}
    , decltype(_impl_.tablet_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fantasy_league_, &from._impl_.fantasy_league_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tablet_level_) -
    reinterpret_cast<char*>(&_impl_.fantasy_league_)) + sizeof(_impl_.tablet_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFantasyCraftingDevModifyTablet)
}

inline void CMsgClientToGCFantasyCraftingDevModifyTablet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fantasy_league_){0u}
    , decltype(_impl_.reset_tablet_){false}
    , decltype(_impl_.modify_tokens_){0u}
    , decltype(_impl_.tablet_level_){0u}
  };
}

CMsgClientToGCFantasyCraftingDevModifyTablet::~CMsgClientToGCFantasyCraftingDevModifyTablet() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFantasyCraftingDevModifyTablet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFantasyCraftingDevModifyTablet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFantasyCraftingDevModifyTablet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFantasyCraftingDevModifyTablet::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFantasyCraftingDevModifyTablet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.fantasy_league_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tablet_level_) -
        reinterpret_cast<char*>(&_impl_.fantasy_league_)) + sizeof(_impl_.tablet_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFantasyCraftingDevModifyTablet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fantasy_league = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fantasy_league(&has_bits);
          _impl_.fantasy_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reset_tablet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reset_tablet(&has_bits);
          _impl_.reset_tablet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 modify_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_modify_tokens(&has_bits);
          _impl_.modify_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tablet_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tablet_level(&has_bits);
          _impl_.tablet_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFantasyCraftingDevModifyTablet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFantasyCraftingDevModifyTablet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 fantasy_league = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fantasy_league(), target);
  }

  // optional bool reset_tablet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_reset_tablet(), target);
  }

  // optional uint32 modify_tokens = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modify_tokens(), target);
  }

  // optional uint32 tablet_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tablet_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFantasyCraftingDevModifyTablet)
  return target;
}

size_t CMsgClientToGCFantasyCraftingDevModifyTablet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFantasyCraftingDevModifyTablet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fantasy_league = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_league());
    }

    // optional bool reset_tablet = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 modify_tokens = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_modify_tokens());
    }

    // optional uint32 tablet_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tablet_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFantasyCraftingDevModifyTablet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFantasyCraftingDevModifyTablet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFantasyCraftingDevModifyTablet::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFantasyCraftingDevModifyTablet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFantasyCraftingDevModifyTablet*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFantasyCraftingDevModifyTablet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFantasyCraftingDevModifyTablet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fantasy_league_ = from._impl_.fantasy_league_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reset_tablet_ = from._impl_.reset_tablet_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.modify_tokens_ = from._impl_.modify_tokens_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tablet_level_ = from._impl_.tablet_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFantasyCraftingDevModifyTablet::CopyFrom(const CMsgClientToGCFantasyCraftingDevModifyTablet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFantasyCraftingDevModifyTablet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFantasyCraftingDevModifyTablet::IsInitialized() const {
  return true;
}

void CMsgClientToGCFantasyCraftingDevModifyTablet::InternalSwap(CMsgClientToGCFantasyCraftingDevModifyTablet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingDevModifyTablet, _impl_.tablet_level_)
      + sizeof(CMsgClientToGCFantasyCraftingDevModifyTablet::_impl_.tablet_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFantasyCraftingDevModifyTablet, _impl_.fantasy_league_)>(
          reinterpret_cast<char*>(&_impl_.fantasy_league_),
          reinterpret_cast<char*>(&other->_impl_.fantasy_league_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFantasyCraftingDevModifyTablet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[40]);
}

// ===================================================================

class CMsgClientToGCFantasyCraftingDevModifyTabletResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFantasyCraftingDevModifyTabletResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCFantasyCraftingDevModifyTabletResponse::CMsgClientToGCFantasyCraftingDevModifyTabletResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
}
CMsgClientToGCFantasyCraftingDevModifyTabletResponse::CMsgClientToGCFantasyCraftingDevModifyTabletResponse(const CMsgClientToGCFantasyCraftingDevModifyTabletResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
}

inline void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCFantasyCraftingDevModifyTabletResponse::~CMsgClientToGCFantasyCraftingDevModifyTabletResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFantasyCraftingDevModifyTabletResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFantasyCraftingDevModifyTabletResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
  return target;
}

size_t CMsgClientToGCFantasyCraftingDevModifyTabletResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFantasyCraftingDevModifyTabletResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFantasyCraftingDevModifyTabletResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFantasyCraftingDevModifyTabletResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFantasyCraftingDevModifyTabletResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::CopyFrom(const CMsgClientToGCFantasyCraftingDevModifyTabletResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFantasyCraftingDevModifyTabletResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::InternalSwap(CMsgClientToGCFantasyCraftingDevModifyTabletResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFantasyCraftingDevModifyTabletResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5ffantasy_2eproto[41]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfo_Results*
Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfo_Results >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfo_Results >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfo_AuditEntry*
Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfo_AuditEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfo_AuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfo*
Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerInfoList*
Arena::CreateMaybeMessage< ::CMsgDOTAPlayerInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamRoster*
Arena::CreateMaybeMessage< ::CMsgDOTATeamRoster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamRoster >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCProfileInfo_PredictionInfo*
Arena::CreateMaybeMessage< ::CMsgDOTADPCProfileInfo_PredictionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCProfileInfo_PredictionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCProfileInfo_FantasyInfo*
Arena::CreateMaybeMessage< ::CMsgDOTADPCProfileInfo_FantasyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCProfileInfo_FantasyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCProfileInfo*
Arena::CreateMaybeMessage< ::CMsgDOTADPCProfileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaderboards_RegionLeaderboard*
Arena::CreateMaybeMessage< ::CMsgDOTALeaderboards_RegionLeaderboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaderboards_RegionLeaderboard >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaderboards*
Arena::CreateMaybeMessage< ::CMsgDOTALeaderboards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaderboards >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportVoteTeamGuess*
Arena::CreateMaybeMessage< ::CMsgDOTAPassportVoteTeamGuess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportVoteTeamGuess >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportVoteGenericSelection*
Arena::CreateMaybeMessage< ::CMsgDOTAPassportVoteGenericSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportVoteGenericSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportStampedPlayer*
Arena::CreateMaybeMessage< ::CMsgDOTAPassportStampedPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportStampedPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportPlayerCardChallenge*
Arena::CreateMaybeMessage< ::CMsgDOTAPassportPlayerCardChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportPlayerCardChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPassportVote*
Arena::CreateMaybeMessage< ::CMsgDOTAPassportVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPassportVote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetPlayerCardRosterRequest*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetPlayerCardRosterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetPlayerCardRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetPlayerCardRosterResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetPlayerCardRosterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetPlayerCardRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp*
Arena::CreateMaybeMessage< ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBatchGetPlayerCardRosterRequest*
Arena::CreateMaybeMessage< ::CMsgClientToGCBatchGetPlayerCardRosterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBatchGetPlayerCardRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBatchGetPlayerCardRosterResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCBatchGetPlayerCardRosterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBatchGetPlayerCardRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetPlayerCardRosterRequest*
Arena::CreateMaybeMessage< ::CMsgClientToGCSetPlayerCardRosterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetPlayerCardRosterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetPlayerCardRosterResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCSetPlayerCardRosterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetPlayerCardRosterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo*
Arena::CreateMaybeMessage< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyDPCLeagueStatus*
Arena::CreateMaybeMessage< ::CMsgDOTAFantasyDPCLeagueStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyDPCLeagueStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults_Player*
Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults_Team*
Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults_League*
Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults_League >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults_League >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSearchResults*
Arena::CreateMaybeMessage< ::CMsgDOTADPCSearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCTeamFavoriteRankings_Team*
Arena::CreateMaybeMessage< ::CMsgDOTADPCTeamFavoriteRankings_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCTeamFavoriteRankings_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCTeamFavoriteRankings*
Arena::CreateMaybeMessage< ::CMsgDOTADPCTeamFavoriteRankings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCTeamFavoriteRankings >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaFantasyCraftingUserData_Gem*
Arena::CreateMaybeMessage< ::CMsgDotaFantasyCraftingUserData_Gem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaFantasyCraftingUserData_Gem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaFantasyCraftingUserData_Tablet*
Arena::CreateMaybeMessage< ::CMsgDotaFantasyCraftingUserData_Tablet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaFantasyCraftingUserData_Tablet >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaFantasyCraftingUserData*
Arena::CreateMaybeMessage< ::CMsgDotaFantasyCraftingUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaFantasyCraftingUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFantasyCraftingGetUserData*
Arena::CreateMaybeMessage< ::CMsgClientToGCFantasyCraftingGetUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFantasyCraftingGetUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFantasyCraftingGetUserDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCFantasyCraftingGetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFantasyCraftingGetUserDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFantasyCraftingPerformOperation*
Arena::CreateMaybeMessage< ::CMsgClientToGCFantasyCraftingPerformOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFantasyCraftingPerformOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice*
Arena::CreateMaybeMessage< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFantasyCraftingPerformOperationResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCFantasyCraftingPerformOperationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFantasyCraftingPerformOperationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientFantasyCraftingDataUpdated*
Arena::CreateMaybeMessage< ::CMsgGCToClientFantasyCraftingDataUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientFantasyCraftingDataUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFantasyCraftingDevModifyTablet*
Arena::CreateMaybeMessage< ::CMsgClientToGCFantasyCraftingDevModifyTablet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFantasyCraftingDevModifyTablet >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
