// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usermessages.proto

#include "dota_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CDOTAUserMsg_AIDebugLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AIDebugLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AIDebugLineDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AIDebugLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AIDebugLineDefaultTypeInternal _CDOTAUserMsg_AIDebugLine_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_)*/0u
  , /*decltype(_impl_.loss_)*/0u} {}
struct CDOTAUserMsg_PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PingDefaultTypeInternal _CDOTAUserMsg_Ping_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_SwapVerifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SwapVerifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SwapVerifyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SwapVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SwapVerifyDefaultTypeInternal _CDOTAUserMsg_SwapVerify_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.value2_)*/0u
  , /*decltype(_impl_.value3_)*/0u
  , /*decltype(_impl_.playerid_6_)*/-1
  , /*decltype(_impl_.type_)*/-1
  , /*decltype(_impl_.playerid_1_)*/-1
  , /*decltype(_impl_.playerid_2_)*/-1
  , /*decltype(_impl_.playerid_3_)*/-1
  , /*decltype(_impl_.playerid_4_)*/-1
  , /*decltype(_impl_.playerid_5_)*/-1} {}
struct CDOTAUserMsg_ChatEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ChatEventDefaultTypeInternal _CDOTAUserMsg_ChatEvent_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_only_)*/false
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_BotChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_BotChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BotChatDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BotChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_BotChatDefaultTypeInternal _CDOTAUserMsg_BotChat_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.world_pos_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.health_)*/0} {}
struct CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CombatHeroPositions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal _CDOTAUserMsg_CombatHeroPositions_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CombatLogBulkData::CDOTAUserMsg_CombatLogBulkData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.combat_entries_)*/{}
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.request_time_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CombatLogBulkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal _CDOTAUserMsg_CombatLogBulkData_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ProjectileParticleCPData::CDOTAUserMsg_ProjectileParticleCPData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vector_)*/nullptr
  , /*decltype(_impl_.control_point_)*/0} {}
struct CDOTAUserMsg_ProjectileParticleCPDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ProjectileParticleCPDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ProjectileParticleCPDataDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ProjectileParticleCPData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ProjectileParticleCPDataDefaultTypeInternal _CDOTAUserMsg_ProjectileParticleCPData_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal _CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.attacker_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_damage_)*/0
  , /*decltype(_impl_.attacker_)*/16777215u} {}
struct CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniKillCamInfo_Attacker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal _CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attackers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniKillCamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal _CDOTAUserMsg_MiniKillCamInfo_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_.duration_)*/0} {}
struct CDOTAUserMsg_GlobalLightColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_GlobalLightColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GlobalLightColorDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GlobalLightColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_GlobalLightColorDefaultTypeInternal _CDOTAUserMsg_GlobalLightColor_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_.duration_)*/0} {}
struct CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GlobalLightDirection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal _CDOTAUserMsg_GlobalLightDirection_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_ping_)*/nullptr
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_LocationPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_LocationPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_LocationPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_LocationPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_LocationPingDefaultTypeInternal _CDOTAUserMsg_LocationPing_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PingConfirmation::CDOTAUserMsg_PingConfirmation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.entity_index_)*/0u
  , /*decltype(_impl_.icon_type_)*/0u
  , /*decltype(_impl_.player_id_of_original_pinger_)*/-1} {}
struct CDOTAUserMsg_PingConfirmationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PingConfirmationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PingConfirmationDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PingConfirmation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PingConfirmationDefaultTypeInternal _CDOTAUserMsg_PingConfirmation_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_alert_)*/nullptr
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_ItemAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ItemAlertDefaultTypeInternal _CDOTAUserMsg_ItemAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_id_)*/0
  , /*decltype(_impl_.secondary_charges_)*/-1
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.target_player_id_)*/-1
  , /*decltype(_impl_.item_ability_id_)*/-1
  , /*decltype(_impl_.rune_type_)*/-1
  , /*decltype(_impl_.item_level_)*/-1
  , /*decltype(_impl_.primary_charges_)*/-1} {}
struct CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_EnemyItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal _CDOTAUserMsg_EnemyItemAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.class_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stack_count_)*/0u
  , /*decltype(_impl_.is_debuff_)*/false
  , /*decltype(_impl_.seconds_remaining_)*/0
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.target_entindex_)*/-1} {}
struct CDOTAUserMsg_ModifierAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ModifierAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ModifierAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ModifierAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ModifierAlertDefaultTypeInternal _CDOTAUserMsg_ModifierAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.show_raw_values_)*/false
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.target_entindex_)*/-1} {}
struct CDOTAUserMsg_HPManaAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HPManaAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HPManaAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HPManaAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HPManaAlertDefaultTypeInternal _CDOTAUserMsg_HPManaAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_NeutralCampAlert::CDOTAUserMsg_NeutralCampAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stack_count_)*/0
  , /*decltype(_impl_.camp_type_)*/0
  , /*decltype(_impl_.stack_request_)*/false
  , /*decltype(_impl_.stack_intention_)*/false
  , /*decltype(_impl_.unit_entindex_)*/-1
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.spawner_entindex_)*/-1} {}
struct CDOTAUserMsg_NeutralCampAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_NeutralCampAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_NeutralCampAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_NeutralCampAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_NeutralCampAlertDefaultTypeInternal _CDOTAUserMsg_NeutralCampAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.negative_)*/false
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_GlyphAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_GlyphAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GlyphAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GlyphAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_GlyphAlertDefaultTypeInternal _CDOTAUserMsg_GlyphAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_RadarAlert::CDOTAUserMsg_RadarAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.negative_)*/false
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_RadarAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_RadarAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_RadarAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_RadarAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_RadarAlertDefaultTypeInternal _CDOTAUserMsg_RadarAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gold_remaining_)*/0u
  , /*decltype(_impl_.suggestion_player_id_)*/-1
  , /*decltype(_impl_.item_ability_id_)*/-1
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WillPurchaseAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal _CDOTAUserMsg_WillPurchaseAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_EmptyTeleportAlert::CDOTAUserMsg_EmptyTeleportAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cooldown_seconds_)*/0
  , /*decltype(_impl_.source_player_id_)*/-1
  , /*decltype(_impl_.target_player_id_)*/-1} {}
struct CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_EmptyTeleportAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal _CDOTAUserMsg_EmptyTeleportAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MarsArenaOfBloodAttack::CDOTAUserMsg_MarsArenaOfBloodAttack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.warrior_index_)*/0
  , /*decltype(_impl_.source_ehandle_)*/16777215u
  , /*decltype(_impl_.target_ehandle_)*/16777215u} {}
struct CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MarsArenaOfBloodAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal _CDOTAUserMsg_MarsArenaOfBloodAttack_default_instance_;
PROTOBUF_CONSTEXPR CDOTAEntityMsg_InvokerSpellCast::CDOTAEntityMsg_InvokerSpellCast(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_msg_)*/nullptr
  , /*decltype(_impl_.cast_activity_)*/0} {}
struct CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal() {}
  union {
    CDOTAEntityMsg_InvokerSpellCast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal _CDOTAEntityMsg_InvokerSpellCast_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BuyBackStateAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal _CDOTAUserMsg_BuyBackStateAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gold_cost_)*/0
  , /*decltype(_impl_.item_cooldown_seconds_)*/0
  , /*decltype(_impl_.show_buyback_)*/false
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QuickBuyAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal _CDOTAUserMsg_QuickBuyAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quantity_)*/0u
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CourierKilledAlert_LostItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal _CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lost_items_)*/{}
  , /*decltype(_impl_.team_)*/0u
  , /*decltype(_impl_.gold_value_)*/0u
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.owning_player_id_)*/-1
  , /*decltype(_impl_.entity_handle_)*/16777215u
  , /*decltype(_impl_.killer_player_id_)*/-1} {}
struct CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CourierKilledAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal _CDOTAUserMsg_CourierKilledAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.entity_handle_)*/16777215u
  , /*decltype(_impl_.target_entity_handle_)*/16777215u} {}
struct CDOTAUserMsg_MinimapEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MinimapEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MinimapEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MinimapEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MinimapEventDefaultTypeInternal _CDOTAUserMsg_MinimapEvent_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mapline_)*/nullptr
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_MapLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MapLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MapLineDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MapLineDefaultTypeInternal _CDOTAUserMsg_MapLine_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.index_)*/0} {}
struct CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MinimapDebugPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal _CDOTAUserMsg_MinimapDebugPoint_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.particle_cp_data_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.particle_index_)*/uint64_t{0u}
  , /*decltype(_impl_.handle_)*/0
  , /*decltype(_impl_.max_speed_)*/0
  , /*decltype(_impl_.fow_radius_)*/0
  , /*decltype(_impl_.sticky_fow_reveal_)*/false
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_.colorgemcolor_)*/0u
  , /*decltype(_impl_.entindex_)*/-1} {}
struct CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CreateLinearProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal _CDOTAUserMsg_CreateLinearProjectile_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/0} {}
struct CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DestroyLinearProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal _CDOTAUserMsg_DestroyLinearProjectile_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attacks_only_)*/false
  , /*decltype(_impl_.entindex_)*/-1} {}
struct CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DodgeTrackingProjectiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal _CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.target_index_)*/0
  , /*decltype(_impl_.entindex_)*/-1} {}
struct CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SpectatorPlayerClick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal _CDOTAUserMsg_SpectatorPlayerClick_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.units_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.target_index_)*/0
  , /*decltype(_impl_.queue_)*/false
  , /*decltype(_impl_.sequence_number_)*/0
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.entindex_)*/-1
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SpectatorPlayerUnitOrders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal _CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.lines_)*/0
  , /*decltype(_impl_.reverse_)*/false
  , /*decltype(_impl_.entity_handle_)*/16777215u} {}
struct CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_NevermoreRequiem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal _CDOTAUserMsg_NevermoreRequiem_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_number_)*/0} {}
struct CDOTAUserMsg_InvalidCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_InvalidCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_InvalidCommandDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_InvalidCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_InvalidCommandDefaultTypeInternal _CDOTAUserMsg_InvalidCommand_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_id_)*/0
  , /*decltype(_impl_.sequence_number_)*/0} {}
struct CDOTAUserMsg_HudErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HudErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HudErrorDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HudError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HudErrorDefaultTypeInternal _CDOTAUserMsg_HudError_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cooldown_)*/0
  , /*decltype(_impl_.name_index_)*/0
  , /*decltype(_impl_.entindex_)*/-1} {}
struct CDOTAUserMsg_SharedCooldownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SharedCooldownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SharedCooldownDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SharedCooldown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SharedCooldownDefaultTypeInternal _CDOTAUserMsg_SharedCooldown_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SetNextAutobuyItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal _CDOTAUserMsg_SetNextAutobuyItem_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_defs_)*/{}
  , /*decltype(_impl_.player_ids_)*/{}
  , /*decltype(_impl_.prize_list_)*/0u} {}
struct CDOTAUserMsg_HalloweenDropsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HalloweenDropsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HalloweenDropsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HalloweenDrops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HalloweenDropsDefaultTypeInternal _CDOTAUserMsg_HalloweenDrops_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.granted_item_defs_)*/{}
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.num_correct_)*/0u
  , /*decltype(_impl_.num_fails_)*/0u
  , /*decltype(_impl_.result_)*/1} {}
struct CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PredictionResult_Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal _CDOTAUserMsg_PredictionResult_Prediction_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predictions_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.correct_)*/false} {}
struct CDOTAUserMsg_PredictionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PredictionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PredictionResultDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PredictionResultDefaultTypeInternal _CDOTAUserMsg_PredictionResult_default_instance_;
PROTOBUF_CONSTEXPR CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.val_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/0
  , /*decltype(_impl_.val_numeric_)*/0
  , /*decltype(_impl_.val_stringtable_index_)*/0
  , /*decltype(_impl_.val_int_numeric_)*/0
  , /*decltype(_impl_.valtype_)*/1} {}
struct CDOTAResponseQuerySerialized_FactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAResponseQuerySerialized_FactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAResponseQuerySerialized_FactDefaultTypeInternal() {}
  union {
    CDOTAResponseQuerySerialized_Fact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAResponseQuerySerialized_FactDefaultTypeInternal _CDOTAResponseQuerySerialized_Fact_default_instance_;
PROTOBUF_CONSTEXPR CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.facts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAResponseQuerySerializedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAResponseQuerySerializedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAResponseQuerySerializedDefaultTypeInternal() {}
  union {
    CDOTAResponseQuerySerialized _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAResponseQuerySerializedDefaultTypeInternal _CDOTAResponseQuerySerialized_default_instance_;
PROTOBUF_CONSTEXPR CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.responsequery_)*/nullptr
  , /*decltype(_impl_.speech_concept_)*/0
  , /*decltype(_impl_.recipient_type_)*/0
  , /*decltype(_impl_.randomseed_)*/0} {}
struct CDOTASpeechMatchOnClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTASpeechMatchOnClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTASpeechMatchOnClientDefaultTypeInternal() {}
  union {
    CDOTASpeechMatchOnClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTASpeechMatchOnClientDefaultTypeInternal _CDOTASpeechMatchOnClient_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_Interval::CDOTAUserMsg_UnitEvent_Interval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.range_)*/0} {}
struct CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_Interval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal _CDOTAUserMsg_UnitEvent_Interval_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.predelay_)*/nullptr
  , /*decltype(_impl_.speech_concept_)*/0
  , /*decltype(_impl_.recipient_type_)*/0
  , /*decltype(_impl_.muteable_)*/false
  , /*decltype(_impl_.flags_)*/0u} {}
struct CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_Speech _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal _CDOTAUserMsg_UnitEvent_Speech_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delay_)*/0.5f} {}
struct CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_SpeechMute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal _CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activity_)*/0
  , /*decltype(_impl_.slot_)*/0
  , /*decltype(_impl_.fade_in_)*/0
  , /*decltype(_impl_.sequence_variant_)*/0
  , /*decltype(_impl_.fade_out_)*/0.1f
  , /*decltype(_impl_.playback_rate_)*/1} {}
struct CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_AddGesture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal _CDOTAUserMsg_UnitEvent_AddGesture_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activity_)*/0} {}
struct CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_RemoveGesture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal _CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.x_normal_)*/0
  , /*decltype(_impl_.y_normal_)*/0} {}
struct CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_BloodImpact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal _CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activity_)*/0} {}
struct CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_FadeGesture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal _CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.speech_)*/nullptr
  , /*decltype(_impl_.speech_mute_)*/nullptr
  , /*decltype(_impl_.add_gesture_)*/nullptr
  , /*decltype(_impl_.remove_gesture_)*/nullptr
  , /*decltype(_impl_.blood_impact_)*/nullptr
  , /*decltype(_impl_.fade_gesture_)*/nullptr
  , /*decltype(_impl_.speech_match_on_client_)*/nullptr
  , /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.entity_index_)*/0} {}
struct CDOTAUserMsg_UnitEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UnitEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UnitEventDefaultTypeInternal _CDOTAUserMsg_UnitEvent_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAUserMsg_ItemPurchasedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemPurchasedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemPurchasedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemPurchased _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ItemPurchasedDefaultTypeInternal _CDOTAUserMsg_ItemPurchased_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemSold::CDOTAUserMsg_ItemSold(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAUserMsg_ItemSoldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemSoldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemSoldDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemSold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ItemSoldDefaultTypeInternal _CDOTAUserMsg_ItemSold_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.rarity_)*/0
  , /*decltype(_impl_.method_)*/0
  , /*decltype(_impl_.itemdef_)*/0u
  , /*decltype(_impl_.player_)*/-1} {}
struct CDOTAUserMsg_ItemFoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ItemFoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemFoundDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemFound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ItemFoundDefaultTypeInternal _CDOTAUserMsg_ItemFound_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_type_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.source_player_entindex_)*/-1
  , /*decltype(_impl_.target_player_entindex_)*/-1
  , /*decltype(_impl_.target_entindex_)*/-1} {}
struct CDOTAUserMsg_OverheadEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_OverheadEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OverheadEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OverheadEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_OverheadEventDefaultTypeInternal _CDOTAUserMsg_OverheadEvent_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progress_)*/0} {}
struct CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialTipInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal _CDOTAUserMsg_TutorialTipInfo_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.heading_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emblem_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false} {}
struct CDOTAUserMsg_TutorialFinishDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialFinishDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialFinishDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialFinish _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TutorialFinishDefaultTypeInternal _CDOTAUserMsg_TutorialFinish_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(
    ::_pbi::ConstantInitialized) {}
struct CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialMinimapPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal _CDOTAUserMsg_TutorialMinimapPosition_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entindex_)*/0
  , /*decltype(_impl_.close_)*/false} {}
struct CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendGenericToolTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal _CDOTAUserMsg_SendGenericToolTip_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.worldline_)*/nullptr
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_WorldLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_WorldLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WorldLineDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WorldLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_WorldLineDefaultTypeInternal _CDOTAUserMsg_WorldLine_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.param_hero_id_)*/0u
  , /*decltype(_impl_.emoticon_id_)*/0u
  , /*decltype(_impl_.chat_message_id_)*/4294967295u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_ChatWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatWheelDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ChatWheelDefaultTypeInternal _CDOTAUserMsg_ChatWheel_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inventory_slot_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ReceivedXmasGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal _CDOTAUserMsg_ReceivedXmasGift_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_style_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teammate_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.survey_id_)*/0
  , /*decltype(_impl_.teammate_hero_id_)*/0u
  , /*decltype(_impl_.teammate_account_id_)*/0u} {}
struct CDOTAUserMsg_ShowSurveyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ShowSurveyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ShowSurveyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ShowSurvey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ShowSurveyDefaultTypeInternal _CDOTAUserMsg_ShowSurvey_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_type_)*/0} {}
struct CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UpdateSharedContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal _CDOTAUserMsg_UpdateSharedContent_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(
    ::_pbi::ConstantInitialized) {}
struct CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialRequestExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal _CDOTAUserMsg_TutorialRequestExp_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tgt_alpha_)*/0} {}
struct CDOTAUserMsg_TutorialFadeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialFadeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialFadeDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialFade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TutorialFadeDefaultTypeInternal _CDOTAUserMsg_TutorialFade_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.pos_z_)*/0
  , /*decltype(_impl_.entity_index_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialPingMinimap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal _CDOTAUserMsg_TutorialPingMinimap_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/0u} {}
struct CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GamerulesStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal _CDOTAUserMsg_GamerulesStateChanged_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.npc_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.npc_dialog_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AddQuestLogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal _CDOTAUserMsg_AddQuestLogEntry_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statpopup_)*/nullptr
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_SendStatPopupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SendStatPopupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendStatPopupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendStatPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SendStatPopupDefaultTypeInternal _CDOTAUserMsg_SendStatPopup_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dismissallmsg_)*/nullptr} {}
struct CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DismissAllStatPopups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal _CDOTAUserMsg_DismissAllStatPopups_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.phase_)*/0
  , /*decltype(_impl_.phase_start_time_)*/0
  , /*decltype(_impl_.phase_length_)*/0} {}
struct CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendRoshanSpectatorPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal _CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reclaimed_)*/false
  , /*decltype(_impl_.gametime_)*/0} {}
struct CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendRoshanPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal _CDOTAUserMsg_SendRoshanPopup_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reliable_gold_)*/{}
  , /*decltype(_impl_.unreliable_gold_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_SendFinalGoldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SendFinalGoldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendFinalGoldDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendFinalGold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SendFinalGoldDefaultTypeInternal _CDOTAUserMsg_SendFinalGold_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_CustomMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomMsgDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CustomMsgDefaultTypeInternal _CDOTAUserMsg_CustomMsg_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hud_ping_)*/nullptr
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_CoachHUDPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CoachHUDPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CoachHUDPingDefaultTypeInternal _CDOTAUserMsg_CoachHUDPing_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(
    ::_pbi::ConstantInitialized) {}
struct CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ClientLoadGridNav _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal _CDOTAUserMsg_ClientLoadGridNav_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.particle_cp_data_)*/{}
  , /*decltype(_impl_.target_loc_)*/nullptr
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.source_attachment_)*/0
  , /*decltype(_impl_.particle_system_handle_)*/int64_t{0}
  , /*decltype(_impl_.dodgeable_)*/false
  , /*decltype(_impl_.is_attack_)*/false
  , /*decltype(_impl_.expire_time_)*/0
  , /*decltype(_impl_.maximpacttime_)*/0
  , /*decltype(_impl_.colorgemcolor_)*/0u
  , /*decltype(_impl_.launch_tick_)*/0
  , /*decltype(_impl_.handle_)*/0
  , /*decltype(_impl_.additional_particle_system_handle_)*/int64_t{0}
  , /*decltype(_impl_.original_move_speed_)*/0
  , /*decltype(_impl_.ability_)*/16777215u
  , /*decltype(_impl_.source_)*/16777215u
  , /*decltype(_impl_.target_)*/16777215u} {}
struct CDOTAUserMsg_TE_ProjectileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_ProjectileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_ProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_Projectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TE_ProjectileDefaultTypeInternal _CDOTAUserMsg_TE_Projectile_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.particle_cp_data_)*/{}
  , /*decltype(_impl_.source_loc_)*/nullptr
  , /*decltype(_impl_.target_loc_)*/nullptr
  , /*decltype(_impl_.particle_system_handle_)*/int64_t{0}
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.dodgeable_)*/false
  , /*decltype(_impl_.is_attack_)*/false
  , /*decltype(_impl_.expire_time_)*/0
  , /*decltype(_impl_.colorgemcolor_)*/0u
  , /*decltype(_impl_.launch_tick_)*/0
  , /*decltype(_impl_.handle_)*/0
  , /*decltype(_impl_.source_attachment_)*/0
  , /*decltype(_impl_.original_move_speed_)*/0
  , /*decltype(_impl_.additional_particle_system_handle_)*/int64_t{0}
  , /*decltype(_impl_.target_)*/16777215u
  , /*decltype(_impl_.source_)*/16777215u} {}
struct CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_ProjectileLoc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal _CDOTAUserMsg_TE_ProjectileLoc_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_DestroyProjectile::CDOTAUserMsg_TE_DestroyProjectile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/0} {}
struct CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_DestroyProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal _CDOTAUserMsg_TE_DestroyProjectile_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.xnormal_)*/0
  , /*decltype(_impl_.ynormal_)*/0
  , /*decltype(_impl_.entity_)*/16777215u} {}
struct CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_DotaBloodImpact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal _CDOTAUserMsg_TE_DotaBloodImpact_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cooldown_seconds_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.mana_needed_)*/0u
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_.primary_charges_)*/0
  , /*decltype(_impl_.passive_)*/false
  , /*decltype(_impl_.ctrl_held_)*/false
  , /*decltype(_impl_.secondary_charges_)*/0
  , /*decltype(_impl_.reclaim_time_)*/0
  , /*decltype(_impl_.type_)*/1
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CDOTAUserMsg_AbilityPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AbilityPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AbilityPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AbilityPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AbilityPingDefaultTypeInternal _CDOTAUserMsg_AbilityPing_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sequence_variant_)*/0
  , /*decltype(_impl_.playbackrate_)*/0
  , /*decltype(_impl_.castpoint_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.activity_)*/0
  , /*decltype(_impl_.lag_compensation_time_)*/0
  , /*decltype(_impl_.entity_)*/16777215u} {}
struct CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_UnitAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal _CDOTAUserMsg_TE_UnitAnimation_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.snap_)*/false
  , /*decltype(_impl_.entity_)*/16777215u} {}
struct CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_UnitAnimationEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal _CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tint_screen_)*/false
  , /*decltype(_impl_.show_no_other_dialogs_)*/false} {}
struct CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ShowGenericPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal _CDOTAUserMsg_ShowGenericPopup_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.choices_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.choice_count_)*/0} {}
struct CDOTAUserMsg_VoteStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_VoteStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VoteStartDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VoteStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_VoteStartDefaultTypeInternal _CDOTAUserMsg_VoteStart_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.choice_counts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_VoteUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_VoteUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VoteUpdateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VoteUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_VoteUpdateDefaultTypeInternal _CDOTAUserMsg_VoteUpdate_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selected_choice_)*/0} {}
struct CDOTAUserMsg_VoteEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_VoteEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VoteEndDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VoteEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_VoteEndDefaultTypeInternal _CDOTAUserMsg_VoteEnd_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bonus_)*/0
  , /*decltype(_impl_.event_bonus_)*/0
  , /*decltype(_impl_.bonus_item_id_)*/0u
  , /*decltype(_impl_.event_bonus_item_id_)*/0u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BoosterStatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal _CDOTAUserMsg_BoosterStatePlayer_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.boosted_players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_BoosterStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_BoosterStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BoosterStateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BoosterState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_BoosterStateDefaultTypeInternal _CDOTAUserMsg_BoosterState_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mmr_)*/{}
  , /*decltype(_impl_._mmr_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_PlayerMMRDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PlayerMMRDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PlayerMMRDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PlayerMMR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PlayerMMRDefaultTypeInternal _CDOTAUserMsg_PlayerMMR_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_level_)*/0u
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CDOTAUserMsg_AbilityStealDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AbilityStealDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AbilityStealDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AbilitySteal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AbilityStealDefaultTypeInternal _CDOTAUserMsg_AbilitySteal_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.persona_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hero_id_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroLookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal _CDOTAUserMsg_StatsHeroLookup_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_category_)*/0
  , /*decltype(_impl_.position_count_)*/0u} {}
struct CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroPositionInfo_PositionPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal _CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_details_)*/{}
  , /*decltype(_impl_.average_position_)*/0} {}
struct CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroPositionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal _CDOTAUserMsg_StatsHeroPositionInfo_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mana_spent_)*/{}
  , /*decltype(_impl_.damage_absorbed_)*/{}
  , /*decltype(_impl_.damage_done_)*/{}
  , /*decltype(_impl_.position_info_)*/nullptr
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.hero_kills_)*/0u
  , /*decltype(_impl_.hero_damage_)*/0u
  , /*decltype(_impl_.tower_damage_)*/0u
  , /*decltype(_impl_.total_xp_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.harvested_creep_gold_)*/0u
  , /*decltype(_impl_.claimed_farm_)*/0u
  , /*decltype(_impl_.wards_placed_)*/0u
  , /*decltype(_impl_.runes_collected_)*/0u
  , /*decltype(_impl_.tps_used_)*/0u} {}
struct CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroMinuteDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal _CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_category_)*/0u
  , /*decltype(_impl_.stat_type_)*/0u
  , /*decltype(_impl_.value_)*/0u} {}
struct CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal _CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_stats_)*/{}
  , /*decltype(_impl_.lane_performance_)*/{}
  , /*decltype(_impl_.tower_kills_)*/0u
  , /*decltype(_impl_.barrack_kills_)*/0u
  , /*decltype(_impl_.available_lane_creep_gold_)*/0u
  , /*decltype(_impl_.balance_kill_value_)*/0u
  , /*decltype(_impl_.balance_tower_value_)*/0u
  , /*decltype(_impl_.balance_barracks_value_)*/0u
  , /*decltype(_impl_.balance_gold_value_)*/0u
  , /*decltype(_impl_.balance_xp_value_)*/0u} {}
struct CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsTeamMinuteDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal _CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kill_share_percent_)*/0
  , /*decltype(_impl_.player_loc_x_)*/0
  , /*decltype(_impl_.player_loc_y_)*/0
  , /*decltype(_impl_.health_percent_)*/0
  , /*decltype(_impl_.mana_percent_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsPlayerKillShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal _CDOTAUserMsg_StatsPlayerKillShare_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kill_shares_)*/{}
  , /*decltype(_impl_.damage_to_kill_)*/0u
  , /*decltype(_impl_.effective_health_)*/0u
  , /*decltype(_impl_.death_time_)*/0
  , /*decltype(_impl_.victim_id_)*/-1
  , /*decltype(_impl_.killer_id_)*/-1} {}
struct CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsKillDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal _CDOTAUserMsg_StatsKillDetails_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participants_)*/{}
  , /*decltype(_impl_.deaths_)*/{}
  , /*decltype(_impl_.gold_delta_)*/0u
  , /*decltype(_impl_.xp_delta_)*/0u} {}
struct CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.radiant_fight_details_)*/nullptr
  , /*decltype(_impl_.dire_fight_details_)*/nullptr
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.end_time_)*/0} {}
struct CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hero_lookup_)*/{}
  , /*decltype(_impl_.radiant_stats_)*/{}
  , /*decltype(_impl_.dire_stats_)*/{}
  , /*decltype(_impl_.radiant_kills_)*/{}
  , /*decltype(_impl_.dire_kills_)*/{}
  , /*decltype(_impl_.fight_details_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsMatchDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal _CDOTAUserMsg_StatsMatchDetails_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.taunting_player_id_)*/-1} {}
struct CDOTAUserMsg_MiniTauntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MiniTauntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniTauntDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniTaunt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MiniTauntDefaultTypeInternal _CDOTAUserMsg_MiniTaunt_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destroy_all_)*/false} {}
struct CDOTAUserMsg_SpeechBubbleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SpeechBubbleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SpeechBubbleDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SpeechBubble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SpeechBubbleDefaultTypeInternal _CDOTAUserMsg_SpeechBubble_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHeaderMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal _CDOTAUserMsg_CustomHeaderMessage_default_instance_;
PROTOBUF_CONSTEXPR CMsgHeroAbilityStat::CMsgHeroAbilityStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_type_)*/0
  , /*decltype(_impl_.int_value_)*/0
  , /*decltype(_impl_.float_value_)*/0} {}
struct CMsgHeroAbilityStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHeroAbilityStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHeroAbilityStatDefaultTypeInternal() {}
  union {
    CMsgHeroAbilityStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHeroAbilityStatDefaultTypeInternal _CMsgHeroAbilityStat_default_instance_;
PROTOBUF_CONSTEXPR CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_ability_stats_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgCombatAnalyzerPlayerStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCombatAnalyzerPlayerStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCombatAnalyzerPlayerStatDefaultTypeInternal() {}
  union {
    CMsgCombatAnalyzerPlayerStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCombatAnalyzerPlayerStatDefaultTypeInternal _CMsgCombatAnalyzerPlayerStat_default_instance_;
PROTOBUF_CONSTEXPR CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_stats_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgCombatAnalyzerStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCombatAnalyzerStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCombatAnalyzerStatsDefaultTypeInternal() {}
  union {
    CMsgCombatAnalyzerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCombatAnalyzerStatsDefaultTypeInternal _CMsgCombatAnalyzerStats_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_)*/0u} {}
struct CDOTAUserMsg_BeastChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_BeastChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BeastChatDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BeastChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_BeastChatDefaultTypeInternal _CDOTAUserMsg_BeastChat_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layout_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHudElement_Create _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal _CDOTAUserMsg_CustomHudElement_Create_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.modify_visible_)*/false} {}
struct CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHudElement_Modify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal _CDOTAUserMsg_CustomHudElement_Modify_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHudElement_Destroy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal _CDOTAUserMsg_CustomHudElement_Destroy_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CompendiumStatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal _CDOTAUserMsg_CompendiumStatePlayer_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compendium_players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_CompendiumStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_CompendiumStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CompendiumStateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CompendiumState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_CompendiumStateDefaultTypeInternal _CDOTAUserMsg_CompendiumState_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.caster_team_)*/0
  , /*decltype(_impl_.channel_end_)*/false
  , /*decltype(_impl_.track_caster_only_)*/false
  , /*decltype(_impl_.end_time_)*/0
  , /*decltype(_impl_.victim_ent_index_)*/-1
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.caster_ent_index_)*/-1} {}
struct CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ProjectionAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal _CDOTAUserMsg_ProjectionAbility_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.team_)*/0u} {}
struct CDOTAUserMsg_ProjectionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ProjectionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ProjectionEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ProjectionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ProjectionEventDefaultTypeInternal _CDOTAUserMsg_ProjectionEvent_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.target_entindex_)*/-1} {}
struct CDOTAUserMsg_XPAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_XPAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_XPAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_XPAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_XPAlertDefaultTypeInternal _CDOTAUserMsg_XPAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TalentTreeAlert::CDOTAUserMsg_TalentTreeAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_)*/0
  , /*decltype(_impl_.learned_)*/false
  , /*decltype(_impl_.ability_id_)*/-1
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.target_entindex_)*/-1} {}
struct CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TalentTreeAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal _CDOTAUserMsg_TalentTreeAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress(
    ::_pbi::ConstantInitialized) {}
struct CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UpdateQuestProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal _CDOTAUserMsg_UpdateQuestProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quest_id_)*/0u
  , /*decltype(_impl_.challenge_id_)*/0u
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.goal_)*/0u
  , /*decltype(_impl_.query_)*/0u
  , /*decltype(_impl_.fail_gametime_)*/0
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAUserMsg_QuestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_QuestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QuestStatusDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QuestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_QuestStatusDefaultTypeInternal _CDOTAUserMsg_QuestStatus_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.ban_)*/false
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SuggestHeroPick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal _CDOTAUserMsg_SuggestHeroPick_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SuggestHeroRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal _CDOTAUserMsg_SuggestHeroRole_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.damage_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.damage_taken_)*/0u
  , /*decltype(_impl_.item_type_)*/0u
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_KillcamDamageTaken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal _CDOTAUserMsg_KillcamDamageTaken_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SelectPenaltyGold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal _CDOTAUserMsg_SelectPenaltyGold_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_type_)*/0u
  , /*decltype(_impl_.roll_min_)*/0u
  , /*decltype(_impl_.roll_max_)*/0u
  , /*decltype(_impl_.result_)*/0u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_RollDiceResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_RollDiceResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_RollDiceResultDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_RollDiceResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_RollDiceResultDefaultTypeInternal _CDOTAUserMsg_RollDiceResult_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_type_)*/0u
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_FlipCoinResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_FlipCoinResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_FlipCoinResultDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_FlipCoinResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_FlipCoinResultDefaultTypeInternal _CDOTAUserMsg_FlipCoinResult_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal() {}
  union {
    CDOTAUserMessage_RequestItemSuggestions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal _CDOTAUserMessage_RequestItemSuggestions_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_)*/0u
  , /*decltype(_impl_.captain_player_id_)*/-1} {}
struct CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal() {}
  union {
    CDOTAUserMessage_TeamCaptainChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal _CDOTAUserMessage_TeamCaptainChanged_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cooldown_remaining_)*/0
  , /*decltype(_impl_.message_id_)*/4294967295u} {}
struct CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatWheelCooldown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal _CDOTAUserMsg_ChatWheelCooldown_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HeroRelicProgress::CDOTAUserMsg_HeroRelicProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_relic_type_)*/0u
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.value_display_)*/0
  , /*decltype(_impl_.ehandle_)*/16777215u} {}
struct CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HeroRelicProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal _CDOTAUserMsg_HeroRelicProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_AbilityDraftRequestAbility::CDOTAUserMsg_AbilityDraftRequestAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ctrl_is_down_)*/false
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.requested_ability_id_)*/-1} {}
struct CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AbilityDraftRequestAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal _CDOTAUserMsg_AbilityDraftRequestAbility_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DamageReport::CDOTAUserMsg_DamageReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_hero_id_)*/0u
  , /*decltype(_impl_.source_hero_id_)*/0u
  , /*decltype(_impl_.damage_amount_)*/0
  , /*decltype(_impl_.broadcast_)*/false
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_DamageReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DamageReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DamageReportDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DamageReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DamageReportDefaultTypeInternal _CDOTAUserMsg_DamageReport_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_SalutePlayer::CDOTAUserMsg_SalutePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_tip_style_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tip_amount_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.num_recent_tips_)*/0u
  , /*decltype(_impl_.source_player_id_)*/-1
  , /*decltype(_impl_.target_player_id_)*/-1} {}
struct CDOTAUserMsg_SalutePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_SalutePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SalutePlayerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SalutePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_SalutePlayerDefaultTypeInternal _CDOTAUserMsg_SalutePlayer_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_TipAlert::CDOTAUserMsg_TipAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tip_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_TipAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_TipAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TipAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TipAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_TipAlertDefaultTypeInternal _CDOTAUserMsg_TipAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ReplaceQueryUnit::CDOTAUserMsg_ReplaceQueryUnit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_entindex_)*/-1
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.source_entindex_)*/-1} {}
struct CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ReplaceQueryUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal _CDOTAUserMsg_ReplaceQueryUnit_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ESArcanaCombo::CDOTAUserMsg_ESArcanaCombo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.combo_count_)*/0u
  , /*decltype(_impl_.arcana_level_)*/0u
  , /*decltype(_impl_.ehandle_)*/16777215u} {}
struct CDOTAUserMsg_ESArcanaComboDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ESArcanaComboDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ESArcanaComboDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ESArcanaCombo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ESArcanaComboDefaultTypeInternal _CDOTAUserMsg_ESArcanaCombo_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ESArcanaComboSummary::CDOTAUserMsg_ESArcanaComboSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.combo_count_)*/0u
  , /*decltype(_impl_.damage_amount_)*/0u
  , /*decltype(_impl_.ehandle_)*/16777215u} {}
struct CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ESArcanaComboSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal _CDOTAUserMsg_ESArcanaComboSummary_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_OMArcanaCombo::CDOTAUserMsg_OMArcanaCombo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.multicast_amount_)*/0u
  , /*decltype(_impl_.arcana_level_)*/0u
  , /*decltype(_impl_.multicast_chance_)*/0u
  , /*decltype(_impl_.ehandle_)*/16777215u} {}
struct CDOTAUserMsg_OMArcanaComboDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_OMArcanaComboDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OMArcanaComboDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OMArcanaCombo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_OMArcanaComboDefaultTypeInternal _CDOTAUserMsg_OMArcanaCombo_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HighFiveCompleted::CDOTAUserMsg_HighFiveCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.special_high_five_)*/false
  , /*decltype(_impl_.special_entindex_)*/-1
  , /*decltype(_impl_.player_id_1_)*/-1
  , /*decltype(_impl_.player_id_2_)*/-1} {}
struct CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HighFiveCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal _CDOTAUserMsg_HighFiveCompleted_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HighFiveLeftHanging::CDOTAUserMsg_HighFiveLeftHanging(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HighFiveLeftHanging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal _CDOTAUserMsg_HighFiveLeftHanging_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ShovelUnearth::CDOTAUserMsg_ShovelUnearth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.locstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.all_chat_)*/false
  , /*decltype(_impl_.quantity_)*/0u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_ShovelUnearthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ShovelUnearthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ShovelUnearthDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ShovelUnearth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ShovelUnearthDefaultTypeInternal _CDOTAUserMsg_ShovelUnearth_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_AllStarEvent_PlayerScore::CDOTAUserMsg_AllStarEvent_PlayerScore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.score_sans_kda_)*/0u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AllStarEvent_PlayerScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal _CDOTAUserMsg_AllStarEvent_PlayerScore_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_AllStarEvent::CDOTAUserMsg_AllStarEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_scores_)*/{}
  , /*decltype(_impl_.point_amount_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.source_player_id_)*/-1
  , /*decltype(_impl_.target_player_id_)*/-1} {}
struct CDOTAUserMsg_AllStarEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AllStarEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AllStarEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AllStarEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AllStarEventDefaultTypeInternal _CDOTAUserMsg_AllStarEvent_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_QueuedOrderRemoved::CDOTAUserMsg_QueuedOrderRemoved(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unit_order_sequence_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QueuedOrderRemoved _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal _CDOTAUserMsg_QueuedOrderRemoved_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DebugChallenge::CDOTAUserMsg_DebugChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenge_type_)*/0u
  , /*decltype(_impl_.challenge_query_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.instance_id_)*/0u
  , /*decltype(_impl_.challenge_var_0_)*/0u
  , /*decltype(_impl_.challenge_var_1_)*/0u
  , /*decltype(_impl_.challenge_max_rank_)*/0u} {}
struct CDOTAUserMsg_DebugChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DebugChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DebugChallengeDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DebugChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DebugChallengeDefaultTypeInternal _CDOTAUserMsg_DebugChallenge_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_FoundNeutralItem::CDOTAUserMsg_FoundNeutralItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_tier_)*/0u
  , /*decltype(_impl_.tier_item_count_)*/0u
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.item_ability_id_)*/-1} {}
struct CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_FoundNeutralItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal _CDOTAUserMsg_FoundNeutralItem_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_OutpostCaptured::CDOTAUserMsg_OutpostCaptured(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.outpost_entindex_)*/-1} {}
struct CDOTAUserMsg_OutpostCapturedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_OutpostCapturedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OutpostCapturedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OutpostCaptured _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_OutpostCapturedDefaultTypeInternal _CDOTAUserMsg_OutpostCaptured_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_OutpostGrantedXP::CDOTAUserMsg_OutpostGrantedXP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.xp_amount_)*/0u} {}
struct CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OutpostGrantedXP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal _CDOTAUserMsg_OutpostGrantedXP_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MoveCameraToUnit::CDOTAUserMsg_MoveCameraToUnit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_ehandle_)*/16777215u} {}
struct CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MoveCameraToUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal _CDOTAUserMsg_MoveCameraToUnit_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PauseMinigameData_DataBit::CDOTAUserMsg_PauseMinigameData_DataBit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_.data_extra_)*/int64_t{0}} {}
struct CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PauseMinigameData_DataBit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal _CDOTAUserMsg_PauseMinigameData_DataBit_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PauseMinigameData::CDOTAUserMsg_PauseMinigameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PauseMinigameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal _CDOTAUserMsg_PauseMinigameData_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_VersusScene_PlayerBehavior::CDOTAUserMsg_VersusScene_PlayerBehavior(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.play_activity_)*/nullptr
  , /*decltype(_impl_.chat_wheel_)*/nullptr
  , /*decltype(_impl_.playback_rate_)*/nullptr
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.behavior_)*/1} {}
struct CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VersusScene_PlayerBehavior _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal _CDOTAUserMsg_VersusScene_PlayerBehavior_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_QoP_ArcanaSummary::CDOTAUserMsg_QoP_ArcanaSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arcana_level_)*/0u
  , /*decltype(_impl_.players_hit_)*/0u
  , /*decltype(_impl_.players_killed_)*/0u
  , /*decltype(_impl_.ehandle_)*/16777215u} {}
struct CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QoP_ArcanaSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal _CDOTAUserMsg_QoP_ArcanaSummary_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HotPotato_Created::CDOTAUserMsg_HotPotato_Created(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_1_)*/-1
  , /*decltype(_impl_.player_id_2_)*/-1} {}
struct CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HotPotato_Created _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal _CDOTAUserMsg_HotPotato_Created_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_HotPotato_Exploded::CDOTAUserMsg_HotPotato_Exploded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HotPotato_Exploded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal _CDOTAUserMsg_HotPotato_Exploded_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_WK_Arcana_Progress::CDOTAUserMsg_WK_Arcana_Progress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arcana_level_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.ehandle_)*/16777215u} {}
struct CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WK_Arcana_Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal _CDOTAUserMsg_WK_Arcana_Progress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal _CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_GuildChallenge_Progress::CDOTAUserMsg_GuildChallenge_Progress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_progress_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u
  , /*decltype(_impl_.challenge_type_)*/0
  , /*decltype(_impl_.challenge_progress_at_start_)*/0u
  , /*decltype(_impl_.complete_)*/false} {}
struct CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GuildChallenge_Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal _CDOTAUserMsg_GuildChallenge_Progress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_WRArcanaProgress::CDOTAUserMsg_WRArcanaProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arrows_landed_)*/0u
  , /*decltype(_impl_.damage_dealt_)*/0u
  , /*decltype(_impl_.target_hp_)*/0u
  , /*decltype(_impl_.target_max_hp_)*/0u
  , /*decltype(_impl_.arcana_level_)*/0u
  , /*decltype(_impl_.ehandle_)*/16777215u
  , /*decltype(_impl_.target_ehandle_)*/16777215u} {}
struct CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WRArcanaProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal _CDOTAUserMsg_WRArcanaProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_WRArcanaSummary::CDOTAUserMsg_WRArcanaSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arrows_landed_)*/0u
  , /*decltype(_impl_.damage_dealt_)*/0u
  , /*decltype(_impl_.target_hp_)*/0u
  , /*decltype(_impl_.target_max_hp_)*/0u
  , /*decltype(_impl_.arcana_level_)*/0u
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.ehandle_)*/16777215u
  , /*decltype(_impl_.target_ehandle_)*/16777215u} {}
struct CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WRArcanaSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal _CDOTAUserMsg_WRArcanaSummary_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_EmptyItemSlotAlert::CDOTAUserMsg_EmptyItemSlotAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_index_)*/0
  , /*decltype(_impl_.cooldown_seconds_)*/0
  , /*decltype(_impl_.source_player_id_)*/-1
  , /*decltype(_impl_.target_player_id_)*/-1} {}
struct CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_EmptyItemSlotAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal _CDOTAUserMsg_EmptyItemSlotAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_AghsStatusAlert::CDOTAUserMsg_AghsStatusAlert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.alert_type_)*/0u
  , /*decltype(_impl_.has_scepter_)*/false
  , /*decltype(_impl_.has_shard_)*/false
  , /*decltype(_impl_.target_entindex_)*/-1
  , /*decltype(_impl_.source_player_id_)*/-1
  , /*decltype(_impl_.target_player_id_)*/-1} {}
struct CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AghsStatusAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal _CDOTAUserMsg_AghsStatusAlert_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MutedPlayers::CDOTAUserMsg_MutedPlayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_muted_player_ids_)*/{}
  , /*decltype(_impl_.voice_muted_player_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAUserMsg_MutedPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MutedPlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MutedPlayersDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MutedPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MutedPlayersDefaultTypeInternal _CDOTAUserMsg_MutedPlayers_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ContextualTip::CDOTAUserMsg_ContextualTip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.referenced_abilities_)*/{}
  , /*decltype(_impl_.referenced_units_)*/{}
  , /*decltype(_impl_.panorama_classes_)*/{}
  , /*decltype(_impl_.string_param_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string_param2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tip_text_override_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tip_annotation_override_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.panorama_snippet_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tip_id_)*/0
  , /*decltype(_impl_.force_annotation_)*/false
  , /*decltype(_impl_.variant_)*/0
  , /*decltype(_impl_.int_param_)*/0
  , /*decltype(_impl_.int_param2_)*/0
  , /*decltype(_impl_.float_param_)*/0
  , /*decltype(_impl_.float_param2_)*/0} {}
struct CDOTAUserMsg_ContextualTipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ContextualTipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ContextualTipDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ContextualTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ContextualTipDefaultTypeInternal _CDOTAUserMsg_ContextualTip_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatMessage::CDOTAUserMsg_ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_type_)*/0u
  , /*decltype(_impl_.source_player_id_)*/-1} {}
struct CDOTAUserMsg_ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatMessageDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_ChatMessageDefaultTypeInternal _CDOTAUserMsg_ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_RockPaperScissorsStarted::CDOTAUserMsg_RockPaperScissorsStarted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_source_)*/-1
  , /*decltype(_impl_.player_id_target_)*/-1} {}
struct CDOTAUserMsg_RockPaperScissorsStartedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_RockPaperScissorsStartedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_RockPaperScissorsStartedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_RockPaperScissorsStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_RockPaperScissorsStartedDefaultTypeInternal _CDOTAUserMsg_RockPaperScissorsStarted_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_RockPaperScissorsFinished::CDOTAUserMsg_RockPaperScissorsFinished(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_1_choice_)*/0
  , /*decltype(_impl_.player_2_choice_)*/0
  , /*decltype(_impl_.player_id_1_)*/-1
  , /*decltype(_impl_.player_id_2_)*/-1} {}
struct CDOTAUserMsg_RockPaperScissorsFinishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_RockPaperScissorsFinishedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_RockPaperScissorsFinishedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_RockPaperScissorsFinished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_RockPaperScissorsFinishedDefaultTypeInternal _CDOTAUserMsg_RockPaperScissorsFinished_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DuelOpponentKilled::CDOTAUserMsg_DuelOpponentKilled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_winner_)*/0
  , /*decltype(_impl_.player_id_loser_)*/0} {}
struct CDOTAUserMsg_DuelOpponentKilledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DuelOpponentKilledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DuelOpponentKilledDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DuelOpponentKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DuelOpponentKilledDefaultTypeInternal _CDOTAUserMsg_DuelOpponentKilled_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DuelAccepted::CDOTAUserMsg_DuelAccepted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_1_)*/0
  , /*decltype(_impl_.player_id_2_)*/0} {}
struct CDOTAUserMsg_DuelAcceptedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DuelAcceptedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DuelAcceptedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DuelAccepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DuelAcceptedDefaultTypeInternal _CDOTAUserMsg_DuelAccepted_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_DuelRequested::CDOTAUserMsg_DuelRequested(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_requestor_)*/-1} {}
struct CDOTAUserMsg_DuelRequestedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_DuelRequestedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DuelRequestedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DuelRequested _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_DuelRequestedDefaultTypeInternal _CDOTAUserMsg_DuelRequested_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.points_)*/0
  , /*decltype(_impl_.points_total_)*/0
  , /*decltype(_impl_.last_hit_)*/false
  , /*decltype(_impl_.player_id_killer_)*/-1
  , /*decltype(_impl_.player_id_target_)*/-1} {}
struct CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilledDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilledDefaultTypeInternal _CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PlayerDraftSuggestPick::CDOTAUserMsg_PlayerDraftSuggestPick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.suggestion_player_id_)*/-1} {}
struct CDOTAUserMsg_PlayerDraftSuggestPickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PlayerDraftSuggestPickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PlayerDraftSuggestPickDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PlayerDraftSuggestPick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PlayerDraftSuggestPickDefaultTypeInternal _CDOTAUserMsg_PlayerDraftSuggestPick_default_instance_;
PROTOBUF_CONSTEXPR CDOTAUserMsg_PlayerDraftPick::CDOTAUserMsg_PlayerDraftPick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.player_id_captain_)*/-1
  , /*decltype(_impl_.player_id_target_)*/-1} {}
struct CDOTAUserMsg_PlayerDraftPickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAUserMsg_PlayerDraftPickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PlayerDraftPickDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PlayerDraftPick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAUserMsg_PlayerDraftPickDefaultTypeInternal _CDOTAUserMsg_PlayerDraftPick_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fusermessages_2eproto[180];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fusermessages_2eproto[17];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fusermessages_2eproto = nullptr;

const uint32_t TableStruct_dota_5fusermessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AIDebugLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AIDebugLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AIDebugLine, _impl_.message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, _impl_.ping_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, _impl_.loss_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SwapVerify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SwapVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SwapVerify, _impl_.player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.playerid_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.playerid_2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.playerid_3_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.playerid_4_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.playerid_5_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.playerid_6_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.value2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _impl_.value3_),
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _impl_.team_only_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _impl_.world_pos_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _impl_.health_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _impl_.combat_entries_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _impl_.request_time_),
  ~0u,
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectileParticleCPData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectileParticleCPData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectileParticleCPData, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectileParticleCPData, _impl_.vector_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _impl_.damage_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _impl_.total_damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _impl_.attacker_name_),
  2,
  1,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo, _impl_.attackers_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, _impl_.duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, _impl_.duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, _impl_.location_ping_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _impl_.player_id_of_original_pinger_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _impl_.entity_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _impl_.icon_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _impl_.location_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, _impl_.item_alert_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.rune_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.item_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.primary_charges_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _impl_.secondary_charges_),
  2,
  3,
  4,
  5,
  0,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _impl_.class_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _impl_.stack_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _impl_.is_debuff_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _impl_.target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _impl_.seconds_remaining_),
  4,
  0,
  1,
  2,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, _impl_.target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, _impl_.show_raw_values_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_.spawner_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_.unit_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_.stack_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_.camp_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_.stack_request_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NeutralCampAlert, _impl_.stack_intention_),
  5,
  6,
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, _impl_.negative_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, _impl_.negative_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _impl_.item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _impl_.gold_remaining_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _impl_.suggestion_player_id_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, _impl_.source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, _impl_.target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, _impl_.cooldown_seconds_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, _impl_.source_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, _impl_.target_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, _impl_.warrior_index_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, _impl_.entity_msg_),
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, _impl_.cast_activity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BuyBackStateAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BuyBackStateAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BuyBackStateAlert, _impl_.player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _impl_.item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _impl_.gold_cost_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _impl_.item_cooldown_seconds_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _impl_.show_buyback_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, _impl_.item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, _impl_.quantity_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_.gold_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_.entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_.lost_items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_.killer_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _impl_.owning_player_id_),
  0,
  1,
  4,
  2,
  ~0u,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _impl_.entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _impl_.target_entity_handle_),
  0,
  4,
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, _impl_.mapline_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _impl_.index_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.particle_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.max_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.fow_radius_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.sticky_fow_reveal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.colorgemcolor_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _impl_.particle_cp_data_),
  0,
  1,
  10,
  3,
  4,
  2,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DestroyLinearProjectile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DestroyLinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DestroyLinearProjectile, _impl_.handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, _impl_.attacks_only_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, _impl_.target_index_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.target_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.queue_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.flags_),
  6,
  1,
  ~0u,
  2,
  7,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _impl_.entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _impl_.lines_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _impl_.reverse_),
  3,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_InvalidCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_InvalidCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_InvalidCommand, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_InvalidCommand, _impl_.sequence_number_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HudError, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HudError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HudError, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HudError, _impl_.sequence_number_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _impl_.cooldown_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _impl_.name_index_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SetNextAutobuyItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SetNextAutobuyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SetNextAutobuyItem, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, _impl_.item_defs_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, _impl_.player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, _impl_.prize_list_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _impl_.num_correct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _impl_.num_fails_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _impl_.granted_item_defs_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _impl_.correct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _impl_.predictions_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _impl_.valtype_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _impl_.val_numeric_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _impl_.val_string_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _impl_.val_stringtable_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _impl_.val_int_numeric_),
  1,
  5,
  2,
  0,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized, _impl_.facts_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _impl_.speech_concept_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _impl_.recipient_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _impl_.responsequery_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _impl_.randomseed_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, _impl_.range_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _impl_.speech_concept_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _impl_.recipient_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _impl_.muteable_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _impl_.predelay_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _impl_.flags_),
  2,
  0,
  3,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_SpeechMute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_SpeechMute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_SpeechMute, _impl_.delay_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _impl_.activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _impl_.fade_in_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _impl_.fade_out_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _impl_.playback_rate_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _impl_.sequence_variant_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_RemoveGesture, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_RemoveGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_RemoveGesture, _impl_.activity_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, _impl_.x_normal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, _impl_.y_normal_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_FadeGesture, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_FadeGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_FadeGesture, _impl_.activity_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.entity_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.speech_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.speech_mute_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.add_gesture_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.remove_gesture_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.blood_impact_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.fade_gesture_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _impl_.speech_match_on_client_),
  7,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemPurchased, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemPurchased, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemPurchased, _impl_.item_ability_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemSold, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemSold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemSold, _impl_.item_ability_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _impl_.rarity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _impl_.itemdef_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _impl_.target_player_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _impl_.target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _impl_.source_player_entindex_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, _impl_.progress_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _impl_.emblem_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _impl_.success_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialMinimapPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _impl_.close_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, _impl_.worldline_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _impl_.chat_message_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _impl_.param_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _impl_.emoticon_id_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, _impl_.item_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, _impl_.inventory_slot_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _impl_.survey_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _impl_.response_style_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _impl_.teammate_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _impl_.teammate_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _impl_.teammate_account_id_),
  3,
  2,
  0,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateSharedContent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateSharedContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateSharedContent, _impl_.slot_type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialRequestExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFade, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFade, _impl_.tgt_alpha_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _impl_.pos_z_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _impl_.entity_index_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GamerulesStateChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GamerulesStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GamerulesStateChanged, _impl_.state_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, _impl_.npc_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, _impl_.npc_dialog_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, _impl_.statpopup_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DismissAllStatPopups, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DismissAllStatPopups, _impl_.dismissallmsg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, _impl_.phase_start_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, _impl_.phase_length_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, _impl_.reclaimed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, _impl_.gametime_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendFinalGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendFinalGold, _impl_.reliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendFinalGold, _impl_.unreliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, _impl_.value_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _impl_.hud_ping_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ClientLoadGridNav, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.source_attachment_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.particle_system_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.dodgeable_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.is_attack_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.expire_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.maximpacttime_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.colorgemcolor_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.launch_tick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.target_loc_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.particle_cp_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.additional_particle_system_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.original_move_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _impl_.ability_),
  14,
  15,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  ~0u,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.source_loc_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.particle_system_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.dodgeable_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.is_attack_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.expire_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.target_loc_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.colorgemcolor_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.launch_tick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.source_attachment_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.particle_cp_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.additional_particle_system_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _impl_.original_move_speed_),
  0,
  13,
  3,
  2,
  4,
  5,
  6,
  1,
  7,
  8,
  9,
  14,
  10,
  ~0u,
  12,
  11,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DestroyProjectile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DestroyProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DestroyProjectile, _impl_.handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _impl_.entity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _impl_.xnormal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _impl_.ynormal_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.cooldown_seconds_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.passive_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.mana_needed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.primary_charges_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.secondary_charges_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.ctrl_held_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _impl_.reclaim_time_),
  10,
  11,
  9,
  0,
  1,
  5,
  2,
  3,
  4,
  7,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_.entity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_.sequence_variant_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_.playbackrate_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_.castpoint_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_.activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _impl_.lag_compensation_time_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, _impl_.entity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, _impl_.snap_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _impl_.param1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _impl_.param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _impl_.tint_screen_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _impl_.show_no_other_dialogs_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _impl_.choice_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _impl_.choices_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteUpdate, _impl_.choice_counts_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteEnd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteEnd, _impl_.selected_choice_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _impl_.bonus_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _impl_.event_bonus_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _impl_.bonus_item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _impl_.event_bonus_item_id_),
  4,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterState, _impl_.boosted_players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerMMR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerMMR, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, _impl_.ability_level_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _impl_.hero_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _impl_.persona_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _impl_.position_category_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _impl_.position_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, _impl_.average_position_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, _impl_.position_details_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.hero_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.position_info_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.total_xp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.harvested_creep_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.claimed_farm_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.runes_collected_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.tps_used_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.mana_spent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.damage_absorbed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.damage_done_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _impl_.location_category_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _impl_.stat_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _impl_.value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.player_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.barrack_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.available_lane_creep_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.balance_kill_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.balance_tower_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.balance_barracks_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.balance_gold_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.balance_xp_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.lane_performance_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _impl_.kill_share_percent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _impl_.player_loc_x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _impl_.player_loc_y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _impl_.health_percent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _impl_.mana_percent_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _impl_.victim_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _impl_.kill_shares_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _impl_.damage_to_kill_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _impl_.effective_health_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _impl_.death_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _impl_.killer_id_),
  3,
  ~0u,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _impl_.participants_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _impl_.gold_delta_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _impl_.xp_delta_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _impl_.radiant_fight_details_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _impl_.dire_fight_details_),
  2,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _impl_.hero_lookup_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _impl_.radiant_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _impl_.dire_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _impl_.radiant_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _impl_.dire_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _impl_.fight_details_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniTaunt, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniTaunt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniTaunt, _impl_.taunting_player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpeechBubble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpeechBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpeechBubble, _impl_.destroy_all_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _impl_.value_),
  3,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, _impl_.stat_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, _impl_.int_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, _impl_.float_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, _impl_.hero_ability_stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, _impl_.player_stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _impl_.target_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, _impl_.element_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, _impl_.layout_filename_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, _impl_.data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, _impl_.element_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, _impl_.modify_visible_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, _impl_.data_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Destroy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Destroy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Destroy, _impl_.element_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, _impl_.level_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumState, _impl_.compendium_players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.caster_ent_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.caster_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.channel_end_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.track_caster_only_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _impl_.victim_ent_index_),
  6,
  7,
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, _impl_.team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, _impl_.target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _impl_.target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _impl_.learned_),
  3,
  4,
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateQuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.goal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.fail_gametime_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _impl_.item_ability_id_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, _impl_.ban_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, _impl_.hero_role_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _impl_.damage_taken_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _impl_.item_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _impl_.item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _impl_.hero_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _impl_.damage_color_),
  4,
  2,
  3,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, _impl_.cost_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _impl_.channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _impl_.roll_min_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _impl_.roll_max_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _impl_.result_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, _impl_.channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, _impl_.result_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_RequestItemSuggestions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_RequestItemSuggestions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_RequestItemSuggestions, _impl_.player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, _impl_.captain_player_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, _impl_.cooldown_remaining_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _impl_.hero_relic_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _impl_.value_display_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, _impl_.requested_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, _impl_.ctrl_is_down_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _impl_.target_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _impl_.source_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _impl_.damage_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _impl_.broadcast_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _impl_.source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _impl_.target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _impl_.tip_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _impl_.custom_tip_style_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _impl_.num_recent_tips_),
  4,
  5,
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, _impl_.tip_text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, _impl_.source_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, _impl_.target_entindex_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, _impl_.combo_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, _impl_.arcana_level_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, _impl_.combo_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, _impl_.damage_amount_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _impl_.multicast_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _impl_.arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _impl_.multicast_chance_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _impl_.player_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _impl_.player_id_2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _impl_.special_high_five_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _impl_.special_entindex_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveLeftHanging, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveLeftHanging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveLeftHanging, _impl_.player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _impl_.all_chat_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _impl_.locstring_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _impl_.quantity_),
  3,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, _impl_.score_sans_kda_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _impl_.source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _impl_.target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _impl_.point_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _impl_.player_scores_),
  2,
  3,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QueuedOrderRemoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QueuedOrderRemoved, _impl_.unit_order_sequence_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_.challenge_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_.challenge_query_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_.challenge_var_0_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_.challenge_var_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _impl_.challenge_max_rank_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _impl_.item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _impl_.item_tier_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _impl_.tier_item_count_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, _impl_.outpost_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, _impl_.team_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, _impl_.xp_amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MoveCameraToUnit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MoveCameraToUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MoveCameraToUnit, _impl_.unit_ehandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, _impl_.data_extra_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData, _impl_.data_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_.behavior_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_.play_activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_.chat_wheel_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_.playback_rate_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _impl_.arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _impl_.players_hit_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _impl_.players_killed_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, _impl_.player_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, _impl_.player_id_2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Exploded, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Exploded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Exploded, _impl_.player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, _impl_.arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, _impl_.hero_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, _impl_.progress_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_.player_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_.challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_.challenge_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_.challenge_progress_at_start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _impl_.complete_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_.target_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_.arrows_landed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_.damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_.target_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_.target_max_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _impl_.arcana_level_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.target_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.arrows_landed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.target_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.target_max_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _impl_.success_),
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _impl_.source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _impl_.target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _impl_.slot_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _impl_.cooldown_seconds_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _impl_.source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _impl_.target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _impl_.target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _impl_.alert_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _impl_.has_scepter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _impl_.has_shard_),
  4,
  5,
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MutedPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MutedPlayers, _impl_.text_muted_player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MutedPlayers, _impl_.voice_muted_player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.tip_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.referenced_abilities_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.referenced_units_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.panorama_classes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.force_annotation_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.variant_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.int_param_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.int_param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.float_param_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.float_param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.string_param_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.string_param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.tip_text_override_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.tip_annotation_override_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _impl_.panorama_snippet_),
  5,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, _impl_.source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, _impl_.channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, _impl_.message_text_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsStarted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsStarted, _impl_.player_id_source_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsStarted, _impl_.player_id_target_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsFinished, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsFinished, _impl_.player_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsFinished, _impl_.player_id_2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsFinished, _impl_.player_1_choice_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RockPaperScissorsFinished, _impl_.player_2_choice_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelOpponentKilled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelOpponentKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelOpponentKilled, _impl_.player_id_winner_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelOpponentKilled, _impl_.player_id_loser_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelAccepted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelAccepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelAccepted, _impl_.player_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelAccepted, _impl_.player_id_2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelRequested, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelRequested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DuelRequested, _impl_.player_id_requestor_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_.player_id_killer_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_.player_id_target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_.points_total_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_.last_hit_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftSuggestPick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftSuggestPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftSuggestPick, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftSuggestPick, _impl_.suggestion_player_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftPick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftPick, _impl_.player_id_captain_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftPick, _impl_.player_id_target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerDraftPick, _impl_.team_),
  1,
  2,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CDOTAUserMsg_AIDebugLine)},
  { 8, 16, -1, sizeof(::CDOTAUserMsg_Ping)},
  { 18, 25, -1, sizeof(::CDOTAUserMsg_SwapVerify)},
  { 26, 42, -1, sizeof(::CDOTAUserMsg_ChatEvent)},
  { 52, 62, -1, sizeof(::CDOTAUserMsg_BotChat)},
  { 66, 76, -1, sizeof(::CDOTAUserMsg_CombatHeroPositions)},
  { 80, 91, -1, sizeof(::CDOTAUserMsg_CombatLogBulkData)},
  { 96, 104, -1, sizeof(::CDOTAUserMsg_ProjectileParticleCPData)},
  { 106, 114, -1, sizeof(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability)},
  { 116, 126, -1, sizeof(::CDOTAUserMsg_MiniKillCamInfo_Attacker)},
  { 130, -1, -1, sizeof(::CDOTAUserMsg_MiniKillCamInfo)},
  { 137, 145, -1, sizeof(::CDOTAUserMsg_GlobalLightColor)},
  { 147, 155, -1, sizeof(::CDOTAUserMsg_GlobalLightDirection)},
  { 157, 165, -1, sizeof(::CDOTAUserMsg_LocationPing)},
  { 167, 177, -1, sizeof(::CDOTAUserMsg_PingConfirmation)},
  { 181, 189, -1, sizeof(::CDOTAUserMsg_ItemAlert)},
  { 191, 205, -1, sizeof(::CDOTAUserMsg_EnemyItemAlert)},
  { 213, 225, -1, sizeof(::CDOTAUserMsg_ModifierAlert)},
  { 231, 240, -1, sizeof(::CDOTAUserMsg_HPManaAlert)},
  { 243, 256, -1, sizeof(::CDOTAUserMsg_NeutralCampAlert)},
  { 263, 271, -1, sizeof(::CDOTAUserMsg_GlyphAlert)},
  { 273, 281, -1, sizeof(::CDOTAUserMsg_RadarAlert)},
  { 283, 293, -1, sizeof(::CDOTAUserMsg_WillPurchaseAlert)},
  { 297, 306, -1, sizeof(::CDOTAUserMsg_EmptyTeleportAlert)},
  { 309, 318, -1, sizeof(::CDOTAUserMsg_MarsArenaOfBloodAttack)},
  { 321, 329, -1, sizeof(::CDOTAEntityMsg_InvokerSpellCast)},
  { 331, 338, -1, sizeof(::CDOTAUserMsg_BuyBackStateAlert)},
  { 339, 350, -1, sizeof(::CDOTAUserMsg_QuickBuyAlert)},
  { 355, 363, -1, sizeof(::CDOTAUserMsg_CourierKilledAlert_LostItem)},
  { 365, 378, -1, sizeof(::CDOTAUserMsg_CourierKilledAlert)},
  { 385, 397, -1, sizeof(::CDOTAUserMsg_MinimapEvent)},
  { 403, 411, -1, sizeof(::CDOTAUserMsg_MapLine)},
  { 413, 424, -1, sizeof(::CDOTAUserMsg_MinimapDebugPoint)},
  { 429, 447, -1, sizeof(::CDOTAUserMsg_CreateLinearProjectile)},
  { 459, 466, -1, sizeof(::CDOTAUserMsg_DestroyLinearProjectile)},
  { 467, 475, -1, sizeof(::CDOTAUserMsg_DodgeTrackingProjectiles)},
  { 477, 486, -1, sizeof(::CDOTAUserMsg_SpectatorPlayerClick)},
  { 489, 504, -1, sizeof(::CDOTAUserMsg_SpectatorPlayerUnitOrders)},
  { 513, 523, -1, sizeof(::CDOTAUserMsg_NevermoreRequiem)},
  { 527, 535, -1, sizeof(::CDOTAUserMsg_InvalidCommand)},
  { 537, 545, -1, sizeof(::CDOTAUserMsg_HudError)},
  { 547, 557, -1, sizeof(::CDOTAUserMsg_SharedCooldown)},
  { 561, 568, -1, sizeof(::CDOTAUserMsg_SetNextAutobuyItem)},
  { 569, 578, -1, sizeof(::CDOTAUserMsg_HalloweenDrops)},
  { 581, 592, -1, sizeof(::CDOTAUserMsg_PredictionResult_Prediction)},
  { 597, 607, -1, sizeof(::CDOTAUserMsg_PredictionResult)},
  { 611, 623, -1, sizeof(::CDOTAResponseQuerySerialized_Fact)},
  { 629, -1, -1, sizeof(::CDOTAResponseQuerySerialized)},
  { 636, 646, -1, sizeof(::CDOTASpeechMatchOnClient)},
  { 650, 658, -1, sizeof(::CDOTAUserMsg_UnitEvent_Interval)},
  { 660, 672, -1, sizeof(::CDOTAUserMsg_UnitEvent_Speech)},
  { 678, 685, -1, sizeof(::CDOTAUserMsg_UnitEvent_SpeechMute)},
  { 686, 698, -1, sizeof(::CDOTAUserMsg_UnitEvent_AddGesture)},
  { 704, 711, -1, sizeof(::CDOTAUserMsg_UnitEvent_RemoveGesture)},
  { 712, 721, -1, sizeof(::CDOTAUserMsg_UnitEvent_BloodImpact)},
  { 724, 731, -1, sizeof(::CDOTAUserMsg_UnitEvent_FadeGesture)},
  { 732, 747, -1, sizeof(::CDOTAUserMsg_UnitEvent)},
  { 756, 763, -1, sizeof(::CDOTAUserMsg_ItemPurchased)},
  { 764, 771, -1, sizeof(::CDOTAUserMsg_ItemSold)},
  { 772, 783, -1, sizeof(::CDOTAUserMsg_ItemFound)},
  { 788, 799, -1, sizeof(::CDOTAUserMsg_OverheadEvent)},
  { 804, 812, -1, sizeof(::CDOTAUserMsg_TutorialTipInfo)},
  { 814, 824, -1, sizeof(::CDOTAUserMsg_TutorialFinish)},
  { 828, -1, -1, sizeof(::CDOTAUserMsg_TutorialMinimapPosition)},
  { 834, 844, -1, sizeof(::CDOTAUserMsg_SendGenericToolTip)},
  { 848, 856, -1, sizeof(::CDOTAUserMsg_WorldLine)},
  { 858, 869, -1, sizeof(::CDOTAUserMsg_ChatWheel)},
  { 874, 883, -1, sizeof(::CDOTAUserMsg_ReceivedXmasGift)},
  { 886, 898, -1, sizeof(::CDOTAUserMsg_ShowSurvey)},
  { 904, 911, -1, sizeof(::CDOTAUserMsg_UpdateSharedContent)},
  { 912, -1, -1, sizeof(::CDOTAUserMsg_TutorialRequestExp)},
  { 918, 925, -1, sizeof(::CDOTAUserMsg_TutorialFade)},
  { 926, 937, -1, sizeof(::CDOTAUserMsg_TutorialPingMinimap)},
  { 942, 949, -1, sizeof(::CDOTAUserMsg_GamerulesStateChanged)},
  { 950, 958, -1, sizeof(::CDOTAUserMsg_AddQuestLogEntry)},
  { 960, 968, -1, sizeof(::CDOTAUserMsg_SendStatPopup)},
  { 970, 977, -1, sizeof(::CDOTAUserMsg_DismissAllStatPopups)},
  { 978, 987, -1, sizeof(::CDOTAUserMsg_SendRoshanSpectatorPhase)},
  { 990, 998, -1, sizeof(::CDOTAUserMsg_SendRoshanPopup)},
  { 1000, -1, -1, sizeof(::CDOTAUserMsg_SendFinalGold)},
  { 1008, 1017, -1, sizeof(::CDOTAUserMsg_CustomMsg)},
  { 1020, 1028, -1, sizeof(::CDOTAUserMsg_CoachHUDPing)},
  { 1030, -1, -1, sizeof(::CDOTAUserMsg_ClientLoadGridNav)},
  { 1036, 1059, -1, sizeof(::CDOTAUserMsg_TE_Projectile)},
  { 1076, 1098, -1, sizeof(::CDOTAUserMsg_TE_ProjectileLoc)},
  { 1114, 1121, -1, sizeof(::CDOTAUserMsg_TE_DestroyProjectile)},
  { 1122, 1132, -1, sizeof(::CDOTAUserMsg_TE_DotaBloodImpact)},
  { 1136, 1154, -1, sizeof(::CDOTAUserMsg_AbilityPing)},
  { 1166, 1179, -1, sizeof(::CDOTAUserMsg_TE_UnitAnimation)},
  { 1186, 1194, -1, sizeof(::CDOTAUserMsg_TE_UnitAnimationEnd)},
  { 1196, 1208, -1, sizeof(::CDOTAUserMsg_ShowGenericPopup)},
  { 1214, 1224, -1, sizeof(::CDOTAUserMsg_VoteStart)},
  { 1228, -1, -1, sizeof(::CDOTAUserMsg_VoteUpdate)},
  { 1235, 1242, -1, sizeof(::CDOTAUserMsg_VoteEnd)},
  { 1243, 1254, -1, sizeof(::CDOTAUserMsg_BoosterStatePlayer)},
  { 1259, -1, -1, sizeof(::CDOTAUserMsg_BoosterState)},
  { 1266, -1, -1, sizeof(::CDOTAUserMsg_PlayerMMR)},
  { 1273, 1282, -1, sizeof(::CDOTAUserMsg_AbilitySteal)},
  { 1285, 1295, -1, sizeof(::CDOTAUserMsg_StatsHeroLookup)},
  { 1299, 1307, -1, sizeof(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair)},
  { 1309, 1317, -1, sizeof(::CDOTAUserMsg_StatsHeroPositionInfo)},
  { 1319, 1340, -1, sizeof(::CDOTAUserMsg_StatsHeroMinuteDetails)},
  { 1355, 1364, -1, sizeof(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance)},
  { 1367, 1383, -1, sizeof(::CDOTAUserMsg_StatsTeamMinuteDetails)},
  { 1393, 1405, -1, sizeof(::CDOTAUserMsg_StatsPlayerKillShare)},
  { 1411, 1423, -1, sizeof(::CDOTAUserMsg_StatsKillDetails)},
  { 1429, 1439, -1, sizeof(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails)},
  { 1443, 1453, -1, sizeof(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails)},
  { 1457, -1, -1, sizeof(::CDOTAUserMsg_StatsMatchDetails)},
  { 1469, 1476, -1, sizeof(::CDOTAUserMsg_MiniTaunt)},
  { 1477, 1484, -1, sizeof(::CDOTAUserMsg_SpeechBubble)},
  { 1485, 1495, -1, sizeof(::CDOTAUserMsg_CustomHeaderMessage)},
  { 1499, 1508, -1, sizeof(::CMsgHeroAbilityStat)},
  { 1511, 1519, -1, sizeof(::CMsgCombatAnalyzerPlayerStat)},
  { 1521, 1529, -1, sizeof(::CMsgCombatAnalyzerStats)},
  { 1531, 1541, -1, sizeof(::CDOTAUserMsg_BeastChat)},
  { 1545, 1554, -1, sizeof(::CDOTAUserMsg_CustomHudElement_Create)},
  { 1557, 1566, -1, sizeof(::CDOTAUserMsg_CustomHudElement_Modify)},
  { 1569, 1576, -1, sizeof(::CDOTAUserMsg_CustomHudElement_Destroy)},
  { 1577, 1585, -1, sizeof(::CDOTAUserMsg_CompendiumStatePlayer)},
  { 1587, -1, -1, sizeof(::CDOTAUserMsg_CompendiumState)},
  { 1594, 1608, -1, sizeof(::CDOTAUserMsg_ProjectionAbility)},
  { 1616, 1624, -1, sizeof(::CDOTAUserMsg_ProjectionEvent)},
  { 1626, 1634, -1, sizeof(::CDOTAUserMsg_XPAlert)},
  { 1636, 1647, -1, sizeof(::CDOTAUserMsg_TalentTreeAlert)},
  { 1652, -1, -1, sizeof(::CDOTAUserMsg_UpdateQuestProgress)},
  { 1658, 1672, -1, sizeof(::CDOTAUserMsg_QuestStatus)},
  { 1680, 1689, -1, sizeof(::CDOTAUserMsg_SuggestHeroPick)},
  { 1692, 1700, -1, sizeof(::CDOTAUserMsg_SuggestHeroRole)},
  { 1702, 1714, -1, sizeof(::CDOTAUserMsg_KillcamDamageTaken)},
  { 1720, 1728, -1, sizeof(::CDOTAUserMsg_SelectPenaltyGold)},
  { 1730, 1741, -1, sizeof(::CDOTAUserMsg_RollDiceResult)},
  { 1746, 1755, -1, sizeof(::CDOTAUserMsg_FlipCoinResult)},
  { 1758, 1765, -1, sizeof(::CDOTAUserMessage_RequestItemSuggestions)},
  { 1766, 1774, -1, sizeof(::CDOTAUserMessage_TeamCaptainChanged)},
  { 1776, 1784, -1, sizeof(::CDOTAUserMsg_ChatWheelCooldown)},
  { 1786, 1797, -1, sizeof(::CDOTAUserMsg_HeroRelicProgress)},
  { 1802, 1811, -1, sizeof(::CDOTAUserMsg_AbilityDraftRequestAbility)},
  { 1814, 1825, -1, sizeof(::CDOTAUserMsg_DamageReport)},
  { 1830, 1842, -1, sizeof(::CDOTAUserMsg_SalutePlayer)},
  { 1848, 1856, -1, sizeof(::CDOTAUserMsg_TipAlert)},
  { 1858, 1867, -1, sizeof(::CDOTAUserMsg_ReplaceQueryUnit)},
  { 1870, 1879, -1, sizeof(::CDOTAUserMsg_ESArcanaCombo)},
  { 1882, 1891, -1, sizeof(::CDOTAUserMsg_ESArcanaComboSummary)},
  { 1894, 1904, -1, sizeof(::CDOTAUserMsg_OMArcanaCombo)},
  { 1908, 1918, -1, sizeof(::CDOTAUserMsg_HighFiveCompleted)},
  { 1922, 1929, -1, sizeof(::CDOTAUserMsg_HighFiveLeftHanging)},
  { 1930, 1940, -1, sizeof(::CDOTAUserMsg_ShovelUnearth)},
  { 1944, 1952, -1, sizeof(::CDOTAUserMsg_AllStarEvent_PlayerScore)},
  { 1954, 1965, -1, sizeof(::CDOTAUserMsg_AllStarEvent)},
  { 1970, -1, -1, sizeof(::CDOTAUserMsg_QueuedOrderRemoved)},
  { 1977, 1990, -1, sizeof(::CDOTAUserMsg_DebugChallenge)},
  { 1997, 2007, -1, sizeof(::CDOTAUserMsg_FoundNeutralItem)},
  { 2011, 2019, -1, sizeof(::CDOTAUserMsg_OutpostCaptured)},
  { 2021, 2029, -1, sizeof(::CDOTAUserMsg_OutpostGrantedXP)},
  { 2031, 2038, -1, sizeof(::CDOTAUserMsg_MoveCameraToUnit)},
  { 2039, 2048, -1, sizeof(::CDOTAUserMsg_PauseMinigameData_DataBit)},
  { 2051, -1, -1, sizeof(::CDOTAUserMsg_PauseMinigameData)},
  { 2058, 2069, -1, sizeof(::CDOTAUserMsg_VersusScene_PlayerBehavior)},
  { 2074, 2084, -1, sizeof(::CDOTAUserMsg_QoP_ArcanaSummary)},
  { 2088, 2096, -1, sizeof(::CDOTAUserMsg_HotPotato_Created)},
  { 2098, 2105, -1, sizeof(::CDOTAUserMsg_HotPotato_Exploded)},
  { 2106, 2115, -1, sizeof(::CDOTAUserMsg_WK_Arcana_Progress)},
  { 2118, 2126, -1, sizeof(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress)},
  { 2128, 2141, -1, sizeof(::CDOTAUserMsg_GuildChallenge_Progress)},
  { 2148, 2161, -1, sizeof(::CDOTAUserMsg_WRArcanaProgress)},
  { 2168, 2182, -1, sizeof(::CDOTAUserMsg_WRArcanaSummary)},
  { 2190, 2200, -1, sizeof(::CDOTAUserMsg_EmptyItemSlotAlert)},
  { 2204, 2216, -1, sizeof(::CDOTAUserMsg_AghsStatusAlert)},
  { 2222, -1, -1, sizeof(::CDOTAUserMsg_MutedPlayers)},
  { 2230, 2251, -1, sizeof(::CDOTAUserMsg_ContextualTip)},
  { 2266, 2275, -1, sizeof(::CDOTAUserMsg_ChatMessage)},
  { 2278, 2286, -1, sizeof(::CDOTAUserMsg_RockPaperScissorsStarted)},
  { 2288, 2298, -1, sizeof(::CDOTAUserMsg_RockPaperScissorsFinished)},
  { 2302, 2310, -1, sizeof(::CDOTAUserMsg_DuelOpponentKilled)},
  { 2312, 2320, -1, sizeof(::CDOTAUserMsg_DuelAccepted)},
  { 2322, 2329, -1, sizeof(::CDOTAUserMsg_DuelRequested)},
  { 2330, 2341, -1, sizeof(::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)},
  { 2346, 2354, -1, sizeof(::CDOTAUserMsg_PlayerDraftSuggestPick)},
  { 2356, 2365, -1, sizeof(::CDOTAUserMsg_PlayerDraftPick)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CDOTAUserMsg_AIDebugLine_default_instance_._instance,
  &::_CDOTAUserMsg_Ping_default_instance_._instance,
  &::_CDOTAUserMsg_SwapVerify_default_instance_._instance,
  &::_CDOTAUserMsg_ChatEvent_default_instance_._instance,
  &::_CDOTAUserMsg_BotChat_default_instance_._instance,
  &::_CDOTAUserMsg_CombatHeroPositions_default_instance_._instance,
  &::_CDOTAUserMsg_CombatLogBulkData_default_instance_._instance,
  &::_CDOTAUserMsg_ProjectileParticleCPData_default_instance_._instance,
  &::_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_._instance,
  &::_CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_._instance,
  &::_CDOTAUserMsg_MiniKillCamInfo_default_instance_._instance,
  &::_CDOTAUserMsg_GlobalLightColor_default_instance_._instance,
  &::_CDOTAUserMsg_GlobalLightDirection_default_instance_._instance,
  &::_CDOTAUserMsg_LocationPing_default_instance_._instance,
  &::_CDOTAUserMsg_PingConfirmation_default_instance_._instance,
  &::_CDOTAUserMsg_ItemAlert_default_instance_._instance,
  &::_CDOTAUserMsg_EnemyItemAlert_default_instance_._instance,
  &::_CDOTAUserMsg_ModifierAlert_default_instance_._instance,
  &::_CDOTAUserMsg_HPManaAlert_default_instance_._instance,
  &::_CDOTAUserMsg_NeutralCampAlert_default_instance_._instance,
  &::_CDOTAUserMsg_GlyphAlert_default_instance_._instance,
  &::_CDOTAUserMsg_RadarAlert_default_instance_._instance,
  &::_CDOTAUserMsg_WillPurchaseAlert_default_instance_._instance,
  &::_CDOTAUserMsg_EmptyTeleportAlert_default_instance_._instance,
  &::_CDOTAUserMsg_MarsArenaOfBloodAttack_default_instance_._instance,
  &::_CDOTAEntityMsg_InvokerSpellCast_default_instance_._instance,
  &::_CDOTAUserMsg_BuyBackStateAlert_default_instance_._instance,
  &::_CDOTAUserMsg_QuickBuyAlert_default_instance_._instance,
  &::_CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_._instance,
  &::_CDOTAUserMsg_CourierKilledAlert_default_instance_._instance,
  &::_CDOTAUserMsg_MinimapEvent_default_instance_._instance,
  &::_CDOTAUserMsg_MapLine_default_instance_._instance,
  &::_CDOTAUserMsg_MinimapDebugPoint_default_instance_._instance,
  &::_CDOTAUserMsg_CreateLinearProjectile_default_instance_._instance,
  &::_CDOTAUserMsg_DestroyLinearProjectile_default_instance_._instance,
  &::_CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_._instance,
  &::_CDOTAUserMsg_SpectatorPlayerClick_default_instance_._instance,
  &::_CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_._instance,
  &::_CDOTAUserMsg_NevermoreRequiem_default_instance_._instance,
  &::_CDOTAUserMsg_InvalidCommand_default_instance_._instance,
  &::_CDOTAUserMsg_HudError_default_instance_._instance,
  &::_CDOTAUserMsg_SharedCooldown_default_instance_._instance,
  &::_CDOTAUserMsg_SetNextAutobuyItem_default_instance_._instance,
  &::_CDOTAUserMsg_HalloweenDrops_default_instance_._instance,
  &::_CDOTAUserMsg_PredictionResult_Prediction_default_instance_._instance,
  &::_CDOTAUserMsg_PredictionResult_default_instance_._instance,
  &::_CDOTAResponseQuerySerialized_Fact_default_instance_._instance,
  &::_CDOTAResponseQuerySerialized_default_instance_._instance,
  &::_CDOTASpeechMatchOnClient_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_Interval_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_Speech_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_AddGesture_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_._instance,
  &::_CDOTAUserMsg_UnitEvent_default_instance_._instance,
  &::_CDOTAUserMsg_ItemPurchased_default_instance_._instance,
  &::_CDOTAUserMsg_ItemSold_default_instance_._instance,
  &::_CDOTAUserMsg_ItemFound_default_instance_._instance,
  &::_CDOTAUserMsg_OverheadEvent_default_instance_._instance,
  &::_CDOTAUserMsg_TutorialTipInfo_default_instance_._instance,
  &::_CDOTAUserMsg_TutorialFinish_default_instance_._instance,
  &::_CDOTAUserMsg_TutorialMinimapPosition_default_instance_._instance,
  &::_CDOTAUserMsg_SendGenericToolTip_default_instance_._instance,
  &::_CDOTAUserMsg_WorldLine_default_instance_._instance,
  &::_CDOTAUserMsg_ChatWheel_default_instance_._instance,
  &::_CDOTAUserMsg_ReceivedXmasGift_default_instance_._instance,
  &::_CDOTAUserMsg_ShowSurvey_default_instance_._instance,
  &::_CDOTAUserMsg_UpdateSharedContent_default_instance_._instance,
  &::_CDOTAUserMsg_TutorialRequestExp_default_instance_._instance,
  &::_CDOTAUserMsg_TutorialFade_default_instance_._instance,
  &::_CDOTAUserMsg_TutorialPingMinimap_default_instance_._instance,
  &::_CDOTAUserMsg_GamerulesStateChanged_default_instance_._instance,
  &::_CDOTAUserMsg_AddQuestLogEntry_default_instance_._instance,
  &::_CDOTAUserMsg_SendStatPopup_default_instance_._instance,
  &::_CDOTAUserMsg_DismissAllStatPopups_default_instance_._instance,
  &::_CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_._instance,
  &::_CDOTAUserMsg_SendRoshanPopup_default_instance_._instance,
  &::_CDOTAUserMsg_SendFinalGold_default_instance_._instance,
  &::_CDOTAUserMsg_CustomMsg_default_instance_._instance,
  &::_CDOTAUserMsg_CoachHUDPing_default_instance_._instance,
  &::_CDOTAUserMsg_ClientLoadGridNav_default_instance_._instance,
  &::_CDOTAUserMsg_TE_Projectile_default_instance_._instance,
  &::_CDOTAUserMsg_TE_ProjectileLoc_default_instance_._instance,
  &::_CDOTAUserMsg_TE_DestroyProjectile_default_instance_._instance,
  &::_CDOTAUserMsg_TE_DotaBloodImpact_default_instance_._instance,
  &::_CDOTAUserMsg_AbilityPing_default_instance_._instance,
  &::_CDOTAUserMsg_TE_UnitAnimation_default_instance_._instance,
  &::_CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_._instance,
  &::_CDOTAUserMsg_ShowGenericPopup_default_instance_._instance,
  &::_CDOTAUserMsg_VoteStart_default_instance_._instance,
  &::_CDOTAUserMsg_VoteUpdate_default_instance_._instance,
  &::_CDOTAUserMsg_VoteEnd_default_instance_._instance,
  &::_CDOTAUserMsg_BoosterStatePlayer_default_instance_._instance,
  &::_CDOTAUserMsg_BoosterState_default_instance_._instance,
  &::_CDOTAUserMsg_PlayerMMR_default_instance_._instance,
  &::_CDOTAUserMsg_AbilitySteal_default_instance_._instance,
  &::_CDOTAUserMsg_StatsHeroLookup_default_instance_._instance,
  &::_CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_._instance,
  &::_CDOTAUserMsg_StatsHeroPositionInfo_default_instance_._instance,
  &::_CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_._instance,
  &::_CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_._instance,
  &::_CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_._instance,
  &::_CDOTAUserMsg_StatsPlayerKillShare_default_instance_._instance,
  &::_CDOTAUserMsg_StatsKillDetails_default_instance_._instance,
  &::_CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_._instance,
  &::_CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_._instance,
  &::_CDOTAUserMsg_StatsMatchDetails_default_instance_._instance,
  &::_CDOTAUserMsg_MiniTaunt_default_instance_._instance,
  &::_CDOTAUserMsg_SpeechBubble_default_instance_._instance,
  &::_CDOTAUserMsg_CustomHeaderMessage_default_instance_._instance,
  &::_CMsgHeroAbilityStat_default_instance_._instance,
  &::_CMsgCombatAnalyzerPlayerStat_default_instance_._instance,
  &::_CMsgCombatAnalyzerStats_default_instance_._instance,
  &::_CDOTAUserMsg_BeastChat_default_instance_._instance,
  &::_CDOTAUserMsg_CustomHudElement_Create_default_instance_._instance,
  &::_CDOTAUserMsg_CustomHudElement_Modify_default_instance_._instance,
  &::_CDOTAUserMsg_CustomHudElement_Destroy_default_instance_._instance,
  &::_CDOTAUserMsg_CompendiumStatePlayer_default_instance_._instance,
  &::_CDOTAUserMsg_CompendiumState_default_instance_._instance,
  &::_CDOTAUserMsg_ProjectionAbility_default_instance_._instance,
  &::_CDOTAUserMsg_ProjectionEvent_default_instance_._instance,
  &::_CDOTAUserMsg_XPAlert_default_instance_._instance,
  &::_CDOTAUserMsg_TalentTreeAlert_default_instance_._instance,
  &::_CDOTAUserMsg_UpdateQuestProgress_default_instance_._instance,
  &::_CDOTAUserMsg_QuestStatus_default_instance_._instance,
  &::_CDOTAUserMsg_SuggestHeroPick_default_instance_._instance,
  &::_CDOTAUserMsg_SuggestHeroRole_default_instance_._instance,
  &::_CDOTAUserMsg_KillcamDamageTaken_default_instance_._instance,
  &::_CDOTAUserMsg_SelectPenaltyGold_default_instance_._instance,
  &::_CDOTAUserMsg_RollDiceResult_default_instance_._instance,
  &::_CDOTAUserMsg_FlipCoinResult_default_instance_._instance,
  &::_CDOTAUserMessage_RequestItemSuggestions_default_instance_._instance,
  &::_CDOTAUserMessage_TeamCaptainChanged_default_instance_._instance,
  &::_CDOTAUserMsg_ChatWheelCooldown_default_instance_._instance,
  &::_CDOTAUserMsg_HeroRelicProgress_default_instance_._instance,
  &::_CDOTAUserMsg_AbilityDraftRequestAbility_default_instance_._instance,
  &::_CDOTAUserMsg_DamageReport_default_instance_._instance,
  &::_CDOTAUserMsg_SalutePlayer_default_instance_._instance,
  &::_CDOTAUserMsg_TipAlert_default_instance_._instance,
  &::_CDOTAUserMsg_ReplaceQueryUnit_default_instance_._instance,
  &::_CDOTAUserMsg_ESArcanaCombo_default_instance_._instance,
  &::_CDOTAUserMsg_ESArcanaComboSummary_default_instance_._instance,
  &::_CDOTAUserMsg_OMArcanaCombo_default_instance_._instance,
  &::_CDOTAUserMsg_HighFiveCompleted_default_instance_._instance,
  &::_CDOTAUserMsg_HighFiveLeftHanging_default_instance_._instance,
  &::_CDOTAUserMsg_ShovelUnearth_default_instance_._instance,
  &::_CDOTAUserMsg_AllStarEvent_PlayerScore_default_instance_._instance,
  &::_CDOTAUserMsg_AllStarEvent_default_instance_._instance,
  &::_CDOTAUserMsg_QueuedOrderRemoved_default_instance_._instance,
  &::_CDOTAUserMsg_DebugChallenge_default_instance_._instance,
  &::_CDOTAUserMsg_FoundNeutralItem_default_instance_._instance,
  &::_CDOTAUserMsg_OutpostCaptured_default_instance_._instance,
  &::_CDOTAUserMsg_OutpostGrantedXP_default_instance_._instance,
  &::_CDOTAUserMsg_MoveCameraToUnit_default_instance_._instance,
  &::_CDOTAUserMsg_PauseMinigameData_DataBit_default_instance_._instance,
  &::_CDOTAUserMsg_PauseMinigameData_default_instance_._instance,
  &::_CDOTAUserMsg_VersusScene_PlayerBehavior_default_instance_._instance,
  &::_CDOTAUserMsg_QoP_ArcanaSummary_default_instance_._instance,
  &::_CDOTAUserMsg_HotPotato_Created_default_instance_._instance,
  &::_CDOTAUserMsg_HotPotato_Exploded_default_instance_._instance,
  &::_CDOTAUserMsg_WK_Arcana_Progress_default_instance_._instance,
  &::_CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress_default_instance_._instance,
  &::_CDOTAUserMsg_GuildChallenge_Progress_default_instance_._instance,
  &::_CDOTAUserMsg_WRArcanaProgress_default_instance_._instance,
  &::_CDOTAUserMsg_WRArcanaSummary_default_instance_._instance,
  &::_CDOTAUserMsg_EmptyItemSlotAlert_default_instance_._instance,
  &::_CDOTAUserMsg_AghsStatusAlert_default_instance_._instance,
  &::_CDOTAUserMsg_MutedPlayers_default_instance_._instance,
  &::_CDOTAUserMsg_ContextualTip_default_instance_._instance,
  &::_CDOTAUserMsg_ChatMessage_default_instance_._instance,
  &::_CDOTAUserMsg_RockPaperScissorsStarted_default_instance_._instance,
  &::_CDOTAUserMsg_RockPaperScissorsFinished_default_instance_._instance,
  &::_CDOTAUserMsg_DuelOpponentKilled_default_instance_._instance,
  &::_CDOTAUserMsg_DuelAccepted_default_instance_._instance,
  &::_CDOTAUserMsg_DuelRequested_default_instance_._instance,
  &::_CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled_default_instance_._instance,
  &::_CDOTAUserMsg_PlayerDraftSuggestPick_default_instance_._instance,
  &::_CDOTAUserMsg_PlayerDraftPick_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fusermessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027dota_usermessages.proto\032\026networkbasety"
  "pes.proto\032\027dota_shared_enums.proto\032\031dota"
  "_commonmessages.proto\"+\n\030CDOTAUserMsg_AI"
  "DebugLine\022\017\n\007message\030\001 \001(\t\"/\n\021CDOTAUserM"
  "sg_Ping\022\014\n\004ping\030\002 \001(\r\022\014\n\004loss\030\003 \001(\r\"0\n\027C"
  "DOTAUserMsg_SwapVerify\022\025\n\tplayer_id\030\001 \001("
  "\005:\002-1\"\217\002\n\026CDOTAUserMsg_ChatEvent\0226\n\004type"
  "\030\001 \002(\0162\022.DOTA_CHAT_MESSAGE:\024CHAT_MESSAGE"
  "_INVALID\022\r\n\005value\030\002 \001(\r\022\026\n\nplayerid_1\030\003 "
  "\001(\021:\002-1\022\026\n\nplayerid_2\030\004 \001(\021:\002-1\022\026\n\nplaye"
  "rid_3\030\005 \001(\021:\002-1\022\026\n\nplayerid_4\030\006 \001(\021:\002-1\022"
  "\026\n\nplayerid_5\030\007 \001(\021:\002-1\022\026\n\nplayerid_6\030\010 "
  "\001(\021:\002-1\022\016\n\006value2\030\t \001(\r\022\016\n\006value3\030\n \001(\r\""
  "a\n\024CDOTAUserMsg_BotChat\022\025\n\tplayer_id\030\001 \001"
  "(\005:\002-1\022\017\n\007message\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\022"
  "\021\n\tteam_only\030\005 \001(\010\"q\n CDOTAUserMsg_Comba"
  "tHeroPositions\022\r\n\005index\030\001 \001(\r\022\014\n\004time\030\002 "
  "\001(\005\022 \n\tworld_pos\030\003 \001(\0132\r.CMsgVector2D\022\016\n"
  "\006health\030\004 \001(\005\"\243\001\n\036CDOTAUserMsg_CombatLog"
  "BulkData\022/\n\016combat_entries\030\001 \003(\0132\027.CMsgD"
  "OTACombatLogEntry\022\021\n\ttimestamp\030\002 \001(\002\022\020\n\010"
  "duration\030\003 \001(\002\022\025\n\tplayer_id\030\004 \001(\005:\002-1\022\024\n"
  "\014request_time\030\005 \001(\002\"[\n%CDOTAUserMsg_Proj"
  "ectileParticleCPData\022\025\n\rcontrol_point\030\001 "
  "\001(\005\022\033\n\006vector\030\002 \001(\0132\013.CMsgVector\"\245\002\n\034CDO"
  "TAUserMsg_MiniKillCamInfo\0229\n\tattackers\030\001"
  " \003(\0132&.CDOTAUserMsg_MiniKillCamInfo.Atta"
  "cker\032\311\001\n\010Attacker\022\032\n\010attacker\030\001 \001(\r:\010167"
  "77215\022\024\n\014total_damage\030\002 \001(\005\022A\n\tabilities"
  "\030\003 \003(\0132..CDOTAUserMsg_MiniKillCamInfo.At"
  "tacker.Ability\022\025\n\rattacker_name\030\004 \001(\t\0321\n"
  "\007Ability\022\026\n\nability_id\030\001 \001(\005:\002-1\022\016\n\006dama"
  "ge\030\002 \001(\005\"@\n\035CDOTAUserMsg_GlobalLightColo"
  "r\022\r\n\005color\030\001 \001(\r\022\020\n\010duration\030\002 \001(\002\"U\n!CD"
  "OTAUserMsg_GlobalLightDirection\022\036\n\tdirec"
  "tion\030\001 \001(\0132\013.CMsgVector\022\020\n\010duration\030\002 \001("
  "\002\"a\n\031CDOTAUserMsg_LocationPing\022\025\n\tplayer"
  "_id\030\001 \001(\005:\002-1\022-\n\rlocation_ping\030\002 \001(\0132\026.C"
  "DOTAMsg_LocationPing\"\221\001\n\035CDOTAUserMsg_Pi"
  "ngConfirmation\022(\n\034player_id_of_original_"
  "pinger\030\001 \001(\005:\002-1\022\024\n\014entity_index\030\002 \001(\r\022\021"
  "\n\ticon_type\030\003 \001(\r\022\035\n\010location\030\004 \001(\0132\013.CM"
  "sgVector\"X\n\026CDOTAUserMsg_ItemAlert\022\025\n\tpl"
  "ayer_id\030\001 \001(\005:\002-1\022\'\n\nitem_alert\030\002 \001(\0132\023."
  "CDOTAMsg_ItemAlert\"\355\001\n\033CDOTAUserMsg_Enem"
  "yItemAlert\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\034\n\020tar"
  "get_player_id\030\002 \001(\005:\002-1\022\033\n\017item_ability_"
  "id\030\003 \001(\005:\002-1\022\025\n\trune_type\030\004 \001(\005:\002-1\022\021\n\te"
  "ntity_id\030\005 \001(\005\022\026\n\nitem_level\030\006 \001(\005:\002-1\022\033"
  "\n\017primary_charges\030\007 \001(\005:\002-1\022\035\n\021secondary"
  "_charges\030\010 \001(\005:\002-1\"\247\001\n\032CDOTAUserMsg_Modi"
  "fierAlert\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\022\n\nclas"
  "s_name\030\002 \001(\t\022\023\n\013stack_count\030\003 \001(\r\022\021\n\tis_"
  "debuff\030\004 \001(\010\022\033\n\017target_entindex\030\005 \001(\005:\002-"
  "1\022\031\n\021seconds_remaining\030\006 \001(\002\"g\n\030CDOTAUse"
  "rMsg_HPManaAlert\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022"
  "\033\n\017target_entindex\030\002 \001(\005:\002-1\022\027\n\017show_raw"
  "_values\030\003 \001(\010\"\307\001\n\035CDOTAUserMsg_NeutralCa"
  "mpAlert\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\034\n\020spawne"
  "r_entindex\030\002 \001(\005:\002-1\022\031\n\runit_entindex\030\003 "
  "\001(\005:\002-1\022\023\n\013stack_count\030\004 \001(\005\022\021\n\tcamp_typ"
  "e\030\005 \001(\005\022\025\n\rstack_request\030\006 \001(\010\022\027\n\017stack_"
  "intention\030\007 \001(\010\"B\n\027CDOTAUserMsg_GlyphAle"
  "rt\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\020\n\010negative\030\002 "
  "\001(\010\"B\n\027CDOTAUserMsg_RadarAlert\022\025\n\tplayer"
  "_id\030\001 \001(\005:\002-1\022\020\n\010negative\030\002 \001(\010\"\216\001\n\036CDOT"
  "AUserMsg_WillPurchaseAlert\022\033\n\017item_abili"
  "ty_id\030\001 \001(\005:\002-1\022\025\n\tplayer_id\030\002 \001(\005:\002-1\022\026"
  "\n\016gold_remaining\030\003 \001(\r\022 \n\024suggestion_pla"
  "yer_id\030\004 \001(\005:\002-1\"w\n\037CDOTAUserMsg_EmptyTe"
  "leportAlert\022\034\n\020source_player_id\030\001 \001(\005:\002-"
  "1\022\034\n\020target_player_id\030\002 \001(\005:\002-1\022\030\n\020coold"
  "own_seconds\030\003 \001(\005\"\200\001\n#CDOTAUserMsg_MarsA"
  "renaOfBloodAttack\022 \n\016source_ehandle\030\001 \001("
  "\r:\01016777215\022 \n\016target_ehandle\030\002 \001(\r:\010167"
  "77215\022\025\n\rwarrior_index\030\003 \001(\005\"Y\n\037CDOTAEnt"
  "ityMsg_InvokerSpellCast\022\037\n\nentity_msg\030\001 "
  "\001(\0132\013.CEntityMsg\022\025\n\rcast_activity\030\002 \001(\005\""
  "7\n\036CDOTAUserMsg_BuyBackStateAlert\022\025\n\tpla"
  "yer_id\030\001 \001(\005:\002-1\"\230\001\n\032CDOTAUserMsg_QuickB"
  "uyAlert\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\033\n\017item_a"
  "bility_id\030\002 \001(\005:\002-1\022\021\n\tgold_cost\030\003 \001(\005\022\035"
  "\n\025item_cooldown_seconds\030\004 \001(\005\022\024\n\014show_bu"
  "yback\030\005 \001(\010\"\255\002\n\037CDOTAUserMsg_CourierKill"
  "edAlert\022\014\n\004team\030\001 \001(\r\022\022\n\ngold_value\030\002 \001("
  "\r\022\037\n\rentity_handle\030\003 \001(\r:\01016777215\022\021\n\tti"
  "mestamp\030\004 \001(\005\022=\n\nlost_items\030\005 \003(\0132).CDOT"
  "AUserMsg_CourierKilledAlert.LostItem\022\034\n\020"
  "killer_player_id\030\006 \001(\005:\002-1\022\034\n\020owning_pla"
  "yer_id\030\007 \001(\005:\002-1\0329\n\010LostItem\022\033\n\017item_abi"
  "lity_id\030\001 \001(\005:\002-1\022\020\n\010quantity\030\002 \001(\r\"\240\001\n\031"
  "CDOTAUserMsg_MinimapEvent\022\022\n\nevent_type\030"
  "\001 \001(\005\022\037\n\rentity_handle\030\002 \001(\r:\01016777215\022\t"
  "\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\020\n\010duration\030\005 \001(\005\022&"
  "\n\024target_entity_handle\030\006 \001(\r:\01016777215\"Q"
  "\n\024CDOTAUserMsg_MapLine\022\025\n\tplayer_id\030\001 \001("
  "\005:\002-1\022\"\n\007mapline\030\002 \001(\0132\021.CDOTAMsg_MapLin"
  "e\"}\n\036CDOTAUserMsg_MinimapDebugPoint\022\035\n\010l"
  "ocation\030\001 \001(\0132\013.CMsgVector\022\r\n\005color\030\002 \001("
  "\r\022\014\n\004size\030\003 \001(\005\022\020\n\010duration\030\004 \001(\002\022\r\n\005ind"
  "ex\030\005 \001(\005\"\363\002\n#CDOTAUserMsg_CreateLinearPr"
  "ojectile\022\033\n\006origin\030\001 \001(\0132\013.CMsgVector\022\037\n"
  "\010velocity\030\002 \001(\0132\r.CMsgVector2D\022\024\n\010entind"
  "ex\030\004 \001(\005:\002-1\022\026\n\016particle_index\030\005 \001(\004\022\016\n\006"
  "handle\030\006 \001(\005\022#\n\014acceleration\030\007 \001(\0132\r.CMs"
  "gVector2D\022\021\n\tmax_speed\030\010 \001(\002\022\022\n\nfow_radi"
  "us\030\t \001(\002\022\031\n\021sticky_fow_reveal\030\n \001(\010\022\020\n\010d"
  "istance\030\013 \001(\002\022\025\n\rcolorgemcolor\030\014 \001(\007\022@\n\020"
  "particle_cp_data\030\r \003(\0132&.CDOTAUserMsg_Pr"
  "ojectileParticleCPData\"6\n$CDOTAUserMsg_D"
  "estroyLinearProjectile\022\016\n\006handle\030\001 \001(\005\"S"
  "\n%CDOTAUserMsg_DodgeTrackingProjectiles\022"
  "\024\n\010entindex\030\001 \002(\005:\002-1\022\024\n\014attacks_only\030\002 "
  "\001(\010\"f\n!CDOTAUserMsg_SpectatorPlayerClick"
  "\022\024\n\010entindex\030\001 \002(\005:\002-1\022\022\n\norder_type\030\002 \001"
  "(\005\022\027\n\014target_index\030\003 \001(\005:\0010\"\350\001\n&CDOTAUse"
  "rMsg_SpectatorPlayerUnitOrders\022\024\n\010entind"
  "ex\030\001 \001(\005:\002-1\022\022\n\norder_type\030\002 \001(\005\022\r\n\005unit"
  "s\030\003 \003(\005\022\027\n\014target_index\030\004 \001(\005:\0010\022\026\n\nabil"
  "ity_id\030\005 \001(\005:\002-1\022\035\n\010position\030\006 \001(\0132\013.CMs"
  "gVector\022\r\n\005queue\030\007 \001(\010\022\027\n\017sequence_numbe"
  "r\030\010 \001(\005\022\r\n\005flags\030\t \001(\r\"}\n\035CDOTAUserMsg_N"
  "evermoreRequiem\022\037\n\rentity_handle\030\001 \001(\r:\010"
  "16777215\022\r\n\005lines\030\002 \001(\005\022\033\n\006origin\030\003 \001(\0132"
  "\013.CMsgVector\022\017\n\007reverse\030\004 \001(\010\"G\n\033CDOTAUs"
  "erMsg_InvalidCommand\022\017\n\007message\030\001 \001(\t\022\027\n"
  "\017sequence_number\030\002 \001(\005\"B\n\025CDOTAUserMsg_H"
  "udError\022\020\n\010order_id\030\001 \001(\005\022\027\n\017sequence_nu"
  "mber\030\002 \001(\005\"g\n\033CDOTAUserMsg_SharedCooldow"
  "n\022\024\n\010entindex\030\001 \001(\005:\002-1\022\014\n\004name\030\002 \001(\t\022\020\n"
  "\010cooldown\030\003 \001(\002\022\022\n\nname_index\030\004 \001(\005\"/\n\037C"
  "DOTAUserMsg_SetNextAutobuyItem\022\014\n\004name\030\001"
  " \001(\t\"X\n\033CDOTAUserMsg_HalloweenDrops\022\021\n\ti"
  "tem_defs\030\001 \003(\r\022\022\n\nplayer_ids\030\002 \003(\005\022\022\n\npr"
  "ize_list\030\003 \001(\r\"\223\003\n\035CDOTAUserMsg_Predicti"
  "onResult\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010match_id"
  "\030\002 \001(\004\022\017\n\007correct\030\003 \001(\010\022>\n\013predictions\030\004"
  " \003(\0132).CDOTAUserMsg_PredictionResult.Pre"
  "diction\032\372\001\n\nPrediction\022\020\n\010item_def\030\001 \001(\r"
  "\022\023\n\013num_correct\030\002 \001(\r\022\021\n\tnum_fails\030\003 \001(\r"
  "\022X\n\006result\030\004 \001(\01621.CDOTAUserMsg_Predicti"
  "onResult.Prediction.EResult:\025k_eResult_I"
  "temGranted\022\031\n\021granted_item_defs\030\006 \003(\r\"=\n"
  "\007EResult\022\031\n\025k_eResult_ItemGranted\020\001\022\027\n\023k"
  "_eResult_Destroyed\020\002\"\336\002\n\034CDOTAResponseQu"
  "erySerialized\0221\n\005facts\030\001 \003(\0132\".CDOTAResp"
  "onseQuerySerialized.Fact\032\212\002\n\004Fact\022\013\n\003key"
  "\030\001 \002(\005\022F\n\007valtype\030\002 \002(\0162,.CDOTAResponseQ"
  "uerySerialized.Fact.ValueType:\007NUMERIC\022\023"
  "\n\013val_numeric\030\003 \001(\002\022\022\n\nval_string\030\004 \001(\t\022"
  "\035\n\025val_stringtable_index\030\005 \001(\005\022\027\n\017val_in"
  "t_numeric\030\006 \001(\021\"L\n\tValueType\022\013\n\007NUMERIC\020"
  "\001\022\n\n\006STRING\020\002\022\025\n\021STRINGTABLE_INDEX\020\003\022\017\n\013"
  "INT_NUMERIC\020\004\"\227\001\n\030CDOTASpeechMatchOnClie"
  "nt\022\026\n\016speech_concept\030\001 \001(\005\022\026\n\016recipient_"
  "type\030\002 \001(\005\0224\n\rresponsequery\030\003 \001(\0132\035.CDOT"
  "AResponseQuerySerialized\022\025\n\nrandomseed\030\004"
  " \001(\017:\0010\"\203\010\n\026CDOTAUserMsg_UnitEvent\0228\n\010ms"
  "g_type\030\001 \002(\0162\024.EDotaEntityMessages:\020DOTA"
  "_UNIT_SPEECH\022\024\n\014entity_index\030\002 \002(\005\022.\n\006sp"
  "eech\030\003 \001(\0132\036.CDOTAUserMsg_UnitEvent.Spee"
  "ch\0227\n\013speech_mute\030\004 \001(\0132\".CDOTAUserMsg_U"
  "nitEvent.SpeechMute\0227\n\013add_gesture\030\005 \001(\013"
  "2\".CDOTAUserMsg_UnitEvent.AddGesture\022=\n\016"
  "remove_gesture\030\006 \001(\0132%.CDOTAUserMsg_Unit"
  "Event.RemoveGesture\0229\n\014blood_impact\030\007 \001("
  "\0132#.CDOTAUserMsg_UnitEvent.BloodImpact\0229"
  "\n\014fade_gesture\030\010 \001(\0132#.CDOTAUserMsg_Unit"
  "Event.FadeGesture\0229\n\026speech_match_on_cli"
  "ent\030\t \001(\0132\031.CDOTASpeechMatchOnClient\032(\n\010"
  "Interval\022\r\n\005start\030\001 \001(\002\022\r\n\005range\030\002 \001(\002\032\246"
  "\001\n\006Speech\022\026\n\016speech_concept\030\001 \001(\005\022\020\n\010res"
  "ponse\030\002 \001(\t\022\026\n\016recipient_type\030\003 \001(\005\022\027\n\010m"
  "uteable\030\005 \001(\010:\005false\0222\n\010predelay\030\006 \001(\0132 "
  ".CDOTAUserMsg_UnitEvent.Interval\022\r\n\005flag"
  "s\030\007 \001(\r\032 \n\nSpeechMute\022\022\n\005delay\030\001 \001(\002:\0030."
  "5\032\213\001\n\nAddGesture\022\020\n\010activity\030\001 \001(\005\022\014\n\004sl"
  "ot\030\002 \001(\005\022\022\n\007fade_in\030\003 \001(\002:\0010\022\025\n\010fade_out"
  "\030\004 \001(\002:\0030.1\022\030\n\rplayback_rate\030\005 \001(\002:\0011\022\030\n"
  "\020sequence_variant\030\006 \001(\005\032!\n\rRemoveGesture"
  "\022\020\n\010activity\030\001 \001(\005\032@\n\013BloodImpact\022\r\n\005sca"
  "le\030\001 \001(\005\022\020\n\010x_normal\030\002 \001(\005\022\020\n\010y_normal\030\003"
  " \001(\005\032\037\n\013FadeGesture\022\020\n\010activity\030\001 \001(\005\"9\n"
  "\032CDOTAUserMsg_ItemPurchased\022\033\n\017item_abil"
  "ity_id\030\001 \001(\005:\002-1\"4\n\025CDOTAUserMsg_ItemSol"
  "d\022\033\n\017item_ability_id\030\001 \001(\005:\002-1\"n\n\026CDOTAU"
  "serMsg_ItemFound\022\022\n\006player\030\001 \001(\005:\002-1\022\017\n\007"
  "quality\030\002 \001(\005\022\016\n\006rarity\030\003 \001(\005\022\016\n\006method\030"
  "\004 \001(\005\022\017\n\007itemdef\030\005 \001(\r\"\321\001\n\032CDOTAUserMsg_"
  "OverheadEvent\022\?\n\014message_type\030\001 \002(\0162\024.DO"
  "TA_OVERHEAD_ALERT:\023OVERHEAD_ALERT_GOLD\022\r"
  "\n\005value\030\002 \001(\005\022\"\n\026target_player_entindex\030"
  "\003 \001(\005:\002-1\022\033\n\017target_entindex\030\004 \001(\005:\002-1\022\""
  "\n\026source_player_entindex\030\005 \001(\005:\002-1\">\n\034CD"
  "OTAUserMsg_TutorialTipInfo\022\014\n\004name\030\001 \001(\t"
  "\022\020\n\010progress\030\002 \001(\005\"]\n\033CDOTAUserMsg_Tutor"
  "ialFinish\022\017\n\007heading\030\001 \001(\t\022\016\n\006emblem\030\002 \001"
  "(\t\022\014\n\004body\030\003 \001(\t\022\017\n\007success\030\004 \001(\010\"&\n$CDO"
  "TAUserMsg_TutorialMinimapPosition\"_\n\037CDO"
  "TAUserMsg_SendGenericToolTip\022\r\n\005title\030\001 "
  "\001(\t\022\014\n\004text\030\002 \001(\t\022\020\n\010entindex\030\003 \001(\005\022\r\n\005c"
  "lose\030\004 \001(\010\"W\n\026CDOTAUserMsg_WorldLine\022\025\n\t"
  "player_id\030\001 \001(\005:\002-1\022&\n\tworldline\030\002 \001(\0132\023"
  ".CDOTAMsg_WorldLine\"\224\001\n\026CDOTAUserMsg_Cha"
  "tWheel\022#\n\017chat_message_id\030\001 \001(\r:\n4294967"
  "295\022\025\n\tplayer_id\030\002 \001(\005:\002-1\022\022\n\naccount_id"
  "\030\003 \001(\r\022\025\n\rparam_hero_id\030\004 \001(\r\022\023\n\013emotico"
  "n_id\030\005 \001(\r\"a\n\035CDOTAUserMsg_ReceivedXmasG"
  "ift\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\021\n\titem_name\030"
  "\002 \001(\t\022\026\n\016inventory_slot\030\003 \001(\005\"\244\001\n\027CDOTAU"
  "serMsg_ShowSurvey\022\021\n\tsurvey_id\030\001 \001(\005\022\020\n\010"
  "match_id\030\002 \001(\004\022\026\n\016response_style\030\003 \001(\t\022\030"
  "\n\020teammate_hero_id\030\004 \001(\r\022\025\n\rteammate_nam"
  "e\030\005 \001(\t\022\033\n\023teammate_account_id\030\006 \001(\r\"5\n "
  "CDOTAUserMsg_UpdateSharedContent\022\021\n\tslot"
  "_type\030\001 \001(\005\"!\n\037CDOTAUserMsg_TutorialRequ"
  "estExp\".\n\031CDOTAUserMsg_TutorialFade\022\021\n\tt"
  "gt_alpha\030\001 \001(\005\"|\n CDOTAUserMsg_TutorialP"
  "ingMinimap\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\r\n\005pos"
  "_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005pos_z\030\004 \001(\002\022\024"
  "\n\014entity_index\030\005 \001(\005\"3\n\"CDOTAUserMsg_Gam"
  "erulesStateChanged\022\r\n\005state\030\001 \001(\r\"E\n\035CDO"
  "TAUserMsg_AddQuestLogEntry\022\020\n\010npc_name\030\001"
  " \001(\t\022\022\n\nnpc_dialog\030\002 \001(\t\"_\n\032CDOTAUserMsg"
  "_SendStatPopup\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022*\n"
  "\tstatpopup\030\002 \001(\0132\027.CDOTAMsg_SendStatPopu"
  "p\"Z\n!CDOTAUserMsg_DismissAllStatPopups\0225"
  "\n\rdismissallmsg\030\001 \001(\0132\036.CDOTAMsg_Dismiss"
  "AllStatPopups\"\217\001\n%CDOTAUserMsg_SendRosha"
  "nSpectatorPhase\0226\n\005phase\030\001 \001(\0162\022.DOTA_RO"
  "SHAN_PHASE:\023k_SRSP_ROSHAN_ALIVE\022\030\n\020phase"
  "_start_time\030\002 \001(\005\022\024\n\014phase_length\030\003 \001(\005\""
  "C\n\034CDOTAUserMsg_SendRoshanPopup\022\021\n\trecla"
  "imed\030\001 \001(\010\022\020\n\010gametime\030\002 \001(\005\"L\n\032CDOTAUse"
  "rMsg_SendFinalGold\022\025\n\rreliable_gold\030\001 \003("
  "\r\022\027\n\017unreliable_gold\030\002 \003(\r\"O\n\026CDOTAUserM"
  "sg_CustomMsg\022\017\n\007message\030\001 \001(\t\022\025\n\tplayer_"
  "id\030\002 \001(\005:\002-1\022\r\n\005value\030\003 \001(\005\"\\\n\031CDOTAUser"
  "Msg_CoachHUDPing\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022"
  "(\n\010hud_ping\030\002 \001(\0132\026.CDOTAMsg_CoachHUDPin"
  "g\" \n\036CDOTAUserMsg_ClientLoadGridNav\"\363\003\n\032"
  "CDOTAUserMsg_TE_Projectile\022\030\n\006source\030\001 \001"
  "(\r:\01016777215\022\030\n\006target\030\002 \001(\r:\01016777215\022\022"
  "\n\nmove_speed\030\003 \001(\005\022\031\n\021source_attachment\030"
  "\004 \001(\005\022\036\n\026particle_system_handle\030\005 \001(\003\022\021\n"
  "\tdodgeable\030\006 \001(\010\022\021\n\tis_attack\030\007 \001(\010\022\023\n\013e"
  "xpire_time\030\t \001(\002\022\025\n\rmaximpacttime\030\n \001(\002\022"
  "\025\n\rcolorgemcolor\030\013 \001(\007\022\023\n\013launch_tick\030\014 "
  "\001(\005\022\016\n\006handle\030\r \001(\005\022\037\n\ntarget_loc\030\016 \001(\0132"
  "\013.CMsgVector\022@\n\020particle_cp_data\030\017 \003(\0132&"
  ".CDOTAUserMsg_ProjectileParticleCPData\022)"
  "\n!additional_particle_system_handle\030\020 \001("
  "\003\022\033\n\023original_move_speed\030\021 \001(\005\022\031\n\007abilit"
  "y\030\022 \001(\r:\01016777215\"\345\003\n\035CDOTAUserMsg_TE_Pr"
  "ojectileLoc\022\037\n\nsource_loc\030\001 \001(\0132\013.CMsgVe"
  "ctor\022\030\n\006target\030\002 \001(\r:\01016777215\022\022\n\nmove_s"
  "peed\030\003 \001(\005\022\036\n\026particle_system_handle\030\004 \001"
  "(\003\022\021\n\tdodgeable\030\005 \001(\010\022\021\n\tis_attack\030\006 \001(\010"
  "\022\023\n\013expire_time\030\t \001(\002\022\037\n\ntarget_loc\030\n \001("
  "\0132\013.CMsgVector\022\025\n\rcolorgemcolor\030\013 \001(\007\022\023\n"
  "\013launch_tick\030\014 \001(\005\022\016\n\006handle\030\r \001(\005\022\030\n\006so"
  "urce\030\016 \001(\r:\01016777215\022\031\n\021source_attachmen"
  "t\030\017 \001(\005\022@\n\020particle_cp_data\030\020 \003(\0132&.CDOT"
  "AUserMsg_ProjectileParticleCPData\022)\n!add"
  "itional_particle_system_handle\030\021 \001(\003\022\033\n\023"
  "original_move_speed\030\022 \001(\005\"3\n!CDOTAUserMs"
  "g_TE_DestroyProjectile\022\016\n\006handle\030\001 \001(\005\"l"
  "\n\037CDOTAUserMsg_TE_DotaBloodImpact\022\030\n\006ent"
  "ity\030\001 \001(\r:\01016777215\022\r\n\005scale\030\002 \001(\002\022\017\n\007xn"
  "ormal\030\003 \001(\002\022\017\n\007ynormal\030\004 \001(\002\"\303\002\n\030CDOTAUs"
  "erMsg_AbilityPing\022\025\n\tplayer_id\030\001 \001(\005:\002-1"
  "\022\026\n\nability_id\030\002 \001(\005:\002-1\0229\n\004type\030\003 \001(\0162\027"
  ".DOTA_ABILITY_PING_TYPE:\022ABILITY_PING_RE"
  "ADY\022\030\n\020cooldown_seconds\030\004 \001(\r\022\r\n\005level\030\005"
  " \001(\r\022\017\n\007passive\030\006 \001(\010\022\023\n\013mana_needed\030\007 \001"
  "(\r\022\021\n\tentity_id\030\010 \001(\r\022\027\n\017primary_charges"
  "\030\t \001(\005\022\031\n\021secondary_charges\030\n \001(\005\022\021\n\tctr"
  "l_held\030\014 \001(\010\022\024\n\014reclaim_time\030\r \001(\002\"\273\001\n\035C"
  "DOTAUserMsg_TE_UnitAnimation\022\030\n\006entity\030\001"
  " \001(\r:\01016777215\022\030\n\020sequence_variant\030\002 \001(\005"
  "\022\024\n\014playbackrate\030\003 \001(\002\022\021\n\tcastpoint\030\004 \001("
  "\002\022\014\n\004type\030\005 \001(\005\022\020\n\010activity\030\006 \001(\005\022\035\n\025lag"
  "_compensation_time\030\007 \001(\002\"J\n CDOTAUserMsg"
  "_TE_UnitAnimationEnd\022\030\n\006entity\030\001 \001(\r:\01016"
  "777215\022\014\n\004snap\030\002 \001(\010\"\221\001\n\035CDOTAUserMsg_Sh"
  "owGenericPopup\022\016\n\006header\030\001 \002(\t\022\014\n\004body\030\002"
  " \002(\t\022\016\n\006param1\030\003 \001(\t\022\016\n\006param2\030\004 \001(\t\022\023\n\013"
  "tint_screen\030\005 \001(\010\022\035\n\025show_no_other_dialo"
  "gs\030\006 \001(\010\"`\n\026CDOTAUserMsg_VoteStart\022\r\n\005ti"
  "tle\030\001 \001(\t\022\020\n\010duration\030\002 \001(\002\022\024\n\014choice_co"
  "unt\030\003 \001(\005\022\017\n\007choices\030\004 \003(\t\"0\n\027CDOTAUserM"
  "sg_VoteUpdate\022\025\n\rchoice_counts\030\001 \003(\005\"/\n\024"
  "CDOTAUserMsg_VoteEnd\022\027\n\017selected_choice\030"
  "\001 \001(\005\"\220\001\n\037CDOTAUserMsg_BoosterStatePlaye"
  "r\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\r\n\005bonus\030\002 \001(\002\022"
  "\023\n\013event_bonus\030\003 \001(\002\022\025\n\rbonus_item_id\030\004 "
  "\001(\r\022\033\n\023event_bonus_item_id\030\005 \001(\r\"V\n\031CDOT"
  "AUserMsg_BoosterState\0229\n\017boosted_players"
  "\030\001 \003(\0132 .CDOTAUserMsg_BoosterStatePlayer"
  "\")\n\026CDOTAUserMsg_PlayerMMR\022\017\n\003mmr\030\001 \003(\021B"
  "\002\020\001\"a\n\031CDOTAUserMsg_AbilitySteal\022\025\n\tplay"
  "er_id\030\001 \001(\005:\002-1\022\026\n\nability_id\030\002 \001(\005:\002-1\022"
  "\025\n\rability_level\030\003 \001(\r\"j\n\034CDOTAUserMsg_S"
  "tatsHeroLookup\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\017\n"
  "\007hero_id\030\002 \001(\005\022\021\n\thero_name\030\003 \001(\t\022\017\n\007per"
  "sona\030\004 \001(\t\"\372\001\n\"CDOTAUserMsg_StatsHeroPos"
  "itionInfo\022\030\n\020average_position\030\001 \001(\002\022J\n\020p"
  "osition_details\030\002 \003(\01320.CDOTAUserMsg_Sta"
  "tsHeroPositionInfo.PositionPair\032n\n\014Posit"
  "ionPair\022F\n\021position_category\030\001 \001(\0162\027.DOT"
  "A_POSITION_CATEGORY:\022DOTA_POSITION_NONE\022"
  "\026\n\016position_count\030\002 \001(\r\"\217\003\n#CDOTAUserMsg"
  "_StatsHeroMinuteDetails\022\021\n\tlast_hits\030\001 \001"
  "(\r\022\022\n\nhero_kills\030\002 \001(\r\022\023\n\013hero_damage\030\003 "
  "\001(\r\022\024\n\014tower_damage\030\004 \001(\r\022:\n\rposition_in"
  "fo\030\005 \001(\0132#.CDOTAUserMsg_StatsHeroPositio"
  "nInfo\022\020\n\010total_xp\030\006 \001(\r\022\021\n\tnet_worth\030\007 \001"
  "(\r\022\034\n\024harvested_creep_gold\030\010 \001(\r\022\024\n\014clai"
  "med_farm\030\t \001(\r\022\024\n\014wards_placed\030\n \001(\r\022\027\n\017"
  "runes_collected\030\013 \001(\r\022\020\n\010tps_used\030\014 \001(\r\022"
  "\022\n\nmana_spent\030\r \003(\r\022\027\n\017damage_absorbed\030\016"
  " \003(\r\022\023\n\013damage_done\030\017 \003(\r\"\347\003\n#CDOTAUserM"
  "sg_StatsTeamMinuteDetails\022:\n\014player_stat"
  "s\030\001 \003(\0132$.CDOTAUserMsg_StatsHeroMinuteDe"
  "tails\022\023\n\013tower_kills\030\002 \001(\r\022\025\n\rbarrack_ki"
  "lls\030\003 \001(\r\022!\n\031available_lane_creep_gold\030\004"
  " \001(\r\022\032\n\022balance_kill_value\030\005 \001(\r\022\033\n\023bala"
  "nce_tower_value\030\006 \001(\r\022\036\n\026balance_barrack"
  "s_value\030\007 \001(\r\022\032\n\022balance_gold_value\030\010 \001("
  "\r\022\030\n\020balance_xp_value\030\t \001(\r\022R\n\020lane_perf"
  "ormance\030\n \003(\01328.CDOTAUserMsg_StatsTeamMi"
  "nuteDetails.LocationPerformance\032R\n\023Locat"
  "ionPerformance\022\031\n\021location_category\030\001 \001("
  "\r\022\021\n\tstat_type\030\002 \001(\r\022\r\n\005value\030\003 \001(\r\"\260\001\n!"
  "CDOTAUserMsg_StatsPlayerKillShare\022\025\n\tpla"
  "yer_id\030\001 \001(\005:\002-1\022\032\n\022kill_share_percent\030\002"
  " \001(\002\022\024\n\014player_loc_x\030\003 \001(\002\022\024\n\014player_loc"
  "_y\030\004 \001(\002\022\026\n\016health_percent\030\005 \001(\002\022\024\n\014mana"
  "_percent\030\006 \001(\002\"\314\001\n\035CDOTAUserMsg_StatsKil"
  "lDetails\022\025\n\tvictim_id\030\001 \001(\005:\002-1\0227\n\013kill_"
  "shares\030\002 \003(\0132\".CDOTAUserMsg_StatsPlayerK"
  "illShare\022\026\n\016damage_to_kill\030\003 \001(\r\022\030\n\020effe"
  "ctive_health\030\004 \001(\r\022\022\n\ndeath_time\030\005 \001(\002\022\025"
  "\n\tkiller_id\030\006 \001(\005:\002-1\"\213\006\n\036CDOTAUserMsg_S"
  "tatsMatchDetails\0222\n\013hero_lookup\030\001 \003(\0132\035."
  "CDOTAUserMsg_StatsHeroLookup\022;\n\rradiant_"
  "stats\030\002 \003(\0132$.CDOTAUserMsg_StatsTeamMinu"
  "teDetails\0228\n\ndire_stats\030\003 \003(\0132$.CDOTAUse"
  "rMsg_StatsTeamMinuteDetails\0225\n\rradiant_k"
  "ills\030\004 \003(\0132\036.CDOTAUserMsg_StatsKillDetai"
  "ls\0222\n\ndire_kills\030\005 \003(\0132\036.CDOTAUserMsg_St"
  "atsKillDetails\022U\n\rfight_details\030\006 \003(\0132>."
  "CDOTAUserMsg_StatsMatchDetails.CDOTAUser"
  "Msg_StatsFightDetails\032p\n\"CDOTAUserMsg_St"
  "atsFightTeamDetails\022\024\n\014participants\030\001 \003("
  "\005\022\016\n\006deaths\030\002 \003(\005\022\022\n\ngold_delta\030\003 \001(\r\022\020\n"
  "\010xp_delta\030\004 \001(\r\032\211\002\n\036CDOTAUserMsg_StatsFi"
  "ghtDetails\022\022\n\nstart_time\030\001 \001(\002\022\020\n\010end_ti"
  "me\030\002 \001(\002\022a\n\025radiant_fight_details\030\003 \001(\0132"
  "B.CDOTAUserMsg_StatsMatchDetails.CDOTAUs"
  "erMsg_StatsFightTeamDetails\022^\n\022dire_figh"
  "t_details\030\004 \001(\0132B.CDOTAUserMsg_StatsMatc"
  "hDetails.CDOTAUserMsg_StatsFightTeamDeta"
  "ils\"8\n\026CDOTAUserMsg_MiniTaunt\022\036\n\022tauntin"
  "g_player_id\030\001 \001(\005:\002-1\"0\n\031CDOTAUserMsg_Sp"
  "eechBubble\022\023\n\013destroy_all\030\001 \001(\010\"k\n CDOTA"
  "UserMsg_CustomHeaderMessage\022\025\n\tplayer_id"
  "\030\001 \001(\005:\002-1\022\020\n\010duration\030\002 \001(\002\022\017\n\007message\030"
  "\003 \001(\t\022\r\n\005value\030\004 \001(\005\"v\n\023CMsgHeroAbilityS"
  "tat\0227\n\tstat_type\030\001 \001(\0162\016.EHeroStatType:\024"
  "k_EHeroStatType_None\022\021\n\tint_value\030\002 \001(\005\022"
  "\023\n\013float_value\030\003 \001(\002\"d\n\034CMsgCombatAnalyz"
  "erPlayerStat\022\022\n\naccount_id\030\001 \001(\r\0220\n\022hero"
  "_ability_stats\030\002 \003(\0132\024.CMsgHeroAbilitySt"
  "at\"`\n\027CMsgCombatAnalyzerStats\022\020\n\010match_i"
  "d\030\001 \001(\004\0223\n\014player_stats\030\002 \003(\0132\035.CMsgComb"
  "atAnalyzerPlayerStat\"W\n\026CDOTAUserMsg_Bea"
  "stChat\022\014\n\004team\030\001 \001(\r\022\016\n\006format\030\002 \001(\t\022\017\n\007"
  "message\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\"a\n$CDOTAUs"
  "erMsg_CustomHudElement_Create\022\022\n\nelement"
  "_id\030\001 \001(\t\022\027\n\017layout_filename\030\002 \001(\t\022\014\n\004da"
  "ta\030\003 \001(\014\"`\n$CDOTAUserMsg_CustomHudElemen"
  "t_Modify\022\022\n\nelement_id\030\001 \001(\t\022\026\n\016modify_v"
  "isible\030\002 \001(\010\022\014\n\004data\030\003 \001(\014\";\n%CDOTAUserM"
  "sg_CustomHudElement_Destroy\022\022\n\nelement_i"
  "d\030\001 \001(\t\"J\n\"CDOTAUserMsg_CompendiumStateP"
  "layer\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\r\n\005level\030\002 "
  "\001(\r\"_\n\034CDOTAUserMsg_CompendiumState\022\?\n\022c"
  "ompendium_players\030\001 \003(\0132#.CDOTAUserMsg_C"
  "ompendiumStatePlayer\"\350\001\n\036CDOTAUserMsg_Pr"
  "ojectionAbility\022\026\n\nability_id\030\001 \001(\005:\002-1\022"
  "\034\n\020caster_ent_index\030\002 \001(\005:\002-1\022\023\n\013caster_"
  "team\030\003 \001(\005\022\023\n\013channel_end\030\004 \001(\010\022\033\n\006origi"
  "n\030\005 \001(\0132\013.CMsgVector\022\031\n\021track_caster_onl"
  "y\030\006 \001(\010\022\020\n\010end_time\030\007 \001(\002\022\034\n\020victim_ent_"
  "index\030\010 \001(\005:\002-1\"a\n\034CDOTAUserMsg_Projecti"
  "onEvent\0223\n\010event_id\030\001 \001(\0162\021.EProjectionE"
  "vent:\016ePE_FirstBlood\022\014\n\004team\030\002 \001(\r\"J\n\024CD"
  "OTAUserMsg_XPAlert\022\025\n\tplayer_id\030\001 \001(\005:\002-"
  "1\022\033\n\017target_entindex\030\002 \001(\005:\002-1\"\211\001\n\034CDOTA"
  "UserMsg_TalentTreeAlert\022\025\n\tplayer_id\030\001 \001"
  "(\005:\002-1\022\033\n\017target_entindex\030\002 \001(\005:\002-1\022\026\n\na"
  "bility_id\030\003 \001(\005:\002-1\022\014\n\004slot\030\004 \001(\005\022\017\n\007lea"
  "rned\030\005 \001(\010\"\"\n CDOTAUserMsg_UpdateQuestPr"
  "ogress\"\274\001\n\030CDOTAUserMsg_QuestStatus\022\025\n\tp"
  "layer_id\030\001 \002(\005:\002-1\022\020\n\010quest_id\030\002 \001(\r\022\024\n\014"
  "challenge_id\030\003 \001(\r\022\020\n\010progress\030\004 \001(\r\022\014\n\004"
  "goal\030\005 \001(\r\022\r\n\005query\030\006 \001(\r\022\025\n\rfail_gameti"
  "me\030\007 \001(\002\022\033\n\017item_ability_id\030\010 \001(\005:\002-1\"S\n"
  "\034CDOTAUserMsg_SuggestHeroPick\022\025\n\tplayer_"
  "id\030\001 \002(\005:\002-1\022\017\n\007hero_id\030\002 \001(\r\022\013\n\003ban\030\003 \001"
  "(\010\"H\n\034CDOTAUserMsg_SuggestHeroRole\022\025\n\tpl"
  "ayer_id\030\001 \002(\005:\002-1\022\021\n\thero_role\030\002 \001(\t\"\247\001\n"
  "\037CDOTAUserMsg_KillcamDamageTaken\022\025\n\tplay"
  "er_id\030\001 \002(\005:\002-1\022\024\n\014damage_taken\030\002 \001(\r\022\021\n"
  "\titem_type\030\003 \001(\r\022\033\n\017item_ability_id\030\004 \001("
  "\005:\002-1\022\021\n\thero_name\030\005 \001(\t\022\024\n\014damage_color"
  "\030\006 \001(\t\"E\n\036CDOTAUserMsg_SelectPenaltyGold"
  "\022\025\n\tplayer_id\030\001 \002(\005:\002-1\022\014\n\004cost\030\002 \001(\021\"~\n"
  "\033CDOTAUserMsg_RollDiceResult\022\025\n\tplayer_i"
  "d\030\001 \001(\005:\002-1\022\024\n\014channel_type\030\002 \001(\r\022\020\n\010rol"
  "l_min\030\003 \001(\r\022\020\n\010roll_max\030\004 \001(\r\022\016\n\006result\030"
  "\005 \001(\r\"Z\n\033CDOTAUserMsg_FlipCoinResult\022\025\n\t"
  "player_id\030\001 \001(\005:\002-1\022\024\n\014channel_type\030\002 \001("
  "\r\022\016\n\006result\030\003 \001(\010\"@\n\'CDOTAUserMessage_Re"
  "questItemSuggestions\022\025\n\tplayer_id\030\001 \001(\005:"
  "\002-1\"R\n#CDOTAUserMessage_TeamCaptainChang"
  "ed\022\014\n\004team\030\001 \001(\r\022\035\n\021captain_player_id\030\002 "
  "\001(\005:\002-1\"\\\n\036CDOTAUserMsg_ChatWheelCooldow"
  "n\022\036\n\nmessage_id\030\001 \001(\r:\n4294967295\022\032\n\022coo"
  "ldown_remaining\030\002 \001(\002\"\214\001\n\036CDOTAUserMsg_H"
  "eroRelicProgress\022\027\n\017hero_relic_type\030\001 \001("
  "\r\022\r\n\005value\030\002 \001(\r\022\031\n\007ehandle\030\003 \001(\r:\01016777"
  "215\022\020\n\010event_id\030\004 \001(\r\022\025\n\rvalue_display\030\005"
  " \001(\002\"x\n\'CDOTAUserMsg_AbilityDraftRequest"
  "Ability\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022 \n\024reques"
  "ted_ability_id\030\002 \001(\005:\002-1\022\024\n\014ctrl_is_down"
  "\030\003 \001(\010\"\214\001\n\031CDOTAUserMsg_DamageReport\022\025\n\t"
  "player_id\030\001 \001(\005:\002-1\022\026\n\016target_hero_id\030\002 "
  "\001(\r\022\026\n\016source_hero_id\030\003 \001(\r\022\025\n\rdamage_am"
  "ount\030\004 \001(\005\022\021\n\tbroadcast\030\005 \001(\010\"\260\001\n\031CDOTAU"
  "serMsg_SalutePlayer\022\034\n\020source_player_id\030"
  "\001 \001(\005:\002-1\022\034\n\020target_player_id\030\002 \001(\005:\002-1\022"
  "\022\n\ntip_amount\030\003 \001(\r\022\020\n\010event_id\030\004 \001(\r\022\030\n"
  "\020custom_tip_style\030\005 \001(\t\022\027\n\017num_recent_ti"
  "ps\030\006 \001(\r\"@\n\025CDOTAUserMsg_TipAlert\022\025\n\tpla"
  "yer_id\030\001 \001(\005:\002-1\022\020\n\010tip_text\030\002 \001(\t\"p\n\035CD"
  "OTAUserMsg_ReplaceQueryUnit\022\025\n\tplayer_id"
  "\030\001 \002(\005:\002-1\022\033\n\017source_entindex\030\002 \001(\005:\002-1\022"
  "\033\n\017target_entindex\030\003 \001(\005:\002-1\"b\n\032CDOTAUse"
  "rMsg_ESArcanaCombo\022\031\n\007ehandle\030\001 \001(\r:\010167"
  "77215\022\023\n\013combo_count\030\002 \001(\r\022\024\n\014arcana_lev"
  "el\030\003 \001(\r\"j\n!CDOTAUserMsg_ESArcanaComboSu"
  "mmary\022\031\n\007ehandle\030\001 \001(\r:\01016777215\022\023\n\013comb"
  "o_count\030\002 \001(\r\022\025\n\rdamage_amount\030\003 \001(\r\"\201\001\n"
  "\032CDOTAUserMsg_OMArcanaCombo\022\031\n\007ehandle\030\001"
  " \001(\r:\01016777215\022\030\n\020multicast_amount\030\002 \001(\r"
  "\022\024\n\014arcana_level\030\003 \001(\r\022\030\n\020multicast_chan"
  "ce\030\004 \001(\r\"\213\001\n\036CDOTAUserMsg_HighFiveComple"
  "ted\022\027\n\013player_id_1\030\001 \001(\005:\002-1\022\027\n\013player_i"
  "d_2\030\002 \001(\005:\002-1\022\031\n\021special_high_five\030\003 \001(\010"
  "\022\034\n\020special_entindex\030\004 \001(\005:\002-1\"9\n CDOTAU"
  "serMsg_HighFiveLeftHanging\022\025\n\tplayer_id\030"
  "\001 \001(\005:\002-1\"j\n\032CDOTAUserMsg_ShovelUnearth\022"
  "\025\n\tplayer_id\030\001 \001(\005:\002-1\022\020\n\010all_chat\030\002 \001(\010"
  "\022\021\n\tlocstring\030\003 \001(\t\022\020\n\010quantity\030\004 \001(\r\"\374\001"
  "\n\031CDOTAUserMsg_AllStarEvent\022\034\n\020source_pl"
  "ayer_id\030\001 \001(\005:\002-1\022\034\n\020target_player_id\030\002 "
  "\001(\005:\002-1\022\024\n\014point_amount\030\003 \001(\r\022\020\n\010event_i"
  "d\030\004 \001(\r\022=\n\rplayer_scores\030\005 \003(\0132&.CDOTAUs"
  "erMsg_AllStarEvent.PlayerScore\032<\n\013Player"
  "Score\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\026\n\016score_sa"
  "ns_kda\030\002 \001(\r\">\n\037CDOTAUserMsg_QueuedOrder"
  "Removed\022\033\n\023unit_order_sequence\030\001 \003(\r\"\306\001\n"
  "\033CDOTAUserMsg_DebugChallenge\022\026\n\016challeng"
  "e_type\030\001 \002(\r\022\032\n\022challenge_query_id\030\002 \002(\r"
  "\022\020\n\010event_id\030\003 \002(\r\022\023\n\013instance_id\030\004 \001(\r\022"
  "\027\n\017challenge_var_0\030\005 \001(\r\022\027\n\017challenge_va"
  "r_1\030\006 \001(\r\022\032\n\022challenge_max_rank\030\007 \001(\r\"\177\n"
  "\035CDOTAUserMsg_FoundNeutralItem\022\025\n\tplayer"
  "_id\030\001 \001(\005:\002-1\022\033\n\017item_ability_id\030\002 \001(\005:\002"
  "-1\022\021\n\titem_tier\030\003 \001(\r\022\027\n\017tier_item_count"
  "\030\004 \001(\r\"M\n\034CDOTAUserMsg_OutpostCaptured\022\034"
  "\n\020outpost_entindex\030\001 \001(\005:\002-1\022\017\n\007team_id\030"
  "\002 \001(\r\"C\n\035CDOTAUserMsg_OutpostGrantedXP\022\017"
  "\n\007team_id\030\001 \001(\r\022\021\n\txp_amount\030\002 \001(\r\"\?\n\035CD"
  "OTAUserMsg_MoveCameraToUnit\022\036\n\014unit_ehan"
  "dle\030\001 \001(\r:\01016777215\"\230\001\n\036CDOTAUserMsg_Pau"
  "seMinigameData\022:\n\tdata_bits\030\001 \003(\0132\'.CDOT"
  "AUserMsg_PauseMinigameData.DataBit\032:\n\007Da"
  "taBit\022\r\n\005index\030\001 \001(\r\022\014\n\004data\030\002 \001(\005\022\022\n\nda"
  "ta_extra\030\003 \001(\003\"\245\002\n\'CDOTAUserMsg_VersusSc"
  "ene_PlayerBehavior\022\025\n\tplayer_id\030\001 \001(\005:\002-"
  "1\022S\n\010behavior\030\002 \001(\0162\037.EDOTAVersusScenePl"
  "ayerBehavior: VS_PLAYER_BEHAVIOR_PLAY_AC"
  "TIVITY\0220\n\rplay_activity\030\003 \001(\0132\031.VersusSc"
  "ene_PlayActivity\022*\n\nchat_wheel\030\004 \001(\0132\026.V"
  "ersusScene_ChatWheel\0220\n\rplayback_rate\030\005 "
  "\001(\0132\031.VersusScene_PlaybackRate\"~\n\036CDOTAU"
  "serMsg_QoP_ArcanaSummary\022\031\n\007ehandle\030\001 \001("
  "\r:\01016777215\022\024\n\014arcana_level\030\002 \001(\r\022\023\n\013pla"
  "yers_hit\030\003 \001(\r\022\026\n\016players_killed\030\004 \001(\r\"R"
  "\n\036CDOTAUserMsg_HotPotato_Created\022\027\n\013play"
  "er_id_1\030\001 \001(\005:\002-1\022\027\n\013player_id_2\030\002 \001(\005:\002"
  "-1\"8\n\037CDOTAUserMsg_HotPotato_Exploded\022\025\n"
  "\tplayer_id\030\001 \001(\005:\002-1\"c\n\037CDOTAUserMsg_WK_"
  "Arcana_Progress\022\031\n\007ehandle\030\001 \001(\r:\010167772"
  "15\022\024\n\014arcana_level\030\002 \001(\r\022\017\n\007hero_id\030\003 \001("
  "\r\"\216\004\n$CDOTAUserMsg_GuildChallenge_Progre"
  "ss\022M\n\017player_progress\030\001 \003(\01324.CDOTAUserM"
  "sg_GuildChallenge_Progress.PlayerProgres"
  "s\022\020\n\010guild_id\030\002 \001(\r\022\035\n\025challenge_instanc"
  "e_id\030\003 \001(\r\022\033\n\023challenge_parameter\030\004 \001(\r\022"
  "f\n\016challenge_type\030\005 \001(\01624.CDOTAUserMsg_G"
  "uildChallenge_Progress.EChallengeType:\030k"
  "_EChallengeType_Invalid\022#\n\033challenge_pro"
  "gress_at_start\030\007 \001(\r\022\020\n\010complete\030\010 \001(\010\0329"
  "\n\016PlayerProgress\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022"
  "\020\n\010progress\030\006 \001(\r\"o\n\016EChallengeType\022\034\n\030k"
  "_EChallengeType_Invalid\020\000\022 \n\034k_EChalleng"
  "eType_Cooperative\020\001\022\035\n\031k_EChallengeType_"
  "Contract\020\002\"\311\001\n\035CDOTAUserMsg_WRArcanaProg"
  "ress\022\031\n\007ehandle\030\001 \001(\r:\01016777215\022 \n\016targe"
  "t_ehandle\030\002 \001(\r:\01016777215\022\025\n\rarrows_land"
  "ed\030\003 \001(\r\022\024\n\014damage_dealt\030\004 \001(\r\022\021\n\ttarget"
  "_hp\030\005 \001(\r\022\025\n\rtarget_max_hp\030\006 \001(\r\022\024\n\014arca"
  "na_level\030\007 \001(\r\"\331\001\n\034CDOTAUserMsg_WRArcana"
  "Summary\022\031\n\007ehandle\030\001 \001(\r:\01016777215\022 \n\016ta"
  "rget_ehandle\030\002 \001(\r:\01016777215\022\025\n\rarrows_l"
  "anded\030\003 \001(\r\022\024\n\014damage_dealt\030\004 \001(\r\022\021\n\ttar"
  "get_hp\030\005 \001(\r\022\025\n\rtarget_max_hp\030\006 \001(\r\022\024\n\014a"
  "rcana_level\030\007 \001(\r\022\017\n\007success\030\010 \001(\010\"\213\001\n\037C"
  "DOTAUserMsg_EmptyItemSlotAlert\022\034\n\020source"
  "_player_id\030\001 \001(\005:\002-1\022\034\n\020target_player_id"
  "\030\002 \001(\005:\002-1\022\022\n\nslot_index\030\003 \001(\005\022\030\n\020cooldo"
  "wn_seconds\030\004 \001(\005\"\263\001\n\034CDOTAUserMsg_AghsSt"
  "atusAlert\022\034\n\020source_player_id\030\001 \001(\005:\002-1\022"
  "\034\n\020target_player_id\030\002 \001(\005:\002-1\022\033\n\017target_"
  "entindex\030\003 \001(\005:\002-1\022\022\n\nalert_type\030\004 \001(\r\022\023"
  "\n\013has_scepter\030\005 \001(\010\022\021\n\thas_shard\030\006 \001(\010\"Z"
  "\n\031CDOTAUserMsg_MutedPlayers\022\035\n\025text_mute"
  "d_player_ids\030\001 \003(\005\022\036\n\026voice_muted_player"
  "_ids\030\002 \003(\005\"\376\002\n\032CDOTAUserMsg_ContextualTi"
  "p\022\016\n\006tip_id\030\001 \001(\005\022\034\n\024referenced_abilitie"
  "s\030\002 \003(\t\022\030\n\020referenced_units\030\003 \003(\t\022\030\n\020pan"
  "orama_classes\030\004 \003(\t\022\030\n\020force_annotation\030"
  "\005 \001(\010\022\017\n\007variant\030\006 \001(\005\022\021\n\tint_param\030\007 \001("
  "\005\022\022\n\nint_param2\030\010 \001(\005\022\023\n\013float_param\030\t \001"
  "(\002\022\024\n\014float_param2\030\n \001(\002\022\024\n\014string_param"
  "\030\013 \001(\t\022\025\n\rstring_param2\030\014 \001(\t\022\031\n\021tip_tex"
  "t_override\030\r \001(\t\022\037\n\027tip_annotation_overr"
  "ide\030\016 \001(\t\022\030\n\020panorama_snippet\030\017 \001(\t\"d\n\030C"
  "DOTAUserMsg_ChatMessage\022\034\n\020source_player"
  "_id\030\001 \001(\005:\002-1\022\024\n\014channel_type\030\002 \001(\r\022\024\n\014m"
  "essage_text\030\003 \001(\t\"c\n%CDOTAUserMsg_RockPa"
  "perScissorsStarted\022\034\n\020player_id_source\030\001"
  " \001(\005:\002-1\022\034\n\020player_id_target\030\002 \001(\005:\002-1\"\214"
  "\001\n&CDOTAUserMsg_RockPaperScissorsFinishe"
  "d\022\027\n\013player_id_1\030\001 \001(\005:\002-1\022\027\n\013player_id_"
  "2\030\002 \001(\005:\002-1\022\027\n\017player_1_choice\030\003 \001(\005\022\027\n\017"
  "player_2_choice\030\004 \001(\005\"T\n\037CDOTAUserMsg_Du"
  "elOpponentKilled\022\030\n\020player_id_winner\030\001 \001"
  "(\005\022\027\n\017player_id_loser\030\002 \001(\005\"E\n\031CDOTAUser"
  "Msg_DuelAccepted\022\023\n\013player_id_1\030\001 \001(\005\022\023\n"
  "\013player_id_2\030\002 \001(\005\"=\n\032CDOTAUserMsg_DuelR"
  "equested\022\037\n\023player_id_requestor\030\001 \001(\005:\002-"
  "1\"\252\001\n4CDOTAUserMsg_MuertaReleaseEvent_As"
  "signedTargetKilled\022\034\n\020player_id_killer\030\001"
  " \002(\005:\002-1\022\034\n\020player_id_target\030\002 \002(\005:\002-1\022\016"
  "\n\006points\030\003 \002(\005\022\024\n\014points_total\030\004 \002(\005\022\020\n\010"
  "last_hit\030\005 \002(\010\"^\n#CDOTAUserMsg_PlayerDra"
  "ftSuggestPick\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022 \n\024"
  "suggestion_player_id\030\002 \001(\005:\002-1\"i\n\034CDOTAU"
  "serMsg_PlayerDraftPick\022\035\n\021player_id_capt"
  "ain\030\001 \001(\005:\002-1\022\034\n\020player_id_target\030\002 \001(\005:"
  "\002-1\022\014\n\004team\030\003 \001(\005*\244%\n\021EDotaUserMessages\022"
  "\037\n\032DOTA_UM_AddUnitToSelection\020\320\003\022\030\n\023DOTA"
  "_UM_AIDebugLine\020\321\003\022\026\n\021DOTA_UM_ChatEvent\020"
  "\322\003\022 \n\033DOTA_UM_CombatHeroPositions\020\323\003\022\032\n\025"
  "DOTA_UM_CombatLogData\020\324\003\022\036\n\031DOTA_UM_Comb"
  "atLogBulkData\020\326\003\022#\n\036DOTA_UM_CreateLinear"
  "Projectile\020\327\003\022$\n\037DOTA_UM_DestroyLinearPr"
  "ojectile\020\330\003\022%\n DOTA_UM_DodgeTrackingProj"
  "ectiles\020\331\003\022\035\n\030DOTA_UM_GlobalLightColor\020\332"
  "\003\022!\n\034DOTA_UM_GlobalLightDirection\020\333\003\022\033\n\026"
  "DOTA_UM_InvalidCommand\020\334\003\022\031\n\024DOTA_UM_Loc"
  "ationPing\020\335\003\022\024\n\017DOTA_UM_MapLine\020\336\003\022\034\n\027DO"
  "TA_UM_MiniKillCamInfo\020\337\003\022\036\n\031DOTA_UM_Mini"
  "mapDebugPoint\020\340\003\022\031\n\024DOTA_UM_MinimapEvent"
  "\020\341\003\022\035\n\030DOTA_UM_NevermoreRequiem\020\342\003\022\032\n\025DO"
  "TA_UM_OverheadEvent\020\343\003\022\037\n\032DOTA_UM_SetNex"
  "tAutobuyItem\020\344\003\022\033\n\026DOTA_UM_SharedCooldow"
  "n\020\345\003\022!\n\034DOTA_UM_SpectatorPlayerClick\020\346\003\022"
  "\034\n\027DOTA_UM_TutorialTipInfo\020\347\003\022\026\n\021DOTA_UM"
  "_UnitEvent\020\350\003\022\034\n\027DOTA_UM_ParticleManager"
  "\020\351\003\022\024\n\017DOTA_UM_BotChat\020\352\003\022\025\n\020DOTA_UM_Hud"
  "Error\020\353\003\022\032\n\025DOTA_UM_ItemPurchased\020\354\003\022\021\n\014"
  "DOTA_UM_Ping\020\355\003\022\026\n\021DOTA_UM_ItemFound\020\356\003\022"
  "\"\n\035DOTA_UM_CharacterSpeakConcept\020\357\003\022\027\n\022D"
  "OTA_UM_SwapVerify\020\360\003\022\026\n\021DOTA_UM_WorldLin"
  "e\020\361\003\022\033\n\026DOTA_UM_TournamentDrop\020\362\003\022\026\n\021DOT"
  "A_UM_ItemAlert\020\363\003\022\033\n\026DOTA_UM_HalloweenDr"
  "ops\020\364\003\022\026\n\021DOTA_UM_ChatWheel\020\365\003\022\035\n\030DOTA_U"
  "M_ReceivedXmasGift\020\366\003\022 \n\033DOTA_UM_UpdateS"
  "haredContent\020\367\003\022\037\n\032DOTA_UM_TutorialReque"
  "stExp\020\370\003\022 \n\033DOTA_UM_TutorialPingMinimap\020"
  "\371\003\022\"\n\035DOTA_UM_GamerulesStateChanged\020\372\003\022\027"
  "\n\022DOTA_UM_ShowSurvey\020\373\003\022\031\n\024DOTA_UM_Tutor"
  "ialFade\020\374\003\022\035\n\030DOTA_UM_AddQuestLogEntry\020\375"
  "\003\022\032\n\025DOTA_UM_SendStatPopup\020\376\003\022\033\n\026DOTA_UM"
  "_TutorialFinish\020\377\003\022\034\n\027DOTA_UM_SendRoshan"
  "Popup\020\200\004\022\037\n\032DOTA_UM_SendGenericToolTip\020\201"
  "\004\022\032\n\025DOTA_UM_SendFinalGold\020\202\004\022\026\n\021DOTA_UM"
  "_CustomMsg\020\203\004\022\031\n\024DOTA_UM_CoachHUDPing\020\204\004"
  "\022\036\n\031DOTA_UM_ClientLoadGridNav\020\205\004\022\032\n\025DOTA"
  "_UM_TE_Projectile\020\206\004\022\035\n\030DOTA_UM_TE_Proje"
  "ctileLoc\020\207\004\022\037\n\032DOTA_UM_TE_DotaBloodImpac"
  "t\020\210\004\022\035\n\030DOTA_UM_TE_UnitAnimation\020\211\004\022 \n\033D"
  "OTA_UM_TE_UnitAnimationEnd\020\212\004\022\030\n\023DOTA_UM"
  "_AbilityPing\020\213\004\022\035\n\030DOTA_UM_ShowGenericPo"
  "pup\020\214\004\022\026\n\021DOTA_UM_VoteStart\020\215\004\022\027\n\022DOTA_U"
  "M_VoteUpdate\020\216\004\022\024\n\017DOTA_UM_VoteEnd\020\217\004\022\031\n"
  "\024DOTA_UM_BoosterState\020\220\004\022\036\n\031DOTA_UM_Will"
  "PurchaseAlert\020\221\004\022$\n\037DOTA_UM_TutorialMini"
  "mapPosition\020\222\004\022\026\n\021DOTA_UM_PlayerMMR\020\223\004\022\031"
  "\n\024DOTA_UM_AbilitySteal\020\224\004\022\037\n\032DOTA_UM_Cou"
  "rierKilledAlert\020\225\004\022\033\n\026DOTA_UM_EnemyItemA"
  "lert\020\226\004\022\036\n\031DOTA_UM_StatsMatchDetails\020\227\004\022"
  "\026\n\021DOTA_UM_MiniTaunt\020\230\004\022\036\n\031DOTA_UM_BuyBa"
  "ckStateAlert\020\231\004\022\031\n\024DOTA_UM_SpeechBubble\020"
  "\232\004\022 \n\033DOTA_UM_CustomHeaderMessage\020\233\004\022\032\n\025"
  "DOTA_UM_QuickBuyAlert\020\234\004\022\035\n\030DOTA_UM_Stat"
  "sHeroDetails\020\235\004\022\035\n\030DOTA_UM_PredictionRes"
  "ult\020\236\004\022\032\n\025DOTA_UM_ModifierAlert\020\237\004\022\030\n\023DO"
  "TA_UM_HPManaAlert\020\240\004\022\027\n\022DOTA_UM_GlyphAle"
  "rt\020\241\004\022\026\n\021DOTA_UM_BeastChat\020\242\004\022&\n!DOTA_UM"
  "_SpectatorPlayerUnitOrders\020\243\004\022$\n\037DOTA_UM"
  "_CustomHudElement_Create\020\244\004\022$\n\037DOTA_UM_C"
  "ustomHudElement_Modify\020\245\004\022%\n DOTA_UM_Cus"
  "tomHudElement_Destroy\020\246\004\022\034\n\027DOTA_UM_Comp"
  "endiumState\020\247\004\022\036\n\031DOTA_UM_ProjectionAbil"
  "ity\020\250\004\022\034\n\027DOTA_UM_ProjectionEvent\020\251\004\022\036\n\031"
  "DOTA_UM_CombatLogDataHLTV\020\252\004\022\024\n\017DOTA_UM_"
  "XPAlert\020\253\004\022 \n\033DOTA_UM_UpdateQuestProgres"
  "s\020\254\004\022\032\n\025DOTA_UM_MatchMetadata\020\255\004\022\031\n\024DOTA"
  "_UM_MatchDetails\020\256\004\022\030\n\023DOTA_UM_QuestStat"
  "us\020\257\004\022\034\n\027DOTA_UM_SuggestHeroPick\020\260\004\022\034\n\027D"
  "OTA_UM_SuggestHeroRole\020\261\004\022\037\n\032DOTA_UM_Kil"
  "lcamDamageTaken\020\262\004\022\036\n\031DOTA_UM_SelectPena"
  "ltyGold\020\263\004\022\033\n\026DOTA_UM_RollDiceResult\020\264\004\022"
  "\033\n\026DOTA_UM_FlipCoinResult\020\265\004\022#\n\036DOTA_UM_"
  "RequestItemSuggestions\020\266\004\022\037\n\032DOTA_UM_Tea"
  "mCaptainChanged\020\267\004\022%\n DOTA_UM_SendRoshan"
  "SpectatorPhase\020\270\004\022\036\n\031DOTA_UM_ChatWheelCo"
  "oldown\020\271\004\022!\n\034DOTA_UM_DismissAllStatPopup"
  "s\020\272\004\022!\n\034DOTA_UM_TE_DestroyProjectile\020\273\004\022"
  "\036\n\031DOTA_UM_HeroRelicProgress\020\274\004\022\'\n\"DOTA_"
  "UM_AbilityDraftRequestAbility\020\275\004\022\025\n\020DOTA"
  "_UM_ItemSold\020\276\004\022\031\n\024DOTA_UM_DamageReport\020"
  "\277\004\022\031\n\024DOTA_UM_SalutePlayer\020\300\004\022\025\n\020DOTA_UM"
  "_TipAlert\020\301\004\022\035\n\030DOTA_UM_ReplaceQueryUnit"
  "\020\302\004\022\037\n\032DOTA_UM_EmptyTeleportAlert\020\303\004\022#\n\036"
  "DOTA_UM_MarsArenaOfBloodAttack\020\304\004\022\032\n\025DOT"
  "A_UM_ESArcanaCombo\020\305\004\022!\n\034DOTA_UM_ESArcan"
  "aComboSummary\020\306\004\022 \n\033DOTA_UM_HighFiveLeft"
  "Hanging\020\307\004\022\036\n\031DOTA_UM_HighFiveCompleted\020"
  "\310\004\022\032\n\025DOTA_UM_ShovelUnearth\020\311\004\022\035\n\030DOTA_E"
  "M_InvokerSpellCast\020\312\004\022\027\n\022DOTA_UM_RadarAl"
  "ert\020\313\004\022\031\n\024DOTA_UM_AllStarEvent\020\314\004\022\034\n\027DOT"
  "A_UM_TalentTreeAlert\020\315\004\022\037\n\032DOTA_UM_Queue"
  "dOrderRemoved\020\316\004\022\033\n\026DOTA_UM_DebugChallen"
  "ge\020\317\004\022\032\n\025DOTA_UM_OMArcanaCombo\020\320\004\022\035\n\030DOT"
  "A_UM_FoundNeutralItem\020\321\004\022\034\n\027DOTA_UM_Outp"
  "ostCaptured\020\322\004\022\035\n\030DOTA_UM_OutpostGranted"
  "XP\020\323\004\022\035\n\030DOTA_UM_MoveCameraToUnit\020\324\004\022\036\n\031"
  "DOTA_UM_PauseMinigameData\020\325\004\022\'\n\"DOTA_UM_"
  "VersusScene_PlayerBehavior\020\326\004\022\036\n\031DOTA_UM"
  "_QoP_ArcanaSummary\020\330\004\022\036\n\031DOTA_UM_HotPota"
  "to_Created\020\331\004\022\037\n\032DOTA_UM_HotPotato_Explo"
  "ded\020\332\004\022\037\n\032DOTA_UM_WK_Arcana_Progress\020\333\004\022"
  "$\n\037DOTA_UM_GuildChallenge_Progress\020\334\004\022\035\n"
  "\030DOTA_UM_WRArcanaProgress\020\335\004\022\034\n\027DOTA_UM_"
  "WRArcanaSummary\020\336\004\022\037\n\032DOTA_UM_EmptyItemS"
  "lotAlert\020\337\004\022\034\n\027DOTA_UM_AghsStatusAlert\020\340"
  "\004\022\035\n\030DOTA_UM_PingConfirmation\020\341\004\022\031\n\024DOTA"
  "_UM_MutedPlayers\020\342\004\022\032\n\025DOTA_UM_Contextua"
  "lTip\020\343\004\022\030\n\023DOTA_UM_ChatMessage\020\344\004\022\035\n\030DOT"
  "A_UM_NeutralCampAlert\020\345\004\022%\n DOTA_UM_Rock"
  "PaperScissorsStarted\020\346\004\022&\n!DOTA_UM_RockP"
  "aperScissorsFinished\020\347\004\022\037\n\032DOTA_UM_DuelO"
  "pponentKilled\020\350\004\022\031\n\024DOTA_UM_DuelAccepted"
  "\020\351\004\022\032\n\025DOTA_UM_DuelRequested\020\352\004\0224\n/DOTA_"
  "UM_MuertaReleaseEvent_AssignedTargetKill"
  "ed\020\353\004\022#\n\036DOTA_UM_PlayerDraftSuggestPick\020"
  "\354\004\022\034\n\027DOTA_UM_PlayerDraftPick\020\355\004*\203\037\n\021DOT"
  "A_CHAT_MESSAGE\022!\n\024CHAT_MESSAGE_INVALID\020\377"
  "\377\377\377\377\377\377\377\377\001\022\032\n\026CHAT_MESSAGE_HERO_KILL\020\000\022\032\n"
  "\026CHAT_MESSAGE_HERO_DENY\020\001\022\036\n\032CHAT_MESSAG"
  "E_BARRACKS_KILL\020\002\022\033\n\027CHAT_MESSAGE_TOWER_"
  "KILL\020\003\022\033\n\027CHAT_MESSAGE_TOWER_DENY\020\004\022\033\n\027C"
  "HAT_MESSAGE_FIRSTBLOOD\020\005\022\034\n\030CHAT_MESSAGE"
  "_STREAK_KILL\020\006\022\030\n\024CHAT_MESSAGE_BUYBACK\020\007"
  "\022\026\n\022CHAT_MESSAGE_AEGIS\020\010\022\034\n\030CHAT_MESSAGE"
  "_ROSHAN_KILL\020\t\022\035\n\031CHAT_MESSAGE_COURIER_L"
  "OST\020\n\022\"\n\036CHAT_MESSAGE_COURIER_RESPAWNED\020"
  "\013\022\033\n\027CHAT_MESSAGE_GLYPH_USED\020\014\022\036\n\032CHAT_M"
  "ESSAGE_ITEM_PURCHASE\020\r\022\030\n\024CHAT_MESSAGE_C"
  "ONNECT\020\016\022\033\n\027CHAT_MESSAGE_DISCONNECT\020\017\022.\n"
  "*CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONN"
  "ECT\020\020\022*\n&CHAT_MESSAGE_DISCONNECT_TIME_RE"
  "MAINING\020\021\0221\n-CHAT_MESSAGE_DISCONNECT_TIM"
  "E_REMAINING_PLURAL\020\022\022\032\n\026CHAT_MESSAGE_REC"
  "ONNECT\020\023\022\034\n\030CHAT_MESSAGE_PLAYER_LEFT\020\024\022\036"
  "\n\032CHAT_MESSAGE_SAFE_TO_LEAVE\020\025\022\034\n\030CHAT_M"
  "ESSAGE_RUNE_PICKUP\020\026\022\034\n\030CHAT_MESSAGE_RUN"
  "E_BOTTLE\020\027\022\032\n\026CHAT_MESSAGE_RUNE_DENY\020r\022\031"
  "\n\025CHAT_MESSAGE_INTHEBAG\020\030\022\033\n\027CHAT_MESSAG"
  "E_SECRETSHOP\020\031\022#\n\037CHAT_MESSAGE_ITEM_AUTO"
  "PURCHASED\020\032\022\037\n\033CHAT_MESSAGE_ITEMS_COMBIN"
  "ED\020\033\022\035\n\031CHAT_MESSAGE_SUPER_CREEPS\020\034\022%\n!C"
  "HAT_MESSAGE_CANT_USE_ACTION_ITEM\020\035\022\032\n\026CH"
  "AT_MESSAGE_CANTPAUSE\020\037\022\035\n\031CHAT_MESSAGE_N"
  "OPAUSESLEFT\020 \022\035\n\031CHAT_MESSAGE_CANTPAUSEY"
  "ET\020!\022\027\n\023CHAT_MESSAGE_PAUSED\020\"\022\"\n\036CHAT_ME"
  "SSAGE_UNPAUSE_COUNTDOWN\020#\022\031\n\025CHAT_MESSAG"
  "E_UNPAUSED\020$\022\036\n\032CHAT_MESSAGE_AUTO_UNPAUS"
  "ED\020%\022\032\n\026CHAT_MESSAGE_YOUPAUSED\020&\022 \n\034CHAT"
  "_MESSAGE_CANTUNPAUSETEAM\020\'\022\"\n\036CHAT_MESSA"
  "GE_VOICE_TEXT_BANNED\020)\022.\n*CHAT_MESSAGE_S"
  "PECTATORS_WATCHING_THIS_GAME\020*\022 \n\034CHAT_M"
  "ESSAGE_REPORT_REMINDER\020+\022\032\n\026CHAT_MESSAGE"
  "_ECON_ITEM\020,\022\026\n\022CHAT_MESSAGE_TAUNT\020-\022\027\n\023"
  "CHAT_MESSAGE_RANDOM\020.\022\030\n\024CHAT_MESSAGE_RD"
  "_TURN\020/\022 \n\034CHAT_MESSAGE_DROP_RATE_BONUS\020"
  "1\022!\n\035CHAT_MESSAGE_NO_BATTLE_POINTS\0202\022\035\n\031"
  "CHAT_MESSAGE_DENIED_AEGIS\0203\022\036\n\032CHAT_MESS"
  "AGE_INFORMATIONAL\0204\022\035\n\031CHAT_MESSAGE_AEGI"
  "S_STOLEN\0205\022\035\n\031CHAT_MESSAGE_ROSHAN_CANDY\020"
  "6\022\034\n\030CHAT_MESSAGE_ITEM_GIFTED\0207\022\'\n#CHAT_"
  "MESSAGE_HERO_KILL_WITH_GREEVIL\0208\022(\n$CHAT"
  "_MESSAGE_HOLDOUT_TOWER_DESTROYED\0209\022\'\n#CH"
  "AT_MESSAGE_HOLDOUT_WALL_DESTROYED\020:\022&\n\"C"
  "HAT_MESSAGE_HOLDOUT_WALL_FINISHED\020;\022)\n%C"
  "HAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO\020>\0221"
  "\n-CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXPL"
  "ANATION\020\?\022(\n$CHAT_MESSAGE_DISCONNECT_LIM"
  "ITED_HERO\020@\0223\n/CHAT_MESSAGE_LOW_PRIORITY"
  "_COMPLETED_EXPLANATION\020A\022,\n(CHAT_MESSAGE"
  "_RECRUITMENT_DROP_RATE_BONUS\020B\0221\n-CHAT_M"
  "ESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE\020"
  "C\022 \n\034CHAT_MESSAGE_PLAYER_LEFT_AFK\020I\0222\n.C"
  "HAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TOO"
  "_LONG\020J\022!\n\035CHAT_MESSAGE_PLAYER_ABANDONED"
  "\020K\022%\n!CHAT_MESSAGE_PLAYER_ABANDONED_AFK\020"
  "L\0227\n3CHAT_MESSAGE_PLAYER_ABANDONED_DISCO"
  "NNECTED_TOO_LONG\020M\022#\n\037CHAT_MESSAGE_WILL_"
  "NOT_BE_SCORED\020N\022*\n&CHAT_MESSAGE_WILL_NOT"
  "_BE_SCORED_RANKED\020O\022+\n\'CHAT_MESSAGE_WILL"
  "_NOT_BE_SCORED_NETWORK\020P\0222\n.CHAT_MESSAGE"
  "_WILL_NOT_BE_SCORED_NETWORK_RANKED\020Q\022)\n%"
  "CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON\020R\022"
  ":\n6CHAT_MESSAGE_RANKED_GAME_STILL_SCORED"
  "_LEAVERS_GET_LOSS\020S\0228\n4CHAT_MESSAGE_ABAN"
  "DON_RANKED_BEFORE_FIRST_BLOOD_PARTY\020T\022!\n"
  "\035CHAT_MESSAGE_COMPENDIUM_LEVEL\020U\022*\n&CHAT"
  "_MESSAGE_VICTORY_PREDICTION_STREAK\020V\022\"\n\036"
  "CHAT_MESSAGE_ASSASSIN_ANNOUNCE\020W\022!\n\035CHAT"
  "_MESSAGE_ASSASSIN_SUCCESS\020X\022 \n\034CHAT_MESS"
  "AGE_ASSASSIN_DENIED\020Y\0227\n3CHAT_MESSAGE_VI"
  "CTORY_PREDICTION_SINGLE_USER_CONFIRM\020Z\022\034"
  "\n\030CHAT_MESSAGE_EFFIGY_KILL\020[\022+\n\'CHAT_MES"
  "SAGE_VOICE_TEXT_BANNED_OVERFLOW\020\\\022\"\n\036CHA"
  "T_MESSAGE_YEAR_BEAST_KILLED\020]\022 \n\034CHAT_ME"
  "SSAGE_PAUSE_COUNTDOWN\020^\022\036\n\032CHAT_MESSAGE_"
  "COINS_WAGERED\020_\022#\n\037CHAT_MESSAGE_HERO_NOM"
  "INATED_BAN\020`\022\034\n\030CHAT_MESSAGE_HERO_BANNED"
  "\020a\022\037\n\033CHAT_MESSAGE_HERO_BAN_COUNT\020b\022\036\n\032C"
  "HAT_MESSAGE_RIVER_PAINTED\020c\022\032\n\026CHAT_MESS"
  "AGE_SCAN_USED\020d\022\036\n\032CHAT_MESSAGE_SHRINE_K"
  "ILLED\020e\022\"\n\036CHAT_MESSAGE_WAGER_TOKEN_SPEN"
  "T\020f\022\033\n\027CHAT_MESSAGE_RANK_WAGER\020g\022$\n CHAT"
  "_MESSAGE_NEW_PLAYER_REMINDER\020h\022%\n!CHAT_M"
  "ESSAGE_OBSERVER_WARD_KILLED\020i\022#\n\037CHAT_ME"
  "SSAGE_SENTRY_WARD_KILLED\020j\022-\n)CHAT_MESSA"
  "GE_ITEM_PLACED_IN_NEUTRAL_STASH\020k\022$\n CHA"
  "T_MESSAGE_HERO_CHOICE_INVALID\020l\022\027\n\023CHAT_"
  "MESSAGE_BOUNTY\020m\022$\n CHAT_MESSAGE_ABILITY"
  "_DRAFT_START\020n\022!\n\035CHAT_MESSAGE_HERO_FOUN"
  "D_CANDY\020o\022\'\n#CHAT_MESSAGE_ABILITY_DRAFT_"
  "RANDOMED\020p\022(\n$CHAT_MESSAGE_PRIVATE_COACH"
  "_CONNECTED\020q\022%\n!CHAT_MESSAGE_CANT_PAUSE_"
  "TOO_EARLY\020s\022\'\n#CHAT_MESSAGE_HERO_KILL_WI"
  "TH_PENGUIN\020t\022\036\n\032CHAT_MESSAGE_MINIBOSS_KI"
  "LL\020u\022(\n$CHAT_MESSAGE_PLAYER_IN_GAME_BAN_"
  "TEXT\020v*\262\001\n\035DOTA_NO_BATTLE_POINTS_REASONS"
  "\022%\n!NO_BATTLE_POINTS_WRONG_LOBBY_TYPE\020\001\022"
  "\"\n\036NO_BATTLE_POINTS_PRACTICE_BOTS\020\002\022#\n\037N"
  "O_BATTLE_POINTS_CHEATS_ENABLED\020\003\022!\n\035NO_B"
  "ATTLE_POINTS_LOW_PRIORITY\020\004*\317\001\n\027DOTA_CHA"
  "T_INFORMATIONAL\022!\n\035INFO_COOP_BATTLE_POIN"
  "TS_RULES\020\001\022#\n\037INFO_FROSTIVUS_ABANDON_REM"
  "INDER\020\002\022\030\n\024INFO_RANKED_REMINDER\020\003\022+\n\'INF"
  "O_COOP_LOW_PRIORITY_PASSIVE_REMINDER\020\004\022%"
  "\n!INFO_CUSTOM_GAME_PENALTY_REMINDER\020\005*\340\003"
  "\n\026DOTA_ABILITY_PING_TYPE\022\026\n\022ABILITY_PING"
  "_READY\020\001\022\025\n\021ABILITY_PING_MANA\020\002\022\031\n\025ABILI"
  "TY_PING_COOLDOWN\020\003\022\026\n\022ABILITY_PING_ENEMY"
  "\020\004\022\032\n\026ABILITY_PING_UNLEARNED\020\005\022\033\n\027ABILIT"
  "Y_PING_INBACKPACK\020\006\022\030\n\024ABILITY_PING_INST"
  "ASH\020\007\022\032\n\026ABILITY_PING_ONCOURIER\020\010\022\025\n\021ABI"
  "LITY_PING_ALLY\020\t\022\034\n\030ABILITY_PING_LEARN_R"
  "EADY\020\n\022\033\n\027ABILITY_PING_WILL_LEARN\020\013\022\035\n\031A"
  "BILITY_PING_FUTURE_LEARN\020\014\022\036\n\032ABILITY_PI"
  "NG_NEUTRAL_OFFER\020\r\022 \n\034ABILITY_PING_NEUTR"
  "AL_REQUEST\020\016\022\036\n\032ABILITY_PING_NEUTRAL_EQU"
  "IP\020\017\022\"\n\036ABILITY_PING_INCOURIERBACKPACK\020\020"
  "*\214\002\n\027DOTA_REPLAY_STATE_EVENT\022&\n\"DOTA_REP"
  "LAY_STATE_EVENT_GAME_START\020\001\022)\n%DOTA_REP"
  "LAY_STATE_EVENT_STARTING_HORN\020\002\022\'\n#DOTA_"
  "REPLAY_STATE_EVENT_FIRST_BLOOD\020\003\022$\n DOTA"
  "_REPLAY_STATE_EVENT_SHOWCASE\020\004\022%\n!DOTA_R"
  "EPLAY_STATE_EVENT_POST_GAME\020\005\022(\n$DOTA_RE"
  "PLAY_STATE_EVENT_WAIT_FOR_MAP\020\006*\345\001\n\023EDot"
  "aEntityMessages\022\024\n\020DOTA_UNIT_SPEECH\020\000\022\031\n"
  "\025DOTA_UNIT_SPEECH_MUTE\020\001\022\031\n\025DOTA_UNIT_AD"
  "D_GESTURE\020\002\022\034\n\030DOTA_UNIT_REMOVE_GESTURE\020"
  "\003\022!\n\035DOTA_UNIT_REMOVE_ALL_GESTURES\020\004\022\032\n\026"
  "DOTA_UNIT_FADE_GESTURE\020\006\022%\n!DOTA_UNIT_SP"
  "EECH_CLIENTSIDE_RULES\020\007*\215\006\n\023DOTA_OVERHEA"
  "D_ALERT\022\027\n\023OVERHEAD_ALERT_GOLD\020\000\022\027\n\023OVER"
  "HEAD_ALERT_DENY\020\001\022\033\n\027OVERHEAD_ALERT_CRIT"
  "ICAL\020\002\022\025\n\021OVERHEAD_ALERT_XP\020\003\022%\n!OVERHEA"
  "D_ALERT_BONUS_SPELL_DAMAGE\020\004\022\027\n\023OVERHEAD"
  "_ALERT_MISS\020\005\022\031\n\025OVERHEAD_ALERT_DAMAGE\020\006"
  "\022\030\n\024OVERHEAD_ALERT_EVADE\020\007\022\030\n\024OVERHEAD_A"
  "LERT_BLOCK\020\010\022&\n\"OVERHEAD_ALERT_BONUS_POI"
  "SON_DAMAGE\020\t\022\027\n\023OVERHEAD_ALERT_HEAL\020\n\022\033\n"
  "\027OVERHEAD_ALERT_MANA_ADD\020\013\022\034\n\030OVERHEAD_A"
  "LERT_MANA_LOSS\020\014\022!\n\035OVERHEAD_ALERT_LAST_"
  "HIT_EARLY\020\r\022!\n\035OVERHEAD_ALERT_LAST_HIT_C"
  "LOSE\020\016\022 \n\034OVERHEAD_ALERT_LAST_HIT_MISS\020\017"
  "\022 \n\034OVERHEAD_ALERT_MAGICAL_BLOCK\020\020\022\"\n\036OV"
  "ERHEAD_ALERT_INCOMING_DAMAGE\020\021\022\"\n\036OVERHE"
  "AD_ALERT_OUTGOING_DAMAGE\020\022\022!\n\035OVERHEAD_A"
  "LERT_DISABLE_RESIST\020\023\022\030\n\024OVERHEAD_ALERT_"
  "DEATH\020\024\022\032\n\026OVERHEAD_ALERT_BLOCKED\020\025\022 \n\034O"
  "VERHEAD_ALERT_ITEM_RECEIVED\020\026\022\030\n\024OVERHEA"
  "D_ALERT_SHARD\020\027\022\036\n\032OVERHEAD_ALERT_DEADLY"
  "_BLOW\020\030*k\n\021DOTA_ROSHAN_PHASE\022\027\n\023k_SRSP_R"
  "OSHAN_ALIVE\020\000\022\034\n\030k_SRSP_ROSHAN_BASE_TIME"
  "R\020\001\022\037\n\033k_SRSP_ROSHAN_VISIBLE_TIMER\020\002*\201\004\n"
  "\026DOTA_POSITION_CATEGORY\022\026\n\022DOTA_POSITION"
  "_NONE\020\000\022\035\n\031DOTA_POSITION_BOTTOM_LANE\020\001\022\032"
  "\n\026DOTA_POSITION_MID_LANE\020\002\022\032\n\026DOTA_POSIT"
  "ION_TOP_LANE\020\003\022 \n\034DOTA_POSITION_RADIANT_"
  "JUNGLE\020\004\022\035\n\031DOTA_POSITION_DIRE_JUNGLE\020\005\022"
  "\"\n\036DOTA_POSITION_RADIANT_ANCIENTS\020\006\022\037\n\033D"
  "OTA_POSITION_DIRE_ANCIENTS\020\007\022%\n!DOTA_POS"
  "ITION_RADIANT_SECRET_SHOP\020\010\022\"\n\036DOTA_POSI"
  "TION_DIRE_SECRET_SHOP\020\t\022\027\n\023DOTA_POSITION"
  "_RIVER\020\n\022\034\n\030DOTA_POSITION_ROSHAN_PIT\020\013\022\036"
  "\n\032DOTA_POSITION_RADIANT_BASE\020\014\022\033\n\027DOTA_P"
  "OSITION_DIRE_BASE\020\r\022\032\n\026DOTA_POSITION_FOU"
  "NTAIN\020\016\022\027\n\023DOTA_POSITION_OTHER\020\017*\346\001\n\030DOT"
  "A_ABILITY_TARGET_TYPE\022\034\n\030DOTA_ABILITY_TA"
  "RGET_NONE\020\000\022\034\n\030DOTA_ABILITY_TARGET_SELF\020"
  "\001\022!\n\035DOTA_ABILITY_TARGET_ALLY_HERO\020\002\022\"\n\036"
  "DOTA_ABILITY_TARGET_ALLY_CREEP\020\003\022\"\n\036DOTA"
  "_ABILITY_TARGET_ENEMY_HERO\020\004\022#\n\037DOTA_ABI"
  "LITY_TARGET_ENEMY_CREEP\020\005*\230\010\n\rEHeroStatT"
  "ype\022\030\n\024k_EHeroStatType_None\020\000\022#\n\036k_EHero"
  "StatType_AxeTotalDamage\020\320\017\022\'\n\"k_EHeroSta"
  "tType_BattleHungerDamage\020\321\017\022\'\n\"k_EHeroSt"
  "atType_CounterHelixDamage\020\322\017\022\'\n\"k_EHeroS"
  "tatType_CullingBladeDamage\020\323\017\022,\n\'k_EHero"
  "StatType_BerserkersCallCastCount\020\324\017\0223\n.k"
  "_EHeroStatType_BerserkersCallHeroesHitAv"
  "erage\020\325\017\0220\n+k_EHeroStatType_BerserkersCa"
  "llOtherUnitsHit\020\326\017\0223\n.k_EHeroStatType_Be"
  "rserkersCallHeroAttacksTaken\020\327\017\0224\n/k_EHe"
  "roStatType_BerserkersCallOtherAttacksTak"
  "en\020\330\017\022*\n%k_EHeroStatType_BattleHungerCas"
  "tCount\020\331\017\0222\n-k_EHeroStatType_BattleHunge"
  "rPotentialDuration\020\332\017\0220\n+k_EHeroStatType"
  "_BattleHungerAverageDuration\020\333\017\022*\n%k_EHe"
  "roStatType_CounterHelixProcCount\020\334\017\022.\n)k"
  "_EHeroStatType_CounterHelixHeroProcCount"
  "\020\335\017\0221\n,k_EHeroStatType_CounterHelixHeroe"
  "sHitAverage\020\336\017\0223\n.k_EHeroStatType_Counte"
  "rHelixOtherUnitsHitCount\020\337\017\022*\n%k_EHeroSt"
  "atType_CullingBladeCastCount\020\340\017\022*\n%k_EHe"
  "roStatType_CullingBladeKillCount\020\341\017\0224\n/k"
  "_EHeroStatType_CullingBladeAverageHealth"
  "Culled\020\342\017\0227\n2k_EHeroStatType_CullingBlad"
  "eAverageDamageAvailable\020\343\017\0220\n+k_EHeroSta"
  "tType_CullingBladeHeroBuffAverage\020\344\017*\344\004\n"
  "\027EPlayerVoiceListenState\022\016\n\nkPVLS_None\020\000"
  "\022\032\n\026kPVLS_DeniedChatBanned\020\001\022\027\n\023kPVLS_De"
  "niedPartner\020\002\022&\n\"kPVLS_DeniedHLTVTalkerN"
  "otSpectator\020\003\022$\n kPVLS_DeniedHLTVNoTalke"
  "rPlayerID\020\004\022(\n$kPVLS_DeniedHLTVTalkerNot"
  "Broadcaster\020\005\022\035\n\031kPVLS_DeniedTeamSpectat"
  "or\020\006\022\027\n\023kPVLS_DeniedStudent\020\010\022\034\n\030kPVLS_D"
  "eniedPrivateCoach\020\t\022\020\n\014kPVLS_Denied\020@\022&\n"
  "\"kPVLS_AllowHLTVTalkerIsBroadcaster\020A\022\034\n"
  "\030kPVLS_AllowCoBroadcaster\020B\022\026\n\022kPVLS_All"
  "owAllChat\020C\022\035\n\031kPVLS_AllowStudentToCoach"
  "\020D\022\034\n\030kPVLS_AllowFellowStudent\020E\022\034\n\030kPVL"
  "S_AllowTalkerIsCoach\020F\022\034\n\030kPVLS_AllowCoa"
  "chHearTeam\020G\022\027\n\023kPVLS_AllowSameTeam\020H\022\027\n"
  "\023kPVLS_AllowShowcase\020I\022\033\n\027kPVLS_AllowPri"
  "vateCoach\020J*B\n\020EProjectionEvent\022\022\n\016ePE_F"
  "irstBlood\020\000\022\032\n\026ePE_Killstreak_godlike\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fusermessages_2eproto_deps[3] = {
  &::descriptor_table_dota_5fcommonmessages_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fusermessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fusermessages_2eproto = {
    false, false, 36519, descriptor_table_protodef_dota_5fusermessages_2eproto,
    "dota_usermessages.proto",
    &descriptor_table_dota_5fusermessages_2eproto_once, descriptor_table_dota_5fusermessages_2eproto_deps, 3, 180,
    schemas, file_default_instances, TableStruct_dota_5fusermessages_2eproto::offsets,
    file_level_metadata_dota_5fusermessages_2eproto, file_level_enum_descriptors_dota_5fusermessages_2eproto,
    file_level_service_descriptors_dota_5fusermessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fusermessages_2eproto_getter() {
  return &descriptor_table_dota_5fusermessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fusermessages_2eproto(&descriptor_table_dota_5fusermessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAUserMsg_PredictionResult_Prediction_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[0];
}
bool CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_ItemGranted;
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_Destroyed;
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MIN;
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MAX;
constexpr int CDOTAUserMsg_PredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[1];
}
bool CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::NUMERIC;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::STRING;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::STRINGTABLE_INDEX;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::INT_NUMERIC;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MIN;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MAX;
constexpr int CDOTAResponseQuerySerialized_Fact::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAUserMsg_GuildChallenge_Progress_EChallengeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[2];
}
bool CDOTAUserMsg_GuildChallenge_Progress_EChallengeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::k_EChallengeType_Invalid;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::k_EChallengeType_Cooperative;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::k_EChallengeType_Contract;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::EChallengeType_MIN;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::EChallengeType_MAX;
constexpr int CDOTAUserMsg_GuildChallenge_Progress::EChallengeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaUserMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[3];
}
bool EDotaUserMessages_IsValid(int value) {
  switch (value) {
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[4];
}
bool DOTA_CHAT_MESSAGE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[5];
}
bool DOTA_NO_BATTLE_POINTS_REASONS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[6];
}
bool DOTA_CHAT_INFORMATIONAL_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_ABILITY_PING_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[7];
}
bool DOTA_ABILITY_PING_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_REPLAY_STATE_EVENT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[8];
}
bool DOTA_REPLAY_STATE_EVENT_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaEntityMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[9];
}
bool EDotaEntityMessages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[10];
}
bool DOTA_OVERHEAD_ALERT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_ROSHAN_PHASE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[11];
}
bool DOTA_ROSHAN_PHASE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_POSITION_CATEGORY_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[12];
}
bool DOTA_POSITION_CATEGORY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_ABILITY_TARGET_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[13];
}
bool DOTA_ABILITY_TARGET_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHeroStatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[14];
}
bool EHeroStatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerVoiceListenState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[15];
}
bool EPlayerVoiceListenState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProjectionEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[16];
}
bool EProjectionEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAUserMsg_AIDebugLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AIDebugLine>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AIDebugLine)
}
CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(const CDOTAUserMsg_AIDebugLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AIDebugLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AIDebugLine)
}

inline void CDOTAUserMsg_AIDebugLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_AIDebugLine::~CDOTAUserMsg_AIDebugLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AIDebugLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AIDebugLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CDOTAUserMsg_AIDebugLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AIDebugLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AIDebugLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AIDebugLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_AIDebugLine.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AIDebugLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AIDebugLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_AIDebugLine.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AIDebugLine)
  return target;
}

size_t CDOTAUserMsg_AIDebugLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AIDebugLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AIDebugLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AIDebugLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AIDebugLine::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AIDebugLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AIDebugLine*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AIDebugLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AIDebugLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const CDOTAUserMsg_AIDebugLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AIDebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AIDebugLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AIDebugLine::InternalSwap(CDOTAUserMsg_AIDebugLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AIDebugLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[0]);
}

// ===================================================================

class CDOTAUserMsg_Ping::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_Ping>()._impl_._has_bits_);
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_Ping)
}
CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(const CDOTAUserMsg_Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_){}
    , decltype(_impl_.loss_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ping_, &from._impl_.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.loss_) -
    reinterpret_cast<char*>(&_impl_.ping_)) + sizeof(_impl_.loss_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_Ping)
}

inline void CDOTAUserMsg_Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_){0u}
    , decltype(_impl_.loss_){0u}
  };
}

CDOTAUserMsg_Ping::~CDOTAUserMsg_Ping() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.loss_) -
        reinterpret_cast<char*>(&_impl_.ping_)) + sizeof(_impl_.loss_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 loss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_loss(&has_bits);
          _impl_.loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping(), target);
  }

  // optional uint32 loss = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_Ping)
  return target;
}

size_t CDOTAUserMsg_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping());
    }

    // optional uint32 loss = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_loss());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_Ping::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_Ping*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ping_ = from._impl_.ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.loss_ = from._impl_.loss_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_Ping::CopyFrom(const CDOTAUserMsg_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_Ping::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_Ping::InternalSwap(CDOTAUserMsg_Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_Ping, _impl_.loss_)
      + sizeof(CDOTAUserMsg_Ping::_impl_.loss_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_Ping, _impl_.ping_)>(
          reinterpret_cast<char*>(&_impl_.ping_),
          reinterpret_cast<char*>(&other->_impl_.ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[1]);
}

// ===================================================================

class CDOTAUserMsg_SwapVerify::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SwapVerify>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SwapVerify)
}
CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(const CDOTAUserMsg_SwapVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SwapVerify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SwapVerify)
}

inline void CDOTAUserMsg_SwapVerify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_SwapVerify::~CDOTAUserMsg_SwapVerify() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SwapVerify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SwapVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_SwapVerify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SwapVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SwapVerify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SwapVerify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SwapVerify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SwapVerify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SwapVerify)
  return target;
}

size_t CDOTAUserMsg_SwapVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SwapVerify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 player_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SwapVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SwapVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SwapVerify::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SwapVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SwapVerify*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SwapVerify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SwapVerify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SwapVerify::CopyFrom(const CDOTAUserMsg_SwapVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SwapVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SwapVerify::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SwapVerify::InternalSwap(CDOTAUserMsg_SwapVerify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SwapVerify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[2]);
}

// ===================================================================

class CDOTAUserMsg_ChatEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatEvent>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playerid_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_playerid_3(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_playerid_4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_playerid_5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_playerid_6(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatEvent)
}
CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(const CDOTAUserMsg_ChatEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ChatEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.value2_){}
    , decltype(_impl_.value3_){}
    , decltype(_impl_.playerid_6_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.playerid_1_){}
    , decltype(_impl_.playerid_2_){}
    , decltype(_impl_.playerid_3_){}
    , decltype(_impl_.playerid_4_){}
    , decltype(_impl_.playerid_5_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_5_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.playerid_5_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatEvent)
}

inline void CDOTAUserMsg_ChatEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.value2_){0u}
    , decltype(_impl_.value3_){0u}
    , decltype(_impl_.playerid_6_){-1}
    , decltype(_impl_.type_){-1}
    , decltype(_impl_.playerid_1_){-1}
    , decltype(_impl_.playerid_2_){-1}
    , decltype(_impl_.playerid_3_){-1}
    , decltype(_impl_.playerid_4_){-1}
    , decltype(_impl_.playerid_5_){-1}
  };
}

CDOTAUserMsg_ChatEvent::~CDOTAUserMsg_ChatEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ChatEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ChatEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ChatEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value3_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.value3_));
    _impl_.playerid_6_ = -1;
    _impl_.type_ = -1;
    _impl_.playerid_1_ = -1;
    _impl_.playerid_2_ = -1;
    _impl_.playerid_3_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.playerid_4_ = -1;
    _impl_.playerid_5_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_CHAT_MESSAGE_IsValid(val))) {
            _internal_set_type(static_cast<::DOTA_CHAT_MESSAGE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 playerid_1 = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_playerid_1(&has_bits);
          _impl_.playerid_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 playerid_2 = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playerid_2(&has_bits);
          _impl_.playerid_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 playerid_3 = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_playerid_3(&has_bits);
          _impl_.playerid_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 playerid_4 = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_playerid_4(&has_bits);
          _impl_.playerid_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 playerid_5 = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_playerid_5(&has_bits);
          _impl_.playerid_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 playerid_6 = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_playerid_6(&has_bits);
          _impl_.playerid_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_value2(&has_bits);
          _impl_.value2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_value3(&has_bits);
          _impl_.value3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ChatEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional sint32 playerid_1 = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_playerid_1(), target);
  }

  // optional sint32 playerid_2 = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_playerid_2(), target);
  }

  // optional sint32 playerid_3 = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_playerid_3(), target);
  }

  // optional sint32 playerid_4 = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_playerid_4(), target);
  }

  // optional sint32 playerid_5 = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(7, this->_internal_playerid_5(), target);
  }

  // optional sint32 playerid_6 = 8 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_playerid_6(), target);
  }

  // optional uint32 value2 = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_value2(), target);
  }

  // optional uint32 value3 = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_value3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatEvent)
  return target;
}

size_t CDOTAUserMsg_ChatEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatEvent)
  size_t total_size = 0;

  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (_internal_has_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

    // optional uint32 value2 = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value2());
    }

    // optional uint32 value3 = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value3());
    }

    // optional sint32 playerid_6 = 8 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_playerid_6());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional sint32 playerid_1 = 3 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_playerid_1());
    }

    // optional sint32 playerid_2 = 4 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_playerid_2());
    }

    // optional sint32 playerid_3 = 5 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_playerid_3());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional sint32 playerid_4 = 6 [default = -1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_playerid_4());
    }

    // optional sint32 playerid_5 = 7 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_playerid_5());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ChatEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ChatEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ChatEvent::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ChatEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ChatEvent*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ChatEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value2_ = from._impl_.value2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value3_ = from._impl_.value3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.playerid_6_ = from._impl_.playerid_6_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.playerid_1_ = from._impl_.playerid_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.playerid_2_ = from._impl_.playerid_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.playerid_3_ = from._impl_.playerid_3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.playerid_4_ = from._impl_.playerid_4_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.playerid_5_ = from._impl_.playerid_5_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const CDOTAUserMsg_ChatEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_ChatEvent::InternalSwap(CDOTAUserMsg_ChatEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _impl_.value3_)
      + sizeof(CDOTAUserMsg_ChatEvent::_impl_.value3_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
  swap(_impl_.playerid_6_, other->_impl_.playerid_6_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.playerid_1_, other->_impl_.playerid_1_);
  swap(_impl_.playerid_2_, other->_impl_.playerid_2_);
  swap(_impl_.playerid_3_, other->_impl_.playerid_3_);
  swap(_impl_.playerid_4_, other->_impl_.playerid_4_);
  swap(_impl_.playerid_5_, other->_impl_.playerid_5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[3]);
}

// ===================================================================

class CDOTAUserMsg_BotChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BotChat>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BotChat)
}
CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(const CDOTAUserMsg_BotChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_BotChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.team_only_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.team_only_, &from._impl_.team_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.team_only_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BotChat)
}

inline void CDOTAUserMsg_BotChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.team_only_){false}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_BotChat::~CDOTAUserMsg_BotChat() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BotChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_BotChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.target_.Destroy();
}

void CDOTAUserMsg_BotChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_BotChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BotChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.target_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.team_only_ = false;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BotChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_BotChat.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_BotChat.target");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool team_only = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_team_only(&has_bits);
          _impl_.team_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_BotChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BotChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BotChat.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BotChat.target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target(), target);
  }

  // optional bool team_only = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_team_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BotChat)
  return target;
}

size_t CDOTAUserMsg_BotChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BotChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string target = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional bool team_only = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_BotChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_BotChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_BotChat::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_BotChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_BotChat*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_BotChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BotChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_only_ = from._impl_.team_only_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_BotChat::CopyFrom(const CDOTAUserMsg_BotChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BotChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BotChat::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BotChat::InternalSwap(CDOTAUserMsg_BotChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  swap(_impl_.team_only_, other->_impl_.team_only_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BotChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[4]);
}

// ===================================================================

class CDOTAUserMsg_CombatHeroPositions::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CombatHeroPositions>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector2D& world_pos(const CDOTAUserMsg_CombatHeroPositions* msg);
  static void set_has_world_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgVector2D&
CDOTAUserMsg_CombatHeroPositions::_Internal::world_pos(const CDOTAUserMsg_CombatHeroPositions* msg) {
  return *msg->_impl_.world_pos_;
}
void CDOTAUserMsg_CombatHeroPositions::clear_world_pos() {
  if (_impl_.world_pos_ != nullptr) _impl_.world_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CombatHeroPositions)
}
CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(const CDOTAUserMsg_CombatHeroPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CombatHeroPositions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_pos_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.health_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_pos()) {
    _this->_impl_.world_pos_ = new ::CMsgVector2D(*from._impl_.world_pos_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.health_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.health_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CombatHeroPositions)
}

inline void CDOTAUserMsg_CombatHeroPositions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_pos_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.time_){0}
    , decltype(_impl_.health_){0}
  };
}

CDOTAUserMsg_CombatHeroPositions::~CDOTAUserMsg_CombatHeroPositions() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CombatHeroPositions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CombatHeroPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.world_pos_;
}

void CDOTAUserMsg_CombatHeroPositions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CombatHeroPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CombatHeroPositions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.world_pos_ != nullptr);
    _impl_.world_pos_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.health_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.health_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CombatHeroPositions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector2D world_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_health(&has_bits);
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CombatHeroPositions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CombatHeroPositions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional int32 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  // optional .CMsgVector2D world_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::world_pos(this),
        _Internal::world_pos(this).GetCachedSize(), target, stream);
  }

  // optional int32 health = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CombatHeroPositions)
  return target;
}

size_t CDOTAUserMsg_CombatHeroPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CombatHeroPositions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector2D world_pos = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_pos_);
    }

    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional int32 time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
    }

    // optional int32 health = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_health());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CombatHeroPositions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CombatHeroPositions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CombatHeroPositions::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CombatHeroPositions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CombatHeroPositions*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CombatHeroPositions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CombatHeroPositions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_world_pos()->::CMsgVector2D::MergeFrom(
          from._internal_world_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.health_ = from._impl_.health_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CombatHeroPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatHeroPositions::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CombatHeroPositions::InternalSwap(CDOTAUserMsg_CombatHeroPositions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _impl_.health_)
      + sizeof(CDOTAUserMsg_CombatHeroPositions::_impl_.health_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _impl_.world_pos_)>(
          reinterpret_cast<char*>(&_impl_.world_pos_),
          reinterpret_cast<char*>(&other->_impl_.world_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CombatHeroPositions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[5]);
}

// ===================================================================

class CDOTAUserMsg_CombatLogBulkData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CombatLogBulkData>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_request_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void CDOTAUserMsg_CombatLogBulkData::clear_combat_entries() {
  _impl_.combat_entries_.Clear();
}
CDOTAUserMsg_CombatLogBulkData::CDOTAUserMsg_CombatLogBulkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CombatLogBulkData)
}
CDOTAUserMsg_CombatLogBulkData::CDOTAUserMsg_CombatLogBulkData(const CDOTAUserMsg_CombatLogBulkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CombatLogBulkData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combat_entries_){from._impl_.combat_entries_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.request_time_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CombatLogBulkData)
}

inline void CDOTAUserMsg_CombatLogBulkData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combat_entries_){arena}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.request_time_){0}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_CombatLogBulkData::~CDOTAUserMsg_CombatLogBulkData() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CombatLogBulkData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CombatLogBulkData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.combat_entries_.~RepeatedPtrField();
}

void CDOTAUserMsg_CombatLogBulkData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CombatLogBulkData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CombatLogBulkData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.combat_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.request_time_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.request_time_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CombatLogBulkData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTACombatLogEntry combat_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_combat_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float request_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_request_time(&has_bits);
          _impl_.request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CombatLogBulkData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CombatLogBulkData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTACombatLogEntry combat_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_combat_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_combat_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_timestamp(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  // optional int32 player_id = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_id(), target);
  }

  // optional float request_time = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_request_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CombatLogBulkData)
  return target;
}

size_t CDOTAUserMsg_CombatLogBulkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CombatLogBulkData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTACombatLogEntry combat_entries = 1;
  total_size += 1UL * this->_internal_combat_entries_size();
  for (const auto& msg : this->_impl_.combat_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float request_time = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 player_id = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CombatLogBulkData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CombatLogBulkData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CombatLogBulkData::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CombatLogBulkData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CombatLogBulkData*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CombatLogBulkData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CombatLogBulkData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.combat_entries_.MergeFrom(from._impl_.combat_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.request_time_ = from._impl_.request_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CombatLogBulkData::CopyFrom(const CDOTAUserMsg_CombatLogBulkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CombatLogBulkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatLogBulkData::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CombatLogBulkData::InternalSwap(CDOTAUserMsg_CombatLogBulkData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.combat_entries_.InternalSwap(&other->_impl_.combat_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatLogBulkData, _impl_.request_time_)
      + sizeof(CDOTAUserMsg_CombatLogBulkData::_impl_.request_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatLogBulkData, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CombatLogBulkData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[6]);
}

// ===================================================================

class CDOTAUserMsg_ProjectileParticleCPData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ProjectileParticleCPData>()._impl_._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& vector(const CDOTAUserMsg_ProjectileParticleCPData* msg);
  static void set_has_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_ProjectileParticleCPData::_Internal::vector(const CDOTAUserMsg_ProjectileParticleCPData* msg) {
  return *msg->_impl_.vector_;
}
void CDOTAUserMsg_ProjectileParticleCPData::clear_vector() {
  if (_impl_.vector_ != nullptr) _impl_.vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_ProjectileParticleCPData::CDOTAUserMsg_ProjectileParticleCPData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ProjectileParticleCPData)
}
CDOTAUserMsg_ProjectileParticleCPData::CDOTAUserMsg_ProjectileParticleCPData(const CDOTAUserMsg_ProjectileParticleCPData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ProjectileParticleCPData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.control_point_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vector()) {
    _this->_impl_.vector_ = new ::CMsgVector(*from._impl_.vector_);
  }
  _this->_impl_.control_point_ = from._impl_.control_point_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ProjectileParticleCPData)
}

inline void CDOTAUserMsg_ProjectileParticleCPData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.control_point_){0}
  };
}

CDOTAUserMsg_ProjectileParticleCPData::~CDOTAUserMsg_ProjectileParticleCPData() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ProjectileParticleCPData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ProjectileParticleCPData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vector_;
}

void CDOTAUserMsg_ProjectileParticleCPData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ProjectileParticleCPData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ProjectileParticleCPData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.vector_ != nullptr);
    _impl_.vector_->Clear();
  }
  _impl_.control_point_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ProjectileParticleCPData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          _impl_.control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ProjectileParticleCPData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ProjectileParticleCPData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector vector = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ProjectileParticleCPData)
  return target;
}

size_t CDOTAUserMsg_ProjectileParticleCPData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ProjectileParticleCPData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector vector = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vector_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_control_point());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ProjectileParticleCPData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ProjectileParticleCPData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ProjectileParticleCPData::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ProjectileParticleCPData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ProjectileParticleCPData*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ProjectileParticleCPData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ProjectileParticleCPData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_vector()->::CMsgVector::MergeFrom(
          from._internal_vector());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.control_point_ = from._impl_.control_point_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ProjectileParticleCPData::CopyFrom(const CDOTAUserMsg_ProjectileParticleCPData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ProjectileParticleCPData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ProjectileParticleCPData::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ProjectileParticleCPData::InternalSwap(CDOTAUserMsg_ProjectileParticleCPData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectileParticleCPData, _impl_.control_point_)
      + sizeof(CDOTAUserMsg_ProjectileParticleCPData::_impl_.control_point_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectileParticleCPData, _impl_.vector_)>(
          reinterpret_cast<char*>(&_impl_.vector_),
          reinterpret_cast<char*>(&other->_impl_.vector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ProjectileParticleCPData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[7]);
}

// ===================================================================

class CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}
CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.damage_, &from._impl_.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}

inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.ability_id_){-1}
  };
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::~CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.damage_ = 0;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional int32 damage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 damage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
    }

    // optional int32 ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::InternalSwap(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.damage_, other->_impl_.damage_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[8]);
}

// ===================================================================

class CDOTAUserMsg_MiniKillCamInfo_Attacker::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MiniKillCamInfo_Attacker>()._impl_._has_bits_);
  static void set_has_attacker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attacker_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
}
CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MiniKillCamInfo_Attacker* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.attacker_name_){}
    , decltype(_impl_.total_damage_){}
    , decltype(_impl_.attacker_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attacker_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attacker_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attacker_name()) {
    _this->_impl_.attacker_name_.Set(from._internal_attacker_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_damage_, &from._impl_.total_damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attacker_) -
    reinterpret_cast<char*>(&_impl_.total_damage_)) + sizeof(_impl_.attacker_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
}

inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.attacker_name_){}
    , decltype(_impl_.total_damage_){0}
    , decltype(_impl_.attacker_){16777215u}
  };
  _impl_.attacker_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attacker_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_MiniKillCamInfo_Attacker::~CDOTAUserMsg_MiniKillCamInfo_Attacker() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.attacker_name_.Destroy();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abilities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attacker_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.total_damage_ = 0;
    _impl_.attacker_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniKillCamInfo_Attacker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 attacker = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attacker(&has_bits);
          _impl_.attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_damage(&has_bits);
          _impl_.total_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string attacker_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attacker_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MiniKillCamInfo_Attacker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 attacker = 1 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attacker(), target);
  }

  // optional int32 total_damage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_damage(), target);
  }

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string attacker_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attacker_name().data(), static_cast<int>(this->_internal_attacker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attacker_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo_Attacker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string attacker_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attacker_name());
    }

    // optional int32 total_damage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_damage());
    }

    // optional uint32 attacker = 1 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attacker());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MiniKillCamInfo_Attacker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MiniKillCamInfo_Attacker::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MiniKillCamInfo_Attacker*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MiniKillCamInfo_Attacker&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attacker_name(from._internal_attacker_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.total_damage_ = from._impl_.total_damage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.attacker_ = from._impl_.attacker_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::InternalSwap(CDOTAUserMsg_MiniKillCamInfo_Attacker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attacker_name_, lhs_arena,
      &other->_impl_.attacker_name_, rhs_arena
  );
  swap(_impl_.total_damage_, other->_impl_.total_damage_);
  swap(_impl_.attacker_, other->_impl_.attacker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[9]);
}

// ===================================================================

class CDOTAUserMsg_MiniKillCamInfo::_Internal {
 public:
};

CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniKillCamInfo)
}
CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(const CDOTAUserMsg_MiniKillCamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MiniKillCamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attackers_){from._impl_.attackers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo)
}

inline void CDOTAUserMsg_MiniKillCamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attackers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_MiniKillCamInfo::~CDOTAUserMsg_MiniKillCamInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MiniKillCamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attackers_.~RepeatedPtrField();
}

void CDOTAUserMsg_MiniKillCamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MiniKillCamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniKillCamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attackers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniKillCamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attackers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MiniKillCamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attackers_size()); i < n; i++) {
    const auto& repfield = this->_internal_attackers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniKillCamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  total_size += 1UL * this->_internal_attackers_size();
  for (const auto& msg : this->_impl_.attackers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MiniKillCamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MiniKillCamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MiniKillCamInfo::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MiniKillCamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MiniKillCamInfo*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MiniKillCamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniKillCamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attackers_.MergeFrom(from._impl_.attackers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniKillCamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo::InternalSwap(CDOTAUserMsg_MiniKillCamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attackers_.InternalSwap(&other->_impl_.attackers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniKillCamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[10]);
}

// ===================================================================

class CDOTAUserMsg_GlobalLightColor::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GlobalLightColor>()._impl_._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GlobalLightColor)
}
CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(const CDOTAUserMsg_GlobalLightColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_GlobalLightColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlobalLightColor)
}

inline void CDOTAUserMsg_GlobalLightColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){0u}
    , decltype(_impl_.duration_){0}
  };
}

CDOTAUserMsg_GlobalLightColor::~CDOTAUserMsg_GlobalLightColor() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlobalLightColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_GlobalLightColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_GlobalLightColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_GlobalLightColor::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GlobalLightColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GlobalLightColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_GlobalLightColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlobalLightColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlobalLightColor)
  return target;
}

size_t CDOTAUserMsg_GlobalLightColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GlobalLightColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_GlobalLightColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_GlobalLightColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_GlobalLightColor::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_GlobalLightColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_GlobalLightColor*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_GlobalLightColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GlobalLightColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const CDOTAUserMsg_GlobalLightColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GlobalLightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightColor::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlobalLightColor::InternalSwap(CDOTAUserMsg_GlobalLightColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _impl_.duration_)
      + sizeof(CDOTAUserMsg_GlobalLightColor::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GlobalLightColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[11]);
}

// ===================================================================

class CDOTAUserMsg_GlobalLightDirection::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GlobalLightDirection>()._impl_._has_bits_);
  static const ::CMsgVector& direction(const CDOTAUserMsg_GlobalLightDirection* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_GlobalLightDirection::_Internal::direction(const CDOTAUserMsg_GlobalLightDirection* msg) {
  return *msg->_impl_.direction_;
}
void CDOTAUserMsg_GlobalLightDirection::clear_direction() {
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GlobalLightDirection)
}
CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(const CDOTAUserMsg_GlobalLightDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_GlobalLightDirection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::CMsgVector(*from._impl_.direction_);
  }
  _this->_impl_.duration_ = from._impl_.duration_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlobalLightDirection)
}

inline void CDOTAUserMsg_GlobalLightDirection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.duration_){0}
  };
}

CDOTAUserMsg_GlobalLightDirection::~CDOTAUserMsg_GlobalLightDirection() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlobalLightDirection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_GlobalLightDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.direction_;
}

void CDOTAUserMsg_GlobalLightDirection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_GlobalLightDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GlobalLightDirection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.direction_ != nullptr);
    _impl_.direction_->Clear();
  }
  _impl_.duration_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GlobalLightDirection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_GlobalLightDirection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlobalLightDirection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlobalLightDirection)
  return target;
}

size_t CDOTAUserMsg_GlobalLightDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GlobalLightDirection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector direction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.direction_);
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_GlobalLightDirection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_GlobalLightDirection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_GlobalLightDirection::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_GlobalLightDirection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_GlobalLightDirection*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_GlobalLightDirection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GlobalLightDirection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_direction()->::CMsgVector::MergeFrom(
          from._internal_direction());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GlobalLightDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightDirection::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlobalLightDirection::InternalSwap(CDOTAUserMsg_GlobalLightDirection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _impl_.duration_)
      + sizeof(CDOTAUserMsg_GlobalLightDirection::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _impl_.direction_)>(
          reinterpret_cast<char*>(&_impl_.direction_),
          reinterpret_cast<char*>(&other->_impl_.direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GlobalLightDirection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[12]);
}

// ===================================================================

class CDOTAUserMsg_LocationPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_LocationPing>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_LocationPing& location_ping(const CDOTAUserMsg_LocationPing* msg);
  static void set_has_location_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_LocationPing&
CDOTAUserMsg_LocationPing::_Internal::location_ping(const CDOTAUserMsg_LocationPing* msg) {
  return *msg->_impl_.location_ping_;
}
void CDOTAUserMsg_LocationPing::clear_location_ping() {
  if (_impl_.location_ping_ != nullptr) _impl_.location_ping_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_LocationPing)
}
CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(const CDOTAUserMsg_LocationPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_LocationPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_ping_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location_ping()) {
    _this->_impl_.location_ping_ = new ::CDOTAMsg_LocationPing(*from._impl_.location_ping_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_LocationPing)
}

inline void CDOTAUserMsg_LocationPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_ping_){nullptr}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_LocationPing::~CDOTAUserMsg_LocationPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_LocationPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_LocationPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_ping_;
}

void CDOTAUserMsg_LocationPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_LocationPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_LocationPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ping_ != nullptr);
      _impl_.location_ping_->Clear();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_LocationPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMsg_LocationPing location_ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_LocationPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_LocationPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_LocationPing location_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location_ping(this),
        _Internal::location_ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_LocationPing)
  return target;
}

size_t CDOTAUserMsg_LocationPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_LocationPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_LocationPing location_ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_ping_);
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_LocationPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_LocationPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_LocationPing::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_LocationPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_LocationPing*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_LocationPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(
          from._internal_location_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_LocationPing::CopyFrom(const CDOTAUserMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_LocationPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_LocationPing::InternalSwap(CDOTAUserMsg_LocationPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.location_ping_, other->_impl_.location_ping_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_LocationPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[13]);
}

// ===================================================================

class CDOTAUserMsg_PingConfirmation::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PingConfirmation>()._impl_._has_bits_);
  static void set_has_player_id_of_original_pinger(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& location(const CDOTAUserMsg_PingConfirmation* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_PingConfirmation::_Internal::location(const CDOTAUserMsg_PingConfirmation* msg) {
  return *msg->_impl_.location_;
}
void CDOTAUserMsg_PingConfirmation::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_PingConfirmation::CDOTAUserMsg_PingConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PingConfirmation)
}
CDOTAUserMsg_PingConfirmation::CDOTAUserMsg_PingConfirmation(const CDOTAUserMsg_PingConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PingConfirmation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.entity_index_){}
    , decltype(_impl_.icon_type_){}
    , decltype(_impl_.player_id_of_original_pinger_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgVector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.entity_index_, &from._impl_.entity_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_of_original_pinger_) -
    reinterpret_cast<char*>(&_impl_.entity_index_)) + sizeof(_impl_.player_id_of_original_pinger_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PingConfirmation)
}

inline void CDOTAUserMsg_PingConfirmation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.entity_index_){0u}
    , decltype(_impl_.icon_type_){0u}
    , decltype(_impl_.player_id_of_original_pinger_){-1}
  };
}

CDOTAUserMsg_PingConfirmation::~CDOTAUserMsg_PingConfirmation() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PingConfirmation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PingConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CDOTAUserMsg_PingConfirmation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PingConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PingConfirmation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.entity_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.icon_type_) -
        reinterpret_cast<char*>(&_impl_.entity_index_)) + sizeof(_impl_.icon_type_));
    _impl_.player_id_of_original_pinger_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PingConfirmation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_of_original_pinger = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_of_original_pinger(&has_bits);
          _impl_.player_id_of_original_pinger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entity_index(&has_bits);
          _impl_.entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 icon_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_icon_type(&has_bits);
          _impl_.icon_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PingConfirmation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PingConfirmation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_of_original_pinger = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_of_original_pinger(), target);
  }

  // optional uint32 entity_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_index(), target);
  }

  // optional uint32 icon_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_icon_type(), target);
  }

  // optional .CMsgVector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PingConfirmation)
  return target;
}

size_t CDOTAUserMsg_PingConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PingConfirmation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector location = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional uint32 entity_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_index());
    }

    // optional uint32 icon_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_icon_type());
    }

    // optional int32 player_id_of_original_pinger = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_of_original_pinger());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PingConfirmation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PingConfirmation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PingConfirmation::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PingConfirmation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PingConfirmation*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PingConfirmation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PingConfirmation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgVector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entity_index_ = from._impl_.entity_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.icon_type_ = from._impl_.icon_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_of_original_pinger_ = from._impl_.player_id_of_original_pinger_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PingConfirmation::CopyFrom(const CDOTAUserMsg_PingConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PingConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PingConfirmation::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PingConfirmation::InternalSwap(CDOTAUserMsg_PingConfirmation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PingConfirmation, _impl_.icon_type_)
      + sizeof(CDOTAUserMsg_PingConfirmation::_impl_.icon_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PingConfirmation, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
  swap(_impl_.player_id_of_original_pinger_, other->_impl_.player_id_of_original_pinger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PingConfirmation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[14]);
}

// ===================================================================

class CDOTAUserMsg_ItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_ItemAlert& item_alert(const CDOTAUserMsg_ItemAlert* msg);
  static void set_has_item_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_ItemAlert&
CDOTAUserMsg_ItemAlert::_Internal::item_alert(const CDOTAUserMsg_ItemAlert* msg) {
  return *msg->_impl_.item_alert_;
}
void CDOTAUserMsg_ItemAlert::clear_item_alert() {
  if (_impl_.item_alert_ != nullptr) _impl_.item_alert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemAlert)
}
CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(const CDOTAUserMsg_ItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ItemAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_alert_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_alert()) {
    _this->_impl_.item_alert_ = new ::CDOTAMsg_ItemAlert(*from._impl_.item_alert_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemAlert)
}

inline void CDOTAUserMsg_ItemAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_alert_){nullptr}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_ItemAlert::~CDOTAUserMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_alert_;
}

void CDOTAUserMsg_ItemAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.item_alert_ != nullptr);
      _impl_.item_alert_->Clear();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMsg_ItemAlert item_alert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_alert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ItemAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_ItemAlert item_alert = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item_alert(this),
        _Internal::item_alert(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemAlert)
  return target;
}

size_t CDOTAUserMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_ItemAlert item_alert = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_alert_);
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ItemAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ItemAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ItemAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ItemAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ItemAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ItemAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_item_alert()->::CDOTAMsg_ItemAlert::MergeFrom(
          from._internal_item_alert());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ItemAlert::CopyFrom(const CDOTAUserMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemAlert::InternalSwap(CDOTAUserMsg_ItemAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_alert_, other->_impl_.item_alert_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[15]);
}

// ===================================================================

class CDOTAUserMsg_EnemyItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_EnemyItemAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rune_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_primary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_EnemyItemAlert)
}
CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(const CDOTAUserMsg_EnemyItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_EnemyItemAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.secondary_charges_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.target_player_id_){}
    , decltype(_impl_.item_ability_id_){}
    , decltype(_impl_.rune_type_){}
    , decltype(_impl_.item_level_){}
    , decltype(_impl_.primary_charges_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primary_charges_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.primary_charges_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_EnemyItemAlert)
}

inline void CDOTAUserMsg_EnemyItemAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_id_){0}
    , decltype(_impl_.secondary_charges_){-1}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.target_player_id_){-1}
    , decltype(_impl_.item_ability_id_){-1}
    , decltype(_impl_.rune_type_){-1}
    , decltype(_impl_.item_level_){-1}
    , decltype(_impl_.primary_charges_){-1}
  };
}

CDOTAUserMsg_EnemyItemAlert::~CDOTAUserMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_EnemyItemAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_EnemyItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_EnemyItemAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_EnemyItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_EnemyItemAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.entity_id_ = 0;
    _impl_.secondary_charges_ = -1;
    _impl_.player_id_ = -1;
    _impl_.target_player_id_ = -1;
    _impl_.item_ability_id_ = -1;
    _impl_.rune_type_ = -1;
    _impl_.item_level_ = -1;
    _impl_.primary_charges_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_EnemyItemAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          _impl_.target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rune_type = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rune_type(&has_bits);
          _impl_.rune_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entity_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_entity_id(&has_bits);
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_level = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_item_level(&has_bits);
          _impl_.item_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 primary_charges = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_primary_charges(&has_bits);
          _impl_.primary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 secondary_charges = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_secondary_charges(&has_bits);
          _impl_.secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_EnemyItemAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_EnemyItemAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 target_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional int32 item_ability_id = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_ability_id(), target);
  }

  // optional int32 rune_type = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rune_type(), target);
  }

  // optional int32 entity_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_entity_id(), target);
  }

  // optional int32 item_level = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_item_level(), target);
  }

  // optional int32 primary_charges = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_primary_charges(), target);
  }

  // optional int32 secondary_charges = 8 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_secondary_charges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_EnemyItemAlert)
  return target;
}

size_t CDOTAUserMsg_EnemyItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_EnemyItemAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 entity_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_id());
    }

    // optional int32 secondary_charges = 8 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_secondary_charges());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 target_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_player_id());
    }

    // optional int32 item_ability_id = 3 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
    }

    // optional int32 rune_type = 4 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rune_type());
    }

    // optional int32 item_level = 6 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_level());
    }

    // optional int32 primary_charges = 7 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_primary_charges());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_EnemyItemAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_EnemyItemAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_EnemyItemAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_EnemyItemAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_EnemyItemAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_EnemyItemAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.entity_id_ = from._impl_.entity_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.secondary_charges_ = from._impl_.secondary_charges_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_player_id_ = from._impl_.target_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rune_type_ = from._impl_.rune_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.item_level_ = from._impl_.item_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.primary_charges_ = from._impl_.primary_charges_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_EnemyItemAlert::CopyFrom(const CDOTAUserMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EnemyItemAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_EnemyItemAlert::InternalSwap(CDOTAUserMsg_EnemyItemAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.entity_id_, other->_impl_.entity_id_);
  swap(_impl_.secondary_charges_, other->_impl_.secondary_charges_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.target_player_id_, other->_impl_.target_player_id_);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
  swap(_impl_.rune_type_, other->_impl_.rune_type_);
  swap(_impl_.item_level_, other->_impl_.item_level_);
  swap(_impl_.primary_charges_, other->_impl_.primary_charges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_EnemyItemAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[16]);
}

// ===================================================================

class CDOTAUserMsg_ModifierAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ModifierAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_debuff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ModifierAlert)
}
CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(const CDOTAUserMsg_ModifierAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ModifierAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_name_){}
    , decltype(_impl_.stack_count_){}
    , decltype(_impl_.is_debuff_){}
    , decltype(_impl_.seconds_remaining_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.target_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_class_name()) {
    _this->_impl_.class_name_.Set(from._internal_class_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stack_count_, &from._impl_.stack_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_entindex_) -
    reinterpret_cast<char*>(&_impl_.stack_count_)) + sizeof(_impl_.target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ModifierAlert)
}

inline void CDOTAUserMsg_ModifierAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_name_){}
    , decltype(_impl_.stack_count_){0u}
    , decltype(_impl_.is_debuff_){false}
    , decltype(_impl_.seconds_remaining_){0}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.target_entindex_){-1}
  };
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_ModifierAlert::~CDOTAUserMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ModifierAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ModifierAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_name_.Destroy();
}

void CDOTAUserMsg_ModifierAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ModifierAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ModifierAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.class_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.stack_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seconds_remaining_) -
        reinterpret_cast<char*>(&_impl_.stack_count_)) + sizeof(_impl_.seconds_remaining_));
    _impl_.player_id_ = -1;
    _impl_.target_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ModifierAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ModifierAlert.class_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stack_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stack_count(&has_bits);
          _impl_.stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_debuff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_debuff(&has_bits);
          _impl_.is_debuff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entindex = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_target_entindex(&has_bits);
          _impl_.target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float seconds_remaining = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          _impl_.seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ModifierAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ModifierAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string class_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ModifierAlert.class_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_name(), target);
  }

  // optional uint32 stack_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stack_count(), target);
  }

  // optional bool is_debuff = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_debuff(), target);
  }

  // optional int32 target_entindex = 5 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_entindex(), target);
  }

  // optional float seconds_remaining = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_seconds_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ModifierAlert)
  return target;
}

size_t CDOTAUserMsg_ModifierAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ModifierAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string class_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_class_name());
    }

    // optional uint32 stack_count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stack_count());
    }

    // optional bool is_debuff = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float seconds_remaining = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 target_entindex = 5 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ModifierAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ModifierAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ModifierAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ModifierAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ModifierAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ModifierAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stack_count_ = from._impl_.stack_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_debuff_ = from._impl_.is_debuff_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seconds_remaining_ = from._impl_.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_entindex_ = from._impl_.target_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ModifierAlert::CopyFrom(const CDOTAUserMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ModifierAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ModifierAlert::InternalSwap(CDOTAUserMsg_ModifierAlert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_name_, lhs_arena,
      &other->_impl_.class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, _impl_.seconds_remaining_)
      + sizeof(CDOTAUserMsg_ModifierAlert::_impl_.seconds_remaining_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, _impl_.stack_count_)>(
          reinterpret_cast<char*>(&_impl_.stack_count_),
          reinterpret_cast<char*>(&other->_impl_.stack_count_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.target_entindex_, other->_impl_.target_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ModifierAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[17]);
}

// ===================================================================

class CDOTAUserMsg_HPManaAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HPManaAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_show_raw_values(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HPManaAlert)
}
CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(const CDOTAUserMsg_HPManaAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HPManaAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_raw_values_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.target_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.show_raw_values_, &from._impl_.show_raw_values_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_entindex_) -
    reinterpret_cast<char*>(&_impl_.show_raw_values_)) + sizeof(_impl_.target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HPManaAlert)
}

inline void CDOTAUserMsg_HPManaAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_raw_values_){false}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.target_entindex_){-1}
  };
}

CDOTAUserMsg_HPManaAlert::~CDOTAUserMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HPManaAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HPManaAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_HPManaAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HPManaAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HPManaAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.show_raw_values_ = false;
    _impl_.player_id_ = -1;
    _impl_.target_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HPManaAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entindex = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          _impl_.target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_raw_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_show_raw_values(&has_bits);
          _impl_.show_raw_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HPManaAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HPManaAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 target_entindex = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  // optional bool show_raw_values = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_show_raw_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HPManaAlert)
  return target;
}

size_t CDOTAUserMsg_HPManaAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HPManaAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool show_raw_values = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 target_entindex = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HPManaAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HPManaAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HPManaAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HPManaAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HPManaAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HPManaAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.show_raw_values_ = from._impl_.show_raw_values_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_entindex_ = from._impl_.target_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HPManaAlert::CopyFrom(const CDOTAUserMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HPManaAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HPManaAlert::InternalSwap(CDOTAUserMsg_HPManaAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.show_raw_values_, other->_impl_.show_raw_values_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.target_entindex_, other->_impl_.target_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HPManaAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[18]);
}

// ===================================================================

class CDOTAUserMsg_NeutralCampAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_NeutralCampAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_spawner_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unit_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stack_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stack_intention(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_NeutralCampAlert::CDOTAUserMsg_NeutralCampAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_NeutralCampAlert)
}
CDOTAUserMsg_NeutralCampAlert::CDOTAUserMsg_NeutralCampAlert(const CDOTAUserMsg_NeutralCampAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_NeutralCampAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stack_count_){}
    , decltype(_impl_.camp_type_){}
    , decltype(_impl_.stack_request_){}
    , decltype(_impl_.stack_intention_){}
    , decltype(_impl_.unit_entindex_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.spawner_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stack_count_, &from._impl_.stack_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spawner_entindex_) -
    reinterpret_cast<char*>(&_impl_.stack_count_)) + sizeof(_impl_.spawner_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_NeutralCampAlert)
}

inline void CDOTAUserMsg_NeutralCampAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stack_count_){0}
    , decltype(_impl_.camp_type_){0}
    , decltype(_impl_.stack_request_){false}
    , decltype(_impl_.stack_intention_){false}
    , decltype(_impl_.unit_entindex_){-1}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.spawner_entindex_){-1}
  };
}

CDOTAUserMsg_NeutralCampAlert::~CDOTAUserMsg_NeutralCampAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_NeutralCampAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_NeutralCampAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_NeutralCampAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_NeutralCampAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_NeutralCampAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.stack_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stack_intention_) -
        reinterpret_cast<char*>(&_impl_.stack_count_)) + sizeof(_impl_.stack_intention_));
    _impl_.unit_entindex_ = -1;
    _impl_.player_id_ = -1;
    _impl_.spawner_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_NeutralCampAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 spawner_entindex = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_spawner_entindex(&has_bits);
          _impl_.spawner_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 unit_entindex = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unit_entindex(&has_bits);
          _impl_.unit_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stack_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_stack_count(&has_bits);
          _impl_.stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 camp_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_camp_type(&has_bits);
          _impl_.camp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stack_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_stack_request(&has_bits);
          _impl_.stack_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stack_intention = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stack_intention(&has_bits);
          _impl_.stack_intention_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_NeutralCampAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_NeutralCampAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 spawner_entindex = 2 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_spawner_entindex(), target);
  }

  // optional int32 unit_entindex = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_unit_entindex(), target);
  }

  // optional int32 stack_count = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stack_count(), target);
  }

  // optional int32 camp_type = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_camp_type(), target);
  }

  // optional bool stack_request = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_stack_request(), target);
  }

  // optional bool stack_intention = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_stack_intention(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_NeutralCampAlert)
  return target;
}

size_t CDOTAUserMsg_NeutralCampAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_NeutralCampAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 stack_count = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stack_count());
    }

    // optional int32 camp_type = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camp_type());
    }

    // optional bool stack_request = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool stack_intention = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 unit_entindex = 3 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit_entindex());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 spawner_entindex = 2 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spawner_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_NeutralCampAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_NeutralCampAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_NeutralCampAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_NeutralCampAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_NeutralCampAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_NeutralCampAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_NeutralCampAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stack_count_ = from._impl_.stack_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.camp_type_ = from._impl_.camp_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stack_request_ = from._impl_.stack_request_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.stack_intention_ = from._impl_.stack_intention_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.unit_entindex_ = from._impl_.unit_entindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.spawner_entindex_ = from._impl_.spawner_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_NeutralCampAlert::CopyFrom(const CDOTAUserMsg_NeutralCampAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_NeutralCampAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_NeutralCampAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_NeutralCampAlert::InternalSwap(CDOTAUserMsg_NeutralCampAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_NeutralCampAlert, _impl_.stack_intention_)
      + sizeof(CDOTAUserMsg_NeutralCampAlert::_impl_.stack_intention_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_NeutralCampAlert, _impl_.stack_count_)>(
          reinterpret_cast<char*>(&_impl_.stack_count_),
          reinterpret_cast<char*>(&other->_impl_.stack_count_));
  swap(_impl_.unit_entindex_, other->_impl_.unit_entindex_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.spawner_entindex_, other->_impl_.spawner_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_NeutralCampAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[19]);
}

// ===================================================================

class CDOTAUserMsg_GlyphAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GlyphAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GlyphAlert)
}
CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(const CDOTAUserMsg_GlyphAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_GlyphAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.negative_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.negative_, &from._impl_.negative_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.negative_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlyphAlert)
}

inline void CDOTAUserMsg_GlyphAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.negative_){false}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_GlyphAlert::~CDOTAUserMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlyphAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_GlyphAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_GlyphAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_GlyphAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GlyphAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.negative_ = false;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GlyphAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool negative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_negative(&has_bits);
          _impl_.negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_GlyphAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlyphAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional bool negative = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlyphAlert)
  return target;
}

size_t CDOTAUserMsg_GlyphAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GlyphAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool negative = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_GlyphAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_GlyphAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_GlyphAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_GlyphAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_GlyphAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_GlyphAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.negative_ = from._impl_.negative_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_GlyphAlert::CopyFrom(const CDOTAUserMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlyphAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlyphAlert::InternalSwap(CDOTAUserMsg_GlyphAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.negative_, other->_impl_.negative_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GlyphAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[20]);
}

// ===================================================================

class CDOTAUserMsg_RadarAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_RadarAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_RadarAlert::CDOTAUserMsg_RadarAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_RadarAlert)
}
CDOTAUserMsg_RadarAlert::CDOTAUserMsg_RadarAlert(const CDOTAUserMsg_RadarAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_RadarAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.negative_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.negative_, &from._impl_.negative_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.negative_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_RadarAlert)
}

inline void CDOTAUserMsg_RadarAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.negative_){false}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_RadarAlert::~CDOTAUserMsg_RadarAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_RadarAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_RadarAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_RadarAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_RadarAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_RadarAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.negative_ = false;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_RadarAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool negative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_negative(&has_bits);
          _impl_.negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_RadarAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_RadarAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional bool negative = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_RadarAlert)
  return target;
}

size_t CDOTAUserMsg_RadarAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_RadarAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool negative = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_RadarAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_RadarAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_RadarAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_RadarAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_RadarAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_RadarAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_RadarAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.negative_ = from._impl_.negative_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_RadarAlert::CopyFrom(const CDOTAUserMsg_RadarAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_RadarAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_RadarAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_RadarAlert::InternalSwap(CDOTAUserMsg_RadarAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.negative_, other->_impl_.negative_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_RadarAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[21]);
}

// ===================================================================

class CDOTAUserMsg_WillPurchaseAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WillPurchaseAlert>()._impl_._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gold_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suggestion_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WillPurchaseAlert)
}
CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(const CDOTAUserMsg_WillPurchaseAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_WillPurchaseAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_remaining_){}
    , decltype(_impl_.suggestion_player_id_){}
    , decltype(_impl_.item_ability_id_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_remaining_, &from._impl_.gold_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.gold_remaining_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WillPurchaseAlert)
}

inline void CDOTAUserMsg_WillPurchaseAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_remaining_){0u}
    , decltype(_impl_.suggestion_player_id_){-1}
    , decltype(_impl_.item_ability_id_){-1}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_WillPurchaseAlert::~CDOTAUserMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WillPurchaseAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_WillPurchaseAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_WillPurchaseAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WillPurchaseAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.gold_remaining_ = 0u;
    _impl_.suggestion_player_id_ = -1;
    _impl_.item_ability_id_ = -1;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WillPurchaseAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gold_remaining(&has_bits);
          _impl_.gold_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 suggestion_player_id = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_suggestion_player_id(&has_bits);
          _impl_.suggestion_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_WillPurchaseAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WillPurchaseAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional int32 player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional uint32 gold_remaining = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold_remaining(), target);
  }

  // optional int32 suggestion_player_id = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_suggestion_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WillPurchaseAlert)
  return target;
}

size_t CDOTAUserMsg_WillPurchaseAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WillPurchaseAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 gold_remaining = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_remaining());
    }

    // optional int32 suggestion_player_id = 4 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_suggestion_player_id());
    }

    // optional int32 item_ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
    }

    // optional int32 player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_WillPurchaseAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_WillPurchaseAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_WillPurchaseAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_WillPurchaseAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_WillPurchaseAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_WillPurchaseAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gold_remaining_ = from._impl_.gold_remaining_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.suggestion_player_id_ = from._impl_.suggestion_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_WillPurchaseAlert::CopyFrom(const CDOTAUserMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WillPurchaseAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WillPurchaseAlert::InternalSwap(CDOTAUserMsg_WillPurchaseAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gold_remaining_, other->_impl_.gold_remaining_);
  swap(_impl_.suggestion_player_id_, other->_impl_.suggestion_player_id_);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WillPurchaseAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[22]);
}

// ===================================================================

class CDOTAUserMsg_EmptyTeleportAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_EmptyTeleportAlert>()._impl_._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_EmptyTeleportAlert::CDOTAUserMsg_EmptyTeleportAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_EmptyTeleportAlert)
}
CDOTAUserMsg_EmptyTeleportAlert::CDOTAUserMsg_EmptyTeleportAlert(const CDOTAUserMsg_EmptyTeleportAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_EmptyTeleportAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_seconds_){}
    , decltype(_impl_.source_player_id_){}
    , decltype(_impl_.target_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cooldown_seconds_, &from._impl_.cooldown_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_player_id_) -
    reinterpret_cast<char*>(&_impl_.cooldown_seconds_)) + sizeof(_impl_.target_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_EmptyTeleportAlert)
}

inline void CDOTAUserMsg_EmptyTeleportAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_seconds_){0}
    , decltype(_impl_.source_player_id_){-1}
    , decltype(_impl_.target_player_id_){-1}
  };
}

CDOTAUserMsg_EmptyTeleportAlert::~CDOTAUserMsg_EmptyTeleportAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_EmptyTeleportAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_EmptyTeleportAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_EmptyTeleportAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_EmptyTeleportAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_EmptyTeleportAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.cooldown_seconds_ = 0;
    _impl_.source_player_id_ = -1;
    _impl_.target_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_EmptyTeleportAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          _impl_.source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          _impl_.target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cooldown_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cooldown_seconds(&has_bits);
          _impl_.cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_EmptyTeleportAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_EmptyTeleportAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 source_player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional int32 cooldown_seconds = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_cooldown_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_EmptyTeleportAlert)
  return target;
}

size_t CDOTAUserMsg_EmptyTeleportAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_EmptyTeleportAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 cooldown_seconds = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cooldown_seconds());
    }

    // optional int32 source_player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_EmptyTeleportAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_EmptyTeleportAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_EmptyTeleportAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_EmptyTeleportAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_EmptyTeleportAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_EmptyTeleportAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_EmptyTeleportAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cooldown_seconds_ = from._impl_.cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_player_id_ = from._impl_.source_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_player_id_ = from._impl_.target_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_EmptyTeleportAlert::CopyFrom(const CDOTAUserMsg_EmptyTeleportAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_EmptyTeleportAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EmptyTeleportAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_EmptyTeleportAlert::InternalSwap(CDOTAUserMsg_EmptyTeleportAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cooldown_seconds_, other->_impl_.cooldown_seconds_);
  swap(_impl_.source_player_id_, other->_impl_.source_player_id_);
  swap(_impl_.target_player_id_, other->_impl_.target_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_EmptyTeleportAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[23]);
}

// ===================================================================

class CDOTAUserMsg_MarsArenaOfBloodAttack::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MarsArenaOfBloodAttack>()._impl_._has_bits_);
  static void set_has_source_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_warrior_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MarsArenaOfBloodAttack::CDOTAUserMsg_MarsArenaOfBloodAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MarsArenaOfBloodAttack)
}
CDOTAUserMsg_MarsArenaOfBloodAttack::CDOTAUserMsg_MarsArenaOfBloodAttack(const CDOTAUserMsg_MarsArenaOfBloodAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MarsArenaOfBloodAttack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.warrior_index_){}
    , decltype(_impl_.source_ehandle_){}
    , decltype(_impl_.target_ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.warrior_index_, &from._impl_.warrior_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_ehandle_) -
    reinterpret_cast<char*>(&_impl_.warrior_index_)) + sizeof(_impl_.target_ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MarsArenaOfBloodAttack)
}

inline void CDOTAUserMsg_MarsArenaOfBloodAttack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.warrior_index_){0}
    , decltype(_impl_.source_ehandle_){16777215u}
    , decltype(_impl_.target_ehandle_){16777215u}
  };
}

CDOTAUserMsg_MarsArenaOfBloodAttack::~CDOTAUserMsg_MarsArenaOfBloodAttack() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MarsArenaOfBloodAttack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MarsArenaOfBloodAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.warrior_index_ = 0;
    _impl_.source_ehandle_ = 16777215u;
    _impl_.target_ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MarsArenaOfBloodAttack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_ehandle(&has_bits);
          _impl_.source_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_ehandle = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_ehandle(&has_bits);
          _impl_.target_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 warrior_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_warrior_index(&has_bits);
          _impl_.warrior_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MarsArenaOfBloodAttack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source_ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_ehandle(), target);
  }

  // optional uint32 target_ehandle = 2 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_ehandle(), target);
  }

  // optional int32 warrior_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_warrior_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MarsArenaOfBloodAttack)
  return target;
}

size_t CDOTAUserMsg_MarsArenaOfBloodAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 warrior_index = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warrior_index());
    }

    // optional uint32 source_ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_ehandle());
    }

    // optional uint32 target_ehandle = 2 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MarsArenaOfBloodAttack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MarsArenaOfBloodAttack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MarsArenaOfBloodAttack::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MarsArenaOfBloodAttack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MarsArenaOfBloodAttack*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MarsArenaOfBloodAttack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.warrior_index_ = from._impl_.warrior_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_ehandle_ = from._impl_.source_ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_ehandle_ = from._impl_.target_ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::CopyFrom(const CDOTAUserMsg_MarsArenaOfBloodAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MarsArenaOfBloodAttack::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::InternalSwap(CDOTAUserMsg_MarsArenaOfBloodAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.warrior_index_, other->_impl_.warrior_index_);
  swap(_impl_.source_ehandle_, other->_impl_.source_ehandle_);
  swap(_impl_.target_ehandle_, other->_impl_.target_ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MarsArenaOfBloodAttack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[24]);
}

// ===================================================================

class CDOTAEntityMsg_InvokerSpellCast::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAEntityMsg_InvokerSpellCast>()._impl_._has_bits_);
  static const ::CEntityMsg& entity_msg(const CDOTAEntityMsg_InvokerSpellCast* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cast_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CEntityMsg&
CDOTAEntityMsg_InvokerSpellCast::_Internal::entity_msg(const CDOTAEntityMsg_InvokerSpellCast* msg) {
  return *msg->_impl_.entity_msg_;
}
void CDOTAEntityMsg_InvokerSpellCast::clear_entity_msg() {
  if (_impl_.entity_msg_ != nullptr) _impl_.entity_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAEntityMsg_InvokerSpellCast::CDOTAEntityMsg_InvokerSpellCast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAEntityMsg_InvokerSpellCast)
}
CDOTAEntityMsg_InvokerSpellCast::CDOTAEntityMsg_InvokerSpellCast(const CDOTAEntityMsg_InvokerSpellCast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAEntityMsg_InvokerSpellCast* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_msg_){nullptr}
    , decltype(_impl_.cast_activity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_msg()) {
    _this->_impl_.entity_msg_ = new ::CEntityMsg(*from._impl_.entity_msg_);
  }
  _this->_impl_.cast_activity_ = from._impl_.cast_activity_;
  // @@protoc_insertion_point(copy_constructor:CDOTAEntityMsg_InvokerSpellCast)
}

inline void CDOTAEntityMsg_InvokerSpellCast::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_msg_){nullptr}
    , decltype(_impl_.cast_activity_){0}
  };
}

CDOTAEntityMsg_InvokerSpellCast::~CDOTAEntityMsg_InvokerSpellCast() {
  // @@protoc_insertion_point(destructor:CDOTAEntityMsg_InvokerSpellCast)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAEntityMsg_InvokerSpellCast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.entity_msg_;
}

void CDOTAEntityMsg_InvokerSpellCast::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAEntityMsg_InvokerSpellCast::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAEntityMsg_InvokerSpellCast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.entity_msg_ != nullptr);
    _impl_.entity_msg_->Clear();
  }
  _impl_.cast_activity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAEntityMsg_InvokerSpellCast::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEntityMsg entity_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cast_activity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cast_activity(&has_bits);
          _impl_.cast_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAEntityMsg_InvokerSpellCast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAEntityMsg_InvokerSpellCast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CEntityMsg entity_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entity_msg(this),
        _Internal::entity_msg(this).GetCachedSize(), target, stream);
  }

  // optional int32 cast_activity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cast_activity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAEntityMsg_InvokerSpellCast)
  return target;
}

size_t CDOTAEntityMsg_InvokerSpellCast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAEntityMsg_InvokerSpellCast)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CEntityMsg entity_msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entity_msg_);
    }

    // optional int32 cast_activity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cast_activity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAEntityMsg_InvokerSpellCast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAEntityMsg_InvokerSpellCast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAEntityMsg_InvokerSpellCast::GetClassData() const { return &_class_data_; }


void CDOTAEntityMsg_InvokerSpellCast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAEntityMsg_InvokerSpellCast*>(&to_msg);
  auto& from = static_cast<const CDOTAEntityMsg_InvokerSpellCast&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAEntityMsg_InvokerSpellCast)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(
          from._internal_entity_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cast_activity_ = from._impl_.cast_activity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAEntityMsg_InvokerSpellCast::CopyFrom(const CDOTAEntityMsg_InvokerSpellCast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAEntityMsg_InvokerSpellCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAEntityMsg_InvokerSpellCast::IsInitialized() const {
  return true;
}

void CDOTAEntityMsg_InvokerSpellCast::InternalSwap(CDOTAEntityMsg_InvokerSpellCast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAEntityMsg_InvokerSpellCast, _impl_.cast_activity_)
      + sizeof(CDOTAEntityMsg_InvokerSpellCast::_impl_.cast_activity_)
      - PROTOBUF_FIELD_OFFSET(CDOTAEntityMsg_InvokerSpellCast, _impl_.entity_msg_)>(
          reinterpret_cast<char*>(&_impl_.entity_msg_),
          reinterpret_cast<char*>(&other->_impl_.entity_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAEntityMsg_InvokerSpellCast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[25]);
}

// ===================================================================

class CDOTAUserMsg_BuyBackStateAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BuyBackStateAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BuyBackStateAlert)
}
CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(const CDOTAUserMsg_BuyBackStateAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_BuyBackStateAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BuyBackStateAlert)
}

inline void CDOTAUserMsg_BuyBackStateAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_BuyBackStateAlert::~CDOTAUserMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BuyBackStateAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_BuyBackStateAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_BuyBackStateAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BuyBackStateAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BuyBackStateAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_BuyBackStateAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BuyBackStateAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BuyBackStateAlert)
  return target;
}

size_t CDOTAUserMsg_BuyBackStateAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BuyBackStateAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 player_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_BuyBackStateAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_BuyBackStateAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_BuyBackStateAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_BuyBackStateAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_BuyBackStateAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_BuyBackStateAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_BuyBackStateAlert::CopyFrom(const CDOTAUserMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BuyBackStateAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BuyBackStateAlert::InternalSwap(CDOTAUserMsg_BuyBackStateAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BuyBackStateAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[26]);
}

// ===================================================================

class CDOTAUserMsg_QuickBuyAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_QuickBuyAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gold_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_buyback(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QuickBuyAlert)
}
CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(const CDOTAUserMsg_QuickBuyAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_QuickBuyAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_cost_){}
    , decltype(_impl_.item_cooldown_seconds_){}
    , decltype(_impl_.show_buyback_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_cost_, &from._impl_.gold_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_ability_id_) -
    reinterpret_cast<char*>(&_impl_.gold_cost_)) + sizeof(_impl_.item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QuickBuyAlert)
}

inline void CDOTAUserMsg_QuickBuyAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gold_cost_){0}
    , decltype(_impl_.item_cooldown_seconds_){0}
    , decltype(_impl_.show_buyback_){false}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.item_ability_id_){-1}
  };
}

CDOTAUserMsg_QuickBuyAlert::~CDOTAUserMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QuickBuyAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_QuickBuyAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_QuickBuyAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_QuickBuyAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QuickBuyAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.gold_cost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_buyback_) -
        reinterpret_cast<char*>(&_impl_.gold_cost_)) + sizeof(_impl_.show_buyback_));
    _impl_.player_id_ = -1;
    _impl_.item_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QuickBuyAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gold_cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gold_cost(&has_bits);
          _impl_.gold_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_cooldown_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_item_cooldown_seconds(&has_bits);
          _impl_.item_cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_buyback = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_show_buyback(&has_bits);
          _impl_.show_buyback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_QuickBuyAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QuickBuyAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 item_ability_id = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_ability_id(), target);
  }

  // optional int32 gold_cost = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold_cost(), target);
  }

  // optional int32 item_cooldown_seconds = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_item_cooldown_seconds(), target);
  }

  // optional bool show_buyback = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_show_buyback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QuickBuyAlert)
  return target;
}

size_t CDOTAUserMsg_QuickBuyAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QuickBuyAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 gold_cost = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gold_cost());
    }

    // optional int32 item_cooldown_seconds = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_cooldown_seconds());
    }

    // optional bool show_buyback = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 item_ability_id = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_QuickBuyAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_QuickBuyAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_QuickBuyAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_QuickBuyAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_QuickBuyAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_QuickBuyAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gold_cost_ = from._impl_.gold_cost_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_cooldown_seconds_ = from._impl_.item_cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.show_buyback_ = from._impl_.show_buyback_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_QuickBuyAlert::CopyFrom(const CDOTAUserMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QuickBuyAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_QuickBuyAlert::InternalSwap(CDOTAUserMsg_QuickBuyAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, _impl_.show_buyback_)
      + sizeof(CDOTAUserMsg_QuickBuyAlert::_impl_.show_buyback_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, _impl_.gold_cost_)>(
          reinterpret_cast<char*>(&_impl_.gold_cost_),
          reinterpret_cast<char*>(&other->_impl_.gold_cost_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QuickBuyAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[27]);
}

// ===================================================================

class CDOTAUserMsg_CourierKilledAlert_LostItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CourierKilledAlert_LostItem>()._impl_._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CourierKilledAlert.LostItem)
}
CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem(const CDOTAUserMsg_CourierKilledAlert_LostItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CourierKilledAlert_LostItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_ability_id_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CourierKilledAlert.LostItem)
}

inline void CDOTAUserMsg_CourierKilledAlert_LostItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quantity_){0u}
    , decltype(_impl_.item_ability_id_){-1}
  };
}

CDOTAUserMsg_CourierKilledAlert_LostItem::~CDOTAUserMsg_CourierKilledAlert_LostItem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CourierKilledAlert.LostItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CourierKilledAlert_LostItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.quantity_ = 0u;
    _impl_.item_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CourierKilledAlert_LostItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CourierKilledAlert_LostItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CourierKilledAlert.LostItem)
  return target;
}

size_t CDOTAUserMsg_CourierKilledAlert_LostItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional int32 item_ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CourierKilledAlert_LostItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CourierKilledAlert_LostItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CourierKilledAlert_LostItem::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CourierKilledAlert_LostItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CourierKilledAlert_LostItem*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CourierKilledAlert_LostItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::CopyFrom(const CDOTAUserMsg_CourierKilledAlert_LostItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CourierKilledAlert_LostItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::InternalSwap(CDOTAUserMsg_CourierKilledAlert_LostItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.quantity_, other->_impl_.quantity_);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CourierKilledAlert_LostItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[28]);
}

// ===================================================================

class CDOTAUserMsg_CourierKilledAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CourierKilledAlert>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gold_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_killer_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_owning_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CourierKilledAlert)
}
CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(const CDOTAUserMsg_CourierKilledAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CourierKilledAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lost_items_){from._impl_.lost_items_}
    , decltype(_impl_.team_){}
    , decltype(_impl_.gold_value_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.owning_player_id_){}
    , decltype(_impl_.entity_handle_){}
    , decltype(_impl_.killer_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.killer_player_id_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.killer_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CourierKilledAlert)
}

inline void CDOTAUserMsg_CourierKilledAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lost_items_){arena}
    , decltype(_impl_.team_){0u}
    , decltype(_impl_.gold_value_){0u}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.owning_player_id_){-1}
    , decltype(_impl_.entity_handle_){16777215u}
    , decltype(_impl_.killer_player_id_){-1}
  };
}

CDOTAUserMsg_CourierKilledAlert::~CDOTAUserMsg_CourierKilledAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CourierKilledAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CourierKilledAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lost_items_.~RepeatedPtrField();
}

void CDOTAUserMsg_CourierKilledAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CourierKilledAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CourierKilledAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lost_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.timestamp_));
    _impl_.owning_player_id_ = -1;
    _impl_.entity_handle_ = 16777215u;
    _impl_.killer_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CourierKilledAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gold_value(&has_bits);
          _impl_.gold_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_handle = 3 [default = 16777215];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lost_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 killer_player_id = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_killer_player_id(&has_bits);
          _impl_.killer_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 owning_player_id = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_owning_player_id(&has_bits);
          _impl_.owning_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CourierKilledAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CourierKilledAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional uint32 gold_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gold_value(), target);
  }

  // optional uint32 entity_handle = 3 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entity_handle(), target);
  }

  // optional int32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_timestamp(), target);
  }

  // repeated .CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lost_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_lost_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 killer_player_id = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_killer_player_id(), target);
  }

  // optional int32 owning_player_id = 7 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_owning_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CourierKilledAlert)
  return target;
}

size_t CDOTAUserMsg_CourierKilledAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CourierKilledAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
  total_size += 1UL * this->_internal_lost_items_size();
  for (const auto& msg : this->_impl_.lost_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

    // optional uint32 gold_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_value());
    }

    // optional int32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 owning_player_id = 7 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_owning_player_id());
    }

    // optional uint32 entity_handle = 3 [default = 16777215];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

    // optional int32 killer_player_id = 6 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_killer_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CourierKilledAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CourierKilledAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CourierKilledAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CourierKilledAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CourierKilledAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CourierKilledAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CourierKilledAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lost_items_.MergeFrom(from._impl_.lost_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gold_value_ = from._impl_.gold_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.owning_player_id_ = from._impl_.owning_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.killer_player_id_ = from._impl_.killer_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CourierKilledAlert::CopyFrom(const CDOTAUserMsg_CourierKilledAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CourierKilledAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CourierKilledAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CourierKilledAlert::InternalSwap(CDOTAUserMsg_CourierKilledAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lost_items_.InternalSwap(&other->_impl_.lost_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, _impl_.timestamp_)
      + sizeof(CDOTAUserMsg_CourierKilledAlert::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, _impl_.team_)>(
          reinterpret_cast<char*>(&_impl_.team_),
          reinterpret_cast<char*>(&other->_impl_.team_));
  swap(_impl_.owning_player_id_, other->_impl_.owning_player_id_);
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
  swap(_impl_.killer_player_id_, other->_impl_.killer_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CourierKilledAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[29]);
}

// ===================================================================

class CDOTAUserMsg_MinimapEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MinimapEvent>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MinimapEvent)
}
CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(const CDOTAUserMsg_MinimapEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MinimapEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.entity_handle_){}
    , decltype(_impl_.target_entity_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_type_, &from._impl_.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_entity_handle_) -
    reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.target_entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MinimapEvent)
}

inline void CDOTAUserMsg_MinimapEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.entity_handle_){16777215u}
    , decltype(_impl_.target_entity_handle_){16777215u}
  };
}

CDOTAUserMsg_MinimapEvent::~CDOTAUserMsg_MinimapEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MinimapEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MinimapEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_MinimapEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MinimapEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MinimapEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.duration_));
    _impl_.entity_handle_ = 16777215u;
    _impl_.target_entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MinimapEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_handle = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_entity_handle = 6 [default = 16777215];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_target_entity_handle(&has_bits);
          _impl_.target_entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MinimapEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MinimapEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  // optional uint32 entity_handle = 2 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_handle(), target);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // optional int32 duration = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_duration(), target);
  }

  // optional uint32 target_entity_handle = 6 [default = 16777215];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_entity_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MinimapEvent)
  return target;
}

size_t CDOTAUserMsg_MinimapEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MinimapEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 event_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());
    }

    // optional int32 x = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional int32 duration = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

    // optional uint32 entity_handle = 2 [default = 16777215];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

    // optional uint32 target_entity_handle = 6 [default = 16777215];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_entity_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MinimapEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MinimapEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MinimapEvent::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MinimapEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MinimapEvent*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MinimapEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MinimapEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_entity_handle_ = from._impl_.target_entity_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const CDOTAUserMsg_MinimapEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MinimapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MinimapEvent::InternalSwap(CDOTAUserMsg_MinimapEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _impl_.duration_)
      + sizeof(CDOTAUserMsg_MinimapEvent::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _impl_.event_type_)>(
          reinterpret_cast<char*>(&_impl_.event_type_),
          reinterpret_cast<char*>(&other->_impl_.event_type_));
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
  swap(_impl_.target_entity_handle_, other->_impl_.target_entity_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MinimapEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[30]);
}

// ===================================================================

class CDOTAUserMsg_MapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MapLine>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_MapLine& mapline(const CDOTAUserMsg_MapLine* msg);
  static void set_has_mapline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_MapLine&
CDOTAUserMsg_MapLine::_Internal::mapline(const CDOTAUserMsg_MapLine* msg) {
  return *msg->_impl_.mapline_;
}
void CDOTAUserMsg_MapLine::clear_mapline() {
  if (_impl_.mapline_ != nullptr) _impl_.mapline_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MapLine)
}
CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(const CDOTAUserMsg_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MapLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapline_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapline()) {
    _this->_impl_.mapline_ = new ::CDOTAMsg_MapLine(*from._impl_.mapline_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MapLine)
}

inline void CDOTAUserMsg_MapLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapline_){nullptr}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_MapLine::~CDOTAUserMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MapLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mapline_;
}

void CDOTAUserMsg_MapLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MapLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.mapline_ != nullptr);
      _impl_.mapline_->Clear();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MapLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMsg_MapLine mapline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MapLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MapLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_MapLine mapline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mapline(this),
        _Internal::mapline(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MapLine)
  return target;
}

size_t CDOTAUserMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MapLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_MapLine mapline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mapline_);
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MapLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MapLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MapLine::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MapLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MapLine*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MapLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(
          from._internal_mapline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MapLine::CopyFrom(const CDOTAUserMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MapLine::InternalSwap(CDOTAUserMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mapline_, other->_impl_.mapline_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MapLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[31]);
}

// ===================================================================

class CDOTAUserMsg_MinimapDebugPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MinimapDebugPoint>()._impl_._has_bits_);
  static const ::CMsgVector& location(const CDOTAUserMsg_MinimapDebugPoint* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_MinimapDebugPoint::_Internal::location(const CDOTAUserMsg_MinimapDebugPoint* msg) {
  return *msg->_impl_.location_;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MinimapDebugPoint)
}
CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(const CDOTAUserMsg_MinimapDebugPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MinimapDebugPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.color_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgVector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MinimapDebugPoint)
}

inline void CDOTAUserMsg_MinimapDebugPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.color_){0u}
    , decltype(_impl_.size_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.index_){0}
  };
}

CDOTAUserMsg_MinimapDebugPoint::~CDOTAUserMsg_MinimapDebugPoint() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MinimapDebugPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MinimapDebugPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CDOTAUserMsg_MinimapDebugPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MinimapDebugPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MinimapDebugPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MinimapDebugPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MinimapDebugPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MinimapDebugPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional uint32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  // optional int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  // optional int32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MinimapDebugPoint)
  return target;
}

size_t CDOTAUserMsg_MinimapDebugPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MinimapDebugPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional uint32 color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
    }

    // optional int32 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MinimapDebugPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MinimapDebugPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MinimapDebugPoint::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MinimapDebugPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MinimapDebugPoint*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MinimapDebugPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MinimapDebugPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::CMsgVector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MinimapDebugPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapDebugPoint::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MinimapDebugPoint::InternalSwap(CDOTAUserMsg_MinimapDebugPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _impl_.index_)
      + sizeof(CDOTAUserMsg_MinimapDebugPoint::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MinimapDebugPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[32]);
}

// ===================================================================

class CDOTAUserMsg_CreateLinearProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CreateLinearProjectile>()._impl_._has_bits_);
  static const ::CMsgVector& origin(const CDOTAUserMsg_CreateLinearProjectile* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector2D& velocity(const CDOTAUserMsg_CreateLinearProjectile* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_particle_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector2D& acceleration(const CDOTAUserMsg_CreateLinearProjectile* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fow_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sticky_fow_reveal(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_colorgemcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_CreateLinearProjectile::_Internal::origin(const CDOTAUserMsg_CreateLinearProjectile* msg) {
  return *msg->_impl_.origin_;
}
const ::CMsgVector2D&
CDOTAUserMsg_CreateLinearProjectile::_Internal::velocity(const CDOTAUserMsg_CreateLinearProjectile* msg) {
  return *msg->_impl_.velocity_;
}
const ::CMsgVector2D&
CDOTAUserMsg_CreateLinearProjectile::_Internal::acceleration(const CDOTAUserMsg_CreateLinearProjectile* msg) {
  return *msg->_impl_.acceleration_;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CreateLinearProjectile)
}
CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(const CDOTAUserMsg_CreateLinearProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CreateLinearProjectile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.particle_cp_data_){from._impl_.particle_cp_data_}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.particle_index_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.max_speed_){}
    , decltype(_impl_.fow_radius_){}
    , decltype(_impl_.sticky_fow_reveal_){}
    , decltype(_impl_.distance_){}
    , decltype(_impl_.colorgemcolor_){}
    , decltype(_impl_.entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::CMsgVector2D(*from._impl_.velocity_);
  }
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::CMsgVector2D(*from._impl_.acceleration_);
  }
  ::memcpy(&_impl_.particle_index_, &from._impl_.particle_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_) -
    reinterpret_cast<char*>(&_impl_.particle_index_)) + sizeof(_impl_.entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CreateLinearProjectile)
}

inline void CDOTAUserMsg_CreateLinearProjectile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.particle_cp_data_){arena}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.particle_index_){uint64_t{0u}}
    , decltype(_impl_.handle_){0}
    , decltype(_impl_.max_speed_){0}
    , decltype(_impl_.fow_radius_){0}
    , decltype(_impl_.sticky_fow_reveal_){false}
    , decltype(_impl_.distance_){0}
    , decltype(_impl_.colorgemcolor_){0u}
    , decltype(_impl_.entindex_){-1}
  };
}

CDOTAUserMsg_CreateLinearProjectile::~CDOTAUserMsg_CreateLinearProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CreateLinearProjectile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CreateLinearProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.particle_cp_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
}

void CDOTAUserMsg_CreateLinearProjectile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CreateLinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CreateLinearProjectile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.particle_cp_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.particle_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sticky_fow_reveal_) -
        reinterpret_cast<char*>(&_impl_.particle_index_)) + sizeof(_impl_.sticky_fow_reveal_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.colorgemcolor_) -
        reinterpret_cast<char*>(&_impl_.distance_)) + sizeof(_impl_.colorgemcolor_));
    _impl_.entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CreateLinearProjectile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector2D velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 particle_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_particle_index(&has_bits);
          _impl_.particle_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector2D acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float max_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_max_speed(&has_bits);
          _impl_.max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fow_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_fow_radius(&has_bits);
          _impl_.fow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool sticky_fow_reveal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_sticky_fow_reveal(&has_bits);
          _impl_.sticky_fow_reveal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 colorgemcolor = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_colorgemcolor(&has_bits);
          _impl_.colorgemcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_particle_cp_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CreateLinearProjectile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CreateLinearProjectile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector2D velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional int32 entindex = 4 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_entindex(), target);
  }

  // optional uint64 particle_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_particle_index(), target);
  }

  // optional int32 handle = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_handle(), target);
  }

  // optional .CMsgVector2D acceleration = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // optional float max_speed = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_max_speed(), target);
  }

  // optional float fow_radius = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_fow_radius(), target);
  }

  // optional bool sticky_fow_reveal = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_sticky_fow_reveal(), target);
  }

  // optional float distance = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_distance(), target);
  }

  // optional fixed32 colorgemcolor = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(12, this->_internal_colorgemcolor(), target);
  }

  // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_particle_cp_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_particle_cp_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CreateLinearProjectile)
  return target;
}

size_t CDOTAUserMsg_CreateLinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CreateLinearProjectile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 13;
  total_size += 1UL * this->_internal_particle_cp_data_size();
  for (const auto& msg : this->_impl_.particle_cp_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional .CMsgVector2D velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .CMsgVector2D acceleration = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acceleration_);
    }

    // optional uint64 particle_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_particle_index());
    }

    // optional int32 handle = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle());
    }

    // optional float max_speed = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float fow_radius = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool sticky_fow_reveal = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float distance = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorgemcolor = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 entindex = 4 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CreateLinearProjectile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CreateLinearProjectile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CreateLinearProjectile::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CreateLinearProjectile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CreateLinearProjectile*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CreateLinearProjectile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CreateLinearProjectile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.particle_cp_data_.MergeFrom(from._impl_.particle_cp_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::CMsgVector2D::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_acceleration()->::CMsgVector2D::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.particle_index_ = from._impl_.particle_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.max_speed_ = from._impl_.max_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fow_radius_ = from._impl_.fow_radius_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sticky_fow_reveal_ = from._impl_.sticky_fow_reveal_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.colorgemcolor_ = from._impl_.colorgemcolor_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CreateLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CreateLinearProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CreateLinearProjectile::InternalSwap(CDOTAUserMsg_CreateLinearProjectile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.particle_cp_data_.InternalSwap(&other->_impl_.particle_cp_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _impl_.colorgemcolor_)
      + sizeof(CDOTAUserMsg_CreateLinearProjectile::_impl_.colorgemcolor_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
  swap(_impl_.entindex_, other->_impl_.entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CreateLinearProjectile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[33]);
}

// ===================================================================

class CDOTAUserMsg_DestroyLinearProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DestroyLinearProjectile>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DestroyLinearProjectile)
}
CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(const CDOTAUserMsg_DestroyLinearProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DestroyLinearProjectile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.handle_ = from._impl_.handle_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DestroyLinearProjectile)
}

inline void CDOTAUserMsg_DestroyLinearProjectile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){0}
  };
}

CDOTAUserMsg_DestroyLinearProjectile::~CDOTAUserMsg_DestroyLinearProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DestroyLinearProjectile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DestroyLinearProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_DestroyLinearProjectile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DestroyLinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DestroyLinearProjectile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.handle_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DestroyLinearProjectile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DestroyLinearProjectile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DestroyLinearProjectile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DestroyLinearProjectile)
  return target;
}

size_t CDOTAUserMsg_DestroyLinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DestroyLinearProjectile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DestroyLinearProjectile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DestroyLinearProjectile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DestroyLinearProjectile::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DestroyLinearProjectile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DestroyLinearProjectile*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DestroyLinearProjectile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DestroyLinearProjectile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _this->_internal_set_handle(from._internal_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DestroyLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DestroyLinearProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DestroyLinearProjectile::InternalSwap(CDOTAUserMsg_DestroyLinearProjectile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.handle_, other->_impl_.handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DestroyLinearProjectile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[34]);
}

// ===================================================================

class CDOTAUserMsg_DodgeTrackingProjectiles::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DodgeTrackingProjectiles>()._impl_._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attacks_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DodgeTrackingProjectiles)
}
CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(const CDOTAUserMsg_DodgeTrackingProjectiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DodgeTrackingProjectiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attacks_only_){}
    , decltype(_impl_.entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attacks_only_, &from._impl_.attacks_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_) -
    reinterpret_cast<char*>(&_impl_.attacks_only_)) + sizeof(_impl_.entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DodgeTrackingProjectiles)
}

inline void CDOTAUserMsg_DodgeTrackingProjectiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attacks_only_){false}
    , decltype(_impl_.entindex_){-1}
  };
}

CDOTAUserMsg_DodgeTrackingProjectiles::~CDOTAUserMsg_DodgeTrackingProjectiles() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DodgeTrackingProjectiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DodgeTrackingProjectiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.attacks_only_ = false;
    _impl_.entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DodgeTrackingProjectiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 entindex = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool attacks_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attacks_only(&has_bits);
          _impl_.attacks_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DodgeTrackingProjectiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 entindex = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional bool attacks_only = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_attacks_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DodgeTrackingProjectiles)
  return target;
}

size_t CDOTAUserMsg_DodgeTrackingProjectiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  size_t total_size = 0;

  // required int32 entindex = 1 [default = -1];
  if (_internal_has_entindex()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool attacks_only = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DodgeTrackingProjectiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DodgeTrackingProjectiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DodgeTrackingProjectiles::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DodgeTrackingProjectiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DodgeTrackingProjectiles*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DodgeTrackingProjectiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.attacks_only_ = from._impl_.attacks_only_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::InternalSwap(CDOTAUserMsg_DodgeTrackingProjectiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attacks_only_, other->_impl_.attacks_only_);
  swap(_impl_.entindex_, other->_impl_.entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DodgeTrackingProjectiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[35]);
}

// ===================================================================

class CDOTAUserMsg_SpectatorPlayerClick::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SpectatorPlayerClick>()._impl_._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SpectatorPlayerClick)
}
CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(const CDOTAUserMsg_SpectatorPlayerClick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SpectatorPlayerClick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.target_index_){}
    , decltype(_impl_.entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.order_type_, &from._impl_.order_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_) -
    reinterpret_cast<char*>(&_impl_.order_type_)) + sizeof(_impl_.entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpectatorPlayerClick)
}

inline void CDOTAUserMsg_SpectatorPlayerClick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.target_index_){0}
    , decltype(_impl_.entindex_){-1}
  };
}

CDOTAUserMsg_SpectatorPlayerClick::~CDOTAUserMsg_SpectatorPlayerClick() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpectatorPlayerClick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SpectatorPlayerClick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_SpectatorPlayerClick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SpectatorPlayerClick::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SpectatorPlayerClick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.order_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_index_) -
        reinterpret_cast<char*>(&_impl_.order_type_)) + sizeof(_impl_.target_index_));
    _impl_.entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SpectatorPlayerClick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 entindex = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 order_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_order_type(&has_bits);
          _impl_.order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_index = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_target_index(&has_bits);
          _impl_.target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SpectatorPlayerClick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpectatorPlayerClick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 entindex = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_order_type(), target);
  }

  // optional int32 target_index = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpectatorPlayerClick)
  return target;
}

size_t CDOTAUserMsg_SpectatorPlayerClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SpectatorPlayerClick)
  size_t total_size = 0;

  // required int32 entindex = 1 [default = -1];
  if (_internal_has_entindex()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 order_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order_type());
    }

    // optional int32 target_index = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SpectatorPlayerClick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SpectatorPlayerClick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SpectatorPlayerClick::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SpectatorPlayerClick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SpectatorPlayerClick*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SpectatorPlayerClick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SpectatorPlayerClick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.order_type_ = from._impl_.order_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_index_ = from._impl_.target_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SpectatorPlayerClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerClick::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SpectatorPlayerClick::InternalSwap(CDOTAUserMsg_SpectatorPlayerClick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _impl_.target_index_)
      + sizeof(CDOTAUserMsg_SpectatorPlayerClick::_impl_.target_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _impl_.order_type_)>(
          reinterpret_cast<char*>(&_impl_.order_type_),
          reinterpret_cast<char*>(&other->_impl_.order_type_));
  swap(_impl_.entindex_, other->_impl_.entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SpectatorPlayerClick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[36]);
}

// ===================================================================

class CDOTAUserMsg_SpectatorPlayerUnitOrders::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SpectatorPlayerUnitOrders>()._impl_._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVector& position(const CDOTAUserMsg_SpectatorPlayerUnitOrders* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_SpectatorPlayerUnitOrders::_Internal::position(const CDOTAUserMsg_SpectatorPlayerUnitOrders* msg) {
  return *msg->_impl_.position_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
}
CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SpectatorPlayerUnitOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.units_){from._impl_.units_}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.target_index_){}
    , decltype(_impl_.queue_){}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.entindex_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  ::memcpy(&_impl_.order_type_, &from._impl_.order_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.order_type_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
}

inline void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.units_){arena}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.target_index_){0}
    , decltype(_impl_.queue_){false}
    , decltype(_impl_.sequence_number_){0}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.entindex_){-1}
    , decltype(_impl_.ability_id_){-1}
  };
}

CDOTAUserMsg_SpectatorPlayerUnitOrders::~CDOTAUserMsg_SpectatorPlayerUnitOrders() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.units_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.position_;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.units_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.order_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.order_type_)) + sizeof(_impl_.flags_));
    _impl_.entindex_ = -1;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SpectatorPlayerUnitOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 order_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_order_type(&has_bits);
          _impl_.order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_index = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_target_index(&has_bits);
          _impl_.target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool queue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_queue(&has_bits);
          _impl_.queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SpectatorPlayerUnitOrders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_order_type(), target);
  }

  // repeated int32 units = 3;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_units(i), target);
  }

  // optional int32 target_index = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_index(), target);
  }

  // optional int32 ability_id = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ability_id(), target);
  }

  // optional .CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional bool queue = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_queue(), target);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return target;
}

size_t CDOTAUserMsg_SpectatorPlayerUnitOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.units_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector position = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional int32 order_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order_type());
    }

    // optional int32 target_index = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_index());
    }

    // optional bool queue = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_number());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 entindex = 1 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
    }

    // optional int32 ability_id = 5 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SpectatorPlayerUnitOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SpectatorPlayerUnitOrders::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SpectatorPlayerUnitOrders*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SpectatorPlayerUnitOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.units_.MergeFrom(from._impl_.units_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.order_type_ = from._impl_.order_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_index_ = from._impl_.target_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.queue_ = from._impl_.queue_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::CopyFrom(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerUnitOrders::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::InternalSwap(CDOTAUserMsg_SpectatorPlayerUnitOrders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.units_.InternalSwap(&other->_impl_.units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.flags_)
      + sizeof(CDOTAUserMsg_SpectatorPlayerUnitOrders::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
  swap(_impl_.entindex_, other->_impl_.entindex_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SpectatorPlayerUnitOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[37]);
}

// ===================================================================

class CDOTAUserMsg_NevermoreRequiem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_NevermoreRequiem>()._impl_._has_bits_);
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& origin(const CDOTAUserMsg_NevermoreRequiem* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_NevermoreRequiem::_Internal::origin(const CDOTAUserMsg_NevermoreRequiem* msg) {
  return *msg->_impl_.origin_;
}
void CDOTAUserMsg_NevermoreRequiem::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_NevermoreRequiem)
}
CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(const CDOTAUserMsg_NevermoreRequiem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_NevermoreRequiem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.lines_){}
    , decltype(_impl_.reverse_){}
    , decltype(_impl_.entity_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  ::memcpy(&_impl_.lines_, &from._impl_.lines_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_handle_) -
    reinterpret_cast<char*>(&_impl_.lines_)) + sizeof(_impl_.entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_NevermoreRequiem)
}

inline void CDOTAUserMsg_NevermoreRequiem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.lines_){0}
    , decltype(_impl_.reverse_){false}
    , decltype(_impl_.entity_handle_){16777215u}
  };
}

CDOTAUserMsg_NevermoreRequiem::~CDOTAUserMsg_NevermoreRequiem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_NevermoreRequiem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_NevermoreRequiem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
}

void CDOTAUserMsg_NevermoreRequiem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_NevermoreRequiem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_NevermoreRequiem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.origin_ != nullptr);
    _impl_.origin_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.lines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reverse_) -
        reinterpret_cast<char*>(&_impl_.lines_)) + sizeof(_impl_.reverse_));
    _impl_.entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_NevermoreRequiem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 entity_handle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lines(&has_bits);
          _impl_.lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reverse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reverse(&has_bits);
          _impl_.reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_NevermoreRequiem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_NevermoreRequiem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 entity_handle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity_handle(), target);
  }

  // optional int32 lines = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lines(), target);
  }

  // optional .CMsgVector origin = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional bool reverse = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_reverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_NevermoreRequiem)
  return target;
}

size_t CDOTAUserMsg_NevermoreRequiem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_NevermoreRequiem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector origin = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional int32 lines = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lines());
    }

    // optional bool reverse = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 entity_handle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_NevermoreRequiem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_NevermoreRequiem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_NevermoreRequiem::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_NevermoreRequiem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_NevermoreRequiem*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_NevermoreRequiem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_NevermoreRequiem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lines_ = from._impl_.lines_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reverse_ = from._impl_.reverse_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_NevermoreRequiem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_NevermoreRequiem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_NevermoreRequiem::InternalSwap(CDOTAUserMsg_NevermoreRequiem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _impl_.reverse_)
      + sizeof(CDOTAUserMsg_NevermoreRequiem::_impl_.reverse_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_NevermoreRequiem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[38]);
}

// ===================================================================

class CDOTAUserMsg_InvalidCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_InvalidCommand>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_InvalidCommand)
}
CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(const CDOTAUserMsg_InvalidCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_InvalidCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.sequence_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_InvalidCommand)
}

inline void CDOTAUserMsg_InvalidCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.sequence_number_){0}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_InvalidCommand::~CDOTAUserMsg_InvalidCommand() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_InvalidCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_InvalidCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CDOTAUserMsg_InvalidCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_InvalidCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_InvalidCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.sequence_number_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_InvalidCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_InvalidCommand.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_InvalidCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_InvalidCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_InvalidCommand.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional int32 sequence_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_InvalidCommand)
  return target;
}

size_t CDOTAUserMsg_InvalidCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_InvalidCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 sequence_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_InvalidCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_InvalidCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_InvalidCommand::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_InvalidCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_InvalidCommand*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_InvalidCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_InvalidCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const CDOTAUserMsg_InvalidCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_InvalidCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_InvalidCommand::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_InvalidCommand::InternalSwap(CDOTAUserMsg_InvalidCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.sequence_number_, other->_impl_.sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_InvalidCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[39]);
}

// ===================================================================

class CDOTAUserMsg_HudError::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HudError>()._impl_._has_bits_);
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HudError)
}
CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(const CDOTAUserMsg_HudError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HudError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.sequence_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.order_id_, &from._impl_.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sequence_number_) -
    reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.sequence_number_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HudError)
}

inline void CDOTAUserMsg_HudError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){0}
    , decltype(_impl_.sequence_number_){0}
  };
}

CDOTAUserMsg_HudError::~CDOTAUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HudError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HudError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_HudError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HudError::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HudError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.order_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sequence_number_) -
        reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.sequence_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HudError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_order_id(&has_bits);
          _impl_.order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HudError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HudError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_order_id(), target);
  }

  // optional int32 sequence_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HudError)
  return target;
}

size_t CDOTAUserMsg_HudError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HudError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 order_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order_id());
    }

    // optional int32 sequence_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HudError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HudError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HudError::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HudError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HudError*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HudError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.order_id_ = from._impl_.order_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HudError::CopyFrom(const CDOTAUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HudError::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HudError::InternalSwap(CDOTAUserMsg_HudError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HudError, _impl_.sequence_number_)
      + sizeof(CDOTAUserMsg_HudError::_impl_.sequence_number_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HudError, _impl_.order_id_)>(
          reinterpret_cast<char*>(&_impl_.order_id_),
          reinterpret_cast<char*>(&other->_impl_.order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HudError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[40]);
}

// ===================================================================

class CDOTAUserMsg_SharedCooldown::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SharedCooldown>()._impl_._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SharedCooldown)
}
CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(const CDOTAUserMsg_SharedCooldown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SharedCooldown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cooldown_){}
    , decltype(_impl_.name_index_){}
    , decltype(_impl_.entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cooldown_, &from._impl_.cooldown_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entindex_) -
    reinterpret_cast<char*>(&_impl_.cooldown_)) + sizeof(_impl_.entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SharedCooldown)
}

inline void CDOTAUserMsg_SharedCooldown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cooldown_){0}
    , decltype(_impl_.name_index_){0}
    , decltype(_impl_.entindex_){-1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_SharedCooldown::~CDOTAUserMsg_SharedCooldown() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SharedCooldown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SharedCooldown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CDOTAUserMsg_SharedCooldown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SharedCooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SharedCooldown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.cooldown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.name_index_) -
        reinterpret_cast<char*>(&_impl_.cooldown_)) + sizeof(_impl_.name_index_));
    _impl_.entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SharedCooldown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entindex = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_SharedCooldown.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float cooldown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_cooldown(&has_bits);
          _impl_.cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 name_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_name_index(&has_bits);
          _impl_.name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SharedCooldown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SharedCooldown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entindex = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SharedCooldown.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional float cooldown = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_cooldown(), target);
  }

  // optional int32 name_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_name_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SharedCooldown)
  return target;
}

size_t CDOTAUserMsg_SharedCooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SharedCooldown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional float cooldown = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 name_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_name_index());
    }

    // optional int32 entindex = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SharedCooldown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SharedCooldown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SharedCooldown::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SharedCooldown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SharedCooldown*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SharedCooldown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SharedCooldown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cooldown_ = from._impl_.cooldown_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.name_index_ = from._impl_.name_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const CDOTAUserMsg_SharedCooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SharedCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SharedCooldown::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SharedCooldown::InternalSwap(CDOTAUserMsg_SharedCooldown* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _impl_.name_index_)
      + sizeof(CDOTAUserMsg_SharedCooldown::_impl_.name_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _impl_.cooldown_)>(
          reinterpret_cast<char*>(&_impl_.cooldown_),
          reinterpret_cast<char*>(&other->_impl_.cooldown_));
  swap(_impl_.entindex_, other->_impl_.entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SharedCooldown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[41]);
}

// ===================================================================

class CDOTAUserMsg_SetNextAutobuyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SetNextAutobuyItem>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SetNextAutobuyItem)
}
CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(const CDOTAUserMsg_SetNextAutobuyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SetNextAutobuyItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SetNextAutobuyItem)
}

inline void CDOTAUserMsg_SetNextAutobuyItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_SetNextAutobuyItem::~CDOTAUserMsg_SetNextAutobuyItem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SetNextAutobuyItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SetNextAutobuyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CDOTAUserMsg_SetNextAutobuyItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SetNextAutobuyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SetNextAutobuyItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SetNextAutobuyItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_SetNextAutobuyItem.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SetNextAutobuyItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SetNextAutobuyItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SetNextAutobuyItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SetNextAutobuyItem)
  return target;
}

size_t CDOTAUserMsg_SetNextAutobuyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SetNextAutobuyItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SetNextAutobuyItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SetNextAutobuyItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SetNextAutobuyItem::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SetNextAutobuyItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SetNextAutobuyItem*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SetNextAutobuyItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SetNextAutobuyItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SetNextAutobuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SetNextAutobuyItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SetNextAutobuyItem::InternalSwap(CDOTAUserMsg_SetNextAutobuyItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SetNextAutobuyItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[42]);
}

// ===================================================================

class CDOTAUserMsg_HalloweenDrops::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HalloweenDrops>()._impl_._has_bits_);
  static void set_has_prize_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HalloweenDrops)
}
CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(const CDOTAUserMsg_HalloweenDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HalloweenDrops* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_defs_){from._impl_.item_defs_}
    , decltype(_impl_.player_ids_){from._impl_.player_ids_}
    , decltype(_impl_.prize_list_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.prize_list_ = from._impl_.prize_list_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HalloweenDrops)
}

inline void CDOTAUserMsg_HalloweenDrops::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_defs_){arena}
    , decltype(_impl_.player_ids_){arena}
    , decltype(_impl_.prize_list_){0u}
  };
}

CDOTAUserMsg_HalloweenDrops::~CDOTAUserMsg_HalloweenDrops() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HalloweenDrops)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HalloweenDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_defs_.~RepeatedField();
  _impl_.player_ids_.~RepeatedField();
}

void CDOTAUserMsg_HalloweenDrops::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HalloweenDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HalloweenDrops)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_defs_.Clear();
  _impl_.player_ids_.Clear();
  _impl_.prize_list_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HalloweenDrops::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 item_defs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prize_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_prize_list(&has_bits);
          _impl_.prize_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HalloweenDrops::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HalloweenDrops)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_defs(i), target);
  }

  // repeated int32 player_ids = 2;
  for (int i = 0, n = this->_internal_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prize_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HalloweenDrops)
  return target;
}

size_t CDOTAUserMsg_HalloweenDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HalloweenDrops)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.item_defs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // repeated int32 player_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_ids_size());
    total_size += data_size;
  }

  // optional uint32 prize_list = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prize_list());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HalloweenDrops::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HalloweenDrops::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HalloweenDrops::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HalloweenDrops::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HalloweenDrops*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HalloweenDrops&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HalloweenDrops)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_defs_.MergeFrom(from._impl_.item_defs_);
  _this->_impl_.player_ids_.MergeFrom(from._impl_.player_ids_);
  if (from._internal_has_prize_list()) {
    _this->_internal_set_prize_list(from._internal_prize_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HalloweenDrops::CopyFrom(const CDOTAUserMsg_HalloweenDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HalloweenDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HalloweenDrops::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HalloweenDrops::InternalSwap(CDOTAUserMsg_HalloweenDrops* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_defs_.InternalSwap(&other->_impl_.item_defs_);
  _impl_.player_ids_.InternalSwap(&other->_impl_.player_ids_);
  swap(_impl_.prize_list_, other->_impl_.prize_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HalloweenDrops::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[43]);
}

// ===================================================================

class CDOTAUserMsg_PredictionResult_Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PredictionResult_Prediction>()._impl_._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_fails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PredictionResult.Prediction)
}
CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(const CDOTAUserMsg_PredictionResult_Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PredictionResult_Prediction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granted_item_defs_){from._impl_.granted_item_defs_}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.num_correct_){}
    , decltype(_impl_.num_fails_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_, &from._impl_.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PredictionResult.Prediction)
}

inline void CDOTAUserMsg_PredictionResult_Prediction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granted_item_defs_){arena}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.num_correct_){0u}
    , decltype(_impl_.num_fails_){0u}
    , decltype(_impl_.result_){1}
  };
}

CDOTAUserMsg_PredictionResult_Prediction::~CDOTAUserMsg_PredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PredictionResult.Prediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PredictionResult_Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.granted_item_defs_.~RepeatedField();
}

void CDOTAUserMsg_PredictionResult_Prediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PredictionResult_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PredictionResult.Prediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.granted_item_defs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_fails_) -
        reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.num_fails_));
    _impl_.result_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PredictionResult_Prediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_correct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_correct(&has_bits);
          _impl_.num_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_fails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_fails(&has_bits);
          _impl_.num_fails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CDOTAUserMsg_PredictionResult_Prediction_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 granted_item_defs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_granted_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_granted_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PredictionResult_Prediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PredictionResult.Prediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_fails(), target);
  }

  // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0, n = this->_internal_granted_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_granted_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PredictionResult.Prediction)
  return target;
}

size_t CDOTAUserMsg_PredictionResult_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PredictionResult.Prediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 granted_item_defs = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.granted_item_defs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_granted_item_defs_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional uint32 num_correct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_correct());
    }

    // optional uint32 num_fails = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_fails());
    }

    // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PredictionResult_Prediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PredictionResult_Prediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PredictionResult_Prediction::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PredictionResult_Prediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PredictionResult_Prediction*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PredictionResult_Prediction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.granted_item_defs_.MergeFrom(from._impl_.granted_item_defs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_correct_ = from._impl_.num_correct_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_fails_ = from._impl_.num_fails_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PredictionResult_Prediction::CopyFrom(const CDOTAUserMsg_PredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult_Prediction::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PredictionResult_Prediction::InternalSwap(CDOTAUserMsg_PredictionResult_Prediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.granted_item_defs_.InternalSwap(&other->_impl_.granted_item_defs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, _impl_.num_fails_)
      + sizeof(CDOTAUserMsg_PredictionResult_Prediction::_impl_.num_fails_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, _impl_.item_def_)>(
          reinterpret_cast<char*>(&_impl_.item_def_),
          reinterpret_cast<char*>(&other->_impl_.item_def_));
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PredictionResult_Prediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[44]);
}

// ===================================================================

class CDOTAUserMsg_PredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PredictionResult>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PredictionResult)
}
CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(const CDOTAUserMsg_PredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PredictionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predictions_){from._impl_.predictions_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.correct_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.correct_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.correct_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PredictionResult)
}

inline void CDOTAUserMsg_PredictionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predictions_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.correct_){false}
  };
}

CDOTAUserMsg_PredictionResult::~CDOTAUserMsg_PredictionResult() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PredictionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predictions_.~RepeatedPtrField();
}

void CDOTAUserMsg_PredictionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PredictionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predictions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.correct_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.correct_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PredictionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool correct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_correct(&has_bits);
          _impl_.correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PredictionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PredictionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_correct(), target);
  }

  // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predictions_size()); i < n; i++) {
    const auto& repfield = this->_internal_predictions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PredictionResult)
  return target;
}

size_t CDOTAUserMsg_PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PredictionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  total_size += 1UL * this->_internal_predictions_size();
  for (const auto& msg : this->_impl_.predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PredictionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PredictionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PredictionResult::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PredictionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PredictionResult*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PredictionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PredictionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.predictions_.MergeFrom(from._impl_.predictions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.correct_ = from._impl_.correct_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PredictionResult::CopyFrom(const CDOTAUserMsg_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PredictionResult::InternalSwap(CDOTAUserMsg_PredictionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.predictions_.InternalSwap(&other->_impl_.predictions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, _impl_.correct_)
      + sizeof(CDOTAUserMsg_PredictionResult::_impl_.correct_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PredictionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[45]);
}

// ===================================================================

class CDOTAResponseQuerySerialized_Fact::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAResponseQuerySerialized_Fact>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_val_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_stringtable_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val_int_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000022) ^ 0x00000022) != 0;
  }
};

CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAResponseQuerySerialized.Fact)
}
CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(const CDOTAResponseQuerySerialized_Fact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAResponseQuerySerialized_Fact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_string_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.val_numeric_){}
    , decltype(_impl_.val_stringtable_index_){}
    , decltype(_impl_.val_int_numeric_){}
    , decltype(_impl_.valtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_val_string()) {
    _this->_impl_.val_string_.Set(from._internal_val_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.valtype_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.valtype_));
  // @@protoc_insertion_point(copy_constructor:CDOTAResponseQuerySerialized.Fact)
}

inline void CDOTAResponseQuerySerialized_Fact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_string_){}
    , decltype(_impl_.key_){0}
    , decltype(_impl_.val_numeric_){0}
    , decltype(_impl_.val_stringtable_index_){0}
    , decltype(_impl_.val_int_numeric_){0}
    , decltype(_impl_.valtype_){1}
  };
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAResponseQuerySerialized_Fact::~CDOTAResponseQuerySerialized_Fact() {
  // @@protoc_insertion_point(destructor:CDOTAResponseQuerySerialized.Fact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAResponseQuerySerialized_Fact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_string_.Destroy();
}

void CDOTAResponseQuerySerialized_Fact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAResponseQuerySerialized_Fact::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAResponseQuerySerialized.Fact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.val_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.val_int_numeric_) -
        reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.val_int_numeric_));
    _impl_.valtype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAResponseQuerySerialized_Fact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(val))) {
            _internal_set_valtype(static_cast<::CDOTAResponseQuerySerialized_Fact_ValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float val_numeric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_val_numeric(&has_bits);
          _impl_.val_numeric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string val_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_val_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAResponseQuerySerialized.Fact.val_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 val_stringtable_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_val_stringtable_index(&has_bits);
          _impl_.val_stringtable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 val_int_numeric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_val_int_numeric(&has_bits);
          _impl_.val_int_numeric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAResponseQuerySerialized_Fact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAResponseQuerySerialized.Fact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_valtype(), target);
  }

  // optional float val_numeric = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_val_numeric(), target);
  }

  // optional string val_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val_string().data(), static_cast<int>(this->_internal_val_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAResponseQuerySerialized.Fact.val_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_val_string(), target);
  }

  // optional int32 val_stringtable_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_val_stringtable_index(), target);
  }

  // optional sint32 val_int_numeric = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_val_int_numeric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAResponseQuerySerialized.Fact)
  return target;
}

size_t CDOTAResponseQuerySerialized_Fact::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAResponseQuerySerialized.Fact)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required int32 key = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  if (_internal_has_valtype()) {
    // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_valtype());
  }

  return total_size;
}
size_t CDOTAResponseQuerySerialized_Fact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAResponseQuerySerialized.Fact)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000022) ^ 0x00000022) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());

    // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_valtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string val_string = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val_string());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional float val_numeric = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 val_stringtable_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val_stringtable_index());
    }

    // optional sint32 val_int_numeric = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_val_int_numeric());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAResponseQuerySerialized_Fact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAResponseQuerySerialized_Fact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAResponseQuerySerialized_Fact::GetClassData() const { return &_class_data_; }


void CDOTAResponseQuerySerialized_Fact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAResponseQuerySerialized_Fact*>(&to_msg);
  auto& from = static_cast<const CDOTAResponseQuerySerialized_Fact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAResponseQuerySerialized.Fact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_val_string(from._internal_val_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.val_numeric_ = from._impl_.val_numeric_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.val_stringtable_index_ = from._impl_.val_stringtable_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.val_int_numeric_ = from._impl_.val_int_numeric_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.valtype_ = from._impl_.valtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const CDOTAResponseQuerySerialized_Fact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAResponseQuerySerialized.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized_Fact::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAResponseQuerySerialized_Fact::InternalSwap(CDOTAResponseQuerySerialized_Fact* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.val_string_, lhs_arena,
      &other->_impl_.val_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _impl_.val_int_numeric_)
      + sizeof(CDOTAResponseQuerySerialized_Fact::_impl_.val_int_numeric_)
      - PROTOBUF_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
  swap(_impl_.valtype_, other->_impl_.valtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAResponseQuerySerialized_Fact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[46]);
}

// ===================================================================

class CDOTAResponseQuerySerialized::_Internal {
 public:
};

CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAResponseQuerySerialized)
}
CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(const CDOTAResponseQuerySerialized& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAResponseQuerySerialized* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.facts_){from._impl_.facts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAResponseQuerySerialized)
}

inline void CDOTAResponseQuerySerialized::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.facts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAResponseQuerySerialized::~CDOTAResponseQuerySerialized() {
  // @@protoc_insertion_point(destructor:CDOTAResponseQuerySerialized)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAResponseQuerySerialized::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.facts_.~RepeatedPtrField();
}

void CDOTAResponseQuerySerialized::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAResponseQuerySerialized::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAResponseQuerySerialized)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.facts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAResponseQuerySerialized::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAResponseQuerySerialized::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAResponseQuerySerialized)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_facts_size()); i < n; i++) {
    const auto& repfield = this->_internal_facts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAResponseQuerySerialized)
  return target;
}

size_t CDOTAResponseQuerySerialized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAResponseQuerySerialized)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  total_size += 1UL * this->_internal_facts_size();
  for (const auto& msg : this->_impl_.facts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAResponseQuerySerialized::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAResponseQuerySerialized::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAResponseQuerySerialized::GetClassData() const { return &_class_data_; }


void CDOTAResponseQuerySerialized::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAResponseQuerySerialized*>(&to_msg);
  auto& from = static_cast<const CDOTAResponseQuerySerialized&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAResponseQuerySerialized)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.facts_.MergeFrom(from._impl_.facts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAResponseQuerySerialized::CopyFrom(const CDOTAResponseQuerySerialized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAResponseQuerySerialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.facts_))
    return false;
  return true;
}

void CDOTAResponseQuerySerialized::InternalSwap(CDOTAResponseQuerySerialized* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.facts_.InternalSwap(&other->_impl_.facts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAResponseQuerySerialized::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[47]);
}

// ===================================================================

class CDOTASpeechMatchOnClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTASpeechMatchOnClient>()._impl_._has_bits_);
  static void set_has_speech_concept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recipient_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CDOTAResponseQuerySerialized& responsequery(const CDOTASpeechMatchOnClient* msg);
  static void set_has_responsequery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_randomseed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CDOTAResponseQuerySerialized&
CDOTASpeechMatchOnClient::_Internal::responsequery(const CDOTASpeechMatchOnClient* msg) {
  return *msg->_impl_.responsequery_;
}
CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTASpeechMatchOnClient)
}
CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(const CDOTASpeechMatchOnClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTASpeechMatchOnClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.responsequery_){nullptr}
    , decltype(_impl_.speech_concept_){}
    , decltype(_impl_.recipient_type_){}
    , decltype(_impl_.randomseed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responsequery()) {
    _this->_impl_.responsequery_ = new ::CDOTAResponseQuerySerialized(*from._impl_.responsequery_);
  }
  ::memcpy(&_impl_.speech_concept_, &from._impl_.speech_concept_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.randomseed_) -
    reinterpret_cast<char*>(&_impl_.speech_concept_)) + sizeof(_impl_.randomseed_));
  // @@protoc_insertion_point(copy_constructor:CDOTASpeechMatchOnClient)
}

inline void CDOTASpeechMatchOnClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.responsequery_){nullptr}
    , decltype(_impl_.speech_concept_){0}
    , decltype(_impl_.recipient_type_){0}
    , decltype(_impl_.randomseed_){0}
  };
}

CDOTASpeechMatchOnClient::~CDOTASpeechMatchOnClient() {
  // @@protoc_insertion_point(destructor:CDOTASpeechMatchOnClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTASpeechMatchOnClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.responsequery_;
}

void CDOTASpeechMatchOnClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTASpeechMatchOnClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTASpeechMatchOnClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.responsequery_ != nullptr);
    _impl_.responsequery_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.speech_concept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.randomseed_) -
        reinterpret_cast<char*>(&_impl_.speech_concept_)) + sizeof(_impl_.randomseed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTASpeechMatchOnClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 speech_concept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_speech_concept(&has_bits);
          _impl_.speech_concept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 recipient_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_recipient_type(&has_bits);
          _impl_.recipient_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAResponseQuerySerialized responsequery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_responsequery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 randomseed = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_randomseed(&has_bits);
          _impl_.randomseed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTASpeechMatchOnClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASpeechMatchOnClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 speech_concept = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_speech_concept(), target);
  }

  // optional int32 recipient_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_recipient_type(), target);
  }

  // optional .CDOTAResponseQuerySerialized responsequery = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::responsequery(this),
        _Internal::responsequery(this).GetCachedSize(), target, stream);
  }

  // optional sfixed32 randomseed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(4, this->_internal_randomseed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASpeechMatchOnClient)
  return target;
}

size_t CDOTASpeechMatchOnClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTASpeechMatchOnClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CDOTAResponseQuerySerialized responsequery = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responsequery_);
    }

    // optional int32 speech_concept = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speech_concept());
    }

    // optional int32 recipient_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipient_type());
    }

    // optional sfixed32 randomseed = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTASpeechMatchOnClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTASpeechMatchOnClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTASpeechMatchOnClient::GetClassData() const { return &_class_data_; }


void CDOTASpeechMatchOnClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTASpeechMatchOnClient*>(&to_msg);
  auto& from = static_cast<const CDOTASpeechMatchOnClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTASpeechMatchOnClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_responsequery()->::CDOTAResponseQuerySerialized::MergeFrom(
          from._internal_responsequery());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.speech_concept_ = from._impl_.speech_concept_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.recipient_type_ = from._impl_.recipient_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.randomseed_ = from._impl_.randomseed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTASpeechMatchOnClient::CopyFrom(const CDOTASpeechMatchOnClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTASpeechMatchOnClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASpeechMatchOnClient::IsInitialized() const {
  if (_internal_has_responsequery()) {
    if (!_impl_.responsequery_->IsInitialized()) return false;
  }
  return true;
}

void CDOTASpeechMatchOnClient::InternalSwap(CDOTASpeechMatchOnClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTASpeechMatchOnClient, _impl_.randomseed_)
      + sizeof(CDOTASpeechMatchOnClient::_impl_.randomseed_)
      - PROTOBUF_FIELD_OFFSET(CDOTASpeechMatchOnClient, _impl_.responsequery_)>(
          reinterpret_cast<char*>(&_impl_.responsequery_),
          reinterpret_cast<char*>(&other->_impl_.responsequery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTASpeechMatchOnClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[48]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent_Interval::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_Interval>()._impl_._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_UnitEvent_Interval::CDOTAUserMsg_UnitEvent_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.Interval)
}
CDOTAUserMsg_UnitEvent_Interval::CDOTAUserMsg_UnitEvent_Interval(const CDOTAUserMsg_UnitEvent_Interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent_Interval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){}
    , decltype(_impl_.range_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.range_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.Interval)
}

inline void CDOTAUserMsg_UnitEvent_Interval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){0}
    , decltype(_impl_.range_){0}
  };
}

CDOTAUserMsg_UnitEvent_Interval::~CDOTAUserMsg_UnitEvent_Interval() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.Interval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent_Interval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_UnitEvent_Interval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.Interval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_) -
        reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.range_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_Interval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_start(&has_bits);
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent_Interval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.Interval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_start(), target);
  }

  // optional float range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.Interval)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.Interval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent_Interval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent_Interval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent_Interval::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent_Interval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent_Interval*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent_Interval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.Interval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_ = from._impl_.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent_Interval::CopyFrom(const CDOTAUserMsg_UnitEvent_Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_Interval::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_Interval::InternalSwap(CDOTAUserMsg_UnitEvent_Interval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Interval, _impl_.range_)
      + sizeof(CDOTAUserMsg_UnitEvent_Interval::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Interval, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_Interval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[49]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent_Speech::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_Speech>()._impl_._has_bits_);
  static void set_has_speech_concept(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recipient_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_muteable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CDOTAUserMsg_UnitEvent_Interval& predelay(const CDOTAUserMsg_UnitEvent_Speech* msg);
  static void set_has_predelay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CDOTAUserMsg_UnitEvent_Interval&
CDOTAUserMsg_UnitEvent_Speech::_Internal::predelay(const CDOTAUserMsg_UnitEvent_Speech* msg) {
  return *msg->_impl_.predelay_;
}
CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.Speech)
}
CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(const CDOTAUserMsg_UnitEvent_Speech& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent_Speech* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}
    , decltype(_impl_.predelay_){nullptr}
    , decltype(_impl_.speech_concept_){}
    , decltype(_impl_.recipient_type_){}
    , decltype(_impl_.muteable_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response()) {
    _this->_impl_.response_.Set(from._internal_response(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_predelay()) {
    _this->_impl_.predelay_ = new ::CDOTAUserMsg_UnitEvent_Interval(*from._impl_.predelay_);
  }
  ::memcpy(&_impl_.speech_concept_, &from._impl_.speech_concept_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.speech_concept_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.Speech)
}

inline void CDOTAUserMsg_UnitEvent_Speech::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}
    , decltype(_impl_.predelay_){nullptr}
    , decltype(_impl_.speech_concept_){0}
    , decltype(_impl_.recipient_type_){0}
    , decltype(_impl_.muteable_){false}
    , decltype(_impl_.flags_){0u}
  };
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_UnitEvent_Speech::~CDOTAUserMsg_UnitEvent_Speech() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.Speech)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent_Speech::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_.Destroy();
  if (this != internal_default_instance()) delete _impl_.predelay_;
}

void CDOTAUserMsg_UnitEvent_Speech::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_Speech::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.Speech)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.response_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.predelay_ != nullptr);
      _impl_.predelay_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.speech_concept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.speech_concept_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_Speech::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 speech_concept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_speech_concept(&has_bits);
          _impl_.speech_concept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_UnitEvent.Speech.response");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 recipient_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_recipient_type(&has_bits);
          _impl_.recipient_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool muteable = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_muteable(&has_bits);
          _impl_.muteable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.Interval predelay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_predelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent_Speech::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.Speech)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 speech_concept = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_speech_concept(), target);
  }

  // optional string response = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_UnitEvent.Speech.response");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response(), target);
  }

  // optional int32 recipient_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_recipient_type(), target);
  }

  // optional bool muteable = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_muteable(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.Interval predelay = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::predelay(this),
        _Internal::predelay(this).GetCachedSize(), target, stream);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.Speech)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_Speech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.Speech)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string response = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response());
    }

    // optional .CDOTAUserMsg_UnitEvent.Interval predelay = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.predelay_);
    }

    // optional int32 speech_concept = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speech_concept());
    }

    // optional int32 recipient_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipient_type());
    }

    // optional bool muteable = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent_Speech::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent_Speech::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent_Speech::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent_Speech::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent_Speech*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent_Speech&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.Speech)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_response(from._internal_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_predelay()->::CDOTAUserMsg_UnitEvent_Interval::MergeFrom(
          from._internal_predelay());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.speech_concept_ = from._impl_.speech_concept_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.recipient_type_ = from._impl_.recipient_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.muteable_ = from._impl_.muteable_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.Speech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_Speech::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_Speech::InternalSwap(CDOTAUserMsg_UnitEvent_Speech* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_, lhs_arena,
      &other->_impl_.response_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _impl_.flags_)
      + sizeof(CDOTAUserMsg_UnitEvent_Speech::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _impl_.predelay_)>(
          reinterpret_cast<char*>(&_impl_.predelay_),
          reinterpret_cast<char*>(&other->_impl_.predelay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_Speech::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[50]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent_SpeechMute::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_SpeechMute>()._impl_._has_bits_);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.SpeechMute)
}
CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(const CDOTAUserMsg_UnitEvent_SpeechMute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent_SpeechMute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.delay_ = from._impl_.delay_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.SpeechMute)
}

inline void CDOTAUserMsg_UnitEvent_SpeechMute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delay_){0.5f}
  };
}

CDOTAUserMsg_UnitEvent_SpeechMute::~CDOTAUserMsg_UnitEvent_SpeechMute() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.SpeechMute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent_SpeechMute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delay_ = 0.5f;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_SpeechMute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float delay = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_delay(&has_bits);
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent_SpeechMute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float delay = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.SpeechMute)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_SpeechMute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float delay = 1 [default = 0.5];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent_SpeechMute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent_SpeechMute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent_SpeechMute::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent_SpeechMute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent_SpeechMute*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent_SpeechMute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_delay()) {
    _this->_internal_set_delay(from._internal_delay());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::InternalSwap(CDOTAUserMsg_UnitEvent_SpeechMute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.delay_, other->_impl_.delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_SpeechMute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[51]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent_AddGesture::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_AddGesture>()._impl_._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fade_in(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fade_out(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sequence_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.AddGesture)
}
CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(const CDOTAUserMsg_UnitEvent_AddGesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent_AddGesture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.fade_in_){}
    , decltype(_impl_.sequence_variant_){}
    , decltype(_impl_.fade_out_){}
    , decltype(_impl_.playback_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.activity_, &from._impl_.activity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playback_rate_) -
    reinterpret_cast<char*>(&_impl_.activity_)) + sizeof(_impl_.playback_rate_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.AddGesture)
}

inline void CDOTAUserMsg_UnitEvent_AddGesture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){0}
    , decltype(_impl_.slot_){0}
    , decltype(_impl_.fade_in_){0}
    , decltype(_impl_.sequence_variant_){0}
    , decltype(_impl_.fade_out_){0.1f}
    , decltype(_impl_.playback_rate_){1}
  };
}

CDOTAUserMsg_UnitEvent_AddGesture::~CDOTAUserMsg_UnitEvent_AddGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.AddGesture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent_AddGesture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_UnitEvent_AddGesture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_AddGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.AddGesture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sequence_variant_) -
        reinterpret_cast<char*>(&_impl_.activity_)) + sizeof(_impl_.sequence_variant_));
    _impl_.fade_out_ = 0.1f;
    _impl_.playback_rate_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_AddGesture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          _impl_.activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_in = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_fade_in(&has_bits);
          _impl_.fade_in_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_out = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_fade_out(&has_bits);
          _impl_.fade_out_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float playback_rate = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_playback_rate(&has_bits);
          _impl_.playback_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_variant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sequence_variant(&has_bits);
          _impl_.sequence_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent_AddGesture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.AddGesture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_activity(), target);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional float fade_in = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_fade_in(), target);
  }

  // optional float fade_out = 4 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_fade_out(), target);
  }

  // optional float playback_rate = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_playback_rate(), target);
  }

  // optional int32 sequence_variant = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_sequence_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.AddGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_AddGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.AddGesture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 activity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activity());
    }

    // optional int32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
    }

    // optional float fade_in = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 sequence_variant = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_variant());
    }

    // optional float fade_out = 4 [default = 0.1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float playback_rate = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent_AddGesture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent_AddGesture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent_AddGesture::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent_AddGesture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent_AddGesture*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent_AddGesture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.AddGesture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.activity_ = from._impl_.activity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fade_in_ = from._impl_.fade_in_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_variant_ = from._impl_.sequence_variant_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fade_out_ = from._impl_.fade_out_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.playback_rate_ = from._impl_.playback_rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.AddGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_AddGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_AddGesture::InternalSwap(CDOTAUserMsg_UnitEvent_AddGesture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _impl_.sequence_variant_)
      + sizeof(CDOTAUserMsg_UnitEvent_AddGesture::_impl_.sequence_variant_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _impl_.activity_)>(
          reinterpret_cast<char*>(&_impl_.activity_),
          reinterpret_cast<char*>(&other->_impl_.activity_));
  swap(_impl_.fade_out_, other->_impl_.fade_out_);
  swap(_impl_.playback_rate_, other->_impl_.playback_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_AddGesture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[52]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent_RemoveGesture::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_RemoveGesture>()._impl_._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
}
CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(const CDOTAUserMsg_UnitEvent_RemoveGesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent_RemoveGesture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.activity_ = from._impl_.activity_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
}

inline void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){0}
  };
}

CDOTAUserMsg_UnitEvent_RemoveGesture::~CDOTAUserMsg_UnitEvent_RemoveGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_RemoveGesture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          _impl_.activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent_RemoveGesture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_activity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.RemoveGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_RemoveGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 activity = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent_RemoveGesture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent_RemoveGesture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent_RemoveGesture::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent_RemoveGesture*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent_RemoveGesture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activity()) {
    _this->_internal_set_activity(from._internal_activity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::InternalSwap(CDOTAUserMsg_UnitEvent_RemoveGesture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.activity_, other->_impl_.activity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_RemoveGesture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[53]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent_BloodImpact::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_BloodImpact>()._impl_._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.BloodImpact)
}
CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(const CDOTAUserMsg_UnitEvent_BloodImpact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent_BloodImpact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.x_normal_){}
    , decltype(_impl_.y_normal_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scale_, &from._impl_.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_normal_) -
    reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.y_normal_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.BloodImpact)
}

inline void CDOTAUserMsg_UnitEvent_BloodImpact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.x_normal_){0}
    , decltype(_impl_.y_normal_){0}
  };
}

CDOTAUserMsg_UnitEvent_BloodImpact::~CDOTAUserMsg_UnitEvent_BloodImpact() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.BloodImpact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent_BloodImpact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_normal_) -
        reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.y_normal_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_BloodImpact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x_normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x_normal(&has_bits);
          _impl_.x_normal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y_normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_y_normal(&has_bits);
          _impl_.y_normal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent_BloodImpact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_scale(), target);
  }

  // optional int32 x_normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_normal(), target);
  }

  // optional int32 y_normal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_normal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.BloodImpact)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_BloodImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 scale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scale());
    }

    // optional int32 x_normal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_normal());
    }

    // optional int32 y_normal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_normal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent_BloodImpact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent_BloodImpact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent_BloodImpact::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent_BloodImpact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent_BloodImpact*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent_BloodImpact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_normal_ = from._impl_.x_normal_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_normal_ = from._impl_.y_normal_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::InternalSwap(CDOTAUserMsg_UnitEvent_BloodImpact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _impl_.y_normal_)
      + sizeof(CDOTAUserMsg_UnitEvent_BloodImpact::_impl_.y_normal_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _impl_.scale_)>(
          reinterpret_cast<char*>(&_impl_.scale_),
          reinterpret_cast<char*>(&other->_impl_.scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_BloodImpact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[54]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent_FadeGesture::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_FadeGesture>()._impl_._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.FadeGesture)
}
CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(const CDOTAUserMsg_UnitEvent_FadeGesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent_FadeGesture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.activity_ = from._impl_.activity_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.FadeGesture)
}

inline void CDOTAUserMsg_UnitEvent_FadeGesture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){0}
  };
}

CDOTAUserMsg_UnitEvent_FadeGesture::~CDOTAUserMsg_UnitEvent_FadeGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.FadeGesture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent_FadeGesture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_FadeGesture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          _impl_.activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent_FadeGesture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_activity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.FadeGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_FadeGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 activity = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent_FadeGesture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent_FadeGesture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent_FadeGesture::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent_FadeGesture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent_FadeGesture*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent_FadeGesture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activity()) {
    _this->_internal_set_activity(from._internal_activity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::InternalSwap(CDOTAUserMsg_UnitEvent_FadeGesture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.activity_, other->_impl_.activity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_FadeGesture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[55]);
}

// ===================================================================

class CDOTAUserMsg_UnitEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent>()._impl_._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CDOTAUserMsg_UnitEvent_Speech& speech(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_speech(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CDOTAUserMsg_UnitEvent_SpeechMute& speech_mute(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_speech_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAUserMsg_UnitEvent_AddGesture& add_gesture(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_add_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CDOTAUserMsg_UnitEvent_RemoveGesture& remove_gesture(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_remove_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CDOTAUserMsg_UnitEvent_BloodImpact& blood_impact(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_blood_impact(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CDOTAUserMsg_UnitEvent_FadeGesture& fade_gesture(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_fade_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CDOTASpeechMatchOnClient& speech_match_on_client(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_speech_match_on_client(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000180) ^ 0x00000180) != 0;
  }
};

const ::CDOTAUserMsg_UnitEvent_Speech&
CDOTAUserMsg_UnitEvent::_Internal::speech(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->_impl_.speech_;
}
const ::CDOTAUserMsg_UnitEvent_SpeechMute&
CDOTAUserMsg_UnitEvent::_Internal::speech_mute(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->_impl_.speech_mute_;
}
const ::CDOTAUserMsg_UnitEvent_AddGesture&
CDOTAUserMsg_UnitEvent::_Internal::add_gesture(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->_impl_.add_gesture_;
}
const ::CDOTAUserMsg_UnitEvent_RemoveGesture&
CDOTAUserMsg_UnitEvent::_Internal::remove_gesture(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->_impl_.remove_gesture_;
}
const ::CDOTAUserMsg_UnitEvent_BloodImpact&
CDOTAUserMsg_UnitEvent::_Internal::blood_impact(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->_impl_.blood_impact_;
}
const ::CDOTAUserMsg_UnitEvent_FadeGesture&
CDOTAUserMsg_UnitEvent::_Internal::fade_gesture(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->_impl_.fade_gesture_;
}
const ::CDOTASpeechMatchOnClient&
CDOTAUserMsg_UnitEvent::_Internal::speech_match_on_client(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->_impl_.speech_match_on_client_;
}
CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent)
}
CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(const CDOTAUserMsg_UnitEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UnitEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speech_){nullptr}
    , decltype(_impl_.speech_mute_){nullptr}
    , decltype(_impl_.add_gesture_){nullptr}
    , decltype(_impl_.remove_gesture_){nullptr}
    , decltype(_impl_.blood_impact_){nullptr}
    , decltype(_impl_.fade_gesture_){nullptr}
    , decltype(_impl_.speech_match_on_client_){nullptr}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.entity_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_speech()) {
    _this->_impl_.speech_ = new ::CDOTAUserMsg_UnitEvent_Speech(*from._impl_.speech_);
  }
  if (from._internal_has_speech_mute()) {
    _this->_impl_.speech_mute_ = new ::CDOTAUserMsg_UnitEvent_SpeechMute(*from._impl_.speech_mute_);
  }
  if (from._internal_has_add_gesture()) {
    _this->_impl_.add_gesture_ = new ::CDOTAUserMsg_UnitEvent_AddGesture(*from._impl_.add_gesture_);
  }
  if (from._internal_has_remove_gesture()) {
    _this->_impl_.remove_gesture_ = new ::CDOTAUserMsg_UnitEvent_RemoveGesture(*from._impl_.remove_gesture_);
  }
  if (from._internal_has_blood_impact()) {
    _this->_impl_.blood_impact_ = new ::CDOTAUserMsg_UnitEvent_BloodImpact(*from._impl_.blood_impact_);
  }
  if (from._internal_has_fade_gesture()) {
    _this->_impl_.fade_gesture_ = new ::CDOTAUserMsg_UnitEvent_FadeGesture(*from._impl_.fade_gesture_);
  }
  if (from._internal_has_speech_match_on_client()) {
    _this->_impl_.speech_match_on_client_ = new ::CDOTASpeechMatchOnClient(*from._impl_.speech_match_on_client_);
  }
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_index_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.entity_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent)
}

inline void CDOTAUserMsg_UnitEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speech_){nullptr}
    , decltype(_impl_.speech_mute_){nullptr}
    , decltype(_impl_.add_gesture_){nullptr}
    , decltype(_impl_.remove_gesture_){nullptr}
    , decltype(_impl_.blood_impact_){nullptr}
    , decltype(_impl_.fade_gesture_){nullptr}
    , decltype(_impl_.speech_match_on_client_){nullptr}
    , decltype(_impl_.msg_type_){0}
    , decltype(_impl_.entity_index_){0}
  };
}

CDOTAUserMsg_UnitEvent::~CDOTAUserMsg_UnitEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UnitEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.speech_;
  if (this != internal_default_instance()) delete _impl_.speech_mute_;
  if (this != internal_default_instance()) delete _impl_.add_gesture_;
  if (this != internal_default_instance()) delete _impl_.remove_gesture_;
  if (this != internal_default_instance()) delete _impl_.blood_impact_;
  if (this != internal_default_instance()) delete _impl_.fade_gesture_;
  if (this != internal_default_instance()) delete _impl_.speech_match_on_client_;
}

void CDOTAUserMsg_UnitEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.speech_ != nullptr);
      _impl_.speech_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.speech_mute_ != nullptr);
      _impl_.speech_mute_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.add_gesture_ != nullptr);
      _impl_.add_gesture_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.remove_gesture_ != nullptr);
      _impl_.remove_gesture_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.blood_impact_ != nullptr);
      _impl_.blood_impact_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.fade_gesture_ != nullptr);
      _impl_.fade_gesture_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.speech_match_on_client_ != nullptr);
      _impl_.speech_match_on_client_->Clear();
    }
  }
  _impl_.msg_type_ = 0;
  _impl_.entity_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDotaEntityMessages_IsValid(val))) {
            _internal_set_msg_type(static_cast<::EDotaEntityMessages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required int32 entity_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entity_index(&has_bits);
          _impl_.entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_mute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_gesture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_gesture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_blood_impact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fade_gesture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_match_on_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UnitEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // required int32 entity_index = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entity_index(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::speech(this),
        _Internal::speech(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::speech_mute(this),
        _Internal::speech_mute(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::add_gesture(this),
        _Internal::add_gesture(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::remove_gesture(this),
        _Internal::remove_gesture(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::blood_impact(this),
        _Internal::blood_impact(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fade_gesture(this),
        _Internal::fade_gesture(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::speech_match_on_client(this),
        _Internal::speech_match_on_client(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent)
  return target;
}

size_t CDOTAUserMsg_UnitEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAUserMsg_UnitEvent)
  size_t total_size = 0;

  if (_internal_has_msg_type()) {
    // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  if (_internal_has_entity_index()) {
    // required int32 entity_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_index());
  }

  return total_size;
}
size_t CDOTAUserMsg_UnitEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000180) ^ 0x00000180) == 0) {  // All required fields are present.
    // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());

    // required int32 entity_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.speech_);
    }

    // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.speech_mute_);
    }

    // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.add_gesture_);
    }

    // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.remove_gesture_);
    }

    // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.blood_impact_);
    }

    // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fade_gesture_);
    }

    // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.speech_match_on_client_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UnitEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UnitEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UnitEvent::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UnitEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UnitEvent*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UnitEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_speech()->::CDOTAUserMsg_UnitEvent_Speech::MergeFrom(
          from._internal_speech());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_speech_mute()->::CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(
          from._internal_speech_mute());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_add_gesture()->::CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(
          from._internal_add_gesture());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_remove_gesture()->::CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(
          from._internal_remove_gesture());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_blood_impact()->::CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(
          from._internal_blood_impact());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_fade_gesture()->::CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(
          from._internal_fade_gesture());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_speech_match_on_client()->::CDOTASpeechMatchOnClient::MergeFrom(
          from._internal_speech_match_on_client());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.msg_type_ = from._impl_.msg_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_entity_index(from._internal_entity_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const CDOTAUserMsg_UnitEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_speech_match_on_client()) {
    if (!_impl_.speech_match_on_client_->IsInitialized()) return false;
  }
  return true;
}

void CDOTAUserMsg_UnitEvent::InternalSwap(CDOTAUserMsg_UnitEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _impl_.entity_index_)
      + sizeof(CDOTAUserMsg_UnitEvent::_impl_.entity_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _impl_.speech_)>(
          reinterpret_cast<char*>(&_impl_.speech_),
          reinterpret_cast<char*>(&other->_impl_.speech_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[56]);
}

// ===================================================================

class CDOTAUserMsg_ItemPurchased::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemPurchased>()._impl_._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemPurchased)
}
CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(const CDOTAUserMsg_ItemPurchased& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ItemPurchased* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemPurchased)
}

inline void CDOTAUserMsg_ItemPurchased::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ability_id_){-1}
  };
}

CDOTAUserMsg_ItemPurchased::~CDOTAUserMsg_ItemPurchased() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemPurchased)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ItemPurchased::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ItemPurchased::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ItemPurchased::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemPurchased)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemPurchased::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ItemPurchased::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemPurchased)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemPurchased)
  return target;
}

size_t CDOTAUserMsg_ItemPurchased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemPurchased)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 item_ability_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ItemPurchased::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ItemPurchased::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ItemPurchased::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ItemPurchased::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ItemPurchased*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ItemPurchased&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemPurchased)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_ability_id()) {
    _this->_internal_set_item_ability_id(from._internal_item_ability_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const CDOTAUserMsg_ItemPurchased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemPurchased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemPurchased::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemPurchased::InternalSwap(CDOTAUserMsg_ItemPurchased* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemPurchased::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[57]);
}

// ===================================================================

class CDOTAUserMsg_ItemSold::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemSold>()._impl_._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_ItemSold::CDOTAUserMsg_ItemSold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemSold)
}
CDOTAUserMsg_ItemSold::CDOTAUserMsg_ItemSold(const CDOTAUserMsg_ItemSold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ItemSold* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemSold)
}

inline void CDOTAUserMsg_ItemSold::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ability_id_){-1}
  };
}

CDOTAUserMsg_ItemSold::~CDOTAUserMsg_ItemSold() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemSold)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ItemSold::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ItemSold::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ItemSold::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemSold)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemSold::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ItemSold::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemSold)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemSold)
  return target;
}

size_t CDOTAUserMsg_ItemSold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemSold)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 item_ability_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ItemSold::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ItemSold::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ItemSold::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ItemSold::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ItemSold*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ItemSold&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemSold)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_ability_id()) {
    _this->_internal_set_item_ability_id(from._internal_item_ability_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ItemSold::CopyFrom(const CDOTAUserMsg_ItemSold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemSold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemSold::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemSold::InternalSwap(CDOTAUserMsg_ItemSold* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemSold::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[58]);
}

// ===================================================================

class CDOTAUserMsg_ItemFound::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemFound>()._impl_._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemdef(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemFound)
}
CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(const CDOTAUserMsg_ItemFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ItemFound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.rarity_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.itemdef_){}
    , decltype(_impl_.player_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.player_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemFound)
}

inline void CDOTAUserMsg_ItemFound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.rarity_){0}
    , decltype(_impl_.method_){0}
    , decltype(_impl_.itemdef_){0u}
    , decltype(_impl_.player_){-1}
  };
}

CDOTAUserMsg_ItemFound::~CDOTAUserMsg_ItemFound() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemFound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ItemFound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ItemFound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ItemFound::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemFound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.itemdef_) -
        reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.itemdef_));
    _impl_.player_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemFound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player(&has_bits);
          _impl_.player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rarity(&has_bits);
          _impl_.rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_method(&has_bits);
          _impl_.method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 itemdef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_itemdef(&has_bits);
          _impl_.itemdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ItemFound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemFound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  // optional int32 rarity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rarity(), target);
  }

  // optional int32 method = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_method(), target);
  }

  // optional uint32 itemdef = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_itemdef(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemFound)
  return target;
}

size_t CDOTAUserMsg_ItemFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemFound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 quality = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

    // optional int32 rarity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rarity());
    }

    // optional int32 method = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_method());
    }

    // optional uint32 itemdef = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemdef());
    }

    // optional int32 player = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ItemFound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ItemFound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ItemFound::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ItemFound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ItemFound*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ItemFound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemFound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rarity_ = from._impl_.rarity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.method_ = from._impl_.method_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.itemdef_ = from._impl_.itemdef_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_ = from._impl_.player_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ItemFound::CopyFrom(const CDOTAUserMsg_ItemFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemFound::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemFound::InternalSwap(CDOTAUserMsg_ItemFound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _impl_.itemdef_)
      + sizeof(CDOTAUserMsg_ItemFound::_impl_.itemdef_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemFound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[59]);
}

// ===================================================================

class CDOTAUserMsg_OverheadEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OverheadEvent>()._impl_._has_bits_);
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_player_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_player_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OverheadEvent)
}
CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(const CDOTAUserMsg_OverheadEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_OverheadEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.source_player_entindex_){}
    , decltype(_impl_.target_player_entindex_){}
    , decltype(_impl_.target_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.message_type_, &from._impl_.message_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_entindex_) -
    reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OverheadEvent)
}

inline void CDOTAUserMsg_OverheadEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_type_){0}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.source_player_entindex_){-1}
    , decltype(_impl_.target_player_entindex_){-1}
    , decltype(_impl_.target_entindex_){-1}
  };
}

CDOTAUserMsg_OverheadEvent::~CDOTAUserMsg_OverheadEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OverheadEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_OverheadEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_OverheadEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_OverheadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OverheadEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.message_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.value_));
    _impl_.source_player_entindex_ = -1;
    _impl_.target_player_entindex_ = -1;
    _impl_.target_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OverheadEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_OVERHEAD_ALERT_IsValid(val))) {
            _internal_set_message_type(static_cast<::DOTA_OVERHEAD_ALERT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_player_entindex = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_target_player_entindex(&has_bits);
          _impl_.target_player_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entindex = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_target_entindex(&has_bits);
          _impl_.target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source_player_entindex = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_source_player_entindex(&has_bits);
          _impl_.source_player_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_OverheadEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OverheadEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // optional int32 target_player_entindex = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_player_entindex(), target);
  }

  // optional int32 target_entindex = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_entindex(), target);
  }

  // optional int32 source_player_entindex = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_source_player_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OverheadEvent)
  return target;
}

size_t CDOTAUserMsg_OverheadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OverheadEvent)
  size_t total_size = 0;

  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (_internal_has_message_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional int32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

    // optional int32 source_player_entindex = 5 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_player_entindex());
    }

    // optional int32 target_player_entindex = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_player_entindex());
    }

    // optional int32 target_entindex = 4 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_OverheadEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_OverheadEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_OverheadEvent::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_OverheadEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_OverheadEvent*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_OverheadEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OverheadEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.message_type_ = from._impl_.message_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_player_entindex_ = from._impl_.source_player_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_player_entindex_ = from._impl_.target_player_entindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.target_entindex_ = from._impl_.target_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const CDOTAUserMsg_OverheadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OverheadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OverheadEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_OverheadEvent::InternalSwap(CDOTAUserMsg_OverheadEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _impl_.value_)
      + sizeof(CDOTAUserMsg_OverheadEvent::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _impl_.message_type_)>(
          reinterpret_cast<char*>(&_impl_.message_type_),
          reinterpret_cast<char*>(&other->_impl_.message_type_));
  swap(_impl_.source_player_entindex_, other->_impl_.source_player_entindex_);
  swap(_impl_.target_player_entindex_, other->_impl_.target_player_entindex_);
  swap(_impl_.target_entindex_, other->_impl_.target_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OverheadEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[60]);
}

// ===================================================================

class CDOTAUserMsg_TutorialTipInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialTipInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialTipInfo)
}
CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(const CDOTAUserMsg_TutorialTipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TutorialTipInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.progress_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.progress_ = from._impl_.progress_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialTipInfo)
}

inline void CDOTAUserMsg_TutorialTipInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.progress_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_TutorialTipInfo::~CDOTAUserMsg_TutorialTipInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialTipInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TutorialTipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CDOTAUserMsg_TutorialTipInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialTipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialTipInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.progress_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialTipInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_TutorialTipInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TutorialTipInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialTipInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialTipInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialTipInfo)
  return target;
}

size_t CDOTAUserMsg_TutorialTipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialTipInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 progress = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TutorialTipInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TutorialTipInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TutorialTipInfo::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TutorialTipInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TutorialTipInfo*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TutorialTipInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialTipInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialTipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialTipInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialTipInfo::InternalSwap(CDOTAUserMsg_TutorialTipInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.progress_, other->_impl_.progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialTipInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[61]);
}

// ===================================================================

class CDOTAUserMsg_TutorialFinish::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialFinish>()._impl_._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emblem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialFinish)
}
CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(const CDOTAUserMsg_TutorialFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TutorialFinish* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.emblem_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.heading_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heading_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_heading()) {
    _this->_impl_.heading_.Set(from._internal_heading(), 
      _this->GetArenaForAllocation());
  }
  _impl_.emblem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emblem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_emblem()) {
    _this->_impl_.emblem_.Set(from._internal_emblem(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialFinish)
}

inline void CDOTAUserMsg_TutorialFinish::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.emblem_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.success_){false}
  };
  _impl_.heading_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heading_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.emblem_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emblem_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_TutorialFinish::~CDOTAUserMsg_TutorialFinish() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialFinish)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TutorialFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.heading_.Destroy();
  _impl_.emblem_.Destroy();
  _impl_.body_.Destroy();
}

void CDOTAUserMsg_TutorialFinish::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialFinish)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heading_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.emblem_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialFinish::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_heading();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_TutorialFinish.heading");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string emblem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_emblem();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_TutorialFinish.emblem");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_TutorialFinish.body");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TutorialFinish::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialFinish)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string heading = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heading().data(), static_cast<int>(this->_internal_heading().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialFinish.heading");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_heading(), target);
  }

  // optional string emblem = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_emblem().data(), static_cast<int>(this->_internal_emblem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialFinish.emblem");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_emblem(), target);
  }

  // optional string body = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialFinish.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialFinish)
  return target;
}

size_t CDOTAUserMsg_TutorialFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialFinish)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string heading = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heading());
    }

    // optional string emblem = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_emblem());
    }

    // optional string body = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TutorialFinish::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TutorialFinish::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TutorialFinish::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TutorialFinish::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TutorialFinish*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TutorialFinish&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialFinish)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_heading(from._internal_heading());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_emblem(from._internal_emblem());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TutorialFinish::CopyFrom(const CDOTAUserMsg_TutorialFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFinish::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialFinish::InternalSwap(CDOTAUserMsg_TutorialFinish* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.heading_, lhs_arena,
      &other->_impl_.heading_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.emblem_, lhs_arena,
      &other->_impl_.emblem_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialFinish::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[62]);
}

// ===================================================================

class CDOTAUserMsg_TutorialMinimapPosition::_Internal {
 public:
};

CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialMinimapPosition)
}
CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(const CDOTAUserMsg_TutorialMinimapPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CDOTAUserMsg_TutorialMinimapPosition* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialMinimapPosition)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TutorialMinimapPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TutorialMinimapPosition::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialMinimapPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[63]);
}

// ===================================================================

class CDOTAUserMsg_SendGenericToolTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendGenericToolTip>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendGenericToolTip)
}
CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(const CDOTAUserMsg_SendGenericToolTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SendGenericToolTip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.entindex_){}
    , decltype(_impl_.close_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entindex_, &from._impl_.entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.close_) -
    reinterpret_cast<char*>(&_impl_.entindex_)) + sizeof(_impl_.close_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendGenericToolTip)
}

inline void CDOTAUserMsg_SendGenericToolTip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.entindex_){0}
    , decltype(_impl_.close_){false}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_SendGenericToolTip::~CDOTAUserMsg_SendGenericToolTip() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendGenericToolTip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SendGenericToolTip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.text_.Destroy();
}

void CDOTAUserMsg_SendGenericToolTip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SendGenericToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendGenericToolTip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.close_) -
        reinterpret_cast<char*>(&_impl_.entindex_)) + sizeof(_impl_.close_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendGenericToolTip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_SendGenericToolTip.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_SendGenericToolTip.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool close = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_close(&has_bits);
          _impl_.close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SendGenericToolTip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendGenericToolTip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SendGenericToolTip.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SendGenericToolTip.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional int32 entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_entindex(), target);
  }

  // optional bool close = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendGenericToolTip)
  return target;
}

size_t CDOTAUserMsg_SendGenericToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendGenericToolTip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional int32 entindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
    }

    // optional bool close = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SendGenericToolTip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SendGenericToolTip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SendGenericToolTip::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SendGenericToolTip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SendGenericToolTip*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SendGenericToolTip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendGenericToolTip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.close_ = from._impl_.close_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SendGenericToolTip::CopyFrom(const CDOTAUserMsg_SendGenericToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendGenericToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendGenericToolTip::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendGenericToolTip::InternalSwap(CDOTAUserMsg_SendGenericToolTip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, _impl_.close_)
      + sizeof(CDOTAUserMsg_SendGenericToolTip::_impl_.close_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, _impl_.entindex_)>(
          reinterpret_cast<char*>(&_impl_.entindex_),
          reinterpret_cast<char*>(&other->_impl_.entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendGenericToolTip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[64]);
}

// ===================================================================

class CDOTAUserMsg_WorldLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WorldLine>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_WorldLine& worldline(const CDOTAUserMsg_WorldLine* msg);
  static void set_has_worldline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_WorldLine&
CDOTAUserMsg_WorldLine::_Internal::worldline(const CDOTAUserMsg_WorldLine* msg) {
  return *msg->_impl_.worldline_;
}
void CDOTAUserMsg_WorldLine::clear_worldline() {
  if (_impl_.worldline_ != nullptr) _impl_.worldline_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WorldLine)
}
CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(const CDOTAUserMsg_WorldLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_WorldLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.worldline_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worldline()) {
    _this->_impl_.worldline_ = new ::CDOTAMsg_WorldLine(*from._impl_.worldline_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WorldLine)
}

inline void CDOTAUserMsg_WorldLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.worldline_){nullptr}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_WorldLine::~CDOTAUserMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WorldLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_WorldLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.worldline_;
}

void CDOTAUserMsg_WorldLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WorldLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.worldline_ != nullptr);
      _impl_.worldline_->Clear();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WorldLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMsg_WorldLine worldline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_WorldLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WorldLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_WorldLine worldline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::worldline(this),
        _Internal::worldline(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WorldLine)
  return target;
}

size_t CDOTAUserMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WorldLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_WorldLine worldline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.worldline_);
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_WorldLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_WorldLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_WorldLine::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_WorldLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_WorldLine*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_WorldLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_worldline()->::CDOTAMsg_WorldLine::MergeFrom(
          from._internal_worldline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_WorldLine::CopyFrom(const CDOTAUserMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WorldLine::InternalSwap(CDOTAUserMsg_WorldLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.worldline_, other->_impl_.worldline_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WorldLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[65]);
}

// ===================================================================

class CDOTAUserMsg_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatWheel>()._impl_._has_bits_);
  static void set_has_chat_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatWheel)
}
CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(const CDOTAUserMsg_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ChatWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.param_hero_id_){}
    , decltype(_impl_.emoticon_id_){}
    , decltype(_impl_.chat_message_id_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatWheel)
}

inline void CDOTAUserMsg_ChatWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.param_hero_id_){0u}
    , decltype(_impl_.emoticon_id_){0u}
    , decltype(_impl_.chat_message_id_){4294967295u}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_ChatWheel::~CDOTAUserMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ChatWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.emoticon_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.emoticon_id_));
    _impl_.chat_message_id_ = 4294967295u;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chat_message_id = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_message_id(&has_bits);
          _impl_.chat_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 param_hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_param_hero_id(&has_bits);
          _impl_.param_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_emoticon_id(&has_bits);
          _impl_.emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ChatWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chat_message_id = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chat_message_id(), target);
  }

  // optional int32 player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  // optional uint32 param_hero_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_param_hero_id(), target);
  }

  // optional uint32 emoticon_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatWheel)
  return target;
}

size_t CDOTAUserMsg_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 param_hero_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_param_hero_id());
    }

    // optional uint32 emoticon_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emoticon_id());
    }

    // optional uint32 chat_message_id = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_message_id());
    }

    // optional int32 player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ChatWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ChatWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ChatWheel::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ChatWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ChatWheel*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ChatWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.param_hero_id_ = from._impl_.param_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.emoticon_id_ = from._impl_.emoticon_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.chat_message_id_ = from._impl_.chat_message_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ChatWheel::CopyFrom(const CDOTAUserMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatWheel::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatWheel::InternalSwap(CDOTAUserMsg_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, _impl_.emoticon_id_)
      + sizeof(CDOTAUserMsg_ChatWheel::_impl_.emoticon_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
  swap(_impl_.chat_message_id_, other->_impl_.chat_message_id_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[66]);
}

// ===================================================================

class CDOTAUserMsg_ReceivedXmasGift::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ReceivedXmasGift>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventory_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ReceivedXmasGift)
}
CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(const CDOTAUserMsg_ReceivedXmasGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ReceivedXmasGift* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_name_){}
    , decltype(_impl_.inventory_slot_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_name()) {
    _this->_impl_.item_name_.Set(from._internal_item_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.inventory_slot_, &from._impl_.inventory_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.inventory_slot_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ReceivedXmasGift)
}

inline void CDOTAUserMsg_ReceivedXmasGift::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_name_){}
    , decltype(_impl_.inventory_slot_){0}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_ReceivedXmasGift::~CDOTAUserMsg_ReceivedXmasGift() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ReceivedXmasGift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ReceivedXmasGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_name_.Destroy();
}

void CDOTAUserMsg_ReceivedXmasGift::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ReceivedXmasGift::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ReceivedXmasGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.item_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.inventory_slot_ = 0;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ReceivedXmasGift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_item_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ReceivedXmasGift.item_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 inventory_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_inventory_slot(&has_bits);
          _impl_.inventory_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ReceivedXmasGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ReceivedXmasGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string item_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ReceivedXmasGift.item_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_item_name(), target);
  }

  // optional int32 inventory_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_inventory_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ReceivedXmasGift)
  return target;
}

size_t CDOTAUserMsg_ReceivedXmasGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ReceivedXmasGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name());
    }

    // optional int32 inventory_slot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inventory_slot());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ReceivedXmasGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ReceivedXmasGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ReceivedXmasGift::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ReceivedXmasGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ReceivedXmasGift*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ReceivedXmasGift&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ReceivedXmasGift)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_item_name(from._internal_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.inventory_slot_ = from._impl_.inventory_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ReceivedXmasGift::CopyFrom(const CDOTAUserMsg_ReceivedXmasGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ReceivedXmasGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ReceivedXmasGift::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ReceivedXmasGift::InternalSwap(CDOTAUserMsg_ReceivedXmasGift* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_name_, lhs_arena,
      &other->_impl_.item_name_, rhs_arena
  );
  swap(_impl_.inventory_slot_, other->_impl_.inventory_slot_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ReceivedXmasGift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[67]);
}

// ===================================================================

class CDOTAUserMsg_ShowSurvey::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ShowSurvey>()._impl_._has_bits_);
  static void set_has_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teammate_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_teammate_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teammate_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ShowSurvey)
}
CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(const CDOTAUserMsg_ShowSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ShowSurvey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_style_){}
    , decltype(_impl_.teammate_name_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.survey_id_){}
    , decltype(_impl_.teammate_hero_id_){}
    , decltype(_impl_.teammate_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_style_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_style_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response_style()) {
    _this->_impl_.response_style_.Set(from._internal_response_style(), 
      _this->GetArenaForAllocation());
  }
  _impl_.teammate_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teammate_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_teammate_name()) {
    _this->_impl_.teammate_name_.Set(from._internal_teammate_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teammate_account_id_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.teammate_account_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShowSurvey)
}

inline void CDOTAUserMsg_ShowSurvey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_style_){}
    , decltype(_impl_.teammate_name_){}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.survey_id_){0}
    , decltype(_impl_.teammate_hero_id_){0u}
    , decltype(_impl_.teammate_account_id_){0u}
  };
  _impl_.response_style_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_style_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.teammate_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teammate_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_ShowSurvey::~CDOTAUserMsg_ShowSurvey() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShowSurvey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ShowSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_style_.Destroy();
  _impl_.teammate_name_.Destroy();
}

void CDOTAUserMsg_ShowSurvey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ShowSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ShowSurvey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.response_style_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.teammate_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.teammate_account_id_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.teammate_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ShowSurvey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 survey_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_survey_id(&has_bits);
          _impl_.survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string response_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_response_style();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ShowSurvey.response_style");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teammate_hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_teammate_hero_id(&has_bits);
          _impl_.teammate_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string teammate_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_teammate_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ShowSurvey.teammate_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teammate_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_teammate_account_id(&has_bits);
          _impl_.teammate_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ShowSurvey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShowSurvey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 survey_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_survey_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional string response_style = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response_style().data(), static_cast<int>(this->_internal_response_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowSurvey.response_style");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_response_style(), target);
  }

  // optional uint32 teammate_hero_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teammate_hero_id(), target);
  }

  // optional string teammate_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teammate_name().data(), static_cast<int>(this->_internal_teammate_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowSurvey.teammate_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_teammate_name(), target);
  }

  // optional uint32 teammate_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_teammate_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShowSurvey)
  return target;
}

size_t CDOTAUserMsg_ShowSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ShowSurvey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string response_style = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response_style());
    }

    // optional string teammate_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teammate_name());
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional int32 survey_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_survey_id());
    }

    // optional uint32 teammate_hero_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teammate_hero_id());
    }

    // optional uint32 teammate_account_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teammate_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ShowSurvey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ShowSurvey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ShowSurvey::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ShowSurvey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ShowSurvey*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ShowSurvey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ShowSurvey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_response_style(from._internal_response_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_teammate_name(from._internal_teammate_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.survey_id_ = from._impl_.survey_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.teammate_hero_id_ = from._impl_.teammate_hero_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.teammate_account_id_ = from._impl_.teammate_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ShowSurvey::CopyFrom(const CDOTAUserMsg_ShowSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ShowSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowSurvey::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ShowSurvey::InternalSwap(CDOTAUserMsg_ShowSurvey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_style_, lhs_arena,
      &other->_impl_.response_style_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teammate_name_, lhs_arena,
      &other->_impl_.teammate_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, _impl_.teammate_account_id_)
      + sizeof(CDOTAUserMsg_ShowSurvey::_impl_.teammate_account_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ShowSurvey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[68]);
}

// ===================================================================

class CDOTAUserMsg_UpdateSharedContent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UpdateSharedContent>()._impl_._has_bits_);
  static void set_has_slot_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UpdateSharedContent)
}
CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(const CDOTAUserMsg_UpdateSharedContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_UpdateSharedContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.slot_type_ = from._impl_.slot_type_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UpdateSharedContent)
}

inline void CDOTAUserMsg_UpdateSharedContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_type_){0}
  };
}

CDOTAUserMsg_UpdateSharedContent::~CDOTAUserMsg_UpdateSharedContent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UpdateSharedContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_UpdateSharedContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_UpdateSharedContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_UpdateSharedContent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UpdateSharedContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slot_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UpdateSharedContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 slot_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot_type(&has_bits);
          _impl_.slot_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_UpdateSharedContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UpdateSharedContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 slot_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UpdateSharedContent)
  return target;
}

size_t CDOTAUserMsg_UpdateSharedContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UpdateSharedContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 slot_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UpdateSharedContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_UpdateSharedContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UpdateSharedContent::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_UpdateSharedContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_UpdateSharedContent*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_UpdateSharedContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UpdateSharedContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot_type()) {
    _this->_internal_set_slot_type(from._internal_slot_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_UpdateSharedContent::CopyFrom(const CDOTAUserMsg_UpdateSharedContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UpdateSharedContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UpdateSharedContent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UpdateSharedContent::InternalSwap(CDOTAUserMsg_UpdateSharedContent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.slot_type_, other->_impl_.slot_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UpdateSharedContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[69]);
}

// ===================================================================

class CDOTAUserMsg_TutorialRequestExp::_Internal {
 public:
};

CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialRequestExp)
}
CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(const CDOTAUserMsg_TutorialRequestExp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CDOTAUserMsg_TutorialRequestExp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialRequestExp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TutorialRequestExp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TutorialRequestExp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialRequestExp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[70]);
}

// ===================================================================

class CDOTAUserMsg_TutorialFade::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialFade>()._impl_._has_bits_);
  static void set_has_tgt_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialFade)
}
CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(const CDOTAUserMsg_TutorialFade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TutorialFade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tgt_alpha_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tgt_alpha_ = from._impl_.tgt_alpha_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialFade)
}

inline void CDOTAUserMsg_TutorialFade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tgt_alpha_){0}
  };
}

CDOTAUserMsg_TutorialFade::~CDOTAUserMsg_TutorialFade() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialFade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TutorialFade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_TutorialFade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialFade::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialFade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tgt_alpha_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialFade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tgt_alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tgt_alpha(&has_bits);
          _impl_.tgt_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TutorialFade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialFade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tgt_alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tgt_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialFade)
  return target;
}

size_t CDOTAUserMsg_TutorialFade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialFade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 tgt_alpha = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tgt_alpha());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TutorialFade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TutorialFade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TutorialFade::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TutorialFade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TutorialFade*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TutorialFade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialFade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tgt_alpha()) {
    _this->_internal_set_tgt_alpha(from._internal_tgt_alpha());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TutorialFade::CopyFrom(const CDOTAUserMsg_TutorialFade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFade::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialFade::InternalSwap(CDOTAUserMsg_TutorialFade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tgt_alpha_, other->_impl_.tgt_alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialFade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[71]);
}

// ===================================================================

class CDOTAUserMsg_TutorialPingMinimap::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialPingMinimap>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialPingMinimap)
}
CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(const CDOTAUserMsg_TutorialPingMinimap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TutorialPingMinimap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.pos_z_){}
    , decltype(_impl_.entity_index_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_x_, &from._impl_.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialPingMinimap)
}

inline void CDOTAUserMsg_TutorialPingMinimap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.pos_z_){0}
    , decltype(_impl_.entity_index_){0}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_TutorialPingMinimap::~CDOTAUserMsg_TutorialPingMinimap() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialPingMinimap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TutorialPingMinimap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_TutorialPingMinimap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialPingMinimap::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialPingMinimap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.pos_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.entity_index_) -
        reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.entity_index_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialPingMinimap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_pos_x(&has_bits);
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_pos_y(&has_bits);
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_pos_z(&has_bits);
          _impl_.pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entity_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_entity_index(&has_bits);
          _impl_.entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TutorialPingMinimap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialPingMinimap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_z(), target);
  }

  // optional int32 entity_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_entity_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialPingMinimap)
  return target;
}

size_t CDOTAUserMsg_TutorialPingMinimap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialPingMinimap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float pos_x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 entity_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_index());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TutorialPingMinimap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TutorialPingMinimap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TutorialPingMinimap::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TutorialPingMinimap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TutorialPingMinimap*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TutorialPingMinimap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialPingMinimap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pos_x_ = from._impl_.pos_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pos_y_ = from._impl_.pos_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pos_z_ = from._impl_.pos_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entity_index_ = from._impl_.entity_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TutorialPingMinimap::CopyFrom(const CDOTAUserMsg_TutorialPingMinimap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialPingMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialPingMinimap::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialPingMinimap::InternalSwap(CDOTAUserMsg_TutorialPingMinimap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, _impl_.entity_index_)
      + sizeof(CDOTAUserMsg_TutorialPingMinimap::_impl_.entity_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, _impl_.pos_x_)>(
          reinterpret_cast<char*>(&_impl_.pos_x_),
          reinterpret_cast<char*>(&other->_impl_.pos_x_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialPingMinimap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[72]);
}

// ===================================================================

class CDOTAUserMsg_GamerulesStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GamerulesStateChanged>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GamerulesStateChanged)
}
CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged(const CDOTAUserMsg_GamerulesStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_GamerulesStateChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GamerulesStateChanged)
}

inline void CDOTAUserMsg_GamerulesStateChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){0u}
  };
}

CDOTAUserMsg_GamerulesStateChanged::~CDOTAUserMsg_GamerulesStateChanged() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GamerulesStateChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_GamerulesStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_GamerulesStateChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_GamerulesStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GamerulesStateChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GamerulesStateChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_GamerulesStateChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GamerulesStateChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GamerulesStateChanged)
  return target;
}

size_t CDOTAUserMsg_GamerulesStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GamerulesStateChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 state = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_GamerulesStateChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_GamerulesStateChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_GamerulesStateChanged::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_GamerulesStateChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_GamerulesStateChanged*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_GamerulesStateChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GamerulesStateChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_GamerulesStateChanged::CopyFrom(const CDOTAUserMsg_GamerulesStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GamerulesStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GamerulesStateChanged::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GamerulesStateChanged::InternalSwap(CDOTAUserMsg_GamerulesStateChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GamerulesStateChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[73]);
}

// ===================================================================

class CDOTAUserMsg_AddQuestLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AddQuestLogEntry>()._impl_._has_bits_);
  static void set_has_npc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_npc_dialog(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AddQuestLogEntry)
}
CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(const CDOTAUserMsg_AddQuestLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AddQuestLogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.npc_name_){}
    , decltype(_impl_.npc_dialog_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.npc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.npc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_npc_name()) {
    _this->_impl_.npc_name_.Set(from._internal_npc_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.npc_dialog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.npc_dialog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_npc_dialog()) {
    _this->_impl_.npc_dialog_.Set(from._internal_npc_dialog(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AddQuestLogEntry)
}

inline void CDOTAUserMsg_AddQuestLogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.npc_name_){}
    , decltype(_impl_.npc_dialog_){}
  };
  _impl_.npc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.npc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.npc_dialog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.npc_dialog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_AddQuestLogEntry::~CDOTAUserMsg_AddQuestLogEntry() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AddQuestLogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AddQuestLogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.npc_name_.Destroy();
  _impl_.npc_dialog_.Destroy();
}

void CDOTAUserMsg_AddQuestLogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AddQuestLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AddQuestLogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.npc_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.npc_dialog_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AddQuestLogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string npc_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_npc_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_AddQuestLogEntry.npc_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string npc_dialog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_npc_dialog();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_AddQuestLogEntry.npc_dialog");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AddQuestLogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AddQuestLogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string npc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_npc_name().data(), static_cast<int>(this->_internal_npc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_AddQuestLogEntry.npc_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_npc_name(), target);
  }

  // optional string npc_dialog = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_npc_dialog().data(), static_cast<int>(this->_internal_npc_dialog().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_AddQuestLogEntry.npc_dialog");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_npc_dialog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AddQuestLogEntry)
  return target;
}

size_t CDOTAUserMsg_AddQuestLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AddQuestLogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string npc_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_npc_name());
    }

    // optional string npc_dialog = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_npc_dialog());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AddQuestLogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AddQuestLogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AddQuestLogEntry::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AddQuestLogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AddQuestLogEntry*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AddQuestLogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AddQuestLogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_npc_name(from._internal_npc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_npc_dialog(from._internal_npc_dialog());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AddQuestLogEntry::CopyFrom(const CDOTAUserMsg_AddQuestLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AddQuestLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AddQuestLogEntry::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AddQuestLogEntry::InternalSwap(CDOTAUserMsg_AddQuestLogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.npc_name_, lhs_arena,
      &other->_impl_.npc_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.npc_dialog_, lhs_arena,
      &other->_impl_.npc_dialog_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AddQuestLogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[74]);
}

// ===================================================================

class CDOTAUserMsg_SendStatPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendStatPopup>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_SendStatPopup& statpopup(const CDOTAUserMsg_SendStatPopup* msg);
  static void set_has_statpopup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_SendStatPopup&
CDOTAUserMsg_SendStatPopup::_Internal::statpopup(const CDOTAUserMsg_SendStatPopup* msg) {
  return *msg->_impl_.statpopup_;
}
void CDOTAUserMsg_SendStatPopup::clear_statpopup() {
  if (_impl_.statpopup_ != nullptr) _impl_.statpopup_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendStatPopup)
}
CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(const CDOTAUserMsg_SendStatPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SendStatPopup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statpopup_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statpopup()) {
    _this->_impl_.statpopup_ = new ::CDOTAMsg_SendStatPopup(*from._impl_.statpopup_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendStatPopup)
}

inline void CDOTAUserMsg_SendStatPopup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statpopup_){nullptr}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_SendStatPopup::~CDOTAUserMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendStatPopup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SendStatPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.statpopup_;
}

void CDOTAUserMsg_SendStatPopup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendStatPopup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.statpopup_ != nullptr);
      _impl_.statpopup_->Clear();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendStatPopup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMsg_SendStatPopup statpopup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statpopup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SendStatPopup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendStatPopup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_SendStatPopup statpopup = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::statpopup(this),
        _Internal::statpopup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendStatPopup)
  return target;
}

size_t CDOTAUserMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendStatPopup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_SendStatPopup statpopup = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.statpopup_);
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SendStatPopup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SendStatPopup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SendStatPopup::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SendStatPopup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SendStatPopup*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SendStatPopup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_statpopup()->::CDOTAMsg_SendStatPopup::MergeFrom(
          from._internal_statpopup());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SendStatPopup::CopyFrom(const CDOTAUserMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendStatPopup::InternalSwap(CDOTAUserMsg_SendStatPopup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.statpopup_, other->_impl_.statpopup_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendStatPopup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[75]);
}

// ===================================================================

class CDOTAUserMsg_DismissAllStatPopups::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DismissAllStatPopups>()._impl_._has_bits_);
  static const ::CDOTAMsg_DismissAllStatPopups& dismissallmsg(const CDOTAUserMsg_DismissAllStatPopups* msg);
  static void set_has_dismissallmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_DismissAllStatPopups&
CDOTAUserMsg_DismissAllStatPopups::_Internal::dismissallmsg(const CDOTAUserMsg_DismissAllStatPopups* msg) {
  return *msg->_impl_.dismissallmsg_;
}
void CDOTAUserMsg_DismissAllStatPopups::clear_dismissallmsg() {
  if (_impl_.dismissallmsg_ != nullptr) _impl_.dismissallmsg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DismissAllStatPopups)
}
CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups(const CDOTAUserMsg_DismissAllStatPopups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DismissAllStatPopups* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dismissallmsg_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dismissallmsg()) {
    _this->_impl_.dismissallmsg_ = new ::CDOTAMsg_DismissAllStatPopups(*from._impl_.dismissallmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DismissAllStatPopups)
}

inline void CDOTAUserMsg_DismissAllStatPopups::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dismissallmsg_){nullptr}
  };
}

CDOTAUserMsg_DismissAllStatPopups::~CDOTAUserMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DismissAllStatPopups)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DismissAllStatPopups::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dismissallmsg_;
}

void CDOTAUserMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DismissAllStatPopups)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.dismissallmsg_ != nullptr);
    _impl_.dismissallmsg_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DismissAllStatPopups::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dismissallmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DismissAllStatPopups::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DismissAllStatPopups)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dismissallmsg(this),
        _Internal::dismissallmsg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAUserMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DismissAllStatPopups)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dismissallmsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DismissAllStatPopups::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DismissAllStatPopups::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DismissAllStatPopups::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DismissAllStatPopups::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DismissAllStatPopups*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DismissAllStatPopups&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dismissallmsg()) {
    _this->_internal_mutable_dismissallmsg()->::CDOTAMsg_DismissAllStatPopups::MergeFrom(
        from._internal_dismissallmsg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DismissAllStatPopups::CopyFrom(const CDOTAUserMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DismissAllStatPopups::InternalSwap(CDOTAUserMsg_DismissAllStatPopups* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dismissallmsg_, other->_impl_.dismissallmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DismissAllStatPopups::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[76]);
}

// ===================================================================

class CDOTAUserMsg_SendRoshanSpectatorPhase::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendRoshanSpectatorPhase>()._impl_._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phase_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendRoshanSpectatorPhase)
}
CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase(const CDOTAUserMsg_SendRoshanSpectatorPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SendRoshanSpectatorPhase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phase_){}
    , decltype(_impl_.phase_start_time_){}
    , decltype(_impl_.phase_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.phase_, &from._impl_.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phase_length_) -
    reinterpret_cast<char*>(&_impl_.phase_)) + sizeof(_impl_.phase_length_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendRoshanSpectatorPhase)
}

inline void CDOTAUserMsg_SendRoshanSpectatorPhase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phase_){0}
    , decltype(_impl_.phase_start_time_){0}
    , decltype(_impl_.phase_length_){0}
  };
}

CDOTAUserMsg_SendRoshanSpectatorPhase::~CDOTAUserMsg_SendRoshanSpectatorPhase() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendRoshanSpectatorPhase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SendRoshanSpectatorPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.phase_length_) -
        reinterpret_cast<char*>(&_impl_.phase_)) + sizeof(_impl_.phase_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendRoshanSpectatorPhase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_ROSHAN_PHASE_IsValid(val))) {
            _internal_set_phase(static_cast<::DOTA_ROSHAN_PHASE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 phase_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_phase_start_time(&has_bits);
          _impl_.phase_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 phase_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_phase_length(&has_bits);
          _impl_.phase_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SendRoshanSpectatorPhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 phase_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_start_time(), target);
  }

  // optional int32 phase_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_phase_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendRoshanSpectatorPhase)
  return target;
}

size_t CDOTAUserMsg_SendRoshanSpectatorPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
    }

    // optional int32 phase_start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_phase_start_time());
    }

    // optional int32 phase_length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_phase_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SendRoshanSpectatorPhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SendRoshanSpectatorPhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SendRoshanSpectatorPhase::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SendRoshanSpectatorPhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SendRoshanSpectatorPhase*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SendRoshanSpectatorPhase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.phase_ = from._impl_.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.phase_start_time_ = from._impl_.phase_start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.phase_length_ = from._impl_.phase_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::CopyFrom(const CDOTAUserMsg_SendRoshanSpectatorPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendRoshanSpectatorPhase::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::InternalSwap(CDOTAUserMsg_SendRoshanSpectatorPhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, _impl_.phase_length_)
      + sizeof(CDOTAUserMsg_SendRoshanSpectatorPhase::_impl_.phase_length_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, _impl_.phase_)>(
          reinterpret_cast<char*>(&_impl_.phase_),
          reinterpret_cast<char*>(&other->_impl_.phase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendRoshanSpectatorPhase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[77]);
}

// ===================================================================

class CDOTAUserMsg_SendRoshanPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendRoshanPopup>()._impl_._has_bits_);
  static void set_has_reclaimed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendRoshanPopup)
}
CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(const CDOTAUserMsg_SendRoshanPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SendRoshanPopup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reclaimed_){}
    , decltype(_impl_.gametime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reclaimed_, &from._impl_.reclaimed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gametime_) -
    reinterpret_cast<char*>(&_impl_.reclaimed_)) + sizeof(_impl_.gametime_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendRoshanPopup)
}

inline void CDOTAUserMsg_SendRoshanPopup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reclaimed_){false}
    , decltype(_impl_.gametime_){0}
  };
}

CDOTAUserMsg_SendRoshanPopup::~CDOTAUserMsg_SendRoshanPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendRoshanPopup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SendRoshanPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_SendRoshanPopup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SendRoshanPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendRoshanPopup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.reclaimed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gametime_) -
        reinterpret_cast<char*>(&_impl_.reclaimed_)) + sizeof(_impl_.gametime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendRoshanPopup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool reclaimed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reclaimed(&has_bits);
          _impl_.reclaimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gametime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gametime(&has_bits);
          _impl_.gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SendRoshanPopup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendRoshanPopup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool reclaimed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_reclaimed(), target);
  }

  // optional int32 gametime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gametime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendRoshanPopup)
  return target;
}

size_t CDOTAUserMsg_SendRoshanPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendRoshanPopup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool reclaimed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 gametime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gametime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SendRoshanPopup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SendRoshanPopup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SendRoshanPopup::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SendRoshanPopup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SendRoshanPopup*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SendRoshanPopup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendRoshanPopup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.reclaimed_ = from._impl_.reclaimed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gametime_ = from._impl_.gametime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SendRoshanPopup::CopyFrom(const CDOTAUserMsg_SendRoshanPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendRoshanPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendRoshanPopup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendRoshanPopup::InternalSwap(CDOTAUserMsg_SendRoshanPopup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, _impl_.gametime_)
      + sizeof(CDOTAUserMsg_SendRoshanPopup::_impl_.gametime_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, _impl_.reclaimed_)>(
          reinterpret_cast<char*>(&_impl_.reclaimed_),
          reinterpret_cast<char*>(&other->_impl_.reclaimed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendRoshanPopup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[78]);
}

// ===================================================================

class CDOTAUserMsg_SendFinalGold::_Internal {
 public:
};

CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendFinalGold)
}
CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(const CDOTAUserMsg_SendFinalGold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SendFinalGold* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reliable_gold_){from._impl_.reliable_gold_}
    , decltype(_impl_.unreliable_gold_){from._impl_.unreliable_gold_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendFinalGold)
}

inline void CDOTAUserMsg_SendFinalGold::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reliable_gold_){arena}
    , decltype(_impl_.unreliable_gold_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_SendFinalGold::~CDOTAUserMsg_SendFinalGold() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendFinalGold)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SendFinalGold::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reliable_gold_.~RepeatedField();
  _impl_.unreliable_gold_.~RepeatedField();
}

void CDOTAUserMsg_SendFinalGold::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SendFinalGold::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendFinalGold)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reliable_gold_.Clear();
  _impl_.unreliable_gold_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendFinalGold::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 reliable_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reliable_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reliable_gold(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 unreliable_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unreliable_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unreliable_gold(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SendFinalGold::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendFinalGold)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 reliable_gold = 1;
  for (int i = 0, n = this->_internal_reliable_gold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reliable_gold(i), target);
  }

  // repeated uint32 unreliable_gold = 2;
  for (int i = 0, n = this->_internal_unreliable_gold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unreliable_gold(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendFinalGold)
  return target;
}

size_t CDOTAUserMsg_SendFinalGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendFinalGold)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 reliable_gold = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.reliable_gold_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_reliable_gold_size());
    total_size += data_size;
  }

  // repeated uint32 unreliable_gold = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.unreliable_gold_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_unreliable_gold_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SendFinalGold::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SendFinalGold::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SendFinalGold::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SendFinalGold::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SendFinalGold*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SendFinalGold&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendFinalGold)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reliable_gold_.MergeFrom(from._impl_.reliable_gold_);
  _this->_impl_.unreliable_gold_.MergeFrom(from._impl_.unreliable_gold_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SendFinalGold::CopyFrom(const CDOTAUserMsg_SendFinalGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendFinalGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendFinalGold::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendFinalGold::InternalSwap(CDOTAUserMsg_SendFinalGold* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reliable_gold_.InternalSwap(&other->_impl_.reliable_gold_);
  _impl_.unreliable_gold_.InternalSwap(&other->_impl_.unreliable_gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendFinalGold::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[79]);
}

// ===================================================================

class CDOTAUserMsg_CustomMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomMsg>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomMsg)
}
CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(const CDOTAUserMsg_CustomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CustomMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomMsg)
}

inline void CDOTAUserMsg_CustomMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_CustomMsg::~CDOTAUserMsg_CustomMsg() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CustomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CDOTAUserMsg_CustomMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CustomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.value_ = 0;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_CustomMsg.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CustomMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomMsg.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional int32 player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional int32 value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomMsg)
  return target;
}

size_t CDOTAUserMsg_CustomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

    // optional int32 player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CustomMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CustomMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CustomMsg::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CustomMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CustomMsg*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CustomMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CustomMsg::CopyFrom(const CDOTAUserMsg_CustomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomMsg::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomMsg::InternalSwap(CDOTAUserMsg_CustomMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[80]);
}

// ===================================================================

class CDOTAUserMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CoachHUDPing>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_CoachHUDPing& hud_ping(const CDOTAUserMsg_CoachHUDPing* msg);
  static void set_has_hud_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_CoachHUDPing&
CDOTAUserMsg_CoachHUDPing::_Internal::hud_ping(const CDOTAUserMsg_CoachHUDPing* msg) {
  return *msg->_impl_.hud_ping_;
}
void CDOTAUserMsg_CoachHUDPing::clear_hud_ping() {
  if (_impl_.hud_ping_ != nullptr) _impl_.hud_ping_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CoachHUDPing)
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CoachHUDPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hud_ping_){nullptr}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hud_ping()) {
    _this->_impl_.hud_ping_ = new ::CDOTAMsg_CoachHUDPing(*from._impl_.hud_ping_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CoachHUDPing)
}

inline void CDOTAUserMsg_CoachHUDPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hud_ping_){nullptr}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_CoachHUDPing::~CDOTAUserMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CoachHUDPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hud_ping_;
}

void CDOTAUserMsg_CoachHUDPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.hud_ping_ != nullptr);
      _impl_.hud_ping_->Clear();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CoachHUDPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hud_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CoachHUDPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hud_ping(this),
        _Internal::hud_ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CoachHUDPing)
  return target;
}

size_t CDOTAUserMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CoachHUDPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hud_ping_);
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CoachHUDPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CoachHUDPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CoachHUDPing::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CoachHUDPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CoachHUDPing*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CoachHUDPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(
          from._internal_hud_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CoachHUDPing::InternalSwap(CDOTAUserMsg_CoachHUDPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.hud_ping_, other->_impl_.hud_ping_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CoachHUDPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[81]);
}

// ===================================================================

class CDOTAUserMsg_ClientLoadGridNav::_Internal {
 public:
};

CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ClientLoadGridNav)
}
CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(const CDOTAUserMsg_ClientLoadGridNav& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CDOTAUserMsg_ClientLoadGridNav* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ClientLoadGridNav)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ClientLoadGridNav::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ClientLoadGridNav::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ClientLoadGridNav::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[82]);
}

// ===================================================================

class CDOTAUserMsg_TE_Projectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_Projectile>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_move_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_particle_system_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dodgeable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_attack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_expire_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maximpacttime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_colorgemcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_launch_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgVector& target_loc(const CDOTAUserMsg_TE_Projectile* msg);
  static void set_has_target_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_additional_particle_system_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_original_move_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_TE_Projectile::_Internal::target_loc(const CDOTAUserMsg_TE_Projectile* msg) {
  return *msg->_impl_.target_loc_;
}
void CDOTAUserMsg_TE_Projectile::clear_target_loc() {
  if (_impl_.target_loc_ != nullptr) _impl_.target_loc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_Projectile)
}
CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile(const CDOTAUserMsg_TE_Projectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TE_Projectile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.particle_cp_data_){from._impl_.particle_cp_data_}
    , decltype(_impl_.target_loc_){nullptr}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.source_attachment_){}
    , decltype(_impl_.particle_system_handle_){}
    , decltype(_impl_.dodgeable_){}
    , decltype(_impl_.is_attack_){}
    , decltype(_impl_.expire_time_){}
    , decltype(_impl_.maximpacttime_){}
    , decltype(_impl_.colorgemcolor_){}
    , decltype(_impl_.launch_tick_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.additional_particle_system_handle_){}
    , decltype(_impl_.original_move_speed_){}
    , decltype(_impl_.ability_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_loc()) {
    _this->_impl_.target_loc_ = new ::CMsgVector(*from._impl_.target_loc_);
  }
  ::memcpy(&_impl_.move_speed_, &from._impl_.move_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_) -
    reinterpret_cast<char*>(&_impl_.move_speed_)) + sizeof(_impl_.target_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_Projectile)
}

inline void CDOTAUserMsg_TE_Projectile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.particle_cp_data_){arena}
    , decltype(_impl_.target_loc_){nullptr}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.source_attachment_){0}
    , decltype(_impl_.particle_system_handle_){int64_t{0}}
    , decltype(_impl_.dodgeable_){false}
    , decltype(_impl_.is_attack_){false}
    , decltype(_impl_.expire_time_){0}
    , decltype(_impl_.maximpacttime_){0}
    , decltype(_impl_.colorgemcolor_){0u}
    , decltype(_impl_.launch_tick_){0}
    , decltype(_impl_.handle_){0}
    , decltype(_impl_.additional_particle_system_handle_){int64_t{0}}
    , decltype(_impl_.original_move_speed_){0}
    , decltype(_impl_.ability_){16777215u}
    , decltype(_impl_.source_){16777215u}
    , decltype(_impl_.target_){16777215u}
  };
}

CDOTAUserMsg_TE_Projectile::~CDOTAUserMsg_TE_Projectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_Projectile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TE_Projectile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.particle_cp_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.target_loc_;
}

void CDOTAUserMsg_TE_Projectile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TE_Projectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_Projectile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.particle_cp_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.target_loc_ != nullptr);
    _impl_.target_loc_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.move_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.maximpacttime_) -
        reinterpret_cast<char*>(&_impl_.move_speed_)) + sizeof(_impl_.maximpacttime_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.colorgemcolor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.original_move_speed_) -
        reinterpret_cast<char*>(&_impl_.colorgemcolor_)) + sizeof(_impl_.original_move_speed_));
    _impl_.ability_ = 16777215u;
    _impl_.source_ = 16777215u;
    _impl_.target_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_Projectile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source(&has_bits);
          _impl_.source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target(&has_bits);
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 move_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_move_speed(&has_bits);
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source_attachment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_source_attachment(&has_bits);
          _impl_.source_attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 particle_system_handle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_particle_system_handle(&has_bits);
          _impl_.particle_system_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dodgeable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_dodgeable(&has_bits);
          _impl_.dodgeable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_attack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_attack(&has_bits);
          _impl_.is_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float expire_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_expire_time(&has_bits);
          _impl_.expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float maximpacttime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_maximpacttime(&has_bits);
          _impl_.maximpacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 colorgemcolor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_colorgemcolor(&has_bits);
          _impl_.colorgemcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 launch_tick = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_launch_tick(&has_bits);
          _impl_.launch_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 handle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector target_loc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_particle_cp_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 additional_particle_system_handle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_additional_particle_system_handle(&has_bits);
          _impl_.additional_particle_system_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 original_move_speed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_original_move_speed(&has_bits);
          _impl_.original_move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability = 18 [default = 16777215];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_ability(&has_bits);
          _impl_.ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TE_Projectile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_Projectile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source = 1 [default = 16777215];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source(), target);
  }

  // optional uint32 target = 2 [default = 16777215];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target(), target);
  }

  // optional int32 move_speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_move_speed(), target);
  }

  // optional int32 source_attachment = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_source_attachment(), target);
  }

  // optional int64 particle_system_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_particle_system_handle(), target);
  }

  // optional bool dodgeable = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_dodgeable(), target);
  }

  // optional bool is_attack = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_attack(), target);
  }

  // optional float expire_time = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_expire_time(), target);
  }

  // optional float maximpacttime = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_maximpacttime(), target);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(11, this->_internal_colorgemcolor(), target);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_launch_tick(), target);
  }

  // optional int32 handle = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_handle(), target);
  }

  // optional .CMsgVector target_loc = 14;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::target_loc(this),
        _Internal::target_loc(this).GetCachedSize(), target, stream);
  }

  // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_particle_cp_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_particle_cp_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 additional_particle_system_handle = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_additional_particle_system_handle(), target);
  }

  // optional int32 original_move_speed = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_original_move_speed(), target);
  }

  // optional uint32 ability = 18 [default = 16777215];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_Projectile)
  return target;
}

size_t CDOTAUserMsg_TE_Projectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_Projectile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 15;
  total_size += 1UL * this->_internal_particle_cp_data_size();
  for (const auto& msg : this->_impl_.particle_cp_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector target_loc = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_loc_);
    }

    // optional int32 move_speed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_move_speed());
    }

    // optional int32 source_attachment = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_attachment());
    }

    // optional int64 particle_system_handle = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_particle_system_handle());
    }

    // optional bool dodgeable = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_attack = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float expire_time = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float maximpacttime = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional fixed32 colorgemcolor = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 launch_tick = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_launch_tick());
    }

    // optional int32 handle = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle());
    }

    // optional int64 additional_particle_system_handle = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_additional_particle_system_handle());
    }

    // optional int32 original_move_speed = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_original_move_speed());
    }

    // optional uint32 ability = 18 [default = 16777215];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ability());
    }

    // optional uint32 source = 1 [default = 16777215];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source());
    }

    // optional uint32 target = 2 [default = 16777215];
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TE_Projectile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TE_Projectile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TE_Projectile::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TE_Projectile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TE_Projectile*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TE_Projectile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_Projectile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.particle_cp_data_.MergeFrom(from._impl_.particle_cp_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target_loc()->::CMsgVector::MergeFrom(
          from._internal_target_loc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.move_speed_ = from._impl_.move_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_attachment_ = from._impl_.source_attachment_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.particle_system_handle_ = from._impl_.particle_system_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dodgeable_ = from._impl_.dodgeable_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_attack_ = from._impl_.is_attack_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.expire_time_ = from._impl_.expire_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.maximpacttime_ = from._impl_.maximpacttime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.colorgemcolor_ = from._impl_.colorgemcolor_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.launch_tick_ = from._impl_.launch_tick_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.additional_particle_system_handle_ = from._impl_.additional_particle_system_handle_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.original_move_speed_ = from._impl_.original_move_speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.ability_ = from._impl_.ability_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.target_ = from._impl_.target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TE_Projectile::CopyFrom(const CDOTAUserMsg_TE_Projectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_Projectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_Projectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_Projectile::InternalSwap(CDOTAUserMsg_TE_Projectile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.particle_cp_data_.InternalSwap(&other->_impl_.particle_cp_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, _impl_.original_move_speed_)
      + sizeof(CDOTAUserMsg_TE_Projectile::_impl_.original_move_speed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, _impl_.target_loc_)>(
          reinterpret_cast<char*>(&_impl_.target_loc_),
          reinterpret_cast<char*>(&other->_impl_.target_loc_));
  swap(_impl_.ability_, other->_impl_.ability_);
  swap(_impl_.source_, other->_impl_.source_);
  swap(_impl_.target_, other->_impl_.target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_Projectile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[83]);
}

// ===================================================================

class CDOTAUserMsg_TE_ProjectileLoc::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_ProjectileLoc>()._impl_._has_bits_);
  static const ::CMsgVector& source_loc(const CDOTAUserMsg_TE_ProjectileLoc* msg);
  static void set_has_source_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_move_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_particle_system_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dodgeable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_attack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_expire_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgVector& target_loc(const CDOTAUserMsg_TE_ProjectileLoc* msg);
  static void set_has_target_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_colorgemcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_launch_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_source_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_additional_particle_system_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_original_move_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_TE_ProjectileLoc::_Internal::source_loc(const CDOTAUserMsg_TE_ProjectileLoc* msg) {
  return *msg->_impl_.source_loc_;
}
const ::CMsgVector&
CDOTAUserMsg_TE_ProjectileLoc::_Internal::target_loc(const CDOTAUserMsg_TE_ProjectileLoc* msg) {
  return *msg->_impl_.target_loc_;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_source_loc() {
  if (_impl_.source_loc_ != nullptr) _impl_.source_loc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_target_loc() {
  if (_impl_.target_loc_ != nullptr) _impl_.target_loc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_ProjectileLoc)
}
CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc(const CDOTAUserMsg_TE_ProjectileLoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TE_ProjectileLoc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.particle_cp_data_){from._impl_.particle_cp_data_}
    , decltype(_impl_.source_loc_){nullptr}
    , decltype(_impl_.target_loc_){nullptr}
    , decltype(_impl_.particle_system_handle_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.dodgeable_){}
    , decltype(_impl_.is_attack_){}
    , decltype(_impl_.expire_time_){}
    , decltype(_impl_.colorgemcolor_){}
    , decltype(_impl_.launch_tick_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.source_attachment_){}
    , decltype(_impl_.original_move_speed_){}
    , decltype(_impl_.additional_particle_system_handle_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_loc()) {
    _this->_impl_.source_loc_ = new ::CMsgVector(*from._impl_.source_loc_);
  }
  if (from._internal_has_target_loc()) {
    _this->_impl_.target_loc_ = new ::CMsgVector(*from._impl_.target_loc_);
  }
  ::memcpy(&_impl_.particle_system_handle_, &from._impl_.particle_system_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_) -
    reinterpret_cast<char*>(&_impl_.particle_system_handle_)) + sizeof(_impl_.source_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_ProjectileLoc)
}

inline void CDOTAUserMsg_TE_ProjectileLoc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.particle_cp_data_){arena}
    , decltype(_impl_.source_loc_){nullptr}
    , decltype(_impl_.target_loc_){nullptr}
    , decltype(_impl_.particle_system_handle_){int64_t{0}}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.dodgeable_){false}
    , decltype(_impl_.is_attack_){false}
    , decltype(_impl_.expire_time_){0}
    , decltype(_impl_.colorgemcolor_){0u}
    , decltype(_impl_.launch_tick_){0}
    , decltype(_impl_.handle_){0}
    , decltype(_impl_.source_attachment_){0}
    , decltype(_impl_.original_move_speed_){0}
    , decltype(_impl_.additional_particle_system_handle_){int64_t{0}}
    , decltype(_impl_.target_){16777215u}
    , decltype(_impl_.source_){16777215u}
  };
}

CDOTAUserMsg_TE_ProjectileLoc::~CDOTAUserMsg_TE_ProjectileLoc() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_ProjectileLoc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TE_ProjectileLoc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.particle_cp_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.source_loc_;
  if (this != internal_default_instance()) delete _impl_.target_loc_;
}

void CDOTAUserMsg_TE_ProjectileLoc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TE_ProjectileLoc::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_ProjectileLoc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.particle_cp_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.source_loc_ != nullptr);
      _impl_.source_loc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.target_loc_ != nullptr);
      _impl_.target_loc_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.particle_system_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.colorgemcolor_) -
        reinterpret_cast<char*>(&_impl_.particle_system_handle_)) + sizeof(_impl_.colorgemcolor_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.launch_tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.additional_particle_system_handle_) -
        reinterpret_cast<char*>(&_impl_.launch_tick_)) + sizeof(_impl_.additional_particle_system_handle_));
    _impl_.target_ = 16777215u;
    _impl_.source_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_ProjectileLoc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector source_loc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target(&has_bits);
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 move_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_move_speed(&has_bits);
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 particle_system_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_particle_system_handle(&has_bits);
          _impl_.particle_system_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dodgeable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dodgeable(&has_bits);
          _impl_.dodgeable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_attack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_attack(&has_bits);
          _impl_.is_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float expire_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_expire_time(&has_bits);
          _impl_.expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector target_loc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 colorgemcolor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_colorgemcolor(&has_bits);
          _impl_.colorgemcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 launch_tick = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_launch_tick(&has_bits);
          _impl_.launch_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 handle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source = 14 [default = 16777215];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_source(&has_bits);
          _impl_.source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source_attachment = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_source_attachment(&has_bits);
          _impl_.source_attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_particle_cp_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 additional_particle_system_handle = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_additional_particle_system_handle(&has_bits);
          _impl_.additional_particle_system_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 original_move_speed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_original_move_speed(&has_bits);
          _impl_.original_move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TE_ProjectileLoc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_ProjectileLoc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector source_loc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_loc(this),
        _Internal::source_loc(this).GetCachedSize(), target, stream);
  }

  // optional uint32 target = 2 [default = 16777215];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target(), target);
  }

  // optional int32 move_speed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_move_speed(), target);
  }

  // optional int64 particle_system_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_particle_system_handle(), target);
  }

  // optional bool dodgeable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_dodgeable(), target);
  }

  // optional bool is_attack = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_attack(), target);
  }

  // optional float expire_time = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_expire_time(), target);
  }

  // optional .CMsgVector target_loc = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::target_loc(this),
        _Internal::target_loc(this).GetCachedSize(), target, stream);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(11, this->_internal_colorgemcolor(), target);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_launch_tick(), target);
  }

  // optional int32 handle = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_handle(), target);
  }

  // optional uint32 source = 14 [default = 16777215];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_source(), target);
  }

  // optional int32 source_attachment = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_source_attachment(), target);
  }

  // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_particle_cp_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_particle_cp_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 additional_particle_system_handle = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_additional_particle_system_handle(), target);
  }

  // optional int32 original_move_speed = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_original_move_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_ProjectileLoc)
  return target;
}

size_t CDOTAUserMsg_TE_ProjectileLoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_ProjectileLoc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_ProjectileParticleCPData particle_cp_data = 16;
  total_size += 2UL * this->_internal_particle_cp_data_size();
  for (const auto& msg : this->_impl_.particle_cp_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector source_loc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_loc_);
    }

    // optional .CMsgVector target_loc = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_loc_);
    }

    // optional int64 particle_system_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_particle_system_handle());
    }

    // optional int32 move_speed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_move_speed());
    }

    // optional bool dodgeable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_attack = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float expire_time = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorgemcolor = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 launch_tick = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_launch_tick());
    }

    // optional int32 handle = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle());
    }

    // optional int32 source_attachment = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_attachment());
    }

    // optional int32 original_move_speed = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_original_move_speed());
    }

    // optional int64 additional_particle_system_handle = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_additional_particle_system_handle());
    }

    // optional uint32 target = 2 [default = 16777215];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target());
    }

    // optional uint32 source = 14 [default = 16777215];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TE_ProjectileLoc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TE_ProjectileLoc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TE_ProjectileLoc::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TE_ProjectileLoc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TE_ProjectileLoc*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TE_ProjectileLoc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_ProjectileLoc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.particle_cp_data_.MergeFrom(from._impl_.particle_cp_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_source_loc()->::CMsgVector::MergeFrom(
          from._internal_source_loc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_target_loc()->::CMsgVector::MergeFrom(
          from._internal_target_loc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.particle_system_handle_ = from._impl_.particle_system_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.move_speed_ = from._impl_.move_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dodgeable_ = from._impl_.dodgeable_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_attack_ = from._impl_.is_attack_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.expire_time_ = from._impl_.expire_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.colorgemcolor_ = from._impl_.colorgemcolor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.launch_tick_ = from._impl_.launch_tick_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.source_attachment_ = from._impl_.source_attachment_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.original_move_speed_ = from._impl_.original_move_speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.additional_particle_system_handle_ = from._impl_.additional_particle_system_handle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.target_ = from._impl_.target_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TE_ProjectileLoc::CopyFrom(const CDOTAUserMsg_TE_ProjectileLoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_ProjectileLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_ProjectileLoc::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_ProjectileLoc::InternalSwap(CDOTAUserMsg_TE_ProjectileLoc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.particle_cp_data_.InternalSwap(&other->_impl_.particle_cp_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, _impl_.additional_particle_system_handle_)
      + sizeof(CDOTAUserMsg_TE_ProjectileLoc::_impl_.additional_particle_system_handle_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, _impl_.source_loc_)>(
          reinterpret_cast<char*>(&_impl_.source_loc_),
          reinterpret_cast<char*>(&other->_impl_.source_loc_));
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_.source_, other->_impl_.source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_ProjectileLoc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[84]);
}

// ===================================================================

class CDOTAUserMsg_TE_DestroyProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_DestroyProjectile>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_TE_DestroyProjectile::CDOTAUserMsg_TE_DestroyProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_DestroyProjectile)
}
CDOTAUserMsg_TE_DestroyProjectile::CDOTAUserMsg_TE_DestroyProjectile(const CDOTAUserMsg_TE_DestroyProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TE_DestroyProjectile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.handle_ = from._impl_.handle_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_DestroyProjectile)
}

inline void CDOTAUserMsg_TE_DestroyProjectile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){0}
  };
}

CDOTAUserMsg_TE_DestroyProjectile::~CDOTAUserMsg_TE_DestroyProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_DestroyProjectile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TE_DestroyProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_TE_DestroyProjectile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TE_DestroyProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_DestroyProjectile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.handle_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_DestroyProjectile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TE_DestroyProjectile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_DestroyProjectile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_DestroyProjectile)
  return target;
}

size_t CDOTAUserMsg_TE_DestroyProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_DestroyProjectile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TE_DestroyProjectile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TE_DestroyProjectile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TE_DestroyProjectile::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TE_DestroyProjectile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TE_DestroyProjectile*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TE_DestroyProjectile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_DestroyProjectile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _this->_internal_set_handle(from._internal_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TE_DestroyProjectile::CopyFrom(const CDOTAUserMsg_TE_DestroyProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_DestroyProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_DestroyProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_DestroyProjectile::InternalSwap(CDOTAUserMsg_TE_DestroyProjectile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.handle_, other->_impl_.handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_DestroyProjectile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[85]);
}

// ===================================================================

class CDOTAUserMsg_TE_DotaBloodImpact::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_DotaBloodImpact>()._impl_._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xnormal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ynormal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_DotaBloodImpact)
}
CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact(const CDOTAUserMsg_TE_DotaBloodImpact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TE_DotaBloodImpact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.xnormal_){}
    , decltype(_impl_.ynormal_){}
    , decltype(_impl_.entity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scale_, &from._impl_.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_) -
    reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.entity_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_DotaBloodImpact)
}

inline void CDOTAUserMsg_TE_DotaBloodImpact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.xnormal_){0}
    , decltype(_impl_.ynormal_){0}
    , decltype(_impl_.entity_){16777215u}
  };
}

CDOTAUserMsg_TE_DotaBloodImpact::~CDOTAUserMsg_TE_DotaBloodImpact() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_DotaBloodImpact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TE_DotaBloodImpact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_TE_DotaBloodImpact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TE_DotaBloodImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_DotaBloodImpact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ynormal_) -
        reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.ynormal_));
    _impl_.entity_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_DotaBloodImpact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 entity = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity(&has_bits);
          _impl_.entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xnormal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_xnormal(&has_bits);
          _impl_.xnormal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ynormal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_ynormal(&has_bits);
          _impl_.ynormal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TE_DotaBloodImpact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_DotaBloodImpact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 entity = 1 [default = 16777215];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float xnormal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_xnormal(), target);
  }

  // optional float ynormal = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_ynormal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_DotaBloodImpact)
  return target;
}

size_t CDOTAUserMsg_TE_DotaBloodImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_DotaBloodImpact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float scale = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float xnormal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float ynormal = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 entity = 1 [default = 16777215];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TE_DotaBloodImpact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TE_DotaBloodImpact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TE_DotaBloodImpact::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TE_DotaBloodImpact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TE_DotaBloodImpact*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TE_DotaBloodImpact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_DotaBloodImpact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xnormal_ = from._impl_.xnormal_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ynormal_ = from._impl_.ynormal_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entity_ = from._impl_.entity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TE_DotaBloodImpact::CopyFrom(const CDOTAUserMsg_TE_DotaBloodImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_DotaBloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_DotaBloodImpact::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_DotaBloodImpact::InternalSwap(CDOTAUserMsg_TE_DotaBloodImpact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, _impl_.ynormal_)
      + sizeof(CDOTAUserMsg_TE_DotaBloodImpact::_impl_.ynormal_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, _impl_.scale_)>(
          reinterpret_cast<char*>(&_impl_.scale_),
          reinterpret_cast<char*>(&other->_impl_.scale_));
  swap(_impl_.entity_, other->_impl_.entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_DotaBloodImpact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[86]);
}

// ===================================================================

class CDOTAUserMsg_AbilityPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AbilityPing>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passive(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mana_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_primary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ctrl_held(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reclaim_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AbilityPing)
}
CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(const CDOTAUserMsg_AbilityPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AbilityPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_seconds_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.mana_needed_){}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.primary_charges_){}
    , decltype(_impl_.passive_){}
    , decltype(_impl_.ctrl_held_){}
    , decltype(_impl_.secondary_charges_){}
    , decltype(_impl_.reclaim_time_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cooldown_seconds_, &from._impl_.cooldown_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.cooldown_seconds_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilityPing)
}

inline void CDOTAUserMsg_AbilityPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_seconds_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.mana_needed_){0u}
    , decltype(_impl_.entity_id_){0u}
    , decltype(_impl_.primary_charges_){0}
    , decltype(_impl_.passive_){false}
    , decltype(_impl_.ctrl_held_){false}
    , decltype(_impl_.secondary_charges_){0}
    , decltype(_impl_.reclaim_time_){0}
    , decltype(_impl_.type_){1}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.ability_id_){-1}
  };
}

CDOTAUserMsg_AbilityPing::~CDOTAUserMsg_AbilityPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilityPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AbilityPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_AbilityPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AbilityPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AbilityPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cooldown_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.secondary_charges_) -
        reinterpret_cast<char*>(&_impl_.cooldown_seconds_)) + sizeof(_impl_.secondary_charges_));
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.reclaim_time_ = 0;
    _impl_.type_ = 1;
    _impl_.player_id_ = -1;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AbilityPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_ABILITY_PING_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::DOTA_ABILITY_PING_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cooldown_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cooldown_seconds(&has_bits);
          _impl_.cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool passive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_passive(&has_bits);
          _impl_.passive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mana_needed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_mana_needed(&has_bits);
          _impl_.mana_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_entity_id(&has_bits);
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 primary_charges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_primary_charges(&has_bits);
          _impl_.primary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 secondary_charges = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_secondary_charges(&has_bits);
          _impl_.secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ctrl_held = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ctrl_held(&has_bits);
          _impl_.ctrl_held_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float reclaim_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_reclaim_time(&has_bits);
          _impl_.reclaim_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AbilityPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilityPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 ability_id = 2 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional uint32 cooldown_seconds = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cooldown_seconds(), target);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // optional bool passive = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_passive(), target);
  }

  // optional uint32 mana_needed = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mana_needed(), target);
  }

  // optional uint32 entity_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_entity_id(), target);
  }

  // optional int32 primary_charges = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_primary_charges(), target);
  }

  // optional int32 secondary_charges = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_secondary_charges(), target);
  }

  // optional bool ctrl_held = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_ctrl_held(), target);
  }

  // optional float reclaim_time = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_reclaim_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilityPing)
  return target;
}

size_t CDOTAUserMsg_AbilityPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AbilityPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 cooldown_seconds = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cooldown_seconds());
    }

    // optional uint32 level = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 mana_needed = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mana_needed());
    }

    // optional uint32 entity_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
    }

    // optional int32 primary_charges = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_primary_charges());
    }

    // optional bool passive = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ctrl_held = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 secondary_charges = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_secondary_charges());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float reclaim_time = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 ability_id = 2 [default = -1];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AbilityPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AbilityPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AbilityPing::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AbilityPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AbilityPing*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AbilityPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AbilityPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cooldown_seconds_ = from._impl_.cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mana_needed_ = from._impl_.mana_needed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entity_id_ = from._impl_.entity_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.primary_charges_ = from._impl_.primary_charges_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.passive_ = from._impl_.passive_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ctrl_held_ = from._impl_.ctrl_held_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.secondary_charges_ = from._impl_.secondary_charges_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.reclaim_time_ = from._impl_.reclaim_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AbilityPing::CopyFrom(const CDOTAUserMsg_AbilityPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AbilityPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilityPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilityPing::InternalSwap(CDOTAUserMsg_AbilityPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, _impl_.reclaim_time_)
      + sizeof(CDOTAUserMsg_AbilityPing::_impl_.reclaim_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, _impl_.cooldown_seconds_)>(
          reinterpret_cast<char*>(&_impl_.cooldown_seconds_),
          reinterpret_cast<char*>(&other->_impl_.cooldown_seconds_));
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AbilityPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[87]);
}

// ===================================================================

class CDOTAUserMsg_TE_UnitAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_UnitAnimation>()._impl_._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sequence_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playbackrate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_castpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lag_compensation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_UnitAnimation)
}
CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation(const CDOTAUserMsg_TE_UnitAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TE_UnitAnimation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequence_variant_){}
    , decltype(_impl_.playbackrate_){}
    , decltype(_impl_.castpoint_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.activity_){}
    , decltype(_impl_.lag_compensation_time_){}
    , decltype(_impl_.entity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sequence_variant_, &from._impl_.sequence_variant_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_) -
    reinterpret_cast<char*>(&_impl_.sequence_variant_)) + sizeof(_impl_.entity_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_UnitAnimation)
}

inline void CDOTAUserMsg_TE_UnitAnimation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequence_variant_){0}
    , decltype(_impl_.playbackrate_){0}
    , decltype(_impl_.castpoint_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.activity_){0}
    , decltype(_impl_.lag_compensation_time_){0}
    , decltype(_impl_.entity_){16777215u}
  };
}

CDOTAUserMsg_TE_UnitAnimation::~CDOTAUserMsg_TE_UnitAnimation() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_UnitAnimation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TE_UnitAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_TE_UnitAnimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TE_UnitAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_UnitAnimation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.sequence_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lag_compensation_time_) -
        reinterpret_cast<char*>(&_impl_.sequence_variant_)) + sizeof(_impl_.lag_compensation_time_));
    _impl_.entity_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_UnitAnimation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 entity = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity(&has_bits);
          _impl_.entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_variant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sequence_variant(&has_bits);
          _impl_.sequence_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float playbackrate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_playbackrate(&has_bits);
          _impl_.playbackrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float castpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_castpoint(&has_bits);
          _impl_.castpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 activity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_activity(&has_bits);
          _impl_.activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float lag_compensation_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_lag_compensation_time(&has_bits);
          _impl_.lag_compensation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TE_UnitAnimation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_UnitAnimation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 entity = 1 [default = 16777215];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity(), target);
  }

  // optional int32 sequence_variant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence_variant(), target);
  }

  // optional float playbackrate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_playbackrate(), target);
  }

  // optional float castpoint = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_castpoint(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // optional int32 activity = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_activity(), target);
  }

  // optional float lag_compensation_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_lag_compensation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_UnitAnimation)
  return target;
}

size_t CDOTAUserMsg_TE_UnitAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_UnitAnimation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 sequence_variant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_variant());
    }

    // optional float playbackrate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float castpoint = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 activity = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activity());
    }

    // optional float lag_compensation_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 entity = 1 [default = 16777215];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TE_UnitAnimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TE_UnitAnimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TE_UnitAnimation::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TE_UnitAnimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TE_UnitAnimation*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TE_UnitAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_UnitAnimation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sequence_variant_ = from._impl_.sequence_variant_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playbackrate_ = from._impl_.playbackrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.castpoint_ = from._impl_.castpoint_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.activity_ = from._impl_.activity_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.lag_compensation_time_ = from._impl_.lag_compensation_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.entity_ = from._impl_.entity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TE_UnitAnimation::CopyFrom(const CDOTAUserMsg_TE_UnitAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_UnitAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_UnitAnimation::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_UnitAnimation::InternalSwap(CDOTAUserMsg_TE_UnitAnimation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, _impl_.lag_compensation_time_)
      + sizeof(CDOTAUserMsg_TE_UnitAnimation::_impl_.lag_compensation_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, _impl_.sequence_variant_)>(
          reinterpret_cast<char*>(&_impl_.sequence_variant_),
          reinterpret_cast<char*>(&other->_impl_.sequence_variant_));
  swap(_impl_.entity_, other->_impl_.entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_UnitAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[88]);
}

// ===================================================================

class CDOTAUserMsg_TE_UnitAnimationEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_UnitAnimationEnd>()._impl_._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_UnitAnimationEnd)
}
CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd(const CDOTAUserMsg_TE_UnitAnimationEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TE_UnitAnimationEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snap_){}
    , decltype(_impl_.entity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.snap_, &from._impl_.snap_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_) -
    reinterpret_cast<char*>(&_impl_.snap_)) + sizeof(_impl_.entity_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_UnitAnimationEnd)
}

inline void CDOTAUserMsg_TE_UnitAnimationEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snap_){false}
    , decltype(_impl_.entity_){16777215u}
  };
}

CDOTAUserMsg_TE_UnitAnimationEnd::~CDOTAUserMsg_TE_UnitAnimationEnd() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_UnitAnimationEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TE_UnitAnimationEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_TE_UnitAnimationEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TE_UnitAnimationEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.snap_ = false;
    _impl_.entity_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_UnitAnimationEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 entity = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity(&has_bits);
          _impl_.entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool snap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_snap(&has_bits);
          _impl_.snap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TE_UnitAnimationEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 entity = 1 [default = 16777215];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity(), target);
  }

  // optional bool snap = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_snap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_UnitAnimationEnd)
  return target;
}

size_t CDOTAUserMsg_TE_UnitAnimationEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool snap = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 entity = 1 [default = 16777215];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TE_UnitAnimationEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TE_UnitAnimationEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TE_UnitAnimationEnd::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TE_UnitAnimationEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TE_UnitAnimationEnd*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TE_UnitAnimationEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.snap_ = from._impl_.snap_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entity_ = from._impl_.entity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TE_UnitAnimationEnd::CopyFrom(const CDOTAUserMsg_TE_UnitAnimationEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_UnitAnimationEnd::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_UnitAnimationEnd::InternalSwap(CDOTAUserMsg_TE_UnitAnimationEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.snap_, other->_impl_.snap_);
  swap(_impl_.entity_, other->_impl_.entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_UnitAnimationEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[89]);
}

// ===================================================================

class CDOTAUserMsg_ShowGenericPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ShowGenericPopup>()._impl_._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tint_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_no_other_dialogs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ShowGenericPopup)
}
CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(const CDOTAUserMsg_ShowGenericPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ShowGenericPopup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.param1_){}
    , decltype(_impl_.param2_){}
    , decltype(_impl_.tint_screen_){}
    , decltype(_impl_.show_no_other_dialogs_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_header()) {
    _this->_impl_.header_.Set(from._internal_header(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.param1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_param1()) {
    _this->_impl_.param1_.Set(from._internal_param1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.param2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_param2()) {
    _this->_impl_.param2_.Set(from._internal_param2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tint_screen_, &from._impl_.tint_screen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_no_other_dialogs_) -
    reinterpret_cast<char*>(&_impl_.tint_screen_)) + sizeof(_impl_.show_no_other_dialogs_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShowGenericPopup)
}

inline void CDOTAUserMsg_ShowGenericPopup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.param1_){}
    , decltype(_impl_.param2_){}
    , decltype(_impl_.tint_screen_){false}
    , decltype(_impl_.show_no_other_dialogs_){false}
  };
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_ShowGenericPopup::~CDOTAUserMsg_ShowGenericPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShowGenericPopup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ShowGenericPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.Destroy();
  _impl_.body_.Destroy();
  _impl_.param1_.Destroy();
  _impl_.param2_.Destroy();
}

void CDOTAUserMsg_ShowGenericPopup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ShowGenericPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ShowGenericPopup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.param1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.param2_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.tint_screen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.show_no_other_dialogs_) -
      reinterpret_cast<char*>(&_impl_.tint_screen_)) + sizeof(_impl_.show_no_other_dialogs_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ShowGenericPopup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.header");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.body");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string param1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_param1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.param1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string param2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_param2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.param2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool tint_screen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tint_screen(&has_bits);
          _impl_.tint_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_no_other_dialogs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_show_no_other_dialogs(&has_bits);
          _impl_.show_no_other_dialogs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ShowGenericPopup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShowGenericPopup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // required string body = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional string param1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param1().data(), static_cast<int>(this->_internal_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.param1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_param1(), target);
  }

  // optional string param2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param2().data(), static_cast<int>(this->_internal_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.param2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_param2(), target);
  }

  // optional bool tint_screen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_tint_screen(), target);
  }

  // optional bool show_no_other_dialogs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_show_no_other_dialogs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShowGenericPopup)
  return target;
}

size_t CDOTAUserMsg_ShowGenericPopup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAUserMsg_ShowGenericPopup)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required string header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  if (_internal_has_body()) {
    // required string body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return total_size;
}
size_t CDOTAUserMsg_ShowGenericPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ShowGenericPopup)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());

    // required string body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional string param1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param1());
    }

    // optional string param2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param2());
    }

    // optional bool tint_screen = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool show_no_other_dialogs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ShowGenericPopup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ShowGenericPopup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ShowGenericPopup::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ShowGenericPopup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ShowGenericPopup*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ShowGenericPopup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ShowGenericPopup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_param1(from._internal_param1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_param2(from._internal_param2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tint_screen_ = from._impl_.tint_screen_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.show_no_other_dialogs_ = from._impl_.show_no_other_dialogs_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ShowGenericPopup::CopyFrom(const CDOTAUserMsg_ShowGenericPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ShowGenericPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowGenericPopup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_ShowGenericPopup::InternalSwap(CDOTAUserMsg_ShowGenericPopup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_, lhs_arena,
      &other->_impl_.header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param1_, lhs_arena,
      &other->_impl_.param1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param2_, lhs_arena,
      &other->_impl_.param2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, _impl_.show_no_other_dialogs_)
      + sizeof(CDOTAUserMsg_ShowGenericPopup::_impl_.show_no_other_dialogs_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, _impl_.tint_screen_)>(
          reinterpret_cast<char*>(&_impl_.tint_screen_),
          reinterpret_cast<char*>(&other->_impl_.tint_screen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ShowGenericPopup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[90]);
}

// ===================================================================

class CDOTAUserMsg_VoteStart::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_VoteStart>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_choice_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VoteStart)
}
CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(const CDOTAUserMsg_VoteStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_VoteStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.choices_){from._impl_.choices_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.choice_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.choice_count_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.choice_count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteStart)
}

inline void CDOTAUserMsg_VoteStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.choices_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.choice_count_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_VoteStart::~CDOTAUserMsg_VoteStart() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_VoteStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.choices_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void CDOTAUserMsg_VoteStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_VoteStart::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VoteStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.choices_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.choice_count_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.choice_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VoteStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_VoteStart.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 choice_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_choice_count(&has_bits);
          _impl_.choice_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string choices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_choices();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_VoteStart.choices");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_VoteStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_VoteStart.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional int32 choice_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_choice_count(), target);
  }

  // repeated string choices = 4;
  for (int i = 0, n = this->_internal_choices_size(); i < n; i++) {
    const auto& s = this->_internal_choices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_VoteStart.choices");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteStart)
  return target;
}

size_t CDOTAUserMsg_VoteStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VoteStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string choices = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.choices_.size());
  for (int i = 0, n = _impl_.choices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.choices_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 choice_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_choice_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_VoteStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_VoteStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_VoteStart::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_VoteStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_VoteStart*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_VoteStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VoteStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.choices_.MergeFrom(from._impl_.choices_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.choice_count_ = from._impl_.choice_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_VoteStart::CopyFrom(const CDOTAUserMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VoteStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteStart::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteStart::InternalSwap(CDOTAUserMsg_VoteStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.choices_.InternalSwap(&other->_impl_.choices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VoteStart, _impl_.choice_count_)
      + sizeof(CDOTAUserMsg_VoteStart::_impl_.choice_count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VoteStart, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VoteStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[91]);
}

// ===================================================================

class CDOTAUserMsg_VoteUpdate::_Internal {
 public:
};

CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VoteUpdate)
}
CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(const CDOTAUserMsg_VoteUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_VoteUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.choice_counts_){from._impl_.choice_counts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteUpdate)
}

inline void CDOTAUserMsg_VoteUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.choice_counts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_VoteUpdate::~CDOTAUserMsg_VoteUpdate() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_VoteUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.choice_counts_.~RepeatedField();
}

void CDOTAUserMsg_VoteUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_VoteUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VoteUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.choice_counts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VoteUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 choice_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_choice_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_choice_counts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_VoteUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 choice_counts = 1;
  for (int i = 0, n = this->_internal_choice_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_choice_counts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteUpdate)
  return target;
}

size_t CDOTAUserMsg_VoteUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VoteUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 choice_counts = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.choice_counts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_choice_counts_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_VoteUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_VoteUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_VoteUpdate::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_VoteUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_VoteUpdate*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_VoteUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VoteUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.choice_counts_.MergeFrom(from._impl_.choice_counts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_VoteUpdate::CopyFrom(const CDOTAUserMsg_VoteUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VoteUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteUpdate::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteUpdate::InternalSwap(CDOTAUserMsg_VoteUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.choice_counts_.InternalSwap(&other->_impl_.choice_counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VoteUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[92]);
}

// ===================================================================

class CDOTAUserMsg_VoteEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_VoteEnd>()._impl_._has_bits_);
  static void set_has_selected_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VoteEnd)
}
CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(const CDOTAUserMsg_VoteEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_VoteEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selected_choice_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.selected_choice_ = from._impl_.selected_choice_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteEnd)
}

inline void CDOTAUserMsg_VoteEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selected_choice_){0}
  };
}

CDOTAUserMsg_VoteEnd::~CDOTAUserMsg_VoteEnd() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_VoteEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_VoteEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_VoteEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VoteEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selected_choice_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VoteEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 selected_choice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_selected_choice(&has_bits);
          _impl_.selected_choice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_VoteEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 selected_choice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_selected_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteEnd)
  return target;
}

size_t CDOTAUserMsg_VoteEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VoteEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 selected_choice = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_selected_choice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_VoteEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_VoteEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_VoteEnd::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_VoteEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_VoteEnd*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_VoteEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VoteEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selected_choice()) {
    _this->_internal_set_selected_choice(from._internal_selected_choice());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_VoteEnd::CopyFrom(const CDOTAUserMsg_VoteEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VoteEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteEnd::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteEnd::InternalSwap(CDOTAUserMsg_VoteEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.selected_choice_, other->_impl_.selected_choice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VoteEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[93]);
}

// ===================================================================

class CDOTAUserMsg_BoosterStatePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BoosterStatePlayer>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_bonus_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BoosterStatePlayer)
}
CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(const CDOTAUserMsg_BoosterStatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_BoosterStatePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bonus_){}
    , decltype(_impl_.event_bonus_){}
    , decltype(_impl_.bonus_item_id_){}
    , decltype(_impl_.event_bonus_item_id_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bonus_, &from._impl_.bonus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.bonus_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BoosterStatePlayer)
}

inline void CDOTAUserMsg_BoosterStatePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bonus_){0}
    , decltype(_impl_.event_bonus_){0}
    , decltype(_impl_.bonus_item_id_){0u}
    , decltype(_impl_.event_bonus_item_id_){0u}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_BoosterStatePlayer::~CDOTAUserMsg_BoosterStatePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BoosterStatePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_BoosterStatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_BoosterStatePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_BoosterStatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BoosterStatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.bonus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_bonus_item_id_) -
        reinterpret_cast<char*>(&_impl_.bonus_)) + sizeof(_impl_.event_bonus_item_id_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BoosterStatePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float bonus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_bonus(&has_bits);
          _impl_.bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float event_bonus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_event_bonus(&has_bits);
          _impl_.event_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bonus_item_id(&has_bits);
          _impl_.bonus_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_bonus_item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_event_bonus_item_id(&has_bits);
          _impl_.event_bonus_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_BoosterStatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BoosterStatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float bonus = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_bonus(), target);
  }

  // optional float event_bonus = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_event_bonus(), target);
  }

  // optional uint32 bonus_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bonus_item_id(), target);
  }

  // optional uint32 event_bonus_item_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_bonus_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BoosterStatePlayer)
  return target;
}

size_t CDOTAUserMsg_BoosterStatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BoosterStatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float bonus = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float event_bonus = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_item_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_item_id());
    }

    // optional uint32 event_bonus_item_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_bonus_item_id());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_BoosterStatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_BoosterStatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_BoosterStatePlayer::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_BoosterStatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_BoosterStatePlayer*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_BoosterStatePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BoosterStatePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bonus_ = from._impl_.bonus_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_bonus_ = from._impl_.event_bonus_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bonus_item_id_ = from._impl_.bonus_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_bonus_item_id_ = from._impl_.event_bonus_item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_BoosterStatePlayer::CopyFrom(const CDOTAUserMsg_BoosterStatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BoosterStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterStatePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BoosterStatePlayer::InternalSwap(CDOTAUserMsg_BoosterStatePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, _impl_.event_bonus_item_id_)
      + sizeof(CDOTAUserMsg_BoosterStatePlayer::_impl_.event_bonus_item_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, _impl_.bonus_)>(
          reinterpret_cast<char*>(&_impl_.bonus_),
          reinterpret_cast<char*>(&other->_impl_.bonus_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BoosterStatePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[94]);
}

// ===================================================================

class CDOTAUserMsg_BoosterState::_Internal {
 public:
};

CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BoosterState)
}
CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(const CDOTAUserMsg_BoosterState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_BoosterState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.boosted_players_){from._impl_.boosted_players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BoosterState)
}

inline void CDOTAUserMsg_BoosterState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.boosted_players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_BoosterState::~CDOTAUserMsg_BoosterState() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BoosterState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_BoosterState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.boosted_players_.~RepeatedPtrField();
}

void CDOTAUserMsg_BoosterState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_BoosterState::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BoosterState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.boosted_players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BoosterState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boosted_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_BoosterState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BoosterState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boosted_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_boosted_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BoosterState)
  return target;
}

size_t CDOTAUserMsg_BoosterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BoosterState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  total_size += 1UL * this->_internal_boosted_players_size();
  for (const auto& msg : this->_impl_.boosted_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_BoosterState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_BoosterState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_BoosterState::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_BoosterState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_BoosterState*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_BoosterState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BoosterState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.boosted_players_.MergeFrom(from._impl_.boosted_players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_BoosterState::CopyFrom(const CDOTAUserMsg_BoosterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BoosterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterState::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BoosterState::InternalSwap(CDOTAUserMsg_BoosterState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.boosted_players_.InternalSwap(&other->_impl_.boosted_players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BoosterState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[95]);
}

// ===================================================================

class CDOTAUserMsg_PlayerMMR::_Internal {
 public:
};

CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PlayerMMR)
}
CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(const CDOTAUserMsg_PlayerMMR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PlayerMMR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mmr_){from._impl_.mmr_}
    , /*decltype(_impl_._mmr_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PlayerMMR)
}

inline void CDOTAUserMsg_PlayerMMR::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mmr_){arena}
    , /*decltype(_impl_._mmr_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_PlayerMMR::~CDOTAUserMsg_PlayerMMR() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PlayerMMR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PlayerMMR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmr_.~RepeatedField();
}

void CDOTAUserMsg_PlayerMMR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PlayerMMR::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PlayerMMR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PlayerMMR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint32 mmr = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_mmr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_mmr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PlayerMMR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PlayerMMR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 mmr = 1 [packed = true];
  {
    int byte_size = _impl_._mmr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_mmr(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PlayerMMR)
  return target;
}

size_t CDOTAUserMsg_PlayerMMR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PlayerMMR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 mmr = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.mmr_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mmr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PlayerMMR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PlayerMMR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PlayerMMR::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PlayerMMR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PlayerMMR*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PlayerMMR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PlayerMMR)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmr_.MergeFrom(from._impl_.mmr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PlayerMMR::CopyFrom(const CDOTAUserMsg_PlayerMMR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PlayerMMR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PlayerMMR::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PlayerMMR::InternalSwap(CDOTAUserMsg_PlayerMMR* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mmr_.InternalSwap(&other->_impl_.mmr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PlayerMMR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[96]);
}

// ===================================================================

class CDOTAUserMsg_AbilitySteal::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AbilitySteal>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AbilitySteal)
}
CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(const CDOTAUserMsg_AbilitySteal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AbilitySteal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_level_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_level_, &from._impl_.ability_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.ability_level_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilitySteal)
}

inline void CDOTAUserMsg_AbilitySteal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_level_){0u}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.ability_id_){-1}
  };
}

CDOTAUserMsg_AbilitySteal::~CDOTAUserMsg_AbilitySteal() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilitySteal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AbilitySteal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_AbilitySteal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AbilitySteal::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AbilitySteal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.ability_level_ = 0u;
    _impl_.player_id_ = -1;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AbilitySteal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ability_level(&has_bits);
          _impl_.ability_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AbilitySteal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilitySteal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 ability_id = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional uint32 ability_level = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilitySteal)
  return target;
}

size_t CDOTAUserMsg_AbilitySteal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AbilitySteal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ability_level = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_level());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 ability_id = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AbilitySteal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AbilitySteal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AbilitySteal::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AbilitySteal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AbilitySteal*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AbilitySteal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AbilitySteal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_level_ = from._impl_.ability_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AbilitySteal::CopyFrom(const CDOTAUserMsg_AbilitySteal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AbilitySteal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilitySteal::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilitySteal::InternalSwap(CDOTAUserMsg_AbilitySteal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ability_level_, other->_impl_.ability_level_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AbilitySteal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[97]);
}

// ===================================================================

class CDOTAUserMsg_StatsHeroLookup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroLookup>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroLookup)
}
CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(const CDOTAUserMsg_StatsHeroLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsHeroLookup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_name_){}
    , decltype(_impl_.persona_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hero_name()) {
    _this->_impl_.hero_name_.Set(from._internal_hero_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.persona_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona()) {
    _this->_impl_.persona_.Set(from._internal_persona(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroLookup)
}

inline void CDOTAUserMsg_StatsHeroLookup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_name_){}
    , decltype(_impl_.persona_){}
    , decltype(_impl_.hero_id_){0}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.persona_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_StatsHeroLookup::~CDOTAUserMsg_StatsHeroLookup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroLookup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsHeroLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_name_.Destroy();
  _impl_.persona_.Destroy();
}

void CDOTAUserMsg_StatsHeroLookup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroLookup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hero_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.persona_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.hero_id_ = 0;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroLookup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hero_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hero_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_StatsHeroLookup.hero_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string persona = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_persona();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_StatsHeroLookup.persona");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsHeroLookup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroLookup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_name().data(), static_cast<int>(this->_internal_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_StatsHeroLookup.hero_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hero_name(), target);
  }

  // optional string persona = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona().data(), static_cast<int>(this->_internal_persona().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_StatsHeroLookup.persona");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_persona(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroLookup)
  return target;
}

size_t CDOTAUserMsg_StatsHeroLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroLookup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hero_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_name());
    }

    // optional string persona = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona());
    }

    // optional int32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hero_id());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsHeroLookup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsHeroLookup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsHeroLookup::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsHeroLookup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsHeroLookup*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsHeroLookup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroLookup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hero_name(from._internal_hero_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_persona(from._internal_persona());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsHeroLookup::CopyFrom(const CDOTAUserMsg_StatsHeroLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroLookup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroLookup::InternalSwap(CDOTAUserMsg_StatsHeroLookup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hero_name_, lhs_arena,
      &other->_impl_.hero_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_, lhs_arena,
      &other->_impl_.persona_, rhs_arena
  );
  swap(_impl_.hero_id_, other->_impl_.hero_id_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroLookup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[98]);
}

// ===================================================================

class CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroPositionInfo_PositionPair>()._impl_._has_bits_);
  static void set_has_position_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}
CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_category_){}
    , decltype(_impl_.position_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_category_, &from._impl_.position_category_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_count_) -
    reinterpret_cast<char*>(&_impl_.position_category_)) + sizeof(_impl_.position_count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}

inline void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_category_){0}
    , decltype(_impl_.position_count_){0u}
  };
}

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::~CDOTAUserMsg_StatsHeroPositionInfo_PositionPair() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.position_category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_count_) -
        reinterpret_cast<char*>(&_impl_.position_category_)) + sizeof(_impl_.position_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_POSITION_CATEGORY_IsValid(val))) {
            _internal_set_position_category(static_cast<::DOTA_POSITION_CATEGORY>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_position_count(&has_bits);
          _impl_.position_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_position_category(), target);
  }

  // optional uint32 position_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return target;
}

size_t CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_position_category());
    }

    // optional uint32 position_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsHeroPositionInfo_PositionPair*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.position_category_ = from._impl_.position_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.position_count_ = from._impl_.position_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::InternalSwap(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _impl_.position_count_)
      + sizeof(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_impl_.position_count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _impl_.position_category_)>(
          reinterpret_cast<char*>(&_impl_.position_category_),
          reinterpret_cast<char*>(&other->_impl_.position_category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[99]);
}

// ===================================================================

class CDOTAUserMsg_StatsHeroPositionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroPositionInfo>()._impl_._has_bits_);
  static void set_has_average_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroPositionInfo)
}
CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(const CDOTAUserMsg_StatsHeroPositionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsHeroPositionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_details_){from._impl_.position_details_}
    , decltype(_impl_.average_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.average_position_ = from._impl_.average_position_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroPositionInfo)
}

inline void CDOTAUserMsg_StatsHeroPositionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_details_){arena}
    , decltype(_impl_.average_position_){0}
  };
}

CDOTAUserMsg_StatsHeroPositionInfo::~CDOTAUserMsg_StatsHeroPositionInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroPositionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsHeroPositionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.position_details_.~RepeatedPtrField();
}

void CDOTAUserMsg_StatsHeroPositionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroPositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroPositionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_details_.Clear();
  _impl_.average_position_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroPositionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float average_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_average_position(&has_bits);
          _impl_.average_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_position_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsHeroPositionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroPositionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float average_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_average_position(), target);
  }

  // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_position_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_position_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroPositionInfo)
  return target;
}

size_t CDOTAUserMsg_StatsHeroPositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroPositionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  total_size += 1UL * this->_internal_position_details_size();
  for (const auto& msg : this->_impl_.position_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float average_position = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsHeroPositionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsHeroPositionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsHeroPositionInfo::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsHeroPositionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsHeroPositionInfo*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsHeroPositionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroPositionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.position_details_.MergeFrom(from._impl_.position_details_);
  if (from._internal_has_average_position()) {
    _this->_internal_set_average_position(from._internal_average_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsHeroPositionInfo::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo::InternalSwap(CDOTAUserMsg_StatsHeroPositionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.position_details_.InternalSwap(&other->_impl_.position_details_);
  swap(_impl_.average_position_, other->_impl_.average_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroPositionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[100]);
}

// ===================================================================

class CDOTAUserMsg_StatsHeroMinuteDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroMinuteDetails>()._impl_._has_bits_);
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CDOTAUserMsg_StatsHeroPositionInfo& position_info(const CDOTAUserMsg_StatsHeroMinuteDetails* msg);
  static void set_has_position_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_harvested_creep_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_claimed_farm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_runes_collected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tps_used(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CDOTAUserMsg_StatsHeroPositionInfo&
CDOTAUserMsg_StatsHeroMinuteDetails::_Internal::position_info(const CDOTAUserMsg_StatsHeroMinuteDetails* msg) {
  return *msg->_impl_.position_info_;
}
CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroMinuteDetails)
}
CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(const CDOTAUserMsg_StatsHeroMinuteDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsHeroMinuteDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mana_spent_){from._impl_.mana_spent_}
    , decltype(_impl_.damage_absorbed_){from._impl_.damage_absorbed_}
    , decltype(_impl_.damage_done_){from._impl_.damage_done_}
    , decltype(_impl_.position_info_){nullptr}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.hero_kills_){}
    , decltype(_impl_.hero_damage_){}
    , decltype(_impl_.tower_damage_){}
    , decltype(_impl_.total_xp_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.harvested_creep_gold_){}
    , decltype(_impl_.claimed_farm_){}
    , decltype(_impl_.wards_placed_){}
    , decltype(_impl_.runes_collected_){}
    , decltype(_impl_.tps_used_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_info()) {
    _this->_impl_.position_info_ = new ::CDOTAUserMsg_StatsHeroPositionInfo(*from._impl_.position_info_);
  }
  ::memcpy(&_impl_.last_hits_, &from._impl_.last_hits_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tps_used_) -
    reinterpret_cast<char*>(&_impl_.last_hits_)) + sizeof(_impl_.tps_used_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroMinuteDetails)
}

inline void CDOTAUserMsg_StatsHeroMinuteDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mana_spent_){arena}
    , decltype(_impl_.damage_absorbed_){arena}
    , decltype(_impl_.damage_done_){arena}
    , decltype(_impl_.position_info_){nullptr}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.hero_kills_){0u}
    , decltype(_impl_.hero_damage_){0u}
    , decltype(_impl_.tower_damage_){0u}
    , decltype(_impl_.total_xp_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.harvested_creep_gold_){0u}
    , decltype(_impl_.claimed_farm_){0u}
    , decltype(_impl_.wards_placed_){0u}
    , decltype(_impl_.runes_collected_){0u}
    , decltype(_impl_.tps_used_){0u}
  };
}

CDOTAUserMsg_StatsHeroMinuteDetails::~CDOTAUserMsg_StatsHeroMinuteDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroMinuteDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsHeroMinuteDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mana_spent_.~RepeatedField();
  _impl_.damage_absorbed_.~RepeatedField();
  _impl_.damage_done_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.position_info_;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroMinuteDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mana_spent_.Clear();
  _impl_.damage_absorbed_.Clear();
  _impl_.damage_done_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_info_ != nullptr);
    _impl_.position_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.last_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.harvested_creep_gold_) -
        reinterpret_cast<char*>(&_impl_.last_hits_)) + sizeof(_impl_.harvested_creep_gold_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.claimed_farm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tps_used_) -
        reinterpret_cast<char*>(&_impl_.claimed_farm_)) + sizeof(_impl_.tps_used_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroMinuteDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 last_hits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_hits(&has_bits);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_kills(&has_bits);
          _impl_.hero_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_damage(&has_bits);
          _impl_.hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tower_damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tower_damage(&has_bits);
          _impl_.tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_xp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_total_xp(&has_bits);
          _impl_.total_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 harvested_creep_gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_harvested_creep_gold(&has_bits);
          _impl_.harvested_creep_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 claimed_farm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_claimed_farm(&has_bits);
          _impl_.claimed_farm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wards_placed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_wards_placed(&has_bits);
          _impl_.wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 runes_collected = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_runes_collected(&has_bits);
          _impl_.runes_collected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tps_used = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tps_used(&has_bits);
          _impl_.tps_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 mana_spent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mana_spent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mana_spent(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 damage_absorbed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_damage_absorbed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_damage_absorbed(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 damage_done = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_damage_done(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_damage_done(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsHeroMinuteDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 last_hits = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_hits(), target);
  }

  // optional uint32 hero_kills = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_kills(), target);
  }

  // optional uint32 hero_damage = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_damage(), target);
  }

  // optional uint32 tower_damage = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tower_damage(), target);
  }

  // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::position_info(this),
        _Internal::position_info(this).GetCachedSize(), target, stream);
  }

  // optional uint32 total_xp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_xp(), target);
  }

  // optional uint32 net_worth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_net_worth(), target);
  }

  // optional uint32 harvested_creep_gold = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_harvested_creep_gold(), target);
  }

  // optional uint32 claimed_farm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_claimed_farm(), target);
  }

  // optional uint32 wards_placed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_wards_placed(), target);
  }

  // optional uint32 runes_collected = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_runes_collected(), target);
  }

  // optional uint32 tps_used = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tps_used(), target);
  }

  // repeated uint32 mana_spent = 13;
  for (int i = 0, n = this->_internal_mana_spent_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mana_spent(i), target);
  }

  // repeated uint32 damage_absorbed = 14;
  for (int i = 0, n = this->_internal_damage_absorbed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_damage_absorbed(i), target);
  }

  // repeated uint32 damage_done = 15;
  for (int i = 0, n = this->_internal_damage_done_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_damage_done(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroMinuteDetails)
  return target;
}

size_t CDOTAUserMsg_StatsHeroMinuteDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mana_spent = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.mana_spent_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_mana_spent_size());
    total_size += data_size;
  }

  // repeated uint32 damage_absorbed = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.damage_absorbed_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_damage_absorbed_size());
    total_size += data_size;
  }

  // repeated uint32 damage_done = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.damage_done_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_damage_done_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_info_);
    }

    // optional uint32 last_hits = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_hits());
    }

    // optional uint32 hero_kills = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_kills());
    }

    // optional uint32 hero_damage = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_damage());
    }

    // optional uint32 tower_damage = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tower_damage());
    }

    // optional uint32 total_xp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_xp());
    }

    // optional uint32 net_worth = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 harvested_creep_gold = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_harvested_creep_gold());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 claimed_farm = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_claimed_farm());
    }

    // optional uint32 wards_placed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wards_placed());
    }

    // optional uint32 runes_collected = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_runes_collected());
    }

    // optional uint32 tps_used = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tps_used());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsHeroMinuteDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsHeroMinuteDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsHeroMinuteDetails::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsHeroMinuteDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsHeroMinuteDetails*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsHeroMinuteDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mana_spent_.MergeFrom(from._impl_.mana_spent_);
  _this->_impl_.damage_absorbed_.MergeFrom(from._impl_.damage_absorbed_);
  _this->_impl_.damage_done_.MergeFrom(from._impl_.damage_done_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position_info()->::CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(
          from._internal_position_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_kills_ = from._impl_.hero_kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_damage_ = from._impl_.hero_damage_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tower_damage_ = from._impl_.tower_damage_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.total_xp_ = from._impl_.total_xp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.harvested_creep_gold_ = from._impl_.harvested_creep_gold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.claimed_farm_ = from._impl_.claimed_farm_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.wards_placed_ = from._impl_.wards_placed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.runes_collected_ = from._impl_.runes_collected_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tps_used_ = from._impl_.tps_used_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsHeroMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsHeroMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroMinuteDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::InternalSwap(CDOTAUserMsg_StatsHeroMinuteDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mana_spent_.InternalSwap(&other->_impl_.mana_spent_);
  _impl_.damage_absorbed_.InternalSwap(&other->_impl_.damage_absorbed_);
  _impl_.damage_done_.InternalSwap(&other->_impl_.damage_done_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.tps_used_)
      + sizeof(CDOTAUserMsg_StatsHeroMinuteDetails::_impl_.tps_used_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, _impl_.position_info_)>(
          reinterpret_cast<char*>(&_impl_.position_info_),
          reinterpret_cast<char*>(&other->_impl_.position_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroMinuteDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[101]);
}

// ===================================================================

class CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance>()._impl_._has_bits_);
  static void set_has_location_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}
CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_category_){}
    , decltype(_impl_.stat_type_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.location_category_, &from._impl_.location_category_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.location_category_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}

inline void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_category_){0u}
    , decltype(_impl_.stat_type_){0u}
    , decltype(_impl_.value_){0u}
  };
}

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::~CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.location_category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.location_category_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 location_category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_location_category(&has_bits);
          _impl_.location_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stat_type(&has_bits);
          _impl_.stat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 location_category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_location_category(), target);
  }

  // optional uint32 stat_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_type(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return target;
}

size_t CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 location_category = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location_category());
    }

    // optional uint32 stat_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_type());
    }

    // optional uint32 value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.location_category_ = from._impl_.location_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stat_type_ = from._impl_.stat_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::InternalSwap(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _impl_.value_)
      + sizeof(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _impl_.location_category_)>(
          reinterpret_cast<char*>(&_impl_.location_category_),
          reinterpret_cast<char*>(&other->_impl_.location_category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[102]);
}

// ===================================================================

class CDOTAUserMsg_StatsTeamMinuteDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsTeamMinuteDetails>()._impl_._has_bits_);
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_barrack_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_available_lane_creep_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_balance_kill_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_balance_tower_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_balance_barracks_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_balance_gold_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_balance_xp_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsTeamMinuteDetails)
}
CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(const CDOTAUserMsg_StatsTeamMinuteDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsTeamMinuteDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_stats_){from._impl_.player_stats_}
    , decltype(_impl_.lane_performance_){from._impl_.lane_performance_}
    , decltype(_impl_.tower_kills_){}
    , decltype(_impl_.barrack_kills_){}
    , decltype(_impl_.available_lane_creep_gold_){}
    , decltype(_impl_.balance_kill_value_){}
    , decltype(_impl_.balance_tower_value_){}
    , decltype(_impl_.balance_barracks_value_){}
    , decltype(_impl_.balance_gold_value_){}
    , decltype(_impl_.balance_xp_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tower_kills_, &from._impl_.tower_kills_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_xp_value_) -
    reinterpret_cast<char*>(&_impl_.tower_kills_)) + sizeof(_impl_.balance_xp_value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsTeamMinuteDetails)
}

inline void CDOTAUserMsg_StatsTeamMinuteDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_stats_){arena}
    , decltype(_impl_.lane_performance_){arena}
    , decltype(_impl_.tower_kills_){0u}
    , decltype(_impl_.barrack_kills_){0u}
    , decltype(_impl_.available_lane_creep_gold_){0u}
    , decltype(_impl_.balance_kill_value_){0u}
    , decltype(_impl_.balance_tower_value_){0u}
    , decltype(_impl_.balance_barracks_value_){0u}
    , decltype(_impl_.balance_gold_value_){0u}
    , decltype(_impl_.balance_xp_value_){0u}
  };
}

CDOTAUserMsg_StatsTeamMinuteDetails::~CDOTAUserMsg_StatsTeamMinuteDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsTeamMinuteDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsTeamMinuteDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_stats_.~RepeatedPtrField();
  _impl_.lane_performance_.~RepeatedPtrField();
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsTeamMinuteDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_stats_.Clear();
  _impl_.lane_performance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tower_kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.balance_xp_value_) -
        reinterpret_cast<char*>(&_impl_.tower_kills_)) + sizeof(_impl_.balance_xp_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsTeamMinuteDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tower_kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tower_kills(&has_bits);
          _impl_.tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 barrack_kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_barrack_kills(&has_bits);
          _impl_.barrack_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 available_lane_creep_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_available_lane_creep_gold(&has_bits);
          _impl_.available_lane_creep_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 balance_kill_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_balance_kill_value(&has_bits);
          _impl_.balance_kill_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 balance_tower_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_balance_tower_value(&has_bits);
          _impl_.balance_tower_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 balance_barracks_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_balance_barracks_value(&has_bits);
          _impl_.balance_barracks_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 balance_gold_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_balance_gold_value(&has_bits);
          _impl_.balance_gold_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 balance_xp_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_balance_xp_value(&has_bits);
          _impl_.balance_xp_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_performance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsTeamMinuteDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tower_kills = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tower_kills(), target);
  }

  // optional uint32 barrack_kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_barrack_kills(), target);
  }

  // optional uint32 available_lane_creep_gold = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_available_lane_creep_gold(), target);
  }

  // optional uint32 balance_kill_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_balance_kill_value(), target);
  }

  // optional uint32 balance_tower_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_balance_tower_value(), target);
  }

  // optional uint32 balance_barracks_value = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_balance_barracks_value(), target);
  }

  // optional uint32 balance_gold_value = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_balance_gold_value(), target);
  }

  // optional uint32 balance_xp_value = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_balance_xp_value(), target);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_performance_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_performance(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsTeamMinuteDetails)
  return target;
}

size_t CDOTAUserMsg_StatsTeamMinuteDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  total_size += 1UL * this->_internal_player_stats_size();
  for (const auto& msg : this->_impl_.player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  total_size += 1UL * this->_internal_lane_performance_size();
  for (const auto& msg : this->_impl_.lane_performance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tower_kills = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tower_kills());
    }

    // optional uint32 barrack_kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_barrack_kills());
    }

    // optional uint32 available_lane_creep_gold = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_available_lane_creep_gold());
    }

    // optional uint32 balance_kill_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_balance_kill_value());
    }

    // optional uint32 balance_tower_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_balance_tower_value());
    }

    // optional uint32 balance_barracks_value = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_balance_barracks_value());
    }

    // optional uint32 balance_gold_value = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_balance_gold_value());
    }

    // optional uint32 balance_xp_value = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_balance_xp_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsTeamMinuteDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsTeamMinuteDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsTeamMinuteDetails::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsTeamMinuteDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsTeamMinuteDetails*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsTeamMinuteDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_stats_.MergeFrom(from._impl_.player_stats_);
  _this->_impl_.lane_performance_.MergeFrom(from._impl_.lane_performance_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tower_kills_ = from._impl_.tower_kills_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.barrack_kills_ = from._impl_.barrack_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.available_lane_creep_gold_ = from._impl_.available_lane_creep_gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.balance_kill_value_ = from._impl_.balance_kill_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.balance_tower_value_ = from._impl_.balance_tower_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.balance_barracks_value_ = from._impl_.balance_barracks_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.balance_gold_value_ = from._impl_.balance_gold_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.balance_xp_value_ = from._impl_.balance_xp_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsTeamMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::InternalSwap(CDOTAUserMsg_StatsTeamMinuteDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_stats_.InternalSwap(&other->_impl_.player_stats_);
  _impl_.lane_performance_.InternalSwap(&other->_impl_.lane_performance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.balance_xp_value_)
      + sizeof(CDOTAUserMsg_StatsTeamMinuteDetails::_impl_.balance_xp_value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, _impl_.tower_kills_)>(
          reinterpret_cast<char*>(&_impl_.tower_kills_),
          reinterpret_cast<char*>(&other->_impl_.tower_kills_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsTeamMinuteDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[103]);
}

// ===================================================================

class CDOTAUserMsg_StatsPlayerKillShare::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsPlayerKillShare>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kill_share_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_loc_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_loc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_health_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mana_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsPlayerKillShare)
}
CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(const CDOTAUserMsg_StatsPlayerKillShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsPlayerKillShare* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_share_percent_){}
    , decltype(_impl_.player_loc_x_){}
    , decltype(_impl_.player_loc_y_){}
    , decltype(_impl_.health_percent_){}
    , decltype(_impl_.mana_percent_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kill_share_percent_, &from._impl_.kill_share_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.kill_share_percent_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsPlayerKillShare)
}

inline void CDOTAUserMsg_StatsPlayerKillShare::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_share_percent_){0}
    , decltype(_impl_.player_loc_x_){0}
    , decltype(_impl_.player_loc_y_){0}
    , decltype(_impl_.health_percent_){0}
    , decltype(_impl_.mana_percent_){0}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_StatsPlayerKillShare::~CDOTAUserMsg_StatsPlayerKillShare() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsPlayerKillShare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsPlayerKillShare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_StatsPlayerKillShare::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsPlayerKillShare::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsPlayerKillShare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.kill_share_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mana_percent_) -
        reinterpret_cast<char*>(&_impl_.kill_share_percent_)) + sizeof(_impl_.mana_percent_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsPlayerKillShare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float kill_share_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_kill_share_percent(&has_bits);
          _impl_.kill_share_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float player_loc_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_player_loc_x(&has_bits);
          _impl_.player_loc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float player_loc_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_player_loc_y(&has_bits);
          _impl_.player_loc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float health_percent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_health_percent(&has_bits);
          _impl_.health_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mana_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_mana_percent(&has_bits);
          _impl_.mana_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsPlayerKillShare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsPlayerKillShare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float kill_share_percent = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_kill_share_percent(), target);
  }

  // optional float player_loc_x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_player_loc_x(), target);
  }

  // optional float player_loc_y = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_player_loc_y(), target);
  }

  // optional float health_percent = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_health_percent(), target);
  }

  // optional float mana_percent = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_mana_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsPlayerKillShare)
  return target;
}

size_t CDOTAUserMsg_StatsPlayerKillShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsPlayerKillShare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float kill_share_percent = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float player_loc_x = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float player_loc_y = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float health_percent = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float mana_percent = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsPlayerKillShare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsPlayerKillShare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsPlayerKillShare::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsPlayerKillShare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsPlayerKillShare*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsPlayerKillShare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsPlayerKillShare)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kill_share_percent_ = from._impl_.kill_share_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_loc_x_ = from._impl_.player_loc_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_loc_y_ = from._impl_.player_loc_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.health_percent_ = from._impl_.health_percent_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mana_percent_ = from._impl_.mana_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsPlayerKillShare::CopyFrom(const CDOTAUserMsg_StatsPlayerKillShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsPlayerKillShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsPlayerKillShare::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsPlayerKillShare::InternalSwap(CDOTAUserMsg_StatsPlayerKillShare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, _impl_.mana_percent_)
      + sizeof(CDOTAUserMsg_StatsPlayerKillShare::_impl_.mana_percent_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, _impl_.kill_share_percent_)>(
          reinterpret_cast<char*>(&_impl_.kill_share_percent_),
          reinterpret_cast<char*>(&other->_impl_.kill_share_percent_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsPlayerKillShare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[104]);
}

// ===================================================================

class CDOTAUserMsg_StatsKillDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsKillDetails>()._impl_._has_bits_);
  static void set_has_victim_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_damage_to_kill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effective_health(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_death_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_killer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsKillDetails)
}
CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(const CDOTAUserMsg_StatsKillDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsKillDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_shares_){from._impl_.kill_shares_}
    , decltype(_impl_.damage_to_kill_){}
    , decltype(_impl_.effective_health_){}
    , decltype(_impl_.death_time_){}
    , decltype(_impl_.victim_id_){}
    , decltype(_impl_.killer_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.damage_to_kill_, &from._impl_.damage_to_kill_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.killer_id_) -
    reinterpret_cast<char*>(&_impl_.damage_to_kill_)) + sizeof(_impl_.killer_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsKillDetails)
}

inline void CDOTAUserMsg_StatsKillDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_shares_){arena}
    , decltype(_impl_.damage_to_kill_){0u}
    , decltype(_impl_.effective_health_){0u}
    , decltype(_impl_.death_time_){0}
    , decltype(_impl_.victim_id_){-1}
    , decltype(_impl_.killer_id_){-1}
  };
}

CDOTAUserMsg_StatsKillDetails::~CDOTAUserMsg_StatsKillDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsKillDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsKillDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kill_shares_.~RepeatedPtrField();
}

void CDOTAUserMsg_StatsKillDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsKillDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsKillDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kill_shares_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.damage_to_kill_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.death_time_) -
        reinterpret_cast<char*>(&_impl_.damage_to_kill_)) + sizeof(_impl_.death_time_));
    _impl_.victim_id_ = -1;
    _impl_.killer_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsKillDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 victim_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_victim_id(&has_bits);
          _impl_.victim_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kill_shares(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_to_kill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_damage_to_kill(&has_bits);
          _impl_.damage_to_kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 effective_health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_effective_health(&has_bits);
          _impl_.effective_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float death_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_death_time(&has_bits);
          _impl_.death_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 killer_id = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_killer_id(&has_bits);
          _impl_.killer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsKillDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsKillDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 victim_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_victim_id(), target);
  }

  // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kill_shares_size()); i < n; i++) {
    const auto& repfield = this->_internal_kill_shares(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 damage_to_kill = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage_to_kill(), target);
  }

  // optional uint32 effective_health = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_effective_health(), target);
  }

  // optional float death_time = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_death_time(), target);
  }

  // optional int32 killer_id = 6 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_killer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsKillDetails)
  return target;
}

size_t CDOTAUserMsg_StatsKillDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsKillDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  total_size += 1UL * this->_internal_kill_shares_size();
  for (const auto& msg : this->_impl_.kill_shares_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 damage_to_kill = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage_to_kill());
    }

    // optional uint32 effective_health = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_effective_health());
    }

    // optional float death_time = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 victim_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_id());
    }

    // optional int32 killer_id = 6 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_killer_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsKillDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsKillDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsKillDetails::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsKillDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsKillDetails*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsKillDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsKillDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kill_shares_.MergeFrom(from._impl_.kill_shares_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.damage_to_kill_ = from._impl_.damage_to_kill_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.effective_health_ = from._impl_.effective_health_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.death_time_ = from._impl_.death_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.victim_id_ = from._impl_.victim_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.killer_id_ = from._impl_.killer_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsKillDetails::CopyFrom(const CDOTAUserMsg_StatsKillDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsKillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsKillDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsKillDetails::InternalSwap(CDOTAUserMsg_StatsKillDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.kill_shares_.InternalSwap(&other->_impl_.kill_shares_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, _impl_.death_time_)
      + sizeof(CDOTAUserMsg_StatsKillDetails::_impl_.death_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, _impl_.damage_to_kill_)>(
          reinterpret_cast<char*>(&_impl_.damage_to_kill_),
          reinterpret_cast<char*>(&other->_impl_.damage_to_kill_));
  swap(_impl_.victim_id_, other->_impl_.victim_id_);
  swap(_impl_.killer_id_, other->_impl_.killer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsKillDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[105]);
}

// ===================================================================

class CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails>()._impl_._has_bits_);
  static void set_has_gold_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participants_){from._impl_.participants_}
    , decltype(_impl_.deaths_){from._impl_.deaths_}
    , decltype(_impl_.gold_delta_){}
    , decltype(_impl_.xp_delta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_delta_, &from._impl_.gold_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xp_delta_) -
    reinterpret_cast<char*>(&_impl_.gold_delta_)) + sizeof(_impl_.xp_delta_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}

inline void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participants_){arena}
    , decltype(_impl_.deaths_){arena}
    , decltype(_impl_.gold_delta_){0u}
    , decltype(_impl_.xp_delta_){0u}
  };
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participants_.~RepeatedField();
  _impl_.deaths_.~RepeatedField();
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participants_.Clear();
  _impl_.deaths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gold_delta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xp_delta_) -
        reinterpret_cast<char*>(&_impl_.gold_delta_)) + sizeof(_impl_.xp_delta_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_participants(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_participants(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 deaths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_deaths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_deaths(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gold_delta(&has_bits);
          _impl_.gold_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_xp_delta(&has_bits);
          _impl_.xp_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 participants = 1;
  for (int i = 0, n = this->_internal_participants_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_participants(i), target);
  }

  // repeated int32 deaths = 2;
  for (int i = 0, n = this->_internal_deaths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_deaths(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 gold_delta = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold_delta(), target);
  }

  // optional uint32 xp_delta = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xp_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 participants = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.participants_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_participants_size());
    total_size += data_size;
  }

  // repeated int32 deaths = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.deaths_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_deaths_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 gold_delta = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_delta());
    }

    // optional uint32 xp_delta = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_delta());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participants_.MergeFrom(from._impl_.participants_);
  _this->_impl_.deaths_.MergeFrom(from._impl_.deaths_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gold_delta_ = from._impl_.gold_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xp_delta_ = from._impl_.xp_delta_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.participants_.InternalSwap(&other->_impl_.participants_);
  _impl_.deaths_.InternalSwap(&other->_impl_.deaths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _impl_.xp_delta_)
      + sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_impl_.xp_delta_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _impl_.gold_delta_)>(
          reinterpret_cast<char*>(&_impl_.gold_delta_),
          reinterpret_cast<char*>(&other->_impl_.gold_delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[106]);
}

// ===================================================================

class CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails>()._impl_._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& radiant_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg);
  static void set_has_radiant_fight_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& dire_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg);
  static void set_has_dire_fight_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails&
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_Internal::radiant_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg) {
  return *msg->_impl_.radiant_fight_details_;
}
const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails&
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_Internal::dire_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg) {
  return *msg->_impl_.dire_fight_details_;
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radiant_fight_details_){nullptr}
    , decltype(_impl_.dire_fight_details_){nullptr}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_radiant_fight_details()) {
    _this->_impl_.radiant_fight_details_ = new ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(*from._impl_.radiant_fight_details_);
  }
  if (from._internal_has_dire_fight_details()) {
    _this->_impl_.dire_fight_details_ = new ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(*from._impl_.dire_fight_details_);
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}

inline void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radiant_fight_details_){nullptr}
    , decltype(_impl_.dire_fight_details_){nullptr}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.end_time_){0}
  };
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.radiant_fight_details_;
  if (this != internal_default_instance()) delete _impl_.dire_fight_details_;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.radiant_fight_details_ != nullptr);
      _impl_.radiant_fight_details_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dire_fight_details_ != nullptr);
      _impl_.dire_fight_details_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiant_fight_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dire_fight_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float start_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_start_time(), target);
  }

  // optional float end_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_end_time(), target);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::radiant_fight_details(this),
        _Internal::radiant_fight_details(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dire_fight_details(this),
        _Internal::dire_fight_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radiant_fight_details_);
    }

    // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dire_fight_details_);
    }

    // optional float start_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float end_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_radiant_fight_details()->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(
          from._internal_radiant_fight_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dire_fight_details()->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(
          from._internal_dire_fight_details());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _impl_.end_time_)
      + sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _impl_.radiant_fight_details_)>(
          reinterpret_cast<char*>(&_impl_.radiant_fight_details_),
          reinterpret_cast<char*>(&other->_impl_.radiant_fight_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[107]);
}

// ===================================================================

class CDOTAUserMsg_StatsMatchDetails::_Internal {
 public:
};

CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsMatchDetails)
}
CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(const CDOTAUserMsg_StatsMatchDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_StatsMatchDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_lookup_){from._impl_.hero_lookup_}
    , decltype(_impl_.radiant_stats_){from._impl_.radiant_stats_}
    , decltype(_impl_.dire_stats_){from._impl_.dire_stats_}
    , decltype(_impl_.radiant_kills_){from._impl_.radiant_kills_}
    , decltype(_impl_.dire_kills_){from._impl_.dire_kills_}
    , decltype(_impl_.fight_details_){from._impl_.fight_details_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails)
}

inline void CDOTAUserMsg_StatsMatchDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_lookup_){arena}
    , decltype(_impl_.radiant_stats_){arena}
    , decltype(_impl_.dire_stats_){arena}
    , decltype(_impl_.radiant_kills_){arena}
    , decltype(_impl_.dire_kills_){arena}
    , decltype(_impl_.fight_details_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_StatsMatchDetails::~CDOTAUserMsg_StatsMatchDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_StatsMatchDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_lookup_.~RepeatedPtrField();
  _impl_.radiant_stats_.~RepeatedPtrField();
  _impl_.dire_stats_.~RepeatedPtrField();
  _impl_.radiant_kills_.~RepeatedPtrField();
  _impl_.dire_kills_.~RepeatedPtrField();
  _impl_.fight_details_.~RepeatedPtrField();
}

void CDOTAUserMsg_StatsMatchDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_StatsMatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsMatchDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hero_lookup_.Clear();
  _impl_.radiant_stats_.Clear();
  _impl_.dire_stats_.Clear();
  _impl_.radiant_kills_.Clear();
  _impl_.dire_kills_.Clear();
  _impl_.fight_details_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsMatchDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_lookup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radiant_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dire_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radiant_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dire_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fight_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_StatsMatchDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hero_lookup_size()); i < n; i++) {
    const auto& repfield = this->_internal_hero_lookup(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_radiant_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_radiant_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dire_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_dire_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_radiant_kills_size()); i < n; i++) {
    const auto& repfield = this->_internal_radiant_kills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dire_kills_size()); i < n; i++) {
    const auto& repfield = this->_internal_dire_kills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fight_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_fight_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsMatchDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  total_size += 1UL * this->_internal_hero_lookup_size();
  for (const auto& msg : this->_impl_.hero_lookup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  total_size += 1UL * this->_internal_radiant_stats_size();
  for (const auto& msg : this->_impl_.radiant_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  total_size += 1UL * this->_internal_dire_stats_size();
  for (const auto& msg : this->_impl_.dire_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  total_size += 1UL * this->_internal_radiant_kills_size();
  for (const auto& msg : this->_impl_.radiant_kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  total_size += 1UL * this->_internal_dire_kills_size();
  for (const auto& msg : this->_impl_.dire_kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  total_size += 1UL * this->_internal_fight_details_size();
  for (const auto& msg : this->_impl_.fight_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_StatsMatchDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_StatsMatchDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_StatsMatchDetails::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_StatsMatchDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_StatsMatchDetails*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_StatsMatchDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsMatchDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hero_lookup_.MergeFrom(from._impl_.hero_lookup_);
  _this->_impl_.radiant_stats_.MergeFrom(from._impl_.radiant_stats_);
  _this->_impl_.dire_stats_.MergeFrom(from._impl_.dire_stats_);
  _this->_impl_.radiant_kills_.MergeFrom(from._impl_.radiant_kills_);
  _this->_impl_.dire_kills_.MergeFrom(from._impl_.dire_kills_);
  _this->_impl_.fight_details_.MergeFrom(from._impl_.fight_details_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_StatsMatchDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsMatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hero_lookup_.InternalSwap(&other->_impl_.hero_lookup_);
  _impl_.radiant_stats_.InternalSwap(&other->_impl_.radiant_stats_);
  _impl_.dire_stats_.InternalSwap(&other->_impl_.dire_stats_);
  _impl_.radiant_kills_.InternalSwap(&other->_impl_.radiant_kills_);
  _impl_.dire_kills_.InternalSwap(&other->_impl_.dire_kills_);
  _impl_.fight_details_.InternalSwap(&other->_impl_.fight_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsMatchDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[108]);
}

// ===================================================================

class CDOTAUserMsg_MiniTaunt::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MiniTaunt>()._impl_._has_bits_);
  static void set_has_taunting_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniTaunt)
}
CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(const CDOTAUserMsg_MiniTaunt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MiniTaunt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.taunting_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.taunting_player_id_ = from._impl_.taunting_player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniTaunt)
}

inline void CDOTAUserMsg_MiniTaunt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.taunting_player_id_){-1}
  };
}

CDOTAUserMsg_MiniTaunt::~CDOTAUserMsg_MiniTaunt() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniTaunt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MiniTaunt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_MiniTaunt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MiniTaunt::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniTaunt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taunting_player_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniTaunt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 taunting_player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_taunting_player_id(&has_bits);
          _impl_.taunting_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MiniTaunt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniTaunt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 taunting_player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_taunting_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniTaunt)
  return target;
}

size_t CDOTAUserMsg_MiniTaunt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniTaunt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 taunting_player_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taunting_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MiniTaunt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MiniTaunt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MiniTaunt::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MiniTaunt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MiniTaunt*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MiniTaunt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniTaunt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_taunting_player_id()) {
    _this->_internal_set_taunting_player_id(from._internal_taunting_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MiniTaunt::CopyFrom(const CDOTAUserMsg_MiniTaunt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniTaunt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniTaunt::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniTaunt::InternalSwap(CDOTAUserMsg_MiniTaunt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.taunting_player_id_, other->_impl_.taunting_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniTaunt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[109]);
}

// ===================================================================

class CDOTAUserMsg_SpeechBubble::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SpeechBubble>()._impl_._has_bits_);
  static void set_has_destroy_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SpeechBubble)
}
CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble(const CDOTAUserMsg_SpeechBubble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SpeechBubble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroy_all_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.destroy_all_ = from._impl_.destroy_all_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpeechBubble)
}

inline void CDOTAUserMsg_SpeechBubble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroy_all_){false}
  };
}

CDOTAUserMsg_SpeechBubble::~CDOTAUserMsg_SpeechBubble() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpeechBubble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SpeechBubble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_SpeechBubble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SpeechBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SpeechBubble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destroy_all_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SpeechBubble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool destroy_all = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_destroy_all(&has_bits);
          _impl_.destroy_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SpeechBubble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpeechBubble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool destroy_all = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_destroy_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpeechBubble)
  return target;
}

size_t CDOTAUserMsg_SpeechBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SpeechBubble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool destroy_all = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SpeechBubble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SpeechBubble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SpeechBubble::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SpeechBubble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SpeechBubble*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SpeechBubble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SpeechBubble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_destroy_all()) {
    _this->_internal_set_destroy_all(from._internal_destroy_all());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SpeechBubble::CopyFrom(const CDOTAUserMsg_SpeechBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SpeechBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpeechBubble::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SpeechBubble::InternalSwap(CDOTAUserMsg_SpeechBubble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.destroy_all_, other->_impl_.destroy_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SpeechBubble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[110]);
}

// ===================================================================

class CDOTAUserMsg_CustomHeaderMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHeaderMessage>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHeaderMessage)
}
CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage(const CDOTAUserMsg_CustomHeaderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CustomHeaderMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHeaderMessage)
}

inline void CDOTAUserMsg_CustomHeaderMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_CustomHeaderMessage::~CDOTAUserMsg_CustomHeaderMessage() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHeaderMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CustomHeaderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CDOTAUserMsg_CustomHeaderMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHeaderMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.value_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHeaderMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_CustomHeaderMessage.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CustomHeaderMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHeaderMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHeaderMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHeaderMessage)
  return target;
}

size_t CDOTAUserMsg_CustomHeaderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHeaderMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CustomHeaderMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CustomHeaderMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CustomHeaderMessage::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CustomHeaderMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CustomHeaderMessage*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CustomHeaderMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHeaderMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CustomHeaderMessage::CopyFrom(const CDOTAUserMsg_CustomHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHeaderMessage::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHeaderMessage::InternalSwap(CDOTAUserMsg_CustomHeaderMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, _impl_.value_)
      + sizeof(CDOTAUserMsg_CustomHeaderMessage::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHeaderMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[111]);
}

// ===================================================================

class CMsgHeroAbilityStat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHeroAbilityStat>()._impl_._has_bits_);
  static void set_has_stat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgHeroAbilityStat::CMsgHeroAbilityStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHeroAbilityStat)
}
CMsgHeroAbilityStat::CMsgHeroAbilityStat(const CMsgHeroAbilityStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHeroAbilityStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_type_){}
    , decltype(_impl_.int_value_){}
    , decltype(_impl_.float_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stat_type_, &from._impl_.stat_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.float_value_) -
    reinterpret_cast<char*>(&_impl_.stat_type_)) + sizeof(_impl_.float_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgHeroAbilityStat)
}

inline void CMsgHeroAbilityStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_type_){0}
    , decltype(_impl_.int_value_){0}
    , decltype(_impl_.float_value_){0}
  };
}

CMsgHeroAbilityStat::~CMsgHeroAbilityStat() {
  // @@protoc_insertion_point(destructor:CMsgHeroAbilityStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHeroAbilityStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgHeroAbilityStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHeroAbilityStat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHeroAbilityStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.stat_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.float_value_) -
        reinterpret_cast<char*>(&_impl_.stat_type_)) + sizeof(_impl_.float_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHeroAbilityStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHeroStatType_IsValid(val))) {
            _internal_set_stat_type(static_cast<::EHeroStatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_int_value(&has_bits);
          _impl_.int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_float_value(&has_bits);
          _impl_.float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHeroAbilityStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeroAbilityStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stat_type(), target);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_value(), target);
  }

  // optional float float_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeroAbilityStat)
  return target;
}

size_t CMsgHeroAbilityStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHeroAbilityStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stat_type());
    }

    // optional int32 int_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_value());
    }

    // optional float float_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHeroAbilityStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHeroAbilityStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHeroAbilityStat::GetClassData() const { return &_class_data_; }


void CMsgHeroAbilityStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHeroAbilityStat*>(&to_msg);
  auto& from = static_cast<const CMsgHeroAbilityStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHeroAbilityStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stat_type_ = from._impl_.stat_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.int_value_ = from._impl_.int_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.float_value_ = from._impl_.float_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHeroAbilityStat::CopyFrom(const CMsgHeroAbilityStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHeroAbilityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeroAbilityStat::IsInitialized() const {
  return true;
}

void CMsgHeroAbilityStat::InternalSwap(CMsgHeroAbilityStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHeroAbilityStat, _impl_.float_value_)
      + sizeof(CMsgHeroAbilityStat::_impl_.float_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgHeroAbilityStat, _impl_.stat_type_)>(
          reinterpret_cast<char*>(&_impl_.stat_type_),
          reinterpret_cast<char*>(&other->_impl_.stat_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHeroAbilityStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[112]);
}

// ===================================================================

class CMsgCombatAnalyzerPlayerStat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCombatAnalyzerPlayerStat>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCombatAnalyzerPlayerStat)
}
CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(const CMsgCombatAnalyzerPlayerStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCombatAnalyzerPlayerStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_ability_stats_){from._impl_.hero_ability_stats_}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgCombatAnalyzerPlayerStat)
}

inline void CMsgCombatAnalyzerPlayerStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_ability_stats_){arena}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgCombatAnalyzerPlayerStat::~CMsgCombatAnalyzerPlayerStat() {
  // @@protoc_insertion_point(destructor:CMsgCombatAnalyzerPlayerStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCombatAnalyzerPlayerStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_ability_stats_.~RepeatedPtrField();
}

void CMsgCombatAnalyzerPlayerStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCombatAnalyzerPlayerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCombatAnalyzerPlayerStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hero_ability_stats_.Clear();
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCombatAnalyzerPlayerStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_ability_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCombatAnalyzerPlayerStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCombatAnalyzerPlayerStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hero_ability_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_hero_ability_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCombatAnalyzerPlayerStat)
  return target;
}

size_t CMsgCombatAnalyzerPlayerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCombatAnalyzerPlayerStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
  total_size += 1UL * this->_internal_hero_ability_stats_size();
  for (const auto& msg : this->_impl_.hero_ability_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCombatAnalyzerPlayerStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCombatAnalyzerPlayerStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCombatAnalyzerPlayerStat::GetClassData() const { return &_class_data_; }


void CMsgCombatAnalyzerPlayerStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCombatAnalyzerPlayerStat*>(&to_msg);
  auto& from = static_cast<const CMsgCombatAnalyzerPlayerStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCombatAnalyzerPlayerStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hero_ability_stats_.MergeFrom(from._impl_.hero_ability_stats_);
  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCombatAnalyzerPlayerStat::CopyFrom(const CMsgCombatAnalyzerPlayerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCombatAnalyzerPlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerPlayerStat::IsInitialized() const {
  return true;
}

void CMsgCombatAnalyzerPlayerStat::InternalSwap(CMsgCombatAnalyzerPlayerStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hero_ability_stats_.InternalSwap(&other->_impl_.hero_ability_stats_);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCombatAnalyzerPlayerStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[113]);
}

// ===================================================================

class CMsgCombatAnalyzerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCombatAnalyzerStats>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCombatAnalyzerStats)
}
CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(const CMsgCombatAnalyzerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCombatAnalyzerStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_stats_){from._impl_.player_stats_}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.match_id_ = from._impl_.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgCombatAnalyzerStats)
}

inline void CMsgCombatAnalyzerStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_stats_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgCombatAnalyzerStats::~CMsgCombatAnalyzerStats() {
  // @@protoc_insertion_point(destructor:CMsgCombatAnalyzerStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCombatAnalyzerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_stats_.~RepeatedPtrField();
}

void CMsgCombatAnalyzerStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCombatAnalyzerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCombatAnalyzerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_stats_.Clear();
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCombatAnalyzerStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCombatAnalyzerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCombatAnalyzerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCombatAnalyzerStats)
  return target;
}

size_t CMsgCombatAnalyzerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCombatAnalyzerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
  total_size += 1UL * this->_internal_player_stats_size();
  for (const auto& msg : this->_impl_.player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 match_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCombatAnalyzerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCombatAnalyzerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCombatAnalyzerStats::GetClassData() const { return &_class_data_; }


void CMsgCombatAnalyzerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCombatAnalyzerStats*>(&to_msg);
  auto& from = static_cast<const CMsgCombatAnalyzerStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCombatAnalyzerStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_stats_.MergeFrom(from._impl_.player_stats_);
  if (from._internal_has_match_id()) {
    _this->_internal_set_match_id(from._internal_match_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCombatAnalyzerStats::CopyFrom(const CMsgCombatAnalyzerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCombatAnalyzerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerStats::IsInitialized() const {
  return true;
}

void CMsgCombatAnalyzerStats::InternalSwap(CMsgCombatAnalyzerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_stats_.InternalSwap(&other->_impl_.player_stats_);
  swap(_impl_.match_id_, other->_impl_.match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCombatAnalyzerStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[114]);
}

// ===================================================================

class CDOTAUserMsg_BeastChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BeastChat>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BeastChat)
}
CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(const CDOTAUserMsg_BeastChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_BeastChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_format()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.team_ = from._impl_.team_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BeastChat)
}

inline void CDOTAUserMsg_BeastChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.team_){0u}
  };
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_BeastChat::~CDOTAUserMsg_BeastChat() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BeastChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_BeastChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.format_.Destroy();
  _impl_.message_.Destroy();
  _impl_.target_.Destroy();
}

void CDOTAUserMsg_BeastChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_BeastChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BeastChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.target_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.team_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BeastChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_BeastChat.format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_BeastChat.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_BeastChat.target");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_BeastChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BeastChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional string format = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BeastChat.format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BeastChat.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BeastChat.target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BeastChat)
  return target;
}

size_t CDOTAUserMsg_BeastChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BeastChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string format = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format());
    }

    // optional string message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string target = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_BeastChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_BeastChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_BeastChat::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_BeastChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_BeastChat*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_BeastChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BeastChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_BeastChat::CopyFrom(const CDOTAUserMsg_BeastChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BeastChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BeastChat::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BeastChat::InternalSwap(CDOTAUserMsg_BeastChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  swap(_impl_.team_, other->_impl_.team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BeastChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[115]);
}

// ===================================================================

class CDOTAUserMsg_CustomHudElement_Create::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHudElement_Create>()._impl_._has_bits_);
  static void set_has_element_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layout_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHudElement_Create)
}
CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create(const CDOTAUserMsg_CustomHudElement_Create& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CustomHudElement_Create* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_id_){}
    , decltype(_impl_.layout_filename_){}
    , decltype(_impl_.data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.element_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_element_id()) {
    _this->_impl_.element_id_.Set(from._internal_element_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.layout_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layout_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_layout_filename()) {
    _this->_impl_.layout_filename_.Set(from._internal_layout_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHudElement_Create)
}

inline void CDOTAUserMsg_CustomHudElement_Create::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_id_){}
    , decltype(_impl_.layout_filename_){}
    , decltype(_impl_.data_){}
  };
  _impl_.element_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layout_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layout_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_CustomHudElement_Create::~CDOTAUserMsg_CustomHudElement_Create() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHudElement_Create)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CustomHudElement_Create::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_id_.Destroy();
  _impl_.layout_filename_.Destroy();
  _impl_.data_.Destroy();
}

void CDOTAUserMsg_CustomHudElement_Create::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHudElement_Create::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHudElement_Create)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.element_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.layout_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHudElement_Create::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string element_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_element_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Create.element_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string layout_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_layout_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Create.layout_filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CustomHudElement_Create::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHudElement_Create)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element_id().data(), static_cast<int>(this->_internal_element_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Create.element_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element_id(), target);
  }

  // optional string layout_filename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_layout_filename().data(), static_cast<int>(this->_internal_layout_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Create.layout_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_layout_filename(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHudElement_Create)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHudElement_Create)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string element_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_element_id());
    }

    // optional string layout_filename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layout_filename());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CustomHudElement_Create::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CustomHudElement_Create::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CustomHudElement_Create::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CustomHudElement_Create::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CustomHudElement_Create*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CustomHudElement_Create&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHudElement_Create)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_element_id(from._internal_element_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_layout_filename(from._internal_layout_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_data(from._internal_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CustomHudElement_Create::CopyFrom(const CDOTAUserMsg_CustomHudElement_Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHudElement_Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Create::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Create::InternalSwap(CDOTAUserMsg_CustomHudElement_Create* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.element_id_, lhs_arena,
      &other->_impl_.element_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layout_filename_, lhs_arena,
      &other->_impl_.layout_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHudElement_Create::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[116]);
}

// ===================================================================

class CDOTAUserMsg_CustomHudElement_Modify::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHudElement_Modify>()._impl_._has_bits_);
  static void set_has_element_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modify_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHudElement_Modify)
}
CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify(const CDOTAUserMsg_CustomHudElement_Modify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CustomHudElement_Modify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_id_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.modify_visible_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.element_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_element_id()) {
    _this->_impl_.element_id_.Set(from._internal_element_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.modify_visible_ = from._impl_.modify_visible_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHudElement_Modify)
}

inline void CDOTAUserMsg_CustomHudElement_Modify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_id_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.modify_visible_){false}
  };
  _impl_.element_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_CustomHudElement_Modify::~CDOTAUserMsg_CustomHudElement_Modify() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHudElement_Modify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CustomHudElement_Modify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_id_.Destroy();
  _impl_.data_.Destroy();
}

void CDOTAUserMsg_CustomHudElement_Modify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHudElement_Modify::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHudElement_Modify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.element_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.modify_visible_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHudElement_Modify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string element_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_element_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Modify.element_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool modify_visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_modify_visible(&has_bits);
          _impl_.modify_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CustomHudElement_Modify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHudElement_Modify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element_id().data(), static_cast<int>(this->_internal_element_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Modify.element_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element_id(), target);
  }

  // optional bool modify_visible = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_modify_visible(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHudElement_Modify)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Modify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHudElement_Modify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string element_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_element_id());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional bool modify_visible = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CustomHudElement_Modify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CustomHudElement_Modify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CustomHudElement_Modify::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CustomHudElement_Modify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CustomHudElement_Modify*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CustomHudElement_Modify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHudElement_Modify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_element_id(from._internal_element_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.modify_visible_ = from._impl_.modify_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CustomHudElement_Modify::CopyFrom(const CDOTAUserMsg_CustomHudElement_Modify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHudElement_Modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Modify::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Modify::InternalSwap(CDOTAUserMsg_CustomHudElement_Modify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.element_id_, lhs_arena,
      &other->_impl_.element_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.modify_visible_, other->_impl_.modify_visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHudElement_Modify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[117]);
}

// ===================================================================

class CDOTAUserMsg_CustomHudElement_Destroy::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHudElement_Destroy>()._impl_._has_bits_);
  static void set_has_element_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHudElement_Destroy)
}
CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy(const CDOTAUserMsg_CustomHudElement_Destroy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CustomHudElement_Destroy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.element_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_element_id()) {
    _this->_impl_.element_id_.Set(from._internal_element_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHudElement_Destroy)
}

inline void CDOTAUserMsg_CustomHudElement_Destroy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_id_){}
  };
  _impl_.element_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_CustomHudElement_Destroy::~CDOTAUserMsg_CustomHudElement_Destroy() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHudElement_Destroy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CustomHudElement_Destroy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_id_.Destroy();
}

void CDOTAUserMsg_CustomHudElement_Destroy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHudElement_Destroy::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHudElement_Destroy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.element_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHudElement_Destroy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string element_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_element_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Destroy.element_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CustomHudElement_Destroy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHudElement_Destroy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element_id().data(), static_cast<int>(this->_internal_element_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Destroy.element_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHudElement_Destroy)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Destroy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHudElement_Destroy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string element_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_element_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CustomHudElement_Destroy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CustomHudElement_Destroy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CustomHudElement_Destroy::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CustomHudElement_Destroy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CustomHudElement_Destroy*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CustomHudElement_Destroy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHudElement_Destroy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element_id()) {
    _this->_internal_set_element_id(from._internal_element_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CustomHudElement_Destroy::CopyFrom(const CDOTAUserMsg_CustomHudElement_Destroy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHudElement_Destroy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Destroy::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Destroy::InternalSwap(CDOTAUserMsg_CustomHudElement_Destroy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.element_id_, lhs_arena,
      &other->_impl_.element_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHudElement_Destroy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[118]);
}

// ===================================================================

class CDOTAUserMsg_CompendiumStatePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CompendiumStatePlayer>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CompendiumStatePlayer)
}
CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer(const CDOTAUserMsg_CompendiumStatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CompendiumStatePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.level_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CompendiumStatePlayer)
}

inline void CDOTAUserMsg_CompendiumStatePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_CompendiumStatePlayer::~CDOTAUserMsg_CompendiumStatePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CompendiumStatePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CompendiumStatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_CompendiumStatePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CompendiumStatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CompendiumStatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.level_ = 0u;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CompendiumStatePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CompendiumStatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CompendiumStatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CompendiumStatePlayer)
  return target;
}

size_t CDOTAUserMsg_CompendiumStatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CompendiumStatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CompendiumStatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CompendiumStatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CompendiumStatePlayer::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CompendiumStatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CompendiumStatePlayer*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CompendiumStatePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CompendiumStatePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CompendiumStatePlayer::CopyFrom(const CDOTAUserMsg_CompendiumStatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CompendiumStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CompendiumStatePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CompendiumStatePlayer::InternalSwap(CDOTAUserMsg_CompendiumStatePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.level_, other->_impl_.level_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CompendiumStatePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[119]);
}

// ===================================================================

class CDOTAUserMsg_CompendiumState::_Internal {
 public:
};

CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CompendiumState)
}
CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState(const CDOTAUserMsg_CompendiumState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_CompendiumState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compendium_players_){from._impl_.compendium_players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CompendiumState)
}

inline void CDOTAUserMsg_CompendiumState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compendium_players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_CompendiumState::~CDOTAUserMsg_CompendiumState() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CompendiumState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_CompendiumState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compendium_players_.~RepeatedPtrField();
}

void CDOTAUserMsg_CompendiumState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_CompendiumState::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CompendiumState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compendium_players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CompendiumState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compendium_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CompendiumState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CompendiumState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_compendium_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_compendium_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CompendiumState)
  return target;
}

size_t CDOTAUserMsg_CompendiumState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CompendiumState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
  total_size += 1UL * this->_internal_compendium_players_size();
  for (const auto& msg : this->_impl_.compendium_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CompendiumState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_CompendiumState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CompendiumState::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_CompendiumState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_CompendiumState*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_CompendiumState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CompendiumState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.compendium_players_.MergeFrom(from._impl_.compendium_players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CompendiumState::CopyFrom(const CDOTAUserMsg_CompendiumState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CompendiumState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CompendiumState::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CompendiumState::InternalSwap(CDOTAUserMsg_CompendiumState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.compendium_players_.InternalSwap(&other->_impl_.compendium_players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CompendiumState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[120]);
}

// ===================================================================

class CDOTAUserMsg_ProjectionAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ProjectionAbility>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_caster_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_caster_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& origin(const CDOTAUserMsg_ProjectionAbility* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_caster_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_victim_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_ProjectionAbility::_Internal::origin(const CDOTAUserMsg_ProjectionAbility* msg) {
  return *msg->_impl_.origin_;
}
void CDOTAUserMsg_ProjectionAbility::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ProjectionAbility)
}
CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility(const CDOTAUserMsg_ProjectionAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ProjectionAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.caster_team_){}
    , decltype(_impl_.channel_end_){}
    , decltype(_impl_.track_caster_only_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.victim_ent_index_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.caster_ent_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  ::memcpy(&_impl_.caster_team_, &from._impl_.caster_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.caster_ent_index_) -
    reinterpret_cast<char*>(&_impl_.caster_team_)) + sizeof(_impl_.caster_ent_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ProjectionAbility)
}

inline void CDOTAUserMsg_ProjectionAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.caster_team_){0}
    , decltype(_impl_.channel_end_){false}
    , decltype(_impl_.track_caster_only_){false}
    , decltype(_impl_.end_time_){0}
    , decltype(_impl_.victim_ent_index_){-1}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.caster_ent_index_){-1}
  };
}

CDOTAUserMsg_ProjectionAbility::~CDOTAUserMsg_ProjectionAbility() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ProjectionAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ProjectionAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
}

void CDOTAUserMsg_ProjectionAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ProjectionAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ProjectionAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.origin_ != nullptr);
    _impl_.origin_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.caster_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_) -
        reinterpret_cast<char*>(&_impl_.caster_team_)) + sizeof(_impl_.end_time_));
    _impl_.victim_ent_index_ = -1;
    _impl_.ability_id_ = -1;
    _impl_.caster_ent_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ProjectionAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 caster_ent_index = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_caster_ent_index(&has_bits);
          _impl_.caster_ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 caster_team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_caster_team(&has_bits);
          _impl_.caster_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_channel_end(&has_bits);
          _impl_.channel_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool track_caster_only = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_track_caster_only(&has_bits);
          _impl_.track_caster_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_ent_index = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_victim_ent_index(&has_bits);
          _impl_.victim_ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ProjectionAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ProjectionAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional int32 caster_ent_index = 2 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_caster_ent_index(), target);
  }

  // optional int32 caster_team = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_caster_team(), target);
  }

  // optional bool channel_end = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_channel_end(), target);
  }

  // optional .CMsgVector origin = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional bool track_caster_only = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_track_caster_only(), target);
  }

  // optional float end_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_end_time(), target);
  }

  // optional int32 victim_ent_index = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_victim_ent_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ProjectionAbility)
  return target;
}

size_t CDOTAUserMsg_ProjectionAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ProjectionAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional int32 caster_team = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_caster_team());
    }

    // optional bool channel_end = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool track_caster_only = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float end_time = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 victim_ent_index = 8 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_ent_index());
    }

    // optional int32 ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional int32 caster_ent_index = 2 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_caster_ent_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ProjectionAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ProjectionAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ProjectionAbility::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ProjectionAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ProjectionAbility*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ProjectionAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ProjectionAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.caster_team_ = from._impl_.caster_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_end_ = from._impl_.channel_end_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.track_caster_only_ = from._impl_.track_caster_only_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.victim_ent_index_ = from._impl_.victim_ent_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.caster_ent_index_ = from._impl_.caster_ent_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ProjectionAbility::CopyFrom(const CDOTAUserMsg_ProjectionAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ProjectionAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ProjectionAbility::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ProjectionAbility::InternalSwap(CDOTAUserMsg_ProjectionAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, _impl_.end_time_)
      + sizeof(CDOTAUserMsg_ProjectionAbility::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
  swap(_impl_.victim_ent_index_, other->_impl_.victim_ent_index_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.caster_ent_index_, other->_impl_.caster_ent_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ProjectionAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[121]);
}

// ===================================================================

class CDOTAUserMsg_ProjectionEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ProjectionEvent>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ProjectionEvent)
}
CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent(const CDOTAUserMsg_ProjectionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ProjectionEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.team_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ProjectionEvent)
}

inline void CDOTAUserMsg_ProjectionEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.team_){0u}
  };
}

CDOTAUserMsg_ProjectionEvent::~CDOTAUserMsg_ProjectionEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ProjectionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ProjectionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ProjectionEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ProjectionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ProjectionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.team_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ProjectionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProjectionEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EProjectionEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ProjectionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ProjectionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ProjectionEvent)
  return target;
}

size_t CDOTAUserMsg_ProjectionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ProjectionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ProjectionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ProjectionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ProjectionEvent::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ProjectionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ProjectionEvent*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ProjectionEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ProjectionEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ProjectionEvent::CopyFrom(const CDOTAUserMsg_ProjectionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ProjectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ProjectionEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ProjectionEvent::InternalSwap(CDOTAUserMsg_ProjectionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, _impl_.team_)
      + sizeof(CDOTAUserMsg_ProjectionEvent::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ProjectionEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[122]);
}

// ===================================================================

class CDOTAUserMsg_XPAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_XPAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_XPAlert)
}
CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert(const CDOTAUserMsg_XPAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_XPAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.target_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_entindex_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_XPAlert)
}

inline void CDOTAUserMsg_XPAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.target_entindex_){-1}
  };
}

CDOTAUserMsg_XPAlert::~CDOTAUserMsg_XPAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_XPAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_XPAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_XPAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_XPAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_XPAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.player_id_ = -1;
    _impl_.target_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_XPAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entindex = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          _impl_.target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_XPAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_XPAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 target_entindex = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_XPAlert)
  return target;
}

size_t CDOTAUserMsg_XPAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_XPAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 target_entindex = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_XPAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_XPAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_XPAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_XPAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_XPAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_XPAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_entindex_ = from._impl_.target_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_XPAlert::CopyFrom(const CDOTAUserMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_XPAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_XPAlert::InternalSwap(CDOTAUserMsg_XPAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.target_entindex_, other->_impl_.target_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_XPAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[123]);
}

// ===================================================================

class CDOTAUserMsg_TalentTreeAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TalentTreeAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_learned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_TalentTreeAlert::CDOTAUserMsg_TalentTreeAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TalentTreeAlert)
}
CDOTAUserMsg_TalentTreeAlert::CDOTAUserMsg_TalentTreeAlert(const CDOTAUserMsg_TalentTreeAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TalentTreeAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.learned_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.target_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_, &from._impl_.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_entindex_) -
    reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TalentTreeAlert)
}

inline void CDOTAUserMsg_TalentTreeAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_){0}
    , decltype(_impl_.learned_){false}
    , decltype(_impl_.ability_id_){-1}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.target_entindex_){-1}
  };
}

CDOTAUserMsg_TalentTreeAlert::~CDOTAUserMsg_TalentTreeAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TalentTreeAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TalentTreeAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_TalentTreeAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TalentTreeAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TalentTreeAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.learned_) -
        reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.learned_));
    _impl_.ability_id_ = -1;
    _impl_.player_id_ = -1;
    _impl_.target_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TalentTreeAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entindex = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          _impl_.target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_id = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool learned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_learned(&has_bits);
          _impl_.learned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TalentTreeAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TalentTreeAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 target_entindex = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  // optional int32 ability_id = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_id(), target);
  }

  // optional int32 slot = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_slot(), target);
  }

  // optional bool learned = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_learned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TalentTreeAlert)
  return target;
}

size_t CDOTAUserMsg_TalentTreeAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TalentTreeAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 slot = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
    }

    // optional bool learned = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 ability_id = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 target_entindex = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TalentTreeAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TalentTreeAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TalentTreeAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TalentTreeAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TalentTreeAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TalentTreeAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TalentTreeAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.learned_ = from._impl_.learned_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.target_entindex_ = from._impl_.target_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TalentTreeAlert::CopyFrom(const CDOTAUserMsg_TalentTreeAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TalentTreeAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TalentTreeAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TalentTreeAlert::InternalSwap(CDOTAUserMsg_TalentTreeAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TalentTreeAlert, _impl_.learned_)
      + sizeof(CDOTAUserMsg_TalentTreeAlert::_impl_.learned_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TalentTreeAlert, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.target_entindex_, other->_impl_.target_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TalentTreeAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[124]);
}

// ===================================================================

class CDOTAUserMsg_UpdateQuestProgress::_Internal {
 public:
};

CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UpdateQuestProgress)
}
CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress(const CDOTAUserMsg_UpdateQuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CDOTAUserMsg_UpdateQuestProgress* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UpdateQuestProgress)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_UpdateQuestProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_UpdateQuestProgress::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UpdateQuestProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[125]);
}

// ===================================================================

class CDOTAUserMsg_QuestStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_QuestStatus>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fail_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000040) ^ 0x00000040) != 0;
  }
};

CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QuestStatus)
}
CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus(const CDOTAUserMsg_QuestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_QuestStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.challenge_id_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.goal_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.fail_gametime_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quest_id_, &from._impl_.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_ability_id_) -
    reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QuestStatus)
}

inline void CDOTAUserMsg_QuestStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_id_){0u}
    , decltype(_impl_.challenge_id_){0u}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.goal_){0u}
    , decltype(_impl_.query_){0u}
    , decltype(_impl_.fail_gametime_){0}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.item_ability_id_){-1}
  };
}

CDOTAUserMsg_QuestStatus::~CDOTAUserMsg_QuestStatus() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QuestStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_QuestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_QuestStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QuestStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fail_gametime_) -
        reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.fail_gametime_));
    _impl_.player_id_ = -1;
    _impl_.item_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QuestStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quest_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quest_id(&has_bits);
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_id(&has_bits);
          _impl_.challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 goal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_goal(&has_bits);
          _impl_.goal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_query(&has_bits);
          _impl_.query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fail_gametime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_fail_gametime(&has_bits);
          _impl_.fail_gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_QuestStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QuestStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 quest_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quest_id(), target);
  }

  // optional uint32 challenge_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_id(), target);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_progress(), target);
  }

  // optional uint32 goal = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_goal(), target);
  }

  // optional uint32 query = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_query(), target);
  }

  // optional float fail_gametime = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_fail_gametime(), target);
  }

  // optional int32 item_ability_id = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QuestStatus)
  return target;
}

size_t CDOTAUserMsg_QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QuestStatus)
  size_t total_size = 0;

  // required int32 player_id = 1 [default = -1];
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 quest_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quest_id());
    }

    // optional uint32 challenge_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_id());
    }

    // optional uint32 progress = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
    }

    // optional uint32 goal = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_goal());
    }

    // optional uint32 query = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_query());
    }

    // optional float fail_gametime = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  // optional int32 item_ability_id = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_QuestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_QuestStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_QuestStatus::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_QuestStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_QuestStatus*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_QuestStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.quest_id_ = from._impl_.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.challenge_id_ = from._impl_.challenge_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.goal_ = from._impl_.goal_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.query_ = from._impl_.query_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.fail_gametime_ = from._impl_.fail_gametime_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_QuestStatus::CopyFrom(const CDOTAUserMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QuestStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_QuestStatus::InternalSwap(CDOTAUserMsg_QuestStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, _impl_.fail_gametime_)
      + sizeof(CDOTAUserMsg_QuestStatus::_impl_.fail_gametime_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, _impl_.quest_id_)>(
          reinterpret_cast<char*>(&_impl_.quest_id_),
          reinterpret_cast<char*>(&other->_impl_.quest_id_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QuestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[126]);
}

// ===================================================================

class CDOTAUserMsg_SuggestHeroPick::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SuggestHeroPick>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SuggestHeroPick)
}
CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick(const CDOTAUserMsg_SuggestHeroPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SuggestHeroPick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.ban_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SuggestHeroPick)
}

inline void CDOTAUserMsg_SuggestHeroPick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.ban_){false}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_SuggestHeroPick::~CDOTAUserMsg_SuggestHeroPick() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SuggestHeroPick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SuggestHeroPick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_SuggestHeroPick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SuggestHeroPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SuggestHeroPick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ban_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.ban_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SuggestHeroPick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ban = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ban(&has_bits);
          _impl_.ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SuggestHeroPick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SuggestHeroPick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional bool ban = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ban(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SuggestHeroPick)
  return target;
}

size_t CDOTAUserMsg_SuggestHeroPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SuggestHeroPick)
  size_t total_size = 0;

  // required int32 player_id = 1 [default = -1];
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional bool ban = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SuggestHeroPick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SuggestHeroPick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SuggestHeroPick::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SuggestHeroPick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SuggestHeroPick*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SuggestHeroPick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SuggestHeroPick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ban_ = from._impl_.ban_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SuggestHeroPick::CopyFrom(const CDOTAUserMsg_SuggestHeroPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SuggestHeroPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SuggestHeroPick::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SuggestHeroPick::InternalSwap(CDOTAUserMsg_SuggestHeroPick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, _impl_.ban_)
      + sizeof(CDOTAUserMsg_SuggestHeroPick::_impl_.ban_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SuggestHeroPick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[127]);
}

// ===================================================================

class CDOTAUserMsg_SuggestHeroRole::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SuggestHeroRole>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SuggestHeroRole)
}
CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole(const CDOTAUserMsg_SuggestHeroRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SuggestHeroRole* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_role_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hero_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hero_role()) {
    _this->_impl_.hero_role_.Set(from._internal_hero_role(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SuggestHeroRole)
}

inline void CDOTAUserMsg_SuggestHeroRole::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_role_){}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.hero_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_SuggestHeroRole::~CDOTAUserMsg_SuggestHeroRole() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SuggestHeroRole)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SuggestHeroRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_role_.Destroy();
}

void CDOTAUserMsg_SuggestHeroRole::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SuggestHeroRole::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SuggestHeroRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hero_role_.ClearNonDefaultToEmpty();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SuggestHeroRole::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hero_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hero_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_SuggestHeroRole.hero_role");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SuggestHeroRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SuggestHeroRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string hero_role = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_role().data(), static_cast<int>(this->_internal_hero_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SuggestHeroRole.hero_role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hero_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SuggestHeroRole)
  return target;
}

size_t CDOTAUserMsg_SuggestHeroRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SuggestHeroRole)
  size_t total_size = 0;

  // required int32 player_id = 1 [default = -1];
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hero_role = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hero_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SuggestHeroRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SuggestHeroRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SuggestHeroRole::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SuggestHeroRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SuggestHeroRole*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SuggestHeroRole&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SuggestHeroRole)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hero_role(from._internal_hero_role());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SuggestHeroRole::CopyFrom(const CDOTAUserMsg_SuggestHeroRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SuggestHeroRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SuggestHeroRole::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SuggestHeroRole::InternalSwap(CDOTAUserMsg_SuggestHeroRole* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hero_role_, lhs_arena,
      &other->_impl_.hero_role_, rhs_arena
  );
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SuggestHeroRole::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[128]);
}

// ===================================================================

class CDOTAUserMsg_KillcamDamageTaken::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_KillcamDamageTaken>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_KillcamDamageTaken)
}
CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken(const CDOTAUserMsg_KillcamDamageTaken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_KillcamDamageTaken* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_name_){}
    , decltype(_impl_.damage_color_){}
    , decltype(_impl_.damage_taken_){}
    , decltype(_impl_.item_type_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hero_name()) {
    _this->_impl_.hero_name_.Set(from._internal_hero_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.damage_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.damage_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_damage_color()) {
    _this->_impl_.damage_color_.Set(from._internal_damage_color(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.damage_taken_, &from._impl_.damage_taken_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_ability_id_) -
    reinterpret_cast<char*>(&_impl_.damage_taken_)) + sizeof(_impl_.item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_KillcamDamageTaken)
}

inline void CDOTAUserMsg_KillcamDamageTaken::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_name_){}
    , decltype(_impl_.damage_color_){}
    , decltype(_impl_.damage_taken_){0u}
    , decltype(_impl_.item_type_){0u}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.item_ability_id_){-1}
  };
  _impl_.hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.damage_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.damage_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_KillcamDamageTaken::~CDOTAUserMsg_KillcamDamageTaken() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_KillcamDamageTaken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_KillcamDamageTaken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_name_.Destroy();
  _impl_.damage_color_.Destroy();
}

void CDOTAUserMsg_KillcamDamageTaken::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_KillcamDamageTaken::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_KillcamDamageTaken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hero_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.damage_color_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.damage_taken_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_type_) -
        reinterpret_cast<char*>(&_impl_.damage_taken_)) + sizeof(_impl_.item_type_));
    _impl_.player_id_ = -1;
    _impl_.item_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_KillcamDamageTaken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_taken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_damage_taken(&has_bits);
          _impl_.damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_type(&has_bits);
          _impl_.item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hero_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hero_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_KillcamDamageTaken.hero_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string damage_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_damage_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_KillcamDamageTaken.damage_color");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_KillcamDamageTaken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_KillcamDamageTaken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage_taken(), target);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_type(), target);
  }

  // optional int32 item_ability_id = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_item_ability_id(), target);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_name().data(), static_cast<int>(this->_internal_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_KillcamDamageTaken.hero_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hero_name(), target);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_damage_color().data(), static_cast<int>(this->_internal_damage_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_KillcamDamageTaken.damage_color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_damage_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_KillcamDamageTaken)
  return target;
}

size_t CDOTAUserMsg_KillcamDamageTaken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_KillcamDamageTaken)
  size_t total_size = 0;

  // required int32 player_id = 1 [default = -1];
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hero_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_name());
    }

    // optional string damage_color = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_damage_color());
    }

    // optional uint32 damage_taken = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage_taken());
    }

    // optional uint32 item_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_type());
    }

  }
  // optional int32 item_ability_id = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_KillcamDamageTaken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_KillcamDamageTaken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_KillcamDamageTaken::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_KillcamDamageTaken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_KillcamDamageTaken*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_KillcamDamageTaken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hero_name(from._internal_hero_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_damage_color(from._internal_damage_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.damage_taken_ = from._impl_.damage_taken_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.item_type_ = from._impl_.item_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_KillcamDamageTaken::CopyFrom(const CDOTAUserMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_KillcamDamageTaken::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_KillcamDamageTaken::InternalSwap(CDOTAUserMsg_KillcamDamageTaken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hero_name_, lhs_arena,
      &other->_impl_.hero_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.damage_color_, lhs_arena,
      &other->_impl_.damage_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, _impl_.item_type_)
      + sizeof(CDOTAUserMsg_KillcamDamageTaken::_impl_.item_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, _impl_.damage_taken_)>(
          reinterpret_cast<char*>(&_impl_.damage_taken_),
          reinterpret_cast<char*>(&other->_impl_.damage_taken_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_KillcamDamageTaken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[129]);
}

// ===================================================================

class CDOTAUserMsg_SelectPenaltyGold::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SelectPenaltyGold>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SelectPenaltyGold)
}
CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold(const CDOTAUserMsg_SelectPenaltyGold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SelectPenaltyGold* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cost_, &from._impl_.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.cost_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SelectPenaltyGold)
}

inline void CDOTAUserMsg_SelectPenaltyGold::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cost_){0}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_SelectPenaltyGold::~CDOTAUserMsg_SelectPenaltyGold() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SelectPenaltyGold)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SelectPenaltyGold::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_SelectPenaltyGold::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SelectPenaltyGold::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SelectPenaltyGold)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.cost_ = 0;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SelectPenaltyGold::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cost(&has_bits);
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SelectPenaltyGold::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SelectPenaltyGold)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional sint32 cost = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SelectPenaltyGold)
  return target;
}

size_t CDOTAUserMsg_SelectPenaltyGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SelectPenaltyGold)
  size_t total_size = 0;

  // required int32 player_id = 1 [default = -1];
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional sint32 cost = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_cost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SelectPenaltyGold::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SelectPenaltyGold::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SelectPenaltyGold::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SelectPenaltyGold::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SelectPenaltyGold*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SelectPenaltyGold&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SelectPenaltyGold)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cost_ = from._impl_.cost_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SelectPenaltyGold::CopyFrom(const CDOTAUserMsg_SelectPenaltyGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SelectPenaltyGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SelectPenaltyGold::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SelectPenaltyGold::InternalSwap(CDOTAUserMsg_SelectPenaltyGold* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cost_, other->_impl_.cost_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SelectPenaltyGold::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[130]);
}

// ===================================================================

class CDOTAUserMsg_RollDiceResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_RollDiceResult>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roll_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roll_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_RollDiceResult)
}
CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult(const CDOTAUserMsg_RollDiceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_RollDiceResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_type_){}
    , decltype(_impl_.roll_min_){}
    , decltype(_impl_.roll_max_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_type_, &from._impl_.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_RollDiceResult)
}

inline void CDOTAUserMsg_RollDiceResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_type_){0u}
    , decltype(_impl_.roll_min_){0u}
    , decltype(_impl_.roll_max_){0u}
    , decltype(_impl_.result_){0u}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_RollDiceResult::~CDOTAUserMsg_RollDiceResult() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_RollDiceResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_RollDiceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_RollDiceResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_RollDiceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_RollDiceResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.result_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_RollDiceResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_type(&has_bits);
          _impl_.channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roll_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_roll_min(&has_bits);
          _impl_.roll_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roll_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_roll_max(&has_bits);
          _impl_.roll_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_RollDiceResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_RollDiceResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_type(), target);
  }

  // optional uint32 roll_min = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roll_min(), target);
  }

  // optional uint32 roll_max = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_roll_max(), target);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_RollDiceResult)
  return target;
}

size_t CDOTAUserMsg_RollDiceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_RollDiceResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 channel_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_type());
    }

    // optional uint32 roll_min = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roll_min());
    }

    // optional uint32 roll_max = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roll_max());
    }

    // optional uint32 result = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_RollDiceResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_RollDiceResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_RollDiceResult::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_RollDiceResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_RollDiceResult*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_RollDiceResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_RollDiceResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roll_min_ = from._impl_.roll_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.roll_max_ = from._impl_.roll_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_RollDiceResult::CopyFrom(const CDOTAUserMsg_RollDiceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_RollDiceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_RollDiceResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_RollDiceResult::InternalSwap(CDOTAUserMsg_RollDiceResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, _impl_.result_)
      + sizeof(CDOTAUserMsg_RollDiceResult::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, _impl_.channel_type_)>(
          reinterpret_cast<char*>(&_impl_.channel_type_),
          reinterpret_cast<char*>(&other->_impl_.channel_type_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_RollDiceResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[131]);
}

// ===================================================================

class CDOTAUserMsg_FlipCoinResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_FlipCoinResult>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_FlipCoinResult)
}
CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult(const CDOTAUserMsg_FlipCoinResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_FlipCoinResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_type_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_type_, &from._impl_.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_FlipCoinResult)
}

inline void CDOTAUserMsg_FlipCoinResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_type_){0u}
    , decltype(_impl_.result_){false}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_FlipCoinResult::~CDOTAUserMsg_FlipCoinResult() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_FlipCoinResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_FlipCoinResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_FlipCoinResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_FlipCoinResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_FlipCoinResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.result_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_FlipCoinResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_type(&has_bits);
          _impl_.channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_FlipCoinResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_FlipCoinResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_type(), target);
  }

  // optional bool result = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_FlipCoinResult)
  return target;
}

size_t CDOTAUserMsg_FlipCoinResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_FlipCoinResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 channel_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_type());
    }

    // optional bool result = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_FlipCoinResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_FlipCoinResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_FlipCoinResult::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_FlipCoinResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_FlipCoinResult*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_FlipCoinResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_FlipCoinResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_FlipCoinResult::CopyFrom(const CDOTAUserMsg_FlipCoinResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_FlipCoinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_FlipCoinResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_FlipCoinResult::InternalSwap(CDOTAUserMsg_FlipCoinResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, _impl_.result_)
      + sizeof(CDOTAUserMsg_FlipCoinResult::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, _impl_.channel_type_)>(
          reinterpret_cast<char*>(&_impl_.channel_type_),
          reinterpret_cast<char*>(&other->_impl_.channel_type_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_FlipCoinResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[132]);
}

// ===================================================================

class CDOTAUserMessage_RequestItemSuggestions::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMessage_RequestItemSuggestions>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMessage_RequestItemSuggestions)
}
CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions(const CDOTAUserMessage_RequestItemSuggestions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMessage_RequestItemSuggestions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMessage_RequestItemSuggestions)
}

inline void CDOTAUserMessage_RequestItemSuggestions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMessage_RequestItemSuggestions::~CDOTAUserMessage_RequestItemSuggestions() {
  // @@protoc_insertion_point(destructor:CDOTAUserMessage_RequestItemSuggestions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMessage_RequestItemSuggestions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMessage_RequestItemSuggestions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMessage_RequestItemSuggestions::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMessage_RequestItemSuggestions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMessage_RequestItemSuggestions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMessage_RequestItemSuggestions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMessage_RequestItemSuggestions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMessage_RequestItemSuggestions)
  return target;
}

size_t CDOTAUserMessage_RequestItemSuggestions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMessage_RequestItemSuggestions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 player_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMessage_RequestItemSuggestions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMessage_RequestItemSuggestions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMessage_RequestItemSuggestions::GetClassData() const { return &_class_data_; }


void CDOTAUserMessage_RequestItemSuggestions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMessage_RequestItemSuggestions*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMessage_RequestItemSuggestions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMessage_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMessage_RequestItemSuggestions::CopyFrom(const CDOTAUserMessage_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMessage_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMessage_RequestItemSuggestions::IsInitialized() const {
  return true;
}

void CDOTAUserMessage_RequestItemSuggestions::InternalSwap(CDOTAUserMessage_RequestItemSuggestions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMessage_RequestItemSuggestions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[133]);
}

// ===================================================================

class CDOTAUserMessage_TeamCaptainChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMessage_TeamCaptainChanged>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_captain_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMessage_TeamCaptainChanged)
}
CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged(const CDOTAUserMessage_TeamCaptainChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMessage_TeamCaptainChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){}
    , decltype(_impl_.captain_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.captain_player_id_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.captain_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMessage_TeamCaptainChanged)
}

inline void CDOTAUserMessage_TeamCaptainChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){0u}
    , decltype(_impl_.captain_player_id_){-1}
  };
}

CDOTAUserMessage_TeamCaptainChanged::~CDOTAUserMessage_TeamCaptainChanged() {
  // @@protoc_insertion_point(destructor:CDOTAUserMessage_TeamCaptainChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMessage_TeamCaptainChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMessage_TeamCaptainChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMessage_TeamCaptainChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMessage_TeamCaptainChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.team_ = 0u;
    _impl_.captain_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMessage_TeamCaptainChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 captain_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_captain_player_id(&has_bits);
          _impl_.captain_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMessage_TeamCaptainChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMessage_TeamCaptainChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional int32 captain_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_captain_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMessage_TeamCaptainChanged)
  return target;
}

size_t CDOTAUserMessage_TeamCaptainChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMessage_TeamCaptainChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

    // optional int32 captain_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_captain_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMessage_TeamCaptainChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMessage_TeamCaptainChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMessage_TeamCaptainChanged::GetClassData() const { return &_class_data_; }


void CDOTAUserMessage_TeamCaptainChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMessage_TeamCaptainChanged*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMessage_TeamCaptainChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMessage_TeamCaptainChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.captain_player_id_ = from._impl_.captain_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMessage_TeamCaptainChanged::CopyFrom(const CDOTAUserMessage_TeamCaptainChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMessage_TeamCaptainChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMessage_TeamCaptainChanged::IsInitialized() const {
  return true;
}

void CDOTAUserMessage_TeamCaptainChanged::InternalSwap(CDOTAUserMessage_TeamCaptainChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_, other->_impl_.team_);
  swap(_impl_.captain_player_id_, other->_impl_.captain_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMessage_TeamCaptainChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[134]);
}

// ===================================================================

class CDOTAUserMsg_ChatWheelCooldown::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatWheelCooldown>()._impl_._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cooldown_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatWheelCooldown)
}
CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown(const CDOTAUserMsg_ChatWheelCooldown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ChatWheelCooldown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_remaining_){}
    , decltype(_impl_.message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cooldown_remaining_, &from._impl_.cooldown_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_) -
    reinterpret_cast<char*>(&_impl_.cooldown_remaining_)) + sizeof(_impl_.message_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatWheelCooldown)
}

inline void CDOTAUserMsg_ChatWheelCooldown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_remaining_){0}
    , decltype(_impl_.message_id_){4294967295u}
  };
}

CDOTAUserMsg_ChatWheelCooldown::~CDOTAUserMsg_ChatWheelCooldown() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatWheelCooldown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ChatWheelCooldown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ChatWheelCooldown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ChatWheelCooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatWheelCooldown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.cooldown_remaining_ = 0;
    _impl_.message_id_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatWheelCooldown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 message_id = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_message_id(&has_bits);
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float cooldown_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_cooldown_remaining(&has_bits);
          _impl_.cooldown_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ChatWheelCooldown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatWheelCooldown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 message_id = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id(), target);
  }

  // optional float cooldown_remaining = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_cooldown_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatWheelCooldown)
  return target;
}

size_t CDOTAUserMsg_ChatWheelCooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatWheelCooldown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float cooldown_remaining = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 message_id = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ChatWheelCooldown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ChatWheelCooldown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ChatWheelCooldown::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ChatWheelCooldown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ChatWheelCooldown*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ChatWheelCooldown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatWheelCooldown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cooldown_remaining_ = from._impl_.cooldown_remaining_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.message_id_ = from._impl_.message_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ChatWheelCooldown::CopyFrom(const CDOTAUserMsg_ChatWheelCooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatWheelCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatWheelCooldown::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatWheelCooldown::InternalSwap(CDOTAUserMsg_ChatWheelCooldown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cooldown_remaining_, other->_impl_.cooldown_remaining_);
  swap(_impl_.message_id_, other->_impl_.message_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatWheelCooldown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[135]);
}

// ===================================================================

class CDOTAUserMsg_HeroRelicProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HeroRelicProgress>()._impl_._has_bits_);
  static void set_has_hero_relic_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_display(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_HeroRelicProgress::CDOTAUserMsg_HeroRelicProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HeroRelicProgress)
}
CDOTAUserMsg_HeroRelicProgress::CDOTAUserMsg_HeroRelicProgress(const CDOTAUserMsg_HeroRelicProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HeroRelicProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_relic_type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.value_display_){}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_relic_type_, &from._impl_.hero_relic_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ehandle_) -
    reinterpret_cast<char*>(&_impl_.hero_relic_type_)) + sizeof(_impl_.ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HeroRelicProgress)
}

inline void CDOTAUserMsg_HeroRelicProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_relic_type_){0u}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.value_display_){0}
    , decltype(_impl_.ehandle_){16777215u}
  };
}

CDOTAUserMsg_HeroRelicProgress::~CDOTAUserMsg_HeroRelicProgress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HeroRelicProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HeroRelicProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_HeroRelicProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HeroRelicProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HeroRelicProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.hero_relic_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_display_) -
        reinterpret_cast<char*>(&_impl_.hero_relic_type_)) + sizeof(_impl_.value_display_));
    _impl_.ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HeroRelicProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_relic_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_relic_type(&has_bits);
          _impl_.hero_relic_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ehandle = 3 [default = 16777215];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float value_display = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_value_display(&has_bits);
          _impl_.value_display_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HeroRelicProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HeroRelicProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_relic_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_relic_type(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional uint32 ehandle = 3 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ehandle(), target);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_id(), target);
  }

  // optional float value_display = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_value_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HeroRelicProgress)
  return target;
}

size_t CDOTAUserMsg_HeroRelicProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HeroRelicProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 hero_relic_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_relic_type());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

    // optional uint32 event_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional float value_display = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 ehandle = 3 [default = 16777215];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HeroRelicProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HeroRelicProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HeroRelicProgress::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HeroRelicProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HeroRelicProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HeroRelicProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HeroRelicProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_relic_type_ = from._impl_.hero_relic_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_display_ = from._impl_.value_display_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HeroRelicProgress::CopyFrom(const CDOTAUserMsg_HeroRelicProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HeroRelicProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HeroRelicProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HeroRelicProgress::InternalSwap(CDOTAUserMsg_HeroRelicProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HeroRelicProgress, _impl_.value_display_)
      + sizeof(CDOTAUserMsg_HeroRelicProgress::_impl_.value_display_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HeroRelicProgress, _impl_.hero_relic_type_)>(
          reinterpret_cast<char*>(&_impl_.hero_relic_type_),
          reinterpret_cast<char*>(&other->_impl_.hero_relic_type_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HeroRelicProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[136]);
}

// ===================================================================

class CDOTAUserMsg_AbilityDraftRequestAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AbilityDraftRequestAbility>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requested_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ctrl_is_down(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_AbilityDraftRequestAbility::CDOTAUserMsg_AbilityDraftRequestAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AbilityDraftRequestAbility)
}
CDOTAUserMsg_AbilityDraftRequestAbility::CDOTAUserMsg_AbilityDraftRequestAbility(const CDOTAUserMsg_AbilityDraftRequestAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AbilityDraftRequestAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ctrl_is_down_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.requested_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ctrl_is_down_, &from._impl_.ctrl_is_down_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requested_ability_id_) -
    reinterpret_cast<char*>(&_impl_.ctrl_is_down_)) + sizeof(_impl_.requested_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilityDraftRequestAbility)
}

inline void CDOTAUserMsg_AbilityDraftRequestAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ctrl_is_down_){false}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.requested_ability_id_){-1}
  };
}

CDOTAUserMsg_AbilityDraftRequestAbility::~CDOTAUserMsg_AbilityDraftRequestAbility() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilityDraftRequestAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AbilityDraftRequestAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_AbilityDraftRequestAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AbilityDraftRequestAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.ctrl_is_down_ = false;
    _impl_.player_id_ = -1;
    _impl_.requested_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AbilityDraftRequestAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 requested_ability_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_requested_ability_id(&has_bits);
          _impl_.requested_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ctrl_is_down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ctrl_is_down(&has_bits);
          _impl_.ctrl_is_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AbilityDraftRequestAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 requested_ability_id = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_requested_ability_id(), target);
  }

  // optional bool ctrl_is_down = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ctrl_is_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilityDraftRequestAbility)
  return target;
}

size_t CDOTAUserMsg_AbilityDraftRequestAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool ctrl_is_down = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 requested_ability_id = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requested_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AbilityDraftRequestAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AbilityDraftRequestAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AbilityDraftRequestAbility::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AbilityDraftRequestAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AbilityDraftRequestAbility*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AbilityDraftRequestAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ctrl_is_down_ = from._impl_.ctrl_is_down_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.requested_ability_id_ = from._impl_.requested_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AbilityDraftRequestAbility::CopyFrom(const CDOTAUserMsg_AbilityDraftRequestAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilityDraftRequestAbility::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilityDraftRequestAbility::InternalSwap(CDOTAUserMsg_AbilityDraftRequestAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ctrl_is_down_, other->_impl_.ctrl_is_down_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.requested_ability_id_, other->_impl_.requested_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AbilityDraftRequestAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[137]);
}

// ===================================================================

class CDOTAUserMsg_DamageReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DamageReport>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_DamageReport::CDOTAUserMsg_DamageReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DamageReport)
}
CDOTAUserMsg_DamageReport::CDOTAUserMsg_DamageReport(const CDOTAUserMsg_DamageReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DamageReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_hero_id_){}
    , decltype(_impl_.source_hero_id_){}
    , decltype(_impl_.damage_amount_){}
    , decltype(_impl_.broadcast_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_hero_id_, &from._impl_.target_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.target_hero_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DamageReport)
}

inline void CDOTAUserMsg_DamageReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_hero_id_){0u}
    , decltype(_impl_.source_hero_id_){0u}
    , decltype(_impl_.damage_amount_){0}
    , decltype(_impl_.broadcast_){false}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_DamageReport::~CDOTAUserMsg_DamageReport() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DamageReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DamageReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_DamageReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DamageReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DamageReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.target_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.broadcast_) -
        reinterpret_cast<char*>(&_impl_.target_hero_id_)) + sizeof(_impl_.broadcast_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DamageReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_hero_id(&has_bits);
          _impl_.target_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_hero_id(&has_bits);
          _impl_.source_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_damage_amount(&has_bits);
          _impl_.damage_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_broadcast(&has_bits);
          _impl_.broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DamageReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DamageReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 target_hero_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_hero_id(), target);
  }

  // optional uint32 source_hero_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_hero_id(), target);
  }

  // optional int32 damage_amount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage_amount(), target);
  }

  // optional bool broadcast = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DamageReport)
  return target;
}

size_t CDOTAUserMsg_DamageReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DamageReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 target_hero_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_hero_id());
    }

    // optional uint32 source_hero_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_hero_id());
    }

    // optional int32 damage_amount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage_amount());
    }

    // optional bool broadcast = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DamageReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DamageReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DamageReport::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DamageReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DamageReport*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DamageReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DamageReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_hero_id_ = from._impl_.target_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_hero_id_ = from._impl_.source_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.damage_amount_ = from._impl_.damage_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.broadcast_ = from._impl_.broadcast_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DamageReport::CopyFrom(const CDOTAUserMsg_DamageReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DamageReport::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DamageReport::InternalSwap(CDOTAUserMsg_DamageReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DamageReport, _impl_.broadcast_)
      + sizeof(CDOTAUserMsg_DamageReport::_impl_.broadcast_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DamageReport, _impl_.target_hero_id_)>(
          reinterpret_cast<char*>(&_impl_.target_hero_id_),
          reinterpret_cast<char*>(&other->_impl_.target_hero_id_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DamageReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[138]);
}

// ===================================================================

class CDOTAUserMsg_SalutePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SalutePlayer>()._impl_._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tip_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_tip_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_recent_tips(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_SalutePlayer::CDOTAUserMsg_SalutePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SalutePlayer)
}
CDOTAUserMsg_SalutePlayer::CDOTAUserMsg_SalutePlayer(const CDOTAUserMsg_SalutePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_SalutePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_tip_style_){}
    , decltype(_impl_.tip_amount_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.num_recent_tips_){}
    , decltype(_impl_.source_player_id_){}
    , decltype(_impl_.target_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.custom_tip_style_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_tip_style_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_tip_style()) {
    _this->_impl_.custom_tip_style_.Set(from._internal_custom_tip_style(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tip_amount_, &from._impl_.tip_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_player_id_) -
    reinterpret_cast<char*>(&_impl_.tip_amount_)) + sizeof(_impl_.target_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SalutePlayer)
}

inline void CDOTAUserMsg_SalutePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_tip_style_){}
    , decltype(_impl_.tip_amount_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.num_recent_tips_){0u}
    , decltype(_impl_.source_player_id_){-1}
    , decltype(_impl_.target_player_id_){-1}
  };
  _impl_.custom_tip_style_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_tip_style_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_SalutePlayer::~CDOTAUserMsg_SalutePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SalutePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_SalutePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_tip_style_.Destroy();
}

void CDOTAUserMsg_SalutePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_SalutePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SalutePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.custom_tip_style_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.tip_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_recent_tips_) -
        reinterpret_cast<char*>(&_impl_.tip_amount_)) + sizeof(_impl_.num_recent_tips_));
    _impl_.source_player_id_ = -1;
    _impl_.target_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SalutePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          _impl_.source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          _impl_.target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tip_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tip_amount(&has_bits);
          _impl_.tip_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_tip_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_custom_tip_style();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_SalutePlayer.custom_tip_style");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_recent_tips = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_recent_tips(&has_bits);
          _impl_.num_recent_tips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_SalutePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SalutePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 source_player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tip_amount(), target);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_id(), target);
  }

  // optional string custom_tip_style = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_tip_style().data(), static_cast<int>(this->_internal_custom_tip_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SalutePlayer.custom_tip_style");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_custom_tip_style(), target);
  }

  // optional uint32 num_recent_tips = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_recent_tips(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SalutePlayer)
  return target;
}

size_t CDOTAUserMsg_SalutePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SalutePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string custom_tip_style = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_tip_style());
    }

    // optional uint32 tip_amount = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tip_amount());
    }

    // optional uint32 event_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 num_recent_tips = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_recent_tips());
    }

    // optional int32 source_player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_SalutePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_SalutePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_SalutePlayer::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_SalutePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_SalutePlayer*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_SalutePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SalutePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_custom_tip_style(from._internal_custom_tip_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tip_amount_ = from._impl_.tip_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_recent_tips_ = from._impl_.num_recent_tips_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_player_id_ = from._impl_.source_player_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_player_id_ = from._impl_.target_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_SalutePlayer::CopyFrom(const CDOTAUserMsg_SalutePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SalutePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SalutePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SalutePlayer::InternalSwap(CDOTAUserMsg_SalutePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_tip_style_, lhs_arena,
      &other->_impl_.custom_tip_style_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SalutePlayer, _impl_.num_recent_tips_)
      + sizeof(CDOTAUserMsg_SalutePlayer::_impl_.num_recent_tips_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SalutePlayer, _impl_.tip_amount_)>(
          reinterpret_cast<char*>(&_impl_.tip_amount_),
          reinterpret_cast<char*>(&other->_impl_.tip_amount_));
  swap(_impl_.source_player_id_, other->_impl_.source_player_id_);
  swap(_impl_.target_player_id_, other->_impl_.target_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SalutePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[139]);
}

// ===================================================================

class CDOTAUserMsg_TipAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TipAlert>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_TipAlert::CDOTAUserMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TipAlert)
}
CDOTAUserMsg_TipAlert::CDOTAUserMsg_TipAlert(const CDOTAUserMsg_TipAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_TipAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tip_text_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tip_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tip_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tip_text()) {
    _this->_impl_.tip_text_.Set(from._internal_tip_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TipAlert)
}

inline void CDOTAUserMsg_TipAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tip_text_){}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.tip_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tip_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_TipAlert::~CDOTAUserMsg_TipAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TipAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_TipAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tip_text_.Destroy();
}

void CDOTAUserMsg_TipAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_TipAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TipAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tip_text_.ClearNonDefaultToEmpty();
    }
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TipAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tip_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tip_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_TipAlert.tip_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_TipAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TipAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string tip_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_text().data(), static_cast<int>(this->_internal_tip_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TipAlert.tip_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tip_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TipAlert)
  return target;
}

size_t CDOTAUserMsg_TipAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TipAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tip_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tip_text());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_TipAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_TipAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_TipAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_TipAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_TipAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_TipAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tip_text(from._internal_tip_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_TipAlert::CopyFrom(const CDOTAUserMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TipAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TipAlert::InternalSwap(CDOTAUserMsg_TipAlert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tip_text_, lhs_arena,
      &other->_impl_.tip_text_, rhs_arena
  );
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TipAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[140]);
}

// ===================================================================

class CDOTAUserMsg_ReplaceQueryUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ReplaceQueryUnit>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CDOTAUserMsg_ReplaceQueryUnit::CDOTAUserMsg_ReplaceQueryUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ReplaceQueryUnit)
}
CDOTAUserMsg_ReplaceQueryUnit::CDOTAUserMsg_ReplaceQueryUnit(const CDOTAUserMsg_ReplaceQueryUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ReplaceQueryUnit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_entindex_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.source_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_entindex_, &from._impl_.target_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_entindex_) -
    reinterpret_cast<char*>(&_impl_.target_entindex_)) + sizeof(_impl_.source_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ReplaceQueryUnit)
}

inline void CDOTAUserMsg_ReplaceQueryUnit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_entindex_){-1}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.source_entindex_){-1}
  };
}

CDOTAUserMsg_ReplaceQueryUnit::~CDOTAUserMsg_ReplaceQueryUnit() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ReplaceQueryUnit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ReplaceQueryUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ReplaceQueryUnit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ReplaceQueryUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ReplaceQueryUnit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.target_entindex_ = -1;
    _impl_.player_id_ = -1;
    _impl_.source_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ReplaceQueryUnit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source_entindex = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_entindex(&has_bits);
          _impl_.source_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entindex = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_target_entindex(&has_bits);
          _impl_.target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ReplaceQueryUnit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ReplaceQueryUnit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 source_entindex = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_entindex(), target);
  }

  // optional int32 target_entindex = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ReplaceQueryUnit)
  return target;
}

size_t CDOTAUserMsg_ReplaceQueryUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ReplaceQueryUnit)
  size_t total_size = 0;

  // required int32 player_id = 1 [default = -1];
  if (_internal_has_player_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 target_entindex = 3 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entindex());
  }

  // optional int32 source_entindex = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_entindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ReplaceQueryUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ReplaceQueryUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ReplaceQueryUnit::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ReplaceQueryUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ReplaceQueryUnit*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ReplaceQueryUnit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ReplaceQueryUnit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_entindex_ = from._impl_.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_entindex_ = from._impl_.source_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ReplaceQueryUnit::CopyFrom(const CDOTAUserMsg_ReplaceQueryUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ReplaceQueryUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ReplaceQueryUnit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_ReplaceQueryUnit::InternalSwap(CDOTAUserMsg_ReplaceQueryUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.target_entindex_, other->_impl_.target_entindex_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.source_entindex_, other->_impl_.source_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ReplaceQueryUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[141]);
}

// ===================================================================

class CDOTAUserMsg_ESArcanaCombo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ESArcanaCombo>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_combo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_ESArcanaCombo::CDOTAUserMsg_ESArcanaCombo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ESArcanaCombo)
}
CDOTAUserMsg_ESArcanaCombo::CDOTAUserMsg_ESArcanaCombo(const CDOTAUserMsg_ESArcanaCombo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ESArcanaCombo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combo_count_){}
    , decltype(_impl_.arcana_level_){}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.combo_count_, &from._impl_.combo_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ehandle_) -
    reinterpret_cast<char*>(&_impl_.combo_count_)) + sizeof(_impl_.ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ESArcanaCombo)
}

inline void CDOTAUserMsg_ESArcanaCombo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combo_count_){0u}
    , decltype(_impl_.arcana_level_){0u}
    , decltype(_impl_.ehandle_){16777215u}
  };
}

CDOTAUserMsg_ESArcanaCombo::~CDOTAUserMsg_ESArcanaCombo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ESArcanaCombo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ESArcanaCombo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ESArcanaCombo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ESArcanaCombo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ESArcanaCombo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.combo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.arcana_level_) -
        reinterpret_cast<char*>(&_impl_.combo_count_)) + sizeof(_impl_.arcana_level_));
    _impl_.ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ESArcanaCombo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 combo_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_combo_count(&has_bits);
          _impl_.combo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_arcana_level(&has_bits);
          _impl_.arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ESArcanaCombo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ESArcanaCombo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 combo_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_combo_count(), target);
  }

  // optional uint32 arcana_level = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arcana_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ESArcanaCombo)
  return target;
}

size_t CDOTAUserMsg_ESArcanaCombo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ESArcanaCombo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 combo_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_combo_count());
    }

    // optional uint32 arcana_level = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arcana_level());
    }

    // optional uint32 ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ESArcanaCombo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ESArcanaCombo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ESArcanaCombo::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ESArcanaCombo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ESArcanaCombo*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ESArcanaCombo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ESArcanaCombo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.combo_count_ = from._impl_.combo_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.arcana_level_ = from._impl_.arcana_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ESArcanaCombo::CopyFrom(const CDOTAUserMsg_ESArcanaCombo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ESArcanaCombo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ESArcanaCombo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ESArcanaCombo::InternalSwap(CDOTAUserMsg_ESArcanaCombo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaCombo, _impl_.arcana_level_)
      + sizeof(CDOTAUserMsg_ESArcanaCombo::_impl_.arcana_level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaCombo, _impl_.combo_count_)>(
          reinterpret_cast<char*>(&_impl_.combo_count_),
          reinterpret_cast<char*>(&other->_impl_.combo_count_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ESArcanaCombo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[142]);
}

// ===================================================================

class CDOTAUserMsg_ESArcanaComboSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ESArcanaComboSummary>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_combo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_ESArcanaComboSummary::CDOTAUserMsg_ESArcanaComboSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ESArcanaComboSummary)
}
CDOTAUserMsg_ESArcanaComboSummary::CDOTAUserMsg_ESArcanaComboSummary(const CDOTAUserMsg_ESArcanaComboSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ESArcanaComboSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combo_count_){}
    , decltype(_impl_.damage_amount_){}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.combo_count_, &from._impl_.combo_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ehandle_) -
    reinterpret_cast<char*>(&_impl_.combo_count_)) + sizeof(_impl_.ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ESArcanaComboSummary)
}

inline void CDOTAUserMsg_ESArcanaComboSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combo_count_){0u}
    , decltype(_impl_.damage_amount_){0u}
    , decltype(_impl_.ehandle_){16777215u}
  };
}

CDOTAUserMsg_ESArcanaComboSummary::~CDOTAUserMsg_ESArcanaComboSummary() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ESArcanaComboSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ESArcanaComboSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_ESArcanaComboSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ESArcanaComboSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ESArcanaComboSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.combo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.damage_amount_) -
        reinterpret_cast<char*>(&_impl_.combo_count_)) + sizeof(_impl_.damage_amount_));
    _impl_.ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ESArcanaComboSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 combo_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_combo_count(&has_bits);
          _impl_.combo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_damage_amount(&has_bits);
          _impl_.damage_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ESArcanaComboSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ESArcanaComboSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 combo_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_combo_count(), target);
  }

  // optional uint32 damage_amount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ESArcanaComboSummary)
  return target;
}

size_t CDOTAUserMsg_ESArcanaComboSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ESArcanaComboSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 combo_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_combo_count());
    }

    // optional uint32 damage_amount = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage_amount());
    }

    // optional uint32 ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ESArcanaComboSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ESArcanaComboSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ESArcanaComboSummary::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ESArcanaComboSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ESArcanaComboSummary*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ESArcanaComboSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ESArcanaComboSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.combo_count_ = from._impl_.combo_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_amount_ = from._impl_.damage_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ESArcanaComboSummary::CopyFrom(const CDOTAUserMsg_ESArcanaComboSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ESArcanaComboSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ESArcanaComboSummary::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ESArcanaComboSummary::InternalSwap(CDOTAUserMsg_ESArcanaComboSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaComboSummary, _impl_.damage_amount_)
      + sizeof(CDOTAUserMsg_ESArcanaComboSummary::_impl_.damage_amount_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaComboSummary, _impl_.combo_count_)>(
          reinterpret_cast<char*>(&_impl_.combo_count_),
          reinterpret_cast<char*>(&other->_impl_.combo_count_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ESArcanaComboSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[143]);
}

// ===================================================================

class CDOTAUserMsg_OMArcanaCombo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OMArcanaCombo>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_multicast_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_multicast_chance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_OMArcanaCombo::CDOTAUserMsg_OMArcanaCombo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OMArcanaCombo)
}
CDOTAUserMsg_OMArcanaCombo::CDOTAUserMsg_OMArcanaCombo(const CDOTAUserMsg_OMArcanaCombo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_OMArcanaCombo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.multicast_amount_){}
    , decltype(_impl_.arcana_level_){}
    , decltype(_impl_.multicast_chance_){}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.multicast_amount_, &from._impl_.multicast_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ehandle_) -
    reinterpret_cast<char*>(&_impl_.multicast_amount_)) + sizeof(_impl_.ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OMArcanaCombo)
}

inline void CDOTAUserMsg_OMArcanaCombo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.multicast_amount_){0u}
    , decltype(_impl_.arcana_level_){0u}
    , decltype(_impl_.multicast_chance_){0u}
    , decltype(_impl_.ehandle_){16777215u}
  };
}

CDOTAUserMsg_OMArcanaCombo::~CDOTAUserMsg_OMArcanaCombo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OMArcanaCombo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_OMArcanaCombo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_OMArcanaCombo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_OMArcanaCombo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OMArcanaCombo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.multicast_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.multicast_chance_) -
        reinterpret_cast<char*>(&_impl_.multicast_amount_)) + sizeof(_impl_.multicast_chance_));
    _impl_.ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OMArcanaCombo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multicast_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_multicast_amount(&has_bits);
          _impl_.multicast_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_arcana_level(&has_bits);
          _impl_.arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multicast_chance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_multicast_chance(&has_bits);
          _impl_.multicast_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_OMArcanaCombo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OMArcanaCombo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 multicast_amount = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_multicast_amount(), target);
  }

  // optional uint32 arcana_level = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arcana_level(), target);
  }

  // optional uint32 multicast_chance = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_multicast_chance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OMArcanaCombo)
  return target;
}

size_t CDOTAUserMsg_OMArcanaCombo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OMArcanaCombo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 multicast_amount = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_multicast_amount());
    }

    // optional uint32 arcana_level = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arcana_level());
    }

    // optional uint32 multicast_chance = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_multicast_chance());
    }

    // optional uint32 ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_OMArcanaCombo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_OMArcanaCombo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_OMArcanaCombo::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_OMArcanaCombo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_OMArcanaCombo*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_OMArcanaCombo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OMArcanaCombo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.multicast_amount_ = from._impl_.multicast_amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.arcana_level_ = from._impl_.arcana_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.multicast_chance_ = from._impl_.multicast_chance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_OMArcanaCombo::CopyFrom(const CDOTAUserMsg_OMArcanaCombo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OMArcanaCombo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OMArcanaCombo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_OMArcanaCombo::InternalSwap(CDOTAUserMsg_OMArcanaCombo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OMArcanaCombo, _impl_.multicast_chance_)
      + sizeof(CDOTAUserMsg_OMArcanaCombo::_impl_.multicast_chance_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OMArcanaCombo, _impl_.multicast_amount_)>(
          reinterpret_cast<char*>(&_impl_.multicast_amount_),
          reinterpret_cast<char*>(&other->_impl_.multicast_amount_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OMArcanaCombo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[144]);
}

// ===================================================================

class CDOTAUserMsg_HighFiveCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HighFiveCompleted>()._impl_._has_bits_);
  static void set_has_player_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_special_high_five(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_special_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_HighFiveCompleted::CDOTAUserMsg_HighFiveCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HighFiveCompleted)
}
CDOTAUserMsg_HighFiveCompleted::CDOTAUserMsg_HighFiveCompleted(const CDOTAUserMsg_HighFiveCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HighFiveCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.special_high_five_){}
    , decltype(_impl_.special_entindex_){}
    , decltype(_impl_.player_id_1_){}
    , decltype(_impl_.player_id_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.special_high_five_, &from._impl_.special_high_five_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_2_) -
    reinterpret_cast<char*>(&_impl_.special_high_five_)) + sizeof(_impl_.player_id_2_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HighFiveCompleted)
}

inline void CDOTAUserMsg_HighFiveCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.special_high_five_){false}
    , decltype(_impl_.special_entindex_){-1}
    , decltype(_impl_.player_id_1_){-1}
    , decltype(_impl_.player_id_2_){-1}
  };
}

CDOTAUserMsg_HighFiveCompleted::~CDOTAUserMsg_HighFiveCompleted() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HighFiveCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HighFiveCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_HighFiveCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HighFiveCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HighFiveCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.special_high_five_ = false;
    _impl_.special_entindex_ = -1;
    _impl_.player_id_1_ = -1;
    _impl_.player_id_2_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HighFiveCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_1 = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_1(&has_bits);
          _impl_.player_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id_2 = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_2(&has_bits);
          _impl_.player_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool special_high_five = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_special_high_five(&has_bits);
          _impl_.special_high_five_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 special_entindex = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_special_entindex(&has_bits);
          _impl_.special_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HighFiveCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HighFiveCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_1 = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_1(), target);
  }

  // optional int32 player_id_2 = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_2(), target);
  }

  // optional bool special_high_five = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_special_high_five(), target);
  }

  // optional int32 special_entindex = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_special_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HighFiveCompleted)
  return target;
}

size_t CDOTAUserMsg_HighFiveCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HighFiveCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool special_high_five = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 special_entindex = 4 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_special_entindex());
    }

    // optional int32 player_id_1 = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_1());
    }

    // optional int32 player_id_2 = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HighFiveCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HighFiveCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HighFiveCompleted::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HighFiveCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HighFiveCompleted*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HighFiveCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HighFiveCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.special_high_five_ = from._impl_.special_high_five_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.special_entindex_ = from._impl_.special_entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_1_ = from._impl_.player_id_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_2_ = from._impl_.player_id_2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HighFiveCompleted::CopyFrom(const CDOTAUserMsg_HighFiveCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HighFiveCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HighFiveCompleted::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HighFiveCompleted::InternalSwap(CDOTAUserMsg_HighFiveCompleted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.special_high_five_, other->_impl_.special_high_five_);
  swap(_impl_.special_entindex_, other->_impl_.special_entindex_);
  swap(_impl_.player_id_1_, other->_impl_.player_id_1_);
  swap(_impl_.player_id_2_, other->_impl_.player_id_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HighFiveCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[145]);
}

// ===================================================================

class CDOTAUserMsg_HighFiveLeftHanging::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HighFiveLeftHanging>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HighFiveLeftHanging::CDOTAUserMsg_HighFiveLeftHanging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HighFiveLeftHanging)
}
CDOTAUserMsg_HighFiveLeftHanging::CDOTAUserMsg_HighFiveLeftHanging(const CDOTAUserMsg_HighFiveLeftHanging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HighFiveLeftHanging* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HighFiveLeftHanging)
}

inline void CDOTAUserMsg_HighFiveLeftHanging::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_HighFiveLeftHanging::~CDOTAUserMsg_HighFiveLeftHanging() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HighFiveLeftHanging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HighFiveLeftHanging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_HighFiveLeftHanging::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HighFiveLeftHanging::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HighFiveLeftHanging)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HighFiveLeftHanging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HighFiveLeftHanging::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HighFiveLeftHanging)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HighFiveLeftHanging)
  return target;
}

size_t CDOTAUserMsg_HighFiveLeftHanging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HighFiveLeftHanging)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 player_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HighFiveLeftHanging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HighFiveLeftHanging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HighFiveLeftHanging::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HighFiveLeftHanging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HighFiveLeftHanging*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HighFiveLeftHanging&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HighFiveLeftHanging)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HighFiveLeftHanging::CopyFrom(const CDOTAUserMsg_HighFiveLeftHanging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HighFiveLeftHanging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HighFiveLeftHanging::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HighFiveLeftHanging::InternalSwap(CDOTAUserMsg_HighFiveLeftHanging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HighFiveLeftHanging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[146]);
}

// ===================================================================

class CDOTAUserMsg_ShovelUnearth::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ShovelUnearth>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_all_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_locstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_ShovelUnearth::CDOTAUserMsg_ShovelUnearth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ShovelUnearth)
}
CDOTAUserMsg_ShovelUnearth::CDOTAUserMsg_ShovelUnearth(const CDOTAUserMsg_ShovelUnearth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ShovelUnearth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locstring_){}
    , decltype(_impl_.all_chat_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.locstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locstring()) {
    _this->_impl_.locstring_.Set(from._internal_locstring(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.all_chat_, &from._impl_.all_chat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.all_chat_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShovelUnearth)
}

inline void CDOTAUserMsg_ShovelUnearth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locstring_){}
    , decltype(_impl_.all_chat_){false}
    , decltype(_impl_.quantity_){0u}
    , decltype(_impl_.player_id_){-1}
  };
  _impl_.locstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_ShovelUnearth::~CDOTAUserMsg_ShovelUnearth() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShovelUnearth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ShovelUnearth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locstring_.Destroy();
}

void CDOTAUserMsg_ShovelUnearth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ShovelUnearth::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ShovelUnearth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.locstring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.all_chat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quantity_) -
        reinterpret_cast<char*>(&_impl_.all_chat_)) + sizeof(_impl_.quantity_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ShovelUnearth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool all_chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_all_chat(&has_bits);
          _impl_.all_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string locstring = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_locstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ShovelUnearth.locstring");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ShovelUnearth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShovelUnearth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional bool all_chat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_all_chat(), target);
  }

  // optional string locstring = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locstring().data(), static_cast<int>(this->_internal_locstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShovelUnearth.locstring");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locstring(), target);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShovelUnearth)
  return target;
}

size_t CDOTAUserMsg_ShovelUnearth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ShovelUnearth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string locstring = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locstring());
    }

    // optional bool all_chat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 quantity = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ShovelUnearth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ShovelUnearth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ShovelUnearth::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ShovelUnearth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ShovelUnearth*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ShovelUnearth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ShovelUnearth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_locstring(from._internal_locstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.all_chat_ = from._impl_.all_chat_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ShovelUnearth::CopyFrom(const CDOTAUserMsg_ShovelUnearth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ShovelUnearth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShovelUnearth::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ShovelUnearth::InternalSwap(CDOTAUserMsg_ShovelUnearth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locstring_, lhs_arena,
      &other->_impl_.locstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShovelUnearth, _impl_.quantity_)
      + sizeof(CDOTAUserMsg_ShovelUnearth::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShovelUnearth, _impl_.all_chat_)>(
          reinterpret_cast<char*>(&_impl_.all_chat_),
          reinterpret_cast<char*>(&other->_impl_.all_chat_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ShovelUnearth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[147]);
}

// ===================================================================

class CDOTAUserMsg_AllStarEvent_PlayerScore::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AllStarEvent_PlayerScore>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score_sans_kda(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_AllStarEvent_PlayerScore::CDOTAUserMsg_AllStarEvent_PlayerScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AllStarEvent.PlayerScore)
}
CDOTAUserMsg_AllStarEvent_PlayerScore::CDOTAUserMsg_AllStarEvent_PlayerScore(const CDOTAUserMsg_AllStarEvent_PlayerScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AllStarEvent_PlayerScore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.score_sans_kda_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.score_sans_kda_, &from._impl_.score_sans_kda_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.score_sans_kda_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AllStarEvent.PlayerScore)
}

inline void CDOTAUserMsg_AllStarEvent_PlayerScore::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.score_sans_kda_){0u}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_AllStarEvent_PlayerScore::~CDOTAUserMsg_AllStarEvent_PlayerScore() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AllStarEvent.PlayerScore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AllStarEvent_PlayerScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.score_sans_kda_ = 0u;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AllStarEvent_PlayerScore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 score_sans_kda = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score_sans_kda(&has_bits);
          _impl_.score_sans_kda_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AllStarEvent_PlayerScore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 score_sans_kda = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score_sans_kda(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AllStarEvent.PlayerScore)
  return target;
}

size_t CDOTAUserMsg_AllStarEvent_PlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 score_sans_kda = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score_sans_kda());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AllStarEvent_PlayerScore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AllStarEvent_PlayerScore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AllStarEvent_PlayerScore::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AllStarEvent_PlayerScore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AllStarEvent_PlayerScore*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AllStarEvent_PlayerScore&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.score_sans_kda_ = from._impl_.score_sans_kda_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::CopyFrom(const CDOTAUserMsg_AllStarEvent_PlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AllStarEvent_PlayerScore::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::InternalSwap(CDOTAUserMsg_AllStarEvent_PlayerScore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.score_sans_kda_, other->_impl_.score_sans_kda_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AllStarEvent_PlayerScore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[148]);
}

// ===================================================================

class CDOTAUserMsg_AllStarEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AllStarEvent>()._impl_._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_point_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_AllStarEvent::CDOTAUserMsg_AllStarEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AllStarEvent)
}
CDOTAUserMsg_AllStarEvent::CDOTAUserMsg_AllStarEvent(const CDOTAUserMsg_AllStarEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AllStarEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_scores_){from._impl_.player_scores_}
    , decltype(_impl_.point_amount_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.source_player_id_){}
    , decltype(_impl_.target_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.point_amount_, &from._impl_.point_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_player_id_) -
    reinterpret_cast<char*>(&_impl_.point_amount_)) + sizeof(_impl_.target_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AllStarEvent)
}

inline void CDOTAUserMsg_AllStarEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_scores_){arena}
    , decltype(_impl_.point_amount_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.source_player_id_){-1}
    , decltype(_impl_.target_player_id_){-1}
  };
}

CDOTAUserMsg_AllStarEvent::~CDOTAUserMsg_AllStarEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AllStarEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AllStarEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_scores_.~RepeatedPtrField();
}

void CDOTAUserMsg_AllStarEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AllStarEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AllStarEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_scores_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.point_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.point_amount_)) + sizeof(_impl_.event_id_));
    _impl_.source_player_id_ = -1;
    _impl_.target_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AllStarEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          _impl_.source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          _impl_.target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 point_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_point_amount(&has_bits);
          _impl_.point_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_AllStarEvent.PlayerScore player_scores = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AllStarEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AllStarEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 source_player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional uint32 point_amount = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_point_amount(), target);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_id(), target);
  }

  // repeated .CDOTAUserMsg_AllStarEvent.PlayerScore player_scores = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_scores_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_scores(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AllStarEvent)
  return target;
}

size_t CDOTAUserMsg_AllStarEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AllStarEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_AllStarEvent.PlayerScore player_scores = 5;
  total_size += 1UL * this->_internal_player_scores_size();
  for (const auto& msg : this->_impl_.player_scores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 point_amount = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_point_amount());
    }

    // optional uint32 event_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional int32 source_player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AllStarEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AllStarEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AllStarEvent::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AllStarEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AllStarEvent*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AllStarEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AllStarEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_scores_.MergeFrom(from._impl_.player_scores_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.point_amount_ = from._impl_.point_amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_player_id_ = from._impl_.source_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_player_id_ = from._impl_.target_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AllStarEvent::CopyFrom(const CDOTAUserMsg_AllStarEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AllStarEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AllStarEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AllStarEvent::InternalSwap(CDOTAUserMsg_AllStarEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_scores_.InternalSwap(&other->_impl_.player_scores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AllStarEvent, _impl_.event_id_)
      + sizeof(CDOTAUserMsg_AllStarEvent::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AllStarEvent, _impl_.point_amount_)>(
          reinterpret_cast<char*>(&_impl_.point_amount_),
          reinterpret_cast<char*>(&other->_impl_.point_amount_));
  swap(_impl_.source_player_id_, other->_impl_.source_player_id_);
  swap(_impl_.target_player_id_, other->_impl_.target_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AllStarEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[149]);
}

// ===================================================================

class CDOTAUserMsg_QueuedOrderRemoved::_Internal {
 public:
};

CDOTAUserMsg_QueuedOrderRemoved::CDOTAUserMsg_QueuedOrderRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QueuedOrderRemoved)
}
CDOTAUserMsg_QueuedOrderRemoved::CDOTAUserMsg_QueuedOrderRemoved(const CDOTAUserMsg_QueuedOrderRemoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_QueuedOrderRemoved* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unit_order_sequence_){from._impl_.unit_order_sequence_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QueuedOrderRemoved)
}

inline void CDOTAUserMsg_QueuedOrderRemoved::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unit_order_sequence_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_QueuedOrderRemoved::~CDOTAUserMsg_QueuedOrderRemoved() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QueuedOrderRemoved)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_QueuedOrderRemoved::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unit_order_sequence_.~RepeatedField();
}

void CDOTAUserMsg_QueuedOrderRemoved::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_QueuedOrderRemoved::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QueuedOrderRemoved)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unit_order_sequence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QueuedOrderRemoved::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 unit_order_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unit_order_sequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unit_order_sequence(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_QueuedOrderRemoved::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QueuedOrderRemoved)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unit_order_sequence = 1;
  for (int i = 0, n = this->_internal_unit_order_sequence_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unit_order_sequence(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QueuedOrderRemoved)
  return target;
}

size_t CDOTAUserMsg_QueuedOrderRemoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QueuedOrderRemoved)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 unit_order_sequence = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.unit_order_sequence_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_unit_order_sequence_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_QueuedOrderRemoved::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_QueuedOrderRemoved::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_QueuedOrderRemoved::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_QueuedOrderRemoved::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_QueuedOrderRemoved*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_QueuedOrderRemoved&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QueuedOrderRemoved)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unit_order_sequence_.MergeFrom(from._impl_.unit_order_sequence_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_QueuedOrderRemoved::CopyFrom(const CDOTAUserMsg_QueuedOrderRemoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QueuedOrderRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QueuedOrderRemoved::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_QueuedOrderRemoved::InternalSwap(CDOTAUserMsg_QueuedOrderRemoved* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unit_order_sequence_.InternalSwap(&other->_impl_.unit_order_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QueuedOrderRemoved::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[150]);
}

// ===================================================================

class CDOTAUserMsg_DebugChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DebugChallenge>()._impl_._has_bits_);
  static void set_has_challenge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_var_0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_var_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_max_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CDOTAUserMsg_DebugChallenge::CDOTAUserMsg_DebugChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DebugChallenge)
}
CDOTAUserMsg_DebugChallenge::CDOTAUserMsg_DebugChallenge(const CDOTAUserMsg_DebugChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DebugChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_type_){}
    , decltype(_impl_.challenge_query_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.challenge_var_0_){}
    , decltype(_impl_.challenge_var_1_){}
    , decltype(_impl_.challenge_max_rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.challenge_type_, &from._impl_.challenge_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.challenge_max_rank_) -
    reinterpret_cast<char*>(&_impl_.challenge_type_)) + sizeof(_impl_.challenge_max_rank_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DebugChallenge)
}

inline void CDOTAUserMsg_DebugChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_type_){0u}
    , decltype(_impl_.challenge_query_id_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.instance_id_){0u}
    , decltype(_impl_.challenge_var_0_){0u}
    , decltype(_impl_.challenge_var_1_){0u}
    , decltype(_impl_.challenge_max_rank_){0u}
  };
}

CDOTAUserMsg_DebugChallenge::~CDOTAUserMsg_DebugChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DebugChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DebugChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_DebugChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DebugChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DebugChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.challenge_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.challenge_max_rank_) -
        reinterpret_cast<char*>(&_impl_.challenge_type_)) + sizeof(_impl_.challenge_max_rank_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DebugChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 challenge_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_challenge_type(&has_bits);
          _impl_.challenge_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 challenge_query_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_challenge_query_id(&has_bits);
          _impl_.challenge_query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 event_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 instance_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_instance_id(&has_bits);
          _impl_.instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_var_0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_var_0(&has_bits);
          _impl_.challenge_var_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_var_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_challenge_var_1(&has_bits);
          _impl_.challenge_var_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_max_rank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_challenge_max_rank(&has_bits);
          _impl_.challenge_max_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DebugChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DebugChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 challenge_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenge_type(), target);
  }

  // required uint32 challenge_query_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_query_id(), target);
  }

  // required uint32 event_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_event_id(), target);
  }

  // optional uint32 instance_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_instance_id(), target);
  }

  // optional uint32 challenge_var_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_var_0(), target);
  }

  // optional uint32 challenge_var_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_challenge_var_1(), target);
  }

  // optional uint32 challenge_max_rank = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_max_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DebugChallenge)
  return target;
}

size_t CDOTAUserMsg_DebugChallenge::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAUserMsg_DebugChallenge)
  size_t total_size = 0;

  if (_internal_has_challenge_type()) {
    // required uint32 challenge_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_type());
  }

  if (_internal_has_challenge_query_id()) {
    // required uint32 challenge_query_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_query_id());
  }

  if (_internal_has_event_id()) {
    // required uint32 event_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
  }

  return total_size;
}
size_t CDOTAUserMsg_DebugChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DebugChallenge)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 challenge_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_type());

    // required uint32 challenge_query_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_query_id());

    // required uint32 event_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional uint32 instance_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance_id());
    }

    // optional uint32 challenge_var_0 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_var_0());
    }

    // optional uint32 challenge_var_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_var_1());
    }

    // optional uint32 challenge_max_rank = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_max_rank());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DebugChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DebugChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DebugChallenge::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DebugChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DebugChallenge*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DebugChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DebugChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.challenge_type_ = from._impl_.challenge_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.challenge_query_id_ = from._impl_.challenge_query_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.instance_id_ = from._impl_.instance_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_var_0_ = from._impl_.challenge_var_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.challenge_var_1_ = from._impl_.challenge_var_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.challenge_max_rank_ = from._impl_.challenge_max_rank_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DebugChallenge::CopyFrom(const CDOTAUserMsg_DebugChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DebugChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DebugChallenge::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_DebugChallenge::InternalSwap(CDOTAUserMsg_DebugChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DebugChallenge, _impl_.challenge_max_rank_)
      + sizeof(CDOTAUserMsg_DebugChallenge::_impl_.challenge_max_rank_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DebugChallenge, _impl_.challenge_type_)>(
          reinterpret_cast<char*>(&_impl_.challenge_type_),
          reinterpret_cast<char*>(&other->_impl_.challenge_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DebugChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[151]);
}

// ===================================================================

class CDOTAUserMsg_FoundNeutralItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_FoundNeutralItem>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tier_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_FoundNeutralItem::CDOTAUserMsg_FoundNeutralItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_FoundNeutralItem)
}
CDOTAUserMsg_FoundNeutralItem::CDOTAUserMsg_FoundNeutralItem(const CDOTAUserMsg_FoundNeutralItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_FoundNeutralItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_tier_){}
    , decltype(_impl_.tier_item_count_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.item_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_tier_, &from._impl_.item_tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_ability_id_) -
    reinterpret_cast<char*>(&_impl_.item_tier_)) + sizeof(_impl_.item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_FoundNeutralItem)
}

inline void CDOTAUserMsg_FoundNeutralItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_tier_){0u}
    , decltype(_impl_.tier_item_count_){0u}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.item_ability_id_){-1}
  };
}

CDOTAUserMsg_FoundNeutralItem::~CDOTAUserMsg_FoundNeutralItem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_FoundNeutralItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_FoundNeutralItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_FoundNeutralItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_FoundNeutralItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_FoundNeutralItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.item_tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tier_item_count_) -
        reinterpret_cast<char*>(&_impl_.item_tier_)) + sizeof(_impl_.tier_item_count_));
    _impl_.player_id_ = -1;
    _impl_.item_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_FoundNeutralItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_ability_id(&has_bits);
          _impl_.item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_tier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_tier(&has_bits);
          _impl_.item_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tier_item_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tier_item_count(&has_bits);
          _impl_.tier_item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_FoundNeutralItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_FoundNeutralItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 item_ability_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_ability_id(), target);
  }

  // optional uint32 item_tier = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_tier(), target);
  }

  // optional uint32 tier_item_count = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tier_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_FoundNeutralItem)
  return target;
}

size_t CDOTAUserMsg_FoundNeutralItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_FoundNeutralItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_tier = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_tier());
    }

    // optional uint32 tier_item_count = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier_item_count());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 item_ability_id = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_FoundNeutralItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_FoundNeutralItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_FoundNeutralItem::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_FoundNeutralItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_FoundNeutralItem*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_FoundNeutralItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_FoundNeutralItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_tier_ = from._impl_.item_tier_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tier_item_count_ = from._impl_.tier_item_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.item_ability_id_ = from._impl_.item_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_FoundNeutralItem::CopyFrom(const CDOTAUserMsg_FoundNeutralItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_FoundNeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_FoundNeutralItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_FoundNeutralItem::InternalSwap(CDOTAUserMsg_FoundNeutralItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FoundNeutralItem, _impl_.tier_item_count_)
      + sizeof(CDOTAUserMsg_FoundNeutralItem::_impl_.tier_item_count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FoundNeutralItem, _impl_.item_tier_)>(
          reinterpret_cast<char*>(&_impl_.item_tier_),
          reinterpret_cast<char*>(&other->_impl_.item_tier_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.item_ability_id_, other->_impl_.item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_FoundNeutralItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[152]);
}

// ===================================================================

class CDOTAUserMsg_OutpostCaptured::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OutpostCaptured>()._impl_._has_bits_);
  static void set_has_outpost_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_OutpostCaptured::CDOTAUserMsg_OutpostCaptured(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OutpostCaptured)
}
CDOTAUserMsg_OutpostCaptured::CDOTAUserMsg_OutpostCaptured(const CDOTAUserMsg_OutpostCaptured& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_OutpostCaptured* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.outpost_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.outpost_entindex_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.outpost_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OutpostCaptured)
}

inline void CDOTAUserMsg_OutpostCaptured::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.outpost_entindex_){-1}
  };
}

CDOTAUserMsg_OutpostCaptured::~CDOTAUserMsg_OutpostCaptured() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OutpostCaptured)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_OutpostCaptured::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_OutpostCaptured::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_OutpostCaptured::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OutpostCaptured)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.team_id_ = 0u;
    _impl_.outpost_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OutpostCaptured::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 outpost_entindex = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_outpost_entindex(&has_bits);
          _impl_.outpost_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_OutpostCaptured::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OutpostCaptured)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 outpost_entindex = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_outpost_entindex(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OutpostCaptured)
  return target;
}

size_t CDOTAUserMsg_OutpostCaptured::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OutpostCaptured)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional int32 outpost_entindex = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_outpost_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_OutpostCaptured::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_OutpostCaptured::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_OutpostCaptured::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_OutpostCaptured::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_OutpostCaptured*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_OutpostCaptured&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OutpostCaptured)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.outpost_entindex_ = from._impl_.outpost_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_OutpostCaptured::CopyFrom(const CDOTAUserMsg_OutpostCaptured& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OutpostCaptured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OutpostCaptured::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_OutpostCaptured::InternalSwap(CDOTAUserMsg_OutpostCaptured* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_id_, other->_impl_.team_id_);
  swap(_impl_.outpost_entindex_, other->_impl_.outpost_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OutpostCaptured::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[153]);
}

// ===================================================================

class CDOTAUserMsg_OutpostGrantedXP::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OutpostGrantedXP>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_OutpostGrantedXP::CDOTAUserMsg_OutpostGrantedXP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OutpostGrantedXP)
}
CDOTAUserMsg_OutpostGrantedXP::CDOTAUserMsg_OutpostGrantedXP(const CDOTAUserMsg_OutpostGrantedXP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_OutpostGrantedXP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.xp_amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xp_amount_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.xp_amount_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OutpostGrantedXP)
}

inline void CDOTAUserMsg_OutpostGrantedXP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.xp_amount_){0u}
  };
}

CDOTAUserMsg_OutpostGrantedXP::~CDOTAUserMsg_OutpostGrantedXP() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OutpostGrantedXP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_OutpostGrantedXP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_OutpostGrantedXP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_OutpostGrantedXP::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OutpostGrantedXP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xp_amount_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.xp_amount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OutpostGrantedXP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_xp_amount(&has_bits);
          _impl_.xp_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_OutpostGrantedXP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OutpostGrantedXP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 xp_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_xp_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OutpostGrantedXP)
  return target;
}

size_t CDOTAUserMsg_OutpostGrantedXP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OutpostGrantedXP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 xp_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_amount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_OutpostGrantedXP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_OutpostGrantedXP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_OutpostGrantedXP::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_OutpostGrantedXP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_OutpostGrantedXP*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_OutpostGrantedXP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OutpostGrantedXP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xp_amount_ = from._impl_.xp_amount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_OutpostGrantedXP::CopyFrom(const CDOTAUserMsg_OutpostGrantedXP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OutpostGrantedXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OutpostGrantedXP::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_OutpostGrantedXP::InternalSwap(CDOTAUserMsg_OutpostGrantedXP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OutpostGrantedXP, _impl_.xp_amount_)
      + sizeof(CDOTAUserMsg_OutpostGrantedXP::_impl_.xp_amount_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OutpostGrantedXP, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OutpostGrantedXP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[154]);
}

// ===================================================================

class CDOTAUserMsg_MoveCameraToUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MoveCameraToUnit>()._impl_._has_bits_);
  static void set_has_unit_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MoveCameraToUnit::CDOTAUserMsg_MoveCameraToUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MoveCameraToUnit)
}
CDOTAUserMsg_MoveCameraToUnit::CDOTAUserMsg_MoveCameraToUnit(const CDOTAUserMsg_MoveCameraToUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MoveCameraToUnit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unit_ehandle_ = from._impl_.unit_ehandle_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MoveCameraToUnit)
}

inline void CDOTAUserMsg_MoveCameraToUnit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_ehandle_){16777215u}
  };
}

CDOTAUserMsg_MoveCameraToUnit::~CDOTAUserMsg_MoveCameraToUnit() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MoveCameraToUnit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MoveCameraToUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_MoveCameraToUnit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MoveCameraToUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MoveCameraToUnit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unit_ehandle_ = 16777215u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MoveCameraToUnit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 unit_ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unit_ehandle(&has_bits);
          _impl_.unit_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MoveCameraToUnit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MoveCameraToUnit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 unit_ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unit_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MoveCameraToUnit)
  return target;
}

size_t CDOTAUserMsg_MoveCameraToUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MoveCameraToUnit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 unit_ehandle = 1 [default = 16777215];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unit_ehandle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MoveCameraToUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MoveCameraToUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MoveCameraToUnit::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MoveCameraToUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MoveCameraToUnit*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MoveCameraToUnit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MoveCameraToUnit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit_ehandle()) {
    _this->_internal_set_unit_ehandle(from._internal_unit_ehandle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MoveCameraToUnit::CopyFrom(const CDOTAUserMsg_MoveCameraToUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MoveCameraToUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MoveCameraToUnit::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MoveCameraToUnit::InternalSwap(CDOTAUserMsg_MoveCameraToUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unit_ehandle_, other->_impl_.unit_ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MoveCameraToUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[155]);
}

// ===================================================================

class CDOTAUserMsg_PauseMinigameData_DataBit::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PauseMinigameData_DataBit>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_PauseMinigameData_DataBit::CDOTAUserMsg_PauseMinigameData_DataBit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PauseMinigameData.DataBit)
}
CDOTAUserMsg_PauseMinigameData_DataBit::CDOTAUserMsg_PauseMinigameData_DataBit(const CDOTAUserMsg_PauseMinigameData_DataBit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PauseMinigameData_DataBit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.data_extra_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_extra_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.data_extra_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PauseMinigameData.DataBit)
}

inline void CDOTAUserMsg_PauseMinigameData_DataBit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.data_){0}
    , decltype(_impl_.data_extra_){int64_t{0}}
  };
}

CDOTAUserMsg_PauseMinigameData_DataBit::~CDOTAUserMsg_PauseMinigameData_DataBit() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PauseMinigameData.DataBit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PauseMinigameData_DataBit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_PauseMinigameData_DataBit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PauseMinigameData_DataBit::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_extra_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.data_extra_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PauseMinigameData_DataBit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 data_extra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_extra(&has_bits);
          _impl_.data_extra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PauseMinigameData_DataBit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  // optional int64 data_extra = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_data_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PauseMinigameData.DataBit)
  return target;
}

size_t CDOTAUserMsg_PauseMinigameData_DataBit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional int32 data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
    }

    // optional int64 data_extra = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_data_extra());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PauseMinigameData_DataBit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PauseMinigameData_DataBit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PauseMinigameData_DataBit::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PauseMinigameData_DataBit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PauseMinigameData_DataBit*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PauseMinigameData_DataBit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_ = from._impl_.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_extra_ = from._impl_.data_extra_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PauseMinigameData_DataBit::CopyFrom(const CDOTAUserMsg_PauseMinigameData_DataBit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PauseMinigameData_DataBit::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PauseMinigameData_DataBit::InternalSwap(CDOTAUserMsg_PauseMinigameData_DataBit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PauseMinigameData_DataBit, _impl_.data_extra_)
      + sizeof(CDOTAUserMsg_PauseMinigameData_DataBit::_impl_.data_extra_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PauseMinigameData_DataBit, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PauseMinigameData_DataBit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[156]);
}

// ===================================================================

class CDOTAUserMsg_PauseMinigameData::_Internal {
 public:
};

CDOTAUserMsg_PauseMinigameData::CDOTAUserMsg_PauseMinigameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PauseMinigameData)
}
CDOTAUserMsg_PauseMinigameData::CDOTAUserMsg_PauseMinigameData(const CDOTAUserMsg_PauseMinigameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PauseMinigameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_bits_){from._impl_.data_bits_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PauseMinigameData)
}

inline void CDOTAUserMsg_PauseMinigameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_bits_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_PauseMinigameData::~CDOTAUserMsg_PauseMinigameData() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PauseMinigameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PauseMinigameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_bits_.~RepeatedPtrField();
}

void CDOTAUserMsg_PauseMinigameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PauseMinigameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PauseMinigameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PauseMinigameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_PauseMinigameData.DataBit data_bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_bits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PauseMinigameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PauseMinigameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_PauseMinigameData.DataBit data_bits = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_bits_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_bits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PauseMinigameData)
  return target;
}

size_t CDOTAUserMsg_PauseMinigameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PauseMinigameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_PauseMinigameData.DataBit data_bits = 1;
  total_size += 1UL * this->_internal_data_bits_size();
  for (const auto& msg : this->_impl_.data_bits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PauseMinigameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PauseMinigameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PauseMinigameData::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PauseMinigameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PauseMinigameData*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PauseMinigameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PauseMinigameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_bits_.MergeFrom(from._impl_.data_bits_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PauseMinigameData::CopyFrom(const CDOTAUserMsg_PauseMinigameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PauseMinigameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PauseMinigameData::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PauseMinigameData::InternalSwap(CDOTAUserMsg_PauseMinigameData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_bits_.InternalSwap(&other->_impl_.data_bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PauseMinigameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[157]);
}

// ===================================================================

class CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_VersusScene_PlayerBehavior>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::VersusScene_PlayActivity& play_activity(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_play_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::VersusScene_ChatWheel& chat_wheel(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_chat_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::VersusScene_PlaybackRate& playback_rate(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::VersusScene_PlayActivity&
CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal::play_activity(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->_impl_.play_activity_;
}
const ::VersusScene_ChatWheel&
CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal::chat_wheel(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->_impl_.chat_wheel_;
}
const ::VersusScene_PlaybackRate&
CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal::playback_rate(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->_impl_.playback_rate_;
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::clear_play_activity() {
  if (_impl_.play_activity_ != nullptr) _impl_.play_activity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::clear_chat_wheel() {
  if (_impl_.chat_wheel_ != nullptr) _impl_.chat_wheel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::clear_playback_rate() {
  if (_impl_.playback_rate_ != nullptr) _impl_.playback_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CDOTAUserMsg_VersusScene_PlayerBehavior::CDOTAUserMsg_VersusScene_PlayerBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VersusScene_PlayerBehavior)
}
CDOTAUserMsg_VersusScene_PlayerBehavior::CDOTAUserMsg_VersusScene_PlayerBehavior(const CDOTAUserMsg_VersusScene_PlayerBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_VersusScene_PlayerBehavior* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.play_activity_){nullptr}
    , decltype(_impl_.chat_wheel_){nullptr}
    , decltype(_impl_.playback_rate_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.behavior_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_play_activity()) {
    _this->_impl_.play_activity_ = new ::VersusScene_PlayActivity(*from._impl_.play_activity_);
  }
  if (from._internal_has_chat_wheel()) {
    _this->_impl_.chat_wheel_ = new ::VersusScene_ChatWheel(*from._impl_.chat_wheel_);
  }
  if (from._internal_has_playback_rate()) {
    _this->_impl_.playback_rate_ = new ::VersusScene_PlaybackRate(*from._impl_.playback_rate_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.behavior_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.behavior_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VersusScene_PlayerBehavior)
}

inline void CDOTAUserMsg_VersusScene_PlayerBehavior::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.play_activity_){nullptr}
    , decltype(_impl_.chat_wheel_){nullptr}
    , decltype(_impl_.playback_rate_){nullptr}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.behavior_){1}
  };
}

CDOTAUserMsg_VersusScene_PlayerBehavior::~CDOTAUserMsg_VersusScene_PlayerBehavior() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VersusScene_PlayerBehavior)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_VersusScene_PlayerBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.play_activity_;
  if (this != internal_default_instance()) delete _impl_.chat_wheel_;
  if (this != internal_default_instance()) delete _impl_.playback_rate_;
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.play_activity_ != nullptr);
      _impl_.play_activity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chat_wheel_ != nullptr);
      _impl_.chat_wheel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.playback_rate_ != nullptr);
      _impl_.playback_rate_->Clear();
    }
    _impl_.player_id_ = -1;
    _impl_.behavior_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VersusScene_PlayerBehavior::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EDOTAVersusScenePlayerBehavior behavior = 2 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAVersusScenePlayerBehavior_IsValid(val))) {
            _internal_set_behavior(static_cast<::EDOTAVersusScenePlayerBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .VersusScene_PlayActivity play_activity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_play_activity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .VersusScene_ChatWheel chat_wheel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_wheel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .VersusScene_PlaybackRate playback_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_playback_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_VersusScene_PlayerBehavior::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .EDOTAVersusScenePlayerBehavior behavior = 2 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_behavior(), target);
  }

  // optional .VersusScene_PlayActivity play_activity = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::play_activity(this),
        _Internal::play_activity(this).GetCachedSize(), target, stream);
  }

  // optional .VersusScene_ChatWheel chat_wheel = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::chat_wheel(this),
        _Internal::chat_wheel(this).GetCachedSize(), target, stream);
  }

  // optional .VersusScene_PlaybackRate playback_rate = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::playback_rate(this),
        _Internal::playback_rate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VersusScene_PlayerBehavior)
  return target;
}

size_t CDOTAUserMsg_VersusScene_PlayerBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .VersusScene_PlayActivity play_activity = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.play_activity_);
    }

    // optional .VersusScene_ChatWheel chat_wheel = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chat_wheel_);
    }

    // optional .VersusScene_PlaybackRate playback_rate = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playback_rate_);
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional .EDOTAVersusScenePlayerBehavior behavior = 2 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_behavior());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_VersusScene_PlayerBehavior::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_VersusScene_PlayerBehavior::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_VersusScene_PlayerBehavior::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_VersusScene_PlayerBehavior::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_VersusScene_PlayerBehavior*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_VersusScene_PlayerBehavior&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_play_activity()->::VersusScene_PlayActivity::MergeFrom(
          from._internal_play_activity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chat_wheel()->::VersusScene_ChatWheel::MergeFrom(
          from._internal_chat_wheel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_playback_rate()->::VersusScene_PlaybackRate::MergeFrom(
          from._internal_playback_rate());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.behavior_ = from._impl_.behavior_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::CopyFrom(const CDOTAUserMsg_VersusScene_PlayerBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VersusScene_PlayerBehavior::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::InternalSwap(CDOTAUserMsg_VersusScene_PlayerBehavior* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_.playback_rate_)
      + sizeof(CDOTAUserMsg_VersusScene_PlayerBehavior::_impl_.playback_rate_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VersusScene_PlayerBehavior, _impl_.play_activity_)>(
          reinterpret_cast<char*>(&_impl_.play_activity_),
          reinterpret_cast<char*>(&other->_impl_.play_activity_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.behavior_, other->_impl_.behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VersusScene_PlayerBehavior::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[158]);
}

// ===================================================================

class CDOTAUserMsg_QoP_ArcanaSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_QoP_ArcanaSummary>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_players_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_players_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_QoP_ArcanaSummary::CDOTAUserMsg_QoP_ArcanaSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QoP_ArcanaSummary)
}
CDOTAUserMsg_QoP_ArcanaSummary::CDOTAUserMsg_QoP_ArcanaSummary(const CDOTAUserMsg_QoP_ArcanaSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_QoP_ArcanaSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arcana_level_){}
    , decltype(_impl_.players_hit_){}
    , decltype(_impl_.players_killed_){}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.arcana_level_, &from._impl_.arcana_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ehandle_) -
    reinterpret_cast<char*>(&_impl_.arcana_level_)) + sizeof(_impl_.ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QoP_ArcanaSummary)
}

inline void CDOTAUserMsg_QoP_ArcanaSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arcana_level_){0u}
    , decltype(_impl_.players_hit_){0u}
    , decltype(_impl_.players_killed_){0u}
    , decltype(_impl_.ehandle_){16777215u}
  };
}

CDOTAUserMsg_QoP_ArcanaSummary::~CDOTAUserMsg_QoP_ArcanaSummary() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QoP_ArcanaSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_QoP_ArcanaSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_QoP_ArcanaSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_QoP_ArcanaSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QoP_ArcanaSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.arcana_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.players_killed_) -
        reinterpret_cast<char*>(&_impl_.arcana_level_)) + sizeof(_impl_.players_killed_));
    _impl_.ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QoP_ArcanaSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_arcana_level(&has_bits);
          _impl_.arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 players_hit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_players_hit(&has_bits);
          _impl_.players_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 players_killed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_players_killed(&has_bits);
          _impl_.players_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_QoP_ArcanaSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QoP_ArcanaSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 arcana_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arcana_level(), target);
  }

  // optional uint32 players_hit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_players_hit(), target);
  }

  // optional uint32 players_killed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_players_killed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QoP_ArcanaSummary)
  return target;
}

size_t CDOTAUserMsg_QoP_ArcanaSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QoP_ArcanaSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 arcana_level = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arcana_level());
    }

    // optional uint32 players_hit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_players_hit());
    }

    // optional uint32 players_killed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_players_killed());
    }

    // optional uint32 ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_QoP_ArcanaSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_QoP_ArcanaSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_QoP_ArcanaSummary::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_QoP_ArcanaSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_QoP_ArcanaSummary*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_QoP_ArcanaSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QoP_ArcanaSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.arcana_level_ = from._impl_.arcana_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.players_hit_ = from._impl_.players_hit_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.players_killed_ = from._impl_.players_killed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_QoP_ArcanaSummary::CopyFrom(const CDOTAUserMsg_QoP_ArcanaSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QoP_ArcanaSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QoP_ArcanaSummary::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_QoP_ArcanaSummary::InternalSwap(CDOTAUserMsg_QoP_ArcanaSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QoP_ArcanaSummary, _impl_.players_killed_)
      + sizeof(CDOTAUserMsg_QoP_ArcanaSummary::_impl_.players_killed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QoP_ArcanaSummary, _impl_.arcana_level_)>(
          reinterpret_cast<char*>(&_impl_.arcana_level_),
          reinterpret_cast<char*>(&other->_impl_.arcana_level_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QoP_ArcanaSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[159]);
}

// ===================================================================

class CDOTAUserMsg_HotPotato_Created::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HotPotato_Created>()._impl_._has_bits_);
  static void set_has_player_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_HotPotato_Created::CDOTAUserMsg_HotPotato_Created(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HotPotato_Created)
}
CDOTAUserMsg_HotPotato_Created::CDOTAUserMsg_HotPotato_Created(const CDOTAUserMsg_HotPotato_Created& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HotPotato_Created* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_1_){}
    , decltype(_impl_.player_id_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_1_, &from._impl_.player_id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_2_) -
    reinterpret_cast<char*>(&_impl_.player_id_1_)) + sizeof(_impl_.player_id_2_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HotPotato_Created)
}

inline void CDOTAUserMsg_HotPotato_Created::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_1_){-1}
    , decltype(_impl_.player_id_2_){-1}
  };
}

CDOTAUserMsg_HotPotato_Created::~CDOTAUserMsg_HotPotato_Created() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HotPotato_Created)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HotPotato_Created::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_HotPotato_Created::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HotPotato_Created::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HotPotato_Created)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.player_id_1_ = -1;
    _impl_.player_id_2_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HotPotato_Created::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_1 = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_1(&has_bits);
          _impl_.player_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id_2 = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_2(&has_bits);
          _impl_.player_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HotPotato_Created::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HotPotato_Created)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_1 = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_1(), target);
  }

  // optional int32 player_id_2 = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HotPotato_Created)
  return target;
}

size_t CDOTAUserMsg_HotPotato_Created::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HotPotato_Created)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id_1 = 1 [default = -1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_1());
    }

    // optional int32 player_id_2 = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HotPotato_Created::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HotPotato_Created::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HotPotato_Created::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HotPotato_Created::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HotPotato_Created*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HotPotato_Created&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HotPotato_Created)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_1_ = from._impl_.player_id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_2_ = from._impl_.player_id_2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HotPotato_Created::CopyFrom(const CDOTAUserMsg_HotPotato_Created& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HotPotato_Created)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HotPotato_Created::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HotPotato_Created::InternalSwap(CDOTAUserMsg_HotPotato_Created* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_1_, other->_impl_.player_id_1_);
  swap(_impl_.player_id_2_, other->_impl_.player_id_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HotPotato_Created::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[160]);
}

// ===================================================================

class CDOTAUserMsg_HotPotato_Exploded::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HotPotato_Exploded>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HotPotato_Exploded::CDOTAUserMsg_HotPotato_Exploded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HotPotato_Exploded)
}
CDOTAUserMsg_HotPotato_Exploded::CDOTAUserMsg_HotPotato_Exploded(const CDOTAUserMsg_HotPotato_Exploded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_HotPotato_Exploded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HotPotato_Exploded)
}

inline void CDOTAUserMsg_HotPotato_Exploded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_HotPotato_Exploded::~CDOTAUserMsg_HotPotato_Exploded() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HotPotato_Exploded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_HotPotato_Exploded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_HotPotato_Exploded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_HotPotato_Exploded::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HotPotato_Exploded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HotPotato_Exploded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_HotPotato_Exploded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HotPotato_Exploded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HotPotato_Exploded)
  return target;
}

size_t CDOTAUserMsg_HotPotato_Exploded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HotPotato_Exploded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 player_id = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_HotPotato_Exploded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_HotPotato_Exploded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_HotPotato_Exploded::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_HotPotato_Exploded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_HotPotato_Exploded*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_HotPotato_Exploded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HotPotato_Exploded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_HotPotato_Exploded::CopyFrom(const CDOTAUserMsg_HotPotato_Exploded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HotPotato_Exploded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HotPotato_Exploded::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HotPotato_Exploded::InternalSwap(CDOTAUserMsg_HotPotato_Exploded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HotPotato_Exploded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[161]);
}

// ===================================================================

class CDOTAUserMsg_WK_Arcana_Progress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WK_Arcana_Progress>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_WK_Arcana_Progress::CDOTAUserMsg_WK_Arcana_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WK_Arcana_Progress)
}
CDOTAUserMsg_WK_Arcana_Progress::CDOTAUserMsg_WK_Arcana_Progress(const CDOTAUserMsg_WK_Arcana_Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_WK_Arcana_Progress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arcana_level_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.arcana_level_, &from._impl_.arcana_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ehandle_) -
    reinterpret_cast<char*>(&_impl_.arcana_level_)) + sizeof(_impl_.ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WK_Arcana_Progress)
}

inline void CDOTAUserMsg_WK_Arcana_Progress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arcana_level_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.ehandle_){16777215u}
  };
}

CDOTAUserMsg_WK_Arcana_Progress::~CDOTAUserMsg_WK_Arcana_Progress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WK_Arcana_Progress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_WK_Arcana_Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_WK_Arcana_Progress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_WK_Arcana_Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WK_Arcana_Progress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.arcana_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.arcana_level_)) + sizeof(_impl_.hero_id_));
    _impl_.ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WK_Arcana_Progress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_arcana_level(&has_bits);
          _impl_.arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_WK_Arcana_Progress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WK_Arcana_Progress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 arcana_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arcana_level(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WK_Arcana_Progress)
  return target;
}

size_t CDOTAUserMsg_WK_Arcana_Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WK_Arcana_Progress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 arcana_level = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arcana_level());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_WK_Arcana_Progress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_WK_Arcana_Progress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_WK_Arcana_Progress::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_WK_Arcana_Progress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_WK_Arcana_Progress*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_WK_Arcana_Progress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WK_Arcana_Progress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.arcana_level_ = from._impl_.arcana_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_WK_Arcana_Progress::CopyFrom(const CDOTAUserMsg_WK_Arcana_Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WK_Arcana_Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WK_Arcana_Progress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WK_Arcana_Progress::InternalSwap(CDOTAUserMsg_WK_Arcana_Progress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WK_Arcana_Progress, _impl_.hero_id_)
      + sizeof(CDOTAUserMsg_WK_Arcana_Progress::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WK_Arcana_Progress, _impl_.arcana_level_)>(
          reinterpret_cast<char*>(&_impl_.arcana_level_),
          reinterpret_cast<char*>(&other->_impl_.arcana_level_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WK_Arcana_Progress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[162]);
}

// ===================================================================

class CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
}
CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress(const CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
}

inline void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.player_id_){-1}
  };
}

CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::~CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.progress_ = 0u;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 progress = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  return target;
}

size_t CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 progress = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CopyFrom(const CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::InternalSwap(CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.progress_, other->_impl_.progress_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[163]);
}

// ===================================================================

class CDOTAUserMsg_GuildChallenge_Progress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GuildChallenge_Progress>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_progress_at_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_GuildChallenge_Progress::CDOTAUserMsg_GuildChallenge_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GuildChallenge_Progress)
}
CDOTAUserMsg_GuildChallenge_Progress::CDOTAUserMsg_GuildChallenge_Progress(const CDOTAUserMsg_GuildChallenge_Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_GuildChallenge_Progress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_progress_){from._impl_.player_progress_}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_parameter_){}
    , decltype(_impl_.challenge_type_){}
    , decltype(_impl_.challenge_progress_at_start_){}
    , decltype(_impl_.complete_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.complete_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.complete_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GuildChallenge_Progress)
}

inline void CDOTAUserMsg_GuildChallenge_Progress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_progress_){arena}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
    , decltype(_impl_.challenge_type_){0}
    , decltype(_impl_.challenge_progress_at_start_){0u}
    , decltype(_impl_.complete_){false}
  };
}

CDOTAUserMsg_GuildChallenge_Progress::~CDOTAUserMsg_GuildChallenge_Progress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GuildChallenge_Progress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_GuildChallenge_Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_progress_.~RepeatedPtrField();
}

void CDOTAUserMsg_GuildChallenge_Progress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_GuildChallenge_Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GuildChallenge_Progress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_progress_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.complete_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.complete_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GuildChallenge_Progress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress player_progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_GuildChallenge_Progress.EChallengeType challenge_type = 5 [default = k_EChallengeType_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAUserMsg_GuildChallenge_Progress_EChallengeType_IsValid(val))) {
            _internal_set_challenge_type(static_cast<::CDOTAUserMsg_GuildChallenge_Progress_EChallengeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_at_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_challenge_progress_at_start(&has_bits);
          _impl_.challenge_progress_at_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool complete = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_complete(&has_bits);
          _impl_.complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_GuildChallenge_Progress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GuildChallenge_Progress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress player_progress = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional .CDOTAUserMsg_GuildChallenge_Progress.EChallengeType challenge_type = 5 [default = k_EChallengeType_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_challenge_type(), target);
  }

  // optional uint32 challenge_progress_at_start = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_progress_at_start(), target);
  }

  // optional bool complete = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_complete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GuildChallenge_Progress)
  return target;
}

size_t CDOTAUserMsg_GuildChallenge_Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GuildChallenge_Progress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress player_progress = 1;
  total_size += 1UL * this->_internal_player_progress_size();
  for (const auto& msg : this->_impl_.player_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 guild_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

    // optional .CDOTAUserMsg_GuildChallenge_Progress.EChallengeType challenge_type = 5 [default = k_EChallengeType_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_challenge_type());
    }

    // optional uint32 challenge_progress_at_start = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_progress_at_start());
    }

    // optional bool complete = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_GuildChallenge_Progress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_GuildChallenge_Progress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_GuildChallenge_Progress::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_GuildChallenge_Progress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_GuildChallenge_Progress*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_GuildChallenge_Progress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GuildChallenge_Progress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_progress_.MergeFrom(from._impl_.player_progress_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_type_ = from._impl_.challenge_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_progress_at_start_ = from._impl_.challenge_progress_at_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.complete_ = from._impl_.complete_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_GuildChallenge_Progress::CopyFrom(const CDOTAUserMsg_GuildChallenge_Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GuildChallenge_Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GuildChallenge_Progress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GuildChallenge_Progress::InternalSwap(CDOTAUserMsg_GuildChallenge_Progress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_progress_.InternalSwap(&other->_impl_.player_progress_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GuildChallenge_Progress, _impl_.complete_)
      + sizeof(CDOTAUserMsg_GuildChallenge_Progress::_impl_.complete_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GuildChallenge_Progress, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GuildChallenge_Progress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[164]);
}

// ===================================================================

class CDOTAUserMsg_WRArcanaProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WRArcanaProgress>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_arrows_landed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_dealt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_max_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_WRArcanaProgress::CDOTAUserMsg_WRArcanaProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WRArcanaProgress)
}
CDOTAUserMsg_WRArcanaProgress::CDOTAUserMsg_WRArcanaProgress(const CDOTAUserMsg_WRArcanaProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_WRArcanaProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arrows_landed_){}
    , decltype(_impl_.damage_dealt_){}
    , decltype(_impl_.target_hp_){}
    , decltype(_impl_.target_max_hp_){}
    , decltype(_impl_.arcana_level_){}
    , decltype(_impl_.ehandle_){}
    , decltype(_impl_.target_ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.arrows_landed_, &from._impl_.arrows_landed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_ehandle_) -
    reinterpret_cast<char*>(&_impl_.arrows_landed_)) + sizeof(_impl_.target_ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WRArcanaProgress)
}

inline void CDOTAUserMsg_WRArcanaProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arrows_landed_){0u}
    , decltype(_impl_.damage_dealt_){0u}
    , decltype(_impl_.target_hp_){0u}
    , decltype(_impl_.target_max_hp_){0u}
    , decltype(_impl_.arcana_level_){0u}
    , decltype(_impl_.ehandle_){16777215u}
    , decltype(_impl_.target_ehandle_){16777215u}
  };
}

CDOTAUserMsg_WRArcanaProgress::~CDOTAUserMsg_WRArcanaProgress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WRArcanaProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_WRArcanaProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_WRArcanaProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_WRArcanaProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WRArcanaProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.arrows_landed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.arcana_level_) -
        reinterpret_cast<char*>(&_impl_.arrows_landed_)) + sizeof(_impl_.arcana_level_));
    _impl_.ehandle_ = 16777215u;
    _impl_.target_ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WRArcanaProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_ehandle = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_ehandle(&has_bits);
          _impl_.target_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arrows_landed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_arrows_landed(&has_bits);
          _impl_.arrows_landed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_dealt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_damage_dealt(&has_bits);
          _impl_.damage_dealt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_target_hp(&has_bits);
          _impl_.target_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_max_hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_target_max_hp(&has_bits);
          _impl_.target_max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_arcana_level(&has_bits);
          _impl_.arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_WRArcanaProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WRArcanaProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 target_ehandle = 2 [default = 16777215];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_ehandle(), target);
  }

  // optional uint32 arrows_landed = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arrows_landed(), target);
  }

  // optional uint32 damage_dealt = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_damage_dealt(), target);
  }

  // optional uint32 target_hp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_hp(), target);
  }

  // optional uint32 target_max_hp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_max_hp(), target);
  }

  // optional uint32 arcana_level = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_arcana_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WRArcanaProgress)
  return target;
}

size_t CDOTAUserMsg_WRArcanaProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WRArcanaProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 arrows_landed = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arrows_landed());
    }

    // optional uint32 damage_dealt = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage_dealt());
    }

    // optional uint32 target_hp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_hp());
    }

    // optional uint32 target_max_hp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_max_hp());
    }

    // optional uint32 arcana_level = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arcana_level());
    }

    // optional uint32 ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

    // optional uint32 target_ehandle = 2 [default = 16777215];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_WRArcanaProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_WRArcanaProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_WRArcanaProgress::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_WRArcanaProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_WRArcanaProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_WRArcanaProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WRArcanaProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.arrows_landed_ = from._impl_.arrows_landed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_dealt_ = from._impl_.damage_dealt_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_hp_ = from._impl_.target_hp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_max_hp_ = from._impl_.target_max_hp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.arcana_level_ = from._impl_.arcana_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.target_ehandle_ = from._impl_.target_ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_WRArcanaProgress::CopyFrom(const CDOTAUserMsg_WRArcanaProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WRArcanaProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WRArcanaProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WRArcanaProgress::InternalSwap(CDOTAUserMsg_WRArcanaProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaProgress, _impl_.arcana_level_)
      + sizeof(CDOTAUserMsg_WRArcanaProgress::_impl_.arcana_level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaProgress, _impl_.arrows_landed_)>(
          reinterpret_cast<char*>(&_impl_.arrows_landed_),
          reinterpret_cast<char*>(&other->_impl_.arrows_landed_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
  swap(_impl_.target_ehandle_, other->_impl_.target_ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WRArcanaProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[165]);
}

// ===================================================================

class CDOTAUserMsg_WRArcanaSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WRArcanaSummary>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_target_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_arrows_landed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_dealt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_max_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_WRArcanaSummary::CDOTAUserMsg_WRArcanaSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WRArcanaSummary)
}
CDOTAUserMsg_WRArcanaSummary::CDOTAUserMsg_WRArcanaSummary(const CDOTAUserMsg_WRArcanaSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_WRArcanaSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arrows_landed_){}
    , decltype(_impl_.damage_dealt_){}
    , decltype(_impl_.target_hp_){}
    , decltype(_impl_.target_max_hp_){}
    , decltype(_impl_.arcana_level_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.ehandle_){}
    , decltype(_impl_.target_ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.arrows_landed_, &from._impl_.arrows_landed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_ehandle_) -
    reinterpret_cast<char*>(&_impl_.arrows_landed_)) + sizeof(_impl_.target_ehandle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WRArcanaSummary)
}

inline void CDOTAUserMsg_WRArcanaSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arrows_landed_){0u}
    , decltype(_impl_.damage_dealt_){0u}
    , decltype(_impl_.target_hp_){0u}
    , decltype(_impl_.target_max_hp_){0u}
    , decltype(_impl_.arcana_level_){0u}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.ehandle_){16777215u}
    , decltype(_impl_.target_ehandle_){16777215u}
  };
}

CDOTAUserMsg_WRArcanaSummary::~CDOTAUserMsg_WRArcanaSummary() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WRArcanaSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_WRArcanaSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_WRArcanaSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_WRArcanaSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WRArcanaSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.arrows_landed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.success_) -
        reinterpret_cast<char*>(&_impl_.arrows_landed_)) + sizeof(_impl_.success_));
    _impl_.ehandle_ = 16777215u;
    _impl_.target_ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WRArcanaSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_ehandle = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_ehandle(&has_bits);
          _impl_.target_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arrows_landed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_arrows_landed(&has_bits);
          _impl_.arrows_landed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_dealt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_damage_dealt(&has_bits);
          _impl_.damage_dealt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_target_hp(&has_bits);
          _impl_.target_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_max_hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_target_max_hp(&has_bits);
          _impl_.target_max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_arcana_level(&has_bits);
          _impl_.arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool success = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_WRArcanaSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WRArcanaSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ehandle = 1 [default = 16777215];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 target_ehandle = 2 [default = 16777215];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_ehandle(), target);
  }

  // optional uint32 arrows_landed = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arrows_landed(), target);
  }

  // optional uint32 damage_dealt = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_damage_dealt(), target);
  }

  // optional uint32 target_hp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_hp(), target);
  }

  // optional uint32 target_max_hp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_max_hp(), target);
  }

  // optional uint32 arcana_level = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_arcana_level(), target);
  }

  // optional bool success = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WRArcanaSummary)
  return target;
}

size_t CDOTAUserMsg_WRArcanaSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WRArcanaSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 arrows_landed = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arrows_landed());
    }

    // optional uint32 damage_dealt = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage_dealt());
    }

    // optional uint32 target_hp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_hp());
    }

    // optional uint32 target_max_hp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_max_hp());
    }

    // optional uint32 arcana_level = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arcana_level());
    }

    // optional bool success = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 ehandle = 1 [default = 16777215];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

    // optional uint32 target_ehandle = 2 [default = 16777215];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_WRArcanaSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_WRArcanaSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_WRArcanaSummary::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_WRArcanaSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_WRArcanaSummary*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_WRArcanaSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WRArcanaSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.arrows_landed_ = from._impl_.arrows_landed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_dealt_ = from._impl_.damage_dealt_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_hp_ = from._impl_.target_hp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_max_hp_ = from._impl_.target_max_hp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.arcana_level_ = from._impl_.arcana_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.target_ehandle_ = from._impl_.target_ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_WRArcanaSummary::CopyFrom(const CDOTAUserMsg_WRArcanaSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WRArcanaSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WRArcanaSummary::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WRArcanaSummary::InternalSwap(CDOTAUserMsg_WRArcanaSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaSummary, _impl_.success_)
      + sizeof(CDOTAUserMsg_WRArcanaSummary::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaSummary, _impl_.arrows_landed_)>(
          reinterpret_cast<char*>(&_impl_.arrows_landed_),
          reinterpret_cast<char*>(&other->_impl_.arrows_landed_));
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
  swap(_impl_.target_ehandle_, other->_impl_.target_ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WRArcanaSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[166]);
}

// ===================================================================

class CDOTAUserMsg_EmptyItemSlotAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_EmptyItemSlotAlert>()._impl_._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_slot_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_EmptyItemSlotAlert::CDOTAUserMsg_EmptyItemSlotAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_EmptyItemSlotAlert)
}
CDOTAUserMsg_EmptyItemSlotAlert::CDOTAUserMsg_EmptyItemSlotAlert(const CDOTAUserMsg_EmptyItemSlotAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_EmptyItemSlotAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_index_){}
    , decltype(_impl_.cooldown_seconds_){}
    , decltype(_impl_.source_player_id_){}
    , decltype(_impl_.target_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_index_, &from._impl_.slot_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_player_id_) -
    reinterpret_cast<char*>(&_impl_.slot_index_)) + sizeof(_impl_.target_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_EmptyItemSlotAlert)
}

inline void CDOTAUserMsg_EmptyItemSlotAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_index_){0}
    , decltype(_impl_.cooldown_seconds_){0}
    , decltype(_impl_.source_player_id_){-1}
    , decltype(_impl_.target_player_id_){-1}
  };
}

CDOTAUserMsg_EmptyItemSlotAlert::~CDOTAUserMsg_EmptyItemSlotAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_EmptyItemSlotAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_EmptyItemSlotAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_EmptyItemSlotAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_EmptyItemSlotAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_EmptyItemSlotAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.slot_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cooldown_seconds_) -
        reinterpret_cast<char*>(&_impl_.slot_index_)) + sizeof(_impl_.cooldown_seconds_));
    _impl_.source_player_id_ = -1;
    _impl_.target_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_EmptyItemSlotAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          _impl_.source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          _impl_.target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slot_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slot_index(&has_bits);
          _impl_.slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cooldown_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cooldown_seconds(&has_bits);
          _impl_.cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_EmptyItemSlotAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_EmptyItemSlotAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 source_player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional int32 slot_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_slot_index(), target);
  }

  // optional int32 cooldown_seconds = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cooldown_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_EmptyItemSlotAlert)
  return target;
}

size_t CDOTAUserMsg_EmptyItemSlotAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_EmptyItemSlotAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 slot_index = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot_index());
    }

    // optional int32 cooldown_seconds = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cooldown_seconds());
    }

    // optional int32 source_player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_EmptyItemSlotAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_EmptyItemSlotAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_EmptyItemSlotAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_EmptyItemSlotAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_EmptyItemSlotAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_EmptyItemSlotAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_EmptyItemSlotAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slot_index_ = from._impl_.slot_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cooldown_seconds_ = from._impl_.cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_player_id_ = from._impl_.source_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_player_id_ = from._impl_.target_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_EmptyItemSlotAlert::CopyFrom(const CDOTAUserMsg_EmptyItemSlotAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_EmptyItemSlotAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EmptyItemSlotAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_EmptyItemSlotAlert::InternalSwap(CDOTAUserMsg_EmptyItemSlotAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EmptyItemSlotAlert, _impl_.cooldown_seconds_)
      + sizeof(CDOTAUserMsg_EmptyItemSlotAlert::_impl_.cooldown_seconds_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EmptyItemSlotAlert, _impl_.slot_index_)>(
          reinterpret_cast<char*>(&_impl_.slot_index_),
          reinterpret_cast<char*>(&other->_impl_.slot_index_));
  swap(_impl_.source_player_id_, other->_impl_.source_player_id_);
  swap(_impl_.target_player_id_, other->_impl_.target_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_EmptyItemSlotAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[167]);
}

// ===================================================================

class CDOTAUserMsg_AghsStatusAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AghsStatusAlert>()._impl_._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alert_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_scepter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_shard(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_AghsStatusAlert::CDOTAUserMsg_AghsStatusAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AghsStatusAlert)
}
CDOTAUserMsg_AghsStatusAlert::CDOTAUserMsg_AghsStatusAlert(const CDOTAUserMsg_AghsStatusAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_AghsStatusAlert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.alert_type_){}
    , decltype(_impl_.has_scepter_){}
    , decltype(_impl_.has_shard_){}
    , decltype(_impl_.target_entindex_){}
    , decltype(_impl_.source_player_id_){}
    , decltype(_impl_.target_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.alert_type_, &from._impl_.alert_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_player_id_) -
    reinterpret_cast<char*>(&_impl_.alert_type_)) + sizeof(_impl_.target_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AghsStatusAlert)
}

inline void CDOTAUserMsg_AghsStatusAlert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.alert_type_){0u}
    , decltype(_impl_.has_scepter_){false}
    , decltype(_impl_.has_shard_){false}
    , decltype(_impl_.target_entindex_){-1}
    , decltype(_impl_.source_player_id_){-1}
    , decltype(_impl_.target_player_id_){-1}
  };
}

CDOTAUserMsg_AghsStatusAlert::~CDOTAUserMsg_AghsStatusAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AghsStatusAlert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_AghsStatusAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_AghsStatusAlert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_AghsStatusAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AghsStatusAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.alert_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_shard_) -
        reinterpret_cast<char*>(&_impl_.alert_type_)) + sizeof(_impl_.has_shard_));
    _impl_.target_entindex_ = -1;
    _impl_.source_player_id_ = -1;
    _impl_.target_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AghsStatusAlert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          _impl_.source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          _impl_.target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entindex = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_target_entindex(&has_bits);
          _impl_.target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 alert_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_alert_type(&has_bits);
          _impl_.alert_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_scepter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_has_scepter(&has_bits);
          _impl_.has_scepter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_shard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_shard(&has_bits);
          _impl_.has_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_AghsStatusAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AghsStatusAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 source_player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional int32 target_entindex = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_entindex(), target);
  }

  // optional uint32 alert_type = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_alert_type(), target);
  }

  // optional bool has_scepter = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_has_scepter(), target);
  }

  // optional bool has_shard = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_has_shard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AghsStatusAlert)
  return target;
}

size_t CDOTAUserMsg_AghsStatusAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AghsStatusAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 alert_type = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_alert_type());
    }

    // optional bool has_scepter = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool has_shard = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 target_entindex = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entindex());
    }

    // optional int32 source_player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_AghsStatusAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_AghsStatusAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_AghsStatusAlert::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_AghsStatusAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_AghsStatusAlert*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_AghsStatusAlert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AghsStatusAlert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.alert_type_ = from._impl_.alert_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.has_scepter_ = from._impl_.has_scepter_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.has_shard_ = from._impl_.has_shard_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_entindex_ = from._impl_.target_entindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_player_id_ = from._impl_.source_player_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_player_id_ = from._impl_.target_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_AghsStatusAlert::CopyFrom(const CDOTAUserMsg_AghsStatusAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AghsStatusAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AghsStatusAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AghsStatusAlert::InternalSwap(CDOTAUserMsg_AghsStatusAlert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AghsStatusAlert, _impl_.has_shard_)
      + sizeof(CDOTAUserMsg_AghsStatusAlert::_impl_.has_shard_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AghsStatusAlert, _impl_.alert_type_)>(
          reinterpret_cast<char*>(&_impl_.alert_type_),
          reinterpret_cast<char*>(&other->_impl_.alert_type_));
  swap(_impl_.target_entindex_, other->_impl_.target_entindex_);
  swap(_impl_.source_player_id_, other->_impl_.source_player_id_);
  swap(_impl_.target_player_id_, other->_impl_.target_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AghsStatusAlert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[168]);
}

// ===================================================================

class CDOTAUserMsg_MutedPlayers::_Internal {
 public:
};

CDOTAUserMsg_MutedPlayers::CDOTAUserMsg_MutedPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MutedPlayers)
}
CDOTAUserMsg_MutedPlayers::CDOTAUserMsg_MutedPlayers(const CDOTAUserMsg_MutedPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MutedPlayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_muted_player_ids_){from._impl_.text_muted_player_ids_}
    , decltype(_impl_.voice_muted_player_ids_){from._impl_.voice_muted_player_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MutedPlayers)
}

inline void CDOTAUserMsg_MutedPlayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_muted_player_ids_){arena}
    , decltype(_impl_.voice_muted_player_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAUserMsg_MutedPlayers::~CDOTAUserMsg_MutedPlayers() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MutedPlayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MutedPlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_muted_player_ids_.~RepeatedField();
  _impl_.voice_muted_player_ids_.~RepeatedField();
}

void CDOTAUserMsg_MutedPlayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MutedPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MutedPlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_muted_player_ids_.Clear();
  _impl_.voice_muted_player_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MutedPlayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 text_muted_player_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_text_muted_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_text_muted_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 voice_muted_player_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_voice_muted_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_voice_muted_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MutedPlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MutedPlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 text_muted_player_ids = 1;
  for (int i = 0, n = this->_internal_text_muted_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_text_muted_player_ids(i), target);
  }

  // repeated int32 voice_muted_player_ids = 2;
  for (int i = 0, n = this->_internal_voice_muted_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_voice_muted_player_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MutedPlayers)
  return target;
}

size_t CDOTAUserMsg_MutedPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MutedPlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 text_muted_player_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.text_muted_player_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_text_muted_player_ids_size());
    total_size += data_size;
  }

  // repeated int32 voice_muted_player_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.voice_muted_player_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_voice_muted_player_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MutedPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MutedPlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MutedPlayers::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MutedPlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MutedPlayers*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MutedPlayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MutedPlayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.text_muted_player_ids_.MergeFrom(from._impl_.text_muted_player_ids_);
  _this->_impl_.voice_muted_player_ids_.MergeFrom(from._impl_.voice_muted_player_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MutedPlayers::CopyFrom(const CDOTAUserMsg_MutedPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MutedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MutedPlayers::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MutedPlayers::InternalSwap(CDOTAUserMsg_MutedPlayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.text_muted_player_ids_.InternalSwap(&other->_impl_.text_muted_player_ids_);
  _impl_.voice_muted_player_ids_.InternalSwap(&other->_impl_.voice_muted_player_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MutedPlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[169]);
}

// ===================================================================

class CDOTAUserMsg_ContextualTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ContextualTip>()._impl_._has_bits_);
  static void set_has_tip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_force_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_int_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_int_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_float_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_float_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_string_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_string_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_text_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tip_annotation_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_panorama_snippet(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_ContextualTip::CDOTAUserMsg_ContextualTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ContextualTip)
}
CDOTAUserMsg_ContextualTip::CDOTAUserMsg_ContextualTip(const CDOTAUserMsg_ContextualTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ContextualTip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.referenced_abilities_){from._impl_.referenced_abilities_}
    , decltype(_impl_.referenced_units_){from._impl_.referenced_units_}
    , decltype(_impl_.panorama_classes_){from._impl_.panorama_classes_}
    , decltype(_impl_.string_param_){}
    , decltype(_impl_.string_param2_){}
    , decltype(_impl_.tip_text_override_){}
    , decltype(_impl_.tip_annotation_override_){}
    , decltype(_impl_.panorama_snippet_){}
    , decltype(_impl_.tip_id_){}
    , decltype(_impl_.force_annotation_){}
    , decltype(_impl_.variant_){}
    , decltype(_impl_.int_param_){}
    , decltype(_impl_.int_param2_){}
    , decltype(_impl_.float_param_){}
    , decltype(_impl_.float_param2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_param()) {
    _this->_impl_.string_param_.Set(from._internal_string_param(), 
      _this->GetArenaForAllocation());
  }
  _impl_.string_param2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_param2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_param2()) {
    _this->_impl_.string_param2_.Set(from._internal_string_param2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tip_text_override_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tip_text_override_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tip_text_override()) {
    _this->_impl_.tip_text_override_.Set(from._internal_tip_text_override(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tip_annotation_override_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tip_annotation_override_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tip_annotation_override()) {
    _this->_impl_.tip_annotation_override_.Set(from._internal_tip_annotation_override(), 
      _this->GetArenaForAllocation());
  }
  _impl_.panorama_snippet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.panorama_snippet_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_panorama_snippet()) {
    _this->_impl_.panorama_snippet_.Set(from._internal_panorama_snippet(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tip_id_, &from._impl_.tip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.float_param2_) -
    reinterpret_cast<char*>(&_impl_.tip_id_)) + sizeof(_impl_.float_param2_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ContextualTip)
}

inline void CDOTAUserMsg_ContextualTip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.referenced_abilities_){arena}
    , decltype(_impl_.referenced_units_){arena}
    , decltype(_impl_.panorama_classes_){arena}
    , decltype(_impl_.string_param_){}
    , decltype(_impl_.string_param2_){}
    , decltype(_impl_.tip_text_override_){}
    , decltype(_impl_.tip_annotation_override_){}
    , decltype(_impl_.panorama_snippet_){}
    , decltype(_impl_.tip_id_){0}
    , decltype(_impl_.force_annotation_){false}
    , decltype(_impl_.variant_){0}
    , decltype(_impl_.int_param_){0}
    , decltype(_impl_.int_param2_){0}
    , decltype(_impl_.float_param_){0}
    , decltype(_impl_.float_param2_){0}
  };
  _impl_.string_param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_param2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_param2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tip_text_override_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tip_text_override_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tip_annotation_override_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tip_annotation_override_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.panorama_snippet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.panorama_snippet_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_ContextualTip::~CDOTAUserMsg_ContextualTip() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ContextualTip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ContextualTip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.referenced_abilities_.~RepeatedPtrField();
  _impl_.referenced_units_.~RepeatedPtrField();
  _impl_.panorama_classes_.~RepeatedPtrField();
  _impl_.string_param_.Destroy();
  _impl_.string_param2_.Destroy();
  _impl_.tip_text_override_.Destroy();
  _impl_.tip_annotation_override_.Destroy();
  _impl_.panorama_snippet_.Destroy();
}

void CDOTAUserMsg_ContextualTip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ContextualTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ContextualTip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.referenced_abilities_.Clear();
  _impl_.referenced_units_.Clear();
  _impl_.panorama_classes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_param_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.string_param2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.tip_text_override_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.tip_annotation_override_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.panorama_snippet_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.tip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.variant_) -
        reinterpret_cast<char*>(&_impl_.tip_id_)) + sizeof(_impl_.variant_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.int_param_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.float_param2_) -
        reinterpret_cast<char*>(&_impl_.int_param_)) + sizeof(_impl_.float_param2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ContextualTip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tip_id(&has_bits);
          _impl_.tip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string referenced_abilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_referenced_abilities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.referenced_abilities");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string referenced_units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_referenced_units();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.referenced_units");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string panorama_classes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_panorama_classes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.panorama_classes");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool force_annotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_force_annotation(&has_bits);
          _impl_.force_annotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 variant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_variant(&has_bits);
          _impl_.variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_int_param(&has_bits);
          _impl_.int_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int_param2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_int_param2(&has_bits);
          _impl_.int_param2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float float_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_float_param(&has_bits);
          _impl_.float_param_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float_param2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_float_param2(&has_bits);
          _impl_.float_param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string string_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_string_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.string_param");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string string_param2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_string_param2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.string_param2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tip_text_override = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_tip_text_override();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.tip_text_override");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tip_annotation_override = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_tip_annotation_override();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.tip_annotation_override");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string panorama_snippet = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_panorama_snippet();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.panorama_snippet");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ContextualTip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ContextualTip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tip_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tip_id(), target);
  }

  // repeated string referenced_abilities = 2;
  for (int i = 0, n = this->_internal_referenced_abilities_size(); i < n; i++) {
    const auto& s = this->_internal_referenced_abilities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.referenced_abilities");
    target = stream->WriteString(2, s, target);
  }

  // repeated string referenced_units = 3;
  for (int i = 0, n = this->_internal_referenced_units_size(); i < n; i++) {
    const auto& s = this->_internal_referenced_units(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.referenced_units");
    target = stream->WriteString(3, s, target);
  }

  // repeated string panorama_classes = 4;
  for (int i = 0, n = this->_internal_panorama_classes_size(); i < n; i++) {
    const auto& s = this->_internal_panorama_classes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.panorama_classes");
    target = stream->WriteString(4, s, target);
  }

  // optional bool force_annotation = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_force_annotation(), target);
  }

  // optional int32 variant = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_variant(), target);
  }

  // optional int32 int_param = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_int_param(), target);
  }

  // optional int32 int_param2 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_int_param2(), target);
  }

  // optional float float_param = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_float_param(), target);
  }

  // optional float float_param2 = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_float_param2(), target);
  }

  // optional string string_param = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_param().data(), static_cast<int>(this->_internal_string_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.string_param");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_string_param(), target);
  }

  // optional string string_param2 = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_param2().data(), static_cast<int>(this->_internal_string_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.string_param2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_string_param2(), target);
  }

  // optional string tip_text_override = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_text_override().data(), static_cast<int>(this->_internal_tip_text_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.tip_text_override");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_tip_text_override(), target);
  }

  // optional string tip_annotation_override = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_annotation_override().data(), static_cast<int>(this->_internal_tip_annotation_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.tip_annotation_override");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_tip_annotation_override(), target);
  }

  // optional string panorama_snippet = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_panorama_snippet().data(), static_cast<int>(this->_internal_panorama_snippet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.panorama_snippet");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_panorama_snippet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ContextualTip)
  return target;
}

size_t CDOTAUserMsg_ContextualTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ContextualTip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string referenced_abilities = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.referenced_abilities_.size());
  for (int i = 0, n = _impl_.referenced_abilities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.referenced_abilities_.Get(i));
  }

  // repeated string referenced_units = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.referenced_units_.size());
  for (int i = 0, n = _impl_.referenced_units_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.referenced_units_.Get(i));
  }

  // repeated string panorama_classes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.panorama_classes_.size());
  for (int i = 0, n = _impl_.panorama_classes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.panorama_classes_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_param = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_param());
    }

    // optional string string_param2 = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_param2());
    }

    // optional string tip_text_override = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tip_text_override());
    }

    // optional string tip_annotation_override = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tip_annotation_override());
    }

    // optional string panorama_snippet = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_panorama_snippet());
    }

    // optional int32 tip_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tip_id());
    }

    // optional bool force_annotation = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 variant = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_variant());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 int_param = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_param());
    }

    // optional int32 int_param2 = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_param2());
    }

    // optional float float_param = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float float_param2 = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ContextualTip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ContextualTip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ContextualTip::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ContextualTip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ContextualTip*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ContextualTip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ContextualTip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.referenced_abilities_.MergeFrom(from._impl_.referenced_abilities_);
  _this->_impl_.referenced_units_.MergeFrom(from._impl_.referenced_units_);
  _this->_impl_.panorama_classes_.MergeFrom(from._impl_.panorama_classes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_param(from._internal_string_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_string_param2(from._internal_string_param2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_tip_text_override(from._internal_tip_text_override());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_tip_annotation_override(from._internal_tip_annotation_override());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_panorama_snippet(from._internal_panorama_snippet());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tip_id_ = from._impl_.tip_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.force_annotation_ = from._impl_.force_annotation_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.variant_ = from._impl_.variant_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.int_param_ = from._impl_.int_param_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.int_param2_ = from._impl_.int_param2_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.float_param_ = from._impl_.float_param_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.float_param2_ = from._impl_.float_param2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ContextualTip::CopyFrom(const CDOTAUserMsg_ContextualTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ContextualTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ContextualTip::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ContextualTip::InternalSwap(CDOTAUserMsg_ContextualTip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.referenced_abilities_.InternalSwap(&other->_impl_.referenced_abilities_);
  _impl_.referenced_units_.InternalSwap(&other->_impl_.referenced_units_);
  _impl_.panorama_classes_.InternalSwap(&other->_impl_.panorama_classes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_param_, lhs_arena,
      &other->_impl_.string_param_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_param2_, lhs_arena,
      &other->_impl_.string_param2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tip_text_override_, lhs_arena,
      &other->_impl_.tip_text_override_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tip_annotation_override_, lhs_arena,
      &other->_impl_.tip_annotation_override_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.panorama_snippet_, lhs_arena,
      &other->_impl_.panorama_snippet_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ContextualTip, _impl_.float_param2_)
      + sizeof(CDOTAUserMsg_ContextualTip::_impl_.float_param2_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ContextualTip, _impl_.tip_id_)>(
          reinterpret_cast<char*>(&_impl_.tip_id_),
          reinterpret_cast<char*>(&other->_impl_.tip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ContextualTip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[170]);
}

// ===================================================================

class CDOTAUserMsg_ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatMessage>()._impl_._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_ChatMessage::CDOTAUserMsg_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatMessage)
}
CDOTAUserMsg_ChatMessage::CDOTAUserMsg_ChatMessage(const CDOTAUserMsg_ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_text_){}
    , decltype(_impl_.channel_type_){}
    , decltype(_impl_.source_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_text()) {
    _this->_impl_.message_text_.Set(from._internal_message_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channel_type_, &from._impl_.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_player_id_) -
    reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.source_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatMessage)
}

inline void CDOTAUserMsg_ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_text_){}
    , decltype(_impl_.channel_type_){0u}
    , decltype(_impl_.source_player_id_){-1}
  };
  _impl_.message_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAUserMsg_ChatMessage::~CDOTAUserMsg_ChatMessage() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_text_.Destroy();
}

void CDOTAUserMsg_ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.channel_type_ = 0u;
    _impl_.source_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          _impl_.source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_type(&has_bits);
          _impl_.channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAUserMsg_ChatMessage.message_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 source_player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_type(), target);
  }

  // optional string message_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_text().data(), static_cast<int>(this->_internal_message_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ChatMessage.message_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatMessage)
  return target;
}

size_t CDOTAUserMsg_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message_text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_text());
    }

    // optional uint32 channel_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_type());
    }

    // optional int32 source_player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_ChatMessage::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_ChatMessage*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message_text(from._internal_message_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_player_id_ = from._impl_.source_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_ChatMessage::CopyFrom(const CDOTAUserMsg_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatMessage::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatMessage::InternalSwap(CDOTAUserMsg_ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_text_, lhs_arena,
      &other->_impl_.message_text_, rhs_arena
  );
  swap(_impl_.channel_type_, other->_impl_.channel_type_);
  swap(_impl_.source_player_id_, other->_impl_.source_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[171]);
}

// ===================================================================

class CDOTAUserMsg_RockPaperScissorsStarted::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_RockPaperScissorsStarted>()._impl_._has_bits_);
  static void set_has_player_id_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_RockPaperScissorsStarted::CDOTAUserMsg_RockPaperScissorsStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_RockPaperScissorsStarted)
}
CDOTAUserMsg_RockPaperScissorsStarted::CDOTAUserMsg_RockPaperScissorsStarted(const CDOTAUserMsg_RockPaperScissorsStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_RockPaperScissorsStarted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_source_){}
    , decltype(_impl_.player_id_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_source_, &from._impl_.player_id_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_target_) -
    reinterpret_cast<char*>(&_impl_.player_id_source_)) + sizeof(_impl_.player_id_target_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_RockPaperScissorsStarted)
}

inline void CDOTAUserMsg_RockPaperScissorsStarted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_source_){-1}
    , decltype(_impl_.player_id_target_){-1}
  };
}

CDOTAUserMsg_RockPaperScissorsStarted::~CDOTAUserMsg_RockPaperScissorsStarted() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_RockPaperScissorsStarted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_RockPaperScissorsStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_RockPaperScissorsStarted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_RockPaperScissorsStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_RockPaperScissorsStarted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.player_id_source_ = -1;
    _impl_.player_id_target_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_RockPaperScissorsStarted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_source = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_source(&has_bits);
          _impl_.player_id_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id_target = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_target(&has_bits);
          _impl_.player_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_RockPaperScissorsStarted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_RockPaperScissorsStarted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_source = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_source(), target);
  }

  // optional int32 player_id_target = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_RockPaperScissorsStarted)
  return target;
}

size_t CDOTAUserMsg_RockPaperScissorsStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_RockPaperScissorsStarted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id_source = 1 [default = -1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_source());
    }

    // optional int32 player_id_target = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_RockPaperScissorsStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_RockPaperScissorsStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_RockPaperScissorsStarted::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_RockPaperScissorsStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_RockPaperScissorsStarted*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_RockPaperScissorsStarted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_RockPaperScissorsStarted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_source_ = from._impl_.player_id_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_target_ = from._impl_.player_id_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_RockPaperScissorsStarted::CopyFrom(const CDOTAUserMsg_RockPaperScissorsStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_RockPaperScissorsStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_RockPaperScissorsStarted::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_RockPaperScissorsStarted::InternalSwap(CDOTAUserMsg_RockPaperScissorsStarted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_source_, other->_impl_.player_id_source_);
  swap(_impl_.player_id_target_, other->_impl_.player_id_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_RockPaperScissorsStarted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[172]);
}

// ===================================================================

class CDOTAUserMsg_RockPaperScissorsFinished::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_RockPaperScissorsFinished>()._impl_._has_bits_);
  static void set_has_player_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_1_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_2_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_RockPaperScissorsFinished::CDOTAUserMsg_RockPaperScissorsFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_RockPaperScissorsFinished)
}
CDOTAUserMsg_RockPaperScissorsFinished::CDOTAUserMsg_RockPaperScissorsFinished(const CDOTAUserMsg_RockPaperScissorsFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_RockPaperScissorsFinished* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_1_choice_){}
    , decltype(_impl_.player_2_choice_){}
    , decltype(_impl_.player_id_1_){}
    , decltype(_impl_.player_id_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_1_choice_, &from._impl_.player_1_choice_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_2_) -
    reinterpret_cast<char*>(&_impl_.player_1_choice_)) + sizeof(_impl_.player_id_2_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_RockPaperScissorsFinished)
}

inline void CDOTAUserMsg_RockPaperScissorsFinished::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_1_choice_){0}
    , decltype(_impl_.player_2_choice_){0}
    , decltype(_impl_.player_id_1_){-1}
    , decltype(_impl_.player_id_2_){-1}
  };
}

CDOTAUserMsg_RockPaperScissorsFinished::~CDOTAUserMsg_RockPaperScissorsFinished() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_RockPaperScissorsFinished)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_RockPaperScissorsFinished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_RockPaperScissorsFinished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_RockPaperScissorsFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_RockPaperScissorsFinished)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.player_1_choice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_2_choice_) -
        reinterpret_cast<char*>(&_impl_.player_1_choice_)) + sizeof(_impl_.player_2_choice_));
    _impl_.player_id_1_ = -1;
    _impl_.player_id_2_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_RockPaperScissorsFinished::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_1 = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_1(&has_bits);
          _impl_.player_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id_2 = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_2(&has_bits);
          _impl_.player_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_1_choice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_1_choice(&has_bits);
          _impl_.player_1_choice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_2_choice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_player_2_choice(&has_bits);
          _impl_.player_2_choice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_RockPaperScissorsFinished::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_RockPaperScissorsFinished)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_1 = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_1(), target);
  }

  // optional int32 player_id_2 = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_2(), target);
  }

  // optional int32 player_1_choice = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_1_choice(), target);
  }

  // optional int32 player_2_choice = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_2_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_RockPaperScissorsFinished)
  return target;
}

size_t CDOTAUserMsg_RockPaperScissorsFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_RockPaperScissorsFinished)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 player_1_choice = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_1_choice());
    }

    // optional int32 player_2_choice = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_2_choice());
    }

    // optional int32 player_id_1 = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_1());
    }

    // optional int32 player_id_2 = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_RockPaperScissorsFinished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_RockPaperScissorsFinished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_RockPaperScissorsFinished::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_RockPaperScissorsFinished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_RockPaperScissorsFinished*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_RockPaperScissorsFinished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_RockPaperScissorsFinished)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_1_choice_ = from._impl_.player_1_choice_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_2_choice_ = from._impl_.player_2_choice_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_1_ = from._impl_.player_id_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_2_ = from._impl_.player_id_2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_RockPaperScissorsFinished::CopyFrom(const CDOTAUserMsg_RockPaperScissorsFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_RockPaperScissorsFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_RockPaperScissorsFinished::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_RockPaperScissorsFinished::InternalSwap(CDOTAUserMsg_RockPaperScissorsFinished* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RockPaperScissorsFinished, _impl_.player_2_choice_)
      + sizeof(CDOTAUserMsg_RockPaperScissorsFinished::_impl_.player_2_choice_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RockPaperScissorsFinished, _impl_.player_1_choice_)>(
          reinterpret_cast<char*>(&_impl_.player_1_choice_),
          reinterpret_cast<char*>(&other->_impl_.player_1_choice_));
  swap(_impl_.player_id_1_, other->_impl_.player_id_1_);
  swap(_impl_.player_id_2_, other->_impl_.player_id_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_RockPaperScissorsFinished::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[173]);
}

// ===================================================================

class CDOTAUserMsg_DuelOpponentKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DuelOpponentKilled>()._impl_._has_bits_);
  static void set_has_player_id_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_loser(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_DuelOpponentKilled::CDOTAUserMsg_DuelOpponentKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DuelOpponentKilled)
}
CDOTAUserMsg_DuelOpponentKilled::CDOTAUserMsg_DuelOpponentKilled(const CDOTAUserMsg_DuelOpponentKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DuelOpponentKilled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_winner_){}
    , decltype(_impl_.player_id_loser_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_winner_, &from._impl_.player_id_winner_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_loser_) -
    reinterpret_cast<char*>(&_impl_.player_id_winner_)) + sizeof(_impl_.player_id_loser_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DuelOpponentKilled)
}

inline void CDOTAUserMsg_DuelOpponentKilled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_winner_){0}
    , decltype(_impl_.player_id_loser_){0}
  };
}

CDOTAUserMsg_DuelOpponentKilled::~CDOTAUserMsg_DuelOpponentKilled() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DuelOpponentKilled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DuelOpponentKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_DuelOpponentKilled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DuelOpponentKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DuelOpponentKilled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.player_id_winner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_id_loser_) -
        reinterpret_cast<char*>(&_impl_.player_id_winner_)) + sizeof(_impl_.player_id_loser_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DuelOpponentKilled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_winner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_winner(&has_bits);
          _impl_.player_id_winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id_loser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_loser(&has_bits);
          _impl_.player_id_loser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DuelOpponentKilled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DuelOpponentKilled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_winner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_winner(), target);
  }

  // optional int32 player_id_loser = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_loser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DuelOpponentKilled)
  return target;
}

size_t CDOTAUserMsg_DuelOpponentKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DuelOpponentKilled)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id_winner = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_winner());
    }

    // optional int32 player_id_loser = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_loser());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DuelOpponentKilled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DuelOpponentKilled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DuelOpponentKilled::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DuelOpponentKilled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DuelOpponentKilled*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DuelOpponentKilled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DuelOpponentKilled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_winner_ = from._impl_.player_id_winner_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_loser_ = from._impl_.player_id_loser_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DuelOpponentKilled::CopyFrom(const CDOTAUserMsg_DuelOpponentKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DuelOpponentKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DuelOpponentKilled::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DuelOpponentKilled::InternalSwap(CDOTAUserMsg_DuelOpponentKilled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DuelOpponentKilled, _impl_.player_id_loser_)
      + sizeof(CDOTAUserMsg_DuelOpponentKilled::_impl_.player_id_loser_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DuelOpponentKilled, _impl_.player_id_winner_)>(
          reinterpret_cast<char*>(&_impl_.player_id_winner_),
          reinterpret_cast<char*>(&other->_impl_.player_id_winner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DuelOpponentKilled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[174]);
}

// ===================================================================

class CDOTAUserMsg_DuelAccepted::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DuelAccepted>()._impl_._has_bits_);
  static void set_has_player_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_DuelAccepted::CDOTAUserMsg_DuelAccepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DuelAccepted)
}
CDOTAUserMsg_DuelAccepted::CDOTAUserMsg_DuelAccepted(const CDOTAUserMsg_DuelAccepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DuelAccepted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_1_){}
    , decltype(_impl_.player_id_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_1_, &from._impl_.player_id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_2_) -
    reinterpret_cast<char*>(&_impl_.player_id_1_)) + sizeof(_impl_.player_id_2_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DuelAccepted)
}

inline void CDOTAUserMsg_DuelAccepted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_1_){0}
    , decltype(_impl_.player_id_2_){0}
  };
}

CDOTAUserMsg_DuelAccepted::~CDOTAUserMsg_DuelAccepted() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DuelAccepted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DuelAccepted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_DuelAccepted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DuelAccepted::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DuelAccepted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.player_id_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_id_2_) -
        reinterpret_cast<char*>(&_impl_.player_id_1_)) + sizeof(_impl_.player_id_2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DuelAccepted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_1(&has_bits);
          _impl_.player_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_2(&has_bits);
          _impl_.player_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DuelAccepted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DuelAccepted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_1(), target);
  }

  // optional int32 player_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DuelAccepted)
  return target;
}

size_t CDOTAUserMsg_DuelAccepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DuelAccepted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_1());
    }

    // optional int32 player_id_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DuelAccepted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DuelAccepted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DuelAccepted::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DuelAccepted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DuelAccepted*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DuelAccepted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DuelAccepted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_1_ = from._impl_.player_id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_2_ = from._impl_.player_id_2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DuelAccepted::CopyFrom(const CDOTAUserMsg_DuelAccepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DuelAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DuelAccepted::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DuelAccepted::InternalSwap(CDOTAUserMsg_DuelAccepted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DuelAccepted, _impl_.player_id_2_)
      + sizeof(CDOTAUserMsg_DuelAccepted::_impl_.player_id_2_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DuelAccepted, _impl_.player_id_1_)>(
          reinterpret_cast<char*>(&_impl_.player_id_1_),
          reinterpret_cast<char*>(&other->_impl_.player_id_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DuelAccepted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[175]);
}

// ===================================================================

class CDOTAUserMsg_DuelRequested::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DuelRequested>()._impl_._has_bits_);
  static void set_has_player_id_requestor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_DuelRequested::CDOTAUserMsg_DuelRequested(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DuelRequested)
}
CDOTAUserMsg_DuelRequested::CDOTAUserMsg_DuelRequested(const CDOTAUserMsg_DuelRequested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_DuelRequested* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_requestor_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_requestor_ = from._impl_.player_id_requestor_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DuelRequested)
}

inline void CDOTAUserMsg_DuelRequested::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_requestor_){-1}
  };
}

CDOTAUserMsg_DuelRequested::~CDOTAUserMsg_DuelRequested() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DuelRequested)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_DuelRequested::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_DuelRequested::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_DuelRequested::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DuelRequested)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_requestor_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DuelRequested::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_requestor = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_requestor(&has_bits);
          _impl_.player_id_requestor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_DuelRequested::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DuelRequested)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_requestor = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_requestor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DuelRequested)
  return target;
}

size_t CDOTAUserMsg_DuelRequested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DuelRequested)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 player_id_requestor = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_requestor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_DuelRequested::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_DuelRequested::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_DuelRequested::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_DuelRequested::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_DuelRequested*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_DuelRequested&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DuelRequested)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id_requestor()) {
    _this->_internal_set_player_id_requestor(from._internal_player_id_requestor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_DuelRequested::CopyFrom(const CDOTAUserMsg_DuelRequested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DuelRequested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DuelRequested::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DuelRequested::InternalSwap(CDOTAUserMsg_DuelRequested* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_requestor_, other->_impl_.player_id_requestor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DuelRequested::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[176]);
}

// ===================================================================

class CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled>()._impl_._has_bits_);
  static void set_has_player_id_killer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
}
CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled(const CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.points_){}
    , decltype(_impl_.points_total_){}
    , decltype(_impl_.last_hit_){}
    , decltype(_impl_.player_id_killer_){}
    , decltype(_impl_.player_id_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.points_, &from._impl_.points_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_target_) -
    reinterpret_cast<char*>(&_impl_.points_)) + sizeof(_impl_.player_id_target_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
}

inline void CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.points_){0}
    , decltype(_impl_.points_total_){0}
    , decltype(_impl_.last_hit_){false}
    , decltype(_impl_.player_id_killer_){-1}
    , decltype(_impl_.player_id_target_){-1}
  };
}

CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::~CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_hit_) -
        reinterpret_cast<char*>(&_impl_.points_)) + sizeof(_impl_.last_hit_));
    _impl_.player_id_killer_ = -1;
    _impl_.player_id_target_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 player_id_killer = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_killer(&has_bits);
          _impl_.player_id_killer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 player_id_target = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_target(&has_bits);
          _impl_.player_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_points(&has_bits);
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 points_total = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_points_total(&has_bits);
          _impl_.points_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool last_hit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_last_hit(&has_bits);
          _impl_.last_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 player_id_killer = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_killer(), target);
  }

  // required int32 player_id_target = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_target(), target);
  }

  // required int32 points = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_points(), target);
  }

  // required int32 points_total = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_points_total(), target);
  }

  // required bool last_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_last_hit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  return target;
}

size_t CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  size_t total_size = 0;

  if (_internal_has_points()) {
    // required int32 points = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_points());
  }

  if (_internal_has_points_total()) {
    // required int32 points_total = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_points_total());
  }

  if (_internal_has_last_hit()) {
    // required bool last_hit = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_player_id_killer()) {
    // required int32 player_id_killer = 1 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_killer());
  }

  if (_internal_has_player_id_target()) {
    // required int32 player_id_target = 2 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_target());
  }

  return total_size;
}
size_t CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 points = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_points());

    // required int32 points_total = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_points_total());

    // required bool last_hit = 5;
    total_size += 1 + 1;

    // required int32 player_id_killer = 1 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_killer());

    // required int32 player_id_target = 2 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_target());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.points_ = from._impl_.points_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.points_total_ = from._impl_.points_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_hit_ = from._impl_.last_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_killer_ = from._impl_.player_id_killer_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_id_target_ = from._impl_.player_id_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::CopyFrom(const CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::InternalSwap(CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_.last_hit_)
      + sizeof(CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::_impl_.last_hit_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled, _impl_.points_)>(
          reinterpret_cast<char*>(&_impl_.points_),
          reinterpret_cast<char*>(&other->_impl_.points_));
  swap(_impl_.player_id_killer_, other->_impl_.player_id_killer_);
  swap(_impl_.player_id_target_, other->_impl_.player_id_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[177]);
}

// ===================================================================

class CDOTAUserMsg_PlayerDraftSuggestPick::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PlayerDraftSuggestPick>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suggestion_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_PlayerDraftSuggestPick::CDOTAUserMsg_PlayerDraftSuggestPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PlayerDraftSuggestPick)
}
CDOTAUserMsg_PlayerDraftSuggestPick::CDOTAUserMsg_PlayerDraftSuggestPick(const CDOTAUserMsg_PlayerDraftSuggestPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PlayerDraftSuggestPick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.suggestion_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.suggestion_player_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.suggestion_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PlayerDraftSuggestPick)
}

inline void CDOTAUserMsg_PlayerDraftSuggestPick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.suggestion_player_id_){-1}
  };
}

CDOTAUserMsg_PlayerDraftSuggestPick::~CDOTAUserMsg_PlayerDraftSuggestPick() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PlayerDraftSuggestPick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PlayerDraftSuggestPick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_PlayerDraftSuggestPick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PlayerDraftSuggestPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PlayerDraftSuggestPick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.player_id_ = -1;
    _impl_.suggestion_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PlayerDraftSuggestPick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 suggestion_player_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_suggestion_player_id(&has_bits);
          _impl_.suggestion_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PlayerDraftSuggestPick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PlayerDraftSuggestPick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 suggestion_player_id = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_suggestion_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PlayerDraftSuggestPick)
  return target;
}

size_t CDOTAUserMsg_PlayerDraftSuggestPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PlayerDraftSuggestPick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 suggestion_player_id = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_suggestion_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PlayerDraftSuggestPick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PlayerDraftSuggestPick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PlayerDraftSuggestPick::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PlayerDraftSuggestPick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PlayerDraftSuggestPick*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PlayerDraftSuggestPick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PlayerDraftSuggestPick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.suggestion_player_id_ = from._impl_.suggestion_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PlayerDraftSuggestPick::CopyFrom(const CDOTAUserMsg_PlayerDraftSuggestPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PlayerDraftSuggestPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PlayerDraftSuggestPick::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PlayerDraftSuggestPick::InternalSwap(CDOTAUserMsg_PlayerDraftSuggestPick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.suggestion_player_id_, other->_impl_.suggestion_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PlayerDraftSuggestPick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[178]);
}

// ===================================================================

class CDOTAUserMsg_PlayerDraftPick::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PlayerDraftPick>()._impl_._has_bits_);
  static void set_has_player_id_captain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_PlayerDraftPick::CDOTAUserMsg_PlayerDraftPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PlayerDraftPick)
}
CDOTAUserMsg_PlayerDraftPick::CDOTAUserMsg_PlayerDraftPick(const CDOTAUserMsg_PlayerDraftPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAUserMsg_PlayerDraftPick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){}
    , decltype(_impl_.player_id_captain_){}
    , decltype(_impl_.player_id_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_target_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.player_id_target_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PlayerDraftPick)
}

inline void CDOTAUserMsg_PlayerDraftPick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.player_id_captain_){-1}
    , decltype(_impl_.player_id_target_){-1}
  };
}

CDOTAUserMsg_PlayerDraftPick::~CDOTAUserMsg_PlayerDraftPick() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PlayerDraftPick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAUserMsg_PlayerDraftPick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAUserMsg_PlayerDraftPick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAUserMsg_PlayerDraftPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PlayerDraftPick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.team_ = 0;
    _impl_.player_id_captain_ = -1;
    _impl_.player_id_target_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PlayerDraftPick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id_captain = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id_captain(&has_bits);
          _impl_.player_id_captain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id_target = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id_target(&has_bits);
          _impl_.player_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_PlayerDraftPick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PlayerDraftPick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id_captain = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id_captain(), target);
  }

  // optional int32 player_id_target = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id_target(), target);
  }

  // optional int32 team = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PlayerDraftPick)
  return target;
}

size_t CDOTAUserMsg_PlayerDraftPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PlayerDraftPick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 team = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 player_id_captain = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_captain());
    }

    // optional int32 player_id_target = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_PlayerDraftPick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAUserMsg_PlayerDraftPick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_PlayerDraftPick::GetClassData() const { return &_class_data_; }


void CDOTAUserMsg_PlayerDraftPick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAUserMsg_PlayerDraftPick*>(&to_msg);
  auto& from = static_cast<const CDOTAUserMsg_PlayerDraftPick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PlayerDraftPick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_captain_ = from._impl_.player_id_captain_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_id_target_ = from._impl_.player_id_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_PlayerDraftPick::CopyFrom(const CDOTAUserMsg_PlayerDraftPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PlayerDraftPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PlayerDraftPick::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PlayerDraftPick::InternalSwap(CDOTAUserMsg_PlayerDraftPick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_, other->_impl_.team_);
  swap(_impl_.player_id_captain_, other->_impl_.player_id_captain_);
  swap(_impl_.player_id_target_, other->_impl_.player_id_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PlayerDraftPick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusermessages_2eproto_getter, &descriptor_table_dota_5fusermessages_2eproto_once,
      file_level_metadata_dota_5fusermessages_2eproto[179]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AIDebugLine*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AIDebugLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AIDebugLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_Ping*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SwapVerify*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SwapVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SwapVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatEvent*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BotChat*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_BotChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BotChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CombatHeroPositions*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CombatHeroPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CombatHeroPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CombatLogBulkData*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CombatLogBulkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CombatLogBulkData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ProjectileParticleCPData*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ProjectileParticleCPData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ProjectileParticleCPData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniKillCamInfo_Attacker*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniKillCamInfo*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniKillCamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniKillCamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GlobalLightColor*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_GlobalLightColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GlobalLightColor >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GlobalLightDirection*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_GlobalLightDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GlobalLightDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_LocationPing*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_LocationPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_LocationPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PingConfirmation*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PingConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PingConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_EnemyItemAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_EnemyItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_EnemyItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ModifierAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ModifierAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ModifierAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HPManaAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HPManaAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HPManaAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_NeutralCampAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_NeutralCampAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_NeutralCampAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GlyphAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_GlyphAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GlyphAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_RadarAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_RadarAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_RadarAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WillPurchaseAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_WillPurchaseAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WillPurchaseAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_EmptyTeleportAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_EmptyTeleportAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_EmptyTeleportAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MarsArenaOfBloodAttack*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MarsArenaOfBloodAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MarsArenaOfBloodAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAEntityMsg_InvokerSpellCast*
Arena::CreateMaybeMessage< ::CDOTAEntityMsg_InvokerSpellCast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAEntityMsg_InvokerSpellCast >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BuyBackStateAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_BuyBackStateAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BuyBackStateAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QuickBuyAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_QuickBuyAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QuickBuyAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CourierKilledAlert_LostItem*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CourierKilledAlert_LostItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CourierKilledAlert_LostItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CourierKilledAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CourierKilledAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CourierKilledAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MinimapEvent*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MinimapEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MinimapEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MapLine*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MinimapDebugPoint*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MinimapDebugPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MinimapDebugPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CreateLinearProjectile*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CreateLinearProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CreateLinearProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DestroyLinearProjectile*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DestroyLinearProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DestroyLinearProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DodgeTrackingProjectiles*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DodgeTrackingProjectiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DodgeTrackingProjectiles >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SpectatorPlayerClick*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SpectatorPlayerClick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SpectatorPlayerClick >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SpectatorPlayerUnitOrders*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SpectatorPlayerUnitOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SpectatorPlayerUnitOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_NevermoreRequiem*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_NevermoreRequiem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_NevermoreRequiem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_InvalidCommand*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_InvalidCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_InvalidCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HudError*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HudError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HudError >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SharedCooldown*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SharedCooldown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SharedCooldown >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SetNextAutobuyItem*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SetNextAutobuyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SetNextAutobuyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HalloweenDrops*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HalloweenDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HalloweenDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PredictionResult_Prediction*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PredictionResult_Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PredictionResult_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PredictionResult*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAResponseQuerySerialized_Fact*
Arena::CreateMaybeMessage< ::CDOTAResponseQuerySerialized_Fact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAResponseQuerySerialized_Fact >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAResponseQuerySerialized*
Arena::CreateMaybeMessage< ::CDOTAResponseQuerySerialized >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAResponseQuerySerialized >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTASpeechMatchOnClient*
Arena::CreateMaybeMessage< ::CDOTASpeechMatchOnClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTASpeechMatchOnClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_Interval*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_Interval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_Interval >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_Speech*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_Speech >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_Speech >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_SpeechMute*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_SpeechMute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_SpeechMute >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_AddGesture*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_AddGesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_AddGesture >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_RemoveGesture*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_RemoveGesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_RemoveGesture >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_BloodImpact*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_BloodImpact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_BloodImpact >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_FadeGesture*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_FadeGesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_FadeGesture >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemPurchased*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemPurchased >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemPurchased >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemSold*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemSold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemSold >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemFound*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemFound >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OverheadEvent*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_OverheadEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OverheadEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialTipInfo*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialTipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialTipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialFinish*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialMinimapPosition*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialMinimapPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialMinimapPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendGenericToolTip*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendGenericToolTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendGenericToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WorldLine*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_WorldLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WorldLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatWheel*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ReceivedXmasGift*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ReceivedXmasGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ReceivedXmasGift >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ShowSurvey*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ShowSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ShowSurvey >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UpdateSharedContent*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UpdateSharedContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UpdateSharedContent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialRequestExp*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialRequestExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialRequestExp >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialFade*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialFade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialFade >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialPingMinimap*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialPingMinimap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialPingMinimap >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GamerulesStateChanged*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_GamerulesStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GamerulesStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AddQuestLogEntry*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AddQuestLogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AddQuestLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendStatPopup*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendStatPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendStatPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DismissAllStatPopups*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DismissAllStatPopups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DismissAllStatPopups >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendRoshanSpectatorPhase*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendRoshanSpectatorPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendRoshanSpectatorPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendRoshanPopup*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendRoshanPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendRoshanPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendFinalGold*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendFinalGold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendFinalGold >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomMsg*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CoachHUDPing*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ClientLoadGridNav*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ClientLoadGridNav >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ClientLoadGridNav >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_Projectile*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_Projectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_Projectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_ProjectileLoc*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_ProjectileLoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_ProjectileLoc >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_DestroyProjectile*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_DestroyProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_DestroyProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_DotaBloodImpact*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_DotaBloodImpact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_DotaBloodImpact >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AbilityPing*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AbilityPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AbilityPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_UnitAnimation*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_UnitAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_UnitAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_UnitAnimationEnd*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_UnitAnimationEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_UnitAnimationEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ShowGenericPopup*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ShowGenericPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ShowGenericPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VoteStart*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_VoteStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VoteStart >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VoteUpdate*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_VoteUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VoteUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VoteEnd*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_VoteEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VoteEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BoosterStatePlayer*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_BoosterStatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BoosterStatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BoosterState*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_BoosterState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BoosterState >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PlayerMMR*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PlayerMMR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PlayerMMR >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AbilitySteal*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AbilitySteal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AbilitySteal >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroLookup*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroPositionInfo*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroPositionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroPositionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroMinuteDetails*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroMinuteDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroMinuteDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsTeamMinuteDetails*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsTeamMinuteDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsTeamMinuteDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsPlayerKillShare*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsPlayerKillShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsPlayerKillShare >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsKillDetails*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsKillDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsKillDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsMatchDetails*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsMatchDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsMatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniTaunt*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniTaunt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniTaunt >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SpeechBubble*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SpeechBubble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SpeechBubble >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHeaderMessage*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHeaderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHeaderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHeroAbilityStat*
Arena::CreateMaybeMessage< ::CMsgHeroAbilityStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHeroAbilityStat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCombatAnalyzerPlayerStat*
Arena::CreateMaybeMessage< ::CMsgCombatAnalyzerPlayerStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCombatAnalyzerPlayerStat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCombatAnalyzerStats*
Arena::CreateMaybeMessage< ::CMsgCombatAnalyzerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCombatAnalyzerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BeastChat*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_BeastChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BeastChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHudElement_Create*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHudElement_Create >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHudElement_Create >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHudElement_Modify*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHudElement_Modify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHudElement_Modify >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHudElement_Destroy*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHudElement_Destroy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHudElement_Destroy >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CompendiumStatePlayer*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CompendiumStatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CompendiumStatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CompendiumState*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_CompendiumState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CompendiumState >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ProjectionAbility*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ProjectionAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ProjectionAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ProjectionEvent*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ProjectionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ProjectionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_XPAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_XPAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_XPAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TalentTreeAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TalentTreeAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TalentTreeAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UpdateQuestProgress*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_UpdateQuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UpdateQuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QuestStatus*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_QuestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SuggestHeroPick*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SuggestHeroPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SuggestHeroPick >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SuggestHeroRole*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SuggestHeroRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SuggestHeroRole >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_KillcamDamageTaken*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_KillcamDamageTaken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_KillcamDamageTaken >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SelectPenaltyGold*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SelectPenaltyGold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SelectPenaltyGold >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_RollDiceResult*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_RollDiceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_RollDiceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_FlipCoinResult*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_FlipCoinResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_FlipCoinResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMessage_RequestItemSuggestions*
Arena::CreateMaybeMessage< ::CDOTAUserMessage_RequestItemSuggestions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMessage_RequestItemSuggestions >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMessage_TeamCaptainChanged*
Arena::CreateMaybeMessage< ::CDOTAUserMessage_TeamCaptainChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMessage_TeamCaptainChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatWheelCooldown*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatWheelCooldown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatWheelCooldown >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HeroRelicProgress*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HeroRelicProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HeroRelicProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AbilityDraftRequestAbility*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AbilityDraftRequestAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AbilityDraftRequestAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DamageReport*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DamageReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DamageReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SalutePlayer*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_SalutePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SalutePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TipAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_TipAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TipAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ReplaceQueryUnit*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ReplaceQueryUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ReplaceQueryUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ESArcanaCombo*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ESArcanaCombo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ESArcanaCombo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ESArcanaComboSummary*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ESArcanaComboSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ESArcanaComboSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OMArcanaCombo*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_OMArcanaCombo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OMArcanaCombo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HighFiveCompleted*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HighFiveCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HighFiveCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HighFiveLeftHanging*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HighFiveLeftHanging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HighFiveLeftHanging >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ShovelUnearth*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ShovelUnearth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ShovelUnearth >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AllStarEvent_PlayerScore*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AllStarEvent_PlayerScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AllStarEvent_PlayerScore >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AllStarEvent*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AllStarEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AllStarEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QueuedOrderRemoved*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_QueuedOrderRemoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QueuedOrderRemoved >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DebugChallenge*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DebugChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DebugChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_FoundNeutralItem*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_FoundNeutralItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_FoundNeutralItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OutpostCaptured*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_OutpostCaptured >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OutpostCaptured >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OutpostGrantedXP*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_OutpostGrantedXP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OutpostGrantedXP >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MoveCameraToUnit*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MoveCameraToUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MoveCameraToUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PauseMinigameData_DataBit*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PauseMinigameData_DataBit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PauseMinigameData_DataBit >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PauseMinigameData*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PauseMinigameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PauseMinigameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VersusScene_PlayerBehavior*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_VersusScene_PlayerBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VersusScene_PlayerBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QoP_ArcanaSummary*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_QoP_ArcanaSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QoP_ArcanaSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HotPotato_Created*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HotPotato_Created >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HotPotato_Created >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HotPotato_Exploded*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_HotPotato_Exploded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HotPotato_Exploded >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WK_Arcana_Progress*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_WK_Arcana_Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WK_Arcana_Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GuildChallenge_Progress*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_GuildChallenge_Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GuildChallenge_Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WRArcanaProgress*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_WRArcanaProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WRArcanaProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WRArcanaSummary*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_WRArcanaSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WRArcanaSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_EmptyItemSlotAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_EmptyItemSlotAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_EmptyItemSlotAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AghsStatusAlert*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_AghsStatusAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AghsStatusAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MutedPlayers*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MutedPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MutedPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ContextualTip*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ContextualTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ContextualTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatMessage*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_RockPaperScissorsStarted*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_RockPaperScissorsStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_RockPaperScissorsStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_RockPaperScissorsFinished*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_RockPaperScissorsFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_RockPaperScissorsFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DuelOpponentKilled*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DuelOpponentKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DuelOpponentKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DuelAccepted*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DuelAccepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DuelAccepted >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DuelRequested*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_DuelRequested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DuelRequested >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MuertaReleaseEvent_AssignedTargetKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PlayerDraftSuggestPick*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PlayerDraftSuggestPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PlayerDraftSuggestPick >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PlayerDraftPick*
Arena::CreateMaybeMessage< ::CDOTAUserMsg_PlayerDraftPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PlayerDraftPick >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
