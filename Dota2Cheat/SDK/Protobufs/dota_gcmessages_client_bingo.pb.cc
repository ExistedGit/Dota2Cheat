// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_bingo.proto

#include "dota_gcmessages_client_bingo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgBingoSquare::CMsgBingoSquare(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_id_)*/0u
  , /*decltype(_impl_.stat_threshold_)*/0} {}
struct CMsgBingoSquareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBingoSquareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBingoSquareDefaultTypeInternal() {}
  union {
    CMsgBingoSquare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBingoSquareDefaultTypeInternal _CMsgBingoSquare_default_instance_;
PROTOBUF_CONSTEXPR CMsgBingoUserData::CMsgBingoUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.squares_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgBingoUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBingoUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBingoUserDataDefaultTypeInternal() {}
  union {
    CMsgBingoUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBingoUserDataDefaultTypeInternal _CMsgBingoUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetUserData::CMsgClientToGCBingoGetUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.league_phase_)*/0u} {}
struct CMsgClientToGCBingoGetUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoGetUserDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoGetUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoGetUserDataDefaultTypeInternal _CMsgClientToGCBingoGetUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetUserDataResponse::CMsgClientToGCBingoGetUserDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCBingoGetUserDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetUserDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoGetUserDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoGetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoGetUserDataResponseDefaultTypeInternal _CMsgClientToGCBingoGetUserDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgBingoIndividualStatData::CMsgBingoIndividualStatData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_id_)*/0u
  , /*decltype(_impl_.stat_value_)*/0} {}
struct CMsgBingoIndividualStatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBingoIndividualStatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBingoIndividualStatDataDefaultTypeInternal() {}
  union {
    CMsgBingoIndividualStatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBingoIndividualStatDataDefaultTypeInternal _CMsgBingoIndividualStatData_default_instance_;
PROTOBUF_CONSTEXPR CMsgBingoStatsData::CMsgBingoStatsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgBingoStatsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBingoStatsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBingoStatsDataDefaultTypeInternal() {}
  union {
    CMsgBingoStatsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBingoStatsDataDefaultTypeInternal _CMsgBingoStatsData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetStatsData::CMsgClientToGCBingoGetStatsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.league_phase_)*/0u} {}
struct CMsgClientToGCBingoGetStatsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetStatsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoGetStatsDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoGetStatsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoGetStatsDataDefaultTypeInternal _CMsgClientToGCBingoGetStatsData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetStatsDataResponse::CMsgClientToGCBingoGetStatsDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_data_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCBingoGetStatsDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoGetStatsDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoGetStatsDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoGetStatsDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoGetStatsDataResponseDefaultTypeInternal _CMsgClientToGCBingoGetStatsDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientBingoUserDataUpdated::CMsgGCToClientBingoUserDataUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.league_phase_)*/0u} {}
struct CMsgGCToClientBingoUserDataUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientBingoUserDataUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientBingoUserDataUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToClientBingoUserDataUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientBingoUserDataUpdatedDefaultTypeInternal _CMsgGCToClientBingoUserDataUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoClaimRow::CMsgClientToGCBingoClaimRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.league_phase_)*/0u
  , /*decltype(_impl_.row_index_)*/0u} {}
struct CMsgClientToGCBingoClaimRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoClaimRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoClaimRowDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoClaimRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoClaimRowDefaultTypeInternal _CMsgClientToGCBingoClaimRow_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoClaimRowResponse::CMsgClientToGCBingoClaimRowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCBingoClaimRowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoClaimRowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoClaimRowResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoClaimRowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoClaimRowResponseDefaultTypeInternal _CMsgClientToGCBingoClaimRowResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoDevRerollCard::CMsgClientToGCBingoDevRerollCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.league_phase_)*/0u} {}
struct CMsgClientToGCBingoDevRerollCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoDevRerollCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoDevRerollCardDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoDevRerollCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoDevRerollCardDefaultTypeInternal _CMsgClientToGCBingoDevRerollCard_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCBingoDevRerollCardResponse::CMsgClientToGCBingoDevRerollCardResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCBingoDevRerollCardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCBingoDevRerollCardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCBingoDevRerollCardResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCBingoDevRerollCardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCBingoDevRerollCardResponseDefaultTypeInternal _CMsgClientToGCBingoDevRerollCardResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fbingo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgBingoSquare, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBingoSquare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBingoSquare, _impl_.stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBingoSquare, _impl_.stat_threshold_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBingoUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBingoUserData, _impl_.squares_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserData, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserData, _impl_.league_phase_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserDataResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetUserDataResponse, _impl_.user_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBingoIndividualStatData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBingoIndividualStatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBingoIndividualStatData, _impl_.stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBingoIndividualStatData, _impl_.stat_value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBingoStatsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBingoStatsData, _impl_.stats_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsData, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsData, _impl_.league_phase_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsDataResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoGetStatsDataResponse, _impl_.stats_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientBingoUserDataUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientBingoUserDataUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientBingoUserDataUpdated, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientBingoUserDataUpdated, _impl_.league_phase_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientBingoUserDataUpdated, _impl_.user_data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRow, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRow, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRow, _impl_.league_phase_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRow, _impl_.row_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRowResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoClaimRowResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoDevRerollCard, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoDevRerollCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoDevRerollCard, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoDevRerollCard, _impl_.league_phase_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoDevRerollCardResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoDevRerollCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCBingoDevRerollCardResponse, _impl_.response_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgBingoSquare)},
  { 10, -1, -1, sizeof(::CMsgBingoUserData)},
  { 17, 25, -1, sizeof(::CMsgClientToGCBingoGetUserData)},
  { 27, 35, -1, sizeof(::CMsgClientToGCBingoGetUserDataResponse)},
  { 37, 45, -1, sizeof(::CMsgBingoIndividualStatData)},
  { 47, -1, -1, sizeof(::CMsgBingoStatsData)},
  { 54, 62, -1, sizeof(::CMsgClientToGCBingoGetStatsData)},
  { 64, 72, -1, sizeof(::CMsgClientToGCBingoGetStatsDataResponse)},
  { 74, 83, -1, sizeof(::CMsgGCToClientBingoUserDataUpdated)},
  { 86, 95, -1, sizeof(::CMsgClientToGCBingoClaimRow)},
  { 98, 105, -1, sizeof(::CMsgClientToGCBingoClaimRowResponse)},
  { 106, 114, -1, sizeof(::CMsgClientToGCBingoDevRerollCard)},
  { 116, 123, -1, sizeof(::CMsgClientToGCBingoDevRerollCardResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgBingoSquare_default_instance_._instance,
  &::_CMsgBingoUserData_default_instance_._instance,
  &::_CMsgClientToGCBingoGetUserData_default_instance_._instance,
  &::_CMsgClientToGCBingoGetUserDataResponse_default_instance_._instance,
  &::_CMsgBingoIndividualStatData_default_instance_._instance,
  &::_CMsgBingoStatsData_default_instance_._instance,
  &::_CMsgClientToGCBingoGetStatsData_default_instance_._instance,
  &::_CMsgClientToGCBingoGetStatsDataResponse_default_instance_._instance,
  &::_CMsgGCToClientBingoUserDataUpdated_default_instance_._instance,
  &::_CMsgClientToGCBingoClaimRow_default_instance_._instance,
  &::_CMsgClientToGCBingoClaimRowResponse_default_instance_._instance,
  &::_CMsgClientToGCBingoDevRerollCard_default_instance_._instance,
  &::_CMsgClientToGCBingoDevRerollCardResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fbingo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"dota_gcmessages_client_bingo.proto\032\023st"
  "eammessages.proto\032\027dota_shared_enums.pro"
  "to\032\034dota_gcmessages_common.proto\032\034dota_g"
  "cmessages_webapi.proto\032\026gcsdk_gcmessages"
  ".proto\032\025base_gcmessages.proto\032\025econ_gcme"
  "ssages.proto\032\034dota_gcmessages_client.pro"
  "to\032\025valveextensions.proto\":\n\017CMsgBingoSq"
  "uare\022\017\n\007stat_id\030\001 \001(\r\022\026\n\016stat_threshold\030"
  "\002 \001(\005\"6\n\021CMsgBingoUserData\022!\n\007squares\030\001 "
  "\003(\0132\020.CMsgBingoSquare\"I\n\036CMsgClientToGCB"
  "ingoGetUserData\022\021\n\tleague_id\030\001 \001(\r\022\024\n\014le"
  "ague_phase\030\002 \001(\r\"\212\002\n&CMsgClientToGCBingo"
  "GetUserDataResponse\022U\n\010response\030\001 \001(\01621."
  "CMsgClientToGCBingoGetUserDataResponse.E"
  "Response:\020k_eInternalError\022%\n\tuser_data\030"
  "\002 \001(\0132\022.CMsgBingoUserData\"b\n\tEResponse\022\024"
  "\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\n"
  "k_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTime"
  "out\020\004\"B\n\033CMsgBingoIndividualStatData\022\017\n\007"
  "stat_id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001(\005\"F\n\022CMs"
  "gBingoStatsData\0220\n\nstats_data\030\001 \003(\0132\034.CM"
  "sgBingoIndividualStatData\"J\n\037CMsgClientT"
  "oGCBingoGetStatsData\022\021\n\tleague_id\030\001 \001(\r\022"
  "\024\n\014league_phase\030\002 \001(\r\"\216\002\n\'CMsgClientToGC"
  "BingoGetStatsDataResponse\022V\n\010response\030\001 "
  "\001(\01622.CMsgClientToGCBingoGetStatsDataRes"
  "ponse.EResponse:\020k_eInternalError\022\'\n\nsta"
  "ts_data\030\002 \001(\0132\023.CMsgBingoStatsData\"b\n\tER"
  "esponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSucc"
  "ess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016"
  "\n\nk_eTimeout\020\004\"t\n\"CMsgGCToClientBingoUse"
  "rDataUpdated\022\021\n\tleague_id\030\001 \001(\r\022\024\n\014leagu"
  "e_phase\030\002 \001(\r\022%\n\tuser_data\030\003 \001(\0132\022.CMsgB"
  "ingoUserData\"Y\n\033CMsgClientToGCBingoClaim"
  "Row\022\021\n\tleague_id\030\001 \001(\r\022\024\n\014league_phase\030\002"
  " \001(\r\022\021\n\trow_index\030\003 \001(\r\"\205\002\n#CMsgClientTo"
  "GCBingoClaimRowResponse\022R\n\010response\030\001 \001("
  "\0162..CMsgClientToGCBingoClaimRowResponse."
  "EResponse:\020k_eInternalError\"\211\001\n\tERespons"
  "e\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess\020\001\022"
  "\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eT"
  "imeout\020\004\022\021\n\rk_eInvalidRow\020\005\022\022\n\016k_eExpire"
  "dCard\020\006\"K\n CMsgClientToGCBingoDevRerollC"
  "ard\022\021\n\tleague_id\030\001 \001(\r\022\024\n\014league_phase\030\002"
  " \001(\r\"\217\002\n(CMsgClientToGCBingoDevRerollCar"
  "dResponse\022W\n\010response\030\001 \001(\01623.CMsgClient"
  "ToGCBingoDevRerollCardResponse.EResponse"
  ":\020k_eInternalError\"\211\001\n\tEResponse\022\024\n\020k_eI"
  "nternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eToo"
  "Busy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022"
  "\022\n\016k_eExpiredCard\020\006\022\021\n\rk_eNotAllowed\020\007"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_deps[9] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fclient_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fwebapi_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_econ_5fgcmessages_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
  &::descriptor_table_valveextensions_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto = {
    false, false, 2038, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fbingo_2eproto,
    "dota_gcmessages_client_bingo.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_deps, 9, 13,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fbingo_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fbingo_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCBingoGetUserDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto[0];
}
bool CMsgClientToGCBingoGetUserDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCBingoGetUserDataResponse_EResponse CMsgClientToGCBingoGetUserDataResponse::k_eInternalError;
constexpr CMsgClientToGCBingoGetUserDataResponse_EResponse CMsgClientToGCBingoGetUserDataResponse::k_eSuccess;
constexpr CMsgClientToGCBingoGetUserDataResponse_EResponse CMsgClientToGCBingoGetUserDataResponse::k_eTooBusy;
constexpr CMsgClientToGCBingoGetUserDataResponse_EResponse CMsgClientToGCBingoGetUserDataResponse::k_eDisabled;
constexpr CMsgClientToGCBingoGetUserDataResponse_EResponse CMsgClientToGCBingoGetUserDataResponse::k_eTimeout;
constexpr CMsgClientToGCBingoGetUserDataResponse_EResponse CMsgClientToGCBingoGetUserDataResponse::EResponse_MIN;
constexpr CMsgClientToGCBingoGetUserDataResponse_EResponse CMsgClientToGCBingoGetUserDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCBingoGetUserDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCBingoGetStatsDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto[1];
}
bool CMsgClientToGCBingoGetStatsDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCBingoGetStatsDataResponse_EResponse CMsgClientToGCBingoGetStatsDataResponse::k_eInternalError;
constexpr CMsgClientToGCBingoGetStatsDataResponse_EResponse CMsgClientToGCBingoGetStatsDataResponse::k_eSuccess;
constexpr CMsgClientToGCBingoGetStatsDataResponse_EResponse CMsgClientToGCBingoGetStatsDataResponse::k_eTooBusy;
constexpr CMsgClientToGCBingoGetStatsDataResponse_EResponse CMsgClientToGCBingoGetStatsDataResponse::k_eDisabled;
constexpr CMsgClientToGCBingoGetStatsDataResponse_EResponse CMsgClientToGCBingoGetStatsDataResponse::k_eTimeout;
constexpr CMsgClientToGCBingoGetStatsDataResponse_EResponse CMsgClientToGCBingoGetStatsDataResponse::EResponse_MIN;
constexpr CMsgClientToGCBingoGetStatsDataResponse_EResponse CMsgClientToGCBingoGetStatsDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCBingoGetStatsDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCBingoClaimRowResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto[2];
}
bool CMsgClientToGCBingoClaimRowResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::k_eInternalError;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::k_eSuccess;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::k_eTooBusy;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::k_eDisabled;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::k_eTimeout;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::k_eInvalidRow;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::k_eExpiredCard;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::EResponse_MIN;
constexpr CMsgClientToGCBingoClaimRowResponse_EResponse CMsgClientToGCBingoClaimRowResponse::EResponse_MAX;
constexpr int CMsgClientToGCBingoClaimRowResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCBingoDevRerollCardResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbingo_2eproto[3];
}
bool CMsgClientToGCBingoDevRerollCardResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::k_eInternalError;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::k_eSuccess;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::k_eTooBusy;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::k_eDisabled;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::k_eTimeout;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::k_eExpiredCard;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::k_eNotAllowed;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::EResponse_MIN;
constexpr CMsgClientToGCBingoDevRerollCardResponse_EResponse CMsgClientToGCBingoDevRerollCardResponse::EResponse_MAX;
constexpr int CMsgClientToGCBingoDevRerollCardResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CMsgBingoSquare::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBingoSquare>()._impl_._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBingoSquare::CMsgBingoSquare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBingoSquare)
}
CMsgBingoSquare::CMsgBingoSquare(const CMsgBingoSquare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBingoSquare* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){}
    , decltype(_impl_.stat_threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stat_id_, &from._impl_.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stat_threshold_) -
    reinterpret_cast<char*>(&_impl_.stat_id_)) + sizeof(_impl_.stat_threshold_));
  // @@protoc_insertion_point(copy_constructor:CMsgBingoSquare)
}

inline void CMsgBingoSquare::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){0u}
    , decltype(_impl_.stat_threshold_){0}
  };
}

CMsgBingoSquare::~CMsgBingoSquare() {
  // @@protoc_insertion_point(destructor:CMsgBingoSquare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBingoSquare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBingoSquare::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBingoSquare::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBingoSquare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stat_threshold_) -
        reinterpret_cast<char*>(&_impl_.stat_id_)) + sizeof(_impl_.stat_threshold_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBingoSquare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          _impl_.stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stat_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stat_threshold(&has_bits);
          _impl_.stat_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBingoSquare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBingoSquare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional int32 stat_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stat_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBingoSquare)
  return target;
}

size_t CMsgBingoSquare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBingoSquare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_id());
    }

    // optional int32 stat_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stat_threshold());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBingoSquare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBingoSquare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBingoSquare::GetClassData() const { return &_class_data_; }


void CMsgBingoSquare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBingoSquare*>(&to_msg);
  auto& from = static_cast<const CMsgBingoSquare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBingoSquare)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stat_id_ = from._impl_.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stat_threshold_ = from._impl_.stat_threshold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBingoSquare::CopyFrom(const CMsgBingoSquare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBingoSquare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBingoSquare::IsInitialized() const {
  return true;
}

void CMsgBingoSquare::InternalSwap(CMsgBingoSquare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBingoSquare, _impl_.stat_threshold_)
      + sizeof(CMsgBingoSquare::_impl_.stat_threshold_)
      - PROTOBUF_FIELD_OFFSET(CMsgBingoSquare, _impl_.stat_id_)>(
          reinterpret_cast<char*>(&_impl_.stat_id_),
          reinterpret_cast<char*>(&other->_impl_.stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBingoSquare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[0]);
}

// ===================================================================

class CMsgBingoUserData::_Internal {
 public:
};

CMsgBingoUserData::CMsgBingoUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBingoUserData)
}
CMsgBingoUserData::CMsgBingoUserData(const CMsgBingoUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBingoUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.squares_){from._impl_.squares_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBingoUserData)
}

inline void CMsgBingoUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.squares_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgBingoUserData::~CMsgBingoUserData() {
  // @@protoc_insertion_point(destructor:CMsgBingoUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBingoUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.squares_.~RepeatedPtrField();
}

void CMsgBingoUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBingoUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBingoUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.squares_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBingoUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgBingoSquare squares = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_squares(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBingoUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBingoUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBingoSquare squares = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_squares_size()); i < n; i++) {
    const auto& repfield = this->_internal_squares(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBingoUserData)
  return target;
}

size_t CMsgBingoUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBingoUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBingoSquare squares = 1;
  total_size += 1UL * this->_internal_squares_size();
  for (const auto& msg : this->_impl_.squares_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBingoUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBingoUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBingoUserData::GetClassData() const { return &_class_data_; }


void CMsgBingoUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBingoUserData*>(&to_msg);
  auto& from = static_cast<const CMsgBingoUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBingoUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.squares_.MergeFrom(from._impl_.squares_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBingoUserData::CopyFrom(const CMsgBingoUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBingoUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBingoUserData::IsInitialized() const {
  return true;
}

void CMsgBingoUserData::InternalSwap(CMsgBingoUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.squares_.InternalSwap(&other->_impl_.squares_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBingoUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[1]);
}

// ===================================================================

class CMsgClientToGCBingoGetUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoGetUserData>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCBingoGetUserData::CMsgClientToGCBingoGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoGetUserData)
}
CMsgClientToGCBingoGetUserData::CMsgClientToGCBingoGetUserData(const CMsgClientToGCBingoGetUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoGetUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.league_phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.league_phase_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoGetUserData)
}

inline void CMsgClientToGCBingoGetUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.league_phase_){0u}
  };
}

CMsgClientToGCBingoGetUserData::~CMsgClientToGCBingoGetUserData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoGetUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoGetUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCBingoGetUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoGetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoGetUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_phase_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoGetUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_league_phase(&has_bits);
          _impl_.league_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoGetUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoGetUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 league_phase = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoGetUserData)
  return target;
}

size_t CMsgClientToGCBingoGetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoGetUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 league_phase = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoGetUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoGetUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoGetUserData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoGetUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoGetUserData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoGetUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoGetUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_phase_ = from._impl_.league_phase_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoGetUserData::CopyFrom(const CMsgClientToGCBingoGetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoGetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoGetUserData::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoGetUserData::InternalSwap(CMsgClientToGCBingoGetUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetUserData, _impl_.league_phase_)
      + sizeof(CMsgClientToGCBingoGetUserData::_impl_.league_phase_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetUserData, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoGetUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[2]);
}

// ===================================================================

class CMsgClientToGCBingoGetUserDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoGetUserDataResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBingoUserData& user_data(const CMsgClientToGCBingoGetUserDataResponse* msg);
  static void set_has_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBingoUserData&
CMsgClientToGCBingoGetUserDataResponse::_Internal::user_data(const CMsgClientToGCBingoGetUserDataResponse* msg) {
  return *msg->_impl_.user_data_;
}
CMsgClientToGCBingoGetUserDataResponse::CMsgClientToGCBingoGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoGetUserDataResponse)
}
CMsgClientToGCBingoGetUserDataResponse::CMsgClientToGCBingoGetUserDataResponse(const CMsgClientToGCBingoGetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoGetUserDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::CMsgBingoUserData(*from._impl_.user_data_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoGetUserDataResponse)
}

inline void CMsgClientToGCBingoGetUserDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCBingoGetUserDataResponse::~CMsgClientToGCBingoGetUserDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoGetUserDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoGetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void CMsgClientToGCBingoGetUserDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoGetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.user_data_ != nullptr);
    _impl_.user_data_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoGetUserDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCBingoGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCBingoGetUserDataResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCBingoGetUserDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBingoUserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoGetUserDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCBingoGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgBingoUserData user_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoGetUserDataResponse)
  return target;
}

size_t CMsgClientToGCBingoGetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoGetUserDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBingoUserData user_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_data_);
    }

    // optional .CMsgClientToGCBingoGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoGetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoGetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoGetUserDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoGetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoGetUserDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoGetUserDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoGetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user_data()->::CMsgBingoUserData::MergeFrom(
          from._internal_user_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoGetUserDataResponse::CopyFrom(const CMsgClientToGCBingoGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoGetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoGetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoGetUserDataResponse::InternalSwap(CMsgClientToGCBingoGetUserDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetUserDataResponse, _impl_.response_)
      + sizeof(CMsgClientToGCBingoGetUserDataResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetUserDataResponse, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoGetUserDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[3]);
}

// ===================================================================

class CMsgBingoIndividualStatData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBingoIndividualStatData>()._impl_._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBingoIndividualStatData::CMsgBingoIndividualStatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBingoIndividualStatData)
}
CMsgBingoIndividualStatData::CMsgBingoIndividualStatData(const CMsgBingoIndividualStatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBingoIndividualStatData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){}
    , decltype(_impl_.stat_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stat_id_, &from._impl_.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stat_value_) -
    reinterpret_cast<char*>(&_impl_.stat_id_)) + sizeof(_impl_.stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgBingoIndividualStatData)
}

inline void CMsgBingoIndividualStatData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){0u}
    , decltype(_impl_.stat_value_){0}
  };
}

CMsgBingoIndividualStatData::~CMsgBingoIndividualStatData() {
  // @@protoc_insertion_point(destructor:CMsgBingoIndividualStatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBingoIndividualStatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBingoIndividualStatData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBingoIndividualStatData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBingoIndividualStatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stat_value_) -
        reinterpret_cast<char*>(&_impl_.stat_id_)) + sizeof(_impl_.stat_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBingoIndividualStatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          _impl_.stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stat_value(&has_bits);
          _impl_.stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBingoIndividualStatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBingoIndividualStatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional int32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBingoIndividualStatData)
  return target;
}

size_t CMsgBingoIndividualStatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBingoIndividualStatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_id());
    }

    // optional int32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stat_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBingoIndividualStatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBingoIndividualStatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBingoIndividualStatData::GetClassData() const { return &_class_data_; }


void CMsgBingoIndividualStatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBingoIndividualStatData*>(&to_msg);
  auto& from = static_cast<const CMsgBingoIndividualStatData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBingoIndividualStatData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stat_id_ = from._impl_.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stat_value_ = from._impl_.stat_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBingoIndividualStatData::CopyFrom(const CMsgBingoIndividualStatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBingoIndividualStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBingoIndividualStatData::IsInitialized() const {
  return true;
}

void CMsgBingoIndividualStatData::InternalSwap(CMsgBingoIndividualStatData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBingoIndividualStatData, _impl_.stat_value_)
      + sizeof(CMsgBingoIndividualStatData::_impl_.stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgBingoIndividualStatData, _impl_.stat_id_)>(
          reinterpret_cast<char*>(&_impl_.stat_id_),
          reinterpret_cast<char*>(&other->_impl_.stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBingoIndividualStatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[4]);
}

// ===================================================================

class CMsgBingoStatsData::_Internal {
 public:
};

CMsgBingoStatsData::CMsgBingoStatsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBingoStatsData)
}
CMsgBingoStatsData::CMsgBingoStatsData(const CMsgBingoStatsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBingoStatsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_data_){from._impl_.stats_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBingoStatsData)
}

inline void CMsgBingoStatsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgBingoStatsData::~CMsgBingoStatsData() {
  // @@protoc_insertion_point(destructor:CMsgBingoStatsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBingoStatsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_data_.~RepeatedPtrField();
}

void CMsgBingoStatsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBingoStatsData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBingoStatsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBingoStatsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgBingoIndividualStatData stats_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBingoStatsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBingoStatsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBingoIndividualStatData stats_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBingoStatsData)
  return target;
}

size_t CMsgBingoStatsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBingoStatsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBingoIndividualStatData stats_data = 1;
  total_size += 1UL * this->_internal_stats_data_size();
  for (const auto& msg : this->_impl_.stats_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBingoStatsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBingoStatsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBingoStatsData::GetClassData() const { return &_class_data_; }


void CMsgBingoStatsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBingoStatsData*>(&to_msg);
  auto& from = static_cast<const CMsgBingoStatsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBingoStatsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_data_.MergeFrom(from._impl_.stats_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBingoStatsData::CopyFrom(const CMsgBingoStatsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBingoStatsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBingoStatsData::IsInitialized() const {
  return true;
}

void CMsgBingoStatsData::InternalSwap(CMsgBingoStatsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_data_.InternalSwap(&other->_impl_.stats_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBingoStatsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[5]);
}

// ===================================================================

class CMsgClientToGCBingoGetStatsData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoGetStatsData>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCBingoGetStatsData::CMsgClientToGCBingoGetStatsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoGetStatsData)
}
CMsgClientToGCBingoGetStatsData::CMsgClientToGCBingoGetStatsData(const CMsgClientToGCBingoGetStatsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoGetStatsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.league_phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.league_phase_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoGetStatsData)
}

inline void CMsgClientToGCBingoGetStatsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.league_phase_){0u}
  };
}

CMsgClientToGCBingoGetStatsData::~CMsgClientToGCBingoGetStatsData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoGetStatsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoGetStatsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCBingoGetStatsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoGetStatsData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoGetStatsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_phase_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoGetStatsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_league_phase(&has_bits);
          _impl_.league_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoGetStatsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoGetStatsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 league_phase = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoGetStatsData)
  return target;
}

size_t CMsgClientToGCBingoGetStatsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoGetStatsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 league_phase = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoGetStatsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoGetStatsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoGetStatsData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoGetStatsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoGetStatsData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoGetStatsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoGetStatsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_phase_ = from._impl_.league_phase_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoGetStatsData::CopyFrom(const CMsgClientToGCBingoGetStatsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoGetStatsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoGetStatsData::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoGetStatsData::InternalSwap(CMsgClientToGCBingoGetStatsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetStatsData, _impl_.league_phase_)
      + sizeof(CMsgClientToGCBingoGetStatsData::_impl_.league_phase_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetStatsData, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoGetStatsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[6]);
}

// ===================================================================

class CMsgClientToGCBingoGetStatsDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoGetStatsDataResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBingoStatsData& stats_data(const CMsgClientToGCBingoGetStatsDataResponse* msg);
  static void set_has_stats_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBingoStatsData&
CMsgClientToGCBingoGetStatsDataResponse::_Internal::stats_data(const CMsgClientToGCBingoGetStatsDataResponse* msg) {
  return *msg->_impl_.stats_data_;
}
CMsgClientToGCBingoGetStatsDataResponse::CMsgClientToGCBingoGetStatsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoGetStatsDataResponse)
}
CMsgClientToGCBingoGetStatsDataResponse::CMsgClientToGCBingoGetStatsDataResponse(const CMsgClientToGCBingoGetStatsDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoGetStatsDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_data_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats_data()) {
    _this->_impl_.stats_data_ = new ::CMsgBingoStatsData(*from._impl_.stats_data_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoGetStatsDataResponse)
}

inline void CMsgClientToGCBingoGetStatsDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_data_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCBingoGetStatsDataResponse::~CMsgClientToGCBingoGetStatsDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoGetStatsDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoGetStatsDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stats_data_;
}

void CMsgClientToGCBingoGetStatsDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoGetStatsDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoGetStatsDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stats_data_ != nullptr);
    _impl_.stats_data_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoGetStatsDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCBingoGetStatsDataResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCBingoGetStatsDataResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCBingoGetStatsDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBingoStatsData stats_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoGetStatsDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoGetStatsDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCBingoGetStatsDataResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgBingoStatsData stats_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stats_data(this),
        _Internal::stats_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoGetStatsDataResponse)
  return target;
}

size_t CMsgClientToGCBingoGetStatsDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoGetStatsDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBingoStatsData stats_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_data_);
    }

    // optional .CMsgClientToGCBingoGetStatsDataResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoGetStatsDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoGetStatsDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoGetStatsDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoGetStatsDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoGetStatsDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoGetStatsDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoGetStatsDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stats_data()->::CMsgBingoStatsData::MergeFrom(
          from._internal_stats_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoGetStatsDataResponse::CopyFrom(const CMsgClientToGCBingoGetStatsDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoGetStatsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoGetStatsDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoGetStatsDataResponse::InternalSwap(CMsgClientToGCBingoGetStatsDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetStatsDataResponse, _impl_.response_)
      + sizeof(CMsgClientToGCBingoGetStatsDataResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoGetStatsDataResponse, _impl_.stats_data_)>(
          reinterpret_cast<char*>(&_impl_.stats_data_),
          reinterpret_cast<char*>(&other->_impl_.stats_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoGetStatsDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[7]);
}

// ===================================================================

class CMsgGCToClientBingoUserDataUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientBingoUserDataUpdated>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgBingoUserData& user_data(const CMsgGCToClientBingoUserDataUpdated* msg);
  static void set_has_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBingoUserData&
CMsgGCToClientBingoUserDataUpdated::_Internal::user_data(const CMsgGCToClientBingoUserDataUpdated* msg) {
  return *msg->_impl_.user_data_;
}
CMsgGCToClientBingoUserDataUpdated::CMsgGCToClientBingoUserDataUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientBingoUserDataUpdated)
}
CMsgGCToClientBingoUserDataUpdated::CMsgGCToClientBingoUserDataUpdated(const CMsgGCToClientBingoUserDataUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientBingoUserDataUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.league_phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::CMsgBingoUserData(*from._impl_.user_data_);
  }
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.league_phase_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientBingoUserDataUpdated)
}

inline void CMsgGCToClientBingoUserDataUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.league_phase_){0u}
  };
}

CMsgGCToClientBingoUserDataUpdated::~CMsgGCToClientBingoUserDataUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientBingoUserDataUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientBingoUserDataUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void CMsgGCToClientBingoUserDataUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientBingoUserDataUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientBingoUserDataUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.user_data_ != nullptr);
    _impl_.user_data_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_phase_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientBingoUserDataUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_league_phase(&has_bits);
          _impl_.league_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBingoUserData user_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientBingoUserDataUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientBingoUserDataUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 league_phase = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_phase(), target);
  }

  // optional .CMsgBingoUserData user_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientBingoUserDataUpdated)
  return target;
}

size_t CMsgGCToClientBingoUserDataUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientBingoUserDataUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgBingoUserData user_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_data_);
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 league_phase = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientBingoUserDataUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientBingoUserDataUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientBingoUserDataUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCToClientBingoUserDataUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientBingoUserDataUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientBingoUserDataUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientBingoUserDataUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user_data()->::CMsgBingoUserData::MergeFrom(
          from._internal_user_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.league_phase_ = from._impl_.league_phase_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientBingoUserDataUpdated::CopyFrom(const CMsgGCToClientBingoUserDataUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientBingoUserDataUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientBingoUserDataUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToClientBingoUserDataUpdated::InternalSwap(CMsgGCToClientBingoUserDataUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientBingoUserDataUpdated, _impl_.league_phase_)
      + sizeof(CMsgGCToClientBingoUserDataUpdated::_impl_.league_phase_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientBingoUserDataUpdated, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientBingoUserDataUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[8]);
}

// ===================================================================

class CMsgClientToGCBingoClaimRow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoClaimRow>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCBingoClaimRow::CMsgClientToGCBingoClaimRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoClaimRow)
}
CMsgClientToGCBingoClaimRow::CMsgClientToGCBingoClaimRow(const CMsgClientToGCBingoClaimRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoClaimRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.league_phase_){}
    , decltype(_impl_.row_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_index_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.row_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoClaimRow)
}

inline void CMsgClientToGCBingoClaimRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.league_phase_){0u}
    , decltype(_impl_.row_index_){0u}
  };
}

CMsgClientToGCBingoClaimRow::~CMsgClientToGCBingoClaimRow() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoClaimRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoClaimRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCBingoClaimRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoClaimRow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoClaimRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_index_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.row_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoClaimRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_league_phase(&has_bits);
          _impl_.league_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 row_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row_index(&has_bits);
          _impl_.row_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoClaimRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoClaimRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 league_phase = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_phase(), target);
  }

  // optional uint32 row_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoClaimRow)
  return target;
}

size_t CMsgClientToGCBingoClaimRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoClaimRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 league_phase = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_phase());
    }

    // optional uint32 row_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoClaimRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoClaimRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoClaimRow::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoClaimRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoClaimRow*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoClaimRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoClaimRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_phase_ = from._impl_.league_phase_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_index_ = from._impl_.row_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoClaimRow::CopyFrom(const CMsgClientToGCBingoClaimRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoClaimRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoClaimRow::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoClaimRow::InternalSwap(CMsgClientToGCBingoClaimRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoClaimRow, _impl_.row_index_)
      + sizeof(CMsgClientToGCBingoClaimRow::_impl_.row_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoClaimRow, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoClaimRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[9]);
}

// ===================================================================

class CMsgClientToGCBingoClaimRowResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoClaimRowResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCBingoClaimRowResponse::CMsgClientToGCBingoClaimRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoClaimRowResponse)
}
CMsgClientToGCBingoClaimRowResponse::CMsgClientToGCBingoClaimRowResponse(const CMsgClientToGCBingoClaimRowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoClaimRowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoClaimRowResponse)
}

inline void CMsgClientToGCBingoClaimRowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCBingoClaimRowResponse::~CMsgClientToGCBingoClaimRowResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoClaimRowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoClaimRowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCBingoClaimRowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoClaimRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoClaimRowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoClaimRowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCBingoClaimRowResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCBingoClaimRowResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCBingoClaimRowResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoClaimRowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoClaimRowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCBingoClaimRowResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoClaimRowResponse)
  return target;
}

size_t CMsgClientToGCBingoClaimRowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoClaimRowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCBingoClaimRowResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoClaimRowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoClaimRowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoClaimRowResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoClaimRowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoClaimRowResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoClaimRowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoClaimRowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoClaimRowResponse::CopyFrom(const CMsgClientToGCBingoClaimRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoClaimRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoClaimRowResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoClaimRowResponse::InternalSwap(CMsgClientToGCBingoClaimRowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoClaimRowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[10]);
}

// ===================================================================

class CMsgClientToGCBingoDevRerollCard::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoDevRerollCard>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCBingoDevRerollCard::CMsgClientToGCBingoDevRerollCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoDevRerollCard)
}
CMsgClientToGCBingoDevRerollCard::CMsgClientToGCBingoDevRerollCard(const CMsgClientToGCBingoDevRerollCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoDevRerollCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.league_phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.league_phase_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoDevRerollCard)
}

inline void CMsgClientToGCBingoDevRerollCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.league_phase_){0u}
  };
}

CMsgClientToGCBingoDevRerollCard::~CMsgClientToGCBingoDevRerollCard() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoDevRerollCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoDevRerollCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCBingoDevRerollCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoDevRerollCard::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoDevRerollCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_phase_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.league_phase_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoDevRerollCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_league_phase(&has_bits);
          _impl_.league_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoDevRerollCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoDevRerollCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 league_phase = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoDevRerollCard)
  return target;
}

size_t CMsgClientToGCBingoDevRerollCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoDevRerollCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 league_phase = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoDevRerollCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoDevRerollCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoDevRerollCard::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoDevRerollCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoDevRerollCard*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoDevRerollCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoDevRerollCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_phase_ = from._impl_.league_phase_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoDevRerollCard::CopyFrom(const CMsgClientToGCBingoDevRerollCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoDevRerollCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoDevRerollCard::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoDevRerollCard::InternalSwap(CMsgClientToGCBingoDevRerollCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoDevRerollCard, _impl_.league_phase_)
      + sizeof(CMsgClientToGCBingoDevRerollCard::_impl_.league_phase_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCBingoDevRerollCard, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoDevRerollCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[11]);
}

// ===================================================================

class CMsgClientToGCBingoDevRerollCardResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCBingoDevRerollCardResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCBingoDevRerollCardResponse::CMsgClientToGCBingoDevRerollCardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCBingoDevRerollCardResponse)
}
CMsgClientToGCBingoDevRerollCardResponse::CMsgClientToGCBingoDevRerollCardResponse(const CMsgClientToGCBingoDevRerollCardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCBingoDevRerollCardResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCBingoDevRerollCardResponse)
}

inline void CMsgClientToGCBingoDevRerollCardResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCBingoDevRerollCardResponse::~CMsgClientToGCBingoDevRerollCardResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCBingoDevRerollCardResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCBingoDevRerollCardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCBingoDevRerollCardResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCBingoDevRerollCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCBingoDevRerollCardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCBingoDevRerollCardResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCBingoDevRerollCardResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCBingoDevRerollCardResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCBingoDevRerollCardResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCBingoDevRerollCardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCBingoDevRerollCardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCBingoDevRerollCardResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCBingoDevRerollCardResponse)
  return target;
}

size_t CMsgClientToGCBingoDevRerollCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCBingoDevRerollCardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCBingoDevRerollCardResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCBingoDevRerollCardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCBingoDevRerollCardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCBingoDevRerollCardResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCBingoDevRerollCardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCBingoDevRerollCardResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCBingoDevRerollCardResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCBingoDevRerollCardResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCBingoDevRerollCardResponse::CopyFrom(const CMsgClientToGCBingoDevRerollCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCBingoDevRerollCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCBingoDevRerollCardResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCBingoDevRerollCardResponse::InternalSwap(CMsgClientToGCBingoDevRerollCardResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCBingoDevRerollCardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbingo_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbingo_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgBingoSquare*
Arena::CreateMaybeMessage< ::CMsgBingoSquare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBingoSquare >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBingoUserData*
Arena::CreateMaybeMessage< ::CMsgBingoUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBingoUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoGetUserData*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoGetUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoGetUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoGetUserDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoGetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoGetUserDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBingoIndividualStatData*
Arena::CreateMaybeMessage< ::CMsgBingoIndividualStatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBingoIndividualStatData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBingoStatsData*
Arena::CreateMaybeMessage< ::CMsgBingoStatsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBingoStatsData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoGetStatsData*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoGetStatsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoGetStatsData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoGetStatsDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoGetStatsDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoGetStatsDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientBingoUserDataUpdated*
Arena::CreateMaybeMessage< ::CMsgGCToClientBingoUserDataUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientBingoUserDataUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoClaimRow*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoClaimRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoClaimRow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoClaimRowResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoClaimRowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoClaimRowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoDevRerollCard*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoDevRerollCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoDevRerollCard >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCBingoDevRerollCardResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCBingoDevRerollCardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCBingoDevRerollCardResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
